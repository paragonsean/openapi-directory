/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivitiesType;
import org.openapitools.client.model.ActivityType;
import org.openapitools.client.model.AttachInstancesQuery;
import org.openapitools.client.model.AttachLoadBalancerTargetGroupsType;
import org.openapitools.client.model.AttachLoadBalancersType;
import org.openapitools.client.model.AttachTrafficSourcesType;
import org.openapitools.client.model.AutoScalingGroupNamesType;
import org.openapitools.client.model.AutoScalingGroupsType;
import org.openapitools.client.model.AutoScalingInstancesType;
import org.openapitools.client.model.BatchDeleteScheduledActionAnswer;
import org.openapitools.client.model.BatchDeleteScheduledActionType;
import org.openapitools.client.model.BatchPutScheduledUpdateGroupActionAnswer;
import org.openapitools.client.model.BatchPutScheduledUpdateGroupActionType;
import org.openapitools.client.model.BlockDeviceMapping;
import org.openapitools.client.model.CancelInstanceRefreshAnswer;
import org.openapitools.client.model.CancelInstanceRefreshType;
import org.openapitools.client.model.CompleteLifecycleActionType;
import org.openapitools.client.model.CreateAutoScalingGroupType;
import org.openapitools.client.model.CreateLaunchConfigurationType;
import org.openapitools.client.model.CreateOrUpdateTagsType;
import org.openapitools.client.model.DeleteAutoScalingGroupType;
import org.openapitools.client.model.DeleteLifecycleHookType;
import org.openapitools.client.model.DeleteNotificationConfigurationType;
import org.openapitools.client.model.DeletePolicyType;
import org.openapitools.client.model.DeleteScheduledActionType;
import org.openapitools.client.model.DeleteTagsType;
import org.openapitools.client.model.DeleteWarmPoolType;
import org.openapitools.client.model.DescribeAccountLimitsAnswer;
import org.openapitools.client.model.DescribeAdjustmentTypesAnswer;
import org.openapitools.client.model.DescribeAutoScalingInstancesType;
import org.openapitools.client.model.DescribeAutoScalingNotificationTypesAnswer;
import org.openapitools.client.model.DescribeInstanceRefreshesAnswer;
import org.openapitools.client.model.DescribeInstanceRefreshesType;
import org.openapitools.client.model.DescribeLifecycleHookTypesAnswer;
import org.openapitools.client.model.DescribeLifecycleHooksAnswer;
import org.openapitools.client.model.DescribeLifecycleHooksType;
import org.openapitools.client.model.DescribeLoadBalancerTargetGroupsRequest;
import org.openapitools.client.model.DescribeLoadBalancerTargetGroupsResponse;
import org.openapitools.client.model.DescribeLoadBalancersRequest;
import org.openapitools.client.model.DescribeLoadBalancersResponse;
import org.openapitools.client.model.DescribeMetricCollectionTypesAnswer;
import org.openapitools.client.model.DescribeNotificationConfigurationsAnswer;
import org.openapitools.client.model.DescribeNotificationConfigurationsType;
import org.openapitools.client.model.DescribePoliciesType;
import org.openapitools.client.model.DescribeScalingActivitiesType;
import org.openapitools.client.model.DescribeScheduledActionsType;
import org.openapitools.client.model.DescribeTagsType;
import org.openapitools.client.model.DescribeTerminationPolicyTypesAnswer;
import org.openapitools.client.model.DescribeTrafficSourcesRequest;
import org.openapitools.client.model.DescribeTrafficSourcesResponse;
import org.openapitools.client.model.DescribeWarmPoolAnswer;
import org.openapitools.client.model.DescribeWarmPoolType;
import org.openapitools.client.model.DetachInstancesAnswer;
import org.openapitools.client.model.DetachInstancesQuery;
import org.openapitools.client.model.DetachLoadBalancerTargetGroupsType;
import org.openapitools.client.model.DetachLoadBalancersType;
import org.openapitools.client.model.DetachTrafficSourcesType;
import org.openapitools.client.model.DisableMetricsCollectionQuery;
import org.openapitools.client.model.EnableMetricsCollectionQuery;
import org.openapitools.client.model.EnterStandbyAnswer;
import org.openapitools.client.model.EnterStandbyQuery;
import org.openapitools.client.model.ExecutePolicyType;
import org.openapitools.client.model.ExitStandbyAnswer;
import org.openapitools.client.model.ExitStandbyQuery;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.GETCreateAutoScalingGroupLaunchTemplateParameter;
import org.openapitools.client.model.GETCreateAutoScalingGroupMixedInstancesPolicyParameter;
import org.openapitools.client.model.GETCreateLaunchConfigurationInstanceMonitoringParameter;
import org.openapitools.client.model.GETCreateLaunchConfigurationMetadataOptionsParameter;
import org.openapitools.client.model.GETPutScalingPolicyPredictiveScalingConfigurationParameter;
import org.openapitools.client.model.GETPutScalingPolicyTargetTrackingConfigurationParameter;
import org.openapitools.client.model.GETPutWarmPoolInstanceReusePolicyParameter;
import org.openapitools.client.model.GETStartInstanceRefreshDesiredConfigurationParameter;
import org.openapitools.client.model.GETStartInstanceRefreshPreferencesParameter;
import org.openapitools.client.model.GetPredictiveScalingForecastAnswer;
import org.openapitools.client.model.GetPredictiveScalingForecastType;
import org.openapitools.client.model.LaunchConfigurationNameType;
import org.openapitools.client.model.LaunchConfigurationNamesType;
import org.openapitools.client.model.LaunchConfigurationsType;
import org.openapitools.client.model.LifecycleHookSpecification;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PoliciesType;
import org.openapitools.client.model.PolicyARNType;
import org.openapitools.client.model.ProcessesType;
import org.openapitools.client.model.PutLifecycleHookType;
import org.openapitools.client.model.PutNotificationConfigurationType;
import org.openapitools.client.model.PutScalingPolicyType;
import org.openapitools.client.model.PutScheduledUpdateGroupActionType;
import org.openapitools.client.model.PutWarmPoolType;
import org.openapitools.client.model.RecordLifecycleActionHeartbeatType;
import org.openapitools.client.model.RollbackInstanceRefreshAnswer;
import org.openapitools.client.model.RollbackInstanceRefreshType;
import org.openapitools.client.model.ScalingProcessQuery;
import org.openapitools.client.model.ScheduledActionsType;
import org.openapitools.client.model.ScheduledUpdateGroupActionRequest;
import org.openapitools.client.model.SetDesiredCapacityType;
import org.openapitools.client.model.SetInstanceHealthQuery;
import org.openapitools.client.model.SetInstanceProtectionQuery;
import org.openapitools.client.model.StartInstanceRefreshAnswer;
import org.openapitools.client.model.StartInstanceRefreshType;
import org.openapitools.client.model.StepAdjustment;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagsType;
import org.openapitools.client.model.TerminateInstanceInAutoScalingGroupType;
import org.openapitools.client.model.TrafficSourceIdentifier;
import org.openapitools.client.model.UpdateAutoScalingGroupType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETAttachInstances
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachInstancesCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AttachInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "InstanceIds", instanceIds));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAttachInstancesValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETAttachInstances(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAttachInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAttachInstances(Async)");
        }

        return gETAttachInstancesCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, _callback);

    }

    /**
     * 
     * &lt;p&gt;Attaches one or more EC2 instances to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html\&quot;&gt;Attach EC2 instances to your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void gETAttachInstances(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds) throws ApiException {
        gETAttachInstancesWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds);
    }

    /**
     * 
     * &lt;p&gt;Attaches one or more EC2 instances to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html\&quot;&gt;Attach EC2 instances to your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETAttachInstancesWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds) throws ApiException {
        okhttp3.Call localVarCall = gETAttachInstancesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Attaches one or more EC2 instances to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html\&quot;&gt;Attach EC2 instances to your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachInstancesAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAttachInstancesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAttachLoadBalancerTargetGroups
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param targetGroupARNs The Amazon Resource Names (ARNs) of the target groups. You can specify up to 10 target groups. To get the ARN of a target group, use the Elastic Load Balancing &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html\&quot;&gt;DescribeTargetGroups&lt;/a&gt; API operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachLoadBalancerTargetGroupsCall(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AttachLoadBalancerTargetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (targetGroupARNs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TargetGroupARNs", targetGroupARNs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAttachLoadBalancerTargetGroupsValidateBeforeCall(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETAttachLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'targetGroupARNs' is set
        if (targetGroupARNs == null) {
            throw new ApiException("Missing the required parameter 'targetGroupARNs' when calling gETAttachLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAttachLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAttachLoadBalancerTargetGroups(Async)");
        }

        return gETAttachLoadBalancerTargetGroupsCall(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more target groups to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is used with the following load balancer types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer - Operates at the network layer (layer 3).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To describe the target groups for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API. To detach the target group from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing target groups or Classic Load Balancers from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param targetGroupARNs The Amazon Resource Names (ARNs) of the target groups. You can specify up to 10 target groups. To get the ARN of a target group, use the Elastic Load Balancing &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html\&quot;&gt;DescribeTargetGroups&lt;/a&gt; API operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public Object gETAttachLoadBalancerTargetGroups(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETAttachLoadBalancerTargetGroupsWithHttpInfo(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more target groups to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is used with the following load balancer types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer - Operates at the network layer (layer 3).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To describe the target groups for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API. To detach the target group from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing target groups or Classic Load Balancers from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param targetGroupARNs The Amazon Resource Names (ARNs) of the target groups. You can specify up to 10 target groups. To get the ARN of a target group, use the Elastic Load Balancing &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html\&quot;&gt;DescribeTargetGroups&lt;/a&gt; API operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETAttachLoadBalancerTargetGroupsWithHttpInfo(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAttachLoadBalancerTargetGroupsValidateBeforeCall(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more target groups to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is used with the following load balancer types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer - Operates at the network layer (layer 3).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To describe the target groups for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API. To detach the target group from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing target groups or Classic Load Balancers from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param targetGroupARNs The Amazon Resource Names (ARNs) of the target groups. You can specify up to 10 target groups. To get the ARN of a target group, use the Elastic Load Balancing &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html\&quot;&gt;DescribeTargetGroups&lt;/a&gt; API operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachLoadBalancerTargetGroupsAsync(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAttachLoadBalancerTargetGroupsValidateBeforeCall(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAttachLoadBalancers
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param loadBalancerNames The names of the load balancers. You can specify up to 10 load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachLoadBalancersCall(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AttachLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (loadBalancerNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LoadBalancerNames", loadBalancerNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAttachLoadBalancersValidateBeforeCall(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETAttachLoadBalancers(Async)");
        }

        // verify the required parameter 'loadBalancerNames' is set
        if (loadBalancerNames == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerNames' when calling gETAttachLoadBalancers(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAttachLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAttachLoadBalancers(Async)");
        }

        return gETAttachLoadBalancersCall(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more Classic Load Balancers to the specified Auto Scaling group. Amazon EC2 Auto Scaling registers the running instances with these Classic Load Balancers.&lt;/p&gt; &lt;p&gt;To describe the load balancers for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API. To detach a load balancer from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancers&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing Classic Load Balancers or target groups from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param loadBalancerNames The names of the load balancers. You can specify up to 10 load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public Object gETAttachLoadBalancers(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETAttachLoadBalancersWithHttpInfo(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more Classic Load Balancers to the specified Auto Scaling group. Amazon EC2 Auto Scaling registers the running instances with these Classic Load Balancers.&lt;/p&gt; &lt;p&gt;To describe the load balancers for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API. To detach a load balancer from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancers&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing Classic Load Balancers or target groups from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param loadBalancerNames The names of the load balancers. You can specify up to 10 load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETAttachLoadBalancersWithHttpInfo(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAttachLoadBalancersValidateBeforeCall(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more Classic Load Balancers to the specified Auto Scaling group. Amazon EC2 Auto Scaling registers the running instances with these Classic Load Balancers.&lt;/p&gt; &lt;p&gt;To describe the load balancers for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API. To detach a load balancer from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancers&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing Classic Load Balancers or target groups from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param loadBalancerNames The names of the load balancers. You can specify up to 10 load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachLoadBalancersAsync(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAttachLoadBalancersValidateBeforeCall(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAttachTrafficSources
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param trafficSources The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachTrafficSourcesCall(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AttachTrafficSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (trafficSources != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TrafficSources", trafficSources));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAttachTrafficSourcesValidateBeforeCall(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETAttachTrafficSources(Async)");
        }

        // verify the required parameter 'trafficSources' is set
        if (trafficSources == null) {
            throw new ApiException("Missing the required parameter 'trafficSources' when calling gETAttachTrafficSources(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAttachTrafficSources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAttachTrafficSources(Async)");
        }

        return gETAttachTrafficSourcesCall(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Attaches one or more traffic sources to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use any of the following as traffic sources for an Auto Scaling group:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Classic Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;VPC Lattice&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is additive and does not detach existing traffic sources from the Auto Scaling group. &lt;/p&gt; &lt;p&gt;After the operation completes, use the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API to return details about the state of the attachments between traffic sources and your Auto Scaling group. To detach a traffic source from the Auto Scaling group, call the &lt;a&gt;DetachTrafficSources&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param trafficSources The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public Object gETAttachTrafficSources(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETAttachTrafficSourcesWithHttpInfo(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Attaches one or more traffic sources to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use any of the following as traffic sources for an Auto Scaling group:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Classic Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;VPC Lattice&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is additive and does not detach existing traffic sources from the Auto Scaling group. &lt;/p&gt; &lt;p&gt;After the operation completes, use the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API to return details about the state of the attachments between traffic sources and your Auto Scaling group. To detach a traffic source from the Auto Scaling group, call the &lt;a&gt;DetachTrafficSources&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param trafficSources The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETAttachTrafficSourcesWithHttpInfo(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAttachTrafficSourcesValidateBeforeCall(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Attaches one or more traffic sources to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use any of the following as traffic sources for an Auto Scaling group:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Classic Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;VPC Lattice&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is additive and does not detach existing traffic sources from the Auto Scaling group. &lt;/p&gt; &lt;p&gt;After the operation completes, use the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API to return details about the state of the attachments between traffic sources and your Auto Scaling group. To detach a traffic source from the Auto Scaling group, call the &lt;a&gt;DetachTrafficSources&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param trafficSources The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAttachTrafficSourcesAsync(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAttachTrafficSourcesValidateBeforeCall(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETBatchDeleteScheduledAction
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionNames The names of the scheduled actions to delete. The maximum number allowed is 50.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchDeleteScheduledActionCall(String autoScalingGroupName, List<String> scheduledActionNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=BatchDeleteScheduledAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (scheduledActionNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ScheduledActionNames", scheduledActionNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETBatchDeleteScheduledActionValidateBeforeCall(String autoScalingGroupName, List<String> scheduledActionNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETBatchDeleteScheduledAction(Async)");
        }

        // verify the required parameter 'scheduledActionNames' is set
        if (scheduledActionNames == null) {
            throw new ApiException("Missing the required parameter 'scheduledActionNames' when calling gETBatchDeleteScheduledAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETBatchDeleteScheduledAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETBatchDeleteScheduledAction(Async)");
        }

        return gETBatchDeleteScheduledActionCall(autoScalingGroupName, scheduledActionNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes one or more scheduled actions for the specified Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionNames The names of the scheduled actions to delete. The maximum number allowed is 50.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchDeleteScheduledActionAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public BatchDeleteScheduledActionAnswer gETBatchDeleteScheduledAction(String autoScalingGroupName, List<String> scheduledActionNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchDeleteScheduledActionAnswer> localVarResp = gETBatchDeleteScheduledActionWithHttpInfo(autoScalingGroupName, scheduledActionNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes one or more scheduled actions for the specified Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionNames The names of the scheduled actions to delete. The maximum number allowed is 50.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchDeleteScheduledActionAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchDeleteScheduledActionAnswer> gETBatchDeleteScheduledActionWithHttpInfo(String autoScalingGroupName, List<String> scheduledActionNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETBatchDeleteScheduledActionValidateBeforeCall(autoScalingGroupName, scheduledActionNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchDeleteScheduledActionAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes one or more scheduled actions for the specified Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionNames The names of the scheduled actions to delete. The maximum number allowed is 50.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchDeleteScheduledActionAsync(String autoScalingGroupName, List<String> scheduledActionNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchDeleteScheduledActionAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETBatchDeleteScheduledActionValidateBeforeCall(autoScalingGroupName, scheduledActionNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchDeleteScheduledActionAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETBatchPutScheduledUpdateGroupAction
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledUpdateGroupActions One or more scheduled actions. The maximum number allowed is 50. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchPutScheduledUpdateGroupActionCall(String autoScalingGroupName, List<ScheduledUpdateGroupActionRequest> scheduledUpdateGroupActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=BatchPutScheduledUpdateGroupAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (scheduledUpdateGroupActions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ScheduledUpdateGroupActions", scheduledUpdateGroupActions));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETBatchPutScheduledUpdateGroupActionValidateBeforeCall(String autoScalingGroupName, List<ScheduledUpdateGroupActionRequest> scheduledUpdateGroupActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETBatchPutScheduledUpdateGroupAction(Async)");
        }

        // verify the required parameter 'scheduledUpdateGroupActions' is set
        if (scheduledUpdateGroupActions == null) {
            throw new ApiException("Missing the required parameter 'scheduledUpdateGroupActions' when calling gETBatchPutScheduledUpdateGroupAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETBatchPutScheduledUpdateGroupAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETBatchPutScheduledUpdateGroupAction(Async)");
        }

        return gETBatchPutScheduledUpdateGroupActionCall(autoScalingGroupName, scheduledUpdateGroupActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates or updates one or more scheduled scaling actions for an Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledUpdateGroupActions One or more scheduled actions. The maximum number allowed is 50. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchPutScheduledUpdateGroupActionAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public BatchPutScheduledUpdateGroupActionAnswer gETBatchPutScheduledUpdateGroupAction(String autoScalingGroupName, List<ScheduledUpdateGroupActionRequest> scheduledUpdateGroupActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchPutScheduledUpdateGroupActionAnswer> localVarResp = gETBatchPutScheduledUpdateGroupActionWithHttpInfo(autoScalingGroupName, scheduledUpdateGroupActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates one or more scheduled scaling actions for an Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledUpdateGroupActions One or more scheduled actions. The maximum number allowed is 50. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchPutScheduledUpdateGroupActionAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPutScheduledUpdateGroupActionAnswer> gETBatchPutScheduledUpdateGroupActionWithHttpInfo(String autoScalingGroupName, List<ScheduledUpdateGroupActionRequest> scheduledUpdateGroupActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETBatchPutScheduledUpdateGroupActionValidateBeforeCall(autoScalingGroupName, scheduledUpdateGroupActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchPutScheduledUpdateGroupActionAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates one or more scheduled scaling actions for an Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledUpdateGroupActions One or more scheduled actions. The maximum number allowed is 50. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchPutScheduledUpdateGroupActionAsync(String autoScalingGroupName, List<ScheduledUpdateGroupActionRequest> scheduledUpdateGroupActions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchPutScheduledUpdateGroupActionAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETBatchPutScheduledUpdateGroupActionValidateBeforeCall(autoScalingGroupName, scheduledUpdateGroupActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchPutScheduledUpdateGroupActionAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCancelInstanceRefresh
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCancelInstanceRefreshCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CancelInstanceRefresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCancelInstanceRefreshValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETCancelInstanceRefresh(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCancelInstanceRefresh(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCancelInstanceRefresh(Async)");
        }

        return gETCancelInstanceRefreshCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels an instance refresh or rollback that is in progress. If an instance refresh or rollback is not in progress, an &lt;code&gt;ActiveInstanceRefreshNotFound&lt;/code&gt; error occurs.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;When you cancel an instance refresh, this does not roll back any changes that it made. Use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API to roll back instead.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CancelInstanceRefreshAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CancelInstanceRefreshAnswer gETCancelInstanceRefresh(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CancelInstanceRefreshAnswer> localVarResp = gETCancelInstanceRefreshWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels an instance refresh or rollback that is in progress. If an instance refresh or rollback is not in progress, an &lt;code&gt;ActiveInstanceRefreshNotFound&lt;/code&gt; error occurs.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;When you cancel an instance refresh, this does not roll back any changes that it made. Use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API to roll back instead.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CancelInstanceRefreshAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelInstanceRefreshAnswer> gETCancelInstanceRefreshWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETCancelInstanceRefreshValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CancelInstanceRefreshAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels an instance refresh or rollback that is in progress. If an instance refresh or rollback is not in progress, an &lt;code&gt;ActiveInstanceRefreshNotFound&lt;/code&gt; error occurs.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;When you cancel an instance refresh, this does not roll back any changes that it made. Use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API to roll back instead.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCancelInstanceRefreshAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CancelInstanceRefreshAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCancelInstanceRefreshValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CancelInstanceRefreshAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCompleteLifecycleAction
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param lifecycleActionResult The action for the group to take. You can specify either &lt;code&gt;CONTINUE&lt;/code&gt; or &lt;code&gt;ABANDON&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleActionToken A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook. (optional)
     * @param instanceId The ID of the instance. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCompleteLifecycleActionCall(String lifecycleHookName, String autoScalingGroupName, String lifecycleActionResult, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CompleteLifecycleAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lifecycleHookName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LifecycleHookName", lifecycleHookName));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (lifecycleActionToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LifecycleActionToken", lifecycleActionToken));
        }

        if (lifecycleActionResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LifecycleActionResult", lifecycleActionResult));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCompleteLifecycleActionValidateBeforeCall(String lifecycleHookName, String autoScalingGroupName, String lifecycleActionResult, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifecycleHookName' is set
        if (lifecycleHookName == null) {
            throw new ApiException("Missing the required parameter 'lifecycleHookName' when calling gETCompleteLifecycleAction(Async)");
        }

        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETCompleteLifecycleAction(Async)");
        }

        // verify the required parameter 'lifecycleActionResult' is set
        if (lifecycleActionResult == null) {
            throw new ApiException("Missing the required parameter 'lifecycleActionResult' when calling gETCompleteLifecycleAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCompleteLifecycleAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCompleteLifecycleAction(Async)");
        }

        return gETCompleteLifecycleActionCall(lifecycleHookName, autoScalingGroupName, lifecycleActionResult, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Completes the lifecycle action for the specified token or instance with the specified result.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/completing-lifecycle-hooks.html\&quot;&gt;Complete a lifecycle action&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param lifecycleActionResult The action for the group to take. You can specify either &lt;code&gt;CONTINUE&lt;/code&gt; or &lt;code&gt;ABANDON&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleActionToken A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook. (optional)
     * @param instanceId The ID of the instance. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETCompleteLifecycleAction(String lifecycleHookName, String autoScalingGroupName, String lifecycleActionResult, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId) throws ApiException {
        ApiResponse<Object> localVarResp = gETCompleteLifecycleActionWithHttpInfo(lifecycleHookName, autoScalingGroupName, lifecycleActionResult, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Completes the lifecycle action for the specified token or instance with the specified result.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/completing-lifecycle-hooks.html\&quot;&gt;Complete a lifecycle action&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param lifecycleActionResult The action for the group to take. You can specify either &lt;code&gt;CONTINUE&lt;/code&gt; or &lt;code&gt;ABANDON&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleActionToken A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook. (optional)
     * @param instanceId The ID of the instance. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETCompleteLifecycleActionWithHttpInfo(String lifecycleHookName, String autoScalingGroupName, String lifecycleActionResult, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId) throws ApiException {
        okhttp3.Call localVarCall = gETCompleteLifecycleActionValidateBeforeCall(lifecycleHookName, autoScalingGroupName, lifecycleActionResult, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Completes the lifecycle action for the specified token or instance with the specified result.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/completing-lifecycle-hooks.html\&quot;&gt;Complete a lifecycle action&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param lifecycleActionResult The action for the group to take. You can specify either &lt;code&gt;CONTINUE&lt;/code&gt; or &lt;code&gt;ABANDON&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleActionToken A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook. (optional)
     * @param instanceId The ID of the instance. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCompleteLifecycleActionAsync(String lifecycleHookName, String autoScalingGroupName, String lifecycleActionResult, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCompleteLifecycleActionValidateBeforeCall(lifecycleHookName, autoScalingGroupName, lifecycleActionResult, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateAutoScalingGroup
     * @param autoScalingGroupName &lt;p&gt;The name of the Auto Scaling group. This name must be unique per Region per account.&lt;/p&gt; &lt;p&gt;The name can contain any ASCII character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot use a colon (:) in the name.&lt;/p&gt; &lt;/note&gt; (required)
     * @param minSize The minimum size of the group. (required)
     * @param maxSize &lt;p&gt;The maximum size of the group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above &lt;code&gt;MaxSize&lt;/code&gt; to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above &lt;code&gt;MaxSize&lt;/code&gt; by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationName &lt;p&gt;The name of the launch configuration to use to launch instances. &lt;/p&gt; &lt;p&gt;Conditional: You must specify either a launch template (&lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;) or a launch configuration (&lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;InstanceId&lt;/code&gt;).&lt;/p&gt; (optional)
     * @param launchTemplate &lt;p&gt;Information used to specify the launch template and version to use to launch instances. &lt;/p&gt; &lt;p&gt;Conditional: You must specify either a launch template (&lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;) or a launch configuration (&lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;InstanceId&lt;/code&gt;).&lt;/p&gt; &lt;note&gt; &lt;p&gt;The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html\&quot;&gt;Creating a launch template for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param mixedInstancesPolicy The mixed instances policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html\&quot;&gt;Auto Scaling groups with multiple instance types and purchase options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param instanceId The ID of the instance used to base the launch configuration on. If specified, Amazon EC2 Auto Scaling uses the configuration values from the specified instance to create a new launch configuration. To get the instance ID, use the Amazon EC2 &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\&quot;&gt;DescribeInstances&lt;/a&gt; API operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html\&quot;&gt;Creating an Auto Scaling group using an EC2 instance&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure auto scaling. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group. (optional)
     * @param defaultCooldown &lt;p&gt; &lt;i&gt;Only needed if you use simple scaling policies.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;300&lt;/code&gt; seconds&lt;/p&gt; (optional)
     * @param availabilityZones A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; property, or for attaching a network interface when an existing network interface ID is specified in a launch template. (optional)
     * @param loadBalancerNames A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify the &lt;code&gt;TargetGroupARNs&lt;/code&gt; property instead. (optional)
     * @param targetGroupARNs The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group. Instances are registered as targets with the target groups. The target groups receive incoming traffic and route requests to one or more registered targets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param healthCheckType &lt;p&gt;A comma-separated value string of one or more health check types.&lt;/p&gt; &lt;p&gt;The valid values are &lt;code&gt;EC2&lt;/code&gt;, &lt;code&gt;ELB&lt;/code&gt;, and &lt;code&gt;VPC_LATTICE&lt;/code&gt;. &lt;code&gt;EC2&lt;/code&gt; is the default health check and cannot be disabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Only specify &lt;code&gt;EC2&lt;/code&gt; if you must clear a value that was previously set.&lt;/p&gt; (optional)
     * @param healthCheckGracePeriod &lt;p&gt;The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the &lt;code&gt;InService&lt;/code&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html\&quot;&gt;Set the health check grace period for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;0&lt;/code&gt; seconds&lt;/p&gt; (optional)
     * @param placementGroup &lt;p&gt;The name of the placement group into which to launch your instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;i&gt;cluster&lt;/i&gt; placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param vpCZoneIdentifier A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If you specify &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; with &lt;code&gt;AvailabilityZones&lt;/code&gt;, the subnets that you specify must reside in those Availability Zones. (optional)
     * @param terminationPolicies &lt;p&gt;A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the order that you list them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;Default&lt;/code&gt; | &lt;code&gt;AllocationStrategy&lt;/code&gt; | &lt;code&gt;ClosestToNextInstanceHour&lt;/code&gt; | &lt;code&gt;NewestInstance&lt;/code&gt; | &lt;code&gt;OldestInstance&lt;/code&gt; | &lt;code&gt;OldestLaunchConfiguration&lt;/code&gt; | &lt;code&gt;OldestLaunchTemplate&lt;/code&gt; | &lt;code&gt;arn:aws:lambda:region:account-id:function:my-function:my-alias&lt;/code&gt; &lt;/p&gt; (optional)
     * @param newInstancesProtectedFromScaleIn Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param capacityRebalance Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html\&quot;&gt;Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions&lt;/a&gt; in the in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param lifecycleHookSpecificationList One or more lifecycle hooks to add to the Auto Scaling group before instances are launched. (optional)
     * @param tags One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param serviceLinkedRoleARN The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services service on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named &lt;code&gt;AWSServiceRoleForAutoScaling&lt;/code&gt;, which it creates if it does not exist. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html\&quot;&gt;Service-linked roles&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param maxInstanceLifetime The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html\&quot;&gt;Replacing Auto Scaling instances based on maximum instance lifetime&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param context Reserved. (optional)
     * @param desiredCapacityType &lt;p&gt;The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports &lt;code&gt;DesiredCapacityType&lt;/code&gt; for attribute-based instance type selection only. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\&quot;&gt;Creating an Auto Scaling group using attribute-based instance type selection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling specifies &lt;code&gt;units&lt;/code&gt;, which translates into number of instances.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;units&lt;/code&gt; | &lt;code&gt;vcpu&lt;/code&gt; | &lt;code&gt;memory-mib&lt;/code&gt; &lt;/p&gt; (optional)
     * @param defaultInstanceWarmup &lt;p&gt;The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html\&quot;&gt;Set the default instance warmup for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, &lt;i&gt;even if it is set to 0 seconds&lt;/i&gt;. To remove a value that you previously set, include the property but specify &lt;code&gt;-1&lt;/code&gt; for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of &lt;code&gt;0&lt;/code&gt; or other nominal value.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Default: None &lt;/p&gt; (optional)
     * @param trafficSources The list of traffic sources to attach to this Auto Scaling group. You can use any of the following as traffic sources for an Auto Scaling group: Classic Load Balancer, Application Load Balancer, Gateway Load Balancer, Network Load Balancer, and VPC Lattice. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateAutoScalingGroupCall(String autoScalingGroupName, Integer minSize, Integer maxSize, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, String instanceId, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, List<String> loadBalancerNames, List<String> targetGroupARNs, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, Boolean capacityRebalance, List<LifecycleHookSpecification> lifecycleHookSpecificationList, List<Tag> tags, String serviceLinkedRoleARN, Integer maxInstanceLifetime, String context, String desiredCapacityType, Integer defaultInstanceWarmup, List<TrafficSourceIdentifier> trafficSources, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateAutoScalingGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (launchConfigurationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LaunchConfigurationName", launchConfigurationName));
        }

        if (launchTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LaunchTemplate", launchTemplate));
        }

        if (mixedInstancesPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MixedInstancesPolicy", mixedInstancesPolicy));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (minSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MinSize", minSize));
        }

        if (maxSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxSize", maxSize));
        }

        if (desiredCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DesiredCapacity", desiredCapacity));
        }

        if (defaultCooldown != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefaultCooldown", defaultCooldown));
        }

        if (availabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AvailabilityZones", availabilityZones));
        }

        if (loadBalancerNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LoadBalancerNames", loadBalancerNames));
        }

        if (targetGroupARNs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TargetGroupARNs", targetGroupARNs));
        }

        if (healthCheckType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckType", healthCheckType));
        }

        if (healthCheckGracePeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckGracePeriod", healthCheckGracePeriod));
        }

        if (placementGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlacementGroup", placementGroup));
        }

        if (vpCZoneIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VPCZoneIdentifier", vpCZoneIdentifier));
        }

        if (terminationPolicies != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TerminationPolicies", terminationPolicies));
        }

        if (newInstancesProtectedFromScaleIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewInstancesProtectedFromScaleIn", newInstancesProtectedFromScaleIn));
        }

        if (capacityRebalance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CapacityRebalance", capacityRebalance));
        }

        if (lifecycleHookSpecificationList != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LifecycleHookSpecificationList", lifecycleHookSpecificationList));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (serviceLinkedRoleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceLinkedRoleARN", serviceLinkedRoleARN));
        }

        if (maxInstanceLifetime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxInstanceLifetime", maxInstanceLifetime));
        }

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Context", context));
        }

        if (desiredCapacityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DesiredCapacityType", desiredCapacityType));
        }

        if (defaultInstanceWarmup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefaultInstanceWarmup", defaultInstanceWarmup));
        }

        if (trafficSources != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TrafficSources", trafficSources));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateAutoScalingGroupValidateBeforeCall(String autoScalingGroupName, Integer minSize, Integer maxSize, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, String instanceId, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, List<String> loadBalancerNames, List<String> targetGroupARNs, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, Boolean capacityRebalance, List<LifecycleHookSpecification> lifecycleHookSpecificationList, List<Tag> tags, String serviceLinkedRoleARN, Integer maxInstanceLifetime, String context, String desiredCapacityType, Integer defaultInstanceWarmup, List<TrafficSourceIdentifier> trafficSources, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETCreateAutoScalingGroup(Async)");
        }

        // verify the required parameter 'minSize' is set
        if (minSize == null) {
            throw new ApiException("Missing the required parameter 'minSize' when calling gETCreateAutoScalingGroup(Async)");
        }

        // verify the required parameter 'maxSize' is set
        if (maxSize == null) {
            throw new ApiException("Missing the required parameter 'maxSize' when calling gETCreateAutoScalingGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateAutoScalingGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateAutoScalingGroup(Async)");
        }

        return gETCreateAutoScalingGroupCall(autoScalingGroupName, minSize, maxSize, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, instanceId, desiredCapacity, defaultCooldown, availabilityZones, loadBalancerNames, targetGroupARNs, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, capacityRebalance, lifecycleHookSpecificationList, tags, serviceLinkedRoleARN, maxInstanceLifetime, context, desiredCapacityType, defaultInstanceWarmup, trafficSources, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;b&gt;We strongly recommend using a launch template when calling this operation to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Creates an Auto Scaling group with the specified name and attributes. &lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For introductory exercises for creating an Auto Scaling group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/GettingStartedTutorial.html\&quot;&gt;Getting started with Amazon EC2 Auto Scaling&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-register-lbs-with-asg.html\&quot;&gt;Tutorial: Set up a scaled and load-balanced application&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html\&quot;&gt;Auto Scaling groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Every Auto Scaling group has three size properties (&lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, and &lt;code&gt;MinSize&lt;/code&gt;). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.&lt;/p&gt;
     * @param autoScalingGroupName &lt;p&gt;The name of the Auto Scaling group. This name must be unique per Region per account.&lt;/p&gt; &lt;p&gt;The name can contain any ASCII character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot use a colon (:) in the name.&lt;/p&gt; &lt;/note&gt; (required)
     * @param minSize The minimum size of the group. (required)
     * @param maxSize &lt;p&gt;The maximum size of the group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above &lt;code&gt;MaxSize&lt;/code&gt; to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above &lt;code&gt;MaxSize&lt;/code&gt; by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationName &lt;p&gt;The name of the launch configuration to use to launch instances. &lt;/p&gt; &lt;p&gt;Conditional: You must specify either a launch template (&lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;) or a launch configuration (&lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;InstanceId&lt;/code&gt;).&lt;/p&gt; (optional)
     * @param launchTemplate &lt;p&gt;Information used to specify the launch template and version to use to launch instances. &lt;/p&gt; &lt;p&gt;Conditional: You must specify either a launch template (&lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;) or a launch configuration (&lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;InstanceId&lt;/code&gt;).&lt;/p&gt; &lt;note&gt; &lt;p&gt;The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html\&quot;&gt;Creating a launch template for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param mixedInstancesPolicy The mixed instances policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html\&quot;&gt;Auto Scaling groups with multiple instance types and purchase options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param instanceId The ID of the instance used to base the launch configuration on. If specified, Amazon EC2 Auto Scaling uses the configuration values from the specified instance to create a new launch configuration. To get the instance ID, use the Amazon EC2 &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\&quot;&gt;DescribeInstances&lt;/a&gt; API operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html\&quot;&gt;Creating an Auto Scaling group using an EC2 instance&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure auto scaling. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group. (optional)
     * @param defaultCooldown &lt;p&gt; &lt;i&gt;Only needed if you use simple scaling policies.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;300&lt;/code&gt; seconds&lt;/p&gt; (optional)
     * @param availabilityZones A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; property, or for attaching a network interface when an existing network interface ID is specified in a launch template. (optional)
     * @param loadBalancerNames A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify the &lt;code&gt;TargetGroupARNs&lt;/code&gt; property instead. (optional)
     * @param targetGroupARNs The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group. Instances are registered as targets with the target groups. The target groups receive incoming traffic and route requests to one or more registered targets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param healthCheckType &lt;p&gt;A comma-separated value string of one or more health check types.&lt;/p&gt; &lt;p&gt;The valid values are &lt;code&gt;EC2&lt;/code&gt;, &lt;code&gt;ELB&lt;/code&gt;, and &lt;code&gt;VPC_LATTICE&lt;/code&gt;. &lt;code&gt;EC2&lt;/code&gt; is the default health check and cannot be disabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Only specify &lt;code&gt;EC2&lt;/code&gt; if you must clear a value that was previously set.&lt;/p&gt; (optional)
     * @param healthCheckGracePeriod &lt;p&gt;The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the &lt;code&gt;InService&lt;/code&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html\&quot;&gt;Set the health check grace period for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;0&lt;/code&gt; seconds&lt;/p&gt; (optional)
     * @param placementGroup &lt;p&gt;The name of the placement group into which to launch your instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;i&gt;cluster&lt;/i&gt; placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param vpCZoneIdentifier A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If you specify &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; with &lt;code&gt;AvailabilityZones&lt;/code&gt;, the subnets that you specify must reside in those Availability Zones. (optional)
     * @param terminationPolicies &lt;p&gt;A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the order that you list them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;Default&lt;/code&gt; | &lt;code&gt;AllocationStrategy&lt;/code&gt; | &lt;code&gt;ClosestToNextInstanceHour&lt;/code&gt; | &lt;code&gt;NewestInstance&lt;/code&gt; | &lt;code&gt;OldestInstance&lt;/code&gt; | &lt;code&gt;OldestLaunchConfiguration&lt;/code&gt; | &lt;code&gt;OldestLaunchTemplate&lt;/code&gt; | &lt;code&gt;arn:aws:lambda:region:account-id:function:my-function:my-alias&lt;/code&gt; &lt;/p&gt; (optional)
     * @param newInstancesProtectedFromScaleIn Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param capacityRebalance Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html\&quot;&gt;Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions&lt;/a&gt; in the in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param lifecycleHookSpecificationList One or more lifecycle hooks to add to the Auto Scaling group before instances are launched. (optional)
     * @param tags One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param serviceLinkedRoleARN The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services service on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named &lt;code&gt;AWSServiceRoleForAutoScaling&lt;/code&gt;, which it creates if it does not exist. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html\&quot;&gt;Service-linked roles&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param maxInstanceLifetime The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html\&quot;&gt;Replacing Auto Scaling instances based on maximum instance lifetime&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param context Reserved. (optional)
     * @param desiredCapacityType &lt;p&gt;The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports &lt;code&gt;DesiredCapacityType&lt;/code&gt; for attribute-based instance type selection only. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\&quot;&gt;Creating an Auto Scaling group using attribute-based instance type selection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling specifies &lt;code&gt;units&lt;/code&gt;, which translates into number of instances.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;units&lt;/code&gt; | &lt;code&gt;vcpu&lt;/code&gt; | &lt;code&gt;memory-mib&lt;/code&gt; &lt;/p&gt; (optional)
     * @param defaultInstanceWarmup &lt;p&gt;The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html\&quot;&gt;Set the default instance warmup for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, &lt;i&gt;even if it is set to 0 seconds&lt;/i&gt;. To remove a value that you previously set, include the property but specify &lt;code&gt;-1&lt;/code&gt; for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of &lt;code&gt;0&lt;/code&gt; or other nominal value.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Default: None &lt;/p&gt; (optional)
     * @param trafficSources The list of traffic sources to attach to this Auto Scaling group. You can use any of the following as traffic sources for an Auto Scaling group: Classic Load Balancer, Application Load Balancer, Gateway Load Balancer, Network Load Balancer, and VPC Lattice. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void gETCreateAutoScalingGroup(String autoScalingGroupName, Integer minSize, Integer maxSize, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, String instanceId, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, List<String> loadBalancerNames, List<String> targetGroupARNs, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, Boolean capacityRebalance, List<LifecycleHookSpecification> lifecycleHookSpecificationList, List<Tag> tags, String serviceLinkedRoleARN, Integer maxInstanceLifetime, String context, String desiredCapacityType, Integer defaultInstanceWarmup, List<TrafficSourceIdentifier> trafficSources) throws ApiException {
        gETCreateAutoScalingGroupWithHttpInfo(autoScalingGroupName, minSize, maxSize, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, instanceId, desiredCapacity, defaultCooldown, availabilityZones, loadBalancerNames, targetGroupARNs, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, capacityRebalance, lifecycleHookSpecificationList, tags, serviceLinkedRoleARN, maxInstanceLifetime, context, desiredCapacityType, defaultInstanceWarmup, trafficSources);
    }

    /**
     * 
     * &lt;p&gt; &lt;b&gt;We strongly recommend using a launch template when calling this operation to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Creates an Auto Scaling group with the specified name and attributes. &lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For introductory exercises for creating an Auto Scaling group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/GettingStartedTutorial.html\&quot;&gt;Getting started with Amazon EC2 Auto Scaling&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-register-lbs-with-asg.html\&quot;&gt;Tutorial: Set up a scaled and load-balanced application&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html\&quot;&gt;Auto Scaling groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Every Auto Scaling group has three size properties (&lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, and &lt;code&gt;MinSize&lt;/code&gt;). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.&lt;/p&gt;
     * @param autoScalingGroupName &lt;p&gt;The name of the Auto Scaling group. This name must be unique per Region per account.&lt;/p&gt; &lt;p&gt;The name can contain any ASCII character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot use a colon (:) in the name.&lt;/p&gt; &lt;/note&gt; (required)
     * @param minSize The minimum size of the group. (required)
     * @param maxSize &lt;p&gt;The maximum size of the group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above &lt;code&gt;MaxSize&lt;/code&gt; to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above &lt;code&gt;MaxSize&lt;/code&gt; by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationName &lt;p&gt;The name of the launch configuration to use to launch instances. &lt;/p&gt; &lt;p&gt;Conditional: You must specify either a launch template (&lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;) or a launch configuration (&lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;InstanceId&lt;/code&gt;).&lt;/p&gt; (optional)
     * @param launchTemplate &lt;p&gt;Information used to specify the launch template and version to use to launch instances. &lt;/p&gt; &lt;p&gt;Conditional: You must specify either a launch template (&lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;) or a launch configuration (&lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;InstanceId&lt;/code&gt;).&lt;/p&gt; &lt;note&gt; &lt;p&gt;The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html\&quot;&gt;Creating a launch template for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param mixedInstancesPolicy The mixed instances policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html\&quot;&gt;Auto Scaling groups with multiple instance types and purchase options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param instanceId The ID of the instance used to base the launch configuration on. If specified, Amazon EC2 Auto Scaling uses the configuration values from the specified instance to create a new launch configuration. To get the instance ID, use the Amazon EC2 &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\&quot;&gt;DescribeInstances&lt;/a&gt; API operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html\&quot;&gt;Creating an Auto Scaling group using an EC2 instance&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure auto scaling. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group. (optional)
     * @param defaultCooldown &lt;p&gt; &lt;i&gt;Only needed if you use simple scaling policies.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;300&lt;/code&gt; seconds&lt;/p&gt; (optional)
     * @param availabilityZones A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; property, or for attaching a network interface when an existing network interface ID is specified in a launch template. (optional)
     * @param loadBalancerNames A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify the &lt;code&gt;TargetGroupARNs&lt;/code&gt; property instead. (optional)
     * @param targetGroupARNs The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group. Instances are registered as targets with the target groups. The target groups receive incoming traffic and route requests to one or more registered targets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param healthCheckType &lt;p&gt;A comma-separated value string of one or more health check types.&lt;/p&gt; &lt;p&gt;The valid values are &lt;code&gt;EC2&lt;/code&gt;, &lt;code&gt;ELB&lt;/code&gt;, and &lt;code&gt;VPC_LATTICE&lt;/code&gt;. &lt;code&gt;EC2&lt;/code&gt; is the default health check and cannot be disabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Only specify &lt;code&gt;EC2&lt;/code&gt; if you must clear a value that was previously set.&lt;/p&gt; (optional)
     * @param healthCheckGracePeriod &lt;p&gt;The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the &lt;code&gt;InService&lt;/code&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html\&quot;&gt;Set the health check grace period for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;0&lt;/code&gt; seconds&lt;/p&gt; (optional)
     * @param placementGroup &lt;p&gt;The name of the placement group into which to launch your instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;i&gt;cluster&lt;/i&gt; placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param vpCZoneIdentifier A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If you specify &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; with &lt;code&gt;AvailabilityZones&lt;/code&gt;, the subnets that you specify must reside in those Availability Zones. (optional)
     * @param terminationPolicies &lt;p&gt;A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the order that you list them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;Default&lt;/code&gt; | &lt;code&gt;AllocationStrategy&lt;/code&gt; | &lt;code&gt;ClosestToNextInstanceHour&lt;/code&gt; | &lt;code&gt;NewestInstance&lt;/code&gt; | &lt;code&gt;OldestInstance&lt;/code&gt; | &lt;code&gt;OldestLaunchConfiguration&lt;/code&gt; | &lt;code&gt;OldestLaunchTemplate&lt;/code&gt; | &lt;code&gt;arn:aws:lambda:region:account-id:function:my-function:my-alias&lt;/code&gt; &lt;/p&gt; (optional)
     * @param newInstancesProtectedFromScaleIn Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param capacityRebalance Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html\&quot;&gt;Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions&lt;/a&gt; in the in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param lifecycleHookSpecificationList One or more lifecycle hooks to add to the Auto Scaling group before instances are launched. (optional)
     * @param tags One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param serviceLinkedRoleARN The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services service on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named &lt;code&gt;AWSServiceRoleForAutoScaling&lt;/code&gt;, which it creates if it does not exist. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html\&quot;&gt;Service-linked roles&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param maxInstanceLifetime The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html\&quot;&gt;Replacing Auto Scaling instances based on maximum instance lifetime&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param context Reserved. (optional)
     * @param desiredCapacityType &lt;p&gt;The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports &lt;code&gt;DesiredCapacityType&lt;/code&gt; for attribute-based instance type selection only. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\&quot;&gt;Creating an Auto Scaling group using attribute-based instance type selection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling specifies &lt;code&gt;units&lt;/code&gt;, which translates into number of instances.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;units&lt;/code&gt; | &lt;code&gt;vcpu&lt;/code&gt; | &lt;code&gt;memory-mib&lt;/code&gt; &lt;/p&gt; (optional)
     * @param defaultInstanceWarmup &lt;p&gt;The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html\&quot;&gt;Set the default instance warmup for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, &lt;i&gt;even if it is set to 0 seconds&lt;/i&gt;. To remove a value that you previously set, include the property but specify &lt;code&gt;-1&lt;/code&gt; for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of &lt;code&gt;0&lt;/code&gt; or other nominal value.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Default: None &lt;/p&gt; (optional)
     * @param trafficSources The list of traffic sources to attach to this Auto Scaling group. You can use any of the following as traffic sources for an Auto Scaling group: Classic Load Balancer, Application Load Balancer, Gateway Load Balancer, Network Load Balancer, and VPC Lattice. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETCreateAutoScalingGroupWithHttpInfo(String autoScalingGroupName, Integer minSize, Integer maxSize, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, String instanceId, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, List<String> loadBalancerNames, List<String> targetGroupARNs, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, Boolean capacityRebalance, List<LifecycleHookSpecification> lifecycleHookSpecificationList, List<Tag> tags, String serviceLinkedRoleARN, Integer maxInstanceLifetime, String context, String desiredCapacityType, Integer defaultInstanceWarmup, List<TrafficSourceIdentifier> trafficSources) throws ApiException {
        okhttp3.Call localVarCall = gETCreateAutoScalingGroupValidateBeforeCall(autoScalingGroupName, minSize, maxSize, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, instanceId, desiredCapacity, defaultCooldown, availabilityZones, loadBalancerNames, targetGroupARNs, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, capacityRebalance, lifecycleHookSpecificationList, tags, serviceLinkedRoleARN, maxInstanceLifetime, context, desiredCapacityType, defaultInstanceWarmup, trafficSources, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;b&gt;We strongly recommend using a launch template when calling this operation to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Creates an Auto Scaling group with the specified name and attributes. &lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For introductory exercises for creating an Auto Scaling group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/GettingStartedTutorial.html\&quot;&gt;Getting started with Amazon EC2 Auto Scaling&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-register-lbs-with-asg.html\&quot;&gt;Tutorial: Set up a scaled and load-balanced application&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html\&quot;&gt;Auto Scaling groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Every Auto Scaling group has three size properties (&lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, and &lt;code&gt;MinSize&lt;/code&gt;). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.&lt;/p&gt;
     * @param autoScalingGroupName &lt;p&gt;The name of the Auto Scaling group. This name must be unique per Region per account.&lt;/p&gt; &lt;p&gt;The name can contain any ASCII character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot use a colon (:) in the name.&lt;/p&gt; &lt;/note&gt; (required)
     * @param minSize The minimum size of the group. (required)
     * @param maxSize &lt;p&gt;The maximum size of the group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above &lt;code&gt;MaxSize&lt;/code&gt; to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above &lt;code&gt;MaxSize&lt;/code&gt; by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationName &lt;p&gt;The name of the launch configuration to use to launch instances. &lt;/p&gt; &lt;p&gt;Conditional: You must specify either a launch template (&lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;) or a launch configuration (&lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;InstanceId&lt;/code&gt;).&lt;/p&gt; (optional)
     * @param launchTemplate &lt;p&gt;Information used to specify the launch template and version to use to launch instances. &lt;/p&gt; &lt;p&gt;Conditional: You must specify either a launch template (&lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;) or a launch configuration (&lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;InstanceId&lt;/code&gt;).&lt;/p&gt; &lt;note&gt; &lt;p&gt;The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html\&quot;&gt;Creating a launch template for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param mixedInstancesPolicy The mixed instances policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html\&quot;&gt;Auto Scaling groups with multiple instance types and purchase options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param instanceId The ID of the instance used to base the launch configuration on. If specified, Amazon EC2 Auto Scaling uses the configuration values from the specified instance to create a new launch configuration. To get the instance ID, use the Amazon EC2 &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\&quot;&gt;DescribeInstances&lt;/a&gt; API operation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html\&quot;&gt;Creating an Auto Scaling group using an EC2 instance&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure auto scaling. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group. (optional)
     * @param defaultCooldown &lt;p&gt; &lt;i&gt;Only needed if you use simple scaling policies.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;300&lt;/code&gt; seconds&lt;/p&gt; (optional)
     * @param availabilityZones A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; property, or for attaching a network interface when an existing network interface ID is specified in a launch template. (optional)
     * @param loadBalancerNames A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify the &lt;code&gt;TargetGroupARNs&lt;/code&gt; property instead. (optional)
     * @param targetGroupARNs The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group. Instances are registered as targets with the target groups. The target groups receive incoming traffic and route requests to one or more registered targets. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param healthCheckType &lt;p&gt;A comma-separated value string of one or more health check types.&lt;/p&gt; &lt;p&gt;The valid values are &lt;code&gt;EC2&lt;/code&gt;, &lt;code&gt;ELB&lt;/code&gt;, and &lt;code&gt;VPC_LATTICE&lt;/code&gt;. &lt;code&gt;EC2&lt;/code&gt; is the default health check and cannot be disabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Only specify &lt;code&gt;EC2&lt;/code&gt; if you must clear a value that was previously set.&lt;/p&gt; (optional)
     * @param healthCheckGracePeriod &lt;p&gt;The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the &lt;code&gt;InService&lt;/code&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html\&quot;&gt;Set the health check grace period for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;0&lt;/code&gt; seconds&lt;/p&gt; (optional)
     * @param placementGroup &lt;p&gt;The name of the placement group into which to launch your instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;i&gt;cluster&lt;/i&gt; placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param vpCZoneIdentifier A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If you specify &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; with &lt;code&gt;AvailabilityZones&lt;/code&gt;, the subnets that you specify must reside in those Availability Zones. (optional)
     * @param terminationPolicies &lt;p&gt;A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the order that you list them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;Default&lt;/code&gt; | &lt;code&gt;AllocationStrategy&lt;/code&gt; | &lt;code&gt;ClosestToNextInstanceHour&lt;/code&gt; | &lt;code&gt;NewestInstance&lt;/code&gt; | &lt;code&gt;OldestInstance&lt;/code&gt; | &lt;code&gt;OldestLaunchConfiguration&lt;/code&gt; | &lt;code&gt;OldestLaunchTemplate&lt;/code&gt; | &lt;code&gt;arn:aws:lambda:region:account-id:function:my-function:my-alias&lt;/code&gt; &lt;/p&gt; (optional)
     * @param newInstancesProtectedFromScaleIn Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param capacityRebalance Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html\&quot;&gt;Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions&lt;/a&gt; in the in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param lifecycleHookSpecificationList One or more lifecycle hooks to add to the Auto Scaling group before instances are launched. (optional)
     * @param tags One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param serviceLinkedRoleARN The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services service on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named &lt;code&gt;AWSServiceRoleForAutoScaling&lt;/code&gt;, which it creates if it does not exist. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html\&quot;&gt;Service-linked roles&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param maxInstanceLifetime The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html\&quot;&gt;Replacing Auto Scaling instances based on maximum instance lifetime&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param context Reserved. (optional)
     * @param desiredCapacityType &lt;p&gt;The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports &lt;code&gt;DesiredCapacityType&lt;/code&gt; for attribute-based instance type selection only. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\&quot;&gt;Creating an Auto Scaling group using attribute-based instance type selection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling specifies &lt;code&gt;units&lt;/code&gt;, which translates into number of instances.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;units&lt;/code&gt; | &lt;code&gt;vcpu&lt;/code&gt; | &lt;code&gt;memory-mib&lt;/code&gt; &lt;/p&gt; (optional)
     * @param defaultInstanceWarmup &lt;p&gt;The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html\&quot;&gt;Set the default instance warmup for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, &lt;i&gt;even if it is set to 0 seconds&lt;/i&gt;. To remove a value that you previously set, include the property but specify &lt;code&gt;-1&lt;/code&gt; for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of &lt;code&gt;0&lt;/code&gt; or other nominal value.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Default: None &lt;/p&gt; (optional)
     * @param trafficSources The list of traffic sources to attach to this Auto Scaling group. You can use any of the following as traffic sources for an Auto Scaling group: Classic Load Balancer, Application Load Balancer, Gateway Load Balancer, Network Load Balancer, and VPC Lattice. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateAutoScalingGroupAsync(String autoScalingGroupName, Integer minSize, Integer maxSize, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, String instanceId, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, List<String> loadBalancerNames, List<String> targetGroupARNs, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, Boolean capacityRebalance, List<LifecycleHookSpecification> lifecycleHookSpecificationList, List<Tag> tags, String serviceLinkedRoleARN, Integer maxInstanceLifetime, String context, String desiredCapacityType, Integer defaultInstanceWarmup, List<TrafficSourceIdentifier> trafficSources, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateAutoScalingGroupValidateBeforeCall(autoScalingGroupName, minSize, maxSize, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, instanceId, desiredCapacity, defaultCooldown, availabilityZones, loadBalancerNames, targetGroupARNs, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, capacityRebalance, lifecycleHookSpecificationList, tags, serviceLinkedRoleARN, maxInstanceLifetime, context, desiredCapacityType, defaultInstanceWarmup, trafficSources, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateLaunchConfiguration
     * @param launchConfigurationName The name of the launch configuration. This name must be unique per Region per account. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param imageId &lt;p&gt;The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html\&quot;&gt;Finding a Linux AMI&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;InstanceId&lt;/code&gt;, an &lt;code&gt;ImageId&lt;/code&gt; is not required.&lt;/p&gt; (optional)
     * @param keyName The name of the key pair. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Amazon EC2 key pairs and Linux instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;. (optional)
     * @param securityGroups A list that contains the security group IDs to assign to the instances in the Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Control traffic to resources using security groups&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. (optional)
     * @param classicLinkVPCId Available for backward compatibility. (optional)
     * @param classicLinkVPCSecurityGroups Available for backward compatibility. (optional)
     * @param userData The user data to make available to the launched EC2 instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\&quot;&gt;Instance metadata and user data&lt;/a&gt; (Linux) and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html\&quot;&gt;Instance metadata and user data&lt;/a&gt; (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB. (optional)
     * @param instanceId &lt;p&gt;The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.&lt;/p&gt; &lt;p&gt;To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html\&quot;&gt;Creating a launch configuration using an EC2 instance&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param instanceType &lt;p&gt;Specifies the instance type of the EC2 instance. For information about available instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes\&quot;&gt;Available instance types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;InstanceId&lt;/code&gt;, an &lt;code&gt;InstanceType&lt;/code&gt; is not required.&lt;/p&gt; (optional)
     * @param kernelId &lt;p&gt;The ID of the kernel associated with the AMI.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\&quot;&gt;User provided kernels&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param ramdiskId &lt;p&gt;The ID of the RAM disk to select.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\&quot;&gt;User provided kernels&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param blockDeviceMappings The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html\&quot;&gt;Block device mappings&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;. (optional)
     * @param instanceMonitoring &lt;p&gt;Controls whether instances in this group are launched with detailed (&lt;code&gt;true&lt;/code&gt;) or basic (&lt;code&gt;false&lt;/code&gt;) monitoring.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;true&lt;/code&gt; (enabled).&lt;/p&gt; &lt;important&gt; &lt;p&gt;When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and your account is charged a fee. When you disable detailed monitoring, CloudWatch generates metrics every 5 minutes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html\&quot;&gt;Configure Monitoring for Auto Scaling Instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param spotPrice &lt;p&gt;The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-spot-instances.html\&quot;&gt;Request Spot Instances for fault-tolerant and flexible applications&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid Range: Minimum value of 0.001&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param iamInstanceProfile The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html\&quot;&gt;IAM role for applications that run on Amazon EC2 instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param ebsOptimized &lt;p&gt;Specifies whether the launch configuration is optimized for EBS I/O (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html\&quot;&gt;Amazon EBS-optimized instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param associatePublicIpAddress &lt;p&gt;Specifies whether to assign a public IPv4 address to the group&#39;s instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;true&lt;/code&gt;, each instance in the Auto Scaling group receives a unique public IPv4 address. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html\&quot;&gt;Launching Auto Scaling instances in a VPC&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify this property, you must specify at least one subnet for &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; when you create your group.&lt;/p&gt; (optional)
     * @param placementTenancy &lt;p&gt;The tenancy of the instance, either &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;dedicated&lt;/code&gt;. An instance with &lt;code&gt;dedicated&lt;/code&gt; tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to &lt;code&gt;default&lt;/code&gt;), you must set the value of this property to &lt;code&gt;dedicated&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html\&quot;&gt;Configuring instance tenancy with Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;PlacementTenancy&lt;/code&gt;, you must specify at least one subnet for &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; when you create your group.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;default&lt;/code&gt; | &lt;code&gt;dedicated&lt;/code&gt; &lt;/p&gt; (optional)
     * @param metadataOptions The metadata options for the instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds\&quot;&gt;Configuring the Instance Metadata Options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLaunchConfigurationCall(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String imageId, String keyName, List<String> securityGroups, String classicLinkVPCId, List<String> classicLinkVPCSecurityGroups, String userData, String instanceId, String instanceType, String kernelId, String ramdiskId, List<BlockDeviceMapping> blockDeviceMappings, GETCreateLaunchConfigurationInstanceMonitoringParameter instanceMonitoring, String spotPrice, String iamInstanceProfile, Boolean ebsOptimized, Boolean associatePublicIpAddress, String placementTenancy, GETCreateLaunchConfigurationMetadataOptionsParameter metadataOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateLaunchConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (launchConfigurationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LaunchConfigurationName", launchConfigurationName));
        }

        if (imageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ImageId", imageId));
        }

        if (keyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KeyName", keyName));
        }

        if (securityGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SecurityGroups", securityGroups));
        }

        if (classicLinkVPCId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClassicLinkVPCId", classicLinkVPCId));
        }

        if (classicLinkVPCSecurityGroups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ClassicLinkVPCSecurityGroups", classicLinkVPCSecurityGroups));
        }

        if (userData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserData", userData));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (instanceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceType", instanceType));
        }

        if (kernelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KernelId", kernelId));
        }

        if (ramdiskId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RamdiskId", ramdiskId));
        }

        if (blockDeviceMappings != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "BlockDeviceMappings", blockDeviceMappings));
        }

        if (instanceMonitoring != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceMonitoring", instanceMonitoring));
        }

        if (spotPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SpotPrice", spotPrice));
        }

        if (iamInstanceProfile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IamInstanceProfile", iamInstanceProfile));
        }

        if (ebsOptimized != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EbsOptimized", ebsOptimized));
        }

        if (associatePublicIpAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AssociatePublicIpAddress", associatePublicIpAddress));
        }

        if (placementTenancy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlacementTenancy", placementTenancy));
        }

        if (metadataOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetadataOptions", metadataOptions));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateLaunchConfigurationValidateBeforeCall(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String imageId, String keyName, List<String> securityGroups, String classicLinkVPCId, List<String> classicLinkVPCSecurityGroups, String userData, String instanceId, String instanceType, String kernelId, String ramdiskId, List<BlockDeviceMapping> blockDeviceMappings, GETCreateLaunchConfigurationInstanceMonitoringParameter instanceMonitoring, String spotPrice, String iamInstanceProfile, Boolean ebsOptimized, Boolean associatePublicIpAddress, String placementTenancy, GETCreateLaunchConfigurationMetadataOptionsParameter metadataOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'launchConfigurationName' is set
        if (launchConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'launchConfigurationName' when calling gETCreateLaunchConfiguration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateLaunchConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateLaunchConfiguration(Async)");
        }

        return gETCreateLaunchConfigurationCall(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, imageId, keyName, securityGroups, classicLinkVPCId, classicLinkVPCSecurityGroups, userData, instanceId, instanceType, kernelId, ramdiskId, blockDeviceMappings, instanceMonitoring, spotPrice, iamInstanceProfile, ebsOptimized, associatePublicIpAddress, placementTenancy, metadataOptions, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a launch configuration.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of launch configurations, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html\&quot;&gt;Launch configurations&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group using either a launch template or a launch configuration. We strongly recommend that you do not use launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2. For information about using launch templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html\&quot;&gt;Launch templates&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param launchConfigurationName The name of the launch configuration. This name must be unique per Region per account. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param imageId &lt;p&gt;The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html\&quot;&gt;Finding a Linux AMI&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;InstanceId&lt;/code&gt;, an &lt;code&gt;ImageId&lt;/code&gt; is not required.&lt;/p&gt; (optional)
     * @param keyName The name of the key pair. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Amazon EC2 key pairs and Linux instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;. (optional)
     * @param securityGroups A list that contains the security group IDs to assign to the instances in the Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Control traffic to resources using security groups&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. (optional)
     * @param classicLinkVPCId Available for backward compatibility. (optional)
     * @param classicLinkVPCSecurityGroups Available for backward compatibility. (optional)
     * @param userData The user data to make available to the launched EC2 instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\&quot;&gt;Instance metadata and user data&lt;/a&gt; (Linux) and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html\&quot;&gt;Instance metadata and user data&lt;/a&gt; (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB. (optional)
     * @param instanceId &lt;p&gt;The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.&lt;/p&gt; &lt;p&gt;To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html\&quot;&gt;Creating a launch configuration using an EC2 instance&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param instanceType &lt;p&gt;Specifies the instance type of the EC2 instance. For information about available instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes\&quot;&gt;Available instance types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;InstanceId&lt;/code&gt;, an &lt;code&gt;InstanceType&lt;/code&gt; is not required.&lt;/p&gt; (optional)
     * @param kernelId &lt;p&gt;The ID of the kernel associated with the AMI.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\&quot;&gt;User provided kernels&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param ramdiskId &lt;p&gt;The ID of the RAM disk to select.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\&quot;&gt;User provided kernels&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param blockDeviceMappings The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html\&quot;&gt;Block device mappings&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;. (optional)
     * @param instanceMonitoring &lt;p&gt;Controls whether instances in this group are launched with detailed (&lt;code&gt;true&lt;/code&gt;) or basic (&lt;code&gt;false&lt;/code&gt;) monitoring.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;true&lt;/code&gt; (enabled).&lt;/p&gt; &lt;important&gt; &lt;p&gt;When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and your account is charged a fee. When you disable detailed monitoring, CloudWatch generates metrics every 5 minutes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html\&quot;&gt;Configure Monitoring for Auto Scaling Instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param spotPrice &lt;p&gt;The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-spot-instances.html\&quot;&gt;Request Spot Instances for fault-tolerant and flexible applications&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid Range: Minimum value of 0.001&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param iamInstanceProfile The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html\&quot;&gt;IAM role for applications that run on Amazon EC2 instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param ebsOptimized &lt;p&gt;Specifies whether the launch configuration is optimized for EBS I/O (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html\&quot;&gt;Amazon EBS-optimized instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param associatePublicIpAddress &lt;p&gt;Specifies whether to assign a public IPv4 address to the group&#39;s instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;true&lt;/code&gt;, each instance in the Auto Scaling group receives a unique public IPv4 address. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html\&quot;&gt;Launching Auto Scaling instances in a VPC&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify this property, you must specify at least one subnet for &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; when you create your group.&lt;/p&gt; (optional)
     * @param placementTenancy &lt;p&gt;The tenancy of the instance, either &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;dedicated&lt;/code&gt;. An instance with &lt;code&gt;dedicated&lt;/code&gt; tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to &lt;code&gt;default&lt;/code&gt;), you must set the value of this property to &lt;code&gt;dedicated&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html\&quot;&gt;Configuring instance tenancy with Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;PlacementTenancy&lt;/code&gt;, you must specify at least one subnet for &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; when you create your group.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;default&lt;/code&gt; | &lt;code&gt;dedicated&lt;/code&gt; &lt;/p&gt; (optional)
     * @param metadataOptions The metadata options for the instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds\&quot;&gt;Configuring the Instance Metadata Options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETCreateLaunchConfiguration(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String imageId, String keyName, List<String> securityGroups, String classicLinkVPCId, List<String> classicLinkVPCSecurityGroups, String userData, String instanceId, String instanceType, String kernelId, String ramdiskId, List<BlockDeviceMapping> blockDeviceMappings, GETCreateLaunchConfigurationInstanceMonitoringParameter instanceMonitoring, String spotPrice, String iamInstanceProfile, Boolean ebsOptimized, Boolean associatePublicIpAddress, String placementTenancy, GETCreateLaunchConfigurationMetadataOptionsParameter metadataOptions) throws ApiException {
        gETCreateLaunchConfigurationWithHttpInfo(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, imageId, keyName, securityGroups, classicLinkVPCId, classicLinkVPCSecurityGroups, userData, instanceId, instanceType, kernelId, ramdiskId, blockDeviceMappings, instanceMonitoring, spotPrice, iamInstanceProfile, ebsOptimized, associatePublicIpAddress, placementTenancy, metadataOptions);
    }

    /**
     * 
     * &lt;p&gt;Creates a launch configuration.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of launch configurations, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html\&quot;&gt;Launch configurations&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group using either a launch template or a launch configuration. We strongly recommend that you do not use launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2. For information about using launch templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html\&quot;&gt;Launch templates&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param launchConfigurationName The name of the launch configuration. This name must be unique per Region per account. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param imageId &lt;p&gt;The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html\&quot;&gt;Finding a Linux AMI&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;InstanceId&lt;/code&gt;, an &lt;code&gt;ImageId&lt;/code&gt; is not required.&lt;/p&gt; (optional)
     * @param keyName The name of the key pair. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Amazon EC2 key pairs and Linux instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;. (optional)
     * @param securityGroups A list that contains the security group IDs to assign to the instances in the Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Control traffic to resources using security groups&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. (optional)
     * @param classicLinkVPCId Available for backward compatibility. (optional)
     * @param classicLinkVPCSecurityGroups Available for backward compatibility. (optional)
     * @param userData The user data to make available to the launched EC2 instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\&quot;&gt;Instance metadata and user data&lt;/a&gt; (Linux) and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html\&quot;&gt;Instance metadata and user data&lt;/a&gt; (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB. (optional)
     * @param instanceId &lt;p&gt;The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.&lt;/p&gt; &lt;p&gt;To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html\&quot;&gt;Creating a launch configuration using an EC2 instance&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param instanceType &lt;p&gt;Specifies the instance type of the EC2 instance. For information about available instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes\&quot;&gt;Available instance types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;InstanceId&lt;/code&gt;, an &lt;code&gt;InstanceType&lt;/code&gt; is not required.&lt;/p&gt; (optional)
     * @param kernelId &lt;p&gt;The ID of the kernel associated with the AMI.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\&quot;&gt;User provided kernels&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param ramdiskId &lt;p&gt;The ID of the RAM disk to select.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\&quot;&gt;User provided kernels&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param blockDeviceMappings The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html\&quot;&gt;Block device mappings&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;. (optional)
     * @param instanceMonitoring &lt;p&gt;Controls whether instances in this group are launched with detailed (&lt;code&gt;true&lt;/code&gt;) or basic (&lt;code&gt;false&lt;/code&gt;) monitoring.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;true&lt;/code&gt; (enabled).&lt;/p&gt; &lt;important&gt; &lt;p&gt;When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and your account is charged a fee. When you disable detailed monitoring, CloudWatch generates metrics every 5 minutes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html\&quot;&gt;Configure Monitoring for Auto Scaling Instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param spotPrice &lt;p&gt;The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-spot-instances.html\&quot;&gt;Request Spot Instances for fault-tolerant and flexible applications&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid Range: Minimum value of 0.001&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param iamInstanceProfile The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html\&quot;&gt;IAM role for applications that run on Amazon EC2 instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param ebsOptimized &lt;p&gt;Specifies whether the launch configuration is optimized for EBS I/O (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html\&quot;&gt;Amazon EBS-optimized instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param associatePublicIpAddress &lt;p&gt;Specifies whether to assign a public IPv4 address to the group&#39;s instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;true&lt;/code&gt;, each instance in the Auto Scaling group receives a unique public IPv4 address. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html\&quot;&gt;Launching Auto Scaling instances in a VPC&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify this property, you must specify at least one subnet for &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; when you create your group.&lt;/p&gt; (optional)
     * @param placementTenancy &lt;p&gt;The tenancy of the instance, either &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;dedicated&lt;/code&gt;. An instance with &lt;code&gt;dedicated&lt;/code&gt; tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to &lt;code&gt;default&lt;/code&gt;), you must set the value of this property to &lt;code&gt;dedicated&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html\&quot;&gt;Configuring instance tenancy with Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;PlacementTenancy&lt;/code&gt;, you must specify at least one subnet for &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; when you create your group.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;default&lt;/code&gt; | &lt;code&gt;dedicated&lt;/code&gt; &lt;/p&gt; (optional)
     * @param metadataOptions The metadata options for the instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds\&quot;&gt;Configuring the Instance Metadata Options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETCreateLaunchConfigurationWithHttpInfo(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String imageId, String keyName, List<String> securityGroups, String classicLinkVPCId, List<String> classicLinkVPCSecurityGroups, String userData, String instanceId, String instanceType, String kernelId, String ramdiskId, List<BlockDeviceMapping> blockDeviceMappings, GETCreateLaunchConfigurationInstanceMonitoringParameter instanceMonitoring, String spotPrice, String iamInstanceProfile, Boolean ebsOptimized, Boolean associatePublicIpAddress, String placementTenancy, GETCreateLaunchConfigurationMetadataOptionsParameter metadataOptions) throws ApiException {
        okhttp3.Call localVarCall = gETCreateLaunchConfigurationValidateBeforeCall(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, imageId, keyName, securityGroups, classicLinkVPCId, classicLinkVPCSecurityGroups, userData, instanceId, instanceType, kernelId, ramdiskId, blockDeviceMappings, instanceMonitoring, spotPrice, iamInstanceProfile, ebsOptimized, associatePublicIpAddress, placementTenancy, metadataOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a launch configuration.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of launch configurations, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html\&quot;&gt;Launch configurations&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group using either a launch template or a launch configuration. We strongly recommend that you do not use launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2. For information about using launch templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html\&quot;&gt;Launch templates&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param launchConfigurationName The name of the launch configuration. This name must be unique per Region per account. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param imageId &lt;p&gt;The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html\&quot;&gt;Finding a Linux AMI&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;InstanceId&lt;/code&gt;, an &lt;code&gt;ImageId&lt;/code&gt; is not required.&lt;/p&gt; (optional)
     * @param keyName The name of the key pair. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Amazon EC2 key pairs and Linux instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;. (optional)
     * @param securityGroups A list that contains the security group IDs to assign to the instances in the Auto Scaling group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Control traffic to resources using security groups&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. (optional)
     * @param classicLinkVPCId Available for backward compatibility. (optional)
     * @param classicLinkVPCSecurityGroups Available for backward compatibility. (optional)
     * @param userData The user data to make available to the launched EC2 instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\&quot;&gt;Instance metadata and user data&lt;/a&gt; (Linux) and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html\&quot;&gt;Instance metadata and user data&lt;/a&gt; (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB. (optional)
     * @param instanceId &lt;p&gt;The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping.&lt;/p&gt; &lt;p&gt;To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-lc-with-instanceID.html\&quot;&gt;Creating a launch configuration using an EC2 instance&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param instanceType &lt;p&gt;Specifies the instance type of the EC2 instance. For information about available instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes\&quot;&gt;Available instance types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;InstanceId&lt;/code&gt;, an &lt;code&gt;InstanceType&lt;/code&gt; is not required.&lt;/p&gt; (optional)
     * @param kernelId &lt;p&gt;The ID of the kernel associated with the AMI.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\&quot;&gt;User provided kernels&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param ramdiskId &lt;p&gt;The ID of the RAM disk to select.&lt;/p&gt; &lt;note&gt; &lt;p&gt;We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html\&quot;&gt;User provided kernels&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param blockDeviceMappings The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html\&quot;&gt;Block device mappings&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;. (optional)
     * @param instanceMonitoring &lt;p&gt;Controls whether instances in this group are launched with detailed (&lt;code&gt;true&lt;/code&gt;) or basic (&lt;code&gt;false&lt;/code&gt;) monitoring.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;true&lt;/code&gt; (enabled).&lt;/p&gt; &lt;important&gt; &lt;p&gt;When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and your account is charged a fee. When you disable detailed monitoring, CloudWatch generates metrics every 5 minutes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html\&quot;&gt;Configure Monitoring for Auto Scaling Instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param spotPrice &lt;p&gt;The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-spot-instances.html\&quot;&gt;Request Spot Instances for fault-tolerant and flexible applications&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid Range: Minimum value of 0.001&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param iamInstanceProfile The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html\&quot;&gt;IAM role for applications that run on Amazon EC2 instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param ebsOptimized &lt;p&gt;Specifies whether the launch configuration is optimized for EBS I/O (&lt;code&gt;true&lt;/code&gt;) or not (&lt;code&gt;false&lt;/code&gt;). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html\&quot;&gt;Amazon EBS-optimized instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param associatePublicIpAddress &lt;p&gt;Specifies whether to assign a public IPv4 address to the group&#39;s instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;true&lt;/code&gt;, each instance in the Auto Scaling group receives a unique public IPv4 address. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html\&quot;&gt;Launching Auto Scaling instances in a VPC&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify this property, you must specify at least one subnet for &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; when you create your group.&lt;/p&gt; (optional)
     * @param placementTenancy &lt;p&gt;The tenancy of the instance, either &lt;code&gt;default&lt;/code&gt; or &lt;code&gt;dedicated&lt;/code&gt;. An instance with &lt;code&gt;dedicated&lt;/code&gt; tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to &lt;code&gt;default&lt;/code&gt;), you must set the value of this property to &lt;code&gt;dedicated&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html\&quot;&gt;Configuring instance tenancy with Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;PlacementTenancy&lt;/code&gt;, you must specify at least one subnet for &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; when you create your group.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;default&lt;/code&gt; | &lt;code&gt;dedicated&lt;/code&gt; &lt;/p&gt; (optional)
     * @param metadataOptions The metadata options for the instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds\&quot;&gt;Configuring the Instance Metadata Options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateLaunchConfigurationAsync(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String imageId, String keyName, List<String> securityGroups, String classicLinkVPCId, List<String> classicLinkVPCSecurityGroups, String userData, String instanceId, String instanceType, String kernelId, String ramdiskId, List<BlockDeviceMapping> blockDeviceMappings, GETCreateLaunchConfigurationInstanceMonitoringParameter instanceMonitoring, String spotPrice, String iamInstanceProfile, Boolean ebsOptimized, Boolean associatePublicIpAddress, String placementTenancy, GETCreateLaunchConfigurationMetadataOptionsParameter metadataOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateLaunchConfigurationValidateBeforeCall(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, imageId, keyName, securityGroups, classicLinkVPCId, classicLinkVPCSecurityGroups, userData, instanceId, instanceType, kernelId, ramdiskId, blockDeviceMappings, instanceMonitoring, spotPrice, iamInstanceProfile, ebsOptimized, associatePublicIpAddress, placementTenancy, metadataOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateOrUpdateTags
     * @param tags One or more tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateOrUpdateTagsCall(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateOrUpdateTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateOrUpdateTagsValidateBeforeCall(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETCreateOrUpdateTags(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateOrUpdateTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateOrUpdateTags(Async)");
        }

        return gETCreateOrUpdateTagsCall(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates tags for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param tags One or more tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETCreateOrUpdateTags(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETCreateOrUpdateTagsWithHttpInfo(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Creates or updates tags for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param tags One or more tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETCreateOrUpdateTagsWithHttpInfo(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETCreateOrUpdateTagsValidateBeforeCall(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates tags for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param tags One or more tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateOrUpdateTagsAsync(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateOrUpdateTagsValidateBeforeCall(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteAutoScalingGroup
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceDelete Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This action also deletes any outstanding lifecycle actions associated with the group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteAutoScalingGroupCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteAutoScalingGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (forceDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ForceDelete", forceDelete));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteAutoScalingGroupValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDeleteAutoScalingGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteAutoScalingGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteAutoScalingGroup(Async)");
        }

        return gETDeleteAutoScalingGroupCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed. The force delete operation will also terminate the EC2 instances. If the group has a warm pool, the force delete option also deletes the warm pool.&lt;/p&gt; &lt;p&gt;To remove instances from the Auto Scaling group before deleting it, call the &lt;a&gt;DetachInstances&lt;/a&gt; API with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.&lt;/p&gt; &lt;p&gt;To terminate all instances before deleting the Auto Scaling group, call the &lt;a&gt;UpdateAutoScalingGroup&lt;/a&gt; API and set the minimum size and desired capacity of the Auto Scaling group to zero.&lt;/p&gt; &lt;p&gt;If the group has scaling policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html\&quot;&gt;Delete your Auto Scaling infrastructure&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceDelete Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This action also deletes any outstanding lifecycle actions associated with the group. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteAutoScalingGroup(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete) throws ApiException {
        gETDeleteAutoScalingGroupWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed. The force delete operation will also terminate the EC2 instances. If the group has a warm pool, the force delete option also deletes the warm pool.&lt;/p&gt; &lt;p&gt;To remove instances from the Auto Scaling group before deleting it, call the &lt;a&gt;DetachInstances&lt;/a&gt; API with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.&lt;/p&gt; &lt;p&gt;To terminate all instances before deleting the Auto Scaling group, call the &lt;a&gt;UpdateAutoScalingGroup&lt;/a&gt; API and set the minimum size and desired capacity of the Auto Scaling group to zero.&lt;/p&gt; &lt;p&gt;If the group has scaling policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html\&quot;&gt;Delete your Auto Scaling infrastructure&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceDelete Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This action also deletes any outstanding lifecycle actions associated with the group. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteAutoScalingGroupWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteAutoScalingGroupValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed. The force delete operation will also terminate the EC2 instances. If the group has a warm pool, the force delete option also deletes the warm pool.&lt;/p&gt; &lt;p&gt;To remove instances from the Auto Scaling group before deleting it, call the &lt;a&gt;DetachInstances&lt;/a&gt; API with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.&lt;/p&gt; &lt;p&gt;To terminate all instances before deleting the Auto Scaling group, call the &lt;a&gt;UpdateAutoScalingGroup&lt;/a&gt; API and set the minimum size and desired capacity of the Auto Scaling group to zero.&lt;/p&gt; &lt;p&gt;If the group has scaling policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html\&quot;&gt;Delete your Auto Scaling infrastructure&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceDelete Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This action also deletes any outstanding lifecycle actions associated with the group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteAutoScalingGroupAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteAutoScalingGroupValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteLaunchConfiguration
     * @param launchConfigurationName The name of the launch configuration. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLaunchConfigurationCall(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLaunchConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (launchConfigurationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LaunchConfigurationName", launchConfigurationName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteLaunchConfigurationValidateBeforeCall(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'launchConfigurationName' is set
        if (launchConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'launchConfigurationName' when calling gETDeleteLaunchConfiguration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteLaunchConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteLaunchConfiguration(Async)");
        }

        return gETDeleteLaunchConfigurationCall(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified launch configuration.&lt;/p&gt; &lt;p&gt;The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.&lt;/p&gt;
     * @param launchConfigurationName The name of the launch configuration. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteLaunchConfiguration(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteLaunchConfigurationWithHttpInfo(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified launch configuration.&lt;/p&gt; &lt;p&gt;The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.&lt;/p&gt;
     * @param launchConfigurationName The name of the launch configuration. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteLaunchConfigurationWithHttpInfo(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteLaunchConfigurationValidateBeforeCall(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified launch configuration.&lt;/p&gt; &lt;p&gt;The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.&lt;/p&gt;
     * @param launchConfigurationName The name of the launch configuration. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLaunchConfigurationAsync(String launchConfigurationName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteLaunchConfigurationValidateBeforeCall(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteLifecycleHook
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLifecycleHookCall(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLifecycleHook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lifecycleHookName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LifecycleHookName", lifecycleHookName));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteLifecycleHookValidateBeforeCall(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifecycleHookName' is set
        if (lifecycleHookName == null) {
            throw new ApiException("Missing the required parameter 'lifecycleHookName' when calling gETDeleteLifecycleHook(Async)");
        }

        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDeleteLifecycleHook(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteLifecycleHook(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteLifecycleHook(Async)");
        }

        return gETDeleteLifecycleHookCall(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified lifecycle hook.&lt;/p&gt; &lt;p&gt;If there are any outstanding lifecycle actions, they are completed first (&lt;code&gt;ABANDON&lt;/code&gt; for launching instances, &lt;code&gt;CONTINUE&lt;/code&gt; for terminating instances).&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteLifecycleHook(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteLifecycleHookWithHttpInfo(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified lifecycle hook.&lt;/p&gt; &lt;p&gt;If there are any outstanding lifecycle actions, they are completed first (&lt;code&gt;ABANDON&lt;/code&gt; for launching instances, &lt;code&gt;CONTINUE&lt;/code&gt; for terminating instances).&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteLifecycleHookWithHttpInfo(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteLifecycleHookValidateBeforeCall(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified lifecycle hook.&lt;/p&gt; &lt;p&gt;If there are any outstanding lifecycle actions, they are completed first (&lt;code&gt;ABANDON&lt;/code&gt; for launching instances, &lt;code&gt;CONTINUE&lt;/code&gt; for terminating instances).&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteLifecycleHookAsync(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteLifecycleHookValidateBeforeCall(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteNotificationConfiguration
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param topicARN The Amazon Resource Name (ARN) of the Amazon SNS topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteNotificationConfigurationCall(String autoScalingGroupName, String topicARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteNotificationConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (topicARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicARN", topicARN));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteNotificationConfigurationValidateBeforeCall(String autoScalingGroupName, String topicARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDeleteNotificationConfiguration(Async)");
        }

        // verify the required parameter 'topicARN' is set
        if (topicARN == null) {
            throw new ApiException("Missing the required parameter 'topicARN' when calling gETDeleteNotificationConfiguration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteNotificationConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteNotificationConfiguration(Async)");
        }

        return gETDeleteNotificationConfigurationCall(autoScalingGroupName, topicARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified notification.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param topicARN The Amazon Resource Name (ARN) of the Amazon SNS topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteNotificationConfiguration(String autoScalingGroupName, String topicARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteNotificationConfigurationWithHttpInfo(autoScalingGroupName, topicARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes the specified notification.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param topicARN The Amazon Resource Name (ARN) of the Amazon SNS topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteNotificationConfigurationWithHttpInfo(String autoScalingGroupName, String topicARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteNotificationConfigurationValidateBeforeCall(autoScalingGroupName, topicARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified notification.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param topicARN The Amazon Resource Name (ARN) of the Amazon SNS topic. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteNotificationConfigurationAsync(String autoScalingGroupName, String topicARN, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteNotificationConfigurationValidateBeforeCall(autoScalingGroupName, topicARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeletePolicy
     * @param policyName The name or Amazon Resource Name (ARN) of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeletePolicyCall(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeletePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyName", policyName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeletePolicyValidateBeforeCall(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling gETDeletePolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeletePolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeletePolicy(Async)");
        }

        return gETDeletePolicyCall(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified scaling policy.&lt;/p&gt; &lt;p&gt;Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html\&quot;&gt;Deleting a scaling policy&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param policyName The name or Amazon Resource Name (ARN) of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeletePolicy(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName) throws ApiException {
        gETDeletePolicyWithHttpInfo(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified scaling policy.&lt;/p&gt; &lt;p&gt;Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html\&quot;&gt;Deleting a scaling policy&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param policyName The name or Amazon Resource Name (ARN) of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeletePolicyWithHttpInfo(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName) throws ApiException {
        okhttp3.Call localVarCall = gETDeletePolicyValidateBeforeCall(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified scaling policy.&lt;/p&gt; &lt;p&gt;Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html\&quot;&gt;Deleting a scaling policy&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param policyName The name or Amazon Resource Name (ARN) of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeletePolicyAsync(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeletePolicyValidateBeforeCall(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteScheduledAction
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionName The name of the action to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteScheduledActionCall(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteScheduledAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (scheduledActionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ScheduledActionName", scheduledActionName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteScheduledActionValidateBeforeCall(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDeleteScheduledAction(Async)");
        }

        // verify the required parameter 'scheduledActionName' is set
        if (scheduledActionName == null) {
            throw new ApiException("Missing the required parameter 'scheduledActionName' when calling gETDeleteScheduledAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteScheduledAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteScheduledAction(Async)");
        }

        return gETDeleteScheduledActionCall(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified scheduled action.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionName The name of the action to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteScheduledAction(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteScheduledActionWithHttpInfo(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes the specified scheduled action.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionName The name of the action to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteScheduledActionWithHttpInfo(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteScheduledActionValidateBeforeCall(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified scheduled action.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionName The name of the action to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteScheduledActionAsync(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteScheduledActionValidateBeforeCall(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteTags
     * @param tags One or more tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteTagsCall(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteTagsValidateBeforeCall(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETDeleteTags(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteTags(Async)");
        }

        return gETDeleteTagsCall(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified tags.
     * @param tags One or more tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteTags(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteTagsWithHttpInfo(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes the specified tags.
     * @param tags One or more tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteTagsWithHttpInfo(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteTagsValidateBeforeCall(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified tags.
     * @param tags One or more tags. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteTagsAsync(List<Tag> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteTagsValidateBeforeCall(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteWarmPool
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceDelete Specifies that the warm pool is to be deleted along with all of its associated instances, without waiting for all instances to be terminated. This parameter also deletes any outstanding lifecycle actions associated with the warm pool instances. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteWarmPoolCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteWarmPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (forceDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ForceDelete", forceDelete));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteWarmPoolValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDeleteWarmPool(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteWarmPool(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteWarmPool(Async)");
        }

        return gETDeleteWarmPoolCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the warm pool for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceDelete Specifies that the warm pool is to be deleted along with all of its associated instances, without waiting for all instances to be terminated. This parameter also deletes any outstanding lifecycle actions associated with the warm pool instances. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteWarmPool(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteWarmPoolWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the warm pool for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceDelete Specifies that the warm pool is to be deleted along with all of its associated instances, without waiting for all instances to be terminated. This parameter also deletes any outstanding lifecycle actions associated with the warm pool instances. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteWarmPoolWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteWarmPoolValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the warm pool for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param forceDelete Specifies that the warm pool is to be deleted along with all of its associated instances, without waiting for all instances to be terminated. This parameter also deletes any outstanding lifecycle actions associated with the warm pool instances. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteWarmPoolAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean forceDelete, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteWarmPoolValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAccountLimits
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountLimitsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAccountLimitsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAccountLimits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAccountLimits(Async)");
        }

        return gETDescribeAccountLimitsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the current Amazon EC2 Auto Scaling resource quotas for your account.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAccountLimitsAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountLimitsAnswer gETDescribeAccountLimits(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAccountLimitsAnswer> localVarResp = gETDescribeAccountLimitsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the current Amazon EC2 Auto Scaling resource quotas for your account.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAccountLimitsAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountLimitsAnswer> gETDescribeAccountLimitsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the current Amazon EC2 Auto Scaling resource quotas for your account.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountLimitsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAccountLimitsAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAdjustmentTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAdjustmentTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAdjustmentTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAdjustmentTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAdjustmentTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAdjustmentTypes(Async)");
        }

        return gETDescribeAdjustmentTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the available adjustment types for step scaling and simple scaling policies.&lt;/p&gt; &lt;p&gt;The following adjustment types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExactCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PercentChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAdjustmentTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAdjustmentTypesAnswer gETDescribeAdjustmentTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAdjustmentTypesAnswer> localVarResp = gETDescribeAdjustmentTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the available adjustment types for step scaling and simple scaling policies.&lt;/p&gt; &lt;p&gt;The following adjustment types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExactCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PercentChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAdjustmentTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAdjustmentTypesAnswer> gETDescribeAdjustmentTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAdjustmentTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAdjustmentTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the available adjustment types for step scaling and simple scaling policies.&lt;/p&gt; &lt;p&gt;The following adjustment types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExactCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PercentChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAdjustmentTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAdjustmentTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAdjustmentTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAdjustmentTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAutoScalingGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupNames &lt;p&gt;The names of the Auto Scaling groups. By default, you can only specify up to 50 names. You can optionally increase this limit using the &lt;code&gt;MaxRecords&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt;If you omit this property, all Auto Scaling groups are described.&lt;/p&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param filters One or more filters to limit the results based on specific tags.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAutoScalingGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords, List<Filter> filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAutoScalingGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AutoScalingGroupNames", autoScalingGroupNames));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAutoScalingGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords, List<Filter> filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAutoScalingGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAutoScalingGroups(Async)");
        }

        return gETDescribeAutoScalingGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords, filters, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the Auto Scaling groups in the account and Region.&lt;/p&gt; &lt;p&gt;If you specify Auto Scaling group names, the output includes information for only the specified Auto Scaling groups. If you specify filters, the output includes information for only those Auto Scaling groups that meet the filter criteria. If you do not specify group names or filters, the output includes information for all Auto Scaling groups. &lt;/p&gt; &lt;p&gt;This operation also returns information about instances in Auto Scaling groups. To retrieve information about the instances in a warm pool, you must call the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupNames &lt;p&gt;The names of the Auto Scaling groups. By default, you can only specify up to 50 names. You can optionally increase this limit using the &lt;code&gt;MaxRecords&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt;If you omit this property, all Auto Scaling groups are described.&lt;/p&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param filters One or more filters to limit the results based on specific tags.  (optional)
     * @return AutoScalingGroupsType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public AutoScalingGroupsType gETDescribeAutoScalingGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords, List<Filter> filters) throws ApiException {
        ApiResponse<AutoScalingGroupsType> localVarResp = gETDescribeAutoScalingGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords, filters);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the Auto Scaling groups in the account and Region.&lt;/p&gt; &lt;p&gt;If you specify Auto Scaling group names, the output includes information for only the specified Auto Scaling groups. If you specify filters, the output includes information for only those Auto Scaling groups that meet the filter criteria. If you do not specify group names or filters, the output includes information for all Auto Scaling groups. &lt;/p&gt; &lt;p&gt;This operation also returns information about instances in Auto Scaling groups. To retrieve information about the instances in a warm pool, you must call the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupNames &lt;p&gt;The names of the Auto Scaling groups. By default, you can only specify up to 50 names. You can optionally increase this limit using the &lt;code&gt;MaxRecords&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt;If you omit this property, all Auto Scaling groups are described.&lt;/p&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param filters One or more filters to limit the results based on specific tags.  (optional)
     * @return ApiResponse&lt;AutoScalingGroupsType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutoScalingGroupsType> gETDescribeAutoScalingGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords, List<Filter> filters) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAutoScalingGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords, filters, null);
        Type localVarReturnType = new TypeToken<AutoScalingGroupsType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the Auto Scaling groups in the account and Region.&lt;/p&gt; &lt;p&gt;If you specify Auto Scaling group names, the output includes information for only the specified Auto Scaling groups. If you specify filters, the output includes information for only those Auto Scaling groups that meet the filter criteria. If you do not specify group names or filters, the output includes information for all Auto Scaling groups. &lt;/p&gt; &lt;p&gt;This operation also returns information about instances in Auto Scaling groups. To retrieve information about the instances in a warm pool, you must call the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupNames &lt;p&gt;The names of the Auto Scaling groups. By default, you can only specify up to 50 names. You can optionally increase this limit using the &lt;code&gt;MaxRecords&lt;/code&gt; property.&lt;/p&gt; &lt;p&gt;If you omit this property, all Auto Scaling groups are described.&lt;/p&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param filters One or more filters to limit the results based on specific tags.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAutoScalingGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords, List<Filter> filters, final ApiCallback<AutoScalingGroupsType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAutoScalingGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords, filters, _callback);
        Type localVarReturnType = new TypeToken<AutoScalingGroupsType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAutoScalingInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds &lt;p&gt;The IDs of the instances. If you omit this property, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAutoScalingInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAutoScalingInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "InstanceIds", instanceIds));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAutoScalingInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAutoScalingInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAutoScalingInstances(Async)");
        }

        return gETDescribeAutoScalingInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * Gets information about the Auto Scaling instances in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds &lt;p&gt;The IDs of the instances. If you omit this property, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @return AutoScalingInstancesType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public AutoScalingInstancesType gETDescribeAutoScalingInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, Integer maxRecords, String nextToken) throws ApiException {
        ApiResponse<AutoScalingInstancesType> localVarResp = gETDescribeAutoScalingInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the Auto Scaling instances in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds &lt;p&gt;The IDs of the instances. If you omit this property, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @return ApiResponse&lt;AutoScalingInstancesType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutoScalingInstancesType> gETDescribeAutoScalingInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, Integer maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAutoScalingInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<AutoScalingInstancesType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the Auto Scaling instances in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds &lt;p&gt;The IDs of the instances. If you omit this property, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAutoScalingInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, Integer maxRecords, String nextToken, final ApiCallback<AutoScalingInstancesType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAutoScalingInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<AutoScalingInstancesType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAutoScalingNotificationTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAutoScalingNotificationTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAutoScalingNotificationTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAutoScalingNotificationTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAutoScalingNotificationTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAutoScalingNotificationTypes(Async)");
        }

        return gETDescribeAutoScalingNotificationTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the notification types that are supported by Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAutoScalingNotificationTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAutoScalingNotificationTypesAnswer gETDescribeAutoScalingNotificationTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAutoScalingNotificationTypesAnswer> localVarResp = gETDescribeAutoScalingNotificationTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the notification types that are supported by Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAutoScalingNotificationTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAutoScalingNotificationTypesAnswer> gETDescribeAutoScalingNotificationTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAutoScalingNotificationTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAutoScalingNotificationTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the notification types that are supported by Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAutoScalingNotificationTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAutoScalingNotificationTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAutoScalingNotificationTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAutoScalingNotificationTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeInstanceRefreshes
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceRefreshIds One or more instance refresh IDs. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeInstanceRefreshesCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceRefreshIds, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeInstanceRefreshes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (instanceRefreshIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "InstanceRefreshIds", instanceRefreshIds));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeInstanceRefreshesValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceRefreshIds, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDescribeInstanceRefreshes(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeInstanceRefreshes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeInstanceRefreshes(Async)");
        }

        return gETDescribeInstanceRefreshesCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceRefreshIds, nextToken, maxRecords, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the instance refreshes for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;To help you determine the status of an instance refresh, Amazon EC2 Auto Scaling returns information about the instance refreshes you previously initiated, including their status, start time, end time, the percentage of the instance refresh that is complete, and the number of instances remaining to update before the instance refresh is complete. If a rollback is initiated while an instance refresh is in progress, Amazon EC2 Auto Scaling also returns information about the rollback of the instance refresh.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceRefreshIds One or more instance refresh IDs. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return DescribeInstanceRefreshesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeInstanceRefreshesAnswer gETDescribeInstanceRefreshes(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceRefreshIds, String nextToken, Integer maxRecords) throws ApiException {
        ApiResponse<DescribeInstanceRefreshesAnswer> localVarResp = gETDescribeInstanceRefreshesWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceRefreshIds, nextToken, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the instance refreshes for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;To help you determine the status of an instance refresh, Amazon EC2 Auto Scaling returns information about the instance refreshes you previously initiated, including their status, start time, end time, the percentage of the instance refresh that is complete, and the number of instances remaining to update before the instance refresh is complete. If a rollback is initiated while an instance refresh is in progress, Amazon EC2 Auto Scaling also returns information about the rollback of the instance refresh.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceRefreshIds One or more instance refresh IDs. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeInstanceRefreshesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeInstanceRefreshesAnswer> gETDescribeInstanceRefreshesWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceRefreshIds, String nextToken, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeInstanceRefreshesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceRefreshIds, nextToken, maxRecords, null);
        Type localVarReturnType = new TypeToken<DescribeInstanceRefreshesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the instance refreshes for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;To help you determine the status of an instance refresh, Amazon EC2 Auto Scaling returns information about the instance refreshes you previously initiated, including their status, start time, end time, the percentage of the instance refresh that is complete, and the number of instances remaining to update before the instance refresh is complete. If a rollback is initiated while an instance refresh is in progress, Amazon EC2 Auto Scaling also returns information about the rollback of the instance refresh.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceRefreshIds One or more instance refresh IDs. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeInstanceRefreshesAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceRefreshIds, String nextToken, Integer maxRecords, final ApiCallback<DescribeInstanceRefreshesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeInstanceRefreshesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceRefreshIds, nextToken, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<DescribeInstanceRefreshesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLaunchConfigurations
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationNames &lt;p&gt;The launch configuration names. If you omit this property, all launch configurations are described.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLaunchConfigurationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> launchConfigurationNames, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLaunchConfigurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (launchConfigurationNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LaunchConfigurationNames", launchConfigurationNames));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLaunchConfigurationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> launchConfigurationNames, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLaunchConfigurations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLaunchConfigurations(Async)");
        }

        return gETDescribeLaunchConfigurationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNames, nextToken, maxRecords, _callback);

    }

    /**
     * 
     * Gets information about the launch configurations in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationNames &lt;p&gt;The launch configuration names. If you omit this property, all launch configurations are described.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return LaunchConfigurationsType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public LaunchConfigurationsType gETDescribeLaunchConfigurations(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> launchConfigurationNames, String nextToken, Integer maxRecords) throws ApiException {
        ApiResponse<LaunchConfigurationsType> localVarResp = gETDescribeLaunchConfigurationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNames, nextToken, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the launch configurations in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationNames &lt;p&gt;The launch configuration names. If you omit this property, all launch configurations are described.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;LaunchConfigurationsType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LaunchConfigurationsType> gETDescribeLaunchConfigurationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> launchConfigurationNames, String nextToken, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLaunchConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNames, nextToken, maxRecords, null);
        Type localVarReturnType = new TypeToken<LaunchConfigurationsType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the launch configurations in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationNames &lt;p&gt;The launch configuration names. If you omit this property, all launch configurations are described.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLaunchConfigurationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> launchConfigurationNames, String nextToken, Integer maxRecords, final ApiCallback<LaunchConfigurationsType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLaunchConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNames, nextToken, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<LaunchConfigurationsType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLifecycleHookTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLifecycleHookTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLifecycleHookTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLifecycleHookTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLifecycleHookTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLifecycleHookTypes(Async)");
        }

        return gETDescribeLifecycleHookTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the available types of lifecycle hooks.&lt;/p&gt; &lt;p&gt;The following hook types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeLifecycleHookTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLifecycleHookTypesAnswer gETDescribeLifecycleHookTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeLifecycleHookTypesAnswer> localVarResp = gETDescribeLifecycleHookTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the available types of lifecycle hooks.&lt;/p&gt; &lt;p&gt;The following hook types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeLifecycleHookTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLifecycleHookTypesAnswer> gETDescribeLifecycleHookTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLifecycleHookTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeLifecycleHookTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the available types of lifecycle hooks.&lt;/p&gt; &lt;p&gt;The following hook types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLifecycleHookTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeLifecycleHookTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLifecycleHookTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeLifecycleHookTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLifecycleHooks
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleHookNames The names of one or more lifecycle hooks. If you omit this property, all lifecycle hooks are described. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLifecycleHooksCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> lifecycleHookNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLifecycleHooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (lifecycleHookNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LifecycleHookNames", lifecycleHookNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLifecycleHooksValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> lifecycleHookNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDescribeLifecycleHooks(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLifecycleHooks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLifecycleHooks(Async)");
        }

        return gETDescribeLifecycleHooksCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleHookNames, _callback);

    }

    /**
     * 
     * Gets information about the lifecycle hooks for the specified Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleHookNames The names of one or more lifecycle hooks. If you omit this property, all lifecycle hooks are described. (optional)
     * @return DescribeLifecycleHooksAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLifecycleHooksAnswer gETDescribeLifecycleHooks(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> lifecycleHookNames) throws ApiException {
        ApiResponse<DescribeLifecycleHooksAnswer> localVarResp = gETDescribeLifecycleHooksWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleHookNames);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the lifecycle hooks for the specified Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleHookNames The names of one or more lifecycle hooks. If you omit this property, all lifecycle hooks are described. (optional)
     * @return ApiResponse&lt;DescribeLifecycleHooksAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLifecycleHooksAnswer> gETDescribeLifecycleHooksWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> lifecycleHookNames) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLifecycleHooksValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleHookNames, null);
        Type localVarReturnType = new TypeToken<DescribeLifecycleHooksAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the lifecycle hooks for the specified Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleHookNames The names of one or more lifecycle hooks. If you omit this property, all lifecycle hooks are described. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLifecycleHooksAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> lifecycleHookNames, final ApiCallback<DescribeLifecycleHooksAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLifecycleHooksValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleHookNames, _callback);
        Type localVarReturnType = new TypeToken<DescribeLifecycleHooksAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLoadBalancerTargetGroups
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerTargetGroupsCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerTargetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLoadBalancerTargetGroupsValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDescribeLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLoadBalancerTargetGroups(Async)");
        }

        return gETDescribeLoadBalancerTargetGroupsCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the Elastic Load Balancing target groups for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the target group, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a target group to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the target group. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the target group is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the target group doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Target groups also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your target group state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to describe target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return DescribeLoadBalancerTargetGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerTargetGroupsResponse gETDescribeLoadBalancerTargetGroups(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords) throws ApiException {
        ApiResponse<DescribeLoadBalancerTargetGroupsResponse> localVarResp = gETDescribeLoadBalancerTargetGroupsWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the Elastic Load Balancing target groups for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the target group, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a target group to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the target group. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the target group is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the target group doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Target groups also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your target group state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to describe target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerTargetGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerTargetGroupsResponse> gETDescribeLoadBalancerTargetGroupsWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLoadBalancerTargetGroupsValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerTargetGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the Elastic Load Balancing target groups for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the target group, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a target group to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the target group. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the target group is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the target group doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Target groups also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your target group state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to describe target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancerTargetGroupsAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords, final ApiCallback<DescribeLoadBalancerTargetGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLoadBalancerTargetGroupsValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerTargetGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeLoadBalancers
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancersCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeLoadBalancersValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDescribeLoadBalancers(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeLoadBalancers(Async)");
        }

        return gETDescribeLoadBalancersCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DescribeTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the load balancers for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation describes only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the load balancer, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a load balancer to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the load balancer. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the load balancer is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the load balancer doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Load balancers also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your load balancer state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return DescribeLoadBalancersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancersResponse gETDescribeLoadBalancers(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords) throws ApiException {
        ApiResponse<DescribeLoadBalancersResponse> localVarResp = gETDescribeLoadBalancersWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DescribeTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the load balancers for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation describes only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the load balancer, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a load balancer to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the load balancer. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the load balancer is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the load balancer doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Load balancers also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your load balancer state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeLoadBalancersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancersResponse> gETDescribeLoadBalancersWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeLoadBalancersValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DescribeTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the load balancers for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation describes only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the load balancer, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a load balancer to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the load balancer. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the load balancer is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the load balancer doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Load balancers also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your load balancer state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeLoadBalancersAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxRecords, final ApiCallback<DescribeLoadBalancersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeLoadBalancersValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeMetricCollectionTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeMetricCollectionTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeMetricCollectionTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeMetricCollectionTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeMetricCollectionTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeMetricCollectionTypes(Async)");
        }

        return gETDescribeMetricCollectionTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeMetricCollectionTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeMetricCollectionTypesAnswer gETDescribeMetricCollectionTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeMetricCollectionTypesAnswer> localVarResp = gETDescribeMetricCollectionTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeMetricCollectionTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeMetricCollectionTypesAnswer> gETDescribeMetricCollectionTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeMetricCollectionTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeMetricCollectionTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeMetricCollectionTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeMetricCollectionTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeMetricCollectionTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeMetricCollectionTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeNotificationConfigurations
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupNames The name of the Auto Scaling group. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeNotificationConfigurationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeNotificationConfigurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AutoScalingGroupNames", autoScalingGroupNames));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeNotificationConfigurationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeNotificationConfigurations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeNotificationConfigurations(Async)");
        }

        return gETDescribeNotificationConfigurationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords, _callback);

    }

    /**
     * 
     * Gets information about the Amazon SNS notifications that are configured for one or more Auto Scaling groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupNames The name of the Auto Scaling group. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return DescribeNotificationConfigurationsAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeNotificationConfigurationsAnswer gETDescribeNotificationConfigurations(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords) throws ApiException {
        ApiResponse<DescribeNotificationConfigurationsAnswer> localVarResp = gETDescribeNotificationConfigurationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the Amazon SNS notifications that are configured for one or more Auto Scaling groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupNames The name of the Auto Scaling group. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeNotificationConfigurationsAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeNotificationConfigurationsAnswer> gETDescribeNotificationConfigurationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeNotificationConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords, null);
        Type localVarReturnType = new TypeToken<DescribeNotificationConfigurationsAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the Amazon SNS notifications that are configured for one or more Auto Scaling groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupNames The name of the Auto Scaling group. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeNotificationConfigurationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> autoScalingGroupNames, String nextToken, Integer maxRecords, final ApiCallback<DescribeNotificationConfigurationsAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeNotificationConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<DescribeNotificationConfigurationsAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribePolicies
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param policyNames &lt;p&gt;The names of one or more policies. If you omit this property, all policies are described. If a group name is provided, the results are limited to that group. If you specify an unknown policy name, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param policyTypes One or more policy types. The valid values are &lt;code&gt;SimpleScaling&lt;/code&gt;, &lt;code&gt;StepScaling&lt;/code&gt;, &lt;code&gt;TargetTrackingScaling&lt;/code&gt;, and &lt;code&gt;PredictiveScaling&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to be returned with each call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePoliciesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> policyNames, List<String> policyTypes, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribePolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (policyNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PolicyNames", policyNames));
        }

        if (policyTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PolicyTypes", policyTypes));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribePoliciesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> policyNames, List<String> policyTypes, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribePolicies(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribePolicies(Async)");
        }

        return gETDescribePoliciesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, policyNames, policyTypes, nextToken, maxRecords, _callback);

    }

    /**
     * 
     * Gets information about the scaling policies in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param policyNames &lt;p&gt;The names of one or more policies. If you omit this property, all policies are described. If a group name is provided, the results are limited to that group. If you specify an unknown policy name, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param policyTypes One or more policy types. The valid values are &lt;code&gt;SimpleScaling&lt;/code&gt;, &lt;code&gt;StepScaling&lt;/code&gt;, &lt;code&gt;TargetTrackingScaling&lt;/code&gt;, and &lt;code&gt;PredictiveScaling&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to be returned with each call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return PoliciesType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public PoliciesType gETDescribePolicies(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> policyNames, List<String> policyTypes, String nextToken, Integer maxRecords) throws ApiException {
        ApiResponse<PoliciesType> localVarResp = gETDescribePoliciesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, policyNames, policyTypes, nextToken, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the scaling policies in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param policyNames &lt;p&gt;The names of one or more policies. If you omit this property, all policies are described. If a group name is provided, the results are limited to that group. If you specify an unknown policy name, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param policyTypes One or more policy types. The valid values are &lt;code&gt;SimpleScaling&lt;/code&gt;, &lt;code&gt;StepScaling&lt;/code&gt;, &lt;code&gt;TargetTrackingScaling&lt;/code&gt;, and &lt;code&gt;PredictiveScaling&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to be returned with each call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;PoliciesType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PoliciesType> gETDescribePoliciesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> policyNames, List<String> policyTypes, String nextToken, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribePoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, policyNames, policyTypes, nextToken, maxRecords, null);
        Type localVarReturnType = new TypeToken<PoliciesType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the scaling policies in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param policyNames &lt;p&gt;The names of one or more policies. If you omit this property, all policies are described. If a group name is provided, the results are limited to that group. If you specify an unknown policy name, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 items.&lt;/p&gt; (optional)
     * @param policyTypes One or more policy types. The valid values are &lt;code&gt;SimpleScaling&lt;/code&gt;, &lt;code&gt;StepScaling&lt;/code&gt;, &lt;code&gt;TargetTrackingScaling&lt;/code&gt;, and &lt;code&gt;PredictiveScaling&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to be returned with each call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePoliciesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> policyNames, List<String> policyTypes, String nextToken, Integer maxRecords, final ApiCallback<PoliciesType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribePoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, policyNames, policyTypes, nextToken, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<PoliciesType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeScalingActivities
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param activityIds &lt;p&gt;The activity IDs of the desired scaling activities. If you omit this property, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 IDs.&lt;/p&gt; (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param includeDeletedGroups Indicates whether to include scaling activity from deleted Auto Scaling groups. (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeScalingActivitiesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> activityIds, String autoScalingGroupName, Boolean includeDeletedGroups, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeScalingActivities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (activityIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ActivityIds", activityIds));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (includeDeletedGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeDeletedGroups", includeDeletedGroups));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeScalingActivitiesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> activityIds, String autoScalingGroupName, Boolean includeDeletedGroups, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeScalingActivities(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeScalingActivities(Async)");
        }

        return gETDescribeScalingActivitiesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, activityIds, autoScalingGroupName, includeDeletedGroups, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the scaling activities in the account and Region.&lt;/p&gt; &lt;p&gt;When scaling events occur, you see a record of the scaling activity in the scaling activities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html\&quot;&gt;Verifying a scaling activity for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the scaling event succeeds, the value of the &lt;code&gt;StatusCode&lt;/code&gt; element in the response is &lt;code&gt;Successful&lt;/code&gt;. If an attempt to launch instances failed, the &lt;code&gt;StatusCode&lt;/code&gt; value is &lt;code&gt;Failed&lt;/code&gt; or &lt;code&gt;Cancelled&lt;/code&gt; and the &lt;code&gt;StatusMessage&lt;/code&gt; element in the response indicates the cause of the failure. For help interpreting the &lt;code&gt;StatusMessage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/CHAP_Troubleshooting.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param activityIds &lt;p&gt;The activity IDs of the desired scaling activities. If you omit this property, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 IDs.&lt;/p&gt; (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param includeDeletedGroups Indicates whether to include scaling activity from deleted Auto Scaling groups. (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @return ActivitiesType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ActivitiesType gETDescribeScalingActivities(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> activityIds, String autoScalingGroupName, Boolean includeDeletedGroups, Integer maxRecords, String nextToken) throws ApiException {
        ApiResponse<ActivitiesType> localVarResp = gETDescribeScalingActivitiesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, activityIds, autoScalingGroupName, includeDeletedGroups, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the scaling activities in the account and Region.&lt;/p&gt; &lt;p&gt;When scaling events occur, you see a record of the scaling activity in the scaling activities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html\&quot;&gt;Verifying a scaling activity for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the scaling event succeeds, the value of the &lt;code&gt;StatusCode&lt;/code&gt; element in the response is &lt;code&gt;Successful&lt;/code&gt;. If an attempt to launch instances failed, the &lt;code&gt;StatusCode&lt;/code&gt; value is &lt;code&gt;Failed&lt;/code&gt; or &lt;code&gt;Cancelled&lt;/code&gt; and the &lt;code&gt;StatusMessage&lt;/code&gt; element in the response indicates the cause of the failure. For help interpreting the &lt;code&gt;StatusMessage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/CHAP_Troubleshooting.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param activityIds &lt;p&gt;The activity IDs of the desired scaling activities. If you omit this property, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 IDs.&lt;/p&gt; (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param includeDeletedGroups Indicates whether to include scaling activity from deleted Auto Scaling groups. (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @return ApiResponse&lt;ActivitiesType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivitiesType> gETDescribeScalingActivitiesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> activityIds, String autoScalingGroupName, Boolean includeDeletedGroups, Integer maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeScalingActivitiesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, activityIds, autoScalingGroupName, includeDeletedGroups, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<ActivitiesType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the scaling activities in the account and Region.&lt;/p&gt; &lt;p&gt;When scaling events occur, you see a record of the scaling activity in the scaling activities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html\&quot;&gt;Verifying a scaling activity for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the scaling event succeeds, the value of the &lt;code&gt;StatusCode&lt;/code&gt; element in the response is &lt;code&gt;Successful&lt;/code&gt;. If an attempt to launch instances failed, the &lt;code&gt;StatusCode&lt;/code&gt; value is &lt;code&gt;Failed&lt;/code&gt; or &lt;code&gt;Cancelled&lt;/code&gt; and the &lt;code&gt;StatusMessage&lt;/code&gt; element in the response indicates the cause of the failure. For help interpreting the &lt;code&gt;StatusMessage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/CHAP_Troubleshooting.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param activityIds &lt;p&gt;The activity IDs of the desired scaling activities. If you omit this property, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 IDs.&lt;/p&gt; (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param includeDeletedGroups Indicates whether to include scaling activity from deleted Auto Scaling groups. (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;100&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeScalingActivitiesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> activityIds, String autoScalingGroupName, Boolean includeDeletedGroups, Integer maxRecords, String nextToken, final ApiCallback<ActivitiesType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeScalingActivitiesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, activityIds, autoScalingGroupName, includeDeletedGroups, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ActivitiesType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeScalingProcessTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeScalingProcessTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeScalingProcessTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeScalingProcessTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeScalingProcessTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeScalingProcessTypes(Async)");
        }

        return gETDescribeScalingProcessTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the scaling process types for use with the &lt;a&gt;ResumeProcesses&lt;/a&gt; and &lt;a&gt;SuspendProcesses&lt;/a&gt; APIs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ProcessesType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ProcessesType gETDescribeScalingProcessTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ProcessesType> localVarResp = gETDescribeScalingProcessTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the scaling process types for use with the &lt;a&gt;ResumeProcesses&lt;/a&gt; and &lt;a&gt;SuspendProcesses&lt;/a&gt; APIs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ProcessesType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessesType> gETDescribeScalingProcessTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeScalingProcessTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ProcessesType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the scaling process types for use with the &lt;a&gt;ResumeProcesses&lt;/a&gt; and &lt;a&gt;SuspendProcesses&lt;/a&gt; APIs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeScalingProcessTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ProcessesType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeScalingProcessTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ProcessesType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeScheduledActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param scheduledActionNames &lt;p&gt;The names of one or more scheduled actions. If you omit this property, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 actions.&lt;/p&gt; (optional)
     * @param startTime The earliest scheduled start time to return. If scheduled action names are provided, this property is ignored. (optional)
     * @param endTime The latest scheduled start time to return. If scheduled action names are provided, this property is ignored. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeScheduledActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> scheduledActionNames, OffsetDateTime startTime, OffsetDateTime endTime, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeScheduledActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (scheduledActionNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ScheduledActionNames", scheduledActionNames));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeScheduledActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> scheduledActionNames, OffsetDateTime startTime, OffsetDateTime endTime, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeScheduledActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeScheduledActions(Async)");
        }

        return gETDescribeScheduledActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, scheduledActionNames, startTime, endTime, nextToken, maxRecords, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the scheduled actions that haven&#39;t run or that have not reached their end time.&lt;/p&gt; &lt;p&gt;To describe the scaling activities for scheduled actions that have already run, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param scheduledActionNames &lt;p&gt;The names of one or more scheduled actions. If you omit this property, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 actions.&lt;/p&gt; (optional)
     * @param startTime The earliest scheduled start time to return. If scheduled action names are provided, this property is ignored. (optional)
     * @param endTime The latest scheduled start time to return. If scheduled action names are provided, this property is ignored. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return ScheduledActionsType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ScheduledActionsType gETDescribeScheduledActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> scheduledActionNames, OffsetDateTime startTime, OffsetDateTime endTime, String nextToken, Integer maxRecords) throws ApiException {
        ApiResponse<ScheduledActionsType> localVarResp = gETDescribeScheduledActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, scheduledActionNames, startTime, endTime, nextToken, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the scheduled actions that haven&#39;t run or that have not reached their end time.&lt;/p&gt; &lt;p&gt;To describe the scaling activities for scheduled actions that have already run, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param scheduledActionNames &lt;p&gt;The names of one or more scheduled actions. If you omit this property, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 actions.&lt;/p&gt; (optional)
     * @param startTime The earliest scheduled start time to return. If scheduled action names are provided, this property is ignored. (optional)
     * @param endTime The latest scheduled start time to return. If scheduled action names are provided, this property is ignored. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ScheduledActionsType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduledActionsType> gETDescribeScheduledActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> scheduledActionNames, OffsetDateTime startTime, OffsetDateTime endTime, String nextToken, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeScheduledActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, scheduledActionNames, startTime, endTime, nextToken, maxRecords, null);
        Type localVarReturnType = new TypeToken<ScheduledActionsType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the scheduled actions that haven&#39;t run or that have not reached their end time.&lt;/p&gt; &lt;p&gt;To describe the scaling activities for scheduled actions that have already run, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param scheduledActionNames &lt;p&gt;The names of one or more scheduled actions. If you omit this property, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error.&lt;/p&gt; &lt;p&gt;Array Members: Maximum number of 50 actions.&lt;/p&gt; (optional)
     * @param startTime The earliest scheduled start time to return. If scheduled action names are provided, this property is ignored. (optional)
     * @param endTime The latest scheduled start time to return. If scheduled action names are provided, this property is ignored. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeScheduledActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, List<String> scheduledActionNames, OffsetDateTime startTime, OffsetDateTime endTime, String nextToken, Integer maxRecords, final ApiCallback<ScheduledActionsType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeScheduledActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, scheduledActionNames, startTime, endTime, nextToken, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<ScheduledActionsType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, &lt;code&gt;auto-scaling-group&lt;/code&gt;) is 1000. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Filter> filters, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Filter> filters, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeTags(Async)");
        }

        return gETDescribeTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, nextToken, maxRecords, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the specified tags.&lt;/p&gt; &lt;p&gt;You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.&lt;/p&gt; &lt;p&gt;You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there&#39;s no match, no special message is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, &lt;code&gt;auto-scaling-group&lt;/code&gt;) is 1000. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return TagsType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public TagsType gETDescribeTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Filter> filters, String nextToken, Integer maxRecords) throws ApiException {
        ApiResponse<TagsType> localVarResp = gETDescribeTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, nextToken, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the specified tags.&lt;/p&gt; &lt;p&gt;You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.&lt;/p&gt; &lt;p&gt;You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there&#39;s no match, no special message is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, &lt;code&gt;auto-scaling-group&lt;/code&gt;) is 1000. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;TagsType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsType> gETDescribeTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Filter> filters, String nextToken, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, nextToken, maxRecords, null);
        Type localVarReturnType = new TypeToken<TagsType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the specified tags.&lt;/p&gt; &lt;p&gt;You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.&lt;/p&gt; &lt;p&gt;You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there&#39;s no match, no special message is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param filters One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, &lt;code&gt;auto-scaling-group&lt;/code&gt;) is 1000. (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The default value is &lt;code&gt;50&lt;/code&gt; and the maximum value is &lt;code&gt;100&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<Filter> filters, String nextToken, Integer maxRecords, final ApiCallback<TagsType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, nextToken, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<TagsType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeTerminationPolicyTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTerminationPolicyTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTerminationPolicyTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTerminationPolicyTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeTerminationPolicyTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeTerminationPolicyTypes(Async)");
        }

        return gETDescribeTerminationPolicyTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the termination policies supported by Amazon EC2 Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTerminationPolicyTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTerminationPolicyTypesAnswer gETDescribeTerminationPolicyTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTerminationPolicyTypesAnswer> localVarResp = gETDescribeTerminationPolicyTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the termination policies supported by Amazon EC2 Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTerminationPolicyTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTerminationPolicyTypesAnswer> gETDescribeTerminationPolicyTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTerminationPolicyTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTerminationPolicyTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the termination policies supported by Amazon EC2 Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTerminationPolicyTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTerminationPolicyTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTerminationPolicyTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTerminationPolicyTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeTrafficSources
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficSourceType &lt;p&gt;The traffic source type that you want to describe.&lt;/p&gt; &lt;p&gt;The following lists the valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;elb&lt;/code&gt; if the traffic source is a Classic Load Balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;elbv2&lt;/code&gt; if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-lattice&lt;/code&gt; if the traffic source is VPC Lattice.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTrafficSourcesCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficSourceType, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTrafficSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (trafficSourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TrafficSourceType", trafficSourceType));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTrafficSourcesValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficSourceType, String nextToken, Integer maxRecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDescribeTrafficSources(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeTrafficSources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeTrafficSources(Async)");
        }

        return gETDescribeTrafficSourcesCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficSourceType, nextToken, maxRecords, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic sources for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can optionally provide a traffic source type. If you provide a traffic source type, then the results only include that traffic source type.&lt;/p&gt; &lt;p&gt;If you do not provide a traffic source type, then the results include all the traffic sources for the specified Auto Scaling group. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficSourceType &lt;p&gt;The traffic source type that you want to describe.&lt;/p&gt; &lt;p&gt;The following lists the valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;elb&lt;/code&gt; if the traffic source is a Classic Load Balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;elbv2&lt;/code&gt; if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-lattice&lt;/code&gt; if the traffic source is VPC Lattice.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @return DescribeTrafficSourcesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTrafficSourcesResponse gETDescribeTrafficSources(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficSourceType, String nextToken, Integer maxRecords) throws ApiException {
        ApiResponse<DescribeTrafficSourcesResponse> localVarResp = gETDescribeTrafficSourcesWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficSourceType, nextToken, maxRecords);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic sources for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can optionally provide a traffic source type. If you provide a traffic source type, then the results only include that traffic source type.&lt;/p&gt; &lt;p&gt;If you do not provide a traffic source type, then the results include all the traffic sources for the specified Auto Scaling group. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficSourceType &lt;p&gt;The traffic source type that you want to describe.&lt;/p&gt; &lt;p&gt;The following lists the valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;elb&lt;/code&gt; if the traffic source is a Classic Load Balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;elbv2&lt;/code&gt; if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-lattice&lt;/code&gt; if the traffic source is VPC Lattice.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeTrafficSourcesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTrafficSourcesResponse> gETDescribeTrafficSourcesWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficSourceType, String nextToken, Integer maxRecords) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTrafficSourcesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficSourceType, nextToken, maxRecords, null);
        Type localVarReturnType = new TypeToken<DescribeTrafficSourcesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the traffic sources for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can optionally provide a traffic source type. If you provide a traffic source type, then the results only include that traffic source type.&lt;/p&gt; &lt;p&gt;If you do not provide a traffic source type, then the results include all the traffic sources for the specified Auto Scaling group. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param trafficSourceType &lt;p&gt;The traffic source type that you want to describe.&lt;/p&gt; &lt;p&gt;The following lists the valid values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;elb&lt;/code&gt; if the traffic source is a Classic Load Balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;elbv2&lt;/code&gt; if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-lattice&lt;/code&gt; if the traffic source is VPC Lattice.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param nextToken The token for the next set of items to return. (You received this token from a previous call.) (optional)
     * @param maxRecords The maximum number of items to return with this call. The maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTrafficSourcesAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String trafficSourceType, String nextToken, Integer maxRecords, final ApiCallback<DescribeTrafficSourcesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTrafficSourcesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficSourceType, nextToken, maxRecords, _callback);
        Type localVarReturnType = new TypeToken<DescribeTrafficSourcesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeWarmPool
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords The maximum number of instances to return with this call. The maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of instances to return. (You received this token from a previous call.) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeWarmPoolCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeWarmPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeWarmPoolValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDescribeWarmPool(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeWarmPool(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeWarmPool(Async)");
        }

        return gETDescribeWarmPoolCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about a warm pool and its instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords The maximum number of instances to return with this call. The maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of instances to return. (You received this token from a previous call.) (optional)
     * @return DescribeWarmPoolAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeWarmPoolAnswer gETDescribeWarmPool(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String nextToken) throws ApiException {
        ApiResponse<DescribeWarmPoolAnswer> localVarResp = gETDescribeWarmPoolWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about a warm pool and its instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords The maximum number of instances to return with this call. The maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of instances to return. (You received this token from a previous call.) (optional)
     * @return ApiResponse&lt;DescribeWarmPoolAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeWarmPoolAnswer> gETDescribeWarmPoolWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeWarmPoolValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeWarmPoolAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about a warm pool and its instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords The maximum number of instances to return with this call. The maximum value is &lt;code&gt;50&lt;/code&gt;. (optional)
     * @param nextToken The token for the next set of instances to return. (You received this token from a previous call.) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeWarmPoolAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String nextToken, final ApiCallback<DescribeWarmPoolAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeWarmPoolValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeWarmPoolAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDetachInstances
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachInstancesCall(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DetachInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "InstanceIds", instanceIds));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (shouldDecrementDesiredCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ShouldDecrementDesiredCapacity", shouldDecrementDesiredCapacity));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDetachInstancesValidateBeforeCall(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDetachInstances(Async)");
        }

        // verify the required parameter 'shouldDecrementDesiredCapacity' is set
        if (shouldDecrementDesiredCapacity == null) {
            throw new ApiException("Missing the required parameter 'shouldDecrementDesiredCapacity' when calling gETDetachInstances(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDetachInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDetachInstances(Async)");
        }

        return gETDetachInstancesCall(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes one or more instances from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;After the instances are detached, you can manage them independent of the Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html\&quot;&gt;Detach EC2 instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @return DetachInstancesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DetachInstancesAnswer gETDetachInstances(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds) throws ApiException {
        ApiResponse<DetachInstancesAnswer> localVarResp = gETDetachInstancesWithHttpInfo(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes one or more instances from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;After the instances are detached, you can manage them independent of the Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html\&quot;&gt;Detach EC2 instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @return ApiResponse&lt;DetachInstancesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetachInstancesAnswer> gETDetachInstancesWithHttpInfo(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds) throws ApiException {
        okhttp3.Call localVarCall = gETDetachInstancesValidateBeforeCall(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, null);
        Type localVarReturnType = new TypeToken<DetachInstancesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes one or more instances from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;After the instances are detached, you can manage them independent of the Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html\&quot;&gt;Detach EC2 instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachInstancesAsync(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback<DetachInstancesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDetachInstancesValidateBeforeCall(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, _callback);
        Type localVarReturnType = new TypeToken<DetachInstancesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDetachLoadBalancerTargetGroups
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param targetGroupARNs The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachLoadBalancerTargetGroupsCall(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DetachLoadBalancerTargetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (targetGroupARNs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TargetGroupARNs", targetGroupARNs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDetachLoadBalancerTargetGroupsValidateBeforeCall(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDetachLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'targetGroupARNs' is set
        if (targetGroupARNs == null) {
            throw new ApiException("Missing the required parameter 'targetGroupARNs' when calling gETDetachLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDetachLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDetachLoadBalancerTargetGroups(Async)");
        }

        return gETDetachLoadBalancerTargetGroupsCall(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more target groups from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a target group, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API call. The instances remain running.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to detach target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param targetGroupARNs The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDetachLoadBalancerTargetGroups(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDetachLoadBalancerTargetGroupsWithHttpInfo(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more target groups from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a target group, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API call. The instances remain running.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to detach target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param targetGroupARNs The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDetachLoadBalancerTargetGroupsWithHttpInfo(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDetachLoadBalancerTargetGroupsValidateBeforeCall(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more target groups from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a target group, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API call. The instances remain running.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to detach target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param targetGroupARNs The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachLoadBalancerTargetGroupsAsync(String autoScalingGroupName, List<String> targetGroupARNs, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDetachLoadBalancerTargetGroupsValidateBeforeCall(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDetachLoadBalancers
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param loadBalancerNames The names of the load balancers. You can specify up to 10 load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachLoadBalancersCall(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DetachLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (loadBalancerNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LoadBalancerNames", loadBalancerNames));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDetachLoadBalancersValidateBeforeCall(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDetachLoadBalancers(Async)");
        }

        // verify the required parameter 'loadBalancerNames' is set
        if (loadBalancerNames == null) {
            throw new ApiException("Missing the required parameter 'loadBalancerNames' when calling gETDetachLoadBalancers(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDetachLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDetachLoadBalancers(Async)");
        }

        return gETDetachLoadBalancersCall(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more Classic Load Balancers from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation detaches only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;When you detach a load balancer, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API call. The instances remain running.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param loadBalancerNames The names of the load balancers. You can specify up to 10 load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDetachLoadBalancers(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDetachLoadBalancersWithHttpInfo(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more Classic Load Balancers from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation detaches only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;When you detach a load balancer, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API call. The instances remain running.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param loadBalancerNames The names of the load balancers. You can specify up to 10 load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDetachLoadBalancersWithHttpInfo(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDetachLoadBalancersValidateBeforeCall(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more Classic Load Balancers from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation detaches only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;When you detach a load balancer, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API call. The instances remain running.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param loadBalancerNames The names of the load balancers. You can specify up to 10 load balancers. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachLoadBalancersAsync(String autoScalingGroupName, List<String> loadBalancerNames, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDetachLoadBalancersValidateBeforeCall(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDetachTrafficSources
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param trafficSources The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachTrafficSourcesCall(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DetachTrafficSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (trafficSources != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TrafficSources", trafficSources));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDetachTrafficSourcesValidateBeforeCall(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDetachTrafficSources(Async)");
        }

        // verify the required parameter 'trafficSources' is set
        if (trafficSources == null) {
            throw new ApiException("Missing the required parameter 'trafficSources' when calling gETDetachTrafficSources(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDetachTrafficSources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDetachTrafficSources(Async)");
        }

        return gETDetachTrafficSourcesCall(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detaches one or more traffic sources from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a traffic source, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the traffic source using the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API call. The instances continue to run.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param trafficSources The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDetachTrafficSources(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDetachTrafficSourcesWithHttpInfo(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detaches one or more traffic sources from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a traffic source, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the traffic source using the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API call. The instances continue to run.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param trafficSources The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDetachTrafficSourcesWithHttpInfo(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDetachTrafficSourcesValidateBeforeCall(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detaches one or more traffic sources from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a traffic source, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the traffic source using the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API call. The instances continue to run.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param trafficSources The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetachTrafficSourcesAsync(String autoScalingGroupName, List<TrafficSourceIdentifier> trafficSources, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDetachTrafficSourcesValidateBeforeCall(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDisableMetricsCollection
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metrics &lt;p&gt;Identifies the metrics to disable.&lt;/p&gt; &lt;p&gt;You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMinSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMaxSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolWarmedCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all metrics are disabled.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics\&quot;&gt;Auto Scaling group metrics&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisableMetricsCollectionCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DisableMetricsCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (metrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Metrics", metrics));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDisableMetricsCollectionValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETDisableMetricsCollection(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDisableMetricsCollection(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDisableMetricsCollection(Async)");
        }

        return gETDisableMetricsCollectionCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics, _callback);

    }

    /**
     * 
     * Disables group metrics collection for the specified Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metrics &lt;p&gt;Identifies the metrics to disable.&lt;/p&gt; &lt;p&gt;You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMinSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMaxSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolWarmedCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all metrics are disabled.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics\&quot;&gt;Auto Scaling group metrics&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDisableMetricsCollection(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics) throws ApiException {
        gETDisableMetricsCollectionWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics);
    }

    /**
     * 
     * Disables group metrics collection for the specified Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metrics &lt;p&gt;Identifies the metrics to disable.&lt;/p&gt; &lt;p&gt;You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMinSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMaxSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolWarmedCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all metrics are disabled.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics\&quot;&gt;Auto Scaling group metrics&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDisableMetricsCollectionWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics) throws ApiException {
        okhttp3.Call localVarCall = gETDisableMetricsCollectionValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disables group metrics collection for the specified Auto Scaling group.
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metrics &lt;p&gt;Identifies the metrics to disable.&lt;/p&gt; &lt;p&gt;You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMinSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMaxSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolWarmedCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all metrics are disabled.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics\&quot;&gt;Auto Scaling group metrics&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisableMetricsCollectionAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDisableMetricsCollectionValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETEnableMetricsCollection
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param granularity The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is &lt;code&gt;1Minute&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metrics &lt;p&gt;Identifies the metrics to enable.&lt;/p&gt; &lt;p&gt;You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMinSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMaxSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolWarmedCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;Granularity&lt;/code&gt; and don&#39;t specify any metrics, all metrics are enabled.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics\&quot;&gt;Auto Scaling group metrics&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnableMetricsCollectionCall(String autoScalingGroupName, String granularity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=EnableMetricsCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (metrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Metrics", metrics));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Granularity", granularity));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETEnableMetricsCollectionValidateBeforeCall(String autoScalingGroupName, String granularity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETEnableMetricsCollection(Async)");
        }

        // verify the required parameter 'granularity' is set
        if (granularity == null) {
            throw new ApiException("Missing the required parameter 'granularity' when calling gETEnableMetricsCollection(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETEnableMetricsCollection(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETEnableMetricsCollection(Async)");
        }

        return gETEnableMetricsCollectionCall(autoScalingGroupName, granularity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables group metrics collection for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use these metrics to track changes in an Auto Scaling group and to set alarms on threshold values. You can view group metrics using the Amazon EC2 Auto Scaling console or the CloudWatch console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html\&quot;&gt;Monitor CloudWatch metrics for your Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param granularity The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is &lt;code&gt;1Minute&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metrics &lt;p&gt;Identifies the metrics to enable.&lt;/p&gt; &lt;p&gt;You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMinSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMaxSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolWarmedCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;Granularity&lt;/code&gt; and don&#39;t specify any metrics, all metrics are enabled.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics\&quot;&gt;Auto Scaling group metrics&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETEnableMetricsCollection(String autoScalingGroupName, String granularity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics) throws ApiException {
        gETEnableMetricsCollectionWithHttpInfo(autoScalingGroupName, granularity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics);
    }

    /**
     * 
     * &lt;p&gt;Enables group metrics collection for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use these metrics to track changes in an Auto Scaling group and to set alarms on threshold values. You can view group metrics using the Amazon EC2 Auto Scaling console or the CloudWatch console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html\&quot;&gt;Monitor CloudWatch metrics for your Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param granularity The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is &lt;code&gt;1Minute&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metrics &lt;p&gt;Identifies the metrics to enable.&lt;/p&gt; &lt;p&gt;You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMinSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMaxSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolWarmedCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;Granularity&lt;/code&gt; and don&#39;t specify any metrics, all metrics are enabled.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics\&quot;&gt;Auto Scaling group metrics&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETEnableMetricsCollectionWithHttpInfo(String autoScalingGroupName, String granularity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics) throws ApiException {
        okhttp3.Call localVarCall = gETEnableMetricsCollectionValidateBeforeCall(autoScalingGroupName, granularity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables group metrics collection for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use these metrics to track changes in an Auto Scaling group and to set alarms on threshold values. You can view group metrics using the Amazon EC2 Auto Scaling console or the CloudWatch console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html\&quot;&gt;Monitor CloudWatch metrics for your Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param granularity The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is &lt;code&gt;1Minute&lt;/code&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param metrics &lt;p&gt;Identifies the metrics to enable.&lt;/p&gt; &lt;p&gt;You can specify one or more of the following metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMinSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupMaxSize&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalInstances&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupInServiceCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupStandbyCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolWarmedCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolPendingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTerminatingCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;WarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolDesiredCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GroupAndWarmPoolTotalCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;Granularity&lt;/code&gt; and don&#39;t specify any metrics, all metrics are enabled.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics\&quot;&gt;Auto Scaling group metrics&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnableMetricsCollectionAsync(String autoScalingGroupName, String granularity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> metrics, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETEnableMetricsCollectionValidateBeforeCall(autoScalingGroupName, granularity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETEnterStandby
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to &lt;code&gt;Standby&lt;/code&gt; mode. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnterStandbyCall(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=EnterStandby";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "InstanceIds", instanceIds));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (shouldDecrementDesiredCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ShouldDecrementDesiredCapacity", shouldDecrementDesiredCapacity));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETEnterStandbyValidateBeforeCall(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETEnterStandby(Async)");
        }

        // verify the required parameter 'shouldDecrementDesiredCapacity' is set
        if (shouldDecrementDesiredCapacity == null) {
            throw new ApiException("Missing the required parameter 'shouldDecrementDesiredCapacity' when calling gETEnterStandby(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETEnterStandby(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETEnterStandby(Async)");
        }

        return gETEnterStandbyCall(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, _callback);

    }

    /**
     * 
     * &lt;p&gt;Moves the specified instances into the standby state.&lt;/p&gt; &lt;p&gt;If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.&lt;/p&gt; &lt;p&gt;If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to &lt;code&gt;Standby&lt;/code&gt; mode. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @return EnterStandbyAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public EnterStandbyAnswer gETEnterStandby(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds) throws ApiException {
        ApiResponse<EnterStandbyAnswer> localVarResp = gETEnterStandbyWithHttpInfo(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Moves the specified instances into the standby state.&lt;/p&gt; &lt;p&gt;If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.&lt;/p&gt; &lt;p&gt;If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to &lt;code&gt;Standby&lt;/code&gt; mode. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @return ApiResponse&lt;EnterStandbyAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnterStandbyAnswer> gETEnterStandbyWithHttpInfo(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds) throws ApiException {
        okhttp3.Call localVarCall = gETEnterStandbyValidateBeforeCall(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, null);
        Type localVarReturnType = new TypeToken<EnterStandbyAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Moves the specified instances into the standby state.&lt;/p&gt; &lt;p&gt;If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.&lt;/p&gt; &lt;p&gt;If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to &lt;code&gt;Standby&lt;/code&gt; mode. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEnterStandbyAsync(String autoScalingGroupName, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback<EnterStandbyAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETEnterStandbyValidateBeforeCall(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, _callback);
        Type localVarReturnType = new TypeToken<EnterStandbyAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETExecutePolicy
     * @param policyName The name or ARN of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param honorCooldown &lt;p&gt;Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param metricValue &lt;p&gt;The metric value to compare to &lt;code&gt;BreachThreshold&lt;/code&gt;. This enables you to execute a policy of type &lt;code&gt;StepScaling&lt;/code&gt; and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.&lt;/p&gt; &lt;p&gt;If you specify a metric value that doesn&#39;t correspond to a step adjustment for the policy, the call returns an error.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; and not supported otherwise.&lt;/p&gt; (optional)
     * @param breachThreshold &lt;p&gt;The breach threshold for the alarm.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; and not supported otherwise.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETExecutePolicyCall(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, Boolean honorCooldown, Double metricValue, Double breachThreshold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ExecutePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyName", policyName));
        }

        if (honorCooldown != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HonorCooldown", honorCooldown));
        }

        if (metricValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricValue", metricValue));
        }

        if (breachThreshold != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BreachThreshold", breachThreshold));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETExecutePolicyValidateBeforeCall(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, Boolean honorCooldown, Double metricValue, Double breachThreshold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling gETExecutePolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETExecutePolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETExecutePolicy(Async)");
        }

        return gETExecutePolicyCall(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, honorCooldown, metricValue, breachThreshold, _callback);

    }

    /**
     * 
     * Executes the specified policy. This can be useful for testing the design of your scaling policy.
     * @param policyName The name or ARN of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param honorCooldown &lt;p&gt;Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param metricValue &lt;p&gt;The metric value to compare to &lt;code&gt;BreachThreshold&lt;/code&gt;. This enables you to execute a policy of type &lt;code&gt;StepScaling&lt;/code&gt; and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.&lt;/p&gt; &lt;p&gt;If you specify a metric value that doesn&#39;t correspond to a step adjustment for the policy, the call returns an error.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; and not supported otherwise.&lt;/p&gt; (optional)
     * @param breachThreshold &lt;p&gt;The breach threshold for the alarm.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; and not supported otherwise.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETExecutePolicy(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, Boolean honorCooldown, Double metricValue, Double breachThreshold) throws ApiException {
        gETExecutePolicyWithHttpInfo(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, honorCooldown, metricValue, breachThreshold);
    }

    /**
     * 
     * Executes the specified policy. This can be useful for testing the design of your scaling policy.
     * @param policyName The name or ARN of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param honorCooldown &lt;p&gt;Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param metricValue &lt;p&gt;The metric value to compare to &lt;code&gt;BreachThreshold&lt;/code&gt;. This enables you to execute a policy of type &lt;code&gt;StepScaling&lt;/code&gt; and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.&lt;/p&gt; &lt;p&gt;If you specify a metric value that doesn&#39;t correspond to a step adjustment for the policy, the call returns an error.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; and not supported otherwise.&lt;/p&gt; (optional)
     * @param breachThreshold &lt;p&gt;The breach threshold for the alarm.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; and not supported otherwise.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETExecutePolicyWithHttpInfo(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, Boolean honorCooldown, Double metricValue, Double breachThreshold) throws ApiException {
        okhttp3.Call localVarCall = gETExecutePolicyValidateBeforeCall(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, honorCooldown, metricValue, breachThreshold, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Executes the specified policy. This can be useful for testing the design of your scaling policy.
     * @param policyName The name or ARN of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param autoScalingGroupName The name of the Auto Scaling group. (optional)
     * @param honorCooldown &lt;p&gt;Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param metricValue &lt;p&gt;The metric value to compare to &lt;code&gt;BreachThreshold&lt;/code&gt;. This enables you to execute a policy of type &lt;code&gt;StepScaling&lt;/code&gt; and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59.&lt;/p&gt; &lt;p&gt;If you specify a metric value that doesn&#39;t correspond to a step adjustment for the policy, the call returns an error.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; and not supported otherwise.&lt;/p&gt; (optional)
     * @param breachThreshold &lt;p&gt;The breach threshold for the alarm.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; and not supported otherwise.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETExecutePolicyAsync(String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String autoScalingGroupName, Boolean honorCooldown, Double metricValue, Double breachThreshold, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETExecutePolicyValidateBeforeCall(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, honorCooldown, metricValue, breachThreshold, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETExitStandby
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETExitStandbyCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ExitStandby";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "InstanceIds", instanceIds));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETExitStandbyValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETExitStandby(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETExitStandby(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETExitStandby(Async)");
        }

        return gETExitStandbyCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, _callback);

    }

    /**
     * 
     * &lt;p&gt;Moves the specified instances out of the standby state.&lt;/p&gt; &lt;p&gt;After you put the instances back in service, the desired capacity is incremented.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @return ExitStandbyAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ExitStandbyAnswer gETExitStandby(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds) throws ApiException {
        ApiResponse<ExitStandbyAnswer> localVarResp = gETExitStandbyWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Moves the specified instances out of the standby state.&lt;/p&gt; &lt;p&gt;After you put the instances back in service, the desired capacity is incremented.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @return ApiResponse&lt;ExitStandbyAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExitStandbyAnswer> gETExitStandbyWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds) throws ApiException {
        okhttp3.Call localVarCall = gETExitStandbyValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, null);
        Type localVarReturnType = new TypeToken<ExitStandbyAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Moves the specified instances out of the standby state.&lt;/p&gt; &lt;p&gt;After you put the instances back in service, the desired capacity is incremented.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param instanceIds The IDs of the instances. You can specify up to 20 instances. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETExitStandbyAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> instanceIds, final ApiCallback<ExitStandbyAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETExitStandbyValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, _callback);
        Type localVarReturnType = new TypeToken<ExitStandbyAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetPredictiveScalingForecast
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param policyName The name of the policy. (required)
     * @param startTime The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time. (required)
     * @param endTime &lt;p&gt;The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days. &lt;/p&gt; &lt;p&gt;Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. Amazon EC2 Auto Scaling only issues forecasts for periods of two days in advance.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetPredictiveScalingForecastCall(String autoScalingGroupName, String policyName, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetPredictiveScalingForecast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyName", policyName));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetPredictiveScalingForecastValidateBeforeCall(String autoScalingGroupName, String policyName, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETGetPredictiveScalingForecast(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling gETGetPredictiveScalingForecast(Async)");
        }

        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling gETGetPredictiveScalingForecast(Async)");
        }

        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling gETGetPredictiveScalingForecast(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetPredictiveScalingForecast(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetPredictiveScalingForecast(Async)");
        }

        return gETGetPredictiveScalingForecastCall(autoScalingGroupName, policyName, startTime, endTime, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the forecast data for a predictive scaling policy.&lt;/p&gt; &lt;p&gt;Load forecasts are predictions of the hourly load values using historical load data from CloudWatch and an analysis of historical trends. Capacity forecasts are represented as predicted values for the minimum capacity that is needed on an hourly basis, based on the hourly load forecast.&lt;/p&gt; &lt;p&gt;A minimum of 24 hours of data is required to create the initial forecasts. However, having a full 14 days of historical data results in more accurate forecasts.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param policyName The name of the policy. (required)
     * @param startTime The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time. (required)
     * @param endTime &lt;p&gt;The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days. &lt;/p&gt; &lt;p&gt;Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. Amazon EC2 Auto Scaling only issues forecasts for periods of two days in advance.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPredictiveScalingForecastAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public GetPredictiveScalingForecastAnswer gETGetPredictiveScalingForecast(String autoScalingGroupName, String policyName, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPredictiveScalingForecastAnswer> localVarResp = gETGetPredictiveScalingForecastWithHttpInfo(autoScalingGroupName, policyName, startTime, endTime, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the forecast data for a predictive scaling policy.&lt;/p&gt; &lt;p&gt;Load forecasts are predictions of the hourly load values using historical load data from CloudWatch and an analysis of historical trends. Capacity forecasts are represented as predicted values for the minimum capacity that is needed on an hourly basis, based on the hourly load forecast.&lt;/p&gt; &lt;p&gt;A minimum of 24 hours of data is required to create the initial forecasts. However, having a full 14 days of historical data results in more accurate forecasts.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param policyName The name of the policy. (required)
     * @param startTime The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time. (required)
     * @param endTime &lt;p&gt;The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days. &lt;/p&gt; &lt;p&gt;Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. Amazon EC2 Auto Scaling only issues forecasts for periods of two days in advance.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPredictiveScalingForecastAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPredictiveScalingForecastAnswer> gETGetPredictiveScalingForecastWithHttpInfo(String autoScalingGroupName, String policyName, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetPredictiveScalingForecastValidateBeforeCall(autoScalingGroupName, policyName, startTime, endTime, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPredictiveScalingForecastAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the forecast data for a predictive scaling policy.&lt;/p&gt; &lt;p&gt;Load forecasts are predictions of the hourly load values using historical load data from CloudWatch and an analysis of historical trends. Capacity forecasts are represented as predicted values for the minimum capacity that is needed on an hourly basis, based on the hourly load forecast.&lt;/p&gt; &lt;p&gt;A minimum of 24 hours of data is required to create the initial forecasts. However, having a full 14 days of historical data results in more accurate forecasts.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param policyName The name of the policy. (required)
     * @param startTime The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time. (required)
     * @param endTime &lt;p&gt;The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days. &lt;/p&gt; &lt;p&gt;Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. Amazon EC2 Auto Scaling only issues forecasts for periods of two days in advance.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetPredictiveScalingForecastAsync(String autoScalingGroupName, String policyName, OffsetDateTime startTime, OffsetDateTime endTime, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPredictiveScalingForecastAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetPredictiveScalingForecastValidateBeforeCall(autoScalingGroupName, policyName, startTime, endTime, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPredictiveScalingForecastAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutLifecycleHook
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleTransition &lt;p&gt;The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a lifecycle hook for scale-out events, specify &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a lifecycle hook for scale-in events, specify &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.&lt;/p&gt; &lt;p&gt;Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt; (optional)
     * @param notificationTargetARN &lt;p&gt;The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.&lt;/p&gt; &lt;p&gt;If you specify an empty string, this overrides the current ARN.&lt;/p&gt; &lt;p&gt;This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.&lt;/p&gt; &lt;p&gt;When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: &lt;code&gt;\&quot;Event\&quot;: \&quot;autoscaling:TEST_NOTIFICATION\&quot;&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param notificationMetadata Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target. (optional)
     * @param heartbeatTimeout The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from &lt;code&gt;30&lt;/code&gt; to &lt;code&gt;7200&lt;/code&gt; seconds. The default value is &lt;code&gt;3600&lt;/code&gt; seconds (1 hour). (optional)
     * @param defaultResult &lt;p&gt;The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is &lt;code&gt;ABANDON&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;CONTINUE&lt;/code&gt; | &lt;code&gt;ABANDON&lt;/code&gt; &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutLifecycleHookCall(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleTransition, String roleARN, String notificationTargetARN, String notificationMetadata, Integer heartbeatTimeout, String defaultResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutLifecycleHook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lifecycleHookName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LifecycleHookName", lifecycleHookName));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (lifecycleTransition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LifecycleTransition", lifecycleTransition));
        }

        if (roleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleARN", roleARN));
        }

        if (notificationTargetARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NotificationTargetARN", notificationTargetARN));
        }

        if (notificationMetadata != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NotificationMetadata", notificationMetadata));
        }

        if (heartbeatTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HeartbeatTimeout", heartbeatTimeout));
        }

        if (defaultResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefaultResult", defaultResult));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutLifecycleHookValidateBeforeCall(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleTransition, String roleARN, String notificationTargetARN, String notificationMetadata, Integer heartbeatTimeout, String defaultResult, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifecycleHookName' is set
        if (lifecycleHookName == null) {
            throw new ApiException("Missing the required parameter 'lifecycleHookName' when calling gETPutLifecycleHook(Async)");
        }

        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETPutLifecycleHook(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutLifecycleHook(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutLifecycleHook(Async)");
        }

        return gETPutLifecycleHookCall(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleTransition, roleARN, notificationTargetARN, notificationMetadata, heartbeatTimeout, defaultResult, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a lifecycle hook for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;Lifecycle hooks let you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state using the &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.&lt;/p&gt; &lt;p&gt;You can view the lifecycle hooks for an Auto Scaling group using the &lt;a&gt;DescribeLifecycleHooks&lt;/a&gt; API call. If you are no longer using a lifecycle hook, you can delete it by calling the &lt;a&gt;DeleteLifecycleHook&lt;/a&gt; API.&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleTransition &lt;p&gt;The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a lifecycle hook for scale-out events, specify &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a lifecycle hook for scale-in events, specify &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.&lt;/p&gt; &lt;p&gt;Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt; (optional)
     * @param notificationTargetARN &lt;p&gt;The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.&lt;/p&gt; &lt;p&gt;If you specify an empty string, this overrides the current ARN.&lt;/p&gt; &lt;p&gt;This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.&lt;/p&gt; &lt;p&gt;When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: &lt;code&gt;\&quot;Event\&quot;: \&quot;autoscaling:TEST_NOTIFICATION\&quot;&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param notificationMetadata Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target. (optional)
     * @param heartbeatTimeout The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from &lt;code&gt;30&lt;/code&gt; to &lt;code&gt;7200&lt;/code&gt; seconds. The default value is &lt;code&gt;3600&lt;/code&gt; seconds (1 hour). (optional)
     * @param defaultResult &lt;p&gt;The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is &lt;code&gt;ABANDON&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;CONTINUE&lt;/code&gt; | &lt;code&gt;ABANDON&lt;/code&gt; &lt;/p&gt; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETPutLifecycleHook(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleTransition, String roleARN, String notificationTargetARN, String notificationMetadata, Integer heartbeatTimeout, String defaultResult) throws ApiException {
        ApiResponse<Object> localVarResp = gETPutLifecycleHookWithHttpInfo(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleTransition, roleARN, notificationTargetARN, notificationMetadata, heartbeatTimeout, defaultResult);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a lifecycle hook for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;Lifecycle hooks let you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state using the &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.&lt;/p&gt; &lt;p&gt;You can view the lifecycle hooks for an Auto Scaling group using the &lt;a&gt;DescribeLifecycleHooks&lt;/a&gt; API call. If you are no longer using a lifecycle hook, you can delete it by calling the &lt;a&gt;DeleteLifecycleHook&lt;/a&gt; API.&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleTransition &lt;p&gt;The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a lifecycle hook for scale-out events, specify &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a lifecycle hook for scale-in events, specify &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.&lt;/p&gt; &lt;p&gt;Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt; (optional)
     * @param notificationTargetARN &lt;p&gt;The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.&lt;/p&gt; &lt;p&gt;If you specify an empty string, this overrides the current ARN.&lt;/p&gt; &lt;p&gt;This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.&lt;/p&gt; &lt;p&gt;When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: &lt;code&gt;\&quot;Event\&quot;: \&quot;autoscaling:TEST_NOTIFICATION\&quot;&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param notificationMetadata Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target. (optional)
     * @param heartbeatTimeout The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from &lt;code&gt;30&lt;/code&gt; to &lt;code&gt;7200&lt;/code&gt; seconds. The default value is &lt;code&gt;3600&lt;/code&gt; seconds (1 hour). (optional)
     * @param defaultResult &lt;p&gt;The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is &lt;code&gt;ABANDON&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;CONTINUE&lt;/code&gt; | &lt;code&gt;ABANDON&lt;/code&gt; &lt;/p&gt; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETPutLifecycleHookWithHttpInfo(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleTransition, String roleARN, String notificationTargetARN, String notificationMetadata, Integer heartbeatTimeout, String defaultResult) throws ApiException {
        okhttp3.Call localVarCall = gETPutLifecycleHookValidateBeforeCall(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleTransition, roleARN, notificationTargetARN, notificationMetadata, heartbeatTimeout, defaultResult, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a lifecycle hook for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;Lifecycle hooks let you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state using the &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.&lt;/p&gt; &lt;p&gt;You can view the lifecycle hooks for an Auto Scaling group using the &lt;a&gt;DescribeLifecycleHooks&lt;/a&gt; API call. If you are no longer using a lifecycle hook, you can delete it by calling the &lt;a&gt;DeleteLifecycleHook&lt;/a&gt; API.&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleTransition &lt;p&gt;The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a lifecycle hook for scale-out events, specify &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a lifecycle hook for scale-in events, specify &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.&lt;/p&gt; &lt;p&gt;Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt; (optional)
     * @param notificationTargetARN &lt;p&gt;The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.&lt;/p&gt; &lt;p&gt;If you specify an empty string, this overrides the current ARN.&lt;/p&gt; &lt;p&gt;This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.&lt;/p&gt; &lt;p&gt;When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: &lt;code&gt;\&quot;Event\&quot;: \&quot;autoscaling:TEST_NOTIFICATION\&quot;&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param notificationMetadata Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target. (optional)
     * @param heartbeatTimeout The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from &lt;code&gt;30&lt;/code&gt; to &lt;code&gt;7200&lt;/code&gt; seconds. The default value is &lt;code&gt;3600&lt;/code&gt; seconds (1 hour). (optional)
     * @param defaultResult &lt;p&gt;The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is &lt;code&gt;ABANDON&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;CONTINUE&lt;/code&gt; | &lt;code&gt;ABANDON&lt;/code&gt; &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutLifecycleHookAsync(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleTransition, String roleARN, String notificationTargetARN, String notificationMetadata, Integer heartbeatTimeout, String defaultResult, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutLifecycleHookValidateBeforeCall(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleTransition, roleARN, notificationTargetARN, notificationMetadata, heartbeatTimeout, defaultResult, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutNotificationConfiguration
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param topicARN The Amazon Resource Name (ARN) of the Amazon SNS topic. (required)
     * @param notificationTypes The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the &lt;a&gt;DescribeAutoScalingNotificationTypes&lt;/a&gt; API. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutNotificationConfigurationCall(String autoScalingGroupName, String topicARN, List<String> notificationTypes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutNotificationConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (topicARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TopicARN", topicARN));
        }

        if (notificationTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "NotificationTypes", notificationTypes));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutNotificationConfigurationValidateBeforeCall(String autoScalingGroupName, String topicARN, List<String> notificationTypes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETPutNotificationConfiguration(Async)");
        }

        // verify the required parameter 'topicARN' is set
        if (topicARN == null) {
            throw new ApiException("Missing the required parameter 'topicARN' when calling gETPutNotificationConfiguration(Async)");
        }

        // verify the required parameter 'notificationTypes' is set
        if (notificationTypes == null) {
            throw new ApiException("Missing the required parameter 'notificationTypes' when calling gETPutNotificationConfiguration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutNotificationConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutNotificationConfiguration(Async)");
        }

        return gETPutNotificationConfigurationCall(autoScalingGroupName, topicARN, notificationTypes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.&lt;/p&gt; &lt;p&gt;This configuration overwrites any existing configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html\&quot;&gt;Getting Amazon SNS notifications when your Auto Scaling group scales&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of SNS topics, which is 10 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param topicARN The Amazon Resource Name (ARN) of the Amazon SNS topic. (required)
     * @param notificationTypes The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the &lt;a&gt;DescribeAutoScalingNotificationTypes&lt;/a&gt; API. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void gETPutNotificationConfiguration(String autoScalingGroupName, String topicARN, List<String> notificationTypes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETPutNotificationConfigurationWithHttpInfo(autoScalingGroupName, topicARN, notificationTypes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.&lt;/p&gt; &lt;p&gt;This configuration overwrites any existing configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html\&quot;&gt;Getting Amazon SNS notifications when your Auto Scaling group scales&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of SNS topics, which is 10 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param topicARN The Amazon Resource Name (ARN) of the Amazon SNS topic. (required)
     * @param notificationTypes The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the &lt;a&gt;DescribeAutoScalingNotificationTypes&lt;/a&gt; API. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETPutNotificationConfigurationWithHttpInfo(String autoScalingGroupName, String topicARN, List<String> notificationTypes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETPutNotificationConfigurationValidateBeforeCall(autoScalingGroupName, topicARN, notificationTypes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.&lt;/p&gt; &lt;p&gt;This configuration overwrites any existing configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html\&quot;&gt;Getting Amazon SNS notifications when your Auto Scaling group scales&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of SNS topics, which is 10 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param topicARN The Amazon Resource Name (ARN) of the Amazon SNS topic. (required)
     * @param notificationTypes The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the &lt;a&gt;DescribeAutoScalingNotificationTypes&lt;/a&gt; API. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutNotificationConfigurationAsync(String autoScalingGroupName, String topicARN, List<String> notificationTypes, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutNotificationConfigurationValidateBeforeCall(autoScalingGroupName, topicARN, notificationTypes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutScalingPolicy
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param policyName The name of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyType &lt;p&gt;One of the following policy types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TargetTrackingScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StepScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SimpleScaling&lt;/code&gt; (default)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PredictiveScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param adjustmentType &lt;p&gt;Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are &lt;code&gt;ChangeInCapacity&lt;/code&gt;, &lt;code&gt;ExactCapacity&lt;/code&gt;, and &lt;code&gt;PercentChangeInCapacity&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; or &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment\&quot;&gt;Scaling adjustment types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param minAdjustmentStep Available for backward compatibility. Use &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; instead. (optional)
     * @param minAdjustmentMagnitude &lt;p&gt;The minimum value to scale by when the adjustment type is &lt;code&gt;PercentChangeInCapacity&lt;/code&gt;. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; or &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment\&quot;&gt;Scaling adjustment types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Some Auto Scaling groups use instance weights. In this case, set the &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; to a value that is at least as large as your largest instance weight.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param scalingAdjustment &lt;p&gt;The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. (Not used with any other policy type.) &lt;/p&gt; (optional)
     * @param cooldown &lt;p&gt;A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: None&lt;/p&gt; (optional)
     * @param metricAggregationType &lt;p&gt;The aggregation type for the CloudWatch metrics. The valid values are &lt;code&gt;Minimum&lt;/code&gt;, &lt;code&gt;Maximum&lt;/code&gt;, and &lt;code&gt;Average&lt;/code&gt;. If the aggregation type is null, the value is treated as &lt;code&gt;Average&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;StepScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stepAdjustments &lt;p&gt;A set of adjustments that enable you to scale based on the size of the alarm breach.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt;. (Not used with any other policy type.) &lt;/p&gt; (optional)
     * @param estimatedInstanceWarmup &lt;p&gt; &lt;i&gt;Not needed if the default instance warmup is defined for the group.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;TargetTrackingScaling&lt;/code&gt; or &lt;code&gt;StepScaling&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then &lt;code&gt;EstimatedInstanceWarmup&lt;/code&gt; falls back to the value of default cooldown.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param targetTrackingConfiguration &lt;p&gt;A target tracking scaling policy. Provides support for predefined or custom metrics.&lt;/p&gt; &lt;p&gt;The following predefined metrics are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageCPUUtilization&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageNetworkIn&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageNetworkOut&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALBRequestCountPerTarget&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;ALBRequestCountPerTarget&lt;/code&gt; for the metric, you must specify the &lt;code&gt;ResourceLabel&lt;/code&gt; property with the &lt;code&gt;PredefinedMetricSpecification&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html\&quot;&gt;TargetTrackingConfiguration&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;TargetTrackingScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enabled Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html\&quot;&gt;Disabling a scaling policy for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param predictiveScalingConfiguration &lt;p&gt;A predictive scaling policy. Provides support for predefined and custom metrics.&lt;/p&gt; &lt;p&gt;Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html\&quot;&gt;PredictiveScalingConfiguration&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;PredictiveScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutScalingPolicyCall(String autoScalingGroupName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String policyType, String adjustmentType, Integer minAdjustmentStep, Integer minAdjustmentMagnitude, Integer scalingAdjustment, Integer cooldown, String metricAggregationType, List<StepAdjustment> stepAdjustments, Integer estimatedInstanceWarmup, GETPutScalingPolicyTargetTrackingConfigurationParameter targetTrackingConfiguration, Boolean enabled, GETPutScalingPolicyPredictiveScalingConfigurationParameter predictiveScalingConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutScalingPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyName", policyName));
        }

        if (policyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicyType", policyType));
        }

        if (adjustmentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AdjustmentType", adjustmentType));
        }

        if (minAdjustmentStep != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MinAdjustmentStep", minAdjustmentStep));
        }

        if (minAdjustmentMagnitude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MinAdjustmentMagnitude", minAdjustmentMagnitude));
        }

        if (scalingAdjustment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ScalingAdjustment", scalingAdjustment));
        }

        if (cooldown != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Cooldown", cooldown));
        }

        if (metricAggregationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MetricAggregationType", metricAggregationType));
        }

        if (stepAdjustments != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "StepAdjustments", stepAdjustments));
        }

        if (estimatedInstanceWarmup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EstimatedInstanceWarmup", estimatedInstanceWarmup));
        }

        if (targetTrackingConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetTrackingConfiguration", targetTrackingConfiguration));
        }

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Enabled", enabled));
        }

        if (predictiveScalingConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PredictiveScalingConfiguration", predictiveScalingConfiguration));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutScalingPolicyValidateBeforeCall(String autoScalingGroupName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String policyType, String adjustmentType, Integer minAdjustmentStep, Integer minAdjustmentMagnitude, Integer scalingAdjustment, Integer cooldown, String metricAggregationType, List<StepAdjustment> stepAdjustments, Integer estimatedInstanceWarmup, GETPutScalingPolicyTargetTrackingConfigurationParameter targetTrackingConfiguration, Boolean enabled, GETPutScalingPolicyPredictiveScalingConfigurationParameter predictiveScalingConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETPutScalingPolicy(Async)");
        }

        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling gETPutScalingPolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutScalingPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutScalingPolicy(Async)");
        }

        return gETPutScalingPolicyCall(autoScalingGroupName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyType, adjustmentType, minAdjustmentStep, minAdjustmentMagnitude, scalingAdjustment, cooldown, metricAggregationType, stepAdjustments, estimatedInstanceWarmup, targetTrackingConfiguration, enabled, predictiveScalingConfiguration, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a scaling policy for an Auto Scaling group. Scaling policies are used to scale an Auto Scaling group based on configurable metrics. If no policies are defined, the dynamic scaling and predictive scaling features are not used. &lt;/p&gt; &lt;p&gt;For more information about using dynamic scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html\&quot;&gt;Target tracking scaling policies&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html\&quot;&gt;Step and simple scaling policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about using predictive scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scaling policies for an Auto Scaling group using the &lt;a&gt;DescribePolicies&lt;/a&gt; API call. If you are no longer using a scaling policy, you can delete it by calling the &lt;a&gt;DeletePolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param policyName The name of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyType &lt;p&gt;One of the following policy types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TargetTrackingScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StepScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SimpleScaling&lt;/code&gt; (default)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PredictiveScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param adjustmentType &lt;p&gt;Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are &lt;code&gt;ChangeInCapacity&lt;/code&gt;, &lt;code&gt;ExactCapacity&lt;/code&gt;, and &lt;code&gt;PercentChangeInCapacity&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; or &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment\&quot;&gt;Scaling adjustment types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param minAdjustmentStep Available for backward compatibility. Use &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; instead. (optional)
     * @param minAdjustmentMagnitude &lt;p&gt;The minimum value to scale by when the adjustment type is &lt;code&gt;PercentChangeInCapacity&lt;/code&gt;. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; or &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment\&quot;&gt;Scaling adjustment types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Some Auto Scaling groups use instance weights. In this case, set the &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; to a value that is at least as large as your largest instance weight.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param scalingAdjustment &lt;p&gt;The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. (Not used with any other policy type.) &lt;/p&gt; (optional)
     * @param cooldown &lt;p&gt;A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: None&lt;/p&gt; (optional)
     * @param metricAggregationType &lt;p&gt;The aggregation type for the CloudWatch metrics. The valid values are &lt;code&gt;Minimum&lt;/code&gt;, &lt;code&gt;Maximum&lt;/code&gt;, and &lt;code&gt;Average&lt;/code&gt;. If the aggregation type is null, the value is treated as &lt;code&gt;Average&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;StepScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stepAdjustments &lt;p&gt;A set of adjustments that enable you to scale based on the size of the alarm breach.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt;. (Not used with any other policy type.) &lt;/p&gt; (optional)
     * @param estimatedInstanceWarmup &lt;p&gt; &lt;i&gt;Not needed if the default instance warmup is defined for the group.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;TargetTrackingScaling&lt;/code&gt; or &lt;code&gt;StepScaling&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then &lt;code&gt;EstimatedInstanceWarmup&lt;/code&gt; falls back to the value of default cooldown.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param targetTrackingConfiguration &lt;p&gt;A target tracking scaling policy. Provides support for predefined or custom metrics.&lt;/p&gt; &lt;p&gt;The following predefined metrics are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageCPUUtilization&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageNetworkIn&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageNetworkOut&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALBRequestCountPerTarget&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;ALBRequestCountPerTarget&lt;/code&gt; for the metric, you must specify the &lt;code&gt;ResourceLabel&lt;/code&gt; property with the &lt;code&gt;PredefinedMetricSpecification&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html\&quot;&gt;TargetTrackingConfiguration&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;TargetTrackingScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enabled Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html\&quot;&gt;Disabling a scaling policy for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param predictiveScalingConfiguration &lt;p&gt;A predictive scaling policy. Provides support for predefined and custom metrics.&lt;/p&gt; &lt;p&gt;Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html\&quot;&gt;PredictiveScalingConfiguration&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;PredictiveScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return PolicyARNType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public PolicyARNType gETPutScalingPolicy(String autoScalingGroupName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String policyType, String adjustmentType, Integer minAdjustmentStep, Integer minAdjustmentMagnitude, Integer scalingAdjustment, Integer cooldown, String metricAggregationType, List<StepAdjustment> stepAdjustments, Integer estimatedInstanceWarmup, GETPutScalingPolicyTargetTrackingConfigurationParameter targetTrackingConfiguration, Boolean enabled, GETPutScalingPolicyPredictiveScalingConfigurationParameter predictiveScalingConfiguration) throws ApiException {
        ApiResponse<PolicyARNType> localVarResp = gETPutScalingPolicyWithHttpInfo(autoScalingGroupName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyType, adjustmentType, minAdjustmentStep, minAdjustmentMagnitude, scalingAdjustment, cooldown, metricAggregationType, stepAdjustments, estimatedInstanceWarmup, targetTrackingConfiguration, enabled, predictiveScalingConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a scaling policy for an Auto Scaling group. Scaling policies are used to scale an Auto Scaling group based on configurable metrics. If no policies are defined, the dynamic scaling and predictive scaling features are not used. &lt;/p&gt; &lt;p&gt;For more information about using dynamic scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html\&quot;&gt;Target tracking scaling policies&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html\&quot;&gt;Step and simple scaling policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about using predictive scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scaling policies for an Auto Scaling group using the &lt;a&gt;DescribePolicies&lt;/a&gt; API call. If you are no longer using a scaling policy, you can delete it by calling the &lt;a&gt;DeletePolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param policyName The name of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyType &lt;p&gt;One of the following policy types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TargetTrackingScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StepScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SimpleScaling&lt;/code&gt; (default)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PredictiveScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param adjustmentType &lt;p&gt;Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are &lt;code&gt;ChangeInCapacity&lt;/code&gt;, &lt;code&gt;ExactCapacity&lt;/code&gt;, and &lt;code&gt;PercentChangeInCapacity&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; or &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment\&quot;&gt;Scaling adjustment types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param minAdjustmentStep Available for backward compatibility. Use &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; instead. (optional)
     * @param minAdjustmentMagnitude &lt;p&gt;The minimum value to scale by when the adjustment type is &lt;code&gt;PercentChangeInCapacity&lt;/code&gt;. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; or &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment\&quot;&gt;Scaling adjustment types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Some Auto Scaling groups use instance weights. In this case, set the &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; to a value that is at least as large as your largest instance weight.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param scalingAdjustment &lt;p&gt;The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. (Not used with any other policy type.) &lt;/p&gt; (optional)
     * @param cooldown &lt;p&gt;A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: None&lt;/p&gt; (optional)
     * @param metricAggregationType &lt;p&gt;The aggregation type for the CloudWatch metrics. The valid values are &lt;code&gt;Minimum&lt;/code&gt;, &lt;code&gt;Maximum&lt;/code&gt;, and &lt;code&gt;Average&lt;/code&gt;. If the aggregation type is null, the value is treated as &lt;code&gt;Average&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;StepScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stepAdjustments &lt;p&gt;A set of adjustments that enable you to scale based on the size of the alarm breach.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt;. (Not used with any other policy type.) &lt;/p&gt; (optional)
     * @param estimatedInstanceWarmup &lt;p&gt; &lt;i&gt;Not needed if the default instance warmup is defined for the group.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;TargetTrackingScaling&lt;/code&gt; or &lt;code&gt;StepScaling&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then &lt;code&gt;EstimatedInstanceWarmup&lt;/code&gt; falls back to the value of default cooldown.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param targetTrackingConfiguration &lt;p&gt;A target tracking scaling policy. Provides support for predefined or custom metrics.&lt;/p&gt; &lt;p&gt;The following predefined metrics are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageCPUUtilization&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageNetworkIn&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageNetworkOut&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALBRequestCountPerTarget&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;ALBRequestCountPerTarget&lt;/code&gt; for the metric, you must specify the &lt;code&gt;ResourceLabel&lt;/code&gt; property with the &lt;code&gt;PredefinedMetricSpecification&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html\&quot;&gt;TargetTrackingConfiguration&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;TargetTrackingScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enabled Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html\&quot;&gt;Disabling a scaling policy for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param predictiveScalingConfiguration &lt;p&gt;A predictive scaling policy. Provides support for predefined and custom metrics.&lt;/p&gt; &lt;p&gt;Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html\&quot;&gt;PredictiveScalingConfiguration&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;PredictiveScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;PolicyARNType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyARNType> gETPutScalingPolicyWithHttpInfo(String autoScalingGroupName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String policyType, String adjustmentType, Integer minAdjustmentStep, Integer minAdjustmentMagnitude, Integer scalingAdjustment, Integer cooldown, String metricAggregationType, List<StepAdjustment> stepAdjustments, Integer estimatedInstanceWarmup, GETPutScalingPolicyTargetTrackingConfigurationParameter targetTrackingConfiguration, Boolean enabled, GETPutScalingPolicyPredictiveScalingConfigurationParameter predictiveScalingConfiguration) throws ApiException {
        okhttp3.Call localVarCall = gETPutScalingPolicyValidateBeforeCall(autoScalingGroupName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyType, adjustmentType, minAdjustmentStep, minAdjustmentMagnitude, scalingAdjustment, cooldown, metricAggregationType, stepAdjustments, estimatedInstanceWarmup, targetTrackingConfiguration, enabled, predictiveScalingConfiguration, null);
        Type localVarReturnType = new TypeToken<PolicyARNType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a scaling policy for an Auto Scaling group. Scaling policies are used to scale an Auto Scaling group based on configurable metrics. If no policies are defined, the dynamic scaling and predictive scaling features are not used. &lt;/p&gt; &lt;p&gt;For more information about using dynamic scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html\&quot;&gt;Target tracking scaling policies&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html\&quot;&gt;Step and simple scaling policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about using predictive scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scaling policies for an Auto Scaling group using the &lt;a&gt;DescribePolicies&lt;/a&gt; API call. If you are no longer using a scaling policy, you can delete it by calling the &lt;a&gt;DeletePolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param policyName The name of the policy. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param policyType &lt;p&gt;One of the following policy types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TargetTrackingScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StepScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SimpleScaling&lt;/code&gt; (default)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PredictiveScaling&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param adjustmentType &lt;p&gt;Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are &lt;code&gt;ChangeInCapacity&lt;/code&gt;, &lt;code&gt;ExactCapacity&lt;/code&gt;, and &lt;code&gt;PercentChangeInCapacity&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; or &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment\&quot;&gt;Scaling adjustment types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param minAdjustmentStep Available for backward compatibility. Use &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; instead. (optional)
     * @param minAdjustmentMagnitude &lt;p&gt;The minimum value to scale by when the adjustment type is &lt;code&gt;PercentChangeInCapacity&lt;/code&gt;. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;StepScaling&lt;/code&gt; or &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment\&quot;&gt;Scaling adjustment types&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Some Auto Scaling groups use instance weights. In this case, set the &lt;code&gt;MinAdjustmentMagnitude&lt;/code&gt; to a value that is at least as large as your largest instance weight.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param scalingAdjustment &lt;p&gt;The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. (Not used with any other policy type.) &lt;/p&gt; (optional)
     * @param cooldown &lt;p&gt;A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;SimpleScaling&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Default: None&lt;/p&gt; (optional)
     * @param metricAggregationType &lt;p&gt;The aggregation type for the CloudWatch metrics. The valid values are &lt;code&gt;Minimum&lt;/code&gt;, &lt;code&gt;Maximum&lt;/code&gt;, and &lt;code&gt;Average&lt;/code&gt;. If the aggregation type is null, the value is treated as &lt;code&gt;Average&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;StepScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stepAdjustments &lt;p&gt;A set of adjustments that enable you to scale based on the size of the alarm breach.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;StepScaling&lt;/code&gt;. (Not used with any other policy type.) &lt;/p&gt; (optional)
     * @param estimatedInstanceWarmup &lt;p&gt; &lt;i&gt;Not needed if the default instance warmup is defined for the group.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.&lt;/p&gt; &lt;p&gt;Valid only if the policy type is &lt;code&gt;TargetTrackingScaling&lt;/code&gt; or &lt;code&gt;StepScaling&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then &lt;code&gt;EstimatedInstanceWarmup&lt;/code&gt; falls back to the value of default cooldown.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param targetTrackingConfiguration &lt;p&gt;A target tracking scaling policy. Provides support for predefined or custom metrics.&lt;/p&gt; &lt;p&gt;The following predefined metrics are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageCPUUtilization&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageNetworkIn&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ASGAverageNetworkOut&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALBRequestCountPerTarget&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify &lt;code&gt;ALBRequestCountPerTarget&lt;/code&gt; for the metric, you must specify the &lt;code&gt;ResourceLabel&lt;/code&gt; property with the &lt;code&gt;PredefinedMetricSpecification&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html\&quot;&gt;TargetTrackingConfiguration&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;TargetTrackingScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enabled Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html\&quot;&gt;Disabling a scaling policy for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param predictiveScalingConfiguration &lt;p&gt;A predictive scaling policy. Provides support for predefined and custom metrics.&lt;/p&gt; &lt;p&gt;Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html\&quot;&gt;PredictiveScalingConfiguration&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Required if the policy type is &lt;code&gt;PredictiveScaling&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutScalingPolicyAsync(String autoScalingGroupName, String policyName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String policyType, String adjustmentType, Integer minAdjustmentStep, Integer minAdjustmentMagnitude, Integer scalingAdjustment, Integer cooldown, String metricAggregationType, List<StepAdjustment> stepAdjustments, Integer estimatedInstanceWarmup, GETPutScalingPolicyTargetTrackingConfigurationParameter targetTrackingConfiguration, Boolean enabled, GETPutScalingPolicyPredictiveScalingConfigurationParameter predictiveScalingConfiguration, final ApiCallback<PolicyARNType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutScalingPolicyValidateBeforeCall(autoScalingGroupName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyType, adjustmentType, minAdjustmentStep, minAdjustmentMagnitude, scalingAdjustment, cooldown, metricAggregationType, stepAdjustments, estimatedInstanceWarmup, targetTrackingConfiguration, enabled, predictiveScalingConfiguration, _callback);
        Type localVarReturnType = new TypeToken<PolicyARNType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutScheduledUpdateGroupAction
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionName The name of this scaling action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param time This property is no longer used. (optional)
     * @param startTime &lt;p&gt;The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, &lt;code&gt;\&quot;2021-06-01T00:00:00Z\&quot;&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;Recurrence&lt;/code&gt; and &lt;code&gt;StartTime&lt;/code&gt;, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.&lt;/p&gt; (optional)
     * @param endTime The date and time for the recurring schedule to end, in UTC. For example, &lt;code&gt;\&quot;2021-06-01T00:00:00Z\&quot;&lt;/code&gt;. (optional)
     * @param recurrence &lt;p&gt;The recurring schedule for this action. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, &lt;code&gt;\&quot;30 0 1 1,6,12 *\&quot;&lt;/code&gt;). For more information about this format, see &lt;a href&#x3D;\&quot;http://crontab.org\&quot;&gt;Crontab&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; are specified with &lt;code&gt;Recurrence&lt;/code&gt;, they form the boundaries of when the recurring action starts and stops.&lt;/p&gt; &lt;p&gt;Cron expressions use Universal Coordinated Time (UTC) by default.&lt;/p&gt; (optional)
     * @param minSize The minimum size of the Auto Scaling group. (optional)
     * @param maxSize The maximum size of the Auto Scaling group. (optional)
     * @param desiredCapacity &lt;p&gt;The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. It can scale beyond this capacity if you add more scaling conditions. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You must specify at least one of the following properties: &lt;code&gt;MaxSize&lt;/code&gt;, &lt;code&gt;MinSize&lt;/code&gt;, or &lt;code&gt;DesiredCapacity&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param timeZone &lt;p&gt;Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default. &lt;/p&gt; &lt;p&gt;Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as &lt;code&gt;Etc/GMT+9&lt;/code&gt; or &lt;code&gt;Pacific/Tahiti&lt;/code&gt;). For more information, see &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutScheduledUpdateGroupActionCall(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OffsetDateTime time, OffsetDateTime startTime, OffsetDateTime endTime, String recurrence, Integer minSize, Integer maxSize, Integer desiredCapacity, String timeZone, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutScheduledUpdateGroupAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (scheduledActionName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ScheduledActionName", scheduledActionName));
        }

        if (time != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Time", time));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (recurrence != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Recurrence", recurrence));
        }

        if (minSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MinSize", minSize));
        }

        if (maxSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxSize", maxSize));
        }

        if (desiredCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DesiredCapacity", desiredCapacity));
        }

        if (timeZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TimeZone", timeZone));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutScheduledUpdateGroupActionValidateBeforeCall(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OffsetDateTime time, OffsetDateTime startTime, OffsetDateTime endTime, String recurrence, Integer minSize, Integer maxSize, Integer desiredCapacity, String timeZone, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETPutScheduledUpdateGroupAction(Async)");
        }

        // verify the required parameter 'scheduledActionName' is set
        if (scheduledActionName == null) {
            throw new ApiException("Missing the required parameter 'scheduledActionName' when calling gETPutScheduledUpdateGroupAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutScheduledUpdateGroupAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutScheduledUpdateGroupAction(Async)");
        }

        return gETPutScheduledUpdateGroupActionCall(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, time, startTime, endTime, recurrence, minSize, maxSize, desiredCapacity, timeZone, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a scheduled scaling action for an Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html\&quot;&gt;Scheduled scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scheduled actions for an Auto Scaling group using the &lt;a&gt;DescribeScheduledActions&lt;/a&gt; API call. If you are no longer using a scheduled action, you can delete it by calling the &lt;a&gt;DeleteScheduledAction&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionName The name of this scaling action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param time This property is no longer used. (optional)
     * @param startTime &lt;p&gt;The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, &lt;code&gt;\&quot;2021-06-01T00:00:00Z\&quot;&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;Recurrence&lt;/code&gt; and &lt;code&gt;StartTime&lt;/code&gt;, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.&lt;/p&gt; (optional)
     * @param endTime The date and time for the recurring schedule to end, in UTC. For example, &lt;code&gt;\&quot;2021-06-01T00:00:00Z\&quot;&lt;/code&gt;. (optional)
     * @param recurrence &lt;p&gt;The recurring schedule for this action. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, &lt;code&gt;\&quot;30 0 1 1,6,12 *\&quot;&lt;/code&gt;). For more information about this format, see &lt;a href&#x3D;\&quot;http://crontab.org\&quot;&gt;Crontab&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; are specified with &lt;code&gt;Recurrence&lt;/code&gt;, they form the boundaries of when the recurring action starts and stops.&lt;/p&gt; &lt;p&gt;Cron expressions use Universal Coordinated Time (UTC) by default.&lt;/p&gt; (optional)
     * @param minSize The minimum size of the Auto Scaling group. (optional)
     * @param maxSize The maximum size of the Auto Scaling group. (optional)
     * @param desiredCapacity &lt;p&gt;The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. It can scale beyond this capacity if you add more scaling conditions. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You must specify at least one of the following properties: &lt;code&gt;MaxSize&lt;/code&gt;, &lt;code&gt;MinSize&lt;/code&gt;, or &lt;code&gt;DesiredCapacity&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param timeZone &lt;p&gt;Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default. &lt;/p&gt; &lt;p&gt;Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as &lt;code&gt;Etc/GMT+9&lt;/code&gt; or &lt;code&gt;Pacific/Tahiti&lt;/code&gt;). For more information, see &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&lt;/a&gt;.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETPutScheduledUpdateGroupAction(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OffsetDateTime time, OffsetDateTime startTime, OffsetDateTime endTime, String recurrence, Integer minSize, Integer maxSize, Integer desiredCapacity, String timeZone) throws ApiException {
        gETPutScheduledUpdateGroupActionWithHttpInfo(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, time, startTime, endTime, recurrence, minSize, maxSize, desiredCapacity, timeZone);
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a scheduled scaling action for an Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html\&quot;&gt;Scheduled scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scheduled actions for an Auto Scaling group using the &lt;a&gt;DescribeScheduledActions&lt;/a&gt; API call. If you are no longer using a scheduled action, you can delete it by calling the &lt;a&gt;DeleteScheduledAction&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionName The name of this scaling action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param time This property is no longer used. (optional)
     * @param startTime &lt;p&gt;The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, &lt;code&gt;\&quot;2021-06-01T00:00:00Z\&quot;&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;Recurrence&lt;/code&gt; and &lt;code&gt;StartTime&lt;/code&gt;, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.&lt;/p&gt; (optional)
     * @param endTime The date and time for the recurring schedule to end, in UTC. For example, &lt;code&gt;\&quot;2021-06-01T00:00:00Z\&quot;&lt;/code&gt;. (optional)
     * @param recurrence &lt;p&gt;The recurring schedule for this action. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, &lt;code&gt;\&quot;30 0 1 1,6,12 *\&quot;&lt;/code&gt;). For more information about this format, see &lt;a href&#x3D;\&quot;http://crontab.org\&quot;&gt;Crontab&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; are specified with &lt;code&gt;Recurrence&lt;/code&gt;, they form the boundaries of when the recurring action starts and stops.&lt;/p&gt; &lt;p&gt;Cron expressions use Universal Coordinated Time (UTC) by default.&lt;/p&gt; (optional)
     * @param minSize The minimum size of the Auto Scaling group. (optional)
     * @param maxSize The maximum size of the Auto Scaling group. (optional)
     * @param desiredCapacity &lt;p&gt;The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. It can scale beyond this capacity if you add more scaling conditions. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You must specify at least one of the following properties: &lt;code&gt;MaxSize&lt;/code&gt;, &lt;code&gt;MinSize&lt;/code&gt;, or &lt;code&gt;DesiredCapacity&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param timeZone &lt;p&gt;Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default. &lt;/p&gt; &lt;p&gt;Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as &lt;code&gt;Etc/GMT+9&lt;/code&gt; or &lt;code&gt;Pacific/Tahiti&lt;/code&gt;). For more information, see &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&lt;/a&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETPutScheduledUpdateGroupActionWithHttpInfo(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OffsetDateTime time, OffsetDateTime startTime, OffsetDateTime endTime, String recurrence, Integer minSize, Integer maxSize, Integer desiredCapacity, String timeZone) throws ApiException {
        okhttp3.Call localVarCall = gETPutScheduledUpdateGroupActionValidateBeforeCall(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, time, startTime, endTime, recurrence, minSize, maxSize, desiredCapacity, timeZone, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a scheduled scaling action for an Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html\&quot;&gt;Scheduled scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scheduled actions for an Auto Scaling group using the &lt;a&gt;DescribeScheduledActions&lt;/a&gt; API call. If you are no longer using a scheduled action, you can delete it by calling the &lt;a&gt;DeleteScheduledAction&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param scheduledActionName The name of this scaling action. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param time This property is no longer used. (optional)
     * @param startTime &lt;p&gt;The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, &lt;code&gt;\&quot;2021-06-01T00:00:00Z\&quot;&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;Recurrence&lt;/code&gt; and &lt;code&gt;StartTime&lt;/code&gt;, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.&lt;/p&gt; (optional)
     * @param endTime The date and time for the recurring schedule to end, in UTC. For example, &lt;code&gt;\&quot;2021-06-01T00:00:00Z\&quot;&lt;/code&gt;. (optional)
     * @param recurrence &lt;p&gt;The recurring schedule for this action. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, &lt;code&gt;\&quot;30 0 1 1,6,12 *\&quot;&lt;/code&gt;). For more information about this format, see &lt;a href&#x3D;\&quot;http://crontab.org\&quot;&gt;Crontab&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; are specified with &lt;code&gt;Recurrence&lt;/code&gt;, they form the boundaries of when the recurring action starts and stops.&lt;/p&gt; &lt;p&gt;Cron expressions use Universal Coordinated Time (UTC) by default.&lt;/p&gt; (optional)
     * @param minSize The minimum size of the Auto Scaling group. (optional)
     * @param maxSize The maximum size of the Auto Scaling group. (optional)
     * @param desiredCapacity &lt;p&gt;The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. It can scale beyond this capacity if you add more scaling conditions. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You must specify at least one of the following properties: &lt;code&gt;MaxSize&lt;/code&gt;, &lt;code&gt;MinSize&lt;/code&gt;, or &lt;code&gt;DesiredCapacity&lt;/code&gt;. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param timeZone &lt;p&gt;Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default. &lt;/p&gt; &lt;p&gt;Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as &lt;code&gt;Etc/GMT+9&lt;/code&gt; or &lt;code&gt;Pacific/Tahiti&lt;/code&gt;). For more information, see &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\&quot;&gt;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutScheduledUpdateGroupActionAsync(String autoScalingGroupName, String scheduledActionName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, OffsetDateTime time, OffsetDateTime startTime, OffsetDateTime endTime, String recurrence, Integer minSize, Integer maxSize, Integer desiredCapacity, String timeZone, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutScheduledUpdateGroupActionValidateBeforeCall(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, time, startTime, endTime, recurrence, minSize, maxSize, desiredCapacity, timeZone, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPutWarmPool
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxGroupPreparedCapacity &lt;p&gt;Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except &lt;code&gt;Terminated&lt;/code&gt; for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group&#39;s maximum capacity and its desired capacity. &lt;/p&gt; &lt;important&gt; &lt;p&gt;If a value for &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group&#39;s maximum capacity and its desired capacity. If you specify a value for &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt;, Amazon EC2 Auto Scaling uses the difference between the &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; and the desired capacity instead. &lt;/p&gt; &lt;p&gt;The size of the warm pool is dynamic. Only when &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; and &lt;code&gt;MinSize&lt;/code&gt; are set to the same value does the warm pool have an absolute size.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If the desired capacity of the Auto Scaling group is higher than the &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt;, the capacity of the warm pool is 0, unless you specify a value for &lt;code&gt;MinSize&lt;/code&gt;. To remove a value that you previously set, include the property but specify -1 for the value. &lt;/p&gt; (optional)
     * @param minSize Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified. (optional)
     * @param poolState Sets the instance state to transition to after the lifecycle actions are complete. Default is &lt;code&gt;Stopped&lt;/code&gt;. (optional)
     * @param instanceReusePolicy Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutWarmPoolCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxGroupPreparedCapacity, Integer minSize, String poolState, GETPutWarmPoolInstanceReusePolicyParameter instanceReusePolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PutWarmPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (maxGroupPreparedCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxGroupPreparedCapacity", maxGroupPreparedCapacity));
        }

        if (minSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MinSize", minSize));
        }

        if (poolState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PoolState", poolState));
        }

        if (instanceReusePolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceReusePolicy", instanceReusePolicy));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPutWarmPoolValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxGroupPreparedCapacity, Integer minSize, String poolState, GETPutWarmPoolInstanceReusePolicyParameter instanceReusePolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETPutWarmPool(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPutWarmPool(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPutWarmPool(Async)");
        }

        return gETPutWarmPoolCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxGroupPreparedCapacity, minSize, poolState, instanceReusePolicy, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration that requests Spot Instances.&lt;/p&gt; &lt;p&gt;You can view the instances in the warm pool using the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API call. If you are no longer using a warm pool, you can delete it by calling the &lt;a&gt;DeleteWarmPool&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxGroupPreparedCapacity &lt;p&gt;Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except &lt;code&gt;Terminated&lt;/code&gt; for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group&#39;s maximum capacity and its desired capacity. &lt;/p&gt; &lt;important&gt; &lt;p&gt;If a value for &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group&#39;s maximum capacity and its desired capacity. If you specify a value for &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt;, Amazon EC2 Auto Scaling uses the difference between the &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; and the desired capacity instead. &lt;/p&gt; &lt;p&gt;The size of the warm pool is dynamic. Only when &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; and &lt;code&gt;MinSize&lt;/code&gt; are set to the same value does the warm pool have an absolute size.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If the desired capacity of the Auto Scaling group is higher than the &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt;, the capacity of the warm pool is 0, unless you specify a value for &lt;code&gt;MinSize&lt;/code&gt;. To remove a value that you previously set, include the property but specify -1 for the value. &lt;/p&gt; (optional)
     * @param minSize Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified. (optional)
     * @param poolState Sets the instance state to transition to after the lifecycle actions are complete. Default is &lt;code&gt;Stopped&lt;/code&gt;. (optional)
     * @param instanceReusePolicy Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETPutWarmPool(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxGroupPreparedCapacity, Integer minSize, String poolState, GETPutWarmPoolInstanceReusePolicyParameter instanceReusePolicy) throws ApiException {
        ApiResponse<Object> localVarResp = gETPutWarmPoolWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxGroupPreparedCapacity, minSize, poolState, instanceReusePolicy);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration that requests Spot Instances.&lt;/p&gt; &lt;p&gt;You can view the instances in the warm pool using the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API call. If you are no longer using a warm pool, you can delete it by calling the &lt;a&gt;DeleteWarmPool&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxGroupPreparedCapacity &lt;p&gt;Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except &lt;code&gt;Terminated&lt;/code&gt; for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group&#39;s maximum capacity and its desired capacity. &lt;/p&gt; &lt;important&gt; &lt;p&gt;If a value for &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group&#39;s maximum capacity and its desired capacity. If you specify a value for &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt;, Amazon EC2 Auto Scaling uses the difference between the &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; and the desired capacity instead. &lt;/p&gt; &lt;p&gt;The size of the warm pool is dynamic. Only when &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; and &lt;code&gt;MinSize&lt;/code&gt; are set to the same value does the warm pool have an absolute size.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If the desired capacity of the Auto Scaling group is higher than the &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt;, the capacity of the warm pool is 0, unless you specify a value for &lt;code&gt;MinSize&lt;/code&gt;. To remove a value that you previously set, include the property but specify -1 for the value. &lt;/p&gt; (optional)
     * @param minSize Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified. (optional)
     * @param poolState Sets the instance state to transition to after the lifecycle actions are complete. Default is &lt;code&gt;Stopped&lt;/code&gt;. (optional)
     * @param instanceReusePolicy Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETPutWarmPoolWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxGroupPreparedCapacity, Integer minSize, String poolState, GETPutWarmPoolInstanceReusePolicyParameter instanceReusePolicy) throws ApiException {
        okhttp3.Call localVarCall = gETPutWarmPoolValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxGroupPreparedCapacity, minSize, poolState, instanceReusePolicy, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration that requests Spot Instances.&lt;/p&gt; &lt;p&gt;You can view the instances in the warm pool using the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API call. If you are no longer using a warm pool, you can delete it by calling the &lt;a&gt;DeleteWarmPool&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxGroupPreparedCapacity &lt;p&gt;Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except &lt;code&gt;Terminated&lt;/code&gt; for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group&#39;s maximum capacity and its desired capacity. &lt;/p&gt; &lt;important&gt; &lt;p&gt;If a value for &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group&#39;s maximum capacity and its desired capacity. If you specify a value for &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt;, Amazon EC2 Auto Scaling uses the difference between the &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; and the desired capacity instead. &lt;/p&gt; &lt;p&gt;The size of the warm pool is dynamic. Only when &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt; and &lt;code&gt;MinSize&lt;/code&gt; are set to the same value does the warm pool have an absolute size.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If the desired capacity of the Auto Scaling group is higher than the &lt;code&gt;MaxGroupPreparedCapacity&lt;/code&gt;, the capacity of the warm pool is 0, unless you specify a value for &lt;code&gt;MinSize&lt;/code&gt;. To remove a value that you previously set, include the property but specify -1 for the value. &lt;/p&gt; (optional)
     * @param minSize Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified. (optional)
     * @param poolState Sets the instance state to transition to after the lifecycle actions are complete. Default is &lt;code&gt;Stopped&lt;/code&gt;. (optional)
     * @param instanceReusePolicy Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPutWarmPoolAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxGroupPreparedCapacity, Integer minSize, String poolState, GETPutWarmPoolInstanceReusePolicyParameter instanceReusePolicy, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPutWarmPoolValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxGroupPreparedCapacity, minSize, poolState, instanceReusePolicy, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRecordLifecycleActionHeartbeat
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleActionToken A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook. (optional)
     * @param instanceId The ID of the instance. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRecordLifecycleActionHeartbeatCall(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RecordLifecycleActionHeartbeat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lifecycleHookName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LifecycleHookName", lifecycleHookName));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (lifecycleActionToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LifecycleActionToken", lifecycleActionToken));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRecordLifecycleActionHeartbeatValidateBeforeCall(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lifecycleHookName' is set
        if (lifecycleHookName == null) {
            throw new ApiException("Missing the required parameter 'lifecycleHookName' when calling gETRecordLifecycleActionHeartbeat(Async)");
        }

        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETRecordLifecycleActionHeartbeat(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRecordLifecycleActionHeartbeat(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRecordLifecycleActionHeartbeat(Async)");
        }

        return gETRecordLifecycleActionHeartbeatCall(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the &lt;a&gt;PutLifecycleHook&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleActionToken A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook. (optional)
     * @param instanceId The ID of the instance. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETRecordLifecycleActionHeartbeat(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId) throws ApiException {
        ApiResponse<Object> localVarResp = gETRecordLifecycleActionHeartbeatWithHttpInfo(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the &lt;a&gt;PutLifecycleHook&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleActionToken A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook. (optional)
     * @param instanceId The ID of the instance. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETRecordLifecycleActionHeartbeatWithHttpInfo(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId) throws ApiException {
        okhttp3.Call localVarCall = gETRecordLifecycleActionHeartbeatValidateBeforeCall(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the &lt;a&gt;PutLifecycleHook&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param lifecycleHookName The name of the lifecycle hook. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param lifecycleActionToken A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook. (optional)
     * @param instanceId The ID of the instance. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRecordLifecycleActionHeartbeatAsync(String lifecycleHookName, String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String lifecycleActionToken, String instanceId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRecordLifecycleActionHeartbeatValidateBeforeCall(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETResumeProcesses
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcesses &lt;p&gt;One or more of the following processes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Launch&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddToLoadBalancer&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlarmNotification&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AZRebalance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HealthCheck&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InstanceRefresh&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReplaceUnhealthy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduledActions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all processes are specified.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResumeProcessesCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ResumeProcesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (scalingProcesses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ScalingProcesses", scalingProcesses));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETResumeProcessesValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETResumeProcesses(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETResumeProcesses(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETResumeProcesses(Async)");
        }

        return gETResumeProcessesCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses, _callback);

    }

    /**
     * 
     * &lt;p&gt;Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcesses &lt;p&gt;One or more of the following processes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Launch&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddToLoadBalancer&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlarmNotification&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AZRebalance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HealthCheck&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InstanceRefresh&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReplaceUnhealthy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduledActions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all processes are specified.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETResumeProcesses(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses) throws ApiException {
        gETResumeProcessesWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses);
    }

    /**
     * 
     * &lt;p&gt;Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcesses &lt;p&gt;One or more of the following processes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Launch&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddToLoadBalancer&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlarmNotification&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AZRebalance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HealthCheck&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InstanceRefresh&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReplaceUnhealthy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduledActions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all processes are specified.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETResumeProcessesWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses) throws ApiException {
        okhttp3.Call localVarCall = gETResumeProcessesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcesses &lt;p&gt;One or more of the following processes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Launch&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddToLoadBalancer&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlarmNotification&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AZRebalance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HealthCheck&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InstanceRefresh&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReplaceUnhealthy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduledActions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all processes are specified.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResumeProcessesAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETResumeProcessesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRollbackInstanceRefresh
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IrreversibleInstanceRefreshFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRollbackInstanceRefreshCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RollbackInstanceRefresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRollbackInstanceRefreshValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETRollbackInstanceRefresh(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRollbackInstanceRefresh(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRollbackInstanceRefresh(Async)");
        }

        return gETRollbackInstanceRefreshCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels an instance refresh that is in progress and rolls back any changes that it made. Amazon EC2 Auto Scaling replaces any instances that were replaced during the instance refresh. This restores your Auto Scaling group to the configuration that it was using before the start of the instance refresh. &lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;A rollback is not supported in the following situations: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There is no desired configuration specified for the instance refresh.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the &lt;code&gt;ImageId&lt;/code&gt; property.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group uses the launch template&#39;s &lt;code&gt;$Latest&lt;/code&gt; or &lt;code&gt;$Default&lt;/code&gt; version.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon EC2 Auto Scaling immediately begins replacing instances. You can check the status of this operation through the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API operation. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RollbackInstanceRefreshAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IrreversibleInstanceRefreshFault </td><td>  -  </td></tr>
     </table>
     */
    public RollbackInstanceRefreshAnswer gETRollbackInstanceRefresh(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RollbackInstanceRefreshAnswer> localVarResp = gETRollbackInstanceRefreshWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels an instance refresh that is in progress and rolls back any changes that it made. Amazon EC2 Auto Scaling replaces any instances that were replaced during the instance refresh. This restores your Auto Scaling group to the configuration that it was using before the start of the instance refresh. &lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;A rollback is not supported in the following situations: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There is no desired configuration specified for the instance refresh.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the &lt;code&gt;ImageId&lt;/code&gt; property.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group uses the launch template&#39;s &lt;code&gt;$Latest&lt;/code&gt; or &lt;code&gt;$Default&lt;/code&gt; version.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon EC2 Auto Scaling immediately begins replacing instances. You can check the status of this operation through the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API operation. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RollbackInstanceRefreshAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IrreversibleInstanceRefreshFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RollbackInstanceRefreshAnswer> gETRollbackInstanceRefreshWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRollbackInstanceRefreshValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RollbackInstanceRefreshAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels an instance refresh that is in progress and rolls back any changes that it made. Amazon EC2 Auto Scaling replaces any instances that were replaced during the instance refresh. This restores your Auto Scaling group to the configuration that it was using before the start of the instance refresh. &lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;A rollback is not supported in the following situations: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There is no desired configuration specified for the instance refresh.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the &lt;code&gt;ImageId&lt;/code&gt; property.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group uses the launch template&#39;s &lt;code&gt;$Latest&lt;/code&gt; or &lt;code&gt;$Default&lt;/code&gt; version.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon EC2 Auto Scaling immediately begins replacing instances. You can check the status of this operation through the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API operation. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IrreversibleInstanceRefreshFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRollbackInstanceRefreshAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RollbackInstanceRefreshAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRollbackInstanceRefreshValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RollbackInstanceRefreshAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetDesiredCapacity
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param honorCooldown Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetDesiredCapacityCall(String autoScalingGroupName, Integer desiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean honorCooldown, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetDesiredCapacity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (desiredCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DesiredCapacity", desiredCapacity));
        }

        if (honorCooldown != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HonorCooldown", honorCooldown));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetDesiredCapacityValidateBeforeCall(String autoScalingGroupName, Integer desiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean honorCooldown, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETSetDesiredCapacity(Async)");
        }

        // verify the required parameter 'desiredCapacity' is set
        if (desiredCapacity == null) {
            throw new ApiException("Missing the required parameter 'desiredCapacity' when calling gETSetDesiredCapacity(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetDesiredCapacity(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetDesiredCapacity(Async)");
        }

        return gETSetDesiredCapacityCall(autoScalingGroupName, desiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, honorCooldown, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the size of the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-manual-scaling.html\&quot;&gt;Manual scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param honorCooldown Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETSetDesiredCapacity(String autoScalingGroupName, Integer desiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean honorCooldown) throws ApiException {
        gETSetDesiredCapacityWithHttpInfo(autoScalingGroupName, desiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, honorCooldown);
    }

    /**
     * 
     * &lt;p&gt;Sets the size of the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-manual-scaling.html\&quot;&gt;Manual scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param honorCooldown Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSetDesiredCapacityWithHttpInfo(String autoScalingGroupName, Integer desiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean honorCooldown) throws ApiException {
        okhttp3.Call localVarCall = gETSetDesiredCapacityValidateBeforeCall(autoScalingGroupName, desiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, honorCooldown, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the size of the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-manual-scaling.html\&quot;&gt;Manual scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param honorCooldown Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetDesiredCapacityAsync(String autoScalingGroupName, Integer desiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean honorCooldown, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetDesiredCapacityValidateBeforeCall(autoScalingGroupName, desiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, honorCooldown, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetInstanceHealth
     * @param instanceId The ID of the instance. (required)
     * @param healthStatus The health status of the instance. Set to &lt;code&gt;Healthy&lt;/code&gt; to have the instance remain in service. Set to &lt;code&gt;Unhealthy&lt;/code&gt; to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param shouldRespectGracePeriod &lt;p&gt;If the Auto Scaling group of the specified instance has a &lt;code&gt;HealthCheckGracePeriod&lt;/code&gt; specified for the group, by default, this call respects the grace period. Set this to &lt;code&gt;False&lt;/code&gt;, to have the call not respect the grace period associated with the group.&lt;/p&gt; &lt;p&gt;For more information about the health check grace period, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html\&quot;&gt;CreateAutoScalingGroup&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetInstanceHealthCall(String instanceId, String healthStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean shouldRespectGracePeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetInstanceHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (healthStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthStatus", healthStatus));
        }

        if (shouldRespectGracePeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ShouldRespectGracePeriod", shouldRespectGracePeriod));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetInstanceHealthValidateBeforeCall(String instanceId, String healthStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean shouldRespectGracePeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling gETSetInstanceHealth(Async)");
        }

        // verify the required parameter 'healthStatus' is set
        if (healthStatus == null) {
            throw new ApiException("Missing the required parameter 'healthStatus' when calling gETSetInstanceHealth(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetInstanceHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetInstanceHealth(Async)");
        }

        return gETSetInstanceHealthCall(instanceId, healthStatus, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, shouldRespectGracePeriod, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the health status of the specified instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param instanceId The ID of the instance. (required)
     * @param healthStatus The health status of the instance. Set to &lt;code&gt;Healthy&lt;/code&gt; to have the instance remain in service. Set to &lt;code&gt;Unhealthy&lt;/code&gt; to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param shouldRespectGracePeriod &lt;p&gt;If the Auto Scaling group of the specified instance has a &lt;code&gt;HealthCheckGracePeriod&lt;/code&gt; specified for the group, by default, this call respects the grace period. Set this to &lt;code&gt;False&lt;/code&gt;, to have the call not respect the grace period associated with the group.&lt;/p&gt; &lt;p&gt;For more information about the health check grace period, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html\&quot;&gt;CreateAutoScalingGroup&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETSetInstanceHealth(String instanceId, String healthStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean shouldRespectGracePeriod) throws ApiException {
        gETSetInstanceHealthWithHttpInfo(instanceId, healthStatus, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, shouldRespectGracePeriod);
    }

    /**
     * 
     * &lt;p&gt;Sets the health status of the specified instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param instanceId The ID of the instance. (required)
     * @param healthStatus The health status of the instance. Set to &lt;code&gt;Healthy&lt;/code&gt; to have the instance remain in service. Set to &lt;code&gt;Unhealthy&lt;/code&gt; to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param shouldRespectGracePeriod &lt;p&gt;If the Auto Scaling group of the specified instance has a &lt;code&gt;HealthCheckGracePeriod&lt;/code&gt; specified for the group, by default, this call respects the grace period. Set this to &lt;code&gt;False&lt;/code&gt;, to have the call not respect the grace period associated with the group.&lt;/p&gt; &lt;p&gt;For more information about the health check grace period, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html\&quot;&gt;CreateAutoScalingGroup&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSetInstanceHealthWithHttpInfo(String instanceId, String healthStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean shouldRespectGracePeriod) throws ApiException {
        okhttp3.Call localVarCall = gETSetInstanceHealthValidateBeforeCall(instanceId, healthStatus, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, shouldRespectGracePeriod, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the health status of the specified instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param instanceId The ID of the instance. (required)
     * @param healthStatus The health status of the instance. Set to &lt;code&gt;Healthy&lt;/code&gt; to have the instance remain in service. Set to &lt;code&gt;Unhealthy&lt;/code&gt; to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param shouldRespectGracePeriod &lt;p&gt;If the Auto Scaling group of the specified instance has a &lt;code&gt;HealthCheckGracePeriod&lt;/code&gt; specified for the group, by default, this call respects the grace period. Set this to &lt;code&gt;False&lt;/code&gt;, to have the call not respect the grace period associated with the group.&lt;/p&gt; &lt;p&gt;For more information about the health check grace period, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CreateAutoScalingGroup.html\&quot;&gt;CreateAutoScalingGroup&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling API Reference&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetInstanceHealthAsync(String instanceId, String healthStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean shouldRespectGracePeriod, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetInstanceHealthValidateBeforeCall(instanceId, healthStatus, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, shouldRespectGracePeriod, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetInstanceProtection
     * @param instanceIds One or more instance IDs. You can specify up to 50 instances. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param protectedFromScaleIn Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetInstanceProtectionCall(List<String> instanceIds, String autoScalingGroupName, Boolean protectedFromScaleIn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetInstanceProtection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "InstanceIds", instanceIds));
        }

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (protectedFromScaleIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProtectedFromScaleIn", protectedFromScaleIn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetInstanceProtectionValidateBeforeCall(List<String> instanceIds, String autoScalingGroupName, Boolean protectedFromScaleIn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceIds' is set
        if (instanceIds == null) {
            throw new ApiException("Missing the required parameter 'instanceIds' when calling gETSetInstanceProtection(Async)");
        }

        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETSetInstanceProtection(Async)");
        }

        // verify the required parameter 'protectedFromScaleIn' is set
        if (protectedFromScaleIn == null) {
            throw new ApiException("Missing the required parameter 'protectedFromScaleIn' when calling gETSetInstanceProtection(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetInstanceProtection(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetInstanceProtection(Async)");
        }

        return gETSetInstanceProtectionCall(instanceIds, autoScalingGroupName, protectedFromScaleIn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the instance protection settings of the specified instances. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of instance IDs, which is 50 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param instanceIds One or more instance IDs. You can specify up to 50 instances. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param protectedFromScaleIn Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object gETSetInstanceProtection(List<String> instanceIds, String autoScalingGroupName, Boolean protectedFromScaleIn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETSetInstanceProtectionWithHttpInfo(instanceIds, autoScalingGroupName, protectedFromScaleIn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the instance protection settings of the specified instances. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of instance IDs, which is 50 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param instanceIds One or more instance IDs. You can specify up to 50 instances. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param protectedFromScaleIn Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETSetInstanceProtectionWithHttpInfo(List<String> instanceIds, String autoScalingGroupName, Boolean protectedFromScaleIn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSetInstanceProtectionValidateBeforeCall(instanceIds, autoScalingGroupName, protectedFromScaleIn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the instance protection settings of the specified instances. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of instance IDs, which is 50 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param instanceIds One or more instance IDs. You can specify up to 50 instances. (required)
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param protectedFromScaleIn Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetInstanceProtectionAsync(List<String> instanceIds, String autoScalingGroupName, Boolean protectedFromScaleIn, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetInstanceProtectionValidateBeforeCall(instanceIds, autoScalingGroupName, protectedFromScaleIn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStartInstanceRefresh
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param strategy The strategy to use for the instance refresh. The only valid value is &lt;code&gt;Rolling&lt;/code&gt;. (optional)
     * @param desiredConfiguration &lt;p&gt;The desired configuration. For example, the desired configuration can specify a new launch template or a new version of the current launch template.&lt;/p&gt; &lt;p&gt;Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to reflect the new desired configuration. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you specify a new launch template or a new version of the current launch template for your desired configuration, consider enabling the &lt;code&gt;SkipMatching&lt;/code&gt; property in preferences. If it&#39;s enabled, Amazon EC2 Auto Scaling skips replacing instances that already use the specified launch template and instance types. This can help you reduce the number of replacements that are required to apply updates. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param preferences &lt;p&gt;Sets your preferences for the instance refresh so that it performs as expected when you start it. Includes the instance warmup time, the minimum healthy percentage, and the behaviors that you want Amazon EC2 Auto Scaling to use if instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in are found. You can also choose to enable additional features, such as the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto rollback&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Checkpoints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CloudWatch alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Skip matching&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InstanceRefreshInProgressFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartInstanceRefreshCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String strategy, GETStartInstanceRefreshDesiredConfigurationParameter desiredConfiguration, GETStartInstanceRefreshPreferencesParameter preferences, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StartInstanceRefresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (strategy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Strategy", strategy));
        }

        if (desiredConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DesiredConfiguration", desiredConfiguration));
        }

        if (preferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Preferences", preferences));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStartInstanceRefreshValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String strategy, GETStartInstanceRefreshDesiredConfigurationParameter desiredConfiguration, GETStartInstanceRefreshPreferencesParameter preferences, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETStartInstanceRefresh(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStartInstanceRefresh(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStartInstanceRefresh(Async)");
        }

        return gETStartInstanceRefreshCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, strategy, desiredConfiguration, preferences, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts an instance refresh. During an instance refresh, Amazon EC2 Auto Scaling performs a rolling update of instances in an Auto Scaling group. Instances are terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. &lt;/p&gt; &lt;p&gt;If successful, the request&#39;s response contains a unique ID that you can use to track the progress of the instance refresh. To query its status, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To describe the instance refreshes that have already run, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To cancel an instance refresh that is in progress, use the &lt;a&gt;CancelInstanceRefresh&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt;An instance refresh might fail for several reasons, such as EC2 launch failures, misconfigured health checks, or not ignoring or allowing the termination of instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in. You can monitor for failed EC2 launches using the scaling activities. To find the scaling activities, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you enable auto rollback, your Auto Scaling group will be rolled back automatically when the instance refresh fails. You can enable this feature before starting an instance refresh by specifying the &lt;code&gt;AutoRollback&lt;/code&gt; property in the instance refresh preferences. Otherwise, to roll back an instance refresh before it finishes, use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param strategy The strategy to use for the instance refresh. The only valid value is &lt;code&gt;Rolling&lt;/code&gt;. (optional)
     * @param desiredConfiguration &lt;p&gt;The desired configuration. For example, the desired configuration can specify a new launch template or a new version of the current launch template.&lt;/p&gt; &lt;p&gt;Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to reflect the new desired configuration. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you specify a new launch template or a new version of the current launch template for your desired configuration, consider enabling the &lt;code&gt;SkipMatching&lt;/code&gt; property in preferences. If it&#39;s enabled, Amazon EC2 Auto Scaling skips replacing instances that already use the specified launch template and instance types. This can help you reduce the number of replacements that are required to apply updates. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param preferences &lt;p&gt;Sets your preferences for the instance refresh so that it performs as expected when you start it. Includes the instance warmup time, the minimum healthy percentage, and the behaviors that you want Amazon EC2 Auto Scaling to use if instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in are found. You can also choose to enable additional features, such as the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto rollback&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Checkpoints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CloudWatch alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Skip matching&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return StartInstanceRefreshAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InstanceRefreshInProgressFault </td><td>  -  </td></tr>
     </table>
     */
    public StartInstanceRefreshAnswer gETStartInstanceRefresh(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String strategy, GETStartInstanceRefreshDesiredConfigurationParameter desiredConfiguration, GETStartInstanceRefreshPreferencesParameter preferences) throws ApiException {
        ApiResponse<StartInstanceRefreshAnswer> localVarResp = gETStartInstanceRefreshWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, strategy, desiredConfiguration, preferences);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts an instance refresh. During an instance refresh, Amazon EC2 Auto Scaling performs a rolling update of instances in an Auto Scaling group. Instances are terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. &lt;/p&gt; &lt;p&gt;If successful, the request&#39;s response contains a unique ID that you can use to track the progress of the instance refresh. To query its status, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To describe the instance refreshes that have already run, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To cancel an instance refresh that is in progress, use the &lt;a&gt;CancelInstanceRefresh&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt;An instance refresh might fail for several reasons, such as EC2 launch failures, misconfigured health checks, or not ignoring or allowing the termination of instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in. You can monitor for failed EC2 launches using the scaling activities. To find the scaling activities, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you enable auto rollback, your Auto Scaling group will be rolled back automatically when the instance refresh fails. You can enable this feature before starting an instance refresh by specifying the &lt;code&gt;AutoRollback&lt;/code&gt; property in the instance refresh preferences. Otherwise, to roll back an instance refresh before it finishes, use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param strategy The strategy to use for the instance refresh. The only valid value is &lt;code&gt;Rolling&lt;/code&gt;. (optional)
     * @param desiredConfiguration &lt;p&gt;The desired configuration. For example, the desired configuration can specify a new launch template or a new version of the current launch template.&lt;/p&gt; &lt;p&gt;Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to reflect the new desired configuration. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you specify a new launch template or a new version of the current launch template for your desired configuration, consider enabling the &lt;code&gt;SkipMatching&lt;/code&gt; property in preferences. If it&#39;s enabled, Amazon EC2 Auto Scaling skips replacing instances that already use the specified launch template and instance types. This can help you reduce the number of replacements that are required to apply updates. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param preferences &lt;p&gt;Sets your preferences for the instance refresh so that it performs as expected when you start it. Includes the instance warmup time, the minimum healthy percentage, and the behaviors that you want Amazon EC2 Auto Scaling to use if instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in are found. You can also choose to enable additional features, such as the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto rollback&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Checkpoints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CloudWatch alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Skip matching&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;StartInstanceRefreshAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InstanceRefreshInProgressFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartInstanceRefreshAnswer> gETStartInstanceRefreshWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String strategy, GETStartInstanceRefreshDesiredConfigurationParameter desiredConfiguration, GETStartInstanceRefreshPreferencesParameter preferences) throws ApiException {
        okhttp3.Call localVarCall = gETStartInstanceRefreshValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, strategy, desiredConfiguration, preferences, null);
        Type localVarReturnType = new TypeToken<StartInstanceRefreshAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts an instance refresh. During an instance refresh, Amazon EC2 Auto Scaling performs a rolling update of instances in an Auto Scaling group. Instances are terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. &lt;/p&gt; &lt;p&gt;If successful, the request&#39;s response contains a unique ID that you can use to track the progress of the instance refresh. To query its status, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To describe the instance refreshes that have already run, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To cancel an instance refresh that is in progress, use the &lt;a&gt;CancelInstanceRefresh&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt;An instance refresh might fail for several reasons, such as EC2 launch failures, misconfigured health checks, or not ignoring or allowing the termination of instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in. You can monitor for failed EC2 launches using the scaling activities. To find the scaling activities, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you enable auto rollback, your Auto Scaling group will be rolled back automatically when the instance refresh fails. You can enable this feature before starting an instance refresh by specifying the &lt;code&gt;AutoRollback&lt;/code&gt; property in the instance refresh preferences. Otherwise, to roll back an instance refresh before it finishes, use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API. &lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param strategy The strategy to use for the instance refresh. The only valid value is &lt;code&gt;Rolling&lt;/code&gt;. (optional)
     * @param desiredConfiguration &lt;p&gt;The desired configuration. For example, the desired configuration can specify a new launch template or a new version of the current launch template.&lt;/p&gt; &lt;p&gt;Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to reflect the new desired configuration. &lt;/p&gt; &lt;note&gt; &lt;p&gt;When you specify a new launch template or a new version of the current launch template for your desired configuration, consider enabling the &lt;code&gt;SkipMatching&lt;/code&gt; property in preferences. If it&#39;s enabled, Amazon EC2 Auto Scaling skips replacing instances that already use the specified launch template and instance types. This can help you reduce the number of replacements that are required to apply updates. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param preferences &lt;p&gt;Sets your preferences for the instance refresh so that it performs as expected when you start it. Includes the instance warmup time, the minimum healthy percentage, and the behaviors that you want Amazon EC2 Auto Scaling to use if instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in are found. You can also choose to enable additional features, such as the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Auto rollback&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Checkpoints&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;CloudWatch alarms&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Skip matching&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InstanceRefreshInProgressFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartInstanceRefreshAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String strategy, GETStartInstanceRefreshDesiredConfigurationParameter desiredConfiguration, GETStartInstanceRefreshPreferencesParameter preferences, final ApiCallback<StartInstanceRefreshAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStartInstanceRefreshValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, strategy, desiredConfiguration, preferences, _callback);
        Type localVarReturnType = new TypeToken<StartInstanceRefreshAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSuspendProcesses
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcesses &lt;p&gt;One or more of the following processes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Launch&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddToLoadBalancer&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlarmNotification&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AZRebalance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HealthCheck&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InstanceRefresh&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReplaceUnhealthy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduledActions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all processes are specified.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSuspendProcessesCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SuspendProcesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (scalingProcesses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ScalingProcesses", scalingProcesses));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSuspendProcessesValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETSuspendProcesses(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSuspendProcesses(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSuspendProcesses(Async)");
        }

        return gETSuspendProcessesCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses, _callback);

    }

    /**
     * 
     * &lt;p&gt;Suspends the specified auto scaling processes, or all processes, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you suspend either the &lt;code&gt;Launch&lt;/code&gt; or &lt;code&gt;Terminate&lt;/code&gt; process types, it can prevent other process types from functioning properly. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To resume processes that have been suspended, call the &lt;a&gt;ResumeProcesses&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcesses &lt;p&gt;One or more of the following processes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Launch&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddToLoadBalancer&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlarmNotification&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AZRebalance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HealthCheck&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InstanceRefresh&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReplaceUnhealthy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduledActions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all processes are specified.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETSuspendProcesses(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses) throws ApiException {
        gETSuspendProcessesWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses);
    }

    /**
     * 
     * &lt;p&gt;Suspends the specified auto scaling processes, or all processes, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you suspend either the &lt;code&gt;Launch&lt;/code&gt; or &lt;code&gt;Terminate&lt;/code&gt; process types, it can prevent other process types from functioning properly. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To resume processes that have been suspended, call the &lt;a&gt;ResumeProcesses&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcesses &lt;p&gt;One or more of the following processes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Launch&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddToLoadBalancer&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlarmNotification&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AZRebalance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HealthCheck&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InstanceRefresh&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReplaceUnhealthy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduledActions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all processes are specified.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSuspendProcessesWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses) throws ApiException {
        okhttp3.Call localVarCall = gETSuspendProcessesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Suspends the specified auto scaling processes, or all processes, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you suspend either the &lt;code&gt;Launch&lt;/code&gt; or &lt;code&gt;Terminate&lt;/code&gt; process types, it can prevent other process types from functioning properly. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To resume processes that have been suspended, call the &lt;a&gt;ResumeProcesses&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcesses &lt;p&gt;One or more of the following processes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Launch&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Terminate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AddToLoadBalancer&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AlarmNotification&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AZRebalance&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HealthCheck&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;InstanceRefresh&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ReplaceUnhealthy&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduledActions&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you omit this property, all processes are specified.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSuspendProcessesAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> scalingProcesses, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSuspendProcessesValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETTerminateInstanceInAutoScalingGroup
     * @param instanceId The ID of the instance. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether terminating the instance also decrements the size of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTerminateInstanceInAutoScalingGroupCall(String instanceId, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=TerminateInstanceInAutoScalingGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (shouldDecrementDesiredCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ShouldDecrementDesiredCapacity", shouldDecrementDesiredCapacity));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETTerminateInstanceInAutoScalingGroupValidateBeforeCall(String instanceId, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling gETTerminateInstanceInAutoScalingGroup(Async)");
        }

        // verify the required parameter 'shouldDecrementDesiredCapacity' is set
        if (shouldDecrementDesiredCapacity == null) {
            throw new ApiException("Missing the required parameter 'shouldDecrementDesiredCapacity' when calling gETTerminateInstanceInAutoScalingGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETTerminateInstanceInAutoScalingGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETTerminateInstanceInAutoScalingGroup(Async)");
        }

        return gETTerminateInstanceInAutoScalingGroupCall(instanceId, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Terminates the specified instance and optionally adjusts the desired group size. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to &lt;code&gt;terminated&lt;/code&gt;. You can&#39;t connect to or start an instance after you&#39;ve terminated it.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. &lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage\&quot;&gt;Rebalancing activities&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param instanceId The ID of the instance. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether terminating the instance also decrements the size of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ActivityType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ActivityType gETTerminateInstanceInAutoScalingGroup(String instanceId, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ActivityType> localVarResp = gETTerminateInstanceInAutoScalingGroupWithHttpInfo(instanceId, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Terminates the specified instance and optionally adjusts the desired group size. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to &lt;code&gt;terminated&lt;/code&gt;. You can&#39;t connect to or start an instance after you&#39;ve terminated it.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. &lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage\&quot;&gt;Rebalancing activities&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param instanceId The ID of the instance. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether terminating the instance also decrements the size of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ActivityType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityType> gETTerminateInstanceInAutoScalingGroupWithHttpInfo(String instanceId, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETTerminateInstanceInAutoScalingGroupValidateBeforeCall(instanceId, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ActivityType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Terminates the specified instance and optionally adjusts the desired group size. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to &lt;code&gt;terminated&lt;/code&gt;. You can&#39;t connect to or start an instance after you&#39;ve terminated it.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. &lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage\&quot;&gt;Rebalancing activities&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param instanceId The ID of the instance. (required)
     * @param shouldDecrementDesiredCapacity Indicates whether terminating the instance also decrements the size of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTerminateInstanceInAutoScalingGroupAsync(String instanceId, Boolean shouldDecrementDesiredCapacity, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ActivityType> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETTerminateInstanceInAutoScalingGroupValidateBeforeCall(instanceId, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ActivityType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateAutoScalingGroup
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationName The name of the launch configuration. If you specify &lt;code&gt;LaunchConfigurationName&lt;/code&gt; in your update request, you can&#39;t specify &lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;. (optional)
     * @param launchTemplate The launch template and version to use to specify the updates. If you specify &lt;code&gt;LaunchTemplate&lt;/code&gt; in your update request, you can&#39;t specify &lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;. (optional)
     * @param mixedInstancesPolicy The mixed instances policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html\&quot;&gt;Auto Scaling groups with multiple instance types and purchase options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param minSize The minimum size of the Auto Scaling group. (optional)
     * @param maxSize &lt;p&gt;The maximum size of the Auto Scaling group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above &lt;code&gt;MaxSize&lt;/code&gt; to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above &lt;code&gt;MaxSize&lt;/code&gt; by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).&lt;/p&gt; &lt;/note&gt; (optional)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. (optional)
     * @param defaultCooldown &lt;p&gt; &lt;i&gt;Only needed if you use simple scaling policies.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param availabilityZones One or more Availability Zones for the group. (optional)
     * @param healthCheckType &lt;p&gt;A comma-separated value string of one or more health check types.&lt;/p&gt; &lt;p&gt;The valid values are &lt;code&gt;EC2&lt;/code&gt;, &lt;code&gt;ELB&lt;/code&gt;, and &lt;code&gt;VPC_LATTICE&lt;/code&gt;. &lt;code&gt;EC2&lt;/code&gt; is the default health check and cannot be disabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Only specify &lt;code&gt;EC2&lt;/code&gt; if you must clear a value that was previously set.&lt;/p&gt; (optional)
     * @param healthCheckGracePeriod The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the &lt;code&gt;InService&lt;/code&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html\&quot;&gt;Set the health check grace period for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param placementGroup &lt;p&gt;The name of an existing placement group into which to launch your instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;i&gt;cluster&lt;/i&gt; placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param vpCZoneIdentifier A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; with &lt;code&gt;AvailabilityZones&lt;/code&gt;, the subnets that you specify must reside in those Availability Zones. (optional)
     * @param terminationPolicies &lt;p&gt;A policy or a list of policies that are used to select the instances to terminate. The policies are executed in the order that you list them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;Default&lt;/code&gt; | &lt;code&gt;AllocationStrategy&lt;/code&gt; | &lt;code&gt;ClosestToNextInstanceHour&lt;/code&gt; | &lt;code&gt;NewestInstance&lt;/code&gt; | &lt;code&gt;OldestInstance&lt;/code&gt; | &lt;code&gt;OldestLaunchConfiguration&lt;/code&gt; | &lt;code&gt;OldestLaunchTemplate&lt;/code&gt; | &lt;code&gt;arn:aws:lambda:region:account-id:function:my-function:my-alias&lt;/code&gt; &lt;/p&gt; (optional)
     * @param newInstancesProtectedFromScaleIn Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param serviceLinkedRoleARN The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html\&quot;&gt;Service-linked roles&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param maxInstanceLifetime The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). To clear a previously set value, specify a new value of 0. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html\&quot;&gt;Replacing Auto Scaling instances based on maximum instance lifetime&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param capacityRebalance Enables or disables Capacity Rebalancing. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html\&quot;&gt;Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param context Reserved. (optional)
     * @param desiredCapacityType &lt;p&gt;The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports &lt;code&gt;DesiredCapacityType&lt;/code&gt; for attribute-based instance type selection only. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\&quot;&gt;Creating an Auto Scaling group using attribute-based instance type selection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling specifies &lt;code&gt;units&lt;/code&gt;, which translates into number of instances.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;units&lt;/code&gt; | &lt;code&gt;vcpu&lt;/code&gt; | &lt;code&gt;memory-mib&lt;/code&gt; &lt;/p&gt; (optional)
     * @param defaultInstanceWarmup &lt;p&gt;The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html\&quot;&gt;Set the default instance warmup for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, &lt;i&gt;even if it is set to 0 seconds&lt;/i&gt;. To remove a value that you previously set, include the property but specify &lt;code&gt;-1&lt;/code&gt; for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of &lt;code&gt;0&lt;/code&gt; or other nominal value.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateAutoScalingGroupCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, Integer minSize, Integer maxSize, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, String serviceLinkedRoleARN, Integer maxInstanceLifetime, Boolean capacityRebalance, String context, String desiredCapacityType, Integer defaultInstanceWarmup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateAutoScalingGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoScalingGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoScalingGroupName", autoScalingGroupName));
        }

        if (launchConfigurationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LaunchConfigurationName", launchConfigurationName));
        }

        if (launchTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LaunchTemplate", launchTemplate));
        }

        if (mixedInstancesPolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MixedInstancesPolicy", mixedInstancesPolicy));
        }

        if (minSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MinSize", minSize));
        }

        if (maxSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxSize", maxSize));
        }

        if (desiredCapacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DesiredCapacity", desiredCapacity));
        }

        if (defaultCooldown != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefaultCooldown", defaultCooldown));
        }

        if (availabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "AvailabilityZones", availabilityZones));
        }

        if (healthCheckType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckType", healthCheckType));
        }

        if (healthCheckGracePeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HealthCheckGracePeriod", healthCheckGracePeriod));
        }

        if (placementGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PlacementGroup", placementGroup));
        }

        if (vpCZoneIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VPCZoneIdentifier", vpCZoneIdentifier));
        }

        if (terminationPolicies != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TerminationPolicies", terminationPolicies));
        }

        if (newInstancesProtectedFromScaleIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewInstancesProtectedFromScaleIn", newInstancesProtectedFromScaleIn));
        }

        if (serviceLinkedRoleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceLinkedRoleARN", serviceLinkedRoleARN));
        }

        if (maxInstanceLifetime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxInstanceLifetime", maxInstanceLifetime));
        }

        if (capacityRebalance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CapacityRebalance", capacityRebalance));
        }

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Context", context));
        }

        if (desiredCapacityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DesiredCapacityType", desiredCapacityType));
        }

        if (defaultInstanceWarmup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefaultInstanceWarmup", defaultInstanceWarmup));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateAutoScalingGroupValidateBeforeCall(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, Integer minSize, Integer maxSize, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, String serviceLinkedRoleARN, Integer maxInstanceLifetime, Boolean capacityRebalance, String context, String desiredCapacityType, Integer defaultInstanceWarmup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'autoScalingGroupName' is set
        if (autoScalingGroupName == null) {
            throw new ApiException("Missing the required parameter 'autoScalingGroupName' when calling gETUpdateAutoScalingGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateAutoScalingGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateAutoScalingGroup(Async)");
        }

        return gETUpdateAutoScalingGroupCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, minSize, maxSize, desiredCapacity, defaultCooldown, availabilityZones, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, serviceLinkedRoleARN, maxInstanceLifetime, capacityRebalance, context, desiredCapacityType, defaultInstanceWarmup, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;b&gt;We strongly recommend that all Auto Scaling groups use launch templates to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Updates the configuration for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To update an Auto Scaling group, specify the name of the group and the property that you want to change. Any properties that you don&#39;t specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. &lt;/p&gt; &lt;p&gt;If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.&lt;/p&gt; &lt;p&gt;Note the following about changing &lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, or &lt;code&gt;MinSize&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MinSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MinSize&lt;/code&gt; is larger than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MinSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MaxSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MaxSize&lt;/code&gt; is smaller than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MaxSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which properties have been set, call the &lt;a&gt;DescribeAutoScalingGroups&lt;/a&gt; API. To view the scaling policies for an Auto Scaling group, call the &lt;a&gt;DescribePolicies&lt;/a&gt; API. If the group has scaling policies, you can update them by calling the &lt;a&gt;PutScalingPolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationName The name of the launch configuration. If you specify &lt;code&gt;LaunchConfigurationName&lt;/code&gt; in your update request, you can&#39;t specify &lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;. (optional)
     * @param launchTemplate The launch template and version to use to specify the updates. If you specify &lt;code&gt;LaunchTemplate&lt;/code&gt; in your update request, you can&#39;t specify &lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;. (optional)
     * @param mixedInstancesPolicy The mixed instances policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html\&quot;&gt;Auto Scaling groups with multiple instance types and purchase options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param minSize The minimum size of the Auto Scaling group. (optional)
     * @param maxSize &lt;p&gt;The maximum size of the Auto Scaling group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above &lt;code&gt;MaxSize&lt;/code&gt; to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above &lt;code&gt;MaxSize&lt;/code&gt; by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).&lt;/p&gt; &lt;/note&gt; (optional)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. (optional)
     * @param defaultCooldown &lt;p&gt; &lt;i&gt;Only needed if you use simple scaling policies.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param availabilityZones One or more Availability Zones for the group. (optional)
     * @param healthCheckType &lt;p&gt;A comma-separated value string of one or more health check types.&lt;/p&gt; &lt;p&gt;The valid values are &lt;code&gt;EC2&lt;/code&gt;, &lt;code&gt;ELB&lt;/code&gt;, and &lt;code&gt;VPC_LATTICE&lt;/code&gt;. &lt;code&gt;EC2&lt;/code&gt; is the default health check and cannot be disabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Only specify &lt;code&gt;EC2&lt;/code&gt; if you must clear a value that was previously set.&lt;/p&gt; (optional)
     * @param healthCheckGracePeriod The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the &lt;code&gt;InService&lt;/code&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html\&quot;&gt;Set the health check grace period for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param placementGroup &lt;p&gt;The name of an existing placement group into which to launch your instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;i&gt;cluster&lt;/i&gt; placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param vpCZoneIdentifier A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; with &lt;code&gt;AvailabilityZones&lt;/code&gt;, the subnets that you specify must reside in those Availability Zones. (optional)
     * @param terminationPolicies &lt;p&gt;A policy or a list of policies that are used to select the instances to terminate. The policies are executed in the order that you list them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;Default&lt;/code&gt; | &lt;code&gt;AllocationStrategy&lt;/code&gt; | &lt;code&gt;ClosestToNextInstanceHour&lt;/code&gt; | &lt;code&gt;NewestInstance&lt;/code&gt; | &lt;code&gt;OldestInstance&lt;/code&gt; | &lt;code&gt;OldestLaunchConfiguration&lt;/code&gt; | &lt;code&gt;OldestLaunchTemplate&lt;/code&gt; | &lt;code&gt;arn:aws:lambda:region:account-id:function:my-function:my-alias&lt;/code&gt; &lt;/p&gt; (optional)
     * @param newInstancesProtectedFromScaleIn Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param serviceLinkedRoleARN The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html\&quot;&gt;Service-linked roles&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param maxInstanceLifetime The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). To clear a previously set value, specify a new value of 0. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html\&quot;&gt;Replacing Auto Scaling instances based on maximum instance lifetime&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param capacityRebalance Enables or disables Capacity Rebalancing. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html\&quot;&gt;Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param context Reserved. (optional)
     * @param desiredCapacityType &lt;p&gt;The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports &lt;code&gt;DesiredCapacityType&lt;/code&gt; for attribute-based instance type selection only. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\&quot;&gt;Creating an Auto Scaling group using attribute-based instance type selection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling specifies &lt;code&gt;units&lt;/code&gt;, which translates into number of instances.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;units&lt;/code&gt; | &lt;code&gt;vcpu&lt;/code&gt; | &lt;code&gt;memory-mib&lt;/code&gt; &lt;/p&gt; (optional)
     * @param defaultInstanceWarmup &lt;p&gt;The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html\&quot;&gt;Set the default instance warmup for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, &lt;i&gt;even if it is set to 0 seconds&lt;/i&gt;. To remove a value that you previously set, include the property but specify &lt;code&gt;-1&lt;/code&gt; for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of &lt;code&gt;0&lt;/code&gt; or other nominal value.&lt;/p&gt; &lt;/important&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void gETUpdateAutoScalingGroup(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, Integer minSize, Integer maxSize, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, String serviceLinkedRoleARN, Integer maxInstanceLifetime, Boolean capacityRebalance, String context, String desiredCapacityType, Integer defaultInstanceWarmup) throws ApiException {
        gETUpdateAutoScalingGroupWithHttpInfo(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, minSize, maxSize, desiredCapacity, defaultCooldown, availabilityZones, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, serviceLinkedRoleARN, maxInstanceLifetime, capacityRebalance, context, desiredCapacityType, defaultInstanceWarmup);
    }

    /**
     * 
     * &lt;p&gt; &lt;b&gt;We strongly recommend that all Auto Scaling groups use launch templates to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Updates the configuration for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To update an Auto Scaling group, specify the name of the group and the property that you want to change. Any properties that you don&#39;t specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. &lt;/p&gt; &lt;p&gt;If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.&lt;/p&gt; &lt;p&gt;Note the following about changing &lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, or &lt;code&gt;MinSize&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MinSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MinSize&lt;/code&gt; is larger than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MinSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MaxSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MaxSize&lt;/code&gt; is smaller than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MaxSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which properties have been set, call the &lt;a&gt;DescribeAutoScalingGroups&lt;/a&gt; API. To view the scaling policies for an Auto Scaling group, call the &lt;a&gt;DescribePolicies&lt;/a&gt; API. If the group has scaling policies, you can update them by calling the &lt;a&gt;PutScalingPolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationName The name of the launch configuration. If you specify &lt;code&gt;LaunchConfigurationName&lt;/code&gt; in your update request, you can&#39;t specify &lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;. (optional)
     * @param launchTemplate The launch template and version to use to specify the updates. If you specify &lt;code&gt;LaunchTemplate&lt;/code&gt; in your update request, you can&#39;t specify &lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;. (optional)
     * @param mixedInstancesPolicy The mixed instances policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html\&quot;&gt;Auto Scaling groups with multiple instance types and purchase options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param minSize The minimum size of the Auto Scaling group. (optional)
     * @param maxSize &lt;p&gt;The maximum size of the Auto Scaling group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above &lt;code&gt;MaxSize&lt;/code&gt; to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above &lt;code&gt;MaxSize&lt;/code&gt; by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).&lt;/p&gt; &lt;/note&gt; (optional)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. (optional)
     * @param defaultCooldown &lt;p&gt; &lt;i&gt;Only needed if you use simple scaling policies.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param availabilityZones One or more Availability Zones for the group. (optional)
     * @param healthCheckType &lt;p&gt;A comma-separated value string of one or more health check types.&lt;/p&gt; &lt;p&gt;The valid values are &lt;code&gt;EC2&lt;/code&gt;, &lt;code&gt;ELB&lt;/code&gt;, and &lt;code&gt;VPC_LATTICE&lt;/code&gt;. &lt;code&gt;EC2&lt;/code&gt; is the default health check and cannot be disabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Only specify &lt;code&gt;EC2&lt;/code&gt; if you must clear a value that was previously set.&lt;/p&gt; (optional)
     * @param healthCheckGracePeriod The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the &lt;code&gt;InService&lt;/code&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html\&quot;&gt;Set the health check grace period for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param placementGroup &lt;p&gt;The name of an existing placement group into which to launch your instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;i&gt;cluster&lt;/i&gt; placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param vpCZoneIdentifier A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; with &lt;code&gt;AvailabilityZones&lt;/code&gt;, the subnets that you specify must reside in those Availability Zones. (optional)
     * @param terminationPolicies &lt;p&gt;A policy or a list of policies that are used to select the instances to terminate. The policies are executed in the order that you list them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;Default&lt;/code&gt; | &lt;code&gt;AllocationStrategy&lt;/code&gt; | &lt;code&gt;ClosestToNextInstanceHour&lt;/code&gt; | &lt;code&gt;NewestInstance&lt;/code&gt; | &lt;code&gt;OldestInstance&lt;/code&gt; | &lt;code&gt;OldestLaunchConfiguration&lt;/code&gt; | &lt;code&gt;OldestLaunchTemplate&lt;/code&gt; | &lt;code&gt;arn:aws:lambda:region:account-id:function:my-function:my-alias&lt;/code&gt; &lt;/p&gt; (optional)
     * @param newInstancesProtectedFromScaleIn Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param serviceLinkedRoleARN The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html\&quot;&gt;Service-linked roles&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param maxInstanceLifetime The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). To clear a previously set value, specify a new value of 0. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html\&quot;&gt;Replacing Auto Scaling instances based on maximum instance lifetime&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param capacityRebalance Enables or disables Capacity Rebalancing. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html\&quot;&gt;Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param context Reserved. (optional)
     * @param desiredCapacityType &lt;p&gt;The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports &lt;code&gt;DesiredCapacityType&lt;/code&gt; for attribute-based instance type selection only. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\&quot;&gt;Creating an Auto Scaling group using attribute-based instance type selection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling specifies &lt;code&gt;units&lt;/code&gt;, which translates into number of instances.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;units&lt;/code&gt; | &lt;code&gt;vcpu&lt;/code&gt; | &lt;code&gt;memory-mib&lt;/code&gt; &lt;/p&gt; (optional)
     * @param defaultInstanceWarmup &lt;p&gt;The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html\&quot;&gt;Set the default instance warmup for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, &lt;i&gt;even if it is set to 0 seconds&lt;/i&gt;. To remove a value that you previously set, include the property but specify &lt;code&gt;-1&lt;/code&gt; for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of &lt;code&gt;0&lt;/code&gt; or other nominal value.&lt;/p&gt; &lt;/important&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETUpdateAutoScalingGroupWithHttpInfo(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, Integer minSize, Integer maxSize, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, String serviceLinkedRoleARN, Integer maxInstanceLifetime, Boolean capacityRebalance, String context, String desiredCapacityType, Integer defaultInstanceWarmup) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateAutoScalingGroupValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, minSize, maxSize, desiredCapacity, defaultCooldown, availabilityZones, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, serviceLinkedRoleARN, maxInstanceLifetime, capacityRebalance, context, desiredCapacityType, defaultInstanceWarmup, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;b&gt;We strongly recommend that all Auto Scaling groups use launch templates to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Updates the configuration for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To update an Auto Scaling group, specify the name of the group and the property that you want to change. Any properties that you don&#39;t specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. &lt;/p&gt; &lt;p&gt;If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.&lt;/p&gt; &lt;p&gt;Note the following about changing &lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, or &lt;code&gt;MinSize&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MinSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MinSize&lt;/code&gt; is larger than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MinSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MaxSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MaxSize&lt;/code&gt; is smaller than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MaxSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which properties have been set, call the &lt;a&gt;DescribeAutoScalingGroups&lt;/a&gt; API. To view the scaling policies for an Auto Scaling group, call the &lt;a&gt;DescribePolicies&lt;/a&gt; API. If the group has scaling policies, you can update them by calling the &lt;a&gt;PutScalingPolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param autoScalingGroupName The name of the Auto Scaling group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationName The name of the launch configuration. If you specify &lt;code&gt;LaunchConfigurationName&lt;/code&gt; in your update request, you can&#39;t specify &lt;code&gt;LaunchTemplate&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;. (optional)
     * @param launchTemplate The launch template and version to use to specify the updates. If you specify &lt;code&gt;LaunchTemplate&lt;/code&gt; in your update request, you can&#39;t specify &lt;code&gt;LaunchConfigurationName&lt;/code&gt; or &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;. (optional)
     * @param mixedInstancesPolicy The mixed instances policy. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html\&quot;&gt;Auto Scaling groups with multiple instance types and purchase options&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param minSize The minimum size of the Auto Scaling group. (optional)
     * @param maxSize &lt;p&gt;The maximum size of the Auto Scaling group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above &lt;code&gt;MaxSize&lt;/code&gt; to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above &lt;code&gt;MaxSize&lt;/code&gt; by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).&lt;/p&gt; &lt;/note&gt; (optional)
     * @param desiredCapacity The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. (optional)
     * @param defaultCooldown &lt;p&gt; &lt;i&gt;Only needed if you use simple scaling policies.&lt;/i&gt; &lt;/p&gt; &lt;p&gt;The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html\&quot;&gt;Scaling cooldowns for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param availabilityZones One or more Availability Zones for the group. (optional)
     * @param healthCheckType &lt;p&gt;A comma-separated value string of one or more health check types.&lt;/p&gt; &lt;p&gt;The valid values are &lt;code&gt;EC2&lt;/code&gt;, &lt;code&gt;ELB&lt;/code&gt;, and &lt;code&gt;VPC_LATTICE&lt;/code&gt;. &lt;code&gt;EC2&lt;/code&gt; is the default health check and cannot be disabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Only specify &lt;code&gt;EC2&lt;/code&gt; if you must clear a value that was previously set.&lt;/p&gt; (optional)
     * @param healthCheckGracePeriod The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the &lt;code&gt;InService&lt;/code&gt; state. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html\&quot;&gt;Set the health check grace period for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param placementGroup &lt;p&gt;The name of an existing placement group into which to launch your instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;i&gt;cluster&lt;/i&gt; placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param vpCZoneIdentifier A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify &lt;code&gt;VPCZoneIdentifier&lt;/code&gt; with &lt;code&gt;AvailabilityZones&lt;/code&gt;, the subnets that you specify must reside in those Availability Zones. (optional)
     * @param terminationPolicies &lt;p&gt;A policy or a list of policies that are used to select the instances to terminate. The policies are executed in the order that you list them. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;Default&lt;/code&gt; | &lt;code&gt;AllocationStrategy&lt;/code&gt; | &lt;code&gt;ClosestToNextInstanceHour&lt;/code&gt; | &lt;code&gt;NewestInstance&lt;/code&gt; | &lt;code&gt;OldestInstance&lt;/code&gt; | &lt;code&gt;OldestLaunchConfiguration&lt;/code&gt; | &lt;code&gt;OldestLaunchTemplate&lt;/code&gt; | &lt;code&gt;arn:aws:lambda:region:account-id:function:my-function:my-alias&lt;/code&gt; &lt;/p&gt; (optional)
     * @param newInstancesProtectedFromScaleIn Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param serviceLinkedRoleARN The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html\&quot;&gt;Service-linked roles&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param maxInstanceLifetime The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). To clear a previously set value, specify a new value of 0. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html\&quot;&gt;Replacing Auto Scaling instances based on maximum instance lifetime&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param capacityRebalance Enables or disables Capacity Rebalancing. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html\&quot;&gt;Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. (optional)
     * @param context Reserved. (optional)
     * @param desiredCapacityType &lt;p&gt;The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports &lt;code&gt;DesiredCapacityType&lt;/code&gt; for attribute-based instance type selection only. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html\&quot;&gt;Creating an Auto Scaling group using attribute-based instance type selection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling specifies &lt;code&gt;units&lt;/code&gt;, which translates into number of instances.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;units&lt;/code&gt; | &lt;code&gt;vcpu&lt;/code&gt; | &lt;code&gt;memory-mib&lt;/code&gt; &lt;/p&gt; (optional)
     * @param defaultInstanceWarmup &lt;p&gt;The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html\&quot;&gt;Set the default instance warmup for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, &lt;i&gt;even if it is set to 0 seconds&lt;/i&gt;. To remove a value that you previously set, include the property but specify &lt;code&gt;-1&lt;/code&gt; for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of &lt;code&gt;0&lt;/code&gt; or other nominal value.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateAutoScalingGroupAsync(String autoScalingGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String launchConfigurationName, GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate, GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy, Integer minSize, Integer maxSize, Integer desiredCapacity, Integer defaultCooldown, List<String> availabilityZones, String healthCheckType, Integer healthCheckGracePeriod, String placementGroup, String vpCZoneIdentifier, List<String> terminationPolicies, Boolean newInstancesProtectedFromScaleIn, String serviceLinkedRoleARN, Integer maxInstanceLifetime, Boolean capacityRebalance, String context, String desiredCapacityType, Integer defaultInstanceWarmup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateAutoScalingGroupValidateBeforeCall(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, minSize, maxSize, desiredCapacity, defaultCooldown, availabilityZones, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, serviceLinkedRoleARN, maxInstanceLifetime, capacityRebalance, context, desiredCapacityType, defaultInstanceWarmup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAttachInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachInstancesQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachInstancesQuery attachInstancesQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachInstancesQuery;

        // create path and map variables
        String localVarPath = "/#Action=AttachInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAttachInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachInstancesQuery attachInstancesQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAttachInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAttachInstances(Async)");
        }

        return pOSTAttachInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachInstancesQuery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Attaches one or more EC2 instances to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html\&quot;&gt;Attach EC2 instances to your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachInstancesQuery  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTAttachInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachInstancesQuery attachInstancesQuery) throws ApiException {
        pOSTAttachInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachInstancesQuery);
    }

    /**
     * 
     * &lt;p&gt;Attaches one or more EC2 instances to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html\&quot;&gt;Attach EC2 instances to your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachInstancesQuery  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTAttachInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachInstancesQuery attachInstancesQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTAttachInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachInstancesQuery, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Attaches one or more EC2 instances to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html\&quot;&gt;Attach EC2 instances to your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachInstancesQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachInstancesQuery attachInstancesQuery, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAttachInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachInstancesQuery, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAttachLoadBalancerTargetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancerTargetGroupsType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachLoadBalancerTargetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerTargetGroupsType attachLoadBalancerTargetGroupsType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachLoadBalancerTargetGroupsType;

        // create path and map variables
        String localVarPath = "/#Action=AttachLoadBalancerTargetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAttachLoadBalancerTargetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerTargetGroupsType attachLoadBalancerTargetGroupsType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAttachLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAttachLoadBalancerTargetGroups(Async)");
        }

        return pOSTAttachLoadBalancerTargetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancerTargetGroupsType, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more target groups to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is used with the following load balancer types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer - Operates at the network layer (layer 3).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To describe the target groups for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API. To detach the target group from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing target groups or Classic Load Balancers from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancerTargetGroupsType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTAttachLoadBalancerTargetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerTargetGroupsType attachLoadBalancerTargetGroupsType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTAttachLoadBalancerTargetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancerTargetGroupsType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more target groups to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is used with the following load balancer types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer - Operates at the network layer (layer 3).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To describe the target groups for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API. To detach the target group from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing target groups or Classic Load Balancers from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancerTargetGroupsType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTAttachLoadBalancerTargetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerTargetGroupsType attachLoadBalancerTargetGroupsType) throws ApiException {
        okhttp3.Call localVarCall = pOSTAttachLoadBalancerTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancerTargetGroupsType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more target groups to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is used with the following load balancer types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer - Operates at the network layer (layer 3).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To describe the target groups for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API. To detach the target group from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing target groups or Classic Load Balancers from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancerTargetGroupsType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachLoadBalancerTargetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancerTargetGroupsType attachLoadBalancerTargetGroupsType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAttachLoadBalancerTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancerTargetGroupsType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAttachLoadBalancers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancersType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachLoadBalancersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancersType attachLoadBalancersType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachLoadBalancersType;

        // create path and map variables
        String localVarPath = "/#Action=AttachLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAttachLoadBalancersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancersType attachLoadBalancersType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAttachLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAttachLoadBalancers(Async)");
        }

        return pOSTAttachLoadBalancersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancersType, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more Classic Load Balancers to the specified Auto Scaling group. Amazon EC2 Auto Scaling registers the running instances with these Classic Load Balancers.&lt;/p&gt; &lt;p&gt;To describe the load balancers for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API. To detach a load balancer from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancers&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing Classic Load Balancers or target groups from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancersType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTAttachLoadBalancers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancersType attachLoadBalancersType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTAttachLoadBalancersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancersType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more Classic Load Balancers to the specified Auto Scaling group. Amazon EC2 Auto Scaling registers the running instances with these Classic Load Balancers.&lt;/p&gt; &lt;p&gt;To describe the load balancers for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API. To detach a load balancer from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancers&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing Classic Load Balancers or target groups from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancersType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTAttachLoadBalancersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancersType attachLoadBalancersType) throws ApiException {
        okhttp3.Call localVarCall = pOSTAttachLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancersType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more Classic Load Balancers to the specified Auto Scaling group. Amazon EC2 Auto Scaling registers the running instances with these Classic Load Balancers.&lt;/p&gt; &lt;p&gt;To describe the load balancers for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API. To detach a load balancer from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancers&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing Classic Load Balancers or target groups from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachLoadBalancersType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachLoadBalancersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachLoadBalancersType attachLoadBalancersType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAttachLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancersType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAttachTrafficSources
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachTrafficSourcesType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachTrafficSourcesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachTrafficSourcesType attachTrafficSourcesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachTrafficSourcesType;

        // create path and map variables
        String localVarPath = "/#Action=AttachTrafficSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAttachTrafficSourcesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachTrafficSourcesType attachTrafficSourcesType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAttachTrafficSources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAttachTrafficSources(Async)");
        }

        return pOSTAttachTrafficSourcesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachTrafficSourcesType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Attaches one or more traffic sources to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use any of the following as traffic sources for an Auto Scaling group:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Classic Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;VPC Lattice&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is additive and does not detach existing traffic sources from the Auto Scaling group. &lt;/p&gt; &lt;p&gt;After the operation completes, use the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API to return details about the state of the attachments between traffic sources and your Auto Scaling group. To detach a traffic source from the Auto Scaling group, call the &lt;a&gt;DetachTrafficSources&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachTrafficSourcesType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTAttachTrafficSources(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachTrafficSourcesType attachTrafficSourcesType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTAttachTrafficSourcesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachTrafficSourcesType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Attaches one or more traffic sources to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use any of the following as traffic sources for an Auto Scaling group:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Classic Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;VPC Lattice&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is additive and does not detach existing traffic sources from the Auto Scaling group. &lt;/p&gt; &lt;p&gt;After the operation completes, use the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API to return details about the state of the attachments between traffic sources and your Auto Scaling group. To detach a traffic source from the Auto Scaling group, call the &lt;a&gt;DetachTrafficSources&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachTrafficSourcesType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTAttachTrafficSourcesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachTrafficSourcesType attachTrafficSourcesType) throws ApiException {
        okhttp3.Call localVarCall = pOSTAttachTrafficSourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachTrafficSourcesType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Attaches one or more traffic sources to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use any of the following as traffic sources for an Auto Scaling group:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Classic Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;VPC Lattice&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is additive and does not detach existing traffic sources from the Auto Scaling group. &lt;/p&gt; &lt;p&gt;After the operation completes, use the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API to return details about the state of the attachments between traffic sources and your Auto Scaling group. To detach a traffic source from the Auto Scaling group, call the &lt;a&gt;DetachTrafficSources&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param attachTrafficSourcesType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAttachTrafficSourcesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AttachTrafficSourcesType attachTrafficSourcesType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAttachTrafficSourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachTrafficSourcesType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTBatchDeleteScheduledAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchDeleteScheduledActionType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchDeleteScheduledActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDeleteScheduledActionType batchDeleteScheduledActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchDeleteScheduledActionType;

        // create path and map variables
        String localVarPath = "/#Action=BatchDeleteScheduledAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTBatchDeleteScheduledActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDeleteScheduledActionType batchDeleteScheduledActionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTBatchDeleteScheduledAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTBatchDeleteScheduledAction(Async)");
        }

        return pOSTBatchDeleteScheduledActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDeleteScheduledActionType, _callback);

    }

    /**
     * 
     * Deletes one or more scheduled actions for the specified Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchDeleteScheduledActionType  (optional)
     * @return BatchDeleteScheduledActionAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public BatchDeleteScheduledActionAnswer pOSTBatchDeleteScheduledAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDeleteScheduledActionType batchDeleteScheduledActionType) throws ApiException {
        ApiResponse<BatchDeleteScheduledActionAnswer> localVarResp = pOSTBatchDeleteScheduledActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDeleteScheduledActionType);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes one or more scheduled actions for the specified Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchDeleteScheduledActionType  (optional)
     * @return ApiResponse&lt;BatchDeleteScheduledActionAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchDeleteScheduledActionAnswer> pOSTBatchDeleteScheduledActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDeleteScheduledActionType batchDeleteScheduledActionType) throws ApiException {
        okhttp3.Call localVarCall = pOSTBatchDeleteScheduledActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDeleteScheduledActionType, null);
        Type localVarReturnType = new TypeToken<BatchDeleteScheduledActionAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes one or more scheduled actions for the specified Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchDeleteScheduledActionType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchDeleteScheduledActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDeleteScheduledActionType batchDeleteScheduledActionType, final ApiCallback<BatchDeleteScheduledActionAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTBatchDeleteScheduledActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDeleteScheduledActionType, _callback);
        Type localVarReturnType = new TypeToken<BatchDeleteScheduledActionAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTBatchPutScheduledUpdateGroupAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchPutScheduledUpdateGroupActionType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchPutScheduledUpdateGroupActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchPutScheduledUpdateGroupActionType batchPutScheduledUpdateGroupActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchPutScheduledUpdateGroupActionType;

        // create path and map variables
        String localVarPath = "/#Action=BatchPutScheduledUpdateGroupAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTBatchPutScheduledUpdateGroupActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchPutScheduledUpdateGroupActionType batchPutScheduledUpdateGroupActionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTBatchPutScheduledUpdateGroupAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTBatchPutScheduledUpdateGroupAction(Async)");
        }

        return pOSTBatchPutScheduledUpdateGroupActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchPutScheduledUpdateGroupActionType, _callback);

    }

    /**
     * 
     * Creates or updates one or more scheduled scaling actions for an Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchPutScheduledUpdateGroupActionType  (optional)
     * @return BatchPutScheduledUpdateGroupActionAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public BatchPutScheduledUpdateGroupActionAnswer pOSTBatchPutScheduledUpdateGroupAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchPutScheduledUpdateGroupActionType batchPutScheduledUpdateGroupActionType) throws ApiException {
        ApiResponse<BatchPutScheduledUpdateGroupActionAnswer> localVarResp = pOSTBatchPutScheduledUpdateGroupActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchPutScheduledUpdateGroupActionType);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates one or more scheduled scaling actions for an Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchPutScheduledUpdateGroupActionType  (optional)
     * @return ApiResponse&lt;BatchPutScheduledUpdateGroupActionAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchPutScheduledUpdateGroupActionAnswer> pOSTBatchPutScheduledUpdateGroupActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchPutScheduledUpdateGroupActionType batchPutScheduledUpdateGroupActionType) throws ApiException {
        okhttp3.Call localVarCall = pOSTBatchPutScheduledUpdateGroupActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchPutScheduledUpdateGroupActionType, null);
        Type localVarReturnType = new TypeToken<BatchPutScheduledUpdateGroupActionAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates one or more scheduled scaling actions for an Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchPutScheduledUpdateGroupActionType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchPutScheduledUpdateGroupActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchPutScheduledUpdateGroupActionType batchPutScheduledUpdateGroupActionType, final ApiCallback<BatchPutScheduledUpdateGroupActionAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTBatchPutScheduledUpdateGroupActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchPutScheduledUpdateGroupActionType, _callback);
        Type localVarReturnType = new TypeToken<BatchPutScheduledUpdateGroupActionAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCancelInstanceRefresh
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelInstanceRefreshType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCancelInstanceRefreshCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelInstanceRefreshType cancelInstanceRefreshType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelInstanceRefreshType;

        // create path and map variables
        String localVarPath = "/#Action=CancelInstanceRefresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCancelInstanceRefreshValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelInstanceRefreshType cancelInstanceRefreshType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCancelInstanceRefresh(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCancelInstanceRefresh(Async)");
        }

        return pOSTCancelInstanceRefreshCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelInstanceRefreshType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels an instance refresh or rollback that is in progress. If an instance refresh or rollback is not in progress, an &lt;code&gt;ActiveInstanceRefreshNotFound&lt;/code&gt; error occurs.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;When you cancel an instance refresh, this does not roll back any changes that it made. Use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API to roll back instead.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelInstanceRefreshType  (optional)
     * @return CancelInstanceRefreshAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CancelInstanceRefreshAnswer pOSTCancelInstanceRefresh(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelInstanceRefreshType cancelInstanceRefreshType) throws ApiException {
        ApiResponse<CancelInstanceRefreshAnswer> localVarResp = pOSTCancelInstanceRefreshWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelInstanceRefreshType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels an instance refresh or rollback that is in progress. If an instance refresh or rollback is not in progress, an &lt;code&gt;ActiveInstanceRefreshNotFound&lt;/code&gt; error occurs.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;When you cancel an instance refresh, this does not roll back any changes that it made. Use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API to roll back instead.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelInstanceRefreshType  (optional)
     * @return ApiResponse&lt;CancelInstanceRefreshAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelInstanceRefreshAnswer> pOSTCancelInstanceRefreshWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelInstanceRefreshType cancelInstanceRefreshType) throws ApiException {
        okhttp3.Call localVarCall = pOSTCancelInstanceRefreshValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelInstanceRefreshType, null);
        Type localVarReturnType = new TypeToken<CancelInstanceRefreshAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels an instance refresh or rollback that is in progress. If an instance refresh or rollback is not in progress, an &lt;code&gt;ActiveInstanceRefreshNotFound&lt;/code&gt; error occurs.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;When you cancel an instance refresh, this does not roll back any changes that it made. Use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API to roll back instead.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelInstanceRefreshType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCancelInstanceRefreshAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelInstanceRefreshType cancelInstanceRefreshType, final ApiCallback<CancelInstanceRefreshAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCancelInstanceRefreshValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelInstanceRefreshType, _callback);
        Type localVarReturnType = new TypeToken<CancelInstanceRefreshAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCompleteLifecycleAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param completeLifecycleActionType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCompleteLifecycleActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteLifecycleActionType completeLifecycleActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completeLifecycleActionType;

        // create path and map variables
        String localVarPath = "/#Action=CompleteLifecycleAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCompleteLifecycleActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteLifecycleActionType completeLifecycleActionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCompleteLifecycleAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCompleteLifecycleAction(Async)");
        }

        return pOSTCompleteLifecycleActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeLifecycleActionType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Completes the lifecycle action for the specified token or instance with the specified result.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/completing-lifecycle-hooks.html\&quot;&gt;Complete a lifecycle action&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param completeLifecycleActionType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTCompleteLifecycleAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteLifecycleActionType completeLifecycleActionType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTCompleteLifecycleActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeLifecycleActionType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Completes the lifecycle action for the specified token or instance with the specified result.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/completing-lifecycle-hooks.html\&quot;&gt;Complete a lifecycle action&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param completeLifecycleActionType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTCompleteLifecycleActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteLifecycleActionType completeLifecycleActionType) throws ApiException {
        okhttp3.Call localVarCall = pOSTCompleteLifecycleActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeLifecycleActionType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Completes the lifecycle action for the specified token or instance with the specified result.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/completing-lifecycle-hooks.html\&quot;&gt;Complete a lifecycle action&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param completeLifecycleActionType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCompleteLifecycleActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteLifecycleActionType completeLifecycleActionType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCompleteLifecycleActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeLifecycleActionType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateAutoScalingGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAutoScalingGroupType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateAutoScalingGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAutoScalingGroupType createAutoScalingGroupType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAutoScalingGroupType;

        // create path and map variables
        String localVarPath = "/#Action=CreateAutoScalingGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateAutoScalingGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAutoScalingGroupType createAutoScalingGroupType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateAutoScalingGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateAutoScalingGroup(Async)");
        }

        return pOSTCreateAutoScalingGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAutoScalingGroupType, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;b&gt;We strongly recommend using a launch template when calling this operation to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Creates an Auto Scaling group with the specified name and attributes. &lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For introductory exercises for creating an Auto Scaling group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/GettingStartedTutorial.html\&quot;&gt;Getting started with Amazon EC2 Auto Scaling&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-register-lbs-with-asg.html\&quot;&gt;Tutorial: Set up a scaled and load-balanced application&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html\&quot;&gt;Auto Scaling groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Every Auto Scaling group has three size properties (&lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, and &lt;code&gt;MinSize&lt;/code&gt;). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAutoScalingGroupType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTCreateAutoScalingGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAutoScalingGroupType createAutoScalingGroupType) throws ApiException {
        pOSTCreateAutoScalingGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAutoScalingGroupType);
    }

    /**
     * 
     * &lt;p&gt; &lt;b&gt;We strongly recommend using a launch template when calling this operation to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Creates an Auto Scaling group with the specified name and attributes. &lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For introductory exercises for creating an Auto Scaling group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/GettingStartedTutorial.html\&quot;&gt;Getting started with Amazon EC2 Auto Scaling&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-register-lbs-with-asg.html\&quot;&gt;Tutorial: Set up a scaled and load-balanced application&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html\&quot;&gt;Auto Scaling groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Every Auto Scaling group has three size properties (&lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, and &lt;code&gt;MinSize&lt;/code&gt;). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAutoScalingGroupType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTCreateAutoScalingGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAutoScalingGroupType createAutoScalingGroupType) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateAutoScalingGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAutoScalingGroupType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;b&gt;We strongly recommend using a launch template when calling this operation to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Creates an Auto Scaling group with the specified name and attributes. &lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For introductory exercises for creating an Auto Scaling group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/GettingStartedTutorial.html\&quot;&gt;Getting started with Amazon EC2 Auto Scaling&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-register-lbs-with-asg.html\&quot;&gt;Tutorial: Set up a scaled and load-balanced application&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html\&quot;&gt;Auto Scaling groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Every Auto Scaling group has three size properties (&lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, and &lt;code&gt;MinSize&lt;/code&gt;). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createAutoScalingGroupType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateAutoScalingGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateAutoScalingGroupType createAutoScalingGroupType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateAutoScalingGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAutoScalingGroupType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateLaunchConfiguration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLaunchConfigurationType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLaunchConfigurationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLaunchConfigurationType createLaunchConfigurationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLaunchConfigurationType;

        // create path and map variables
        String localVarPath = "/#Action=CreateLaunchConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateLaunchConfigurationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLaunchConfigurationType createLaunchConfigurationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateLaunchConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateLaunchConfiguration(Async)");
        }

        return pOSTCreateLaunchConfigurationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLaunchConfigurationType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a launch configuration.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of launch configurations, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html\&quot;&gt;Launch configurations&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group using either a launch template or a launch configuration. We strongly recommend that you do not use launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2. For information about using launch templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html\&quot;&gt;Launch templates&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLaunchConfigurationType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTCreateLaunchConfiguration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLaunchConfigurationType createLaunchConfigurationType) throws ApiException {
        pOSTCreateLaunchConfigurationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLaunchConfigurationType);
    }

    /**
     * 
     * &lt;p&gt;Creates a launch configuration.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of launch configurations, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html\&quot;&gt;Launch configurations&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group using either a launch template or a launch configuration. We strongly recommend that you do not use launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2. For information about using launch templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html\&quot;&gt;Launch templates&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLaunchConfigurationType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTCreateLaunchConfigurationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLaunchConfigurationType createLaunchConfigurationType) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateLaunchConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLaunchConfigurationType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a launch configuration.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of launch configurations, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html\&quot;&gt;Launch configurations&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group using either a launch template or a launch configuration. We strongly recommend that you do not use launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2. For information about using launch templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html\&quot;&gt;Launch templates&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createLaunchConfigurationType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateLaunchConfigurationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateLaunchConfigurationType createLaunchConfigurationType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateLaunchConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLaunchConfigurationType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateOrUpdateTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createOrUpdateTagsType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateOrUpdateTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateOrUpdateTagsType createOrUpdateTagsType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrUpdateTagsType;

        // create path and map variables
        String localVarPath = "/#Action=CreateOrUpdateTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateOrUpdateTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateOrUpdateTagsType createOrUpdateTagsType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateOrUpdateTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateOrUpdateTags(Async)");
        }

        return pOSTCreateOrUpdateTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createOrUpdateTagsType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates tags for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createOrUpdateTagsType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTCreateOrUpdateTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateOrUpdateTagsType createOrUpdateTagsType) throws ApiException {
        pOSTCreateOrUpdateTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createOrUpdateTagsType);
    }

    /**
     * 
     * &lt;p&gt;Creates or updates tags for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createOrUpdateTagsType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTCreateOrUpdateTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateOrUpdateTagsType createOrUpdateTagsType) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateOrUpdateTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createOrUpdateTagsType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates tags for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createOrUpdateTagsType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateOrUpdateTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateOrUpdateTagsType createOrUpdateTagsType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateOrUpdateTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createOrUpdateTagsType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteAutoScalingGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAutoScalingGroupType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteAutoScalingGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAutoScalingGroupType deleteAutoScalingGroupType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteAutoScalingGroupType;

        // create path and map variables
        String localVarPath = "/#Action=DeleteAutoScalingGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteAutoScalingGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAutoScalingGroupType deleteAutoScalingGroupType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteAutoScalingGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteAutoScalingGroup(Async)");
        }

        return pOSTDeleteAutoScalingGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAutoScalingGroupType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed. The force delete operation will also terminate the EC2 instances. If the group has a warm pool, the force delete option also deletes the warm pool.&lt;/p&gt; &lt;p&gt;To remove instances from the Auto Scaling group before deleting it, call the &lt;a&gt;DetachInstances&lt;/a&gt; API with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.&lt;/p&gt; &lt;p&gt;To terminate all instances before deleting the Auto Scaling group, call the &lt;a&gt;UpdateAutoScalingGroup&lt;/a&gt; API and set the minimum size and desired capacity of the Auto Scaling group to zero.&lt;/p&gt; &lt;p&gt;If the group has scaling policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html\&quot;&gt;Delete your Auto Scaling infrastructure&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAutoScalingGroupType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteAutoScalingGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAutoScalingGroupType deleteAutoScalingGroupType) throws ApiException {
        pOSTDeleteAutoScalingGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAutoScalingGroupType);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed. The force delete operation will also terminate the EC2 instances. If the group has a warm pool, the force delete option also deletes the warm pool.&lt;/p&gt; &lt;p&gt;To remove instances from the Auto Scaling group before deleting it, call the &lt;a&gt;DetachInstances&lt;/a&gt; API with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.&lt;/p&gt; &lt;p&gt;To terminate all instances before deleting the Auto Scaling group, call the &lt;a&gt;UpdateAutoScalingGroup&lt;/a&gt; API and set the minimum size and desired capacity of the Auto Scaling group to zero.&lt;/p&gt; &lt;p&gt;If the group has scaling policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html\&quot;&gt;Delete your Auto Scaling infrastructure&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAutoScalingGroupType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteAutoScalingGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAutoScalingGroupType deleteAutoScalingGroupType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteAutoScalingGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAutoScalingGroupType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed. The force delete operation will also terminate the EC2 instances. If the group has a warm pool, the force delete option also deletes the warm pool.&lt;/p&gt; &lt;p&gt;To remove instances from the Auto Scaling group before deleting it, call the &lt;a&gt;DetachInstances&lt;/a&gt; API with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.&lt;/p&gt; &lt;p&gt;To terminate all instances before deleting the Auto Scaling group, call the &lt;a&gt;UpdateAutoScalingGroup&lt;/a&gt; API and set the minimum size and desired capacity of the Auto Scaling group to zero.&lt;/p&gt; &lt;p&gt;If the group has scaling policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html\&quot;&gt;Delete your Auto Scaling infrastructure&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteAutoScalingGroupType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteAutoScalingGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteAutoScalingGroupType deleteAutoScalingGroupType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteAutoScalingGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAutoScalingGroupType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteLaunchConfiguration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationNameType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLaunchConfigurationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, LaunchConfigurationNameType launchConfigurationNameType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = launchConfigurationNameType;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLaunchConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteLaunchConfigurationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, LaunchConfigurationNameType launchConfigurationNameType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteLaunchConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteLaunchConfiguration(Async)");
        }

        return pOSTDeleteLaunchConfigurationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNameType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified launch configuration.&lt;/p&gt; &lt;p&gt;The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationNameType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteLaunchConfiguration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, LaunchConfigurationNameType launchConfigurationNameType) throws ApiException {
        pOSTDeleteLaunchConfigurationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNameType);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified launch configuration.&lt;/p&gt; &lt;p&gt;The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationNameType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteLaunchConfigurationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, LaunchConfigurationNameType launchConfigurationNameType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteLaunchConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNameType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified launch configuration.&lt;/p&gt; &lt;p&gt;The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param launchConfigurationNameType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLaunchConfigurationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, LaunchConfigurationNameType launchConfigurationNameType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteLaunchConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNameType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteLifecycleHook
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLifecycleHookType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLifecycleHookCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLifecycleHookType deleteLifecycleHookType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteLifecycleHookType;

        // create path and map variables
        String localVarPath = "/#Action=DeleteLifecycleHook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteLifecycleHookValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLifecycleHookType deleteLifecycleHookType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteLifecycleHook(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteLifecycleHook(Async)");
        }

        return pOSTDeleteLifecycleHookCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLifecycleHookType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified lifecycle hook.&lt;/p&gt; &lt;p&gt;If there are any outstanding lifecycle actions, they are completed first (&lt;code&gt;ABANDON&lt;/code&gt; for launching instances, &lt;code&gt;CONTINUE&lt;/code&gt; for terminating instances).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLifecycleHookType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteLifecycleHook(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLifecycleHookType deleteLifecycleHookType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteLifecycleHookWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLifecycleHookType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified lifecycle hook.&lt;/p&gt; &lt;p&gt;If there are any outstanding lifecycle actions, they are completed first (&lt;code&gt;ABANDON&lt;/code&gt; for launching instances, &lt;code&gt;CONTINUE&lt;/code&gt; for terminating instances).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLifecycleHookType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteLifecycleHookWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLifecycleHookType deleteLifecycleHookType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteLifecycleHookValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLifecycleHookType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified lifecycle hook.&lt;/p&gt; &lt;p&gt;If there are any outstanding lifecycle actions, they are completed first (&lt;code&gt;ABANDON&lt;/code&gt; for launching instances, &lt;code&gt;CONTINUE&lt;/code&gt; for terminating instances).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteLifecycleHookType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteLifecycleHookAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteLifecycleHookType deleteLifecycleHookType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteLifecycleHookValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLifecycleHookType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteNotificationConfiguration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteNotificationConfigurationType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteNotificationConfigurationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteNotificationConfigurationType deleteNotificationConfigurationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteNotificationConfigurationType;

        // create path and map variables
        String localVarPath = "/#Action=DeleteNotificationConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteNotificationConfigurationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteNotificationConfigurationType deleteNotificationConfigurationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteNotificationConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteNotificationConfiguration(Async)");
        }

        return pOSTDeleteNotificationConfigurationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteNotificationConfigurationType, _callback);

    }

    /**
     * 
     * Deletes the specified notification.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteNotificationConfigurationType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteNotificationConfiguration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteNotificationConfigurationType deleteNotificationConfigurationType) throws ApiException {
        pOSTDeleteNotificationConfigurationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteNotificationConfigurationType);
    }

    /**
     * 
     * Deletes the specified notification.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteNotificationConfigurationType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteNotificationConfigurationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteNotificationConfigurationType deleteNotificationConfigurationType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteNotificationConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteNotificationConfigurationType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified notification.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteNotificationConfigurationType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteNotificationConfigurationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteNotificationConfigurationType deleteNotificationConfigurationType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteNotificationConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteNotificationConfigurationType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeletePolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePolicyType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeletePolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePolicyType deletePolicyType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deletePolicyType;

        // create path and map variables
        String localVarPath = "/#Action=DeletePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeletePolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePolicyType deletePolicyType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeletePolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeletePolicy(Async)");
        }

        return pOSTDeletePolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePolicyType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified scaling policy.&lt;/p&gt; &lt;p&gt;Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html\&quot;&gt;Deleting a scaling policy&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePolicyType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeletePolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePolicyType deletePolicyType) throws ApiException {
        pOSTDeletePolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePolicyType);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified scaling policy.&lt;/p&gt; &lt;p&gt;Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html\&quot;&gt;Deleting a scaling policy&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePolicyType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeletePolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePolicyType deletePolicyType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeletePolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePolicyType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified scaling policy.&lt;/p&gt; &lt;p&gt;Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html\&quot;&gt;Deleting a scaling policy&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deletePolicyType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeletePolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeletePolicyType deletePolicyType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeletePolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePolicyType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteScheduledAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteScheduledActionType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteScheduledActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteScheduledActionType deleteScheduledActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteScheduledActionType;

        // create path and map variables
        String localVarPath = "/#Action=DeleteScheduledAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteScheduledActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteScheduledActionType deleteScheduledActionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteScheduledAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteScheduledAction(Async)");
        }

        return pOSTDeleteScheduledActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteScheduledActionType, _callback);

    }

    /**
     * 
     * Deletes the specified scheduled action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteScheduledActionType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteScheduledAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteScheduledActionType deleteScheduledActionType) throws ApiException {
        pOSTDeleteScheduledActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteScheduledActionType);
    }

    /**
     * 
     * Deletes the specified scheduled action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteScheduledActionType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteScheduledActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteScheduledActionType deleteScheduledActionType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteScheduledActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteScheduledActionType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified scheduled action.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteScheduledActionType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteScheduledActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteScheduledActionType deleteScheduledActionType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteScheduledActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteScheduledActionType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTagsType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTagsType deleteTagsType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTagsType;

        // create path and map variables
        String localVarPath = "/#Action=DeleteTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTagsType deleteTagsType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteTags(Async)");
        }

        return pOSTDeleteTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTagsType, _callback);

    }

    /**
     * 
     * Deletes the specified tags.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTagsType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTagsType deleteTagsType) throws ApiException {
        pOSTDeleteTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTagsType);
    }

    /**
     * 
     * Deletes the specified tags.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTagsType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTagsType deleteTagsType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTagsType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified tags.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteTagsType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteTagsType deleteTagsType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTagsType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteWarmPool
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteWarmPoolType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteWarmPoolCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteWarmPoolType deleteWarmPoolType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteWarmPoolType;

        // create path and map variables
        String localVarPath = "/#Action=DeleteWarmPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteWarmPoolValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteWarmPoolType deleteWarmPoolType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteWarmPool(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteWarmPool(Async)");
        }

        return pOSTDeleteWarmPoolCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteWarmPoolType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the warm pool for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteWarmPoolType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteWarmPool(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteWarmPoolType deleteWarmPoolType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteWarmPoolWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteWarmPoolType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the warm pool for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteWarmPoolType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteWarmPoolWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteWarmPoolType deleteWarmPoolType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteWarmPoolValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteWarmPoolType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the warm pool for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteWarmPoolType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteWarmPoolAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteWarmPoolType deleteWarmPoolType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteWarmPoolValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteWarmPoolType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAccountLimits
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountLimitsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAccountLimitsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAccountLimits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAccountLimits(Async)");
        }

        return pOSTDescribeAccountLimitsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the current Amazon EC2 Auto Scaling resource quotas for your account.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAccountLimitsAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountLimitsAnswer pOSTDescribeAccountLimits(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAccountLimitsAnswer> localVarResp = pOSTDescribeAccountLimitsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the current Amazon EC2 Auto Scaling resource quotas for your account.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAccountLimitsAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountLimitsAnswer> pOSTDescribeAccountLimitsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the current Amazon EC2 Auto Scaling resource quotas for your account.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountLimitsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAccountLimitsAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAdjustmentTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAdjustmentTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAdjustmentTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAdjustmentTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAdjustmentTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAdjustmentTypes(Async)");
        }

        return pOSTDescribeAdjustmentTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the available adjustment types for step scaling and simple scaling policies.&lt;/p&gt; &lt;p&gt;The following adjustment types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExactCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PercentChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAdjustmentTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAdjustmentTypesAnswer pOSTDescribeAdjustmentTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAdjustmentTypesAnswer> localVarResp = pOSTDescribeAdjustmentTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the available adjustment types for step scaling and simple scaling policies.&lt;/p&gt; &lt;p&gt;The following adjustment types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExactCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PercentChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAdjustmentTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAdjustmentTypesAnswer> pOSTDescribeAdjustmentTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAdjustmentTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAdjustmentTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the available adjustment types for step scaling and simple scaling policies.&lt;/p&gt; &lt;p&gt;The following adjustment types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExactCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PercentChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAdjustmentTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAdjustmentTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAdjustmentTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAdjustmentTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAutoScalingGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param autoScalingGroupNamesType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAutoScalingGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, AutoScalingGroupNamesType autoScalingGroupNamesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = autoScalingGroupNamesType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAutoScalingGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAutoScalingGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, AutoScalingGroupNamesType autoScalingGroupNamesType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAutoScalingGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAutoScalingGroups(Async)");
        }

        return pOSTDescribeAutoScalingGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, autoScalingGroupNamesType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the Auto Scaling groups in the account and Region.&lt;/p&gt; &lt;p&gt;If you specify Auto Scaling group names, the output includes information for only the specified Auto Scaling groups. If you specify filters, the output includes information for only those Auto Scaling groups that meet the filter criteria. If you do not specify group names or filters, the output includes information for all Auto Scaling groups. &lt;/p&gt; &lt;p&gt;This operation also returns information about instances in Auto Scaling groups. To retrieve information about the instances in a warm pool, you must call the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param autoScalingGroupNamesType  (optional)
     * @return AutoScalingGroupsType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public AutoScalingGroupsType pOSTDescribeAutoScalingGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, AutoScalingGroupNamesType autoScalingGroupNamesType) throws ApiException {
        ApiResponse<AutoScalingGroupsType> localVarResp = pOSTDescribeAutoScalingGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, autoScalingGroupNamesType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the Auto Scaling groups in the account and Region.&lt;/p&gt; &lt;p&gt;If you specify Auto Scaling group names, the output includes information for only the specified Auto Scaling groups. If you specify filters, the output includes information for only those Auto Scaling groups that meet the filter criteria. If you do not specify group names or filters, the output includes information for all Auto Scaling groups. &lt;/p&gt; &lt;p&gt;This operation also returns information about instances in Auto Scaling groups. To retrieve information about the instances in a warm pool, you must call the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param autoScalingGroupNamesType  (optional)
     * @return ApiResponse&lt;AutoScalingGroupsType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutoScalingGroupsType> pOSTDescribeAutoScalingGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, AutoScalingGroupNamesType autoScalingGroupNamesType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAutoScalingGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, autoScalingGroupNamesType, null);
        Type localVarReturnType = new TypeToken<AutoScalingGroupsType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the Auto Scaling groups in the account and Region.&lt;/p&gt; &lt;p&gt;If you specify Auto Scaling group names, the output includes information for only the specified Auto Scaling groups. If you specify filters, the output includes information for only those Auto Scaling groups that meet the filter criteria. If you do not specify group names or filters, the output includes information for all Auto Scaling groups. &lt;/p&gt; &lt;p&gt;This operation also returns information about instances in Auto Scaling groups. To retrieve information about the instances in a warm pool, you must call the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param autoScalingGroupNamesType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAutoScalingGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, AutoScalingGroupNamesType autoScalingGroupNamesType, final ApiCallback<AutoScalingGroupsType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAutoScalingGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, autoScalingGroupNamesType, _callback);
        Type localVarReturnType = new TypeToken<AutoScalingGroupsType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAutoScalingInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAutoScalingInstancesType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAutoScalingInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAutoScalingInstancesType describeAutoScalingInstancesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAutoScalingInstancesType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAutoScalingInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAutoScalingInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAutoScalingInstancesType describeAutoScalingInstancesType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAutoScalingInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAutoScalingInstances(Async)");
        }

        return pOSTDescribeAutoScalingInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAutoScalingInstancesType, _callback);

    }

    /**
     * 
     * Gets information about the Auto Scaling instances in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAutoScalingInstancesType  (optional)
     * @return AutoScalingInstancesType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public AutoScalingInstancesType pOSTDescribeAutoScalingInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAutoScalingInstancesType describeAutoScalingInstancesType) throws ApiException {
        ApiResponse<AutoScalingInstancesType> localVarResp = pOSTDescribeAutoScalingInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAutoScalingInstancesType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the Auto Scaling instances in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAutoScalingInstancesType  (optional)
     * @return ApiResponse&lt;AutoScalingInstancesType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutoScalingInstancesType> pOSTDescribeAutoScalingInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAutoScalingInstancesType describeAutoScalingInstancesType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAutoScalingInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAutoScalingInstancesType, null);
        Type localVarReturnType = new TypeToken<AutoScalingInstancesType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the Auto Scaling instances in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAutoScalingInstancesType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAutoScalingInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeAutoScalingInstancesType describeAutoScalingInstancesType, final ApiCallback<AutoScalingInstancesType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAutoScalingInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAutoScalingInstancesType, _callback);
        Type localVarReturnType = new TypeToken<AutoScalingInstancesType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAutoScalingNotificationTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAutoScalingNotificationTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAutoScalingNotificationTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAutoScalingNotificationTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAutoScalingNotificationTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAutoScalingNotificationTypes(Async)");
        }

        return pOSTDescribeAutoScalingNotificationTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the notification types that are supported by Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAutoScalingNotificationTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAutoScalingNotificationTypesAnswer pOSTDescribeAutoScalingNotificationTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAutoScalingNotificationTypesAnswer> localVarResp = pOSTDescribeAutoScalingNotificationTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the notification types that are supported by Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAutoScalingNotificationTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAutoScalingNotificationTypesAnswer> pOSTDescribeAutoScalingNotificationTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAutoScalingNotificationTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAutoScalingNotificationTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the notification types that are supported by Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAutoScalingNotificationTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAutoScalingNotificationTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAutoScalingNotificationTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAutoScalingNotificationTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeInstanceRefreshes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeInstanceRefreshesType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeInstanceRefreshesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstanceRefreshesType describeInstanceRefreshesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeInstanceRefreshesType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeInstanceRefreshes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeInstanceRefreshesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstanceRefreshesType describeInstanceRefreshesType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeInstanceRefreshes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeInstanceRefreshes(Async)");
        }

        return pOSTDescribeInstanceRefreshesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeInstanceRefreshesType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the instance refreshes for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;To help you determine the status of an instance refresh, Amazon EC2 Auto Scaling returns information about the instance refreshes you previously initiated, including their status, start time, end time, the percentage of the instance refresh that is complete, and the number of instances remaining to update before the instance refresh is complete. If a rollback is initiated while an instance refresh is in progress, Amazon EC2 Auto Scaling also returns information about the rollback of the instance refresh.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeInstanceRefreshesType  (optional)
     * @return DescribeInstanceRefreshesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeInstanceRefreshesAnswer pOSTDescribeInstanceRefreshes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstanceRefreshesType describeInstanceRefreshesType) throws ApiException {
        ApiResponse<DescribeInstanceRefreshesAnswer> localVarResp = pOSTDescribeInstanceRefreshesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeInstanceRefreshesType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the instance refreshes for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;To help you determine the status of an instance refresh, Amazon EC2 Auto Scaling returns information about the instance refreshes you previously initiated, including their status, start time, end time, the percentage of the instance refresh that is complete, and the number of instances remaining to update before the instance refresh is complete. If a rollback is initiated while an instance refresh is in progress, Amazon EC2 Auto Scaling also returns information about the rollback of the instance refresh.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeInstanceRefreshesType  (optional)
     * @return ApiResponse&lt;DescribeInstanceRefreshesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeInstanceRefreshesAnswer> pOSTDescribeInstanceRefreshesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstanceRefreshesType describeInstanceRefreshesType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeInstanceRefreshesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeInstanceRefreshesType, null);
        Type localVarReturnType = new TypeToken<DescribeInstanceRefreshesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the instance refreshes for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;To help you determine the status of an instance refresh, Amazon EC2 Auto Scaling returns information about the instance refreshes you previously initiated, including their status, start time, end time, the percentage of the instance refresh that is complete, and the number of instances remaining to update before the instance refresh is complete. If a rollback is initiated while an instance refresh is in progress, Amazon EC2 Auto Scaling also returns information about the rollback of the instance refresh.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeInstanceRefreshesType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeInstanceRefreshesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeInstanceRefreshesType describeInstanceRefreshesType, final ApiCallback<DescribeInstanceRefreshesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeInstanceRefreshesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeInstanceRefreshesType, _callback);
        Type localVarReturnType = new TypeToken<DescribeInstanceRefreshesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLaunchConfigurations
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param launchConfigurationNamesType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLaunchConfigurationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, LaunchConfigurationNamesType launchConfigurationNamesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = launchConfigurationNamesType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLaunchConfigurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLaunchConfigurationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, LaunchConfigurationNamesType launchConfigurationNamesType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLaunchConfigurations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLaunchConfigurations(Async)");
        }

        return pOSTDescribeLaunchConfigurationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, launchConfigurationNamesType, _callback);

    }

    /**
     * 
     * Gets information about the launch configurations in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param launchConfigurationNamesType  (optional)
     * @return LaunchConfigurationsType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public LaunchConfigurationsType pOSTDescribeLaunchConfigurations(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, LaunchConfigurationNamesType launchConfigurationNamesType) throws ApiException {
        ApiResponse<LaunchConfigurationsType> localVarResp = pOSTDescribeLaunchConfigurationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, launchConfigurationNamesType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the launch configurations in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param launchConfigurationNamesType  (optional)
     * @return ApiResponse&lt;LaunchConfigurationsType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LaunchConfigurationsType> pOSTDescribeLaunchConfigurationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, LaunchConfigurationNamesType launchConfigurationNamesType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLaunchConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, launchConfigurationNamesType, null);
        Type localVarReturnType = new TypeToken<LaunchConfigurationsType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the launch configurations in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param launchConfigurationNamesType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLaunchConfigurationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, LaunchConfigurationNamesType launchConfigurationNamesType, final ApiCallback<LaunchConfigurationsType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLaunchConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, launchConfigurationNamesType, _callback);
        Type localVarReturnType = new TypeToken<LaunchConfigurationsType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLifecycleHookTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLifecycleHookTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLifecycleHookTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLifecycleHookTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLifecycleHookTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLifecycleHookTypes(Async)");
        }

        return pOSTDescribeLifecycleHookTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the available types of lifecycle hooks.&lt;/p&gt; &lt;p&gt;The following hook types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeLifecycleHookTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLifecycleHookTypesAnswer pOSTDescribeLifecycleHookTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeLifecycleHookTypesAnswer> localVarResp = pOSTDescribeLifecycleHookTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the available types of lifecycle hooks.&lt;/p&gt; &lt;p&gt;The following hook types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeLifecycleHookTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLifecycleHookTypesAnswer> pOSTDescribeLifecycleHookTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLifecycleHookTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeLifecycleHookTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the available types of lifecycle hooks.&lt;/p&gt; &lt;p&gt;The following hook types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLifecycleHookTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeLifecycleHookTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLifecycleHookTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeLifecycleHookTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLifecycleHooks
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLifecycleHooksType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLifecycleHooksCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLifecycleHooksType describeLifecycleHooksType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeLifecycleHooksType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLifecycleHooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLifecycleHooksValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLifecycleHooksType describeLifecycleHooksType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLifecycleHooks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLifecycleHooks(Async)");
        }

        return pOSTDescribeLifecycleHooksCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLifecycleHooksType, _callback);

    }

    /**
     * 
     * Gets information about the lifecycle hooks for the specified Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLifecycleHooksType  (optional)
     * @return DescribeLifecycleHooksAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLifecycleHooksAnswer pOSTDescribeLifecycleHooks(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLifecycleHooksType describeLifecycleHooksType) throws ApiException {
        ApiResponse<DescribeLifecycleHooksAnswer> localVarResp = pOSTDescribeLifecycleHooksWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLifecycleHooksType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the lifecycle hooks for the specified Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLifecycleHooksType  (optional)
     * @return ApiResponse&lt;DescribeLifecycleHooksAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLifecycleHooksAnswer> pOSTDescribeLifecycleHooksWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLifecycleHooksType describeLifecycleHooksType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLifecycleHooksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLifecycleHooksType, null);
        Type localVarReturnType = new TypeToken<DescribeLifecycleHooksAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the lifecycle hooks for the specified Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLifecycleHooksType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLifecycleHooksAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLifecycleHooksType describeLifecycleHooksType, final ApiCallback<DescribeLifecycleHooksAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLifecycleHooksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLifecycleHooksType, _callback);
        Type localVarReturnType = new TypeToken<DescribeLifecycleHooksAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLoadBalancerTargetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerTargetGroupsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerTargetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerTargetGroupsRequest describeLoadBalancerTargetGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeLoadBalancerTargetGroupsRequest;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancerTargetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLoadBalancerTargetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerTargetGroupsRequest describeLoadBalancerTargetGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancerTargetGroups(Async)");
        }

        return pOSTDescribeLoadBalancerTargetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerTargetGroupsRequest, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the Elastic Load Balancing target groups for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the target group, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a target group to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the target group. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the target group is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the target group doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Target groups also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your target group state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to describe target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerTargetGroupsRequest  (optional)
     * @return DescribeLoadBalancerTargetGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancerTargetGroupsResponse pOSTDescribeLoadBalancerTargetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerTargetGroupsRequest describeLoadBalancerTargetGroupsRequest) throws ApiException {
        ApiResponse<DescribeLoadBalancerTargetGroupsResponse> localVarResp = pOSTDescribeLoadBalancerTargetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerTargetGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the Elastic Load Balancing target groups for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the target group, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a target group to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the target group. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the target group is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the target group doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Target groups also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your target group state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to describe target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerTargetGroupsRequest  (optional)
     * @return ApiResponse&lt;DescribeLoadBalancerTargetGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancerTargetGroupsResponse> pOSTDescribeLoadBalancerTargetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerTargetGroupsRequest describeLoadBalancerTargetGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerTargetGroupsRequest, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerTargetGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the Elastic Load Balancing target groups for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the target group, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a target group to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the target group. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the target group is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the target group doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Target groups also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your target group state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to describe target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancerTargetGroupsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancerTargetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancerTargetGroupsRequest describeLoadBalancerTargetGroupsRequest, final ApiCallback<DescribeLoadBalancerTargetGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLoadBalancerTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerTargetGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancerTargetGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeLoadBalancers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancersRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancersRequest describeLoadBalancersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeLoadBalancersRequest;

        // create path and map variables
        String localVarPath = "/#Action=DescribeLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeLoadBalancersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancersRequest describeLoadBalancersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeLoadBalancers(Async)");
        }

        return pOSTDescribeLoadBalancersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancersRequest, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DescribeTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the load balancers for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation describes only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the load balancer, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a load balancer to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the load balancer. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the load balancer is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the load balancer doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Load balancers also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your load balancer state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancersRequest  (optional)
     * @return DescribeLoadBalancersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeLoadBalancersResponse pOSTDescribeLoadBalancers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancersRequest describeLoadBalancersRequest) throws ApiException {
        ApiResponse<DescribeLoadBalancersResponse> localVarResp = pOSTDescribeLoadBalancersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancersRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DescribeTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the load balancers for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation describes only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the load balancer, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a load balancer to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the load balancer. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the load balancer is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the load balancer doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Load balancers also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your load balancer state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancersRequest  (optional)
     * @return ApiResponse&lt;DescribeLoadBalancersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeLoadBalancersResponse> pOSTDescribeLoadBalancersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancersRequest describeLoadBalancersRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancersRequest, null);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DescribeTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the load balancers for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation describes only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the load balancer, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a load balancer to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the load balancer. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the load balancer is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the load balancer doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Load balancers also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your load balancer state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeLoadBalancersRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeLoadBalancersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeLoadBalancersRequest describeLoadBalancersRequest, final ApiCallback<DescribeLoadBalancersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancersRequest, _callback);
        Type localVarReturnType = new TypeToken<DescribeLoadBalancersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeMetricCollectionTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeMetricCollectionTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeMetricCollectionTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeMetricCollectionTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeMetricCollectionTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeMetricCollectionTypes(Async)");
        }

        return pOSTDescribeMetricCollectionTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeMetricCollectionTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeMetricCollectionTypesAnswer pOSTDescribeMetricCollectionTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeMetricCollectionTypesAnswer> localVarResp = pOSTDescribeMetricCollectionTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeMetricCollectionTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeMetricCollectionTypesAnswer> pOSTDescribeMetricCollectionTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeMetricCollectionTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeMetricCollectionTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeMetricCollectionTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeMetricCollectionTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeMetricCollectionTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeMetricCollectionTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeNotificationConfigurations
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeNotificationConfigurationsType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeNotificationConfigurationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeNotificationConfigurationsType describeNotificationConfigurationsType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeNotificationConfigurationsType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeNotificationConfigurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeNotificationConfigurationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeNotificationConfigurationsType describeNotificationConfigurationsType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeNotificationConfigurations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeNotificationConfigurations(Async)");
        }

        return pOSTDescribeNotificationConfigurationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeNotificationConfigurationsType, _callback);

    }

    /**
     * 
     * Gets information about the Amazon SNS notifications that are configured for one or more Auto Scaling groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeNotificationConfigurationsType  (optional)
     * @return DescribeNotificationConfigurationsAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeNotificationConfigurationsAnswer pOSTDescribeNotificationConfigurations(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeNotificationConfigurationsType describeNotificationConfigurationsType) throws ApiException {
        ApiResponse<DescribeNotificationConfigurationsAnswer> localVarResp = pOSTDescribeNotificationConfigurationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeNotificationConfigurationsType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the Amazon SNS notifications that are configured for one or more Auto Scaling groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeNotificationConfigurationsType  (optional)
     * @return ApiResponse&lt;DescribeNotificationConfigurationsAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeNotificationConfigurationsAnswer> pOSTDescribeNotificationConfigurationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeNotificationConfigurationsType describeNotificationConfigurationsType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeNotificationConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeNotificationConfigurationsType, null);
        Type localVarReturnType = new TypeToken<DescribeNotificationConfigurationsAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the Amazon SNS notifications that are configured for one or more Auto Scaling groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeNotificationConfigurationsType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeNotificationConfigurationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeNotificationConfigurationsType describeNotificationConfigurationsType, final ApiCallback<DescribeNotificationConfigurationsAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeNotificationConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeNotificationConfigurationsType, _callback);
        Type localVarReturnType = new TypeToken<DescribeNotificationConfigurationsAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribePolicies
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describePoliciesType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePoliciesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribePoliciesType describePoliciesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describePoliciesType;

        // create path and map variables
        String localVarPath = "/#Action=DescribePolicies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribePoliciesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribePoliciesType describePoliciesType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribePolicies(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribePolicies(Async)");
        }

        return pOSTDescribePoliciesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describePoliciesType, _callback);

    }

    /**
     * 
     * Gets information about the scaling policies in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describePoliciesType  (optional)
     * @return PoliciesType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public PoliciesType pOSTDescribePolicies(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribePoliciesType describePoliciesType) throws ApiException {
        ApiResponse<PoliciesType> localVarResp = pOSTDescribePoliciesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describePoliciesType);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the scaling policies in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describePoliciesType  (optional)
     * @return ApiResponse&lt;PoliciesType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PoliciesType> pOSTDescribePoliciesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribePoliciesType describePoliciesType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribePoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describePoliciesType, null);
        Type localVarReturnType = new TypeToken<PoliciesType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the scaling policies in the account and Region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describePoliciesType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePoliciesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribePoliciesType describePoliciesType, final ApiCallback<PoliciesType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribePoliciesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describePoliciesType, _callback);
        Type localVarReturnType = new TypeToken<PoliciesType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeScalingActivities
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeScalingActivitiesType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeScalingActivitiesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScalingActivitiesType describeScalingActivitiesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeScalingActivitiesType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeScalingActivities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeScalingActivitiesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScalingActivitiesType describeScalingActivitiesType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeScalingActivities(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeScalingActivities(Async)");
        }

        return pOSTDescribeScalingActivitiesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScalingActivitiesType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the scaling activities in the account and Region.&lt;/p&gt; &lt;p&gt;When scaling events occur, you see a record of the scaling activity in the scaling activities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html\&quot;&gt;Verifying a scaling activity for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the scaling event succeeds, the value of the &lt;code&gt;StatusCode&lt;/code&gt; element in the response is &lt;code&gt;Successful&lt;/code&gt;. If an attempt to launch instances failed, the &lt;code&gt;StatusCode&lt;/code&gt; value is &lt;code&gt;Failed&lt;/code&gt; or &lt;code&gt;Cancelled&lt;/code&gt; and the &lt;code&gt;StatusMessage&lt;/code&gt; element in the response indicates the cause of the failure. For help interpreting the &lt;code&gt;StatusMessage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/CHAP_Troubleshooting.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeScalingActivitiesType  (optional)
     * @return ActivitiesType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ActivitiesType pOSTDescribeScalingActivities(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScalingActivitiesType describeScalingActivitiesType) throws ApiException {
        ApiResponse<ActivitiesType> localVarResp = pOSTDescribeScalingActivitiesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScalingActivitiesType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the scaling activities in the account and Region.&lt;/p&gt; &lt;p&gt;When scaling events occur, you see a record of the scaling activity in the scaling activities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html\&quot;&gt;Verifying a scaling activity for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the scaling event succeeds, the value of the &lt;code&gt;StatusCode&lt;/code&gt; element in the response is &lt;code&gt;Successful&lt;/code&gt;. If an attempt to launch instances failed, the &lt;code&gt;StatusCode&lt;/code&gt; value is &lt;code&gt;Failed&lt;/code&gt; or &lt;code&gt;Cancelled&lt;/code&gt; and the &lt;code&gt;StatusMessage&lt;/code&gt; element in the response indicates the cause of the failure. For help interpreting the &lt;code&gt;StatusMessage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/CHAP_Troubleshooting.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeScalingActivitiesType  (optional)
     * @return ApiResponse&lt;ActivitiesType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivitiesType> pOSTDescribeScalingActivitiesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScalingActivitiesType describeScalingActivitiesType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeScalingActivitiesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScalingActivitiesType, null);
        Type localVarReturnType = new TypeToken<ActivitiesType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the scaling activities in the account and Region.&lt;/p&gt; &lt;p&gt;When scaling events occur, you see a record of the scaling activity in the scaling activities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html\&quot;&gt;Verifying a scaling activity for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the scaling event succeeds, the value of the &lt;code&gt;StatusCode&lt;/code&gt; element in the response is &lt;code&gt;Successful&lt;/code&gt;. If an attempt to launch instances failed, the &lt;code&gt;StatusCode&lt;/code&gt; value is &lt;code&gt;Failed&lt;/code&gt; or &lt;code&gt;Cancelled&lt;/code&gt; and the &lt;code&gt;StatusMessage&lt;/code&gt; element in the response indicates the cause of the failure. For help interpreting the &lt;code&gt;StatusMessage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/CHAP_Troubleshooting.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeScalingActivitiesType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeScalingActivitiesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScalingActivitiesType describeScalingActivitiesType, final ApiCallback<ActivitiesType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeScalingActivitiesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScalingActivitiesType, _callback);
        Type localVarReturnType = new TypeToken<ActivitiesType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeScalingProcessTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeScalingProcessTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeScalingProcessTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeScalingProcessTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeScalingProcessTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeScalingProcessTypes(Async)");
        }

        return pOSTDescribeScalingProcessTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Describes the scaling process types for use with the &lt;a&gt;ResumeProcesses&lt;/a&gt; and &lt;a&gt;SuspendProcesses&lt;/a&gt; APIs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ProcessesType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ProcessesType pOSTDescribeScalingProcessTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ProcessesType> localVarResp = pOSTDescribeScalingProcessTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes the scaling process types for use with the &lt;a&gt;ResumeProcesses&lt;/a&gt; and &lt;a&gt;SuspendProcesses&lt;/a&gt; APIs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ProcessesType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProcessesType> pOSTDescribeScalingProcessTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeScalingProcessTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ProcessesType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes the scaling process types for use with the &lt;a&gt;ResumeProcesses&lt;/a&gt; and &lt;a&gt;SuspendProcesses&lt;/a&gt; APIs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeScalingProcessTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ProcessesType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeScalingProcessTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ProcessesType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeScheduledActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeScheduledActionsType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeScheduledActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScheduledActionsType describeScheduledActionsType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeScheduledActionsType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeScheduledActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeScheduledActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScheduledActionsType describeScheduledActionsType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeScheduledActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeScheduledActions(Async)");
        }

        return pOSTDescribeScheduledActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScheduledActionsType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the scheduled actions that haven&#39;t run or that have not reached their end time.&lt;/p&gt; &lt;p&gt;To describe the scaling activities for scheduled actions that have already run, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeScheduledActionsType  (optional)
     * @return ScheduledActionsType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ScheduledActionsType pOSTDescribeScheduledActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScheduledActionsType describeScheduledActionsType) throws ApiException {
        ApiResponse<ScheduledActionsType> localVarResp = pOSTDescribeScheduledActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScheduledActionsType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the scheduled actions that haven&#39;t run or that have not reached their end time.&lt;/p&gt; &lt;p&gt;To describe the scaling activities for scheduled actions that have already run, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeScheduledActionsType  (optional)
     * @return ApiResponse&lt;ScheduledActionsType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScheduledActionsType> pOSTDescribeScheduledActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScheduledActionsType describeScheduledActionsType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeScheduledActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScheduledActionsType, null);
        Type localVarReturnType = new TypeToken<ScheduledActionsType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the scheduled actions that haven&#39;t run or that have not reached their end time.&lt;/p&gt; &lt;p&gt;To describe the scaling activities for scheduled actions that have already run, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeScheduledActionsType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeScheduledActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeScheduledActionsType describeScheduledActionsType, final ApiCallback<ScheduledActionsType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeScheduledActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScheduledActionsType, _callback);
        Type localVarReturnType = new TypeToken<ScheduledActionsType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeTags
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeTagsType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTagsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTagsType describeTagsType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTagsType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTagsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTagsType describeTagsType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeTags(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeTags(Async)");
        }

        return pOSTDescribeTagsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTagsType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the specified tags.&lt;/p&gt; &lt;p&gt;You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.&lt;/p&gt; &lt;p&gt;You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there&#39;s no match, no special message is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeTagsType  (optional)
     * @return TagsType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public TagsType pOSTDescribeTags(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTagsType describeTagsType) throws ApiException {
        ApiResponse<TagsType> localVarResp = pOSTDescribeTagsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTagsType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the specified tags.&lt;/p&gt; &lt;p&gt;You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.&lt;/p&gt; &lt;p&gt;You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there&#39;s no match, no special message is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeTagsType  (optional)
     * @return ApiResponse&lt;TagsType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagsType> pOSTDescribeTagsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTagsType describeTagsType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTagsType, null);
        Type localVarReturnType = new TypeToken<TagsType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the specified tags.&lt;/p&gt; &lt;p&gt;You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.&lt;/p&gt; &lt;p&gt;You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there&#39;s no match, no special message is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeTagsType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTagsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTagsType describeTagsType, final ApiCallback<TagsType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTagsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTagsType, _callback);
        Type localVarReturnType = new TypeToken<TagsType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeTerminationPolicyTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTerminationPolicyTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTerminationPolicyTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTerminationPolicyTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeTerminationPolicyTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeTerminationPolicyTypes(Async)");
        }

        return pOSTDescribeTerminationPolicyTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Describes the termination policies supported by Amazon EC2 Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTerminationPolicyTypesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTerminationPolicyTypesAnswer pOSTDescribeTerminationPolicyTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTerminationPolicyTypesAnswer> localVarResp = pOSTDescribeTerminationPolicyTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Describes the termination policies supported by Amazon EC2 Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTerminationPolicyTypesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTerminationPolicyTypesAnswer> pOSTDescribeTerminationPolicyTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTerminationPolicyTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTerminationPolicyTypesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Describes the termination policies supported by Amazon EC2 Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTerminationPolicyTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTerminationPolicyTypesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTerminationPolicyTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTerminationPolicyTypesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeTrafficSources
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeTrafficSourcesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTrafficSourcesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTrafficSourcesRequest describeTrafficSourcesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTrafficSourcesRequest;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTrafficSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTrafficSourcesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTrafficSourcesRequest describeTrafficSourcesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeTrafficSources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeTrafficSources(Async)");
        }

        return pOSTDescribeTrafficSourcesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTrafficSourcesRequest, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic sources for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can optionally provide a traffic source type. If you provide a traffic source type, then the results only include that traffic source type.&lt;/p&gt; &lt;p&gt;If you do not provide a traffic source type, then the results include all the traffic sources for the specified Auto Scaling group. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeTrafficSourcesRequest  (optional)
     * @return DescribeTrafficSourcesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTrafficSourcesResponse pOSTDescribeTrafficSources(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTrafficSourcesRequest describeTrafficSourcesRequest) throws ApiException {
        ApiResponse<DescribeTrafficSourcesResponse> localVarResp = pOSTDescribeTrafficSourcesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTrafficSourcesRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about the traffic sources for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can optionally provide a traffic source type. If you provide a traffic source type, then the results only include that traffic source type.&lt;/p&gt; &lt;p&gt;If you do not provide a traffic source type, then the results include all the traffic sources for the specified Auto Scaling group. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeTrafficSourcesRequest  (optional)
     * @return ApiResponse&lt;DescribeTrafficSourcesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTrafficSourcesResponse> pOSTDescribeTrafficSourcesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTrafficSourcesRequest describeTrafficSourcesRequest) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTrafficSourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTrafficSourcesRequest, null);
        Type localVarReturnType = new TypeToken<DescribeTrafficSourcesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about the traffic sources for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can optionally provide a traffic source type. If you provide a traffic source type, then the results only include that traffic source type.&lt;/p&gt; &lt;p&gt;If you do not provide a traffic source type, then the results include all the traffic sources for the specified Auto Scaling group. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeTrafficSourcesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidNextToken </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTrafficSourcesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeTrafficSourcesRequest describeTrafficSourcesRequest, final ApiCallback<DescribeTrafficSourcesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTrafficSourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTrafficSourcesRequest, _callback);
        Type localVarReturnType = new TypeToken<DescribeTrafficSourcesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeWarmPool
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeWarmPoolType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeWarmPoolCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeWarmPoolType describeWarmPoolType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeWarmPoolType;

        // create path and map variables
        String localVarPath = "/#Action=DescribeWarmPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeWarmPoolValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeWarmPoolType describeWarmPoolType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeWarmPool(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeWarmPool(Async)");
        }

        return pOSTDescribeWarmPoolCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeWarmPoolType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets information about a warm pool and its instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeWarmPoolType  (optional)
     * @return DescribeWarmPoolAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DescribeWarmPoolAnswer pOSTDescribeWarmPool(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeWarmPoolType describeWarmPoolType) throws ApiException {
        ApiResponse<DescribeWarmPoolAnswer> localVarResp = pOSTDescribeWarmPoolWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeWarmPoolType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets information about a warm pool and its instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeWarmPoolType  (optional)
     * @return ApiResponse&lt;DescribeWarmPoolAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeWarmPoolAnswer> pOSTDescribeWarmPoolWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeWarmPoolType describeWarmPoolType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeWarmPoolValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeWarmPoolType, null);
        Type localVarReturnType = new TypeToken<DescribeWarmPoolAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets information about a warm pool and its instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeWarmPoolType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidNextToken </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeWarmPoolAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String nextToken, DescribeWarmPoolType describeWarmPoolType, final ApiCallback<DescribeWarmPoolAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeWarmPoolValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeWarmPoolType, _callback);
        Type localVarReturnType = new TypeToken<DescribeWarmPoolAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDetachInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachInstancesQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachInstancesQuery detachInstancesQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detachInstancesQuery;

        // create path and map variables
        String localVarPath = "/#Action=DetachInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDetachInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachInstancesQuery detachInstancesQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDetachInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDetachInstances(Async)");
        }

        return pOSTDetachInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachInstancesQuery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes one or more instances from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;After the instances are detached, you can manage them independent of the Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html\&quot;&gt;Detach EC2 instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachInstancesQuery  (optional)
     * @return DetachInstancesAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public DetachInstancesAnswer pOSTDetachInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachInstancesQuery detachInstancesQuery) throws ApiException {
        ApiResponse<DetachInstancesAnswer> localVarResp = pOSTDetachInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachInstancesQuery);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes one or more instances from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;After the instances are detached, you can manage them independent of the Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html\&quot;&gt;Detach EC2 instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachInstancesQuery  (optional)
     * @return ApiResponse&lt;DetachInstancesAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetachInstancesAnswer> pOSTDetachInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachInstancesQuery detachInstancesQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTDetachInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachInstancesQuery, null);
        Type localVarReturnType = new TypeToken<DetachInstancesAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes one or more instances from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;After the instances are detached, you can manage them independent of the Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html\&quot;&gt;Detach EC2 instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachInstancesQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachInstancesQuery detachInstancesQuery, final ApiCallback<DetachInstancesAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDetachInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachInstancesQuery, _callback);
        Type localVarReturnType = new TypeToken<DetachInstancesAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDetachLoadBalancerTargetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancerTargetGroupsType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachLoadBalancerTargetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerTargetGroupsType detachLoadBalancerTargetGroupsType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detachLoadBalancerTargetGroupsType;

        // create path and map variables
        String localVarPath = "/#Action=DetachLoadBalancerTargetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDetachLoadBalancerTargetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerTargetGroupsType detachLoadBalancerTargetGroupsType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDetachLoadBalancerTargetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDetachLoadBalancerTargetGroups(Async)");
        }

        return pOSTDetachLoadBalancerTargetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancerTargetGroupsType, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more target groups from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a target group, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API call. The instances remain running.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to detach target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancerTargetGroupsType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDetachLoadBalancerTargetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerTargetGroupsType detachLoadBalancerTargetGroupsType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDetachLoadBalancerTargetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancerTargetGroupsType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more target groups from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a target group, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API call. The instances remain running.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to detach target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancerTargetGroupsType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDetachLoadBalancerTargetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerTargetGroupsType detachLoadBalancerTargetGroupsType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDetachLoadBalancerTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancerTargetGroupsType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more target groups from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a target group, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API call. The instances remain running.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to detach target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancerTargetGroupsType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachLoadBalancerTargetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancerTargetGroupsType detachLoadBalancerTargetGroupsType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDetachLoadBalancerTargetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancerTargetGroupsType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDetachLoadBalancers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancersType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachLoadBalancersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancersType detachLoadBalancersType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detachLoadBalancersType;

        // create path and map variables
        String localVarPath = "/#Action=DetachLoadBalancers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDetachLoadBalancersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancersType detachLoadBalancersType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDetachLoadBalancers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDetachLoadBalancers(Async)");
        }

        return pOSTDetachLoadBalancersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancersType, _callback);

    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more Classic Load Balancers from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation detaches only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;When you detach a load balancer, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API call. The instances remain running.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancersType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDetachLoadBalancers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancersType detachLoadBalancersType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDetachLoadBalancersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancersType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more Classic Load Balancers from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation detaches only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;When you detach a load balancer, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API call. The instances remain running.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancersType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDetachLoadBalancersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancersType detachLoadBalancersType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDetachLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancersType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more Classic Load Balancers from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation detaches only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;When you detach a load balancer, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API call. The instances remain running.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachLoadBalancersType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachLoadBalancersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachLoadBalancersType detachLoadBalancersType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDetachLoadBalancersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancersType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDetachTrafficSources
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachTrafficSourcesType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachTrafficSourcesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachTrafficSourcesType detachTrafficSourcesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detachTrafficSourcesType;

        // create path and map variables
        String localVarPath = "/#Action=DetachTrafficSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDetachTrafficSourcesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachTrafficSourcesType detachTrafficSourcesType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDetachTrafficSources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDetachTrafficSources(Async)");
        }

        return pOSTDetachTrafficSourcesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachTrafficSourcesType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detaches one or more traffic sources from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a traffic source, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the traffic source using the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API call. The instances continue to run.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachTrafficSourcesType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDetachTrafficSources(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachTrafficSourcesType detachTrafficSourcesType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDetachTrafficSourcesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachTrafficSourcesType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detaches one or more traffic sources from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a traffic source, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the traffic source using the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API call. The instances continue to run.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachTrafficSourcesType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDetachTrafficSourcesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachTrafficSourcesType detachTrafficSourcesType) throws ApiException {
        okhttp3.Call localVarCall = pOSTDetachTrafficSourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachTrafficSourcesType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detaches one or more traffic sources from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a traffic source, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the traffic source using the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API call. The instances continue to run.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detachTrafficSourcesType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetachTrafficSourcesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetachTrafficSourcesType detachTrafficSourcesType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDetachTrafficSourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachTrafficSourcesType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDisableMetricsCollection
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableMetricsCollectionQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisableMetricsCollectionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableMetricsCollectionQuery disableMetricsCollectionQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableMetricsCollectionQuery;

        // create path and map variables
        String localVarPath = "/#Action=DisableMetricsCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDisableMetricsCollectionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableMetricsCollectionQuery disableMetricsCollectionQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDisableMetricsCollection(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDisableMetricsCollection(Async)");
        }

        return pOSTDisableMetricsCollectionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableMetricsCollectionQuery, _callback);

    }

    /**
     * 
     * Disables group metrics collection for the specified Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableMetricsCollectionQuery  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDisableMetricsCollection(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableMetricsCollectionQuery disableMetricsCollectionQuery) throws ApiException {
        pOSTDisableMetricsCollectionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableMetricsCollectionQuery);
    }

    /**
     * 
     * Disables group metrics collection for the specified Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableMetricsCollectionQuery  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDisableMetricsCollectionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableMetricsCollectionQuery disableMetricsCollectionQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTDisableMetricsCollectionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableMetricsCollectionQuery, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disables group metrics collection for the specified Auto Scaling group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disableMetricsCollectionQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisableMetricsCollectionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisableMetricsCollectionQuery disableMetricsCollectionQuery, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDisableMetricsCollectionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableMetricsCollectionQuery, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTEnableMetricsCollection
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableMetricsCollectionQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnableMetricsCollectionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableMetricsCollectionQuery enableMetricsCollectionQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableMetricsCollectionQuery;

        // create path and map variables
        String localVarPath = "/#Action=EnableMetricsCollection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTEnableMetricsCollectionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableMetricsCollectionQuery enableMetricsCollectionQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTEnableMetricsCollection(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTEnableMetricsCollection(Async)");
        }

        return pOSTEnableMetricsCollectionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableMetricsCollectionQuery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Enables group metrics collection for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use these metrics to track changes in an Auto Scaling group and to set alarms on threshold values. You can view group metrics using the Amazon EC2 Auto Scaling console or the CloudWatch console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html\&quot;&gt;Monitor CloudWatch metrics for your Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableMetricsCollectionQuery  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTEnableMetricsCollection(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableMetricsCollectionQuery enableMetricsCollectionQuery) throws ApiException {
        pOSTEnableMetricsCollectionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableMetricsCollectionQuery);
    }

    /**
     * 
     * &lt;p&gt;Enables group metrics collection for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use these metrics to track changes in an Auto Scaling group and to set alarms on threshold values. You can view group metrics using the Amazon EC2 Auto Scaling console or the CloudWatch console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html\&quot;&gt;Monitor CloudWatch metrics for your Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableMetricsCollectionQuery  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTEnableMetricsCollectionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableMetricsCollectionQuery enableMetricsCollectionQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTEnableMetricsCollectionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableMetricsCollectionQuery, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Enables group metrics collection for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use these metrics to track changes in an Auto Scaling group and to set alarms on threshold values. You can view group metrics using the Amazon EC2 Auto Scaling console or the CloudWatch console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html\&quot;&gt;Monitor CloudWatch metrics for your Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enableMetricsCollectionQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnableMetricsCollectionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnableMetricsCollectionQuery enableMetricsCollectionQuery, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTEnableMetricsCollectionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableMetricsCollectionQuery, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTEnterStandby
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enterStandbyQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnterStandbyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnterStandbyQuery enterStandbyQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enterStandbyQuery;

        // create path and map variables
        String localVarPath = "/#Action=EnterStandby";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTEnterStandbyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnterStandbyQuery enterStandbyQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTEnterStandby(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTEnterStandby(Async)");
        }

        return pOSTEnterStandbyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enterStandbyQuery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Moves the specified instances into the standby state.&lt;/p&gt; &lt;p&gt;If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.&lt;/p&gt; &lt;p&gt;If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enterStandbyQuery  (optional)
     * @return EnterStandbyAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public EnterStandbyAnswer pOSTEnterStandby(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnterStandbyQuery enterStandbyQuery) throws ApiException {
        ApiResponse<EnterStandbyAnswer> localVarResp = pOSTEnterStandbyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enterStandbyQuery);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Moves the specified instances into the standby state.&lt;/p&gt; &lt;p&gt;If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.&lt;/p&gt; &lt;p&gt;If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enterStandbyQuery  (optional)
     * @return ApiResponse&lt;EnterStandbyAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnterStandbyAnswer> pOSTEnterStandbyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnterStandbyQuery enterStandbyQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTEnterStandbyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enterStandbyQuery, null);
        Type localVarReturnType = new TypeToken<EnterStandbyAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Moves the specified instances into the standby state.&lt;/p&gt; &lt;p&gt;If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.&lt;/p&gt; &lt;p&gt;If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param enterStandbyQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEnterStandbyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EnterStandbyQuery enterStandbyQuery, final ApiCallback<EnterStandbyAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTEnterStandbyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enterStandbyQuery, _callback);
        Type localVarReturnType = new TypeToken<EnterStandbyAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTExecutePolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param executePolicyType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTExecutePolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecutePolicyType executePolicyType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = executePolicyType;

        // create path and map variables
        String localVarPath = "/#Action=ExecutePolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTExecutePolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecutePolicyType executePolicyType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTExecutePolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTExecutePolicy(Async)");
        }

        return pOSTExecutePolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executePolicyType, _callback);

    }

    /**
     * 
     * Executes the specified policy. This can be useful for testing the design of your scaling policy.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param executePolicyType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTExecutePolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecutePolicyType executePolicyType) throws ApiException {
        pOSTExecutePolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executePolicyType);
    }

    /**
     * 
     * Executes the specified policy. This can be useful for testing the design of your scaling policy.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param executePolicyType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTExecutePolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecutePolicyType executePolicyType) throws ApiException {
        okhttp3.Call localVarCall = pOSTExecutePolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executePolicyType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Executes the specified policy. This can be useful for testing the design of your scaling policy.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param executePolicyType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTExecutePolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecutePolicyType executePolicyType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTExecutePolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executePolicyType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTExitStandby
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param exitStandbyQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTExitStandbyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExitStandbyQuery exitStandbyQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exitStandbyQuery;

        // create path and map variables
        String localVarPath = "/#Action=ExitStandby";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTExitStandbyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExitStandbyQuery exitStandbyQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTExitStandby(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTExitStandby(Async)");
        }

        return pOSTExitStandbyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, exitStandbyQuery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Moves the specified instances out of the standby state.&lt;/p&gt; &lt;p&gt;After you put the instances back in service, the desired capacity is incremented.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param exitStandbyQuery  (optional)
     * @return ExitStandbyAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ExitStandbyAnswer pOSTExitStandby(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExitStandbyQuery exitStandbyQuery) throws ApiException {
        ApiResponse<ExitStandbyAnswer> localVarResp = pOSTExitStandbyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, exitStandbyQuery);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Moves the specified instances out of the standby state.&lt;/p&gt; &lt;p&gt;After you put the instances back in service, the desired capacity is incremented.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param exitStandbyQuery  (optional)
     * @return ApiResponse&lt;ExitStandbyAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExitStandbyAnswer> pOSTExitStandbyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExitStandbyQuery exitStandbyQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTExitStandbyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, exitStandbyQuery, null);
        Type localVarReturnType = new TypeToken<ExitStandbyAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Moves the specified instances out of the standby state.&lt;/p&gt; &lt;p&gt;After you put the instances back in service, the desired capacity is incremented.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param exitStandbyQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTExitStandbyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExitStandbyQuery exitStandbyQuery, final ApiCallback<ExitStandbyAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTExitStandbyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, exitStandbyQuery, _callback);
        Type localVarReturnType = new TypeToken<ExitStandbyAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetPredictiveScalingForecast
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getPredictiveScalingForecastType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetPredictiveScalingForecastCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPredictiveScalingForecastType getPredictiveScalingForecastType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPredictiveScalingForecastType;

        // create path and map variables
        String localVarPath = "/#Action=GetPredictiveScalingForecast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetPredictiveScalingForecastValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPredictiveScalingForecastType getPredictiveScalingForecastType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetPredictiveScalingForecast(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetPredictiveScalingForecast(Async)");
        }

        return pOSTGetPredictiveScalingForecastCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPredictiveScalingForecastType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the forecast data for a predictive scaling policy.&lt;/p&gt; &lt;p&gt;Load forecasts are predictions of the hourly load values using historical load data from CloudWatch and an analysis of historical trends. Capacity forecasts are represented as predicted values for the minimum capacity that is needed on an hourly basis, based on the hourly load forecast.&lt;/p&gt; &lt;p&gt;A minimum of 24 hours of data is required to create the initial forecasts. However, having a full 14 days of historical data results in more accurate forecasts.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getPredictiveScalingForecastType  (optional)
     * @return GetPredictiveScalingForecastAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public GetPredictiveScalingForecastAnswer pOSTGetPredictiveScalingForecast(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPredictiveScalingForecastType getPredictiveScalingForecastType) throws ApiException {
        ApiResponse<GetPredictiveScalingForecastAnswer> localVarResp = pOSTGetPredictiveScalingForecastWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPredictiveScalingForecastType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the forecast data for a predictive scaling policy.&lt;/p&gt; &lt;p&gt;Load forecasts are predictions of the hourly load values using historical load data from CloudWatch and an analysis of historical trends. Capacity forecasts are represented as predicted values for the minimum capacity that is needed on an hourly basis, based on the hourly load forecast.&lt;/p&gt; &lt;p&gt;A minimum of 24 hours of data is required to create the initial forecasts. However, having a full 14 days of historical data results in more accurate forecasts.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getPredictiveScalingForecastType  (optional)
     * @return ApiResponse&lt;GetPredictiveScalingForecastAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPredictiveScalingForecastAnswer> pOSTGetPredictiveScalingForecastWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPredictiveScalingForecastType getPredictiveScalingForecastType) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetPredictiveScalingForecastValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPredictiveScalingForecastType, null);
        Type localVarReturnType = new TypeToken<GetPredictiveScalingForecastAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the forecast data for a predictive scaling policy.&lt;/p&gt; &lt;p&gt;Load forecasts are predictions of the hourly load values using historical load data from CloudWatch and an analysis of historical trends. Capacity forecasts are represented as predicted values for the minimum capacity that is needed on an hourly basis, based on the hourly load forecast.&lt;/p&gt; &lt;p&gt;A minimum of 24 hours of data is required to create the initial forecasts. However, having a full 14 days of historical data results in more accurate forecasts.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getPredictiveScalingForecastType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetPredictiveScalingForecastAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetPredictiveScalingForecastType getPredictiveScalingForecastType, final ApiCallback<GetPredictiveScalingForecastAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetPredictiveScalingForecastValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPredictiveScalingForecastType, _callback);
        Type localVarReturnType = new TypeToken<GetPredictiveScalingForecastAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutLifecycleHook
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putLifecycleHookType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutLifecycleHookCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutLifecycleHookType putLifecycleHookType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putLifecycleHookType;

        // create path and map variables
        String localVarPath = "/#Action=PutLifecycleHook";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutLifecycleHookValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutLifecycleHookType putLifecycleHookType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutLifecycleHook(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutLifecycleHook(Async)");
        }

        return pOSTPutLifecycleHookCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putLifecycleHookType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a lifecycle hook for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;Lifecycle hooks let you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state using the &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.&lt;/p&gt; &lt;p&gt;You can view the lifecycle hooks for an Auto Scaling group using the &lt;a&gt;DescribeLifecycleHooks&lt;/a&gt; API call. If you are no longer using a lifecycle hook, you can delete it by calling the &lt;a&gt;DeleteLifecycleHook&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putLifecycleHookType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTPutLifecycleHook(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutLifecycleHookType putLifecycleHookType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTPutLifecycleHookWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putLifecycleHookType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a lifecycle hook for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;Lifecycle hooks let you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state using the &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.&lt;/p&gt; &lt;p&gt;You can view the lifecycle hooks for an Auto Scaling group using the &lt;a&gt;DescribeLifecycleHooks&lt;/a&gt; API call. If you are no longer using a lifecycle hook, you can delete it by calling the &lt;a&gt;DeleteLifecycleHook&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putLifecycleHookType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTPutLifecycleHookWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutLifecycleHookType putLifecycleHookType) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutLifecycleHookValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putLifecycleHookType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a lifecycle hook for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;Lifecycle hooks let you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state using the &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.&lt;/p&gt; &lt;p&gt;You can view the lifecycle hooks for an Auto Scaling group using the &lt;a&gt;DescribeLifecycleHooks&lt;/a&gt; API call. If you are no longer using a lifecycle hook, you can delete it by calling the &lt;a&gt;DeleteLifecycleHook&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putLifecycleHookType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutLifecycleHookAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutLifecycleHookType putLifecycleHookType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutLifecycleHookValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putLifecycleHookType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutNotificationConfiguration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putNotificationConfigurationType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutNotificationConfigurationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutNotificationConfigurationType putNotificationConfigurationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putNotificationConfigurationType;

        // create path and map variables
        String localVarPath = "/#Action=PutNotificationConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutNotificationConfigurationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutNotificationConfigurationType putNotificationConfigurationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutNotificationConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutNotificationConfiguration(Async)");
        }

        return pOSTPutNotificationConfigurationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putNotificationConfigurationType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.&lt;/p&gt; &lt;p&gt;This configuration overwrites any existing configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html\&quot;&gt;Getting Amazon SNS notifications when your Auto Scaling group scales&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of SNS topics, which is 10 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putNotificationConfigurationType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTPutNotificationConfiguration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutNotificationConfigurationType putNotificationConfigurationType) throws ApiException {
        pOSTPutNotificationConfigurationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putNotificationConfigurationType);
    }

    /**
     * 
     * &lt;p&gt;Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.&lt;/p&gt; &lt;p&gt;This configuration overwrites any existing configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html\&quot;&gt;Getting Amazon SNS notifications when your Auto Scaling group scales&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of SNS topics, which is 10 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putNotificationConfigurationType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTPutNotificationConfigurationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutNotificationConfigurationType putNotificationConfigurationType) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutNotificationConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putNotificationConfigurationType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.&lt;/p&gt; &lt;p&gt;This configuration overwrites any existing configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html\&quot;&gt;Getting Amazon SNS notifications when your Auto Scaling group scales&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of SNS topics, which is 10 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putNotificationConfigurationType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutNotificationConfigurationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutNotificationConfigurationType putNotificationConfigurationType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutNotificationConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putNotificationConfigurationType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutScalingPolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putScalingPolicyType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutScalingPolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScalingPolicyType putScalingPolicyType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putScalingPolicyType;

        // create path and map variables
        String localVarPath = "/#Action=PutScalingPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutScalingPolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScalingPolicyType putScalingPolicyType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutScalingPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutScalingPolicy(Async)");
        }

        return pOSTPutScalingPolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScalingPolicyType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a scaling policy for an Auto Scaling group. Scaling policies are used to scale an Auto Scaling group based on configurable metrics. If no policies are defined, the dynamic scaling and predictive scaling features are not used. &lt;/p&gt; &lt;p&gt;For more information about using dynamic scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html\&quot;&gt;Target tracking scaling policies&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html\&quot;&gt;Step and simple scaling policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about using predictive scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scaling policies for an Auto Scaling group using the &lt;a&gt;DescribePolicies&lt;/a&gt; API call. If you are no longer using a scaling policy, you can delete it by calling the &lt;a&gt;DeletePolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putScalingPolicyType  (optional)
     * @return PolicyARNType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public PolicyARNType pOSTPutScalingPolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScalingPolicyType putScalingPolicyType) throws ApiException {
        ApiResponse<PolicyARNType> localVarResp = pOSTPutScalingPolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScalingPolicyType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a scaling policy for an Auto Scaling group. Scaling policies are used to scale an Auto Scaling group based on configurable metrics. If no policies are defined, the dynamic scaling and predictive scaling features are not used. &lt;/p&gt; &lt;p&gt;For more information about using dynamic scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html\&quot;&gt;Target tracking scaling policies&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html\&quot;&gt;Step and simple scaling policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about using predictive scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scaling policies for an Auto Scaling group using the &lt;a&gt;DescribePolicies&lt;/a&gt; API call. If you are no longer using a scaling policy, you can delete it by calling the &lt;a&gt;DeletePolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putScalingPolicyType  (optional)
     * @return ApiResponse&lt;PolicyARNType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyARNType> pOSTPutScalingPolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScalingPolicyType putScalingPolicyType) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutScalingPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScalingPolicyType, null);
        Type localVarReturnType = new TypeToken<PolicyARNType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a scaling policy for an Auto Scaling group. Scaling policies are used to scale an Auto Scaling group based on configurable metrics. If no policies are defined, the dynamic scaling and predictive scaling features are not used. &lt;/p&gt; &lt;p&gt;For more information about using dynamic scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html\&quot;&gt;Target tracking scaling policies&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html\&quot;&gt;Step and simple scaling policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about using predictive scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scaling policies for an Auto Scaling group using the &lt;a&gt;DescribePolicies&lt;/a&gt; API call. If you are no longer using a scaling policy, you can delete it by calling the &lt;a&gt;DeletePolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putScalingPolicyType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutScalingPolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScalingPolicyType putScalingPolicyType, final ApiCallback<PolicyARNType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutScalingPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScalingPolicyType, _callback);
        Type localVarReturnType = new TypeToken<PolicyARNType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutScheduledUpdateGroupAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putScheduledUpdateGroupActionType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutScheduledUpdateGroupActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScheduledUpdateGroupActionType putScheduledUpdateGroupActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putScheduledUpdateGroupActionType;

        // create path and map variables
        String localVarPath = "/#Action=PutScheduledUpdateGroupAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutScheduledUpdateGroupActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScheduledUpdateGroupActionType putScheduledUpdateGroupActionType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutScheduledUpdateGroupAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutScheduledUpdateGroupAction(Async)");
        }

        return pOSTPutScheduledUpdateGroupActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScheduledUpdateGroupActionType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a scheduled scaling action for an Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html\&quot;&gt;Scheduled scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scheduled actions for an Auto Scaling group using the &lt;a&gt;DescribeScheduledActions&lt;/a&gt; API call. If you are no longer using a scheduled action, you can delete it by calling the &lt;a&gt;DeleteScheduledAction&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putScheduledUpdateGroupActionType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTPutScheduledUpdateGroupAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScheduledUpdateGroupActionType putScheduledUpdateGroupActionType) throws ApiException {
        pOSTPutScheduledUpdateGroupActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScheduledUpdateGroupActionType);
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a scheduled scaling action for an Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html\&quot;&gt;Scheduled scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scheduled actions for an Auto Scaling group using the &lt;a&gt;DescribeScheduledActions&lt;/a&gt; API call. If you are no longer using a scheduled action, you can delete it by calling the &lt;a&gt;DeleteScheduledAction&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putScheduledUpdateGroupActionType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTPutScheduledUpdateGroupActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScheduledUpdateGroupActionType putScheduledUpdateGroupActionType) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutScheduledUpdateGroupActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScheduledUpdateGroupActionType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a scheduled scaling action for an Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html\&quot;&gt;Scheduled scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scheduled actions for an Auto Scaling group using the &lt;a&gt;DescribeScheduledActions&lt;/a&gt; API call. If you are no longer using a scheduled action, you can delete it by calling the &lt;a&gt;DeleteScheduledAction&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putScheduledUpdateGroupActionType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutScheduledUpdateGroupActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutScheduledUpdateGroupActionType putScheduledUpdateGroupActionType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutScheduledUpdateGroupActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScheduledUpdateGroupActionType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPutWarmPool
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putWarmPoolType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutWarmPoolCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutWarmPoolType putWarmPoolType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putWarmPoolType;

        // create path and map variables
        String localVarPath = "/#Action=PutWarmPool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPutWarmPoolValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutWarmPoolType putWarmPoolType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPutWarmPool(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPutWarmPool(Async)");
        }

        return pOSTPutWarmPoolCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putWarmPoolType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration that requests Spot Instances.&lt;/p&gt; &lt;p&gt;You can view the instances in the warm pool using the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API call. If you are no longer using a warm pool, you can delete it by calling the &lt;a&gt;DeleteWarmPool&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putWarmPoolType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTPutWarmPool(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutWarmPoolType putWarmPoolType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTPutWarmPoolWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putWarmPoolType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration that requests Spot Instances.&lt;/p&gt; &lt;p&gt;You can view the instances in the warm pool using the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API call. If you are no longer using a warm pool, you can delete it by calling the &lt;a&gt;DeleteWarmPool&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putWarmPoolType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTPutWarmPoolWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutWarmPoolType putWarmPoolType) throws ApiException {
        okhttp3.Call localVarCall = pOSTPutWarmPoolValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putWarmPoolType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration that requests Spot Instances.&lt;/p&gt; &lt;p&gt;You can view the instances in the warm pool using the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API call. If you are no longer using a warm pool, you can delete it by calling the &lt;a&gt;DeleteWarmPool&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param putWarmPoolType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPutWarmPoolAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PutWarmPoolType putWarmPoolType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPutWarmPoolValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putWarmPoolType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRecordLifecycleActionHeartbeat
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param recordLifecycleActionHeartbeatType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRecordLifecycleActionHeartbeatCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordLifecycleActionHeartbeatType recordLifecycleActionHeartbeatType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recordLifecycleActionHeartbeatType;

        // create path and map variables
        String localVarPath = "/#Action=RecordLifecycleActionHeartbeat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRecordLifecycleActionHeartbeatValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordLifecycleActionHeartbeatType recordLifecycleActionHeartbeatType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRecordLifecycleActionHeartbeat(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRecordLifecycleActionHeartbeat(Async)");
        }

        return pOSTRecordLifecycleActionHeartbeatCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recordLifecycleActionHeartbeatType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the &lt;a&gt;PutLifecycleHook&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param recordLifecycleActionHeartbeatType  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTRecordLifecycleActionHeartbeat(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordLifecycleActionHeartbeatType recordLifecycleActionHeartbeatType) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTRecordLifecycleActionHeartbeatWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recordLifecycleActionHeartbeatType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the &lt;a&gt;PutLifecycleHook&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param recordLifecycleActionHeartbeatType  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTRecordLifecycleActionHeartbeatWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordLifecycleActionHeartbeatType recordLifecycleActionHeartbeatType) throws ApiException {
        okhttp3.Call localVarCall = pOSTRecordLifecycleActionHeartbeatValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recordLifecycleActionHeartbeatType, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the &lt;a&gt;PutLifecycleHook&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param recordLifecycleActionHeartbeatType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRecordLifecycleActionHeartbeatAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordLifecycleActionHeartbeatType recordLifecycleActionHeartbeatType, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRecordLifecycleActionHeartbeatValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recordLifecycleActionHeartbeatType, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTResumeProcesses
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcessQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResumeProcessesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scalingProcessQuery;

        // create path and map variables
        String localVarPath = "/#Action=ResumeProcesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTResumeProcessesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTResumeProcesses(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTResumeProcesses(Async)");
        }

        return pOSTResumeProcessesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcessQuery  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTResumeProcesses(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery) throws ApiException {
        pOSTResumeProcessesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery);
    }

    /**
     * 
     * &lt;p&gt;Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcessQuery  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTResumeProcessesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTResumeProcessesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcessQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResumeProcessesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTResumeProcessesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRollbackInstanceRefresh
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rollbackInstanceRefreshType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IrreversibleInstanceRefreshFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRollbackInstanceRefreshCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackInstanceRefreshType rollbackInstanceRefreshType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbackInstanceRefreshType;

        // create path and map variables
        String localVarPath = "/#Action=RollbackInstanceRefresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRollbackInstanceRefreshValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackInstanceRefreshType rollbackInstanceRefreshType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRollbackInstanceRefresh(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRollbackInstanceRefresh(Async)");
        }

        return pOSTRollbackInstanceRefreshCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rollbackInstanceRefreshType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels an instance refresh that is in progress and rolls back any changes that it made. Amazon EC2 Auto Scaling replaces any instances that were replaced during the instance refresh. This restores your Auto Scaling group to the configuration that it was using before the start of the instance refresh. &lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;A rollback is not supported in the following situations: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There is no desired configuration specified for the instance refresh.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the &lt;code&gt;ImageId&lt;/code&gt; property.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group uses the launch template&#39;s &lt;code&gt;$Latest&lt;/code&gt; or &lt;code&gt;$Default&lt;/code&gt; version.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon EC2 Auto Scaling immediately begins replacing instances. You can check the status of this operation through the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API operation. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rollbackInstanceRefreshType  (optional)
     * @return RollbackInstanceRefreshAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IrreversibleInstanceRefreshFault </td><td>  -  </td></tr>
     </table>
     */
    public RollbackInstanceRefreshAnswer pOSTRollbackInstanceRefresh(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackInstanceRefreshType rollbackInstanceRefreshType) throws ApiException {
        ApiResponse<RollbackInstanceRefreshAnswer> localVarResp = pOSTRollbackInstanceRefreshWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rollbackInstanceRefreshType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels an instance refresh that is in progress and rolls back any changes that it made. Amazon EC2 Auto Scaling replaces any instances that were replaced during the instance refresh. This restores your Auto Scaling group to the configuration that it was using before the start of the instance refresh. &lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;A rollback is not supported in the following situations: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There is no desired configuration specified for the instance refresh.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the &lt;code&gt;ImageId&lt;/code&gt; property.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group uses the launch template&#39;s &lt;code&gt;$Latest&lt;/code&gt; or &lt;code&gt;$Default&lt;/code&gt; version.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon EC2 Auto Scaling immediately begins replacing instances. You can check the status of this operation through the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API operation. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rollbackInstanceRefreshType  (optional)
     * @return ApiResponse&lt;RollbackInstanceRefreshAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IrreversibleInstanceRefreshFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RollbackInstanceRefreshAnswer> pOSTRollbackInstanceRefreshWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackInstanceRefreshType rollbackInstanceRefreshType) throws ApiException {
        okhttp3.Call localVarCall = pOSTRollbackInstanceRefreshValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rollbackInstanceRefreshType, null);
        Type localVarReturnType = new TypeToken<RollbackInstanceRefreshAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels an instance refresh that is in progress and rolls back any changes that it made. Amazon EC2 Auto Scaling replaces any instances that were replaced during the instance refresh. This restores your Auto Scaling group to the configuration that it was using before the start of the instance refresh. &lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;A rollback is not supported in the following situations: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There is no desired configuration specified for the instance refresh.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the &lt;code&gt;ImageId&lt;/code&gt; property.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group uses the launch template&#39;s &lt;code&gt;$Latest&lt;/code&gt; or &lt;code&gt;$Default&lt;/code&gt; version.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon EC2 Auto Scaling immediately begins replacing instances. You can check the status of this operation through the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API operation. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rollbackInstanceRefreshType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ActiveInstanceRefreshNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> IrreversibleInstanceRefreshFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRollbackInstanceRefreshAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackInstanceRefreshType rollbackInstanceRefreshType, final ApiCallback<RollbackInstanceRefreshAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRollbackInstanceRefreshValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rollbackInstanceRefreshType, _callback);
        Type localVarReturnType = new TypeToken<RollbackInstanceRefreshAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetDesiredCapacity
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setDesiredCapacityType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetDesiredCapacityCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetDesiredCapacityType setDesiredCapacityType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setDesiredCapacityType;

        // create path and map variables
        String localVarPath = "/#Action=SetDesiredCapacity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetDesiredCapacityValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetDesiredCapacityType setDesiredCapacityType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetDesiredCapacity(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetDesiredCapacity(Async)");
        }

        return pOSTSetDesiredCapacityCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setDesiredCapacityType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the size of the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-manual-scaling.html\&quot;&gt;Manual scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setDesiredCapacityType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSetDesiredCapacity(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetDesiredCapacityType setDesiredCapacityType) throws ApiException {
        pOSTSetDesiredCapacityWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setDesiredCapacityType);
    }

    /**
     * 
     * &lt;p&gt;Sets the size of the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-manual-scaling.html\&quot;&gt;Manual scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setDesiredCapacityType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSetDesiredCapacityWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetDesiredCapacityType setDesiredCapacityType) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetDesiredCapacityValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setDesiredCapacityType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the size of the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-manual-scaling.html\&quot;&gt;Manual scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setDesiredCapacityType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetDesiredCapacityAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetDesiredCapacityType setDesiredCapacityType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetDesiredCapacityValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setDesiredCapacityType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetInstanceHealth
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setInstanceHealthQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetInstanceHealthCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceHealthQuery setInstanceHealthQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setInstanceHealthQuery;

        // create path and map variables
        String localVarPath = "/#Action=SetInstanceHealth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetInstanceHealthValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceHealthQuery setInstanceHealthQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetInstanceHealth(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetInstanceHealth(Async)");
        }

        return pOSTSetInstanceHealthCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceHealthQuery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the health status of the specified instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setInstanceHealthQuery  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSetInstanceHealth(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceHealthQuery setInstanceHealthQuery) throws ApiException {
        pOSTSetInstanceHealthWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceHealthQuery);
    }

    /**
     * 
     * &lt;p&gt;Sets the health status of the specified instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setInstanceHealthQuery  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSetInstanceHealthWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceHealthQuery setInstanceHealthQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetInstanceHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceHealthQuery, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the health status of the specified instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setInstanceHealthQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetInstanceHealthAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceHealthQuery setInstanceHealthQuery, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetInstanceHealthValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceHealthQuery, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetInstanceProtection
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setInstanceProtectionQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetInstanceProtectionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceProtectionQuery setInstanceProtectionQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setInstanceProtectionQuery;

        // create path and map variables
        String localVarPath = "/#Action=SetInstanceProtection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetInstanceProtectionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceProtectionQuery setInstanceProtectionQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetInstanceProtection(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetInstanceProtection(Async)");
        }

        return pOSTSetInstanceProtectionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceProtectionQuery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the instance protection settings of the specified instances. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of instance IDs, which is 50 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setInstanceProtectionQuery  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTSetInstanceProtection(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceProtectionQuery setInstanceProtectionQuery) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTSetInstanceProtectionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceProtectionQuery);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the instance protection settings of the specified instances. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of instance IDs, which is 50 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setInstanceProtectionQuery  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTSetInstanceProtectionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceProtectionQuery setInstanceProtectionQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetInstanceProtectionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceProtectionQuery, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the instance protection settings of the specified instances. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of instance IDs, which is 50 per Auto Scaling group, the call fails.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setInstanceProtectionQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetInstanceProtectionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetInstanceProtectionQuery setInstanceProtectionQuery, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetInstanceProtectionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceProtectionQuery, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStartInstanceRefresh
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startInstanceRefreshType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InstanceRefreshInProgressFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartInstanceRefreshCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartInstanceRefreshType startInstanceRefreshType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startInstanceRefreshType;

        // create path and map variables
        String localVarPath = "/#Action=StartInstanceRefresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStartInstanceRefreshValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartInstanceRefreshType startInstanceRefreshType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStartInstanceRefresh(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStartInstanceRefresh(Async)");
        }

        return pOSTStartInstanceRefreshCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startInstanceRefreshType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts an instance refresh. During an instance refresh, Amazon EC2 Auto Scaling performs a rolling update of instances in an Auto Scaling group. Instances are terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. &lt;/p&gt; &lt;p&gt;If successful, the request&#39;s response contains a unique ID that you can use to track the progress of the instance refresh. To query its status, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To describe the instance refreshes that have already run, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To cancel an instance refresh that is in progress, use the &lt;a&gt;CancelInstanceRefresh&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt;An instance refresh might fail for several reasons, such as EC2 launch failures, misconfigured health checks, or not ignoring or allowing the termination of instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in. You can monitor for failed EC2 launches using the scaling activities. To find the scaling activities, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you enable auto rollback, your Auto Scaling group will be rolled back automatically when the instance refresh fails. You can enable this feature before starting an instance refresh by specifying the &lt;code&gt;AutoRollback&lt;/code&gt; property in the instance refresh preferences. Otherwise, to roll back an instance refresh before it finishes, use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startInstanceRefreshType  (optional)
     * @return StartInstanceRefreshAnswer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InstanceRefreshInProgressFault </td><td>  -  </td></tr>
     </table>
     */
    public StartInstanceRefreshAnswer pOSTStartInstanceRefresh(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartInstanceRefreshType startInstanceRefreshType) throws ApiException {
        ApiResponse<StartInstanceRefreshAnswer> localVarResp = pOSTStartInstanceRefreshWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startInstanceRefreshType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts an instance refresh. During an instance refresh, Amazon EC2 Auto Scaling performs a rolling update of instances in an Auto Scaling group. Instances are terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. &lt;/p&gt; &lt;p&gt;If successful, the request&#39;s response contains a unique ID that you can use to track the progress of the instance refresh. To query its status, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To describe the instance refreshes that have already run, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To cancel an instance refresh that is in progress, use the &lt;a&gt;CancelInstanceRefresh&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt;An instance refresh might fail for several reasons, such as EC2 launch failures, misconfigured health checks, or not ignoring or allowing the termination of instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in. You can monitor for failed EC2 launches using the scaling activities. To find the scaling activities, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you enable auto rollback, your Auto Scaling group will be rolled back automatically when the instance refresh fails. You can enable this feature before starting an instance refresh by specifying the &lt;code&gt;AutoRollback&lt;/code&gt; property in the instance refresh preferences. Otherwise, to roll back an instance refresh before it finishes, use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startInstanceRefreshType  (optional)
     * @return ApiResponse&lt;StartInstanceRefreshAnswer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InstanceRefreshInProgressFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartInstanceRefreshAnswer> pOSTStartInstanceRefreshWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartInstanceRefreshType startInstanceRefreshType) throws ApiException {
        okhttp3.Call localVarCall = pOSTStartInstanceRefreshValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startInstanceRefreshType, null);
        Type localVarReturnType = new TypeToken<StartInstanceRefreshAnswer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts an instance refresh. During an instance refresh, Amazon EC2 Auto Scaling performs a rolling update of instances in an Auto Scaling group. Instances are terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. &lt;/p&gt; &lt;p&gt;If successful, the request&#39;s response contains a unique ID that you can use to track the progress of the instance refresh. To query its status, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To describe the instance refreshes that have already run, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To cancel an instance refresh that is in progress, use the &lt;a&gt;CancelInstanceRefresh&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt;An instance refresh might fail for several reasons, such as EC2 launch failures, misconfigured health checks, or not ignoring or allowing the termination of instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in. You can monitor for failed EC2 launches using the scaling activities. To find the scaling activities, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you enable auto rollback, your Auto Scaling group will be rolled back automatically when the instance refresh fails. You can enable this feature before starting an instance refresh by specifying the &lt;code&gt;AutoRollback&lt;/code&gt; property in the instance refresh preferences. Otherwise, to roll back an instance refresh before it finishes, use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API. &lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startInstanceRefreshType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InstanceRefreshInProgressFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartInstanceRefreshAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartInstanceRefreshType startInstanceRefreshType, final ApiCallback<StartInstanceRefreshAnswer> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStartInstanceRefreshValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startInstanceRefreshType, _callback);
        Type localVarReturnType = new TypeToken<StartInstanceRefreshAnswer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSuspendProcesses
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcessQuery  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSuspendProcessesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scalingProcessQuery;

        // create path and map variables
        String localVarPath = "/#Action=SuspendProcesses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSuspendProcessesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSuspendProcesses(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSuspendProcesses(Async)");
        }

        return pOSTSuspendProcessesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Suspends the specified auto scaling processes, or all processes, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you suspend either the &lt;code&gt;Launch&lt;/code&gt; or &lt;code&gt;Terminate&lt;/code&gt; process types, it can prevent other process types from functioning properly. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To resume processes that have been suspended, call the &lt;a&gt;ResumeProcesses&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcessQuery  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSuspendProcesses(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery) throws ApiException {
        pOSTSuspendProcessesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery);
    }

    /**
     * 
     * &lt;p&gt;Suspends the specified auto scaling processes, or all processes, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you suspend either the &lt;code&gt;Launch&lt;/code&gt; or &lt;code&gt;Terminate&lt;/code&gt; process types, it can prevent other process types from functioning properly. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To resume processes that have been suspended, call the &lt;a&gt;ResumeProcesses&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcessQuery  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSuspendProcessesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery) throws ApiException {
        okhttp3.Call localVarCall = pOSTSuspendProcessesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Suspends the specified auto scaling processes, or all processes, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you suspend either the &lt;code&gt;Launch&lt;/code&gt; or &lt;code&gt;Terminate&lt;/code&gt; process types, it can prevent other process types from functioning properly. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To resume processes that have been suspended, call the &lt;a&gt;ResumeProcesses&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param scalingProcessQuery  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceInUseFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSuspendProcessesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ScalingProcessQuery scalingProcessQuery, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSuspendProcessesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTTerminateInstanceInAutoScalingGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateInstanceInAutoScalingGroupType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTerminateInstanceInAutoScalingGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateInstanceInAutoScalingGroupType terminateInstanceInAutoScalingGroupType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = terminateInstanceInAutoScalingGroupType;

        // create path and map variables
        String localVarPath = "/#Action=TerminateInstanceInAutoScalingGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTTerminateInstanceInAutoScalingGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateInstanceInAutoScalingGroupType terminateInstanceInAutoScalingGroupType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTTerminateInstanceInAutoScalingGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTTerminateInstanceInAutoScalingGroup(Async)");
        }

        return pOSTTerminateInstanceInAutoScalingGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateInstanceInAutoScalingGroupType, _callback);

    }

    /**
     * 
     * &lt;p&gt;Terminates the specified instance and optionally adjusts the desired group size. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to &lt;code&gt;terminated&lt;/code&gt;. You can&#39;t connect to or start an instance after you&#39;ve terminated it.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. &lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage\&quot;&gt;Rebalancing activities&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateInstanceInAutoScalingGroupType  (optional)
     * @return ActivityType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ActivityType pOSTTerminateInstanceInAutoScalingGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateInstanceInAutoScalingGroupType terminateInstanceInAutoScalingGroupType) throws ApiException {
        ApiResponse<ActivityType> localVarResp = pOSTTerminateInstanceInAutoScalingGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateInstanceInAutoScalingGroupType);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Terminates the specified instance and optionally adjusts the desired group size. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to &lt;code&gt;terminated&lt;/code&gt;. You can&#39;t connect to or start an instance after you&#39;ve terminated it.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. &lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage\&quot;&gt;Rebalancing activities&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateInstanceInAutoScalingGroupType  (optional)
     * @return ApiResponse&lt;ActivityType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivityType> pOSTTerminateInstanceInAutoScalingGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateInstanceInAutoScalingGroupType terminateInstanceInAutoScalingGroupType) throws ApiException {
        okhttp3.Call localVarCall = pOSTTerminateInstanceInAutoScalingGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateInstanceInAutoScalingGroupType, null);
        Type localVarReturnType = new TypeToken<ActivityType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Terminates the specified instance and optionally adjusts the desired group size. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to &lt;code&gt;terminated&lt;/code&gt;. You can&#39;t connect to or start an instance after you&#39;ve terminated it.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. &lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage\&quot;&gt;Rebalancing activities&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param terminateInstanceInAutoScalingGroupType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTerminateInstanceInAutoScalingGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TerminateInstanceInAutoScalingGroupType terminateInstanceInAutoScalingGroupType, final ApiCallback<ActivityType> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTTerminateInstanceInAutoScalingGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateInstanceInAutoScalingGroupType, _callback);
        Type localVarReturnType = new TypeToken<ActivityType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateAutoScalingGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateAutoScalingGroupType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateAutoScalingGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateAutoScalingGroupType updateAutoScalingGroupType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAutoScalingGroupType;

        // create path and map variables
        String localVarPath = "/#Action=UpdateAutoScalingGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateAutoScalingGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateAutoScalingGroupType updateAutoScalingGroupType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateAutoScalingGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateAutoScalingGroup(Async)");
        }

        return pOSTUpdateAutoScalingGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateAutoScalingGroupType, _callback);

    }

    /**
     * 
     * &lt;p&gt; &lt;b&gt;We strongly recommend that all Auto Scaling groups use launch templates to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Updates the configuration for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To update an Auto Scaling group, specify the name of the group and the property that you want to change. Any properties that you don&#39;t specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. &lt;/p&gt; &lt;p&gt;If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.&lt;/p&gt; &lt;p&gt;Note the following about changing &lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, or &lt;code&gt;MinSize&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MinSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MinSize&lt;/code&gt; is larger than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MinSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MaxSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MaxSize&lt;/code&gt; is smaller than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MaxSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which properties have been set, call the &lt;a&gt;DescribeAutoScalingGroups&lt;/a&gt; API. To view the scaling policies for an Auto Scaling group, call the &lt;a&gt;DescribePolicies&lt;/a&gt; API. If the group has scaling policies, you can update them by calling the &lt;a&gt;PutScalingPolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateAutoScalingGroupType  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTUpdateAutoScalingGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateAutoScalingGroupType updateAutoScalingGroupType) throws ApiException {
        pOSTUpdateAutoScalingGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateAutoScalingGroupType);
    }

    /**
     * 
     * &lt;p&gt; &lt;b&gt;We strongly recommend that all Auto Scaling groups use launch templates to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Updates the configuration for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To update an Auto Scaling group, specify the name of the group and the property that you want to change. Any properties that you don&#39;t specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. &lt;/p&gt; &lt;p&gt;If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.&lt;/p&gt; &lt;p&gt;Note the following about changing &lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, or &lt;code&gt;MinSize&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MinSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MinSize&lt;/code&gt; is larger than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MinSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MaxSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MaxSize&lt;/code&gt; is smaller than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MaxSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which properties have been set, call the &lt;a&gt;DescribeAutoScalingGroups&lt;/a&gt; API. To view the scaling policies for an Auto Scaling group, call the &lt;a&gt;DescribePolicies&lt;/a&gt; API. If the group has scaling policies, you can update them by calling the &lt;a&gt;PutScalingPolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateAutoScalingGroupType  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTUpdateAutoScalingGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateAutoScalingGroupType updateAutoScalingGroupType) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateAutoScalingGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateAutoScalingGroupType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; &lt;b&gt;We strongly recommend that all Auto Scaling groups use launch templates to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Updates the configuration for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To update an Auto Scaling group, specify the name of the group and the property that you want to change. Any properties that you don&#39;t specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. &lt;/p&gt; &lt;p&gt;If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.&lt;/p&gt; &lt;p&gt;Note the following about changing &lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, or &lt;code&gt;MinSize&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MinSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MinSize&lt;/code&gt; is larger than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MinSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MaxSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MaxSize&lt;/code&gt; is smaller than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MaxSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which properties have been set, call the &lt;a&gt;DescribeAutoScalingGroups&lt;/a&gt; API. To view the scaling policies for an Auto Scaling group, call the &lt;a&gt;DescribePolicies&lt;/a&gt; API. If the group has scaling policies, you can update them by calling the &lt;a&gt;PutScalingPolicy&lt;/a&gt; API.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateAutoScalingGroupType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ScalingActivityInProgressFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceContentionFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleFailure </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateAutoScalingGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateAutoScalingGroupType updateAutoScalingGroupType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateAutoScalingGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateAutoScalingGroupType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
