/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GETStartInstanceRefreshDesiredConfigurationParameterLaunchTemplate;
import org.openapitools.client.model.GETStartInstanceRefreshDesiredConfigurationParameterMixedInstancesPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Describes the desired configuration for an instance refresh. &lt;/p&gt; &lt;p&gt;If you specify a desired configuration, you must specify either a &lt;code&gt;LaunchTemplate&lt;/code&gt; or a &lt;code&gt;MixedInstancesPolicy&lt;/code&gt;. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:42.641692-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DesiredConfiguration {
  public static final String SERIALIZED_NAME_LAUNCH_TEMPLATE = "LaunchTemplate";
  @SerializedName(SERIALIZED_NAME_LAUNCH_TEMPLATE)
  private GETStartInstanceRefreshDesiredConfigurationParameterLaunchTemplate launchTemplate;

  public static final String SERIALIZED_NAME_MIXED_INSTANCES_POLICY = "MixedInstancesPolicy";
  @SerializedName(SERIALIZED_NAME_MIXED_INSTANCES_POLICY)
  private GETStartInstanceRefreshDesiredConfigurationParameterMixedInstancesPolicy mixedInstancesPolicy;

  public DesiredConfiguration() {
  }

  public DesiredConfiguration launchTemplate(GETStartInstanceRefreshDesiredConfigurationParameterLaunchTemplate launchTemplate) {
    this.launchTemplate = launchTemplate;
    return this;
  }

  /**
   * Get launchTemplate
   * @return launchTemplate
   */
  @javax.annotation.Nullable
  public GETStartInstanceRefreshDesiredConfigurationParameterLaunchTemplate getLaunchTemplate() {
    return launchTemplate;
  }

  public void setLaunchTemplate(GETStartInstanceRefreshDesiredConfigurationParameterLaunchTemplate launchTemplate) {
    this.launchTemplate = launchTemplate;
  }


  public DesiredConfiguration mixedInstancesPolicy(GETStartInstanceRefreshDesiredConfigurationParameterMixedInstancesPolicy mixedInstancesPolicy) {
    this.mixedInstancesPolicy = mixedInstancesPolicy;
    return this;
  }

  /**
   * Get mixedInstancesPolicy
   * @return mixedInstancesPolicy
   */
  @javax.annotation.Nullable
  public GETStartInstanceRefreshDesiredConfigurationParameterMixedInstancesPolicy getMixedInstancesPolicy() {
    return mixedInstancesPolicy;
  }

  public void setMixedInstancesPolicy(GETStartInstanceRefreshDesiredConfigurationParameterMixedInstancesPolicy mixedInstancesPolicy) {
    this.mixedInstancesPolicy = mixedInstancesPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DesiredConfiguration desiredConfiguration = (DesiredConfiguration) o;
    return Objects.equals(this.launchTemplate, desiredConfiguration.launchTemplate) &&
        Objects.equals(this.mixedInstancesPolicy, desiredConfiguration.mixedInstancesPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(launchTemplate, mixedInstancesPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DesiredConfiguration {\n");
    sb.append("    launchTemplate: ").append(toIndentedString(launchTemplate)).append("\n");
    sb.append("    mixedInstancesPolicy: ").append(toIndentedString(mixedInstancesPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LaunchTemplate");
    openapiFields.add("MixedInstancesPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DesiredConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DesiredConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DesiredConfiguration is not found in the empty JSON string", DesiredConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DesiredConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DesiredConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LaunchTemplate`
      if (jsonObj.get("LaunchTemplate") != null && !jsonObj.get("LaunchTemplate").isJsonNull()) {
        GETStartInstanceRefreshDesiredConfigurationParameterLaunchTemplate.validateJsonElement(jsonObj.get("LaunchTemplate"));
      }
      // validate the optional field `MixedInstancesPolicy`
      if (jsonObj.get("MixedInstancesPolicy") != null && !jsonObj.get("MixedInstancesPolicy").isJsonNull()) {
        GETStartInstanceRefreshDesiredConfigurationParameterMixedInstancesPolicy.validateJsonElement(jsonObj.get("MixedInstancesPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DesiredConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DesiredConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DesiredConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DesiredConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DesiredConfiguration>() {
           @Override
           public void write(JsonWriter out, DesiredConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DesiredConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DesiredConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DesiredConfiguration
   * @throws IOException if the JSON string is invalid with respect to DesiredConfiguration
   */
  public static DesiredConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DesiredConfiguration.class);
  }

  /**
   * Convert an instance of DesiredConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

