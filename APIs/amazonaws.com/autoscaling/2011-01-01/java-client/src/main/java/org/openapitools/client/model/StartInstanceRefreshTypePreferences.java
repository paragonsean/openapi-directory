/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GETStartInstanceRefreshPreferencesParameterAlarmSpecification;
import org.openapitools.client.model.ScaleInProtectedInstances;
import org.openapitools.client.model.StandbyInstances;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartInstanceRefreshTypePreferences
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:42.641692-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartInstanceRefreshTypePreferences {
  public static final String SERIALIZED_NAME_MIN_HEALTHY_PERCENTAGE = "MinHealthyPercentage";
  @SerializedName(SERIALIZED_NAME_MIN_HEALTHY_PERCENTAGE)
  private Integer minHealthyPercentage;

  public static final String SERIALIZED_NAME_INSTANCE_WARMUP = "InstanceWarmup";
  @SerializedName(SERIALIZED_NAME_INSTANCE_WARMUP)
  private Integer instanceWarmup;

  public static final String SERIALIZED_NAME_CHECKPOINT_PERCENTAGES = "CheckpointPercentages";
  @SerializedName(SERIALIZED_NAME_CHECKPOINT_PERCENTAGES)
  private List checkpointPercentages;

  public static final String SERIALIZED_NAME_CHECKPOINT_DELAY = "CheckpointDelay";
  @SerializedName(SERIALIZED_NAME_CHECKPOINT_DELAY)
  private Integer checkpointDelay;

  public static final String SERIALIZED_NAME_SKIP_MATCHING = "SkipMatching";
  @SerializedName(SERIALIZED_NAME_SKIP_MATCHING)
  private Boolean skipMatching;

  public static final String SERIALIZED_NAME_AUTO_ROLLBACK = "AutoRollback";
  @SerializedName(SERIALIZED_NAME_AUTO_ROLLBACK)
  private Boolean autoRollback;

  public static final String SERIALIZED_NAME_SCALE_IN_PROTECTED_INSTANCES = "ScaleInProtectedInstances";
  @SerializedName(SERIALIZED_NAME_SCALE_IN_PROTECTED_INSTANCES)
  private ScaleInProtectedInstances scaleInProtectedInstances;

  public static final String SERIALIZED_NAME_STANDBY_INSTANCES = "StandbyInstances";
  @SerializedName(SERIALIZED_NAME_STANDBY_INSTANCES)
  private StandbyInstances standbyInstances;

  public static final String SERIALIZED_NAME_ALARM_SPECIFICATION = "AlarmSpecification";
  @SerializedName(SERIALIZED_NAME_ALARM_SPECIFICATION)
  private GETStartInstanceRefreshPreferencesParameterAlarmSpecification alarmSpecification;

  public StartInstanceRefreshTypePreferences() {
  }

  public StartInstanceRefreshTypePreferences minHealthyPercentage(Integer minHealthyPercentage) {
    this.minHealthyPercentage = minHealthyPercentage;
    return this;
  }

  /**
   * Get minHealthyPercentage
   * @return minHealthyPercentage
   */
  @javax.annotation.Nullable
  public Integer getMinHealthyPercentage() {
    return minHealthyPercentage;
  }

  public void setMinHealthyPercentage(Integer minHealthyPercentage) {
    this.minHealthyPercentage = minHealthyPercentage;
  }


  public StartInstanceRefreshTypePreferences instanceWarmup(Integer instanceWarmup) {
    this.instanceWarmup = instanceWarmup;
    return this;
  }

  /**
   * Get instanceWarmup
   * @return instanceWarmup
   */
  @javax.annotation.Nullable
  public Integer getInstanceWarmup() {
    return instanceWarmup;
  }

  public void setInstanceWarmup(Integer instanceWarmup) {
    this.instanceWarmup = instanceWarmup;
  }


  public StartInstanceRefreshTypePreferences checkpointPercentages(List checkpointPercentages) {
    this.checkpointPercentages = checkpointPercentages;
    return this;
  }

  /**
   * Get checkpointPercentages
   * @return checkpointPercentages
   */
  @javax.annotation.Nullable
  public List getCheckpointPercentages() {
    return checkpointPercentages;
  }

  public void setCheckpointPercentages(List checkpointPercentages) {
    this.checkpointPercentages = checkpointPercentages;
  }


  public StartInstanceRefreshTypePreferences checkpointDelay(Integer checkpointDelay) {
    this.checkpointDelay = checkpointDelay;
    return this;
  }

  /**
   * Get checkpointDelay
   * @return checkpointDelay
   */
  @javax.annotation.Nullable
  public Integer getCheckpointDelay() {
    return checkpointDelay;
  }

  public void setCheckpointDelay(Integer checkpointDelay) {
    this.checkpointDelay = checkpointDelay;
  }


  public StartInstanceRefreshTypePreferences skipMatching(Boolean skipMatching) {
    this.skipMatching = skipMatching;
    return this;
  }

  /**
   * Get skipMatching
   * @return skipMatching
   */
  @javax.annotation.Nullable
  public Boolean getSkipMatching() {
    return skipMatching;
  }

  public void setSkipMatching(Boolean skipMatching) {
    this.skipMatching = skipMatching;
  }


  public StartInstanceRefreshTypePreferences autoRollback(Boolean autoRollback) {
    this.autoRollback = autoRollback;
    return this;
  }

  /**
   * Get autoRollback
   * @return autoRollback
   */
  @javax.annotation.Nullable
  public Boolean getAutoRollback() {
    return autoRollback;
  }

  public void setAutoRollback(Boolean autoRollback) {
    this.autoRollback = autoRollback;
  }


  public StartInstanceRefreshTypePreferences scaleInProtectedInstances(ScaleInProtectedInstances scaleInProtectedInstances) {
    this.scaleInProtectedInstances = scaleInProtectedInstances;
    return this;
  }

  /**
   * Get scaleInProtectedInstances
   * @return scaleInProtectedInstances
   */
  @javax.annotation.Nullable
  public ScaleInProtectedInstances getScaleInProtectedInstances() {
    return scaleInProtectedInstances;
  }

  public void setScaleInProtectedInstances(ScaleInProtectedInstances scaleInProtectedInstances) {
    this.scaleInProtectedInstances = scaleInProtectedInstances;
  }


  public StartInstanceRefreshTypePreferences standbyInstances(StandbyInstances standbyInstances) {
    this.standbyInstances = standbyInstances;
    return this;
  }

  /**
   * Get standbyInstances
   * @return standbyInstances
   */
  @javax.annotation.Nullable
  public StandbyInstances getStandbyInstances() {
    return standbyInstances;
  }

  public void setStandbyInstances(StandbyInstances standbyInstances) {
    this.standbyInstances = standbyInstances;
  }


  public StartInstanceRefreshTypePreferences alarmSpecification(GETStartInstanceRefreshPreferencesParameterAlarmSpecification alarmSpecification) {
    this.alarmSpecification = alarmSpecification;
    return this;
  }

  /**
   * Get alarmSpecification
   * @return alarmSpecification
   */
  @javax.annotation.Nullable
  public GETStartInstanceRefreshPreferencesParameterAlarmSpecification getAlarmSpecification() {
    return alarmSpecification;
  }

  public void setAlarmSpecification(GETStartInstanceRefreshPreferencesParameterAlarmSpecification alarmSpecification) {
    this.alarmSpecification = alarmSpecification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartInstanceRefreshTypePreferences startInstanceRefreshTypePreferences = (StartInstanceRefreshTypePreferences) o;
    return Objects.equals(this.minHealthyPercentage, startInstanceRefreshTypePreferences.minHealthyPercentage) &&
        Objects.equals(this.instanceWarmup, startInstanceRefreshTypePreferences.instanceWarmup) &&
        Objects.equals(this.checkpointPercentages, startInstanceRefreshTypePreferences.checkpointPercentages) &&
        Objects.equals(this.checkpointDelay, startInstanceRefreshTypePreferences.checkpointDelay) &&
        Objects.equals(this.skipMatching, startInstanceRefreshTypePreferences.skipMatching) &&
        Objects.equals(this.autoRollback, startInstanceRefreshTypePreferences.autoRollback) &&
        Objects.equals(this.scaleInProtectedInstances, startInstanceRefreshTypePreferences.scaleInProtectedInstances) &&
        Objects.equals(this.standbyInstances, startInstanceRefreshTypePreferences.standbyInstances) &&
        Objects.equals(this.alarmSpecification, startInstanceRefreshTypePreferences.alarmSpecification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(minHealthyPercentage, instanceWarmup, checkpointPercentages, checkpointDelay, skipMatching, autoRollback, scaleInProtectedInstances, standbyInstances, alarmSpecification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartInstanceRefreshTypePreferences {\n");
    sb.append("    minHealthyPercentage: ").append(toIndentedString(minHealthyPercentage)).append("\n");
    sb.append("    instanceWarmup: ").append(toIndentedString(instanceWarmup)).append("\n");
    sb.append("    checkpointPercentages: ").append(toIndentedString(checkpointPercentages)).append("\n");
    sb.append("    checkpointDelay: ").append(toIndentedString(checkpointDelay)).append("\n");
    sb.append("    skipMatching: ").append(toIndentedString(skipMatching)).append("\n");
    sb.append("    autoRollback: ").append(toIndentedString(autoRollback)).append("\n");
    sb.append("    scaleInProtectedInstances: ").append(toIndentedString(scaleInProtectedInstances)).append("\n");
    sb.append("    standbyInstances: ").append(toIndentedString(standbyInstances)).append("\n");
    sb.append("    alarmSpecification: ").append(toIndentedString(alarmSpecification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MinHealthyPercentage");
    openapiFields.add("InstanceWarmup");
    openapiFields.add("CheckpointPercentages");
    openapiFields.add("CheckpointDelay");
    openapiFields.add("SkipMatching");
    openapiFields.add("AutoRollback");
    openapiFields.add("ScaleInProtectedInstances");
    openapiFields.add("StandbyInstances");
    openapiFields.add("AlarmSpecification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartInstanceRefreshTypePreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartInstanceRefreshTypePreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartInstanceRefreshTypePreferences is not found in the empty JSON string", StartInstanceRefreshTypePreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartInstanceRefreshTypePreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartInstanceRefreshTypePreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MinHealthyPercentage`
      if (jsonObj.get("MinHealthyPercentage") != null && !jsonObj.get("MinHealthyPercentage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinHealthyPercentage"));
      }
      // validate the optional field `InstanceWarmup`
      if (jsonObj.get("InstanceWarmup") != null && !jsonObj.get("InstanceWarmup").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstanceWarmup"));
      }
      // validate the optional field `CheckpointPercentages`
      if (jsonObj.get("CheckpointPercentages") != null && !jsonObj.get("CheckpointPercentages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CheckpointPercentages"));
      }
      // validate the optional field `CheckpointDelay`
      if (jsonObj.get("CheckpointDelay") != null && !jsonObj.get("CheckpointDelay").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CheckpointDelay"));
      }
      // validate the optional field `SkipMatching`
      if (jsonObj.get("SkipMatching") != null && !jsonObj.get("SkipMatching").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SkipMatching"));
      }
      // validate the optional field `AutoRollback`
      if (jsonObj.get("AutoRollback") != null && !jsonObj.get("AutoRollback").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoRollback"));
      }
      // validate the optional field `ScaleInProtectedInstances`
      if (jsonObj.get("ScaleInProtectedInstances") != null && !jsonObj.get("ScaleInProtectedInstances").isJsonNull()) {
        ScaleInProtectedInstances.validateJsonElement(jsonObj.get("ScaleInProtectedInstances"));
      }
      // validate the optional field `StandbyInstances`
      if (jsonObj.get("StandbyInstances") != null && !jsonObj.get("StandbyInstances").isJsonNull()) {
        StandbyInstances.validateJsonElement(jsonObj.get("StandbyInstances"));
      }
      // validate the optional field `AlarmSpecification`
      if (jsonObj.get("AlarmSpecification") != null && !jsonObj.get("AlarmSpecification").isJsonNull()) {
        GETStartInstanceRefreshPreferencesParameterAlarmSpecification.validateJsonElement(jsonObj.get("AlarmSpecification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartInstanceRefreshTypePreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartInstanceRefreshTypePreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartInstanceRefreshTypePreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartInstanceRefreshTypePreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<StartInstanceRefreshTypePreferences>() {
           @Override
           public void write(JsonWriter out, StartInstanceRefreshTypePreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartInstanceRefreshTypePreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartInstanceRefreshTypePreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartInstanceRefreshTypePreferences
   * @throws IOException if the JSON string is invalid with respect to StartInstanceRefreshTypePreferences
   */
  public static StartInstanceRefreshTypePreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartInstanceRefreshTypePreferences.class);
  }

  /**
   * Convert an instance of StartInstanceRefreshTypePreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

