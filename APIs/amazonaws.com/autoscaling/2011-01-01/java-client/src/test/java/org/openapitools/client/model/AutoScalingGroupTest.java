/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoScalingGroupLaunchTemplate;
import org.openapitools.client.model.AutoScalingGroupMixedInstancesPolicy;
import org.openapitools.client.model.AutoScalingGroupWarmPoolConfiguration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AutoScalingGroup
 */
public class AutoScalingGroupTest {
    private final AutoScalingGroup model = new AutoScalingGroup();

    /**
     * Model tests for AutoScalingGroup
     */
    @Test
    public void testAutoScalingGroup() {
        // TODO: test AutoScalingGroup
    }

    /**
     * Test the property 'autoScalingGroupName'
     */
    @Test
    public void autoScalingGroupNameTest() {
        // TODO: test autoScalingGroupName
    }

    /**
     * Test the property 'autoScalingGroupARN'
     */
    @Test
    public void autoScalingGroupARNTest() {
        // TODO: test autoScalingGroupARN
    }

    /**
     * Test the property 'launchConfigurationName'
     */
    @Test
    public void launchConfigurationNameTest() {
        // TODO: test launchConfigurationName
    }

    /**
     * Test the property 'launchTemplate'
     */
    @Test
    public void launchTemplateTest() {
        // TODO: test launchTemplate
    }

    /**
     * Test the property 'mixedInstancesPolicy'
     */
    @Test
    public void mixedInstancesPolicyTest() {
        // TODO: test mixedInstancesPolicy
    }

    /**
     * Test the property 'minSize'
     */
    @Test
    public void minSizeTest() {
        // TODO: test minSize
    }

    /**
     * Test the property 'maxSize'
     */
    @Test
    public void maxSizeTest() {
        // TODO: test maxSize
    }

    /**
     * Test the property 'desiredCapacity'
     */
    @Test
    public void desiredCapacityTest() {
        // TODO: test desiredCapacity
    }

    /**
     * Test the property 'predictedCapacity'
     */
    @Test
    public void predictedCapacityTest() {
        // TODO: test predictedCapacity
    }

    /**
     * Test the property 'defaultCooldown'
     */
    @Test
    public void defaultCooldownTest() {
        // TODO: test defaultCooldown
    }

    /**
     * Test the property 'availabilityZones'
     */
    @Test
    public void availabilityZonesTest() {
        // TODO: test availabilityZones
    }

    /**
     * Test the property 'loadBalancerNames'
     */
    @Test
    public void loadBalancerNamesTest() {
        // TODO: test loadBalancerNames
    }

    /**
     * Test the property 'targetGroupARNs'
     */
    @Test
    public void targetGroupARNsTest() {
        // TODO: test targetGroupARNs
    }

    /**
     * Test the property 'healthCheckType'
     */
    @Test
    public void healthCheckTypeTest() {
        // TODO: test healthCheckType
    }

    /**
     * Test the property 'healthCheckGracePeriod'
     */
    @Test
    public void healthCheckGracePeriodTest() {
        // TODO: test healthCheckGracePeriod
    }

    /**
     * Test the property 'instances'
     */
    @Test
    public void instancesTest() {
        // TODO: test instances
    }

    /**
     * Test the property 'createdTime'
     */
    @Test
    public void createdTimeTest() {
        // TODO: test createdTime
    }

    /**
     * Test the property 'suspendedProcesses'
     */
    @Test
    public void suspendedProcessesTest() {
        // TODO: test suspendedProcesses
    }

    /**
     * Test the property 'placementGroup'
     */
    @Test
    public void placementGroupTest() {
        // TODO: test placementGroup
    }

    /**
     * Test the property 'vpCZoneIdentifier'
     */
    @Test
    public void vpCZoneIdentifierTest() {
        // TODO: test vpCZoneIdentifier
    }

    /**
     * Test the property 'enabledMetrics'
     */
    @Test
    public void enabledMetricsTest() {
        // TODO: test enabledMetrics
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'terminationPolicies'
     */
    @Test
    public void terminationPoliciesTest() {
        // TODO: test terminationPolicies
    }

    /**
     * Test the property 'newInstancesProtectedFromScaleIn'
     */
    @Test
    public void newInstancesProtectedFromScaleInTest() {
        // TODO: test newInstancesProtectedFromScaleIn
    }

    /**
     * Test the property 'serviceLinkedRoleARN'
     */
    @Test
    public void serviceLinkedRoleARNTest() {
        // TODO: test serviceLinkedRoleARN
    }

    /**
     * Test the property 'maxInstanceLifetime'
     */
    @Test
    public void maxInstanceLifetimeTest() {
        // TODO: test maxInstanceLifetime
    }

    /**
     * Test the property 'capacityRebalance'
     */
    @Test
    public void capacityRebalanceTest() {
        // TODO: test capacityRebalance
    }

    /**
     * Test the property 'warmPoolConfiguration'
     */
    @Test
    public void warmPoolConfigurationTest() {
        // TODO: test warmPoolConfiguration
    }

    /**
     * Test the property 'warmPoolSize'
     */
    @Test
    public void warmPoolSizeTest() {
        // TODO: test warmPoolSize
    }

    /**
     * Test the property 'context'
     */
    @Test
    public void contextTest() {
        // TODO: test context
    }

    /**
     * Test the property 'desiredCapacityType'
     */
    @Test
    public void desiredCapacityTypeTest() {
        // TODO: test desiredCapacityType
    }

    /**
     * Test the property 'defaultInstanceWarmup'
     */
    @Test
    public void defaultInstanceWarmupTest() {
        // TODO: test defaultInstanceWarmup
    }

    /**
     * Test the property 'trafficSources'
     */
    @Test
    public void trafficSourcesTest() {
        // TODO: test trafficSources
    }

}
