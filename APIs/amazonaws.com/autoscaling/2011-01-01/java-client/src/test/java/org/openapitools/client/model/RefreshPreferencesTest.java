/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GETStartInstanceRefreshPreferencesParameterAlarmSpecification;
import org.openapitools.client.model.ScaleInProtectedInstances;
import org.openapitools.client.model.StandbyInstances;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for RefreshPreferences
 */
public class RefreshPreferencesTest {
    private final RefreshPreferences model = new RefreshPreferences();

    /**
     * Model tests for RefreshPreferences
     */
    @Test
    public void testRefreshPreferences() {
        // TODO: test RefreshPreferences
    }

    /**
     * Test the property 'minHealthyPercentage'
     */
    @Test
    public void minHealthyPercentageTest() {
        // TODO: test minHealthyPercentage
    }

    /**
     * Test the property 'instanceWarmup'
     */
    @Test
    public void instanceWarmupTest() {
        // TODO: test instanceWarmup
    }

    /**
     * Test the property 'checkpointPercentages'
     */
    @Test
    public void checkpointPercentagesTest() {
        // TODO: test checkpointPercentages
    }

    /**
     * Test the property 'checkpointDelay'
     */
    @Test
    public void checkpointDelayTest() {
        // TODO: test checkpointDelay
    }

    /**
     * Test the property 'skipMatching'
     */
    @Test
    public void skipMatchingTest() {
        // TODO: test skipMatching
    }

    /**
     * Test the property 'autoRollback'
     */
    @Test
    public void autoRollbackTest() {
        // TODO: test autoRollback
    }

    /**
     * Test the property 'scaleInProtectedInstances'
     */
    @Test
    public void scaleInProtectedInstancesTest() {
        // TODO: test scaleInProtectedInstances
    }

    /**
     * Test the property 'standbyInstances'
     */
    @Test
    public void standbyInstancesTest() {
        // TODO: test standbyInstances
    }

    /**
     * Test the property 'alarmSpecification'
     */
    @Test
    public void alarmSpecificationTest() {
        // TODO: test alarmSpecification
    }

}
