/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BareMetal;
import org.openapitools.client.model.BurstablePerformance;
import org.openapitools.client.model.InstanceRequirementsAcceleratorCount;
import org.openapitools.client.model.InstanceRequirementsAcceleratorTotalMemoryMiB;
import org.openapitools.client.model.InstanceRequirementsBaselineEbsBandwidthMbps;
import org.openapitools.client.model.InstanceRequirementsMemoryGiBPerVCpu;
import org.openapitools.client.model.InstanceRequirementsMemoryMiB;
import org.openapitools.client.model.InstanceRequirementsNetworkBandwidthGbps;
import org.openapitools.client.model.InstanceRequirementsNetworkInterfaceCount;
import org.openapitools.client.model.InstanceRequirementsTotalLocalStorageGB;
import org.openapitools.client.model.InstanceRequirementsVCpuCount;
import org.openapitools.client.model.LocalStorage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for InstanceRequirements
 */
public class InstanceRequirementsTest {
    private final InstanceRequirements model = new InstanceRequirements();

    /**
     * Model tests for InstanceRequirements
     */
    @Test
    public void testInstanceRequirements() {
        // TODO: test InstanceRequirements
    }

    /**
     * Test the property 'vcpuCount'
     */
    @Test
    public void vcpuCountTest() {
        // TODO: test vcpuCount
    }

    /**
     * Test the property 'memoryMiB'
     */
    @Test
    public void memoryMiBTest() {
        // TODO: test memoryMiB
    }

    /**
     * Test the property 'cpuManufacturers'
     */
    @Test
    public void cpuManufacturersTest() {
        // TODO: test cpuManufacturers
    }

    /**
     * Test the property 'memoryGiBPerVCpu'
     */
    @Test
    public void memoryGiBPerVCpuTest() {
        // TODO: test memoryGiBPerVCpu
    }

    /**
     * Test the property 'excludedInstanceTypes'
     */
    @Test
    public void excludedInstanceTypesTest() {
        // TODO: test excludedInstanceTypes
    }

    /**
     * Test the property 'instanceGenerations'
     */
    @Test
    public void instanceGenerationsTest() {
        // TODO: test instanceGenerations
    }

    /**
     * Test the property 'spotMaxPricePercentageOverLowestPrice'
     */
    @Test
    public void spotMaxPricePercentageOverLowestPriceTest() {
        // TODO: test spotMaxPricePercentageOverLowestPrice
    }

    /**
     * Test the property 'onDemandMaxPricePercentageOverLowestPrice'
     */
    @Test
    public void onDemandMaxPricePercentageOverLowestPriceTest() {
        // TODO: test onDemandMaxPricePercentageOverLowestPrice
    }

    /**
     * Test the property 'bareMetal'
     */
    @Test
    public void bareMetalTest() {
        // TODO: test bareMetal
    }

    /**
     * Test the property 'burstablePerformance'
     */
    @Test
    public void burstablePerformanceTest() {
        // TODO: test burstablePerformance
    }

    /**
     * Test the property 'requireHibernateSupport'
     */
    @Test
    public void requireHibernateSupportTest() {
        // TODO: test requireHibernateSupport
    }

    /**
     * Test the property 'networkInterfaceCount'
     */
    @Test
    public void networkInterfaceCountTest() {
        // TODO: test networkInterfaceCount
    }

    /**
     * Test the property 'localStorage'
     */
    @Test
    public void localStorageTest() {
        // TODO: test localStorage
    }

    /**
     * Test the property 'localStorageTypes'
     */
    @Test
    public void localStorageTypesTest() {
        // TODO: test localStorageTypes
    }

    /**
     * Test the property 'totalLocalStorageGB'
     */
    @Test
    public void totalLocalStorageGBTest() {
        // TODO: test totalLocalStorageGB
    }

    /**
     * Test the property 'baselineEbsBandwidthMbps'
     */
    @Test
    public void baselineEbsBandwidthMbpsTest() {
        // TODO: test baselineEbsBandwidthMbps
    }

    /**
     * Test the property 'acceleratorTypes'
     */
    @Test
    public void acceleratorTypesTest() {
        // TODO: test acceleratorTypes
    }

    /**
     * Test the property 'acceleratorCount'
     */
    @Test
    public void acceleratorCountTest() {
        // TODO: test acceleratorCount
    }

    /**
     * Test the property 'acceleratorManufacturers'
     */
    @Test
    public void acceleratorManufacturersTest() {
        // TODO: test acceleratorManufacturers
    }

    /**
     * Test the property 'acceleratorNames'
     */
    @Test
    public void acceleratorNamesTest() {
        // TODO: test acceleratorNames
    }

    /**
     * Test the property 'acceleratorTotalMemoryMiB'
     */
    @Test
    public void acceleratorTotalMemoryMiBTest() {
        // TODO: test acceleratorTotalMemoryMiB
    }

    /**
     * Test the property 'networkBandwidthGbps'
     */
    @Test
    public void networkBandwidthGbpsTest() {
        // TODO: test networkBandwidthGbps
    }

    /**
     * Test the property 'allowedInstanceTypes'
     */
    @Test
    public void allowedInstanceTypesTest() {
        // TODO: test allowedInstanceTypes
    }

}
