/*
 * Auto Scaling
 * <fullname>Amazon EC2 Auto Scaling</fullname> <p>Amazon EC2 Auto Scaling is designed to automatically launch and terminate EC2 instances based on user-defined scaling policies, scheduled actions, and health checks.</p> <p>For more information, see the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/\">Amazon EC2 Auto Scaling User Guide</a> and the <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/APIReference/Welcome.html\">Amazon EC2 Auto Scaling API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2011-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivitiesType;
import org.openapitools.client.model.ActivityType;
import org.openapitools.client.model.AttachInstancesQuery;
import org.openapitools.client.model.AttachLoadBalancerTargetGroupsType;
import org.openapitools.client.model.AttachLoadBalancersType;
import org.openapitools.client.model.AttachTrafficSourcesType;
import org.openapitools.client.model.AutoScalingGroupNamesType;
import org.openapitools.client.model.AutoScalingGroupsType;
import org.openapitools.client.model.AutoScalingInstancesType;
import org.openapitools.client.model.BatchDeleteScheduledActionAnswer;
import org.openapitools.client.model.BatchDeleteScheduledActionType;
import org.openapitools.client.model.BatchPutScheduledUpdateGroupActionAnswer;
import org.openapitools.client.model.BatchPutScheduledUpdateGroupActionType;
import org.openapitools.client.model.BlockDeviceMapping;
import org.openapitools.client.model.CancelInstanceRefreshAnswer;
import org.openapitools.client.model.CancelInstanceRefreshType;
import org.openapitools.client.model.CompleteLifecycleActionType;
import org.openapitools.client.model.CreateAutoScalingGroupType;
import org.openapitools.client.model.CreateLaunchConfigurationType;
import org.openapitools.client.model.CreateOrUpdateTagsType;
import org.openapitools.client.model.DeleteAutoScalingGroupType;
import org.openapitools.client.model.DeleteLifecycleHookType;
import org.openapitools.client.model.DeleteNotificationConfigurationType;
import org.openapitools.client.model.DeletePolicyType;
import org.openapitools.client.model.DeleteScheduledActionType;
import org.openapitools.client.model.DeleteTagsType;
import org.openapitools.client.model.DeleteWarmPoolType;
import org.openapitools.client.model.DescribeAccountLimitsAnswer;
import org.openapitools.client.model.DescribeAdjustmentTypesAnswer;
import org.openapitools.client.model.DescribeAutoScalingInstancesType;
import org.openapitools.client.model.DescribeAutoScalingNotificationTypesAnswer;
import org.openapitools.client.model.DescribeInstanceRefreshesAnswer;
import org.openapitools.client.model.DescribeInstanceRefreshesType;
import org.openapitools.client.model.DescribeLifecycleHookTypesAnswer;
import org.openapitools.client.model.DescribeLifecycleHooksAnswer;
import org.openapitools.client.model.DescribeLifecycleHooksType;
import org.openapitools.client.model.DescribeLoadBalancerTargetGroupsRequest;
import org.openapitools.client.model.DescribeLoadBalancerTargetGroupsResponse;
import org.openapitools.client.model.DescribeLoadBalancersRequest;
import org.openapitools.client.model.DescribeLoadBalancersResponse;
import org.openapitools.client.model.DescribeMetricCollectionTypesAnswer;
import org.openapitools.client.model.DescribeNotificationConfigurationsAnswer;
import org.openapitools.client.model.DescribeNotificationConfigurationsType;
import org.openapitools.client.model.DescribePoliciesType;
import org.openapitools.client.model.DescribeScalingActivitiesType;
import org.openapitools.client.model.DescribeScheduledActionsType;
import org.openapitools.client.model.DescribeTagsType;
import org.openapitools.client.model.DescribeTerminationPolicyTypesAnswer;
import org.openapitools.client.model.DescribeTrafficSourcesRequest;
import org.openapitools.client.model.DescribeTrafficSourcesResponse;
import org.openapitools.client.model.DescribeWarmPoolAnswer;
import org.openapitools.client.model.DescribeWarmPoolType;
import org.openapitools.client.model.DetachInstancesAnswer;
import org.openapitools.client.model.DetachInstancesQuery;
import org.openapitools.client.model.DetachLoadBalancerTargetGroupsType;
import org.openapitools.client.model.DetachLoadBalancersType;
import org.openapitools.client.model.DetachTrafficSourcesType;
import org.openapitools.client.model.DisableMetricsCollectionQuery;
import org.openapitools.client.model.EnableMetricsCollectionQuery;
import org.openapitools.client.model.EnterStandbyAnswer;
import org.openapitools.client.model.EnterStandbyQuery;
import org.openapitools.client.model.ExecutePolicyType;
import org.openapitools.client.model.ExitStandbyAnswer;
import org.openapitools.client.model.ExitStandbyQuery;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.GETCreateAutoScalingGroupLaunchTemplateParameter;
import org.openapitools.client.model.GETCreateAutoScalingGroupMixedInstancesPolicyParameter;
import org.openapitools.client.model.GETCreateLaunchConfigurationInstanceMonitoringParameter;
import org.openapitools.client.model.GETCreateLaunchConfigurationMetadataOptionsParameter;
import org.openapitools.client.model.GETPutScalingPolicyPredictiveScalingConfigurationParameter;
import org.openapitools.client.model.GETPutScalingPolicyTargetTrackingConfigurationParameter;
import org.openapitools.client.model.GETPutWarmPoolInstanceReusePolicyParameter;
import org.openapitools.client.model.GETStartInstanceRefreshDesiredConfigurationParameter;
import org.openapitools.client.model.GETStartInstanceRefreshPreferencesParameter;
import org.openapitools.client.model.GetPredictiveScalingForecastAnswer;
import org.openapitools.client.model.GetPredictiveScalingForecastType;
import org.openapitools.client.model.LaunchConfigurationNameType;
import org.openapitools.client.model.LaunchConfigurationNamesType;
import org.openapitools.client.model.LaunchConfigurationsType;
import org.openapitools.client.model.LifecycleHookSpecification;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PoliciesType;
import org.openapitools.client.model.PolicyARNType;
import org.openapitools.client.model.ProcessesType;
import org.openapitools.client.model.PutLifecycleHookType;
import org.openapitools.client.model.PutNotificationConfigurationType;
import org.openapitools.client.model.PutScalingPolicyType;
import org.openapitools.client.model.PutScheduledUpdateGroupActionType;
import org.openapitools.client.model.PutWarmPoolType;
import org.openapitools.client.model.RecordLifecycleActionHeartbeatType;
import org.openapitools.client.model.RollbackInstanceRefreshAnswer;
import org.openapitools.client.model.RollbackInstanceRefreshType;
import org.openapitools.client.model.ScalingProcessQuery;
import org.openapitools.client.model.ScheduledActionsType;
import org.openapitools.client.model.ScheduledUpdateGroupActionRequest;
import org.openapitools.client.model.SetDesiredCapacityType;
import org.openapitools.client.model.SetInstanceHealthQuery;
import org.openapitools.client.model.SetInstanceProtectionQuery;
import org.openapitools.client.model.StartInstanceRefreshAnswer;
import org.openapitools.client.model.StartInstanceRefreshType;
import org.openapitools.client.model.StepAdjustment;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagsType;
import org.openapitools.client.model.TerminateInstanceInAutoScalingGroupType;
import org.openapitools.client.model.TrafficSourceIdentifier;
import org.openapitools.client.model.UpdateAutoScalingGroupType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Attaches one or more EC2 instances to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html\&quot;&gt;Attach EC2 instances to your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAttachInstancesTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> instanceIds = null;
        api.gETAttachInstances(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more target groups to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is used with the following load balancer types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer - Operates at the network layer (layer 3).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To describe the target groups for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API. To detach the target group from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing target groups or Classic Load Balancers from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAttachLoadBalancerTargetGroupsTest() throws ApiException {
        String autoScalingGroupName = null;
        List<String> targetGroupARNs = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETAttachLoadBalancerTargetGroups(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more Classic Load Balancers to the specified Auto Scaling group. Amazon EC2 Auto Scaling registers the running instances with these Classic Load Balancers.&lt;/p&gt; &lt;p&gt;To describe the load balancers for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API. To detach a load balancer from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancers&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing Classic Load Balancers or target groups from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAttachLoadBalancersTest() throws ApiException {
        String autoScalingGroupName = null;
        List<String> loadBalancerNames = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETAttachLoadBalancers(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches one or more traffic sources to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use any of the following as traffic sources for an Auto Scaling group:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Classic Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;VPC Lattice&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is additive and does not detach existing traffic sources from the Auto Scaling group. &lt;/p&gt; &lt;p&gt;After the operation completes, use the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API to return details about the state of the attachments between traffic sources and your Auto Scaling group. To detach a traffic source from the Auto Scaling group, call the &lt;a&gt;DetachTrafficSources&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAttachTrafficSourcesTest() throws ApiException {
        String autoScalingGroupName = null;
        List<TrafficSourceIdentifier> trafficSources = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETAttachTrafficSources(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes one or more scheduled actions for the specified Auto Scaling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETBatchDeleteScheduledActionTest() throws ApiException {
        String autoScalingGroupName = null;
        List<String> scheduledActionNames = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteScheduledActionAnswer response = api.gETBatchDeleteScheduledAction(autoScalingGroupName, scheduledActionNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates one or more scheduled scaling actions for an Auto Scaling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETBatchPutScheduledUpdateGroupActionTest() throws ApiException {
        String autoScalingGroupName = null;
        List<ScheduledUpdateGroupActionRequest> scheduledUpdateGroupActions = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchPutScheduledUpdateGroupActionAnswer response = api.gETBatchPutScheduledUpdateGroupAction(autoScalingGroupName, scheduledUpdateGroupActions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Cancels an instance refresh or rollback that is in progress. If an instance refresh or rollback is not in progress, an &lt;code&gt;ActiveInstanceRefreshNotFound&lt;/code&gt; error occurs.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;When you cancel an instance refresh, this does not roll back any changes that it made. Use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API to roll back instead.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCancelInstanceRefreshTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelInstanceRefreshAnswer response = api.gETCancelInstanceRefresh(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Completes the lifecycle action for the specified token or instance with the specified result.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/completing-lifecycle-hooks.html\&quot;&gt;Complete a lifecycle action&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCompleteLifecycleActionTest() throws ApiException {
        String lifecycleHookName = null;
        String autoScalingGroupName = null;
        String lifecycleActionResult = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String lifecycleActionToken = null;
        String instanceId = null;
        Object response = api.gETCompleteLifecycleAction(lifecycleHookName, autoScalingGroupName, lifecycleActionResult, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;b&gt;We strongly recommend using a launch template when calling this operation to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Creates an Auto Scaling group with the specified name and attributes. &lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For introductory exercises for creating an Auto Scaling group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/GettingStartedTutorial.html\&quot;&gt;Getting started with Amazon EC2 Auto Scaling&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-register-lbs-with-asg.html\&quot;&gt;Tutorial: Set up a scaled and load-balanced application&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html\&quot;&gt;Auto Scaling groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Every Auto Scaling group has three size properties (&lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, and &lt;code&gt;MinSize&lt;/code&gt;). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateAutoScalingGroupTest() throws ApiException {
        String autoScalingGroupName = null;
        Integer minSize = null;
        Integer maxSize = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String launchConfigurationName = null;
        GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate = null;
        GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy = null;
        String instanceId = null;
        Integer desiredCapacity = null;
        Integer defaultCooldown = null;
        List<String> availabilityZones = null;
        List<String> loadBalancerNames = null;
        List<String> targetGroupARNs = null;
        String healthCheckType = null;
        Integer healthCheckGracePeriod = null;
        String placementGroup = null;
        String vpCZoneIdentifier = null;
        List<String> terminationPolicies = null;
        Boolean newInstancesProtectedFromScaleIn = null;
        Boolean capacityRebalance = null;
        List<LifecycleHookSpecification> lifecycleHookSpecificationList = null;
        List<Tag> tags = null;
        String serviceLinkedRoleARN = null;
        Integer maxInstanceLifetime = null;
        String context = null;
        String desiredCapacityType = null;
        Integer defaultInstanceWarmup = null;
        List<TrafficSourceIdentifier> trafficSources = null;
        api.gETCreateAutoScalingGroup(autoScalingGroupName, minSize, maxSize, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, instanceId, desiredCapacity, defaultCooldown, availabilityZones, loadBalancerNames, targetGroupARNs, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, capacityRebalance, lifecycleHookSpecificationList, tags, serviceLinkedRoleARN, maxInstanceLifetime, context, desiredCapacityType, defaultInstanceWarmup, trafficSources);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a launch configuration.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of launch configurations, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html\&quot;&gt;Launch configurations&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group using either a launch template or a launch configuration. We strongly recommend that you do not use launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2. For information about using launch templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html\&quot;&gt;Launch templates&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateLaunchConfigurationTest() throws ApiException {
        String launchConfigurationName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String imageId = null;
        String keyName = null;
        List<String> securityGroups = null;
        String classicLinkVPCId = null;
        List<String> classicLinkVPCSecurityGroups = null;
        String userData = null;
        String instanceId = null;
        String instanceType = null;
        String kernelId = null;
        String ramdiskId = null;
        List<BlockDeviceMapping> blockDeviceMappings = null;
        GETCreateLaunchConfigurationInstanceMonitoringParameter instanceMonitoring = null;
        String spotPrice = null;
        String iamInstanceProfile = null;
        Boolean ebsOptimized = null;
        Boolean associatePublicIpAddress = null;
        String placementTenancy = null;
        GETCreateLaunchConfigurationMetadataOptionsParameter metadataOptions = null;
        api.gETCreateLaunchConfiguration(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, imageId, keyName, securityGroups, classicLinkVPCId, classicLinkVPCSecurityGroups, userData, instanceId, instanceType, kernelId, ramdiskId, blockDeviceMappings, instanceMonitoring, spotPrice, iamInstanceProfile, ebsOptimized, associatePublicIpAddress, placementTenancy, metadataOptions);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates tags for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateOrUpdateTagsTest() throws ApiException {
        List<Tag> tags = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETCreateOrUpdateTags(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed. The force delete operation will also terminate the EC2 instances. If the group has a warm pool, the force delete option also deletes the warm pool.&lt;/p&gt; &lt;p&gt;To remove instances from the Auto Scaling group before deleting it, call the &lt;a&gt;DetachInstances&lt;/a&gt; API with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.&lt;/p&gt; &lt;p&gt;To terminate all instances before deleting the Auto Scaling group, call the &lt;a&gt;UpdateAutoScalingGroup&lt;/a&gt; API and set the minimum size and desired capacity of the Auto Scaling group to zero.&lt;/p&gt; &lt;p&gt;If the group has scaling policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html\&quot;&gt;Delete your Auto Scaling infrastructure&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteAutoScalingGroupTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean forceDelete = null;
        api.gETDeleteAutoScalingGroup(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified launch configuration.&lt;/p&gt; &lt;p&gt;The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteLaunchConfigurationTest() throws ApiException {
        String launchConfigurationName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteLaunchConfiguration(launchConfigurationName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified lifecycle hook.&lt;/p&gt; &lt;p&gt;If there are any outstanding lifecycle actions, they are completed first (&lt;code&gt;ABANDON&lt;/code&gt; for launching instances, &lt;code&gt;CONTINUE&lt;/code&gt; for terminating instances).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteLifecycleHookTest() throws ApiException {
        String lifecycleHookName = null;
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDeleteLifecycleHook(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified notification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteNotificationConfigurationTest() throws ApiException {
        String autoScalingGroupName = null;
        String topicARN = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteNotificationConfiguration(autoScalingGroupName, topicARN, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified scaling policy.&lt;/p&gt; &lt;p&gt;Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html\&quot;&gt;Deleting a scaling policy&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeletePolicyTest() throws ApiException {
        String policyName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String autoScalingGroupName = null;
        api.gETDeletePolicy(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName);
        // TODO: test validations
    }

    /**
     * Deletes the specified scheduled action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteScheduledActionTest() throws ApiException {
        String autoScalingGroupName = null;
        String scheduledActionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteScheduledAction(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteTagsTest() throws ApiException {
        List<Tag> tags = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteTags(tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the warm pool for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteWarmPoolTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean forceDelete = null;
        Object response = api.gETDeleteWarmPool(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the current Amazon EC2 Auto Scaling resource quotas for your account.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeAccountLimitsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountLimitsAnswer response = api.gETDescribeAccountLimits(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the available adjustment types for step scaling and simple scaling policies.&lt;/p&gt; &lt;p&gt;The following adjustment types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExactCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PercentChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeAdjustmentTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAdjustmentTypesAnswer response = api.gETDescribeAdjustmentTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the Auto Scaling groups in the account and Region.&lt;/p&gt; &lt;p&gt;If you specify Auto Scaling group names, the output includes information for only the specified Auto Scaling groups. If you specify filters, the output includes information for only those Auto Scaling groups that meet the filter criteria. If you do not specify group names or filters, the output includes information for all Auto Scaling groups. &lt;/p&gt; &lt;p&gt;This operation also returns information about instances in Auto Scaling groups. To retrieve information about the instances in a warm pool, you must call the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeAutoScalingGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> autoScalingGroupNames = null;
        String nextToken = null;
        Integer maxRecords = null;
        List<Filter> filters = null;
        AutoScalingGroupsType response = api.gETDescribeAutoScalingGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords, filters);
        // TODO: test validations
    }

    /**
     * Gets information about the Auto Scaling instances in the account and Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeAutoScalingInstancesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> instanceIds = null;
        Integer maxRecords = null;
        String nextToken = null;
        AutoScalingInstancesType response = api.gETDescribeAutoScalingInstances(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * Describes the notification types that are supported by Amazon EC2 Auto Scaling.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeAutoScalingNotificationTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAutoScalingNotificationTypesAnswer response = api.gETDescribeAutoScalingNotificationTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the instance refreshes for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;To help you determine the status of an instance refresh, Amazon EC2 Auto Scaling returns information about the instance refreshes you previously initiated, including their status, start time, end time, the percentage of the instance refresh that is complete, and the number of instances remaining to update before the instance refresh is complete. If a rollback is initiated while an instance refresh is in progress, Amazon EC2 Auto Scaling also returns information about the rollback of the instance refresh.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeInstanceRefreshesTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> instanceRefreshIds = null;
        String nextToken = null;
        Integer maxRecords = null;
        DescribeInstanceRefreshesAnswer response = api.gETDescribeInstanceRefreshes(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceRefreshIds, nextToken, maxRecords);
        // TODO: test validations
    }

    /**
     * Gets information about the launch configurations in the account and Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeLaunchConfigurationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> launchConfigurationNames = null;
        String nextToken = null;
        Integer maxRecords = null;
        LaunchConfigurationsType response = api.gETDescribeLaunchConfigurations(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNames, nextToken, maxRecords);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the available types of lifecycle hooks.&lt;/p&gt; &lt;p&gt;The following hook types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeLifecycleHookTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLifecycleHookTypesAnswer response = api.gETDescribeLifecycleHookTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the lifecycle hooks for the specified Auto Scaling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeLifecycleHooksTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> lifecycleHookNames = null;
        DescribeLifecycleHooksAnswer response = api.gETDescribeLifecycleHooks(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleHookNames);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the Elastic Load Balancing target groups for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the target group, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a target group to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the target group. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the target group is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the target group doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Target groups also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your target group state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to describe target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeLoadBalancerTargetGroupsTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxRecords = null;
        DescribeLoadBalancerTargetGroupsResponse response = api.gETDescribeLoadBalancerTargetGroups(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DescribeTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the load balancers for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation describes only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the load balancer, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a load balancer to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the load balancer. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the load balancer is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the load balancer doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Load balancers also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your load balancer state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeLoadBalancersTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxRecords = null;
        DescribeLoadBalancersResponse response = api.gETDescribeLoadBalancers(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxRecords);
        // TODO: test validations
    }

    /**
     * Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeMetricCollectionTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMetricCollectionTypesAnswer response = api.gETDescribeMetricCollectionTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the Amazon SNS notifications that are configured for one or more Auto Scaling groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeNotificationConfigurationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> autoScalingGroupNames = null;
        String nextToken = null;
        Integer maxRecords = null;
        DescribeNotificationConfigurationsAnswer response = api.gETDescribeNotificationConfigurations(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupNames, nextToken, maxRecords);
        // TODO: test validations
    }

    /**
     * Gets information about the scaling policies in the account and Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribePoliciesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String autoScalingGroupName = null;
        List<String> policyNames = null;
        List<String> policyTypes = null;
        String nextToken = null;
        Integer maxRecords = null;
        PoliciesType response = api.gETDescribePolicies(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, policyNames, policyTypes, nextToken, maxRecords);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the scaling activities in the account and Region.&lt;/p&gt; &lt;p&gt;When scaling events occur, you see a record of the scaling activity in the scaling activities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html\&quot;&gt;Verifying a scaling activity for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the scaling event succeeds, the value of the &lt;code&gt;StatusCode&lt;/code&gt; element in the response is &lt;code&gt;Successful&lt;/code&gt;. If an attempt to launch instances failed, the &lt;code&gt;StatusCode&lt;/code&gt; value is &lt;code&gt;Failed&lt;/code&gt; or &lt;code&gt;Cancelled&lt;/code&gt; and the &lt;code&gt;StatusMessage&lt;/code&gt; element in the response indicates the cause of the failure. For help interpreting the &lt;code&gt;StatusMessage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/CHAP_Troubleshooting.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeScalingActivitiesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> activityIds = null;
        String autoScalingGroupName = null;
        Boolean includeDeletedGroups = null;
        Integer maxRecords = null;
        String nextToken = null;
        ActivitiesType response = api.gETDescribeScalingActivities(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, activityIds, autoScalingGroupName, includeDeletedGroups, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * Describes the scaling process types for use with the &lt;a&gt;ResumeProcesses&lt;/a&gt; and &lt;a&gt;SuspendProcesses&lt;/a&gt; APIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeScalingProcessTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ProcessesType response = api.gETDescribeScalingProcessTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the scheduled actions that haven&#39;t run or that have not reached their end time.&lt;/p&gt; &lt;p&gt;To describe the scaling activities for scheduled actions that have already run, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeScheduledActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String autoScalingGroupName = null;
        List<String> scheduledActionNames = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String nextToken = null;
        Integer maxRecords = null;
        ScheduledActionsType response = api.gETDescribeScheduledActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, scheduledActionNames, startTime, endTime, nextToken, maxRecords);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the specified tags.&lt;/p&gt; &lt;p&gt;You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.&lt;/p&gt; &lt;p&gt;You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there&#39;s no match, no special message is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<Filter> filters = null;
        String nextToken = null;
        Integer maxRecords = null;
        TagsType response = api.gETDescribeTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, filters, nextToken, maxRecords);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the termination policies supported by Amazon EC2 Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeTerminationPolicyTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTerminationPolicyTypesAnswer response = api.gETDescribeTerminationPolicyTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the traffic sources for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can optionally provide a traffic source type. If you provide a traffic source type, then the results only include that traffic source type.&lt;/p&gt; &lt;p&gt;If you do not provide a traffic source type, then the results include all the traffic sources for the specified Auto Scaling group. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeTrafficSourcesTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String trafficSourceType = null;
        String nextToken = null;
        Integer maxRecords = null;
        DescribeTrafficSourcesResponse response = api.gETDescribeTrafficSources(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, trafficSourceType, nextToken, maxRecords);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about a warm pool and its instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeWarmPoolTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxRecords = null;
        String nextToken = null;
        DescribeWarmPoolAnswer response = api.gETDescribeWarmPool(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes one or more instances from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;After the instances are detached, you can manage them independent of the Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html\&quot;&gt;Detach EC2 instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDetachInstancesTest() throws ApiException {
        String autoScalingGroupName = null;
        Boolean shouldDecrementDesiredCapacity = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> instanceIds = null;
        DetachInstancesAnswer response = api.gETDetachInstances(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more target groups from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a target group, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API call. The instances remain running.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to detach target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDetachLoadBalancerTargetGroupsTest() throws ApiException {
        String autoScalingGroupName = null;
        List<String> targetGroupARNs = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDetachLoadBalancerTargetGroups(autoScalingGroupName, targetGroupARNs, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more Classic Load Balancers from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation detaches only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;When you detach a load balancer, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API call. The instances remain running.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDetachLoadBalancersTest() throws ApiException {
        String autoScalingGroupName = null;
        List<String> loadBalancerNames = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDetachLoadBalancers(autoScalingGroupName, loadBalancerNames, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Detaches one or more traffic sources from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a traffic source, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the traffic source using the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API call. The instances continue to run.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDetachTrafficSourcesTest() throws ApiException {
        String autoScalingGroupName = null;
        List<TrafficSourceIdentifier> trafficSources = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETDetachTrafficSources(autoScalingGroupName, trafficSources, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables group metrics collection for the specified Auto Scaling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDisableMetricsCollectionTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> metrics = null;
        api.gETDisableMetricsCollection(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables group metrics collection for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use these metrics to track changes in an Auto Scaling group and to set alarms on threshold values. You can view group metrics using the Amazon EC2 Auto Scaling console or the CloudWatch console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html\&quot;&gt;Monitor CloudWatch metrics for your Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETEnableMetricsCollectionTest() throws ApiException {
        String autoScalingGroupName = null;
        String granularity = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> metrics = null;
        api.gETEnableMetricsCollection(autoScalingGroupName, granularity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, metrics);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Moves the specified instances into the standby state.&lt;/p&gt; &lt;p&gt;If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.&lt;/p&gt; &lt;p&gt;If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETEnterStandbyTest() throws ApiException {
        String autoScalingGroupName = null;
        Boolean shouldDecrementDesiredCapacity = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> instanceIds = null;
        EnterStandbyAnswer response = api.gETEnterStandby(autoScalingGroupName, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds);
        // TODO: test validations
    }

    /**
     * Executes the specified policy. This can be useful for testing the design of your scaling policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETExecutePolicyTest() throws ApiException {
        String policyName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String autoScalingGroupName = null;
        Boolean honorCooldown = null;
        Double metricValue = null;
        Double breachThreshold = null;
        api.gETExecutePolicy(policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, autoScalingGroupName, honorCooldown, metricValue, breachThreshold);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Moves the specified instances out of the standby state.&lt;/p&gt; &lt;p&gt;After you put the instances back in service, the desired capacity is incremented.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETExitStandbyTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> instanceIds = null;
        ExitStandbyAnswer response = api.gETExitStandby(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, instanceIds);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the forecast data for a predictive scaling policy.&lt;/p&gt; &lt;p&gt;Load forecasts are predictions of the hourly load values using historical load data from CloudWatch and an analysis of historical trends. Capacity forecasts are represented as predicted values for the minimum capacity that is needed on an hourly basis, based on the hourly load forecast.&lt;/p&gt; &lt;p&gt;A minimum of 24 hours of data is required to create the initial forecasts. However, having a full 14 days of historical data results in more accurate forecasts.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetPredictiveScalingForecastTest() throws ApiException {
        String autoScalingGroupName = null;
        String policyName = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPredictiveScalingForecastAnswer response = api.gETGetPredictiveScalingForecast(autoScalingGroupName, policyName, startTime, endTime, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates a lifecycle hook for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;Lifecycle hooks let you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state using the &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.&lt;/p&gt; &lt;p&gt;You can view the lifecycle hooks for an Auto Scaling group using the &lt;a&gt;DescribeLifecycleHooks&lt;/a&gt; API call. If you are no longer using a lifecycle hook, you can delete it by calling the &lt;a&gt;DeleteLifecycleHook&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPutLifecycleHookTest() throws ApiException {
        String lifecycleHookName = null;
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String lifecycleTransition = null;
        String roleARN = null;
        String notificationTargetARN = null;
        String notificationMetadata = null;
        Integer heartbeatTimeout = null;
        String defaultResult = null;
        Object response = api.gETPutLifecycleHook(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleTransition, roleARN, notificationTargetARN, notificationMetadata, heartbeatTimeout, defaultResult);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.&lt;/p&gt; &lt;p&gt;This configuration overwrites any existing configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html\&quot;&gt;Getting Amazon SNS notifications when your Auto Scaling group scales&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of SNS topics, which is 10 per Auto Scaling group, the call fails.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPutNotificationConfigurationTest() throws ApiException {
        String autoScalingGroupName = null;
        String topicARN = null;
        List<String> notificationTypes = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETPutNotificationConfiguration(autoScalingGroupName, topicARN, notificationTypes, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates a scaling policy for an Auto Scaling group. Scaling policies are used to scale an Auto Scaling group based on configurable metrics. If no policies are defined, the dynamic scaling and predictive scaling features are not used. &lt;/p&gt; &lt;p&gt;For more information about using dynamic scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html\&quot;&gt;Target tracking scaling policies&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html\&quot;&gt;Step and simple scaling policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about using predictive scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scaling policies for an Auto Scaling group using the &lt;a&gt;DescribePolicies&lt;/a&gt; API call. If you are no longer using a scaling policy, you can delete it by calling the &lt;a&gt;DeletePolicy&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPutScalingPolicyTest() throws ApiException {
        String autoScalingGroupName = null;
        String policyName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String policyType = null;
        String adjustmentType = null;
        Integer minAdjustmentStep = null;
        Integer minAdjustmentMagnitude = null;
        Integer scalingAdjustment = null;
        Integer cooldown = null;
        String metricAggregationType = null;
        List<StepAdjustment> stepAdjustments = null;
        Integer estimatedInstanceWarmup = null;
        GETPutScalingPolicyTargetTrackingConfigurationParameter targetTrackingConfiguration = null;
        Boolean enabled = null;
        GETPutScalingPolicyPredictiveScalingConfigurationParameter predictiveScalingConfiguration = null;
        PolicyARNType response = api.gETPutScalingPolicy(autoScalingGroupName, policyName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, policyType, adjustmentType, minAdjustmentStep, minAdjustmentMagnitude, scalingAdjustment, cooldown, metricAggregationType, stepAdjustments, estimatedInstanceWarmup, targetTrackingConfiguration, enabled, predictiveScalingConfiguration);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates a scheduled scaling action for an Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html\&quot;&gt;Scheduled scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scheduled actions for an Auto Scaling group using the &lt;a&gt;DescribeScheduledActions&lt;/a&gt; API call. If you are no longer using a scheduled action, you can delete it by calling the &lt;a&gt;DeleteScheduledAction&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPutScheduledUpdateGroupActionTest() throws ApiException {
        String autoScalingGroupName = null;
        String scheduledActionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        OffsetDateTime time = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String recurrence = null;
        Integer minSize = null;
        Integer maxSize = null;
        Integer desiredCapacity = null;
        String timeZone = null;
        api.gETPutScheduledUpdateGroupAction(autoScalingGroupName, scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, time, startTime, endTime, recurrence, minSize, maxSize, desiredCapacity, timeZone);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration that requests Spot Instances.&lt;/p&gt; &lt;p&gt;You can view the instances in the warm pool using the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API call. If you are no longer using a warm pool, you can delete it by calling the &lt;a&gt;DeleteWarmPool&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPutWarmPoolTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxGroupPreparedCapacity = null;
        Integer minSize = null;
        String poolState = null;
        GETPutWarmPoolInstanceReusePolicyParameter instanceReusePolicy = null;
        Object response = api.gETPutWarmPool(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxGroupPreparedCapacity, minSize, poolState, instanceReusePolicy);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the &lt;a&gt;PutLifecycleHook&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRecordLifecycleActionHeartbeatTest() throws ApiException {
        String lifecycleHookName = null;
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String lifecycleActionToken = null;
        String instanceId = null;
        Object response = api.gETRecordLifecycleActionHeartbeat(lifecycleHookName, autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lifecycleActionToken, instanceId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETResumeProcessesTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> scalingProcesses = null;
        api.gETResumeProcesses(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Cancels an instance refresh that is in progress and rolls back any changes that it made. Amazon EC2 Auto Scaling replaces any instances that were replaced during the instance refresh. This restores your Auto Scaling group to the configuration that it was using before the start of the instance refresh. &lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;A rollback is not supported in the following situations: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There is no desired configuration specified for the instance refresh.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the &lt;code&gt;ImageId&lt;/code&gt; property.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group uses the launch template&#39;s &lt;code&gt;$Latest&lt;/code&gt; or &lt;code&gt;$Default&lt;/code&gt; version.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon EC2 Auto Scaling immediately begins replacing instances. You can check the status of this operation through the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API operation. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRollbackInstanceRefreshTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RollbackInstanceRefreshAnswer response = api.gETRollbackInstanceRefresh(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the size of the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-manual-scaling.html\&quot;&gt;Manual scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetDesiredCapacityTest() throws ApiException {
        String autoScalingGroupName = null;
        Integer desiredCapacity = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean honorCooldown = null;
        api.gETSetDesiredCapacity(autoScalingGroupName, desiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, honorCooldown);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the health status of the specified instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetInstanceHealthTest() throws ApiException {
        String instanceId = null;
        String healthStatus = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean shouldRespectGracePeriod = null;
        api.gETSetInstanceHealth(instanceId, healthStatus, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, shouldRespectGracePeriod);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the instance protection settings of the specified instances. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of instance IDs, which is 50 per Auto Scaling group, the call fails.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSetInstanceProtectionTest() throws ApiException {
        List<String> instanceIds = null;
        String autoScalingGroupName = null;
        Boolean protectedFromScaleIn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.gETSetInstanceProtection(instanceIds, autoScalingGroupName, protectedFromScaleIn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts an instance refresh. During an instance refresh, Amazon EC2 Auto Scaling performs a rolling update of instances in an Auto Scaling group. Instances are terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. &lt;/p&gt; &lt;p&gt;If successful, the request&#39;s response contains a unique ID that you can use to track the progress of the instance refresh. To query its status, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To describe the instance refreshes that have already run, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To cancel an instance refresh that is in progress, use the &lt;a&gt;CancelInstanceRefresh&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt;An instance refresh might fail for several reasons, such as EC2 launch failures, misconfigured health checks, or not ignoring or allowing the termination of instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in. You can monitor for failed EC2 launches using the scaling activities. To find the scaling activities, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you enable auto rollback, your Auto Scaling group will be rolled back automatically when the instance refresh fails. You can enable this feature before starting an instance refresh by specifying the &lt;code&gt;AutoRollback&lt;/code&gt; property in the instance refresh preferences. Otherwise, to roll back an instance refresh before it finishes, use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETStartInstanceRefreshTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String strategy = null;
        GETStartInstanceRefreshDesiredConfigurationParameter desiredConfiguration = null;
        GETStartInstanceRefreshPreferencesParameter preferences = null;
        StartInstanceRefreshAnswer response = api.gETStartInstanceRefresh(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, strategy, desiredConfiguration, preferences);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Suspends the specified auto scaling processes, or all processes, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you suspend either the &lt;code&gt;Launch&lt;/code&gt; or &lt;code&gt;Terminate&lt;/code&gt; process types, it can prevent other process types from functioning properly. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To resume processes that have been suspended, call the &lt;a&gt;ResumeProcesses&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETSuspendProcessesTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> scalingProcesses = null;
        api.gETSuspendProcesses(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcesses);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Terminates the specified instance and optionally adjusts the desired group size. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to &lt;code&gt;terminated&lt;/code&gt;. You can&#39;t connect to or start an instance after you&#39;ve terminated it.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. &lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage\&quot;&gt;Rebalancing activities&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETTerminateInstanceInAutoScalingGroupTest() throws ApiException {
        String instanceId = null;
        Boolean shouldDecrementDesiredCapacity = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ActivityType response = api.gETTerminateInstanceInAutoScalingGroup(instanceId, shouldDecrementDesiredCapacity, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;b&gt;We strongly recommend that all Auto Scaling groups use launch templates to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Updates the configuration for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To update an Auto Scaling group, specify the name of the group and the property that you want to change. Any properties that you don&#39;t specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. &lt;/p&gt; &lt;p&gt;If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.&lt;/p&gt; &lt;p&gt;Note the following about changing &lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, or &lt;code&gt;MinSize&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MinSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MinSize&lt;/code&gt; is larger than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MinSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MaxSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MaxSize&lt;/code&gt; is smaller than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MaxSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which properties have been set, call the &lt;a&gt;DescribeAutoScalingGroups&lt;/a&gt; API. To view the scaling policies for an Auto Scaling group, call the &lt;a&gt;DescribePolicies&lt;/a&gt; API. If the group has scaling policies, you can update them by calling the &lt;a&gt;PutScalingPolicy&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETUpdateAutoScalingGroupTest() throws ApiException {
        String autoScalingGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String launchConfigurationName = null;
        GETCreateAutoScalingGroupLaunchTemplateParameter launchTemplate = null;
        GETCreateAutoScalingGroupMixedInstancesPolicyParameter mixedInstancesPolicy = null;
        Integer minSize = null;
        Integer maxSize = null;
        Integer desiredCapacity = null;
        Integer defaultCooldown = null;
        List<String> availabilityZones = null;
        String healthCheckType = null;
        Integer healthCheckGracePeriod = null;
        String placementGroup = null;
        String vpCZoneIdentifier = null;
        List<String> terminationPolicies = null;
        Boolean newInstancesProtectedFromScaleIn = null;
        String serviceLinkedRoleARN = null;
        Integer maxInstanceLifetime = null;
        Boolean capacityRebalance = null;
        String context = null;
        String desiredCapacityType = null;
        Integer defaultInstanceWarmup = null;
        api.gETUpdateAutoScalingGroup(autoScalingGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationName, launchTemplate, mixedInstancesPolicy, minSize, maxSize, desiredCapacity, defaultCooldown, availabilityZones, healthCheckType, healthCheckGracePeriod, placementGroup, vpCZoneIdentifier, terminationPolicies, newInstancesProtectedFromScaleIn, serviceLinkedRoleARN, maxInstanceLifetime, capacityRebalance, context, desiredCapacityType, defaultInstanceWarmup);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches one or more EC2 instances to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you attach instances, Amazon EC2 Auto Scaling increases the desired capacity of the group by the number of instances being attached. If the number of instances being attached plus the desired capacity of the group exceeds the maximum size of the group, the operation fails.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to your Auto Scaling group, the instances are also registered with the load balancer. If there are target groups attached to your Auto Scaling group, the instances are also registered with the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/attach-instance-asg.html\&quot;&gt;Attach EC2 instances to your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAttachInstancesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachInstancesQuery attachInstancesQuery = null;
        api.pOSTAttachInstances(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachInstancesQuery);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more target groups to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is used with the following load balancer types: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer - Operates at the application layer (layer 7) and supports HTTP and HTTPS. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer - Operates at the transport layer (layer 4) and supports TCP, TLS, and UDP. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer - Operates at the network layer (layer 3).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To describe the target groups for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API. To detach the target group from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing target groups or Classic Load Balancers from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAttachLoadBalancerTargetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachLoadBalancerTargetGroupsType attachLoadBalancerTargetGroupsType = null;
        Object response = api.pOSTAttachLoadBalancerTargetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancerTargetGroupsType);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;AttachTrafficSources&lt;/a&gt;, which can attach multiple traffic sources types. We recommend using &lt;code&gt;AttachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;AttachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;AttachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;AttachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Attaches one or more Classic Load Balancers to the specified Auto Scaling group. Amazon EC2 Auto Scaling registers the running instances with these Classic Load Balancers.&lt;/p&gt; &lt;p&gt;To describe the load balancers for an Auto Scaling group, call the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API. To detach a load balancer from the Auto Scaling group, call the &lt;a&gt;DetachLoadBalancers&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;This operation is additive and does not detach existing Classic Load Balancers or target groups from the Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAttachLoadBalancersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachLoadBalancersType attachLoadBalancersType = null;
        Object response = api.pOSTAttachLoadBalancers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachLoadBalancersType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches one or more traffic sources to the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use any of the following as traffic sources for an Auto Scaling group:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Application Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Classic Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Gateway Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Network Load Balancer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;VPC Lattice&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This operation is additive and does not detach existing traffic sources from the Auto Scaling group. &lt;/p&gt; &lt;p&gt;After the operation completes, use the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API to return details about the state of the attachments between traffic sources and your Auto Scaling group. To detach a traffic source from the Auto Scaling group, call the &lt;a&gt;DetachTrafficSources&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAttachTrafficSourcesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachTrafficSourcesType attachTrafficSourcesType = null;
        Object response = api.pOSTAttachTrafficSources(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attachTrafficSourcesType);
        // TODO: test validations
    }

    /**
     * Deletes one or more scheduled actions for the specified Auto Scaling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTBatchDeleteScheduledActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteScheduledActionType batchDeleteScheduledActionType = null;
        BatchDeleteScheduledActionAnswer response = api.pOSTBatchDeleteScheduledAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDeleteScheduledActionType);
        // TODO: test validations
    }

    /**
     * Creates or updates one or more scheduled scaling actions for an Auto Scaling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTBatchPutScheduledUpdateGroupActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchPutScheduledUpdateGroupActionType batchPutScheduledUpdateGroupActionType = null;
        BatchPutScheduledUpdateGroupActionAnswer response = api.pOSTBatchPutScheduledUpdateGroupAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchPutScheduledUpdateGroupActionType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Cancels an instance refresh or rollback that is in progress. If an instance refresh or rollback is not in progress, an &lt;code&gt;ActiveInstanceRefreshNotFound&lt;/code&gt; error occurs.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;When you cancel an instance refresh, this does not roll back any changes that it made. Use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API to roll back instead.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCancelInstanceRefreshTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelInstanceRefreshType cancelInstanceRefreshType = null;
        CancelInstanceRefreshAnswer response = api.pOSTCancelInstanceRefresh(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelInstanceRefreshType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Completes the lifecycle action for the specified token or instance with the specified result.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/completing-lifecycle-hooks.html\&quot;&gt;Complete a lifecycle action&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCompleteLifecycleActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CompleteLifecycleActionType completeLifecycleActionType = null;
        Object response = api.pOSTCompleteLifecycleAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeLifecycleActionType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;b&gt;We strongly recommend using a launch template when calling this operation to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Creates an Auto Scaling group with the specified name and attributes. &lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of Auto Scaling groups, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For introductory exercises for creating an Auto Scaling group, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/GettingStartedTutorial.html\&quot;&gt;Getting started with Amazon EC2 Auto Scaling&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-register-lbs-with-asg.html\&quot;&gt;Tutorial: Set up a scaled and load-balanced application&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html\&quot;&gt;Auto Scaling groups&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Every Auto Scaling group has three size properties (&lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, and &lt;code&gt;MinSize&lt;/code&gt;). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateAutoScalingGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAutoScalingGroupType createAutoScalingGroupType = null;
        api.pOSTCreateAutoScalingGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAutoScalingGroupType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a launch configuration.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of launch configurations, the call fails. To query this limit, call the &lt;a&gt;DescribeAccountLimits&lt;/a&gt; API. For information about updating this limit, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/LaunchConfiguration.html\&quot;&gt;Launch configurations&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 Auto Scaling configures instances launched as part of an Auto Scaling group using either a launch template or a launch configuration. We strongly recommend that you do not use launch configurations. They do not provide full functionality for Amazon EC2 Auto Scaling or Amazon EC2. For information about using launch templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html\&quot;&gt;Launch templates&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateLaunchConfigurationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLaunchConfigurationType createLaunchConfigurationType = null;
        api.pOSTCreateLaunchConfiguration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createLaunchConfigurationType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates tags for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you specify a tag with a key that already exists, the operation overwrites the previous tag definition, and you do not get an error message.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateOrUpdateTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateOrUpdateTagsType createOrUpdateTagsType = null;
        api.pOSTCreateOrUpdateTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createOrUpdateTagsType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If the group has instances or scaling activities in progress, you must specify the option to force the deletion in order for it to succeed. The force delete operation will also terminate the EC2 instances. If the group has a warm pool, the force delete option also deletes the warm pool.&lt;/p&gt; &lt;p&gt;To remove instances from the Auto Scaling group before deleting it, call the &lt;a&gt;DetachInstances&lt;/a&gt; API with the list of instances and the option to decrement the desired capacity. This ensures that Amazon EC2 Auto Scaling does not launch replacement instances.&lt;/p&gt; &lt;p&gt;To terminate all instances before deleting the Auto Scaling group, call the &lt;a&gt;UpdateAutoScalingGroup&lt;/a&gt; API and set the minimum size and desired capacity of the Auto Scaling group to zero.&lt;/p&gt; &lt;p&gt;If the group has scaling policies, deleting the group deletes the policies, the underlying alarm actions, and any alarm that no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-process-shutdown.html\&quot;&gt;Delete your Auto Scaling infrastructure&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteAutoScalingGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAutoScalingGroupType deleteAutoScalingGroupType = null;
        api.pOSTDeleteAutoScalingGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAutoScalingGroupType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified launch configuration.&lt;/p&gt; &lt;p&gt;The launch configuration must not be attached to an Auto Scaling group. When this call completes, the launch configuration is no longer available for use.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteLaunchConfigurationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        LaunchConfigurationNameType launchConfigurationNameType = null;
        api.pOSTDeleteLaunchConfiguration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, launchConfigurationNameType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified lifecycle hook.&lt;/p&gt; &lt;p&gt;If there are any outstanding lifecycle actions, they are completed first (&lt;code&gt;ABANDON&lt;/code&gt; for launching instances, &lt;code&gt;CONTINUE&lt;/code&gt; for terminating instances).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteLifecycleHookTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteLifecycleHookType deleteLifecycleHookType = null;
        Object response = api.pOSTDeleteLifecycleHook(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteLifecycleHookType);
        // TODO: test validations
    }

    /**
     * Deletes the specified notification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteNotificationConfigurationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteNotificationConfigurationType deleteNotificationConfigurationType = null;
        api.pOSTDeleteNotificationConfiguration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteNotificationConfigurationType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified scaling policy.&lt;/p&gt; &lt;p&gt;Deleting either a step scaling policy or a simple scaling policy deletes the underlying alarm action, but does not delete the alarm, even if it no longer has an associated action.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/deleting-scaling-policy.html\&quot;&gt;Deleting a scaling policy&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeletePolicyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeletePolicyType deletePolicyType = null;
        api.pOSTDeletePolicy(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deletePolicyType);
        // TODO: test validations
    }

    /**
     * Deletes the specified scheduled action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteScheduledActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteScheduledActionType deleteScheduledActionType = null;
        api.pOSTDeleteScheduledAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteScheduledActionType);
        // TODO: test validations
    }

    /**
     * Deletes the specified tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTagsType deleteTagsType = null;
        api.pOSTDeleteTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTagsType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the warm pool for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteWarmPoolTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteWarmPoolType deleteWarmPoolType = null;
        Object response = api.pOSTDeleteWarmPool(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteWarmPoolType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the current Amazon EC2 Auto Scaling resource quotas for your account.&lt;/p&gt; &lt;p&gt;When you establish an Amazon Web Services account, the account has initial quotas on the maximum number of Auto Scaling groups and launch configurations that you can create in a given Region. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-quotas.html\&quot;&gt;Quotas for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeAccountLimitsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountLimitsAnswer response = api.pOSTDescribeAccountLimits(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the available adjustment types for step scaling and simple scaling policies.&lt;/p&gt; &lt;p&gt;The following adjustment types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ExactCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PercentChangeInCapacity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeAdjustmentTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAdjustmentTypesAnswer response = api.pOSTDescribeAdjustmentTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the Auto Scaling groups in the account and Region.&lt;/p&gt; &lt;p&gt;If you specify Auto Scaling group names, the output includes information for only the specified Auto Scaling groups. If you specify filters, the output includes information for only those Auto Scaling groups that meet the filter criteria. If you do not specify group names or filters, the output includes information for all Auto Scaling groups. &lt;/p&gt; &lt;p&gt;This operation also returns information about instances in Auto Scaling groups. To retrieve information about the instances in a warm pool, you must call the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeAutoScalingGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        AutoScalingGroupNamesType autoScalingGroupNamesType = null;
        AutoScalingGroupsType response = api.pOSTDescribeAutoScalingGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, autoScalingGroupNamesType);
        // TODO: test validations
    }

    /**
     * Gets information about the Auto Scaling instances in the account and Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeAutoScalingInstancesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeAutoScalingInstancesType describeAutoScalingInstancesType = null;
        AutoScalingInstancesType response = api.pOSTDescribeAutoScalingInstances(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeAutoScalingInstancesType);
        // TODO: test validations
    }

    /**
     * Describes the notification types that are supported by Amazon EC2 Auto Scaling.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeAutoScalingNotificationTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAutoScalingNotificationTypesAnswer response = api.pOSTDescribeAutoScalingNotificationTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the instance refreshes for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;To help you determine the status of an instance refresh, Amazon EC2 Auto Scaling returns information about the instance refreshes you previously initiated, including their status, start time, end time, the percentage of the instance refresh that is complete, and the number of instances remaining to update before the instance refresh is complete. If a rollback is initiated while an instance refresh is in progress, Amazon EC2 Auto Scaling also returns information about the rollback of the instance refresh.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeInstanceRefreshesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInstanceRefreshesType describeInstanceRefreshesType = null;
        DescribeInstanceRefreshesAnswer response = api.pOSTDescribeInstanceRefreshes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeInstanceRefreshesType);
        // TODO: test validations
    }

    /**
     * Gets information about the launch configurations in the account and Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeLaunchConfigurationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        LaunchConfigurationNamesType launchConfigurationNamesType = null;
        LaunchConfigurationsType response = api.pOSTDescribeLaunchConfigurations(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, launchConfigurationNamesType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the available types of lifecycle hooks.&lt;/p&gt; &lt;p&gt;The following hook types are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_LAUNCHING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;autoscaling:EC2_INSTANCE_TERMINATING&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeLifecycleHookTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLifecycleHookTypesAnswer response = api.pOSTDescribeLifecycleHookTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the lifecycle hooks for the specified Auto Scaling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeLifecycleHooksTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLifecycleHooksType describeLifecycleHooksType = null;
        DescribeLifecycleHooksAnswer response = api.pOSTDescribeLifecycleHooks(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLifecycleHooksType);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the Elastic Load Balancing target groups for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the target group, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a target group to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the target group. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the target group is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the target group doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Target groups also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your target group state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to describe target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeLoadBalancerTargetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLoadBalancerTargetGroupsRequest describeLoadBalancerTargetGroupsRequest = null;
        DescribeLoadBalancerTargetGroupsResponse response = api.pOSTDescribeLoadBalancerTargetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancerTargetGroupsRequest);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DescribeTrafficSources&lt;/a&gt;, which can describe multiple traffic sources types. We recommend using &lt;code&gt;DescribeTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DescribeLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DescribeLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DescribeTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Gets information about the load balancers for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation describes only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;To determine the attachment status of the load balancer, use the &lt;code&gt;State&lt;/code&gt; element in the response. When you attach a load balancer to an Auto Scaling group, the initial &lt;code&gt;State&lt;/code&gt; value is &lt;code&gt;Adding&lt;/code&gt;. The state transitions to &lt;code&gt;Added&lt;/code&gt; after all Auto Scaling instances are registered with the load balancer. If Elastic Load Balancing health checks are enabled for the Auto Scaling group, the state transitions to &lt;code&gt;InService&lt;/code&gt; after at least one Auto Scaling instance passes the health check. When the load balancer is in the &lt;code&gt;InService&lt;/code&gt; state, Amazon EC2 Auto Scaling can terminate and replace any instances that are reported as unhealthy. If no registered instances pass the health checks, the load balancer doesn&#39;t enter the &lt;code&gt;InService&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt;Load balancers also have an &lt;code&gt;InService&lt;/code&gt; state if you attach them in the &lt;a&gt;CreateAutoScalingGroup&lt;/a&gt; API call. If your load balancer state is &lt;code&gt;InService&lt;/code&gt;, but it is not working properly, check the scaling activities by calling &lt;a&gt;DescribeScalingActivities&lt;/a&gt; and take any corrective actions necessary.&lt;/p&gt; &lt;p&gt;For help with failed health checks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ts-as-healthchecks.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling: Health checks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html\&quot;&gt;Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeLoadBalancersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLoadBalancersRequest describeLoadBalancersRequest = null;
        DescribeLoadBalancersResponse response = api.pOSTDescribeLoadBalancers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoadBalancersRequest);
        // TODO: test validations
    }

    /**
     * Describes the available CloudWatch metrics for Amazon EC2 Auto Scaling.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeMetricCollectionTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMetricCollectionTypesAnswer response = api.pOSTDescribeMetricCollectionTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the Amazon SNS notifications that are configured for one or more Auto Scaling groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeNotificationConfigurationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeNotificationConfigurationsType describeNotificationConfigurationsType = null;
        DescribeNotificationConfigurationsAnswer response = api.pOSTDescribeNotificationConfigurations(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeNotificationConfigurationsType);
        // TODO: test validations
    }

    /**
     * Gets information about the scaling policies in the account and Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribePoliciesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribePoliciesType describePoliciesType = null;
        PoliciesType response = api.pOSTDescribePolicies(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describePoliciesType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the scaling activities in the account and Region.&lt;/p&gt; &lt;p&gt;When scaling events occur, you see a record of the scaling activity in the scaling activities. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-verify-scaling-activity.html\&quot;&gt;Verifying a scaling activity for an Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the scaling event succeeds, the value of the &lt;code&gt;StatusCode&lt;/code&gt; element in the response is &lt;code&gt;Successful&lt;/code&gt;. If an attempt to launch instances failed, the &lt;code&gt;StatusCode&lt;/code&gt; value is &lt;code&gt;Failed&lt;/code&gt; or &lt;code&gt;Cancelled&lt;/code&gt; and the &lt;code&gt;StatusMessage&lt;/code&gt; element in the response indicates the cause of the failure. For help interpreting the &lt;code&gt;StatusMessage&lt;/code&gt;, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/CHAP_Troubleshooting.html\&quot;&gt;Troubleshooting Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeScalingActivitiesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeScalingActivitiesType describeScalingActivitiesType = null;
        ActivitiesType response = api.pOSTDescribeScalingActivities(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScalingActivitiesType);
        // TODO: test validations
    }

    /**
     * Describes the scaling process types for use with the &lt;a&gt;ResumeProcesses&lt;/a&gt; and &lt;a&gt;SuspendProcesses&lt;/a&gt; APIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeScalingProcessTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ProcessesType response = api.pOSTDescribeScalingProcessTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the scheduled actions that haven&#39;t run or that have not reached their end time.&lt;/p&gt; &lt;p&gt;To describe the scaling activities for scheduled actions that have already run, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeScheduledActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeScheduledActionsType describeScheduledActionsType = null;
        ScheduledActionsType response = api.pOSTDescribeScheduledActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeScheduledActionsType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the specified tags.&lt;/p&gt; &lt;p&gt;You can use filters to limit the results. For example, you can query for the tags for a specific Auto Scaling group. You can specify multiple values for a filter. A tag must match at least one of the specified values for it to be included in the results.&lt;/p&gt; &lt;p&gt;You can also specify multiple filters. The result includes information for a particular tag only if it matches all the filters. If there&#39;s no match, no special message is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html\&quot;&gt;Tag Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeTagsType describeTagsType = null;
        TagsType response = api.pOSTDescribeTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTagsType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the termination policies supported by Amazon EC2 Auto Scaling.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html\&quot;&gt;Work with Amazon EC2 Auto Scaling termination policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeTerminationPolicyTypesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTerminationPolicyTypesAnswer response = api.pOSTDescribeTerminationPolicyTypes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about the traffic sources for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can optionally provide a traffic source type. If you provide a traffic source type, then the results only include that traffic source type.&lt;/p&gt; &lt;p&gt;If you do not provide a traffic source type, then the results include all the traffic sources for the specified Auto Scaling group. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeTrafficSourcesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeTrafficSourcesRequest describeTrafficSourcesRequest = null;
        DescribeTrafficSourcesResponse response = api.pOSTDescribeTrafficSources(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeTrafficSourcesRequest);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about a warm pool and its instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeWarmPoolTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeWarmPoolType describeWarmPoolType = null;
        DescribeWarmPoolAnswer response = api.pOSTDescribeWarmPool(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken, describeWarmPoolType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes one or more instances from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;After the instances are detached, you can manage them independent of the Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are detached.&lt;/p&gt; &lt;p&gt;If there is a Classic Load Balancer attached to the Auto Scaling group, the instances are deregistered from the load balancer. If there are target groups attached to the Auto Scaling group, the instances are deregistered from the target groups.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/detach-instance-asg.html\&quot;&gt;Detach EC2 instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDetachInstancesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachInstancesQuery detachInstancesQuery = null;
        DetachInstancesAnswer response = api.pOSTDetachInstances(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachInstancesQuery);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancerTargetGroups&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more target groups from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a target group, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the &lt;a&gt;DescribeLoadBalancerTargetGroups&lt;/a&gt; API call. The instances remain running.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can use this operation to detach target groups that were attached by using &lt;a&gt;AttachLoadBalancerTargetGroups&lt;/a&gt;, but not for target groups that were attached by using &lt;a&gt;AttachTrafficSources&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDetachLoadBalancerTargetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachLoadBalancerTargetGroupsType detachLoadBalancerTargetGroupsType = null;
        Object response = api.pOSTDetachLoadBalancerTargetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancerTargetGroupsType);
        // TODO: test validations
    }

    /**
     * &lt;note&gt; &lt;p&gt;This API operation is superseded by &lt;a&gt;DetachTrafficSources&lt;/a&gt;, which can detach multiple traffic sources types. We recommend using &lt;code&gt;DetachTrafficSources&lt;/code&gt; to simplify how you manage traffic sources. However, we continue to support &lt;code&gt;DetachLoadBalancers&lt;/code&gt;. You can use both the original &lt;code&gt;DetachLoadBalancers&lt;/code&gt; API operation and &lt;code&gt;DetachTrafficSources&lt;/code&gt; on the same Auto Scaling group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Detaches one or more Classic Load Balancers from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation detaches only Classic Load Balancers. If you have Application Load Balancers, Network Load Balancers, or Gateway Load Balancers, use the &lt;a&gt;DetachLoadBalancerTargetGroups&lt;/a&gt; API instead.&lt;/p&gt; &lt;p&gt;When you detach a load balancer, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the load balancer using the &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; API call. The instances remain running.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDetachLoadBalancersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachLoadBalancersType detachLoadBalancersType = null;
        Object response = api.pOSTDetachLoadBalancers(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachLoadBalancersType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Detaches one or more traffic sources from the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;When you detach a traffic source, it enters the &lt;code&gt;Removing&lt;/code&gt; state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the traffic source using the &lt;a&gt;DescribeTrafficSources&lt;/a&gt; API call. The instances continue to run.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDetachTrafficSourcesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachTrafficSourcesType detachTrafficSourcesType = null;
        Object response = api.pOSTDetachTrafficSources(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detachTrafficSourcesType);
        // TODO: test validations
    }

    /**
     * Disables group metrics collection for the specified Auto Scaling group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDisableMetricsCollectionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisableMetricsCollectionQuery disableMetricsCollectionQuery = null;
        api.pOSTDisableMetricsCollection(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableMetricsCollectionQuery);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables group metrics collection for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;You can use these metrics to track changes in an Auto Scaling group and to set alarms on threshold values. You can view group metrics using the Amazon EC2 Auto Scaling console or the CloudWatch console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html\&quot;&gt;Monitor CloudWatch metrics for your Auto Scaling groups and instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTEnableMetricsCollectionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnableMetricsCollectionQuery enableMetricsCollectionQuery = null;
        api.pOSTEnableMetricsCollection(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableMetricsCollectionQuery);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Moves the specified instances into the standby state.&lt;/p&gt; &lt;p&gt;If you choose to decrement the desired capacity of the Auto Scaling group, the instances can enter standby as long as the desired capacity of the Auto Scaling group after the instances are placed into standby is equal to or greater than the minimum capacity of the group.&lt;/p&gt; &lt;p&gt;If you choose not to decrement the desired capacity of the Auto Scaling group, the Auto Scaling group launches new instances to replace the instances on standby.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTEnterStandbyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnterStandbyQuery enterStandbyQuery = null;
        EnterStandbyAnswer response = api.pOSTEnterStandby(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enterStandbyQuery);
        // TODO: test validations
    }

    /**
     * Executes the specified policy. This can be useful for testing the design of your scaling policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTExecutePolicyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExecutePolicyType executePolicyType = null;
        api.pOSTExecutePolicy(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executePolicyType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Moves the specified instances out of the standby state.&lt;/p&gt; &lt;p&gt;After you put the instances back in service, the desired capacity is incremented.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enter-exit-standby.html\&quot;&gt;Temporarily removing instances from your Auto Scaling group&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTExitStandbyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExitStandbyQuery exitStandbyQuery = null;
        ExitStandbyAnswer response = api.pOSTExitStandby(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, exitStandbyQuery);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the forecast data for a predictive scaling policy.&lt;/p&gt; &lt;p&gt;Load forecasts are predictions of the hourly load values using historical load data from CloudWatch and an analysis of historical trends. Capacity forecasts are represented as predicted values for the minimum capacity that is needed on an hourly basis, based on the hourly load forecast.&lt;/p&gt; &lt;p&gt;A minimum of 24 hours of data is required to create the initial forecasts. However, having a full 14 days of historical data results in more accurate forecasts.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetPredictiveScalingForecastTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetPredictiveScalingForecastType getPredictiveScalingForecastType = null;
        GetPredictiveScalingForecastAnswer response = api.pOSTGetPredictiveScalingForecast(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getPredictiveScalingForecastType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates a lifecycle hook for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;Lifecycle hooks let you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state using the &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of lifecycle hooks, which by default is 50 per Auto Scaling group, the call fails.&lt;/p&gt; &lt;p&gt;You can view the lifecycle hooks for an Auto Scaling group using the &lt;a&gt;DescribeLifecycleHooks&lt;/a&gt; API call. If you are no longer using a lifecycle hook, you can delete it by calling the &lt;a&gt;DeleteLifecycleHook&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPutLifecycleHookTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutLifecycleHookType putLifecycleHookType = null;
        Object response = api.pOSTPutLifecycleHook(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putLifecycleHookType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Configures an Auto Scaling group to send notifications when specified events take place. Subscribers to the specified topic can have messages delivered to an endpoint such as a web server or an email address.&lt;/p&gt; &lt;p&gt;This configuration overwrites any existing configuration.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ASGettingNotifications.html\&quot;&gt;Getting Amazon SNS notifications when your Auto Scaling group scales&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of SNS topics, which is 10 per Auto Scaling group, the call fails.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPutNotificationConfigurationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutNotificationConfigurationType putNotificationConfigurationType = null;
        api.pOSTPutNotificationConfiguration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putNotificationConfigurationType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates a scaling policy for an Auto Scaling group. Scaling policies are used to scale an Auto Scaling group based on configurable metrics. If no policies are defined, the dynamic scaling and predictive scaling features are not used. &lt;/p&gt; &lt;p&gt;For more information about using dynamic scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html\&quot;&gt;Target tracking scaling policies&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html\&quot;&gt;Step and simple scaling policies&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about using predictive scaling, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-predictive-scaling.html\&quot;&gt;Predictive scaling for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scaling policies for an Auto Scaling group using the &lt;a&gt;DescribePolicies&lt;/a&gt; API call. If you are no longer using a scaling policy, you can delete it by calling the &lt;a&gt;DeletePolicy&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPutScalingPolicyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutScalingPolicyType putScalingPolicyType = null;
        PolicyARNType response = api.pOSTPutScalingPolicy(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScalingPolicyType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates a scheduled scaling action for an Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/schedule_time.html\&quot;&gt;Scheduled scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can view the scheduled actions for an Auto Scaling group using the &lt;a&gt;DescribeScheduledActions&lt;/a&gt; API call. If you are no longer using a scheduled action, you can delete it by calling the &lt;a&gt;DeleteScheduledAction&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you try to schedule your action in the past, Amazon EC2 Auto Scaling returns an error message.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPutScheduledUpdateGroupActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutScheduledUpdateGroupActionType putScheduledUpdateGroupActionType = null;
        api.pOSTPutScheduledUpdateGroupAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putScheduledUpdateGroupActionType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates a warm pool for the specified Auto Scaling group. A warm pool is a pool of pre-initialized EC2 instances that sits alongside the Auto Scaling group. Whenever your application needs to scale out, the Auto Scaling group can draw on the warm pool to meet its new desired capacity. For more information and example configurations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html\&quot;&gt;Warm pools for Amazon EC2 Auto Scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This operation must be called from the Region in which the Auto Scaling group was created. This operation cannot be called on an Auto Scaling group that has a mixed instances policy or a launch template or launch configuration that requests Spot Instances.&lt;/p&gt; &lt;p&gt;You can view the instances in the warm pool using the &lt;a&gt;DescribeWarmPool&lt;/a&gt; API call. If you are no longer using a warm pool, you can delete it by calling the &lt;a&gt;DeleteWarmPool&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPutWarmPoolTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutWarmPoolType putWarmPoolType = null;
        Object response = api.pOSTPutWarmPool(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, putWarmPoolType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the &lt;a&gt;PutLifecycleHook&lt;/a&gt; API call.&lt;/p&gt; &lt;p&gt;This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.&lt;/b&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you finish before the timeout period ends, send a callback by using the &lt;a&gt;CompleteLifecycleAction&lt;/a&gt; API call.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\&quot;&gt;Amazon EC2 Auto Scaling lifecycle hooks&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRecordLifecycleActionHeartbeatTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RecordLifecycleActionHeartbeatType recordLifecycleActionHeartbeatType = null;
        Object response = api.pOSTRecordLifecycleActionHeartbeat(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recordLifecycleActionHeartbeatType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTResumeProcessesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ScalingProcessQuery scalingProcessQuery = null;
        api.pOSTResumeProcesses(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Cancels an instance refresh that is in progress and rolls back any changes that it made. Amazon EC2 Auto Scaling replaces any instances that were replaced during the instance refresh. This restores your Auto Scaling group to the configuration that it was using before the start of the instance refresh. &lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group after you make configuration changes.&lt;/p&gt; &lt;p&gt;A rollback is not supported in the following situations: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;There is no desired configuration specified for the instance refresh.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the &lt;code&gt;ImageId&lt;/code&gt; property.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Auto Scaling group uses the launch template&#39;s &lt;code&gt;$Latest&lt;/code&gt; or &lt;code&gt;$Default&lt;/code&gt; version.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon EC2 Auto Scaling immediately begins replacing instances. You can check the status of this operation through the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API operation. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRollbackInstanceRefreshTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RollbackInstanceRefreshType rollbackInstanceRefreshType = null;
        RollbackInstanceRefreshAnswer response = api.pOSTRollbackInstanceRefresh(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rollbackInstanceRefreshType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the size of the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-manual-scaling.html\&quot;&gt;Manual scaling&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetDesiredCapacityTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetDesiredCapacityType setDesiredCapacityType = null;
        api.pOSTSetDesiredCapacity(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setDesiredCapacityType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the health status of the specified instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html\&quot;&gt;Health checks for Auto Scaling instances&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetInstanceHealthTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetInstanceHealthQuery setInstanceHealthQuery = null;
        api.pOSTSetInstanceHealth(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceHealthQuery);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the instance protection settings of the specified instances. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;For more information about preventing instances that are part of an Auto Scaling group from terminating on scale in, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html\&quot;&gt;Using instance scale-in protection&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you exceed your maximum limit of instance IDs, which is 50 per Auto Scaling group, the call fails.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSetInstanceProtectionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetInstanceProtectionQuery setInstanceProtectionQuery = null;
        Object response = api.pOSTSetInstanceProtection(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setInstanceProtectionQuery);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts an instance refresh. During an instance refresh, Amazon EC2 Auto Scaling performs a rolling update of instances in an Auto Scaling group. Instances are terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.&lt;/p&gt; &lt;p&gt;This operation is part of the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html\&quot;&gt;instance refresh feature&lt;/a&gt; in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. &lt;/p&gt; &lt;p&gt;If successful, the request&#39;s response contains a unique ID that you can use to track the progress of the instance refresh. To query its status, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To describe the instance refreshes that have already run, call the &lt;a&gt;DescribeInstanceRefreshes&lt;/a&gt; API. To cancel an instance refresh that is in progress, use the &lt;a&gt;CancelInstanceRefresh&lt;/a&gt; API. &lt;/p&gt; &lt;p&gt;An instance refresh might fail for several reasons, such as EC2 launch failures, misconfigured health checks, or not ignoring or allowing the termination of instances that are in &lt;code&gt;Standby&lt;/code&gt; state or protected from scale in. You can monitor for failed EC2 launches using the scaling activities. To find the scaling activities, call the &lt;a&gt;DescribeScalingActivities&lt;/a&gt; API.&lt;/p&gt; &lt;p&gt;If you enable auto rollback, your Auto Scaling group will be rolled back automatically when the instance refresh fails. You can enable this feature before starting an instance refresh by specifying the &lt;code&gt;AutoRollback&lt;/code&gt; property in the instance refresh preferences. Otherwise, to roll back an instance refresh before it finishes, use the &lt;a&gt;RollbackInstanceRefresh&lt;/a&gt; API. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTStartInstanceRefreshTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartInstanceRefreshType startInstanceRefreshType = null;
        StartInstanceRefreshAnswer response = api.pOSTStartInstanceRefresh(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startInstanceRefreshType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Suspends the specified auto scaling processes, or all processes, for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;If you suspend either the &lt;code&gt;Launch&lt;/code&gt; or &lt;code&gt;Terminate&lt;/code&gt; process types, it can prevent other process types from functioning properly. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html\&quot;&gt;Suspending and resuming scaling processes&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To resume processes that have been suspended, call the &lt;a&gt;ResumeProcesses&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTSuspendProcessesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ScalingProcessQuery scalingProcessQuery = null;
        api.pOSTSuspendProcesses(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scalingProcessQuery);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Terminates the specified instance and optionally adjusts the desired group size. This operation cannot be called on instances in a warm pool.&lt;/p&gt; &lt;p&gt;This call simply makes a termination request. The instance is not terminated immediately. When an instance is terminated, the instance status changes to &lt;code&gt;terminated&lt;/code&gt;. You can&#39;t connect to or start an instance after you&#39;ve terminated it.&lt;/p&gt; &lt;p&gt;If you do not specify the option to decrement the desired capacity, Amazon EC2 Auto Scaling launches instances to replace the ones that are terminated. &lt;/p&gt; &lt;p&gt;By default, Amazon EC2 Auto Scaling balances instances across all Availability Zones. If you decrement the desired capacity, your Auto Scaling group can become unbalanced between Availability Zones. Amazon EC2 Auto Scaling tries to rebalance the group, and rebalancing might terminate instances in other zones. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-benefits.html#AutoScalingBehavior.InstanceUsage\&quot;&gt;Rebalancing activities&lt;/a&gt; in the &lt;i&gt;Amazon EC2 Auto Scaling User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTTerminateInstanceInAutoScalingGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TerminateInstanceInAutoScalingGroupType terminateInstanceInAutoScalingGroupType = null;
        ActivityType response = api.pOSTTerminateInstanceInAutoScalingGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, terminateInstanceInAutoScalingGroupType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;b&gt;We strongly recommend that all Auto Scaling groups use launch templates to ensure full functionality for Amazon EC2 Auto Scaling and Amazon EC2.&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Updates the configuration for the specified Auto Scaling group.&lt;/p&gt; &lt;p&gt;To update an Auto Scaling group, specify the name of the group and the property that you want to change. Any properties that you don&#39;t specify are not changed by this update request. The new settings take effect on any scaling activities after this call returns. &lt;/p&gt; &lt;p&gt;If you associate a new launch configuration or template with an Auto Scaling group, all new instances will get the updated configuration. Existing instances continue to run with the configuration that they were originally launched with. When you update a group to specify a mixed instances policy instead of a launch configuration or template, existing instances may be replaced to match the new purchasing options that you specified in the policy. For example, if the group currently has 100% On-Demand capacity and the policy specifies 50% Spot capacity, this means that half of your instances will be gradually terminated and relaunched as Spot Instances. When replacing instances, Amazon EC2 Auto Scaling launches new instances before terminating the old ones, so that updating your group does not compromise the performance or availability of your application.&lt;/p&gt; &lt;p&gt;Note the following about changing &lt;code&gt;DesiredCapacity&lt;/code&gt;, &lt;code&gt;MaxSize&lt;/code&gt;, or &lt;code&gt;MinSize&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If a scale-in activity occurs as a result of a new &lt;code&gt;DesiredCapacity&lt;/code&gt; value that is lower than the current size of the group, the Auto Scaling group uses its termination policy to determine which instances to terminate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MinSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MinSize&lt;/code&gt; is larger than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MinSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify a new value for &lt;code&gt;MaxSize&lt;/code&gt; without specifying a value for &lt;code&gt;DesiredCapacity&lt;/code&gt;, and the new &lt;code&gt;MaxSize&lt;/code&gt; is smaller than the current size of the group, this sets the group&#39;s &lt;code&gt;DesiredCapacity&lt;/code&gt; to the new &lt;code&gt;MaxSize&lt;/code&gt; value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To see which properties have been set, call the &lt;a&gt;DescribeAutoScalingGroups&lt;/a&gt; API. To view the scaling policies for an Auto Scaling group, call the &lt;a&gt;DescribePolicies&lt;/a&gt; API. If the group has scaling policies, you can update them by calling the &lt;a&gt;PutScalingPolicy&lt;/a&gt; API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTUpdateAutoScalingGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAutoScalingGroupType updateAutoScalingGroupType = null;
        api.pOSTUpdateAutoScalingGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateAutoScalingGroupType);
        // TODO: test validations
    }

}
