/**
 * AWS IoT 1-Click Devices Service
 * Describes all of the AWS IoT 1-Click device-related API operations for the service.  Also provides sample requests, responses, and errors for the supported web services  protocols.
 *
 * The version of the OpenAPI document: 2018-05-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceMethod from './DeviceMethod';

/**
 * The InvokeDeviceMethodRequestDeviceMethod model module.
 * @module model/InvokeDeviceMethodRequestDeviceMethod
 * @version 2018-05-14
 */
class InvokeDeviceMethodRequestDeviceMethod {
    /**
     * Constructs a new <code>InvokeDeviceMethodRequestDeviceMethod</code>.
     * @alias module:model/InvokeDeviceMethodRequestDeviceMethod
     * @implements module:model/DeviceMethod
     */
    constructor() { 
        DeviceMethod.initialize(this);
        InvokeDeviceMethodRequestDeviceMethod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvokeDeviceMethodRequestDeviceMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvokeDeviceMethodRequestDeviceMethod} obj Optional instance to populate.
     * @return {module:model/InvokeDeviceMethodRequestDeviceMethod} The populated <code>InvokeDeviceMethodRequestDeviceMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvokeDeviceMethodRequestDeviceMethod();
            DeviceMethod.constructFromObject(data, obj);

            if (data.hasOwnProperty('DeviceType')) {
                obj['DeviceType'] = ApiClient.convertToType(data['DeviceType'], 'String');
            }
            if (data.hasOwnProperty('MethodName')) {
                obj['MethodName'] = ApiClient.convertToType(data['MethodName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvokeDeviceMethodRequestDeviceMethod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvokeDeviceMethodRequestDeviceMethod</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DeviceType`
        if (data['DeviceType']) { // data not null
          String.validateJSON(data['DeviceType']);
        }
        // validate the optional field `MethodName`
        if (data['MethodName']) { // data not null
          String.validateJSON(data['MethodName']);
        }

        return true;
    }


}



/**
 * @member {String} DeviceType
 */
InvokeDeviceMethodRequestDeviceMethod.prototype['DeviceType'] = undefined;

/**
 * @member {String} MethodName
 */
InvokeDeviceMethodRequestDeviceMethod.prototype['MethodName'] = undefined;


// Implement DeviceMethod interface:
/**
 * @member {String} DeviceType
 */
DeviceMethod.prototype['DeviceType'] = undefined;
/**
 * @member {String} MethodName
 */
DeviceMethod.prototype['MethodName'] = undefined;




export default InvokeDeviceMethodRequestDeviceMethod;

