/**
 * AWS IoT 1-Click Devices Service
 * Describes all of the AWS IoT 1-Click device-related API operations for the service.  Also provides sample requests, responses, and errors for the supported web services  protocols.
 *
 * The version of the OpenAPI document: 2018-05-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceDescription from './DeviceDescription';

/**
 * The DescribeDeviceResponseDeviceDescription model module.
 * @module model/DescribeDeviceResponseDeviceDescription
 * @version 2018-05-14
 */
class DescribeDeviceResponseDeviceDescription {
    /**
     * Constructs a new <code>DescribeDeviceResponseDeviceDescription</code>.
     * @alias module:model/DescribeDeviceResponseDeviceDescription
     * @implements module:model/DeviceDescription
     */
    constructor() { 
        DeviceDescription.initialize(this);
        DescribeDeviceResponseDeviceDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeDeviceResponseDeviceDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeDeviceResponseDeviceDescription} obj Optional instance to populate.
     * @return {module:model/DescribeDeviceResponseDeviceDescription} The populated <code>DescribeDeviceResponseDeviceDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeDeviceResponseDeviceDescription();
            DeviceDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('Arn')) {
                obj['Arn'] = ApiClient.convertToType(data['Arn'], 'String');
            }
            if (data.hasOwnProperty('Attributes')) {
                obj['Attributes'] = ApiClient.convertToType(data['Attributes'], Object);
            }
            if (data.hasOwnProperty('DeviceId')) {
                obj['DeviceId'] = ApiClient.convertToType(data['DeviceId'], 'String');
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('RemainingLife')) {
                obj['RemainingLife'] = ApiClient.convertToType(data['RemainingLife'], 'Number');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeDeviceResponseDeviceDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeDeviceResponseDeviceDescription</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Arn`
        if (data['Arn']) { // data not null
          String.validateJSON(data['Arn']);
        }
        // validate the optional field `Attributes`
        if (data['Attributes']) { // data not null
          Object.validateJSON(data['Attributes']);
        }
        // validate the optional field `DeviceId`
        if (data['DeviceId']) { // data not null
          String.validateJSON(data['DeviceId']);
        }
        // validate the optional field `Enabled`
        if (data['Enabled']) { // data not null
          Boolean.validateJSON(data['Enabled']);
        }
        // validate the optional field `RemainingLife`
        if (data['RemainingLife']) { // data not null
          Number.validateJSON(data['RemainingLife']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          String.validateJSON(data['Type']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Object.validateJSON(data['Tags']);
        }

        return true;
    }


}



/**
 * @member {String} Arn
 */
DescribeDeviceResponseDeviceDescription.prototype['Arn'] = undefined;

/**
 * @member {Object} Attributes
 */
DescribeDeviceResponseDeviceDescription.prototype['Attributes'] = undefined;

/**
 * @member {String} DeviceId
 */
DescribeDeviceResponseDeviceDescription.prototype['DeviceId'] = undefined;

/**
 * @member {Boolean} Enabled
 */
DescribeDeviceResponseDeviceDescription.prototype['Enabled'] = undefined;

/**
 * @member {Number} RemainingLife
 */
DescribeDeviceResponseDeviceDescription.prototype['RemainingLife'] = undefined;

/**
 * @member {String} Type
 */
DescribeDeviceResponseDeviceDescription.prototype['Type'] = undefined;

/**
 * @member {Object} Tags
 */
DescribeDeviceResponseDeviceDescription.prototype['Tags'] = undefined;


// Implement DeviceDescription interface:
/**
 * @member {String} Arn
 */
DeviceDescription.prototype['Arn'] = undefined;
/**
 * @member {Object} Attributes
 */
DeviceDescription.prototype['Attributes'] = undefined;
/**
 * @member {String} DeviceId
 */
DeviceDescription.prototype['DeviceId'] = undefined;
/**
 * @member {Boolean} Enabled
 */
DeviceDescription.prototype['Enabled'] = undefined;
/**
 * @member {Number} RemainingLife
 */
DeviceDescription.prototype['RemainingLife'] = undefined;
/**
 * @member {String} Type
 */
DeviceDescription.prototype['Type'] = undefined;
/**
 * @member {Object} Tags
 */
DeviceDescription.prototype['Tags'] = undefined;




export default DescribeDeviceResponseDeviceDescription;

