/**
 * AWS IoT 1-Click Devices Service
 * Describes all of the AWS IoT 1-Click device-related API operations for the service.  Also provides sample requests, responses, and errors for the supported web services  protocols.
 *
 * The version of the OpenAPI document: 2018-05-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoT1ClickDevicesService);
  }
}(this, function(expect, AwsIoT1ClickDevicesService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoT1ClickDevicesService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('claimDevicesByClaimCode', function() {
      it('should call claimDevicesByClaimCode successfully', function(done) {
        //uncomment below and update the code to test claimDevicesByClaimCode
        //instance.claimDevicesByClaimCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDevice', function() {
      it('should call describeDevice successfully', function(done) {
        //uncomment below and update the code to test describeDevice
        //instance.describeDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('finalizeDeviceClaim', function() {
      it('should call finalizeDeviceClaim successfully', function(done) {
        //uncomment below and update the code to test finalizeDeviceClaim
        //instance.finalizeDeviceClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeviceMethods', function() {
      it('should call getDeviceMethods successfully', function(done) {
        //uncomment below and update the code to test getDeviceMethods
        //instance.getDeviceMethods(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateDeviceClaim', function() {
      it('should call initiateDeviceClaim successfully', function(done) {
        //uncomment below and update the code to test initiateDeviceClaim
        //instance.initiateDeviceClaim(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('invokeDeviceMethod', function() {
      it('should call invokeDeviceMethod successfully', function(done) {
        //uncomment below and update the code to test invokeDeviceMethod
        //instance.invokeDeviceMethod(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeviceEvents', function() {
      it('should call listDeviceEvents successfully', function(done) {
        //uncomment below and update the code to test listDeviceEvents
        //instance.listDeviceEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDevices', function() {
      it('should call listDevices successfully', function(done) {
        //uncomment below and update the code to test listDevices
        //instance.listDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unclaimDevice', function() {
      it('should call unclaimDevice successfully', function(done) {
        //uncomment below and update the code to test unclaimDevice
        //instance.unclaimDevice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDeviceState', function() {
      it('should call updateDeviceState successfully', function(done) {
        //uncomment below and update the code to test updateDeviceState
        //instance.updateDeviceState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
