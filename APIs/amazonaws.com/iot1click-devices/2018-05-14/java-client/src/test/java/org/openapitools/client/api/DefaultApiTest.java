/*
 * AWS IoT 1-Click Devices Service
 * Describes all of the AWS IoT 1-Click device-related API operations for the service.  Also provides sample requests, responses, and errors for the supported web services  protocols.
 *
 * The version of the OpenAPI document: 2018-05-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClaimDevicesByClaimCodeResponse;
import org.openapitools.client.model.DescribeDeviceResponse;
import org.openapitools.client.model.FinalizeDeviceClaimRequest;
import org.openapitools.client.model.FinalizeDeviceClaimResponse;
import org.openapitools.client.model.GetDeviceMethodsResponse;
import org.openapitools.client.model.InitiateDeviceClaimResponse;
import org.openapitools.client.model.InvokeDeviceMethodRequest;
import org.openapitools.client.model.InvokeDeviceMethodResponse;
import org.openapitools.client.model.ListDeviceEventsResponse;
import org.openapitools.client.model.ListDevicesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UnclaimDeviceResponse;
import org.openapitools.client.model.UpdateDeviceStateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds device(s) to your account (i.e., claim one or more devices) if and only if you  received a claim code with the device(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void claimDevicesByClaimCodeTest() throws ApiException {
        String claimCode = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ClaimDevicesByClaimCodeResponse response = api.claimDevicesByClaimCode(claimCode, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Given a device ID, returns a DescribeDeviceResponse object describing the  details of the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDeviceTest() throws ApiException {
        String deviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDeviceResponse response = api.describeDevice(deviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Given a device ID, finalizes the claim request for the associated device.&lt;/p&gt;&lt;note&gt;  &lt;p&gt;Claiming a device consists of initiating a claim, then publishing a device event,  and finalizing the claim. For a device of type button, a device event can  be published by simply clicking the device.&lt;/p&gt;  &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finalizeDeviceClaimTest() throws ApiException {
        String deviceId = null;
        FinalizeDeviceClaimRequest finalizeDeviceClaimRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        FinalizeDeviceClaimResponse response = api.finalizeDeviceClaim(deviceId, finalizeDeviceClaimRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Given a device ID, returns the invokable methods associated with the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceMethodsTest() throws ApiException {
        String deviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeviceMethodsResponse response = api.getDeviceMethods(deviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Given a device ID, initiates a claim request for the associated device.&lt;/p&gt;&lt;note&gt;  &lt;p&gt;Claiming a device consists of initiating a claim, then publishing a device event,  and finalizing the claim. For a device of type button, a device event can  be published by simply clicking the device.&lt;/p&gt;  &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateDeviceClaimTest() throws ApiException {
        String deviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InitiateDeviceClaimResponse response = api.initiateDeviceClaim(deviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Given a device ID, issues a request to invoke a named device method (with possible  parameters). See the \&quot;Example POST\&quot; code snippet below.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invokeDeviceMethodTest() throws ApiException {
        String deviceId = null;
        InvokeDeviceMethodRequest invokeDeviceMethodRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InvokeDeviceMethodResponse response = api.invokeDeviceMethod(deviceId, invokeDeviceMethodRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Using a device ID, returns a DeviceEventsResponse object containing an  array of events for the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeviceEventsTest() throws ApiException {
        String deviceId = null;
        OffsetDateTime fromTimeStamp = null;
        OffsetDateTime toTimeStamp = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListDeviceEventsResponse response = api.listDeviceEvents(deviceId, fromTimeStamp, toTimeStamp, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the 1-Click compatible devices associated with your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String deviceType = null;
        Integer maxResults = null;
        String nextToken = null;
        ListDevicesResponse response = api.listDevices(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deviceType, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags associated with the specified resource ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds or updates the tags associated with the resource ARN. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-1-click/latest/developerguide/1click-appendix.html#1click-limits\&quot;&gt;AWS IoT 1-Click Service Limits&lt;/a&gt; for the maximum number of tags allowed per  resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociates a device from your AWS account using its device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unclaimDeviceTest() throws ApiException {
        String deviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UnclaimDeviceResponse response = api.unclaimDevice(deviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Using tag keys, deletes the tags (key/value pairs) associated with the specified  resource ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Using a Boolean value (true or false), this operation  enables or disables the device given a device ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceStateTest() throws ApiException {
        String deviceId = null;
        UpdateDeviceStateRequest updateDeviceStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDeviceState(deviceId, updateDeviceStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
