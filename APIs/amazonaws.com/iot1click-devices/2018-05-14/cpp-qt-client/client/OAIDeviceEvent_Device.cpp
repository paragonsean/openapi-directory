/**
 * AWS IoT 1-Click Devices Service
 * Describes all of the AWS IoT 1-Click device-related API operations for the service.  Also provides sample requests, responses, and errors for the supported web services  protocols.
 *
 * The version of the OpenAPI document: 2018-05-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceEvent_Device.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceEvent_Device::OAIDeviceEvent_Device(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceEvent_Device::OAIDeviceEvent_Device() {
    this->initializeModel();
}

OAIDeviceEvent_Device::~OAIDeviceEvent_Device() {}

void OAIDeviceEvent_Device::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDeviceEvent_Device::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceEvent_Device::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIDeviceEvent_Device::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceEvent_Device::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObject OAIDeviceEvent_Device::getAttributes() const {
    return m_attributes;
}
void OAIDeviceEvent_Device::setAttributes(const OAIObject &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIDeviceEvent_Device::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIDeviceEvent_Device::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIDeviceEvent_Device::getDeviceId() const {
    return m_device_id;
}
void OAIDeviceEvent_Device::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDeviceEvent_Device::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDeviceEvent_Device::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIDeviceEvent_Device::getType() const {
    return m_type;
}
void OAIDeviceEvent_Device::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeviceEvent_Device::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeviceEvent_Device::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDeviceEvent_Device::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceEvent_Device::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
