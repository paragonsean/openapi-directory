/**
 * AWS IoT 1-Click Devices Service
 * Describes all of the AWS IoT 1-Click device-related API operations for the service.  Also provides sample requests, responses, and errors for the supported web services  protocols.
 *
 * The version of the OpenAPI document: 2018-05-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceMethod::OAIDeviceMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceMethod::OAIDeviceMethod() {
    this->initializeModel();
}

OAIDeviceMethod::~OAIDeviceMethod() {}

void OAIDeviceMethod::initializeModel() {

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_method_name_isSet = false;
    m_method_name_isValid = false;
}

void OAIDeviceMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceMethod::fromJsonObject(QJsonObject json) {

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("DeviceType")]);
    m_device_type_isSet = !json[QString("DeviceType")].isNull() && m_device_type_isValid;

    m_method_name_isValid = ::OpenAPI::fromJsonValue(m_method_name, json[QString("MethodName")]);
    m_method_name_isSet = !json[QString("MethodName")].isNull() && m_method_name_isValid;
}

QString OAIDeviceMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_device_type_isSet) {
        obj.insert(QString("DeviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_method_name_isSet) {
        obj.insert(QString("MethodName"), ::OpenAPI::toJsonValue(m_method_name));
    }
    return obj;
}

QString OAIDeviceMethod::getDeviceType() const {
    return m_device_type;
}
void OAIDeviceMethod::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIDeviceMethod::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIDeviceMethod::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIDeviceMethod::getMethodName() const {
    return m_method_name;
}
void OAIDeviceMethod::setMethodName(const QString &method_name) {
    m_method_name = method_name;
    m_method_name_isSet = true;
}

bool OAIDeviceMethod::is_method_name_Set() const{
    return m_method_name_isSet;
}

bool OAIDeviceMethod::is_method_name_Valid() const{
    return m_method_name_isValid;
}

bool OAIDeviceMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
