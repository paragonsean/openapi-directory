/**
 * AWS IoT 1-Click Devices Service
 * Describes all of the AWS IoT 1-Click device-related API operations for the service.  Also provides sample requests, responses, and errors for the supported web services  protocols.
 *
 * The version of the OpenAPI document: 2018-05-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceEvent::OAIDeviceEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceEvent::OAIDeviceEvent() {
    this->initializeModel();
}

OAIDeviceEvent::~OAIDeviceEvent() {}

void OAIDeviceEvent::initializeModel() {

    m_device_isSet = false;
    m_device_isValid = false;

    m_std_event_isSet = false;
    m_std_event_isValid = false;
}

void OAIDeviceEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceEvent::fromJsonObject(QJsonObject json) {

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("Device")]);
    m_device_isSet = !json[QString("Device")].isNull() && m_device_isValid;

    m_std_event_isValid = ::OpenAPI::fromJsonValue(m_std_event, json[QString("StdEvent")]);
    m_std_event_isSet = !json[QString("StdEvent")].isNull() && m_std_event_isValid;
}

QString OAIDeviceEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_device.isSet()) {
        obj.insert(QString("Device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_std_event_isSet) {
        obj.insert(QString("StdEvent"), ::OpenAPI::toJsonValue(m_std_event));
    }
    return obj;
}

OAIDeviceEvent_Device OAIDeviceEvent::getDevice() const {
    return m_device;
}
void OAIDeviceEvent::setDevice(const OAIDeviceEvent_Device &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIDeviceEvent::is_device_Set() const{
    return m_device_isSet;
}

bool OAIDeviceEvent::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIDeviceEvent::getStdEvent() const {
    return m_std_event;
}
void OAIDeviceEvent::setStdEvent(const QString &std_event) {
    m_std_event = std_event;
    m_std_event_isSet = true;
}

bool OAIDeviceEvent::is_std_event_Set() const{
    return m_std_event_isSet;
}

bool OAIDeviceEvent::is_std_event_Valid() const{
    return m_std_event_isValid;
}

bool OAIDeviceEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_std_event_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
