# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeDeviceResponseDeviceDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, attributes: Dict=None, device_id: str=None, enabled: bool=None, remaining_life: float=None, type: str=None, tags: Dict=None):
        """DescribeDeviceResponseDeviceDescription - a model defined in OpenAPI

        :param arn: The arn of this DescribeDeviceResponseDeviceDescription.
        :param attributes: The attributes of this DescribeDeviceResponseDeviceDescription.
        :param device_id: The device_id of this DescribeDeviceResponseDeviceDescription.
        :param enabled: The enabled of this DescribeDeviceResponseDeviceDescription.
        :param remaining_life: The remaining_life of this DescribeDeviceResponseDeviceDescription.
        :param type: The type of this DescribeDeviceResponseDeviceDescription.
        :param tags: The tags of this DescribeDeviceResponseDeviceDescription.
        """
        self.openapi_types = {
            'arn': str,
            'attributes': Dict,
            'device_id': str,
            'enabled': bool,
            'remaining_life': float,
            'type': str,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'Arn',
            'attributes': 'Attributes',
            'device_id': 'DeviceId',
            'enabled': 'Enabled',
            'remaining_life': 'RemainingLife',
            'type': 'Type',
            'tags': 'Tags'
        }

        self._arn = arn
        self._attributes = attributes
        self._device_id = device_id
        self._enabled = enabled
        self._remaining_life = remaining_life
        self._type = type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDeviceResponseDeviceDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDeviceResponse_DeviceDescription of this DescribeDeviceResponseDeviceDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this DescribeDeviceResponseDeviceDescription.


        :return: The arn of this DescribeDeviceResponseDeviceDescription.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DescribeDeviceResponseDeviceDescription.


        :param arn: The arn of this DescribeDeviceResponseDeviceDescription.
        :type arn: str
        """

        self._arn = arn

    @property
    def attributes(self):
        """Gets the attributes of this DescribeDeviceResponseDeviceDescription.


        :return: The attributes of this DescribeDeviceResponseDeviceDescription.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DescribeDeviceResponseDeviceDescription.


        :param attributes: The attributes of this DescribeDeviceResponseDeviceDescription.
        :type attributes: Dict
        """

        self._attributes = attributes

    @property
    def device_id(self):
        """Gets the device_id of this DescribeDeviceResponseDeviceDescription.


        :return: The device_id of this DescribeDeviceResponseDeviceDescription.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DescribeDeviceResponseDeviceDescription.


        :param device_id: The device_id of this DescribeDeviceResponseDeviceDescription.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def enabled(self):
        """Gets the enabled of this DescribeDeviceResponseDeviceDescription.


        :return: The enabled of this DescribeDeviceResponseDeviceDescription.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DescribeDeviceResponseDeviceDescription.


        :param enabled: The enabled of this DescribeDeviceResponseDeviceDescription.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def remaining_life(self):
        """Gets the remaining_life of this DescribeDeviceResponseDeviceDescription.


        :return: The remaining_life of this DescribeDeviceResponseDeviceDescription.
        :rtype: float
        """
        return self._remaining_life

    @remaining_life.setter
    def remaining_life(self, remaining_life):
        """Sets the remaining_life of this DescribeDeviceResponseDeviceDescription.


        :param remaining_life: The remaining_life of this DescribeDeviceResponseDeviceDescription.
        :type remaining_life: float
        """

        self._remaining_life = remaining_life

    @property
    def type(self):
        """Gets the type of this DescribeDeviceResponseDeviceDescription.


        :return: The type of this DescribeDeviceResponseDeviceDescription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DescribeDeviceResponseDeviceDescription.


        :param type: The type of this DescribeDeviceResponseDeviceDescription.
        :type type: str
        """

        self._type = type

    @property
    def tags(self):
        """Gets the tags of this DescribeDeviceResponseDeviceDescription.


        :return: The tags of this DescribeDeviceResponseDeviceDescription.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribeDeviceResponseDeviceDescription.


        :param tags: The tags of this DescribeDeviceResponseDeviceDescription.
        :type tags: Dict
        """

        self._tags = tags
