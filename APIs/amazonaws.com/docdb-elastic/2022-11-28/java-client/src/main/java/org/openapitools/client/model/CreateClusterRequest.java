/*
 * Amazon DocumentDB Elastic Clusters
 * The new Amazon Elastic DocumentDB service endpoint.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateClusterRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:31.779997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateClusterRequest {
  public static final String SERIALIZED_NAME_ADMIN_USER_NAME = "adminUserName";
  @SerializedName(SERIALIZED_NAME_ADMIN_USER_NAME)
  private String adminUserName;

  public static final String SERIALIZED_NAME_ADMIN_USER_PASSWORD = "adminUserPassword";
  @SerializedName(SERIALIZED_NAME_ADMIN_USER_PASSWORD)
  private String adminUserPassword;

  /**
   * The authentication type for the Elastic DocumentDB cluster.
   */
  @JsonAdapter(AuthTypeEnum.Adapter.class)
  public enum AuthTypeEnum {
    PLAIN_TEXT("PLAIN_TEXT"),
    
    SECRET_ARN("SECRET_ARN");

    private String value;

    AuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthTypeEnum fromValue(String value) {
      for (AuthTypeEnum b : AuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_TYPE = "authType";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeEnum authType;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_CLUSTER_NAME = "clusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "kmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "preferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_SHARD_CAPACITY = "shardCapacity";
  @SerializedName(SERIALIZED_NAME_SHARD_CAPACITY)
  private Integer shardCapacity;

  public static final String SERIALIZED_NAME_SHARD_COUNT = "shardCount";
  @SerializedName(SERIALIZED_NAME_SHARD_COUNT)
  private Integer shardCount;

  public static final String SERIALIZED_NAME_SUBNET_IDS = "subnetIds";
  @SerializedName(SERIALIZED_NAME_SUBNET_IDS)
  private List<String> subnetIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_VPC_SECURITY_GROUP_IDS = "vpcSecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_VPC_SECURITY_GROUP_IDS)
  private List<String> vpcSecurityGroupIds = new ArrayList<>();

  public CreateClusterRequest() {
  }

  public CreateClusterRequest adminUserName(String adminUserName) {
    this.adminUserName = adminUserName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the Elastic DocumentDB cluster administrator.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Constraints&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be from 1 to 63 letters or numbers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot be a reserved word.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return adminUserName
   */
  @javax.annotation.Nonnull
  public String getAdminUserName() {
    return adminUserName;
  }

  public void setAdminUserName(String adminUserName) {
    this.adminUserName = adminUserName;
  }


  public CreateClusterRequest adminUserPassword(String adminUserPassword) {
    this.adminUserPassword = adminUserPassword;
    return this;
  }

  /**
   * &lt;p&gt;The password for the Elastic DocumentDB cluster administrator and can contain any printable ASCII characters.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Constraints&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 8 to 100 characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot contain a forward slash (/), double quote (\&quot;), or the \&quot;at\&quot; symbol (@).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return adminUserPassword
   */
  @javax.annotation.Nonnull
  public String getAdminUserPassword() {
    return adminUserPassword;
  }

  public void setAdminUserPassword(String adminUserPassword) {
    this.adminUserPassword = adminUserPassword;
  }


  public CreateClusterRequest authType(AuthTypeEnum authType) {
    this.authType = authType;
    return this;
  }

  /**
   * The authentication type for the Elastic DocumentDB cluster.
   * @return authType
   */
  @javax.annotation.Nonnull
  public AuthTypeEnum getAuthType() {
    return authType;
  }

  public void setAuthType(AuthTypeEnum authType) {
    this.authType = authType;
  }


  public CreateClusterRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * The client token for the Elastic DocumentDB cluster.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateClusterRequest clusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the new Elastic DocumentDB cluster. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Constraints&lt;/i&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must contain from 1 to 63 letters, numbers, or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;i&gt;Example&lt;/i&gt;: &lt;code&gt;my-cluster&lt;/code&gt; &lt;/p&gt;
   * @return clusterName
   */
  @javax.annotation.Nonnull
  public String getClusterName() {
    return clusterName;
  }

  public void setClusterName(String clusterName) {
    this.clusterName = clusterName;
  }


  public CreateClusterRequest kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * &lt;p&gt;The KMS key identifier to use to encrypt the new Elastic DocumentDB cluster.&lt;/p&gt; &lt;p&gt;The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon account that owns this KMS encryption key, you can use the KMS key alias instead of the ARN as the KMS encryption key.&lt;/p&gt; &lt;p&gt;If an encryption key is not specified, Elastic DocumentDB uses the default encryption key that KMS creates for your account. Your account has a different default encryption key for each Amazon Region.&lt;/p&gt;
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public CreateClusterRequest preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * &lt;p&gt;The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).&lt;/p&gt; &lt;p&gt; &lt;i&gt;Format&lt;/i&gt;: &lt;code&gt;ddd:hh24:mi-ddd:hh24:mi&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;i&gt;Default&lt;/i&gt;: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Valid days&lt;/i&gt;: Mon, Tue, Wed, Thu, Fri, Sat, Sun&lt;/p&gt; &lt;p&gt; &lt;i&gt;Constraints&lt;/i&gt;: Minimum 30-minute window.&lt;/p&gt;
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public CreateClusterRequest shardCapacity(Integer shardCapacity) {
    this.shardCapacity = shardCapacity;
    return this;
  }

  /**
   * The capacity of each shard in the new Elastic DocumentDB cluster.
   * @return shardCapacity
   */
  @javax.annotation.Nonnull
  public Integer getShardCapacity() {
    return shardCapacity;
  }

  public void setShardCapacity(Integer shardCapacity) {
    this.shardCapacity = shardCapacity;
  }


  public CreateClusterRequest shardCount(Integer shardCount) {
    this.shardCount = shardCount;
    return this;
  }

  /**
   * The number of shards to create in the new Elastic DocumentDB cluster.
   * @return shardCount
   */
  @javax.annotation.Nonnull
  public Integer getShardCount() {
    return shardCount;
  }

  public void setShardCount(Integer shardCount) {
    this.shardCount = shardCount;
  }


  public CreateClusterRequest subnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
    return this;
  }

  public CreateClusterRequest addSubnetIdsItem(String subnetIdsItem) {
    if (this.subnetIds == null) {
      this.subnetIds = new ArrayList<>();
    }
    this.subnetIds.add(subnetIdsItem);
    return this;
  }

  /**
   * The Amazon EC2 subnet IDs for the new Elastic DocumentDB cluster.
   * @return subnetIds
   */
  @javax.annotation.Nullable
  public List<String> getSubnetIds() {
    return subnetIds;
  }

  public void setSubnetIds(List<String> subnetIds) {
    this.subnetIds = subnetIds;
  }


  public CreateClusterRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateClusterRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags to be assigned to the new Elastic DocumentDB cluster.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateClusterRequest vpcSecurityGroupIds(List<String> vpcSecurityGroupIds) {
    this.vpcSecurityGroupIds = vpcSecurityGroupIds;
    return this;
  }

  public CreateClusterRequest addVpcSecurityGroupIdsItem(String vpcSecurityGroupIdsItem) {
    if (this.vpcSecurityGroupIds == null) {
      this.vpcSecurityGroupIds = new ArrayList<>();
    }
    this.vpcSecurityGroupIds.add(vpcSecurityGroupIdsItem);
    return this;
  }

  /**
   * A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.
   * @return vpcSecurityGroupIds
   */
  @javax.annotation.Nullable
  public List<String> getVpcSecurityGroupIds() {
    return vpcSecurityGroupIds;
  }

  public void setVpcSecurityGroupIds(List<String> vpcSecurityGroupIds) {
    this.vpcSecurityGroupIds = vpcSecurityGroupIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateClusterRequest createClusterRequest = (CreateClusterRequest) o;
    return Objects.equals(this.adminUserName, createClusterRequest.adminUserName) &&
        Objects.equals(this.adminUserPassword, createClusterRequest.adminUserPassword) &&
        Objects.equals(this.authType, createClusterRequest.authType) &&
        Objects.equals(this.clientToken, createClusterRequest.clientToken) &&
        Objects.equals(this.clusterName, createClusterRequest.clusterName) &&
        Objects.equals(this.kmsKeyId, createClusterRequest.kmsKeyId) &&
        Objects.equals(this.preferredMaintenanceWindow, createClusterRequest.preferredMaintenanceWindow) &&
        Objects.equals(this.shardCapacity, createClusterRequest.shardCapacity) &&
        Objects.equals(this.shardCount, createClusterRequest.shardCount) &&
        Objects.equals(this.subnetIds, createClusterRequest.subnetIds) &&
        Objects.equals(this.tags, createClusterRequest.tags) &&
        Objects.equals(this.vpcSecurityGroupIds, createClusterRequest.vpcSecurityGroupIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminUserName, adminUserPassword, authType, clientToken, clusterName, kmsKeyId, preferredMaintenanceWindow, shardCapacity, shardCount, subnetIds, tags, vpcSecurityGroupIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateClusterRequest {\n");
    sb.append("    adminUserName: ").append(toIndentedString(adminUserName)).append("\n");
    sb.append("    adminUserPassword: ").append("*").append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    shardCapacity: ").append(toIndentedString(shardCapacity)).append("\n");
    sb.append("    shardCount: ").append(toIndentedString(shardCount)).append("\n");
    sb.append("    subnetIds: ").append(toIndentedString(subnetIds)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vpcSecurityGroupIds: ").append(toIndentedString(vpcSecurityGroupIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminUserName");
    openapiFields.add("adminUserPassword");
    openapiFields.add("authType");
    openapiFields.add("clientToken");
    openapiFields.add("clusterName");
    openapiFields.add("kmsKeyId");
    openapiFields.add("preferredMaintenanceWindow");
    openapiFields.add("shardCapacity");
    openapiFields.add("shardCount");
    openapiFields.add("subnetIds");
    openapiFields.add("tags");
    openapiFields.add("vpcSecurityGroupIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("adminUserName");
    openapiRequiredFields.add("adminUserPassword");
    openapiRequiredFields.add("authType");
    openapiRequiredFields.add("clusterName");
    openapiRequiredFields.add("shardCapacity");
    openapiRequiredFields.add("shardCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateClusterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateClusterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateClusterRequest is not found in the empty JSON string", CreateClusterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateClusterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateClusterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateClusterRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("adminUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminUserName").toString()));
      }
      if (!jsonObj.get("adminUserPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminUserPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminUserPassword").toString()));
      }
      if (!jsonObj.get("authType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authType").toString()));
      }
      // validate the required field `authType`
      AuthTypeEnum.validateJsonElement(jsonObj.get("authType"));
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if (!jsonObj.get("clusterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterName").toString()));
      }
      if ((jsonObj.get("kmsKeyId") != null && !jsonObj.get("kmsKeyId").isJsonNull()) && !jsonObj.get("kmsKeyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyId").toString()));
      }
      if ((jsonObj.get("preferredMaintenanceWindow") != null && !jsonObj.get("preferredMaintenanceWindow").isJsonNull()) && !jsonObj.get("preferredMaintenanceWindow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredMaintenanceWindow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredMaintenanceWindow").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subnetIds") != null && !jsonObj.get("subnetIds").isJsonNull() && !jsonObj.get("subnetIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetIds` to be an array in the JSON string but got `%s`", jsonObj.get("subnetIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vpcSecurityGroupIds") != null && !jsonObj.get("vpcSecurityGroupIds").isJsonNull() && !jsonObj.get("vpcSecurityGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpcSecurityGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("vpcSecurityGroupIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateClusterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateClusterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateClusterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateClusterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateClusterRequest>() {
           @Override
           public void write(JsonWriter out, CreateClusterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateClusterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateClusterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateClusterRequest
   * @throws IOException if the JSON string is invalid with respect to CreateClusterRequest
   */
  public static CreateClusterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateClusterRequest.class);
  }

  /**
   * Convert an instance of CreateClusterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

