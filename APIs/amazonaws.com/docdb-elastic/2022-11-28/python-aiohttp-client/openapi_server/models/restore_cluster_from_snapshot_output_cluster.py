# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth import Auth
from openapi_server.models.status import Status
from openapi_server import util


class RestoreClusterFromSnapshotOutputCluster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_user_name: str=None, auth_type: Auth=None, cluster_arn: str=None, cluster_endpoint: str=None, cluster_name: str=None, create_time: str=None, kms_key_id: str=None, preferred_maintenance_window: str=None, shard_capacity: int=None, shard_count: int=None, status: Status=None, subnet_ids: List=None, vpc_security_group_ids: List=None):
        """RestoreClusterFromSnapshotOutputCluster - a model defined in OpenAPI

        :param admin_user_name: The admin_user_name of this RestoreClusterFromSnapshotOutputCluster.
        :param auth_type: The auth_type of this RestoreClusterFromSnapshotOutputCluster.
        :param cluster_arn: The cluster_arn of this RestoreClusterFromSnapshotOutputCluster.
        :param cluster_endpoint: The cluster_endpoint of this RestoreClusterFromSnapshotOutputCluster.
        :param cluster_name: The cluster_name of this RestoreClusterFromSnapshotOutputCluster.
        :param create_time: The create_time of this RestoreClusterFromSnapshotOutputCluster.
        :param kms_key_id: The kms_key_id of this RestoreClusterFromSnapshotOutputCluster.
        :param preferred_maintenance_window: The preferred_maintenance_window of this RestoreClusterFromSnapshotOutputCluster.
        :param shard_capacity: The shard_capacity of this RestoreClusterFromSnapshotOutputCluster.
        :param shard_count: The shard_count of this RestoreClusterFromSnapshotOutputCluster.
        :param status: The status of this RestoreClusterFromSnapshotOutputCluster.
        :param subnet_ids: The subnet_ids of this RestoreClusterFromSnapshotOutputCluster.
        :param vpc_security_group_ids: The vpc_security_group_ids of this RestoreClusterFromSnapshotOutputCluster.
        """
        self.openapi_types = {
            'admin_user_name': str,
            'auth_type': Auth,
            'cluster_arn': str,
            'cluster_endpoint': str,
            'cluster_name': str,
            'create_time': str,
            'kms_key_id': str,
            'preferred_maintenance_window': str,
            'shard_capacity': int,
            'shard_count': int,
            'status': Status,
            'subnet_ids': List,
            'vpc_security_group_ids': List
        }

        self.attribute_map = {
            'admin_user_name': 'adminUserName',
            'auth_type': 'authType',
            'cluster_arn': 'clusterArn',
            'cluster_endpoint': 'clusterEndpoint',
            'cluster_name': 'clusterName',
            'create_time': 'createTime',
            'kms_key_id': 'kmsKeyId',
            'preferred_maintenance_window': 'preferredMaintenanceWindow',
            'shard_capacity': 'shardCapacity',
            'shard_count': 'shardCount',
            'status': 'status',
            'subnet_ids': 'subnetIds',
            'vpc_security_group_ids': 'vpcSecurityGroupIds'
        }

        self._admin_user_name = admin_user_name
        self._auth_type = auth_type
        self._cluster_arn = cluster_arn
        self._cluster_endpoint = cluster_endpoint
        self._cluster_name = cluster_name
        self._create_time = create_time
        self._kms_key_id = kms_key_id
        self._preferred_maintenance_window = preferred_maintenance_window
        self._shard_capacity = shard_capacity
        self._shard_count = shard_count
        self._status = status
        self._subnet_ids = subnet_ids
        self._vpc_security_group_ids = vpc_security_group_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestoreClusterFromSnapshotOutputCluster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestoreClusterFromSnapshotOutput_cluster of this RestoreClusterFromSnapshotOutputCluster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_user_name(self):
        """Gets the admin_user_name of this RestoreClusterFromSnapshotOutputCluster.


        :return: The admin_user_name of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: str
        """
        return self._admin_user_name

    @admin_user_name.setter
    def admin_user_name(self, admin_user_name):
        """Sets the admin_user_name of this RestoreClusterFromSnapshotOutputCluster.


        :param admin_user_name: The admin_user_name of this RestoreClusterFromSnapshotOutputCluster.
        :type admin_user_name: str
        """
        if admin_user_name is None:
            raise ValueError("Invalid value for `admin_user_name`, must not be `None`")

        self._admin_user_name = admin_user_name

    @property
    def auth_type(self):
        """Gets the auth_type of this RestoreClusterFromSnapshotOutputCluster.


        :return: The auth_type of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: Auth
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this RestoreClusterFromSnapshotOutputCluster.


        :param auth_type: The auth_type of this RestoreClusterFromSnapshotOutputCluster.
        :type auth_type: Auth
        """
        if auth_type is None:
            raise ValueError("Invalid value for `auth_type`, must not be `None`")

        self._auth_type = auth_type

    @property
    def cluster_arn(self):
        """Gets the cluster_arn of this RestoreClusterFromSnapshotOutputCluster.


        :return: The cluster_arn of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: str
        """
        return self._cluster_arn

    @cluster_arn.setter
    def cluster_arn(self, cluster_arn):
        """Sets the cluster_arn of this RestoreClusterFromSnapshotOutputCluster.


        :param cluster_arn: The cluster_arn of this RestoreClusterFromSnapshotOutputCluster.
        :type cluster_arn: str
        """
        if cluster_arn is None:
            raise ValueError("Invalid value for `cluster_arn`, must not be `None`")

        self._cluster_arn = cluster_arn

    @property
    def cluster_endpoint(self):
        """Gets the cluster_endpoint of this RestoreClusterFromSnapshotOutputCluster.


        :return: The cluster_endpoint of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: str
        """
        return self._cluster_endpoint

    @cluster_endpoint.setter
    def cluster_endpoint(self, cluster_endpoint):
        """Sets the cluster_endpoint of this RestoreClusterFromSnapshotOutputCluster.


        :param cluster_endpoint: The cluster_endpoint of this RestoreClusterFromSnapshotOutputCluster.
        :type cluster_endpoint: str
        """
        if cluster_endpoint is None:
            raise ValueError("Invalid value for `cluster_endpoint`, must not be `None`")

        self._cluster_endpoint = cluster_endpoint

    @property
    def cluster_name(self):
        """Gets the cluster_name of this RestoreClusterFromSnapshotOutputCluster.


        :return: The cluster_name of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this RestoreClusterFromSnapshotOutputCluster.


        :param cluster_name: The cluster_name of this RestoreClusterFromSnapshotOutputCluster.
        :type cluster_name: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")

        self._cluster_name = cluster_name

    @property
    def create_time(self):
        """Gets the create_time of this RestoreClusterFromSnapshotOutputCluster.


        :return: The create_time of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this RestoreClusterFromSnapshotOutputCluster.


        :param create_time: The create_time of this RestoreClusterFromSnapshotOutputCluster.
        :type create_time: str
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this RestoreClusterFromSnapshotOutputCluster.


        :return: The kms_key_id of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this RestoreClusterFromSnapshotOutputCluster.


        :param kms_key_id: The kms_key_id of this RestoreClusterFromSnapshotOutputCluster.
        :type kms_key_id: str
        """
        if kms_key_id is None:
            raise ValueError("Invalid value for `kms_key_id`, must not be `None`")

        self._kms_key_id = kms_key_id

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this RestoreClusterFromSnapshotOutputCluster.


        :return: The preferred_maintenance_window of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this RestoreClusterFromSnapshotOutputCluster.


        :param preferred_maintenance_window: The preferred_maintenance_window of this RestoreClusterFromSnapshotOutputCluster.
        :type preferred_maintenance_window: str
        """
        if preferred_maintenance_window is None:
            raise ValueError("Invalid value for `preferred_maintenance_window`, must not be `None`")

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def shard_capacity(self):
        """Gets the shard_capacity of this RestoreClusterFromSnapshotOutputCluster.


        :return: The shard_capacity of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: int
        """
        return self._shard_capacity

    @shard_capacity.setter
    def shard_capacity(self, shard_capacity):
        """Sets the shard_capacity of this RestoreClusterFromSnapshotOutputCluster.


        :param shard_capacity: The shard_capacity of this RestoreClusterFromSnapshotOutputCluster.
        :type shard_capacity: int
        """
        if shard_capacity is None:
            raise ValueError("Invalid value for `shard_capacity`, must not be `None`")

        self._shard_capacity = shard_capacity

    @property
    def shard_count(self):
        """Gets the shard_count of this RestoreClusterFromSnapshotOutputCluster.


        :return: The shard_count of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: int
        """
        return self._shard_count

    @shard_count.setter
    def shard_count(self, shard_count):
        """Sets the shard_count of this RestoreClusterFromSnapshotOutputCluster.


        :param shard_count: The shard_count of this RestoreClusterFromSnapshotOutputCluster.
        :type shard_count: int
        """
        if shard_count is None:
            raise ValueError("Invalid value for `shard_count`, must not be `None`")

        self._shard_count = shard_count

    @property
    def status(self):
        """Gets the status of this RestoreClusterFromSnapshotOutputCluster.


        :return: The status of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RestoreClusterFromSnapshotOutputCluster.


        :param status: The status of this RestoreClusterFromSnapshotOutputCluster.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this RestoreClusterFromSnapshotOutputCluster.


        :return: The subnet_ids of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: List
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this RestoreClusterFromSnapshotOutputCluster.


        :param subnet_ids: The subnet_ids of this RestoreClusterFromSnapshotOutputCluster.
        :type subnet_ids: List
        """
        if subnet_ids is None:
            raise ValueError("Invalid value for `subnet_ids`, must not be `None`")

        self._subnet_ids = subnet_ids

    @property
    def vpc_security_group_ids(self):
        """Gets the vpc_security_group_ids of this RestoreClusterFromSnapshotOutputCluster.


        :return: The vpc_security_group_ids of this RestoreClusterFromSnapshotOutputCluster.
        :rtype: List
        """
        return self._vpc_security_group_ids

    @vpc_security_group_ids.setter
    def vpc_security_group_ids(self, vpc_security_group_ids):
        """Sets the vpc_security_group_ids of this RestoreClusterFromSnapshotOutputCluster.


        :param vpc_security_group_ids: The vpc_security_group_ids of this RestoreClusterFromSnapshotOutputCluster.
        :type vpc_security_group_ids: List
        """
        if vpc_security_group_ids is None:
            raise ValueError("Invalid value for `vpc_security_group_ids`, must not be `None`")

        self._vpc_security_group_ids = vpc_security_group_ids
