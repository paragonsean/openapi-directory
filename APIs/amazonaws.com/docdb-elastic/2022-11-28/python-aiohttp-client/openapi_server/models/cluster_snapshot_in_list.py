# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class ClusterSnapshotInList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_arn: str=None, snapshot_arn: str=None, snapshot_creation_time: str=None, snapshot_name: str=None, status: Status=None):
        """ClusterSnapshotInList - a model defined in OpenAPI

        :param cluster_arn: The cluster_arn of this ClusterSnapshotInList.
        :param snapshot_arn: The snapshot_arn of this ClusterSnapshotInList.
        :param snapshot_creation_time: The snapshot_creation_time of this ClusterSnapshotInList.
        :param snapshot_name: The snapshot_name of this ClusterSnapshotInList.
        :param status: The status of this ClusterSnapshotInList.
        """
        self.openapi_types = {
            'cluster_arn': str,
            'snapshot_arn': str,
            'snapshot_creation_time': str,
            'snapshot_name': str,
            'status': Status
        }

        self.attribute_map = {
            'cluster_arn': 'clusterArn',
            'snapshot_arn': 'snapshotArn',
            'snapshot_creation_time': 'snapshotCreationTime',
            'snapshot_name': 'snapshotName',
            'status': 'status'
        }

        self._cluster_arn = cluster_arn
        self._snapshot_arn = snapshot_arn
        self._snapshot_creation_time = snapshot_creation_time
        self._snapshot_name = snapshot_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterSnapshotInList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterSnapshotInList of this ClusterSnapshotInList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_arn(self):
        """Gets the cluster_arn of this ClusterSnapshotInList.


        :return: The cluster_arn of this ClusterSnapshotInList.
        :rtype: str
        """
        return self._cluster_arn

    @cluster_arn.setter
    def cluster_arn(self, cluster_arn):
        """Sets the cluster_arn of this ClusterSnapshotInList.


        :param cluster_arn: The cluster_arn of this ClusterSnapshotInList.
        :type cluster_arn: str
        """
        if cluster_arn is None:
            raise ValueError("Invalid value for `cluster_arn`, must not be `None`")

        self._cluster_arn = cluster_arn

    @property
    def snapshot_arn(self):
        """Gets the snapshot_arn of this ClusterSnapshotInList.


        :return: The snapshot_arn of this ClusterSnapshotInList.
        :rtype: str
        """
        return self._snapshot_arn

    @snapshot_arn.setter
    def snapshot_arn(self, snapshot_arn):
        """Sets the snapshot_arn of this ClusterSnapshotInList.


        :param snapshot_arn: The snapshot_arn of this ClusterSnapshotInList.
        :type snapshot_arn: str
        """
        if snapshot_arn is None:
            raise ValueError("Invalid value for `snapshot_arn`, must not be `None`")

        self._snapshot_arn = snapshot_arn

    @property
    def snapshot_creation_time(self):
        """Gets the snapshot_creation_time of this ClusterSnapshotInList.


        :return: The snapshot_creation_time of this ClusterSnapshotInList.
        :rtype: str
        """
        return self._snapshot_creation_time

    @snapshot_creation_time.setter
    def snapshot_creation_time(self, snapshot_creation_time):
        """Sets the snapshot_creation_time of this ClusterSnapshotInList.


        :param snapshot_creation_time: The snapshot_creation_time of this ClusterSnapshotInList.
        :type snapshot_creation_time: str
        """
        if snapshot_creation_time is None:
            raise ValueError("Invalid value for `snapshot_creation_time`, must not be `None`")

        self._snapshot_creation_time = snapshot_creation_time

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this ClusterSnapshotInList.


        :return: The snapshot_name of this ClusterSnapshotInList.
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this ClusterSnapshotInList.


        :param snapshot_name: The snapshot_name of this ClusterSnapshotInList.
        :type snapshot_name: str
        """
        if snapshot_name is None:
            raise ValueError("Invalid value for `snapshot_name`, must not be `None`")

        self._snapshot_name = snapshot_name

    @property
    def status(self):
        """Gets the status of this ClusterSnapshotInList.


        :return: The status of this ClusterSnapshotInList.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterSnapshotInList.


        :param status: The status of this ClusterSnapshotInList.
        :type status: Status
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
