# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateClusterSnapshotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_arn: str=None, snapshot_name: str=None, tags: Dict[str, str]=None):
        """CreateClusterSnapshotRequest - a model defined in OpenAPI

        :param cluster_arn: The cluster_arn of this CreateClusterSnapshotRequest.
        :param snapshot_name: The snapshot_name of this CreateClusterSnapshotRequest.
        :param tags: The tags of this CreateClusterSnapshotRequest.
        """
        self.openapi_types = {
            'cluster_arn': str,
            'snapshot_name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'cluster_arn': 'clusterArn',
            'snapshot_name': 'snapshotName',
            'tags': 'tags'
        }

        self._cluster_arn = cluster_arn
        self._snapshot_name = snapshot_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateClusterSnapshotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateClusterSnapshot_request of this CreateClusterSnapshotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_arn(self):
        """Gets the cluster_arn of this CreateClusterSnapshotRequest.

        The arn of the Elastic DocumentDB cluster that the snapshot will be taken from.

        :return: The cluster_arn of this CreateClusterSnapshotRequest.
        :rtype: str
        """
        return self._cluster_arn

    @cluster_arn.setter
    def cluster_arn(self, cluster_arn):
        """Sets the cluster_arn of this CreateClusterSnapshotRequest.

        The arn of the Elastic DocumentDB cluster that the snapshot will be taken from.

        :param cluster_arn: The cluster_arn of this CreateClusterSnapshotRequest.
        :type cluster_arn: str
        """
        if cluster_arn is None:
            raise ValueError("Invalid value for `cluster_arn`, must not be `None`")

        self._cluster_arn = cluster_arn

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this CreateClusterSnapshotRequest.

        The name of the Elastic DocumentDB snapshot.

        :return: The snapshot_name of this CreateClusterSnapshotRequest.
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this CreateClusterSnapshotRequest.

        The name of the Elastic DocumentDB snapshot.

        :param snapshot_name: The snapshot_name of this CreateClusterSnapshotRequest.
        :type snapshot_name: str
        """
        if snapshot_name is None:
            raise ValueError("Invalid value for `snapshot_name`, must not be `None`")
        if snapshot_name is not None and len(snapshot_name) > 63:
            raise ValueError("Invalid value for `snapshot_name`, length must be less than or equal to `63`")
        if snapshot_name is not None and len(snapshot_name) < 1:
            raise ValueError("Invalid value for `snapshot_name`, length must be greater than or equal to `1`")

        self._snapshot_name = snapshot_name

    @property
    def tags(self):
        """Gets the tags of this CreateClusterSnapshotRequest.

        The tags to be assigned to the new Elastic DocumentDB snapshot.

        :return: The tags of this CreateClusterSnapshotRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateClusterSnapshotRequest.

        The tags to be assigned to the new Elastic DocumentDB snapshot.

        :param tags: The tags of this CreateClusterSnapshotRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
