# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_user_password: str=None, auth_type: str=None, client_token: str=None, preferred_maintenance_window: str=None, shard_capacity: int=None, shard_count: int=None, subnet_ids: List[str]=None, vpc_security_group_ids: List[str]=None):
        """UpdateClusterRequest - a model defined in OpenAPI

        :param admin_user_password: The admin_user_password of this UpdateClusterRequest.
        :param auth_type: The auth_type of this UpdateClusterRequest.
        :param client_token: The client_token of this UpdateClusterRequest.
        :param preferred_maintenance_window: The preferred_maintenance_window of this UpdateClusterRequest.
        :param shard_capacity: The shard_capacity of this UpdateClusterRequest.
        :param shard_count: The shard_count of this UpdateClusterRequest.
        :param subnet_ids: The subnet_ids of this UpdateClusterRequest.
        :param vpc_security_group_ids: The vpc_security_group_ids of this UpdateClusterRequest.
        """
        self.openapi_types = {
            'admin_user_password': str,
            'auth_type': str,
            'client_token': str,
            'preferred_maintenance_window': str,
            'shard_capacity': int,
            'shard_count': int,
            'subnet_ids': List[str],
            'vpc_security_group_ids': List[str]
        }

        self.attribute_map = {
            'admin_user_password': 'adminUserPassword',
            'auth_type': 'authType',
            'client_token': 'clientToken',
            'preferred_maintenance_window': 'preferredMaintenanceWindow',
            'shard_capacity': 'shardCapacity',
            'shard_count': 'shardCount',
            'subnet_ids': 'subnetIds',
            'vpc_security_group_ids': 'vpcSecurityGroupIds'
        }

        self._admin_user_password = admin_user_password
        self._auth_type = auth_type
        self._client_token = client_token
        self._preferred_maintenance_window = preferred_maintenance_window
        self._shard_capacity = shard_capacity
        self._shard_count = shard_count
        self._subnet_ids = subnet_ids
        self._vpc_security_group_ids = vpc_security_group_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCluster_request of this UpdateClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_user_password(self):
        """Gets the admin_user_password of this UpdateClusterRequest.

        <p>The password for the Elastic DocumentDB cluster administrator. This password can contain any printable ASCII character except forward slash (/), double quote (\"), or the \"at\" symbol (@).</p> <p> <i>Constraints</i>: Must contain from 8 to 100 characters.</p>

        :return: The admin_user_password of this UpdateClusterRequest.
        :rtype: str
        """
        return self._admin_user_password

    @admin_user_password.setter
    def admin_user_password(self, admin_user_password):
        """Sets the admin_user_password of this UpdateClusterRequest.

        <p>The password for the Elastic DocumentDB cluster administrator. This password can contain any printable ASCII character except forward slash (/), double quote (\"), or the \"at\" symbol (@).</p> <p> <i>Constraints</i>: Must contain from 8 to 100 characters.</p>

        :param admin_user_password: The admin_user_password of this UpdateClusterRequest.
        :type admin_user_password: str
        """

        self._admin_user_password = admin_user_password

    @property
    def auth_type(self):
        """Gets the auth_type of this UpdateClusterRequest.

        The authentication type for the Elastic DocumentDB cluster.

        :return: The auth_type of this UpdateClusterRequest.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this UpdateClusterRequest.

        The authentication type for the Elastic DocumentDB cluster.

        :param auth_type: The auth_type of this UpdateClusterRequest.
        :type auth_type: str
        """
        allowed_values = ["PLAIN_TEXT", "SECRET_ARN"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def client_token(self):
        """Gets the client_token of this UpdateClusterRequest.

        The client token for the Elastic DocumentDB cluster.

        :return: The client_token of this UpdateClusterRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateClusterRequest.

        The client token for the Elastic DocumentDB cluster.

        :param client_token: The client_token of this UpdateClusterRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def preferred_maintenance_window(self):
        """Gets the preferred_maintenance_window of this UpdateClusterRequest.

        <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p> <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p> <i>Constraints</i>: Minimum 30-minute window.</p>

        :return: The preferred_maintenance_window of this UpdateClusterRequest.
        :rtype: str
        """
        return self._preferred_maintenance_window

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, preferred_maintenance_window):
        """Sets the preferred_maintenance_window of this UpdateClusterRequest.

        <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p> <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p> <i>Constraints</i>: Minimum 30-minute window.</p>

        :param preferred_maintenance_window: The preferred_maintenance_window of this UpdateClusterRequest.
        :type preferred_maintenance_window: str
        """

        self._preferred_maintenance_window = preferred_maintenance_window

    @property
    def shard_capacity(self):
        """Gets the shard_capacity of this UpdateClusterRequest.

        The capacity of each shard in the Elastic DocumentDB cluster.

        :return: The shard_capacity of this UpdateClusterRequest.
        :rtype: int
        """
        return self._shard_capacity

    @shard_capacity.setter
    def shard_capacity(self, shard_capacity):
        """Sets the shard_capacity of this UpdateClusterRequest.

        The capacity of each shard in the Elastic DocumentDB cluster.

        :param shard_capacity: The shard_capacity of this UpdateClusterRequest.
        :type shard_capacity: int
        """

        self._shard_capacity = shard_capacity

    @property
    def shard_count(self):
        """Gets the shard_count of this UpdateClusterRequest.

        The number of shards to create in the Elastic DocumentDB cluster.

        :return: The shard_count of this UpdateClusterRequest.
        :rtype: int
        """
        return self._shard_count

    @shard_count.setter
    def shard_count(self, shard_count):
        """Sets the shard_count of this UpdateClusterRequest.

        The number of shards to create in the Elastic DocumentDB cluster.

        :param shard_count: The shard_count of this UpdateClusterRequest.
        :type shard_count: int
        """

        self._shard_count = shard_count

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this UpdateClusterRequest.

        The number of shards to create in the Elastic DocumentDB cluster.

        :return: The subnet_ids of this UpdateClusterRequest.
        :rtype: List[str]
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this UpdateClusterRequest.

        The number of shards to create in the Elastic DocumentDB cluster.

        :param subnet_ids: The subnet_ids of this UpdateClusterRequest.
        :type subnet_ids: List[str]
        """

        self._subnet_ids = subnet_ids

    @property
    def vpc_security_group_ids(self):
        """Gets the vpc_security_group_ids of this UpdateClusterRequest.

        A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.

        :return: The vpc_security_group_ids of this UpdateClusterRequest.
        :rtype: List[str]
        """
        return self._vpc_security_group_ids

    @vpc_security_group_ids.setter
    def vpc_security_group_ids(self, vpc_security_group_ids):
        """Sets the vpc_security_group_ids of this UpdateClusterRequest.

        A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.

        :param vpc_security_group_ids: The vpc_security_group_ids of this UpdateClusterRequest.
        :type vpc_security_group_ids: List[str]
        """

        self._vpc_security_group_ids = vpc_security_group_ids
