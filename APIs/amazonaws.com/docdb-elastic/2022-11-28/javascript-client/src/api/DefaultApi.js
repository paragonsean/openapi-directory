/**
 * Amazon DocumentDB Elastic Clusters
 * The new Amazon Elastic DocumentDB service endpoint.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateClusterOutput from '../model/CreateClusterOutput';
import CreateClusterRequest from '../model/CreateClusterRequest';
import CreateClusterSnapshotOutput from '../model/CreateClusterSnapshotOutput';
import CreateClusterSnapshotRequest from '../model/CreateClusterSnapshotRequest';
import DeleteClusterOutput from '../model/DeleteClusterOutput';
import DeleteClusterSnapshotOutput from '../model/DeleteClusterSnapshotOutput';
import GetClusterOutput from '../model/GetClusterOutput';
import GetClusterSnapshotOutput from '../model/GetClusterSnapshotOutput';
import ListClusterSnapshotsOutput from '../model/ListClusterSnapshotsOutput';
import ListClustersOutput from '../model/ListClustersOutput';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import RestoreClusterFromSnapshotOutput from '../model/RestoreClusterFromSnapshotOutput';
import RestoreClusterFromSnapshotRequest from '../model/RestoreClusterFromSnapshotRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateClusterOutput from '../model/UpdateClusterOutput';
import UpdateClusterRequest from '../model/UpdateClusterRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2022-11-28
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCluster operation.
     * @callback module:api/DefaultApi~createClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Elastic DocumentDB cluster and returns its Cluster structure.
     * @param {module:model/CreateClusterRequest} createClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterOutput}
     */
    createCluster(createClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createClusterRequest;
      // verify the required parameter 'createClusterRequest' is set
      if (createClusterRequest === undefined || createClusterRequest === null) {
        throw new Error("Missing the required parameter 'createClusterRequest' when calling createCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClusterOutput;
      return this.apiClient.callApi(
        '/cluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createClusterSnapshot operation.
     * @callback module:api/DefaultApi~createClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterSnapshotOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a snapshot of a cluster.
     * @param {module:model/CreateClusterSnapshotRequest} createClusterSnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterSnapshotOutput}
     */
    createClusterSnapshot(createClusterSnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = createClusterSnapshotRequest;
      // verify the required parameter 'createClusterSnapshotRequest' is set
      if (createClusterSnapshotRequest === undefined || createClusterSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'createClusterSnapshotRequest' when calling createClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClusterSnapshotOutput;
      return this.apiClient.callApi(
        '/cluster-snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCluster operation.
     * @callback module:api/DefaultApi~deleteClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteClusterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Elastic DocumentDB cluster.
     * @param {String} clusterArn The arn of the Elastic DocumentDB cluster that is to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteClusterOutput}
     */
    deleteCluster(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling deleteCluster");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteClusterOutput;
      return this.apiClient.callApi(
        '/cluster/{clusterArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClusterSnapshot operation.
     * @callback module:api/DefaultApi~deleteClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteClusterSnapshotOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Elastic DocumentDB snapshot.
     * @param {String} snapshotArn The arn of the Elastic DocumentDB snapshot that is to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteClusterSnapshotOutput}
     */
    deleteClusterSnapshot(snapshotArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotArn' is set
      if (snapshotArn === undefined || snapshotArn === null) {
        throw new Error("Missing the required parameter 'snapshotArn' when calling deleteClusterSnapshot");
      }

      let pathParams = {
        'snapshotArn': snapshotArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteClusterSnapshotOutput;
      return this.apiClient.callApi(
        '/cluster-snapshot/{snapshotArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCluster operation.
     * @callback module:api/DefaultApi~getClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetClusterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific Elastic DocumentDB cluster.
     * @param {String} clusterArn The arn of the Elastic DocumentDB cluster.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetClusterOutput}
     */
    getCluster(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling getCluster");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetClusterOutput;
      return this.apiClient.callApi(
        '/cluster/{clusterArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterSnapshot operation.
     * @callback module:api/DefaultApi~getClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetClusterSnapshotOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific Elastic DocumentDB snapshot
     * @param {String} snapshotArn The arn of the Elastic DocumentDB snapshot.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetClusterSnapshotOutput}
     */
    getClusterSnapshot(snapshotArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotArn' is set
      if (snapshotArn === undefined || snapshotArn === null) {
        throw new Error("Missing the required parameter 'snapshotArn' when calling getClusterSnapshot");
      }

      let pathParams = {
        'snapshotArn': snapshotArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetClusterSnapshotOutput;
      return this.apiClient.callApi(
        '/cluster-snapshot/{snapshotArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterSnapshots operation.
     * @callback module:api/DefaultApi~listClusterSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClusterSnapshotsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about Elastic DocumentDB snapshots for a specified cluster.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterArn] The arn of the Elastic DocumentDB cluster.
     * @param {Number} [maxResults] The maximum number of entries to recieve in the response.
     * @param {String} [nextToken] The nextToken which is used the get the next page of data.
     * @param {module:api/DefaultApi~listClusterSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClusterSnapshotsOutput}
     */
    listClusterSnapshots(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'clusterArn': opts['clusterArn'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClusterSnapshotsOutput;
      return this.apiClient.callApi(
        '/cluster-snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusters operation.
     * @callback module:api/DefaultApi~listClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClustersOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about provisioned Elastic DocumentDB clusters.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of entries to recieve in the response.
     * @param {String} [nextToken] The nextToken which is used the get the next page of data.
     * @param {module:api/DefaultApi~listClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClustersOutput}
     */
    listClusters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClustersOutput;
      return this.apiClient.callApi(
        '/clusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags on a Elastic DocumentDB resource
     * @param {String} resourceArn The arn of the Elastic DocumentDB resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreClusterFromSnapshot operation.
     * @callback module:api/DefaultApi~restoreClusterFromSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreClusterFromSnapshotOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a Elastic DocumentDB cluster from a snapshot.
     * @param {String} snapshotArn The arn of the Elastic DocumentDB snapshot.
     * @param {module:model/RestoreClusterFromSnapshotRequest} restoreClusterFromSnapshotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~restoreClusterFromSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreClusterFromSnapshotOutput}
     */
    restoreClusterFromSnapshot(snapshotArn, restoreClusterFromSnapshotRequest, opts, callback) {
      opts = opts || {};
      let postBody = restoreClusterFromSnapshotRequest;
      // verify the required parameter 'snapshotArn' is set
      if (snapshotArn === undefined || snapshotArn === null) {
        throw new Error("Missing the required parameter 'snapshotArn' when calling restoreClusterFromSnapshot");
      }
      // verify the required parameter 'restoreClusterFromSnapshotRequest' is set
      if (restoreClusterFromSnapshotRequest === undefined || restoreClusterFromSnapshotRequest === null) {
        throw new Error("Missing the required parameter 'restoreClusterFromSnapshotRequest' when calling restoreClusterFromSnapshot");
      }

      let pathParams = {
        'snapshotArn': snapshotArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestoreClusterFromSnapshotOutput;
      return this.apiClient.callApi(
        '/cluster-snapshot/{snapshotArn}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds metadata tags to a Elastic DocumentDB resource
     * @param {String} resourceArn The arn of the Elastic DocumentDB resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes metadata tags to a Elastic DocumentDB resource
     * @param {String} resourceArn The arn of the Elastic DocumentDB resource.
     * @param {Array.<String>} tagKeys The tag keys to be removed from the Elastic DocumentDB resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCluster operation.
     * @callback module:api/DefaultApi~updateClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateClusterOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a Elastic DocumentDB cluster. This includes updating admin-username/password, upgrading API version setting up a backup window and maintenance window
     * @param {String} clusterArn The arn of the Elastic DocumentDB cluster.
     * @param {module:model/UpdateClusterRequest} updateClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateClusterOutput}
     */
    updateCluster(clusterArn, updateClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateClusterRequest;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling updateCluster");
      }
      // verify the required parameter 'updateClusterRequest' is set
      if (updateClusterRequest === undefined || updateClusterRequest === null) {
        throw new Error("Missing the required parameter 'updateClusterRequest' when calling updateCluster");
      }

      let pathParams = {
        'clusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateClusterOutput;
      return this.apiClient.callApi(
        '/cluster/{clusterArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
