/**
 * Amazon DocumentDB Elastic Clusters
 * The new Amazon Elastic DocumentDB service endpoint.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateClusterRequest model module.
 * @module model/UpdateClusterRequest
 * @version 2022-11-28
 */
class UpdateClusterRequest {
    /**
     * Constructs a new <code>UpdateClusterRequest</code>.
     * @alias module:model/UpdateClusterRequest
     */
    constructor() { 
        
        UpdateClusterRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateClusterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateClusterRequest} obj Optional instance to populate.
     * @return {module:model/UpdateClusterRequest} The populated <code>UpdateClusterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateClusterRequest();

            if (data.hasOwnProperty('adminUserPassword')) {
                obj['adminUserPassword'] = ApiClient.convertToType(data['adminUserPassword'], 'String');
            }
            if (data.hasOwnProperty('authType')) {
                obj['authType'] = ApiClient.convertToType(data['authType'], 'String');
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('preferredMaintenanceWindow')) {
                obj['preferredMaintenanceWindow'] = ApiClient.convertToType(data['preferredMaintenanceWindow'], 'String');
            }
            if (data.hasOwnProperty('shardCapacity')) {
                obj['shardCapacity'] = ApiClient.convertToType(data['shardCapacity'], 'Number');
            }
            if (data.hasOwnProperty('shardCount')) {
                obj['shardCount'] = ApiClient.convertToType(data['shardCount'], 'Number');
            }
            if (data.hasOwnProperty('subnetIds')) {
                obj['subnetIds'] = ApiClient.convertToType(data['subnetIds'], ['String']);
            }
            if (data.hasOwnProperty('vpcSecurityGroupIds')) {
                obj['vpcSecurityGroupIds'] = ApiClient.convertToType(data['vpcSecurityGroupIds'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateClusterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateClusterRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adminUserPassword'] && !(typeof data['adminUserPassword'] === 'string' || data['adminUserPassword'] instanceof String)) {
            throw new Error("Expected the field `adminUserPassword` to be a primitive type in the JSON string but got " + data['adminUserPassword']);
        }
        // ensure the json data is a string
        if (data['authType'] && !(typeof data['authType'] === 'string' || data['authType'] instanceof String)) {
            throw new Error("Expected the field `authType` to be a primitive type in the JSON string but got " + data['authType']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['preferredMaintenanceWindow'] && !(typeof data['preferredMaintenanceWindow'] === 'string' || data['preferredMaintenanceWindow'] instanceof String)) {
            throw new Error("Expected the field `preferredMaintenanceWindow` to be a primitive type in the JSON string but got " + data['preferredMaintenanceWindow']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subnetIds'])) {
            throw new Error("Expected the field `subnetIds` to be an array in the JSON data but got " + data['subnetIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vpcSecurityGroupIds'])) {
            throw new Error("Expected the field `vpcSecurityGroupIds` to be an array in the JSON data but got " + data['vpcSecurityGroupIds']);
        }

        return true;
    }


}



/**
 * <p>The password for the Elastic DocumentDB cluster administrator. This password can contain any printable ASCII character except forward slash (/), double quote (\"), or the \"at\" symbol (@).</p> <p> <i>Constraints</i>: Must contain from 8 to 100 characters.</p>
 * @member {String} adminUserPassword
 */
UpdateClusterRequest.prototype['adminUserPassword'] = undefined;

/**
 * The authentication type for the Elastic DocumentDB cluster.
 * @member {module:model/UpdateClusterRequest.AuthTypeEnum} authType
 */
UpdateClusterRequest.prototype['authType'] = undefined;

/**
 * The client token for the Elastic DocumentDB cluster.
 * @member {String} clientToken
 */
UpdateClusterRequest.prototype['clientToken'] = undefined;

/**
 * <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p> <i>Format</i>: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> <i>Default</i>: a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p> <p> <i>Valid days</i>: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p> <p> <i>Constraints</i>: Minimum 30-minute window.</p>
 * @member {String} preferredMaintenanceWindow
 */
UpdateClusterRequest.prototype['preferredMaintenanceWindow'] = undefined;

/**
 * The capacity of each shard in the Elastic DocumentDB cluster.
 * @member {Number} shardCapacity
 */
UpdateClusterRequest.prototype['shardCapacity'] = undefined;

/**
 * The number of shards to create in the Elastic DocumentDB cluster.
 * @member {Number} shardCount
 */
UpdateClusterRequest.prototype['shardCount'] = undefined;

/**
 * The number of shards to create in the Elastic DocumentDB cluster.
 * @member {Array.<String>} subnetIds
 */
UpdateClusterRequest.prototype['subnetIds'] = undefined;

/**
 * A list of EC2 VPC security groups to associate with the new Elastic DocumentDB cluster.
 * @member {Array.<String>} vpcSecurityGroupIds
 */
UpdateClusterRequest.prototype['vpcSecurityGroupIds'] = undefined;





/**
 * Allowed values for the <code>authType</code> property.
 * @enum {String}
 * @readonly
 */
UpdateClusterRequest['AuthTypeEnum'] = {

    /**
     * value: "PLAIN_TEXT"
     * @const
     */
    "PLAIN_TEXT": "PLAIN_TEXT",

    /**
     * value: "SECRET_ARN"
     * @const
     */
    "SECRET_ARN": "SECRET_ARN"
};



export default UpdateClusterRequest;

