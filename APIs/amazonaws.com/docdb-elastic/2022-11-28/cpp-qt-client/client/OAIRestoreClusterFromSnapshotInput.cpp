/**
 * Amazon DocumentDB Elastic Clusters
 * The new Amazon Elastic DocumentDB service endpoint.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreClusterFromSnapshotInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreClusterFromSnapshotInput::OAIRestoreClusterFromSnapshotInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreClusterFromSnapshotInput::OAIRestoreClusterFromSnapshotInput() {
    this->initializeModel();
}

OAIRestoreClusterFromSnapshotInput::~OAIRestoreClusterFromSnapshotInput() {}

void OAIRestoreClusterFromSnapshotInput::initializeModel() {

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;
}

void OAIRestoreClusterFromSnapshotInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreClusterFromSnapshotInput::fromJsonObject(QJsonObject json) {

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("vpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("vpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;
}

QString OAIRestoreClusterFromSnapshotInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreClusterFromSnapshotInput::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_security_group_ids.isSet()) {
        obj.insert(QString("vpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    return obj;
}

QString OAIRestoreClusterFromSnapshotInput::getClusterName() const {
    return m_cluster_name;
}
void OAIRestoreClusterFromSnapshotInput::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIRestoreClusterFromSnapshotInput::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIRestoreClusterFromSnapshotInput::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAIRestoreClusterFromSnapshotInput::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIRestoreClusterFromSnapshotInput::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIRestoreClusterFromSnapshotInput::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIRestoreClusterFromSnapshotInput::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QList OAIRestoreClusterFromSnapshotInput::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIRestoreClusterFromSnapshotInput::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIRestoreClusterFromSnapshotInput::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIRestoreClusterFromSnapshotInput::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QMap OAIRestoreClusterFromSnapshotInput::getTags() const {
    return m_tags;
}
void OAIRestoreClusterFromSnapshotInput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRestoreClusterFromSnapshotInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRestoreClusterFromSnapshotInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIRestoreClusterFromSnapshotInput::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAIRestoreClusterFromSnapshotInput::setVpcSecurityGroupIds(const QList &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAIRestoreClusterFromSnapshotInput::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAIRestoreClusterFromSnapshotInput::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

bool OAIRestoreClusterFromSnapshotInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreClusterFromSnapshotInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_name_isValid && true;
}

} // namespace OpenAPI
