/**
 * Amazon DocumentDB Elastic Clusters
 * The new Amazon Elastic DocumentDB service endpoint.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCluster_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCluster_request::OAICreateCluster_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCluster_request::OAICreateCluster_request() {
    this->initializeModel();
}

OAICreateCluster_request::~OAICreateCluster_request() {}

void OAICreateCluster_request::initializeModel() {

    m_admin_user_name_isSet = false;
    m_admin_user_name_isValid = false;

    m_admin_user_password_isSet = false;
    m_admin_user_password_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_shard_capacity_isSet = false;
    m_shard_capacity_isValid = false;

    m_shard_count_isSet = false;
    m_shard_count_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;
}

void OAICreateCluster_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCluster_request::fromJsonObject(QJsonObject json) {

    m_admin_user_name_isValid = ::OpenAPI::fromJsonValue(m_admin_user_name, json[QString("adminUserName")]);
    m_admin_user_name_isSet = !json[QString("adminUserName")].isNull() && m_admin_user_name_isValid;

    m_admin_user_password_isValid = ::OpenAPI::fromJsonValue(m_admin_user_password, json[QString("adminUserPassword")]);
    m_admin_user_password_isSet = !json[QString("adminUserPassword")].isNull() && m_admin_user_password_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("preferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("preferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_shard_capacity_isValid = ::OpenAPI::fromJsonValue(m_shard_capacity, json[QString("shardCapacity")]);
    m_shard_capacity_isSet = !json[QString("shardCapacity")].isNull() && m_shard_capacity_isValid;

    m_shard_count_isValid = ::OpenAPI::fromJsonValue(m_shard_count, json[QString("shardCount")]);
    m_shard_count_isSet = !json[QString("shardCount")].isNull() && m_shard_count_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("vpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("vpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;
}

QString OAICreateCluster_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCluster_request::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_user_name_isSet) {
        obj.insert(QString("adminUserName"), ::OpenAPI::toJsonValue(m_admin_user_name));
    }
    if (m_admin_user_password_isSet) {
        obj.insert(QString("adminUserPassword"), ::OpenAPI::toJsonValue(m_admin_user_password));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("preferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_shard_capacity_isSet) {
        obj.insert(QString("shardCapacity"), ::OpenAPI::toJsonValue(m_shard_capacity));
    }
    if (m_shard_count_isSet) {
        obj.insert(QString("shardCount"), ::OpenAPI::toJsonValue(m_shard_count));
    }
    if (m_subnet_ids.size() > 0) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vpc_security_group_ids.size() > 0) {
        obj.insert(QString("vpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    return obj;
}

QString OAICreateCluster_request::getAdminUserName() const {
    return m_admin_user_name;
}
void OAICreateCluster_request::setAdminUserName(const QString &admin_user_name) {
    m_admin_user_name = admin_user_name;
    m_admin_user_name_isSet = true;
}

bool OAICreateCluster_request::is_admin_user_name_Set() const{
    return m_admin_user_name_isSet;
}

bool OAICreateCluster_request::is_admin_user_name_Valid() const{
    return m_admin_user_name_isValid;
}

QString OAICreateCluster_request::getAdminUserPassword() const {
    return m_admin_user_password;
}
void OAICreateCluster_request::setAdminUserPassword(const QString &admin_user_password) {
    m_admin_user_password = admin_user_password;
    m_admin_user_password_isSet = true;
}

bool OAICreateCluster_request::is_admin_user_password_Set() const{
    return m_admin_user_password_isSet;
}

bool OAICreateCluster_request::is_admin_user_password_Valid() const{
    return m_admin_user_password_isValid;
}

QString OAICreateCluster_request::getAuthType() const {
    return m_auth_type;
}
void OAICreateCluster_request::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAICreateCluster_request::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAICreateCluster_request::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAICreateCluster_request::getClientToken() const {
    return m_client_token;
}
void OAICreateCluster_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateCluster_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateCluster_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateCluster_request::getClusterName() const {
    return m_cluster_name;
}
void OAICreateCluster_request::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAICreateCluster_request::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAICreateCluster_request::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

QString OAICreateCluster_request::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateCluster_request::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateCluster_request::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateCluster_request::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

QString OAICreateCluster_request::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAICreateCluster_request::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAICreateCluster_request::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAICreateCluster_request::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

qint32 OAICreateCluster_request::getShardCapacity() const {
    return m_shard_capacity;
}
void OAICreateCluster_request::setShardCapacity(const qint32 &shard_capacity) {
    m_shard_capacity = shard_capacity;
    m_shard_capacity_isSet = true;
}

bool OAICreateCluster_request::is_shard_capacity_Set() const{
    return m_shard_capacity_isSet;
}

bool OAICreateCluster_request::is_shard_capacity_Valid() const{
    return m_shard_capacity_isValid;
}

qint32 OAICreateCluster_request::getShardCount() const {
    return m_shard_count;
}
void OAICreateCluster_request::setShardCount(const qint32 &shard_count) {
    m_shard_count = shard_count;
    m_shard_count_isSet = true;
}

bool OAICreateCluster_request::is_shard_count_Set() const{
    return m_shard_count_isSet;
}

bool OAICreateCluster_request::is_shard_count_Valid() const{
    return m_shard_count_isValid;
}

QList<QString> OAICreateCluster_request::getSubnetIds() const {
    return m_subnet_ids;
}
void OAICreateCluster_request::setSubnetIds(const QList<QString> &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAICreateCluster_request::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAICreateCluster_request::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QMap<QString, QString> OAICreateCluster_request::getTags() const {
    return m_tags;
}
void OAICreateCluster_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateCluster_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateCluster_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<QString> OAICreateCluster_request::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAICreateCluster_request::setVpcSecurityGroupIds(const QList<QString> &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAICreateCluster_request::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAICreateCluster_request::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

bool OAICreateCluster_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCluster_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_admin_user_name_isValid && m_admin_user_password_isValid && m_auth_type_isValid && m_cluster_name_isValid && m_shard_capacity_isValid && m_shard_count_isValid && true;
}

} // namespace OpenAPI
