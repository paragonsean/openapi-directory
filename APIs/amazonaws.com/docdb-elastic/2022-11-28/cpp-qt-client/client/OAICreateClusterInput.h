/**
 * Amazon DocumentDB Elastic Clusters
 * The new Amazon Elastic DocumentDB service endpoint.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateClusterInput.h
 *
 * 
 */

#ifndef OAICreateClusterInput_H
#define OAICreateClusterInput_H

#include <QJsonObject>

#include "OAIAuth.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateClusterInput : public OAIObject {
public:
    OAICreateClusterInput();
    OAICreateClusterInput(QString json);
    ~OAICreateClusterInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdminUserName() const;
    void setAdminUserName(const QString &admin_user_name);
    bool is_admin_user_name_Set() const;
    bool is_admin_user_name_Valid() const;

    QString getAdminUserPassword() const;
    void setAdminUserPassword(const QString &admin_user_password);
    bool is_admin_user_password_Set() const;
    bool is_admin_user_password_Valid() const;

    OAIAuth getAuthType() const;
    void setAuthType(const OAIAuth &auth_type);
    bool is_auth_type_Set() const;
    bool is_auth_type_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getClusterName() const;
    void setClusterName(const QString &cluster_name);
    bool is_cluster_name_Set() const;
    bool is_cluster_name_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QString getPreferredMaintenanceWindow() const;
    void setPreferredMaintenanceWindow(const QString &preferred_maintenance_window);
    bool is_preferred_maintenance_window_Set() const;
    bool is_preferred_maintenance_window_Valid() const;

    qint32 getShardCapacity() const;
    void setShardCapacity(const qint32 &shard_capacity);
    bool is_shard_capacity_Set() const;
    bool is_shard_capacity_Valid() const;

    qint32 getShardCount() const;
    void setShardCount(const qint32 &shard_count);
    bool is_shard_count_Set() const;
    bool is_shard_count_Valid() const;

    QList getSubnetIds() const;
    void setSubnetIds(const QList &subnet_ids);
    bool is_subnet_ids_Set() const;
    bool is_subnet_ids_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList getVpcSecurityGroupIds() const;
    void setVpcSecurityGroupIds(const QList &vpc_security_group_ids);
    bool is_vpc_security_group_ids_Set() const;
    bool is_vpc_security_group_ids_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_admin_user_name;
    bool m_admin_user_name_isSet;
    bool m_admin_user_name_isValid;

    QString m_admin_user_password;
    bool m_admin_user_password_isSet;
    bool m_admin_user_password_isValid;

    OAIAuth m_auth_type;
    bool m_auth_type_isSet;
    bool m_auth_type_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_cluster_name;
    bool m_cluster_name_isSet;
    bool m_cluster_name_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QString m_preferred_maintenance_window;
    bool m_preferred_maintenance_window_isSet;
    bool m_preferred_maintenance_window_isValid;

    qint32 m_shard_capacity;
    bool m_shard_capacity_isSet;
    bool m_shard_capacity_isValid;

    qint32 m_shard_count;
    bool m_shard_count_isSet;
    bool m_shard_count_isValid;

    QList m_subnet_ids;
    bool m_subnet_ids_isSet;
    bool m_subnet_ids_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList m_vpc_security_group_ids;
    bool m_vpc_security_group_ids_isSet;
    bool m_vpc_security_group_ids_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateClusterInput)

#endif // OAICreateClusterInput_H
