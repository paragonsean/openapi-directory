/**
 * Amazon DocumentDB Elastic Clusters
 * The new Amazon Elastic DocumentDB service endpoint.
 *
 * The version of the OpenAPI document: 2022-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateCluster_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateCluster_request::OAIUpdateCluster_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateCluster_request::OAIUpdateCluster_request() {
    this->initializeModel();
}

OAIUpdateCluster_request::~OAIUpdateCluster_request() {}

void OAIUpdateCluster_request::initializeModel() {

    m_admin_user_password_isSet = false;
    m_admin_user_password_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_preferred_maintenance_window_isSet = false;
    m_preferred_maintenance_window_isValid = false;

    m_shard_capacity_isSet = false;
    m_shard_capacity_isValid = false;

    m_shard_count_isSet = false;
    m_shard_count_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_vpc_security_group_ids_isSet = false;
    m_vpc_security_group_ids_isValid = false;
}

void OAIUpdateCluster_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateCluster_request::fromJsonObject(QJsonObject json) {

    m_admin_user_password_isValid = ::OpenAPI::fromJsonValue(m_admin_user_password, json[QString("adminUserPassword")]);
    m_admin_user_password_isSet = !json[QString("adminUserPassword")].isNull() && m_admin_user_password_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_preferred_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_preferred_maintenance_window, json[QString("preferredMaintenanceWindow")]);
    m_preferred_maintenance_window_isSet = !json[QString("preferredMaintenanceWindow")].isNull() && m_preferred_maintenance_window_isValid;

    m_shard_capacity_isValid = ::OpenAPI::fromJsonValue(m_shard_capacity, json[QString("shardCapacity")]);
    m_shard_capacity_isSet = !json[QString("shardCapacity")].isNull() && m_shard_capacity_isValid;

    m_shard_count_isValid = ::OpenAPI::fromJsonValue(m_shard_count, json[QString("shardCount")]);
    m_shard_count_isSet = !json[QString("shardCount")].isNull() && m_shard_count_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;

    m_vpc_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_vpc_security_group_ids, json[QString("vpcSecurityGroupIds")]);
    m_vpc_security_group_ids_isSet = !json[QString("vpcSecurityGroupIds")].isNull() && m_vpc_security_group_ids_isValid;
}

QString OAIUpdateCluster_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateCluster_request::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_user_password_isSet) {
        obj.insert(QString("adminUserPassword"), ::OpenAPI::toJsonValue(m_admin_user_password));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_preferred_maintenance_window_isSet) {
        obj.insert(QString("preferredMaintenanceWindow"), ::OpenAPI::toJsonValue(m_preferred_maintenance_window));
    }
    if (m_shard_capacity_isSet) {
        obj.insert(QString("shardCapacity"), ::OpenAPI::toJsonValue(m_shard_capacity));
    }
    if (m_shard_count_isSet) {
        obj.insert(QString("shardCount"), ::OpenAPI::toJsonValue(m_shard_count));
    }
    if (m_subnet_ids.size() > 0) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_vpc_security_group_ids.size() > 0) {
        obj.insert(QString("vpcSecurityGroupIds"), ::OpenAPI::toJsonValue(m_vpc_security_group_ids));
    }
    return obj;
}

QString OAIUpdateCluster_request::getAdminUserPassword() const {
    return m_admin_user_password;
}
void OAIUpdateCluster_request::setAdminUserPassword(const QString &admin_user_password) {
    m_admin_user_password = admin_user_password;
    m_admin_user_password_isSet = true;
}

bool OAIUpdateCluster_request::is_admin_user_password_Set() const{
    return m_admin_user_password_isSet;
}

bool OAIUpdateCluster_request::is_admin_user_password_Valid() const{
    return m_admin_user_password_isValid;
}

QString OAIUpdateCluster_request::getAuthType() const {
    return m_auth_type;
}
void OAIUpdateCluster_request::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIUpdateCluster_request::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIUpdateCluster_request::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIUpdateCluster_request::getClientToken() const {
    return m_client_token;
}
void OAIUpdateCluster_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateCluster_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateCluster_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIUpdateCluster_request::getPreferredMaintenanceWindow() const {
    return m_preferred_maintenance_window;
}
void OAIUpdateCluster_request::setPreferredMaintenanceWindow(const QString &preferred_maintenance_window) {
    m_preferred_maintenance_window = preferred_maintenance_window;
    m_preferred_maintenance_window_isSet = true;
}

bool OAIUpdateCluster_request::is_preferred_maintenance_window_Set() const{
    return m_preferred_maintenance_window_isSet;
}

bool OAIUpdateCluster_request::is_preferred_maintenance_window_Valid() const{
    return m_preferred_maintenance_window_isValid;
}

qint32 OAIUpdateCluster_request::getShardCapacity() const {
    return m_shard_capacity;
}
void OAIUpdateCluster_request::setShardCapacity(const qint32 &shard_capacity) {
    m_shard_capacity = shard_capacity;
    m_shard_capacity_isSet = true;
}

bool OAIUpdateCluster_request::is_shard_capacity_Set() const{
    return m_shard_capacity_isSet;
}

bool OAIUpdateCluster_request::is_shard_capacity_Valid() const{
    return m_shard_capacity_isValid;
}

qint32 OAIUpdateCluster_request::getShardCount() const {
    return m_shard_count;
}
void OAIUpdateCluster_request::setShardCount(const qint32 &shard_count) {
    m_shard_count = shard_count;
    m_shard_count_isSet = true;
}

bool OAIUpdateCluster_request::is_shard_count_Set() const{
    return m_shard_count_isSet;
}

bool OAIUpdateCluster_request::is_shard_count_Valid() const{
    return m_shard_count_isValid;
}

QList<QString> OAIUpdateCluster_request::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIUpdateCluster_request::setSubnetIds(const QList<QString> &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIUpdateCluster_request::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIUpdateCluster_request::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QList<QString> OAIUpdateCluster_request::getVpcSecurityGroupIds() const {
    return m_vpc_security_group_ids;
}
void OAIUpdateCluster_request::setVpcSecurityGroupIds(const QList<QString> &vpc_security_group_ids) {
    m_vpc_security_group_ids = vpc_security_group_ids;
    m_vpc_security_group_ids_isSet = true;
}

bool OAIUpdateCluster_request::is_vpc_security_group_ids_Set() const{
    return m_vpc_security_group_ids_isSet;
}

bool OAIUpdateCluster_request::is_vpc_security_group_ids_Valid() const{
    return m_vpc_security_group_ids_isValid;
}

bool OAIUpdateCluster_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_security_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateCluster_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
