# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.speke_key_provider_encryption_contract_configuration import SpekeKeyProviderEncryptionContractConfiguration
from openapi_server import util


class CmafEncryptionSpekeKeyProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_contract_configuration: SpekeKeyProviderEncryptionContractConfiguration=None, role_arn: str=None, system_ids: List=None, url: str=None):
        """CmafEncryptionSpekeKeyProvider - a model defined in OpenAPI

        :param encryption_contract_configuration: The encryption_contract_configuration of this CmafEncryptionSpekeKeyProvider.
        :param role_arn: The role_arn of this CmafEncryptionSpekeKeyProvider.
        :param system_ids: The system_ids of this CmafEncryptionSpekeKeyProvider.
        :param url: The url of this CmafEncryptionSpekeKeyProvider.
        """
        self.openapi_types = {
            'encryption_contract_configuration': SpekeKeyProviderEncryptionContractConfiguration,
            'role_arn': str,
            'system_ids': List,
            'url': str
        }

        self.attribute_map = {
            'encryption_contract_configuration': 'EncryptionContractConfiguration',
            'role_arn': 'RoleArn',
            'system_ids': 'SystemIds',
            'url': 'Url'
        }

        self._encryption_contract_configuration = encryption_contract_configuration
        self._role_arn = role_arn
        self._system_ids = system_ids
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CmafEncryptionSpekeKeyProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CmafEncryption_SpekeKeyProvider of this CmafEncryptionSpekeKeyProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_contract_configuration(self):
        """Gets the encryption_contract_configuration of this CmafEncryptionSpekeKeyProvider.


        :return: The encryption_contract_configuration of this CmafEncryptionSpekeKeyProvider.
        :rtype: SpekeKeyProviderEncryptionContractConfiguration
        """
        return self._encryption_contract_configuration

    @encryption_contract_configuration.setter
    def encryption_contract_configuration(self, encryption_contract_configuration):
        """Sets the encryption_contract_configuration of this CmafEncryptionSpekeKeyProvider.


        :param encryption_contract_configuration: The encryption_contract_configuration of this CmafEncryptionSpekeKeyProvider.
        :type encryption_contract_configuration: SpekeKeyProviderEncryptionContractConfiguration
        """

        self._encryption_contract_configuration = encryption_contract_configuration

    @property
    def role_arn(self):
        """Gets the role_arn of this CmafEncryptionSpekeKeyProvider.


        :return: The role_arn of this CmafEncryptionSpekeKeyProvider.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CmafEncryptionSpekeKeyProvider.


        :param role_arn: The role_arn of this CmafEncryptionSpekeKeyProvider.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def system_ids(self):
        """Gets the system_ids of this CmafEncryptionSpekeKeyProvider.


        :return: The system_ids of this CmafEncryptionSpekeKeyProvider.
        :rtype: List
        """
        return self._system_ids

    @system_ids.setter
    def system_ids(self, system_ids):
        """Sets the system_ids of this CmafEncryptionSpekeKeyProvider.


        :param system_ids: The system_ids of this CmafEncryptionSpekeKeyProvider.
        :type system_ids: List
        """
        if system_ids is None:
            raise ValueError("Invalid value for `system_ids`, must not be `None`")

        self._system_ids = system_ids

    @property
    def url(self):
        """Gets the url of this CmafEncryptionSpekeKeyProvider.


        :return: The url of this CmafEncryptionSpekeKeyProvider.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CmafEncryptionSpekeKeyProvider.


        :param url: The url of this CmafEncryptionSpekeKeyProvider.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
