# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dash_manifest_stream_selection import DashManifestStreamSelection
from openapi_server.models.manifest_layout import ManifestLayout
from openapi_server.models.profile import Profile
from openapi_server.models.scte_markers_source import ScteMarkersSource
from openapi_server import util


class DashManifest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manifest_layout: ManifestLayout=None, manifest_name: str=None, min_buffer_time_seconds: int=None, profile: Profile=None, scte_markers_source: ScteMarkersSource=None, stream_selection: DashManifestStreamSelection=None):
        """DashManifest - a model defined in OpenAPI

        :param manifest_layout: The manifest_layout of this DashManifest.
        :param manifest_name: The manifest_name of this DashManifest.
        :param min_buffer_time_seconds: The min_buffer_time_seconds of this DashManifest.
        :param profile: The profile of this DashManifest.
        :param scte_markers_source: The scte_markers_source of this DashManifest.
        :param stream_selection: The stream_selection of this DashManifest.
        """
        self.openapi_types = {
            'manifest_layout': ManifestLayout,
            'manifest_name': str,
            'min_buffer_time_seconds': int,
            'profile': Profile,
            'scte_markers_source': ScteMarkersSource,
            'stream_selection': DashManifestStreamSelection
        }

        self.attribute_map = {
            'manifest_layout': 'ManifestLayout',
            'manifest_name': 'ManifestName',
            'min_buffer_time_seconds': 'MinBufferTimeSeconds',
            'profile': 'Profile',
            'scte_markers_source': 'ScteMarkersSource',
            'stream_selection': 'StreamSelection'
        }

        self._manifest_layout = manifest_layout
        self._manifest_name = manifest_name
        self._min_buffer_time_seconds = min_buffer_time_seconds
        self._profile = profile
        self._scte_markers_source = scte_markers_source
        self._stream_selection = stream_selection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DashManifest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DashManifest of this DashManifest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manifest_layout(self):
        """Gets the manifest_layout of this DashManifest.


        :return: The manifest_layout of this DashManifest.
        :rtype: ManifestLayout
        """
        return self._manifest_layout

    @manifest_layout.setter
    def manifest_layout(self, manifest_layout):
        """Sets the manifest_layout of this DashManifest.


        :param manifest_layout: The manifest_layout of this DashManifest.
        :type manifest_layout: ManifestLayout
        """

        self._manifest_layout = manifest_layout

    @property
    def manifest_name(self):
        """Gets the manifest_name of this DashManifest.


        :return: The manifest_name of this DashManifest.
        :rtype: str
        """
        return self._manifest_name

    @manifest_name.setter
    def manifest_name(self, manifest_name):
        """Sets the manifest_name of this DashManifest.


        :param manifest_name: The manifest_name of this DashManifest.
        :type manifest_name: str
        """

        self._manifest_name = manifest_name

    @property
    def min_buffer_time_seconds(self):
        """Gets the min_buffer_time_seconds of this DashManifest.


        :return: The min_buffer_time_seconds of this DashManifest.
        :rtype: int
        """
        return self._min_buffer_time_seconds

    @min_buffer_time_seconds.setter
    def min_buffer_time_seconds(self, min_buffer_time_seconds):
        """Sets the min_buffer_time_seconds of this DashManifest.


        :param min_buffer_time_seconds: The min_buffer_time_seconds of this DashManifest.
        :type min_buffer_time_seconds: int
        """

        self._min_buffer_time_seconds = min_buffer_time_seconds

    @property
    def profile(self):
        """Gets the profile of this DashManifest.


        :return: The profile of this DashManifest.
        :rtype: Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this DashManifest.


        :param profile: The profile of this DashManifest.
        :type profile: Profile
        """

        self._profile = profile

    @property
    def scte_markers_source(self):
        """Gets the scte_markers_source of this DashManifest.


        :return: The scte_markers_source of this DashManifest.
        :rtype: ScteMarkersSource
        """
        return self._scte_markers_source

    @scte_markers_source.setter
    def scte_markers_source(self, scte_markers_source):
        """Sets the scte_markers_source of this DashManifest.


        :param scte_markers_source: The scte_markers_source of this DashManifest.
        :type scte_markers_source: ScteMarkersSource
        """

        self._scte_markers_source = scte_markers_source

    @property
    def stream_selection(self):
        """Gets the stream_selection of this DashManifest.


        :return: The stream_selection of this DashManifest.
        :rtype: DashManifestStreamSelection
        """
        return self._stream_selection

    @stream_selection.setter
    def stream_selection(self, stream_selection):
        """Sets the stream_selection of this DashManifest.


        :param stream_selection: The stream_selection of this DashManifest.
        :type stream_selection: DashManifestStreamSelection
        """

        self._stream_selection = stream_selection
