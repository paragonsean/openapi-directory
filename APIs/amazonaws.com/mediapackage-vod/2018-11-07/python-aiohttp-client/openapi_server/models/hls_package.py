# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_packaging_configuration_request_hls_package_encryption import CreatePackagingConfigurationRequestHlsPackageEncryption
from openapi_server import util


class HlsPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption: CreatePackagingConfigurationRequestHlsPackageEncryption=None, hls_manifests: List=None, include_dvb_subtitles: bool=None, segment_duration_seconds: int=None, use_audio_rendition_group: bool=None):
        """HlsPackage - a model defined in OpenAPI

        :param encryption: The encryption of this HlsPackage.
        :param hls_manifests: The hls_manifests of this HlsPackage.
        :param include_dvb_subtitles: The include_dvb_subtitles of this HlsPackage.
        :param segment_duration_seconds: The segment_duration_seconds of this HlsPackage.
        :param use_audio_rendition_group: The use_audio_rendition_group of this HlsPackage.
        """
        self.openapi_types = {
            'encryption': CreatePackagingConfigurationRequestHlsPackageEncryption,
            'hls_manifests': List,
            'include_dvb_subtitles': bool,
            'segment_duration_seconds': int,
            'use_audio_rendition_group': bool
        }

        self.attribute_map = {
            'encryption': 'Encryption',
            'hls_manifests': 'HlsManifests',
            'include_dvb_subtitles': 'IncludeDvbSubtitles',
            'segment_duration_seconds': 'SegmentDurationSeconds',
            'use_audio_rendition_group': 'UseAudioRenditionGroup'
        }

        self._encryption = encryption
        self._hls_manifests = hls_manifests
        self._include_dvb_subtitles = include_dvb_subtitles
        self._segment_duration_seconds = segment_duration_seconds
        self._use_audio_rendition_group = use_audio_rendition_group

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HlsPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HlsPackage of this HlsPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption(self):
        """Gets the encryption of this HlsPackage.


        :return: The encryption of this HlsPackage.
        :rtype: CreatePackagingConfigurationRequestHlsPackageEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this HlsPackage.


        :param encryption: The encryption of this HlsPackage.
        :type encryption: CreatePackagingConfigurationRequestHlsPackageEncryption
        """

        self._encryption = encryption

    @property
    def hls_manifests(self):
        """Gets the hls_manifests of this HlsPackage.


        :return: The hls_manifests of this HlsPackage.
        :rtype: List
        """
        return self._hls_manifests

    @hls_manifests.setter
    def hls_manifests(self, hls_manifests):
        """Sets the hls_manifests of this HlsPackage.


        :param hls_manifests: The hls_manifests of this HlsPackage.
        :type hls_manifests: List
        """
        if hls_manifests is None:
            raise ValueError("Invalid value for `hls_manifests`, must not be `None`")

        self._hls_manifests = hls_manifests

    @property
    def include_dvb_subtitles(self):
        """Gets the include_dvb_subtitles of this HlsPackage.


        :return: The include_dvb_subtitles of this HlsPackage.
        :rtype: bool
        """
        return self._include_dvb_subtitles

    @include_dvb_subtitles.setter
    def include_dvb_subtitles(self, include_dvb_subtitles):
        """Sets the include_dvb_subtitles of this HlsPackage.


        :param include_dvb_subtitles: The include_dvb_subtitles of this HlsPackage.
        :type include_dvb_subtitles: bool
        """

        self._include_dvb_subtitles = include_dvb_subtitles

    @property
    def segment_duration_seconds(self):
        """Gets the segment_duration_seconds of this HlsPackage.


        :return: The segment_duration_seconds of this HlsPackage.
        :rtype: int
        """
        return self._segment_duration_seconds

    @segment_duration_seconds.setter
    def segment_duration_seconds(self, segment_duration_seconds):
        """Sets the segment_duration_seconds of this HlsPackage.


        :param segment_duration_seconds: The segment_duration_seconds of this HlsPackage.
        :type segment_duration_seconds: int
        """

        self._segment_duration_seconds = segment_duration_seconds

    @property
    def use_audio_rendition_group(self):
        """Gets the use_audio_rendition_group of this HlsPackage.


        :return: The use_audio_rendition_group of this HlsPackage.
        :rtype: bool
        """
        return self._use_audio_rendition_group

    @use_audio_rendition_group.setter
    def use_audio_rendition_group(self, use_audio_rendition_group):
        """Sets the use_audio_rendition_group of this HlsPackage.


        :param use_audio_rendition_group: The use_audio_rendition_group of this HlsPackage.
        :type use_audio_rendition_group: bool
        """

        self._use_audio_rendition_group = use_audio_rendition_group
