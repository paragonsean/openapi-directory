# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configure_logs_response_authorization import ConfigureLogsResponseAuthorization
from openapi_server.models.configure_logs_response_egress_access_logs import ConfigureLogsResponseEgressAccessLogs
from openapi_server import util


class PackagingGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approximate_asset_count: int=None, arn: str=None, authorization: ConfigureLogsResponseAuthorization=None, created_at: str=None, domain_name: str=None, egress_access_logs: ConfigureLogsResponseEgressAccessLogs=None, id: str=None, tags: Dict=None):
        """PackagingGroup - a model defined in OpenAPI

        :param approximate_asset_count: The approximate_asset_count of this PackagingGroup.
        :param arn: The arn of this PackagingGroup.
        :param authorization: The authorization of this PackagingGroup.
        :param created_at: The created_at of this PackagingGroup.
        :param domain_name: The domain_name of this PackagingGroup.
        :param egress_access_logs: The egress_access_logs of this PackagingGroup.
        :param id: The id of this PackagingGroup.
        :param tags: The tags of this PackagingGroup.
        """
        self.openapi_types = {
            'approximate_asset_count': int,
            'arn': str,
            'authorization': ConfigureLogsResponseAuthorization,
            'created_at': str,
            'domain_name': str,
            'egress_access_logs': ConfigureLogsResponseEgressAccessLogs,
            'id': str,
            'tags': Dict
        }

        self.attribute_map = {
            'approximate_asset_count': 'ApproximateAssetCount',
            'arn': 'Arn',
            'authorization': 'Authorization',
            'created_at': 'CreatedAt',
            'domain_name': 'DomainName',
            'egress_access_logs': 'EgressAccessLogs',
            'id': 'Id',
            'tags': 'Tags'
        }

        self._approximate_asset_count = approximate_asset_count
        self._arn = arn
        self._authorization = authorization
        self._created_at = created_at
        self._domain_name = domain_name
        self._egress_access_logs = egress_access_logs
        self._id = id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackagingGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackagingGroup of this PackagingGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approximate_asset_count(self):
        """Gets the approximate_asset_count of this PackagingGroup.


        :return: The approximate_asset_count of this PackagingGroup.
        :rtype: int
        """
        return self._approximate_asset_count

    @approximate_asset_count.setter
    def approximate_asset_count(self, approximate_asset_count):
        """Sets the approximate_asset_count of this PackagingGroup.


        :param approximate_asset_count: The approximate_asset_count of this PackagingGroup.
        :type approximate_asset_count: int
        """

        self._approximate_asset_count = approximate_asset_count

    @property
    def arn(self):
        """Gets the arn of this PackagingGroup.


        :return: The arn of this PackagingGroup.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this PackagingGroup.


        :param arn: The arn of this PackagingGroup.
        :type arn: str
        """

        self._arn = arn

    @property
    def authorization(self):
        """Gets the authorization of this PackagingGroup.


        :return: The authorization of this PackagingGroup.
        :rtype: ConfigureLogsResponseAuthorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this PackagingGroup.


        :param authorization: The authorization of this PackagingGroup.
        :type authorization: ConfigureLogsResponseAuthorization
        """

        self._authorization = authorization

    @property
    def created_at(self):
        """Gets the created_at of this PackagingGroup.


        :return: The created_at of this PackagingGroup.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PackagingGroup.


        :param created_at: The created_at of this PackagingGroup.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def domain_name(self):
        """Gets the domain_name of this PackagingGroup.


        :return: The domain_name of this PackagingGroup.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this PackagingGroup.


        :param domain_name: The domain_name of this PackagingGroup.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def egress_access_logs(self):
        """Gets the egress_access_logs of this PackagingGroup.


        :return: The egress_access_logs of this PackagingGroup.
        :rtype: ConfigureLogsResponseEgressAccessLogs
        """
        return self._egress_access_logs

    @egress_access_logs.setter
    def egress_access_logs(self, egress_access_logs):
        """Sets the egress_access_logs of this PackagingGroup.


        :param egress_access_logs: The egress_access_logs of this PackagingGroup.
        :type egress_access_logs: ConfigureLogsResponseEgressAccessLogs
        """

        self._egress_access_logs = egress_access_logs

    @property
    def id(self):
        """Gets the id of this PackagingGroup.


        :return: The id of this PackagingGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PackagingGroup.


        :param id: The id of this PackagingGroup.
        :type id: str
        """

        self._id = id

    @property
    def tags(self):
        """Gets the tags of this PackagingGroup.


        :return: The tags of this PackagingGroup.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PackagingGroup.


        :param tags: The tags of this PackagingGroup.
        :type tags: Dict
        """

        self._tags = tags
