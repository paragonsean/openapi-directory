# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configure_logs_request_egress_access_logs import ConfigureLogsRequestEgressAccessLogs
from openapi_server.models.create_packaging_group_request_authorization import CreatePackagingGroupRequestAuthorization
from openapi_server import util


class CreatePackagingGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization: CreatePackagingGroupRequestAuthorization=None, egress_access_logs: ConfigureLogsRequestEgressAccessLogs=None, id: str=None, tags: Dict[str, str]=None):
        """CreatePackagingGroupRequest - a model defined in OpenAPI

        :param authorization: The authorization of this CreatePackagingGroupRequest.
        :param egress_access_logs: The egress_access_logs of this CreatePackagingGroupRequest.
        :param id: The id of this CreatePackagingGroupRequest.
        :param tags: The tags of this CreatePackagingGroupRequest.
        """
        self.openapi_types = {
            'authorization': CreatePackagingGroupRequestAuthorization,
            'egress_access_logs': ConfigureLogsRequestEgressAccessLogs,
            'id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'authorization': 'authorization',
            'egress_access_logs': 'egressAccessLogs',
            'id': 'id',
            'tags': 'tags'
        }

        self._authorization = authorization
        self._egress_access_logs = egress_access_logs
        self._id = id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePackagingGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePackagingGroup_request of this CreatePackagingGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization(self):
        """Gets the authorization of this CreatePackagingGroupRequest.


        :return: The authorization of this CreatePackagingGroupRequest.
        :rtype: CreatePackagingGroupRequestAuthorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this CreatePackagingGroupRequest.


        :param authorization: The authorization of this CreatePackagingGroupRequest.
        :type authorization: CreatePackagingGroupRequestAuthorization
        """

        self._authorization = authorization

    @property
    def egress_access_logs(self):
        """Gets the egress_access_logs of this CreatePackagingGroupRequest.


        :return: The egress_access_logs of this CreatePackagingGroupRequest.
        :rtype: ConfigureLogsRequestEgressAccessLogs
        """
        return self._egress_access_logs

    @egress_access_logs.setter
    def egress_access_logs(self, egress_access_logs):
        """Sets the egress_access_logs of this CreatePackagingGroupRequest.


        :param egress_access_logs: The egress_access_logs of this CreatePackagingGroupRequest.
        :type egress_access_logs: ConfigureLogsRequestEgressAccessLogs
        """

        self._egress_access_logs = egress_access_logs

    @property
    def id(self):
        """Gets the id of this CreatePackagingGroupRequest.

        The ID of the PackagingGroup.

        :return: The id of this CreatePackagingGroupRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreatePackagingGroupRequest.

        The ID of the PackagingGroup.

        :param id: The id of this CreatePackagingGroupRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def tags(self):
        """Gets the tags of this CreatePackagingGroupRequest.

        A collection of tags associated with a resource

        :return: The tags of this CreatePackagingGroupRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePackagingGroupRequest.

        A collection of tags associated with a resource

        :param tags: The tags of this CreatePackagingGroupRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
