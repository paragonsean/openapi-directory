# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dash_manifest_stream_selection import DashManifestStreamSelection
from openapi_server import util


class MssManifest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manifest_name: str=None, stream_selection: DashManifestStreamSelection=None):
        """MssManifest - a model defined in OpenAPI

        :param manifest_name: The manifest_name of this MssManifest.
        :param stream_selection: The stream_selection of this MssManifest.
        """
        self.openapi_types = {
            'manifest_name': str,
            'stream_selection': DashManifestStreamSelection
        }

        self.attribute_map = {
            'manifest_name': 'ManifestName',
            'stream_selection': 'StreamSelection'
        }

        self._manifest_name = manifest_name
        self._stream_selection = stream_selection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MssManifest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MssManifest of this MssManifest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manifest_name(self):
        """Gets the manifest_name of this MssManifest.


        :return: The manifest_name of this MssManifest.
        :rtype: str
        """
        return self._manifest_name

    @manifest_name.setter
    def manifest_name(self, manifest_name):
        """Sets the manifest_name of this MssManifest.


        :param manifest_name: The manifest_name of this MssManifest.
        :type manifest_name: str
        """

        self._manifest_name = manifest_name

    @property
    def stream_selection(self):
        """Gets the stream_selection of this MssManifest.


        :return: The stream_selection of this MssManifest.
        :rtype: DashManifestStreamSelection
        """
        return self._stream_selection

    @stream_selection.setter
    def stream_selection(self, stream_selection):
        """Sets the stream_selection of this MssManifest.


        :param stream_selection: The stream_selection of this MssManifest.
        :type stream_selection: DashManifestStreamSelection
        """

        self._stream_selection = stream_selection
