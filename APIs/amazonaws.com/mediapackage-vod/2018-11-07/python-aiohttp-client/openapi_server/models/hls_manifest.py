# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ad_markers import AdMarkers
from openapi_server.models.dash_manifest_stream_selection import DashManifestStreamSelection
from openapi_server import util


class HlsManifest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_markers: AdMarkers=None, include_iframe_only_stream: bool=None, manifest_name: str=None, program_date_time_interval_seconds: int=None, repeat_ext_x_key: bool=None, stream_selection: DashManifestStreamSelection=None):
        """HlsManifest - a model defined in OpenAPI

        :param ad_markers: The ad_markers of this HlsManifest.
        :param include_iframe_only_stream: The include_iframe_only_stream of this HlsManifest.
        :param manifest_name: The manifest_name of this HlsManifest.
        :param program_date_time_interval_seconds: The program_date_time_interval_seconds of this HlsManifest.
        :param repeat_ext_x_key: The repeat_ext_x_key of this HlsManifest.
        :param stream_selection: The stream_selection of this HlsManifest.
        """
        self.openapi_types = {
            'ad_markers': AdMarkers,
            'include_iframe_only_stream': bool,
            'manifest_name': str,
            'program_date_time_interval_seconds': int,
            'repeat_ext_x_key': bool,
            'stream_selection': DashManifestStreamSelection
        }

        self.attribute_map = {
            'ad_markers': 'AdMarkers',
            'include_iframe_only_stream': 'IncludeIframeOnlyStream',
            'manifest_name': 'ManifestName',
            'program_date_time_interval_seconds': 'ProgramDateTimeIntervalSeconds',
            'repeat_ext_x_key': 'RepeatExtXKey',
            'stream_selection': 'StreamSelection'
        }

        self._ad_markers = ad_markers
        self._include_iframe_only_stream = include_iframe_only_stream
        self._manifest_name = manifest_name
        self._program_date_time_interval_seconds = program_date_time_interval_seconds
        self._repeat_ext_x_key = repeat_ext_x_key
        self._stream_selection = stream_selection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HlsManifest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HlsManifest of this HlsManifest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_markers(self):
        """Gets the ad_markers of this HlsManifest.


        :return: The ad_markers of this HlsManifest.
        :rtype: AdMarkers
        """
        return self._ad_markers

    @ad_markers.setter
    def ad_markers(self, ad_markers):
        """Sets the ad_markers of this HlsManifest.


        :param ad_markers: The ad_markers of this HlsManifest.
        :type ad_markers: AdMarkers
        """

        self._ad_markers = ad_markers

    @property
    def include_iframe_only_stream(self):
        """Gets the include_iframe_only_stream of this HlsManifest.


        :return: The include_iframe_only_stream of this HlsManifest.
        :rtype: bool
        """
        return self._include_iframe_only_stream

    @include_iframe_only_stream.setter
    def include_iframe_only_stream(self, include_iframe_only_stream):
        """Sets the include_iframe_only_stream of this HlsManifest.


        :param include_iframe_only_stream: The include_iframe_only_stream of this HlsManifest.
        :type include_iframe_only_stream: bool
        """

        self._include_iframe_only_stream = include_iframe_only_stream

    @property
    def manifest_name(self):
        """Gets the manifest_name of this HlsManifest.


        :return: The manifest_name of this HlsManifest.
        :rtype: str
        """
        return self._manifest_name

    @manifest_name.setter
    def manifest_name(self, manifest_name):
        """Sets the manifest_name of this HlsManifest.


        :param manifest_name: The manifest_name of this HlsManifest.
        :type manifest_name: str
        """

        self._manifest_name = manifest_name

    @property
    def program_date_time_interval_seconds(self):
        """Gets the program_date_time_interval_seconds of this HlsManifest.


        :return: The program_date_time_interval_seconds of this HlsManifest.
        :rtype: int
        """
        return self._program_date_time_interval_seconds

    @program_date_time_interval_seconds.setter
    def program_date_time_interval_seconds(self, program_date_time_interval_seconds):
        """Sets the program_date_time_interval_seconds of this HlsManifest.


        :param program_date_time_interval_seconds: The program_date_time_interval_seconds of this HlsManifest.
        :type program_date_time_interval_seconds: int
        """

        self._program_date_time_interval_seconds = program_date_time_interval_seconds

    @property
    def repeat_ext_x_key(self):
        """Gets the repeat_ext_x_key of this HlsManifest.


        :return: The repeat_ext_x_key of this HlsManifest.
        :rtype: bool
        """
        return self._repeat_ext_x_key

    @repeat_ext_x_key.setter
    def repeat_ext_x_key(self, repeat_ext_x_key):
        """Sets the repeat_ext_x_key of this HlsManifest.


        :param repeat_ext_x_key: The repeat_ext_x_key of this HlsManifest.
        :type repeat_ext_x_key: bool
        """

        self._repeat_ext_x_key = repeat_ext_x_key

    @property
    def stream_selection(self):
        """Gets the stream_selection of this HlsManifest.


        :return: The stream_selection of this HlsManifest.
        :rtype: DashManifestStreamSelection
        """
        return self._stream_selection

    @stream_selection.setter
    def stream_selection(self, stream_selection):
        """Sets the stream_selection of this HlsManifest.


        :param stream_selection: The stream_selection of this HlsManifest.
        :type stream_selection: DashManifestStreamSelection
        """

        self._stream_selection = stream_selection
