# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_packaging_configuration_request_cmaf_package import CreatePackagingConfigurationRequestCmafPackage
from openapi_server.models.create_packaging_configuration_request_dash_package import CreatePackagingConfigurationRequestDashPackage
from openapi_server.models.create_packaging_configuration_request_hls_package import CreatePackagingConfigurationRequestHlsPackage
from openapi_server.models.create_packaging_configuration_request_mss_package import CreatePackagingConfigurationRequestMssPackage
from openapi_server import util


class CreatePackagingConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cmaf_package: CreatePackagingConfigurationRequestCmafPackage=None, dash_package: CreatePackagingConfigurationRequestDashPackage=None, hls_package: CreatePackagingConfigurationRequestHlsPackage=None, id: str=None, mss_package: CreatePackagingConfigurationRequestMssPackage=None, packaging_group_id: str=None, tags: Dict[str, str]=None):
        """CreatePackagingConfigurationRequest - a model defined in OpenAPI

        :param cmaf_package: The cmaf_package of this CreatePackagingConfigurationRequest.
        :param dash_package: The dash_package of this CreatePackagingConfigurationRequest.
        :param hls_package: The hls_package of this CreatePackagingConfigurationRequest.
        :param id: The id of this CreatePackagingConfigurationRequest.
        :param mss_package: The mss_package of this CreatePackagingConfigurationRequest.
        :param packaging_group_id: The packaging_group_id of this CreatePackagingConfigurationRequest.
        :param tags: The tags of this CreatePackagingConfigurationRequest.
        """
        self.openapi_types = {
            'cmaf_package': CreatePackagingConfigurationRequestCmafPackage,
            'dash_package': CreatePackagingConfigurationRequestDashPackage,
            'hls_package': CreatePackagingConfigurationRequestHlsPackage,
            'id': str,
            'mss_package': CreatePackagingConfigurationRequestMssPackage,
            'packaging_group_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'cmaf_package': 'cmafPackage',
            'dash_package': 'dashPackage',
            'hls_package': 'hlsPackage',
            'id': 'id',
            'mss_package': 'mssPackage',
            'packaging_group_id': 'packagingGroupId',
            'tags': 'tags'
        }

        self._cmaf_package = cmaf_package
        self._dash_package = dash_package
        self._hls_package = hls_package
        self._id = id
        self._mss_package = mss_package
        self._packaging_group_id = packaging_group_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePackagingConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePackagingConfiguration_request of this CreatePackagingConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cmaf_package(self):
        """Gets the cmaf_package of this CreatePackagingConfigurationRequest.


        :return: The cmaf_package of this CreatePackagingConfigurationRequest.
        :rtype: CreatePackagingConfigurationRequestCmafPackage
        """
        return self._cmaf_package

    @cmaf_package.setter
    def cmaf_package(self, cmaf_package):
        """Sets the cmaf_package of this CreatePackagingConfigurationRequest.


        :param cmaf_package: The cmaf_package of this CreatePackagingConfigurationRequest.
        :type cmaf_package: CreatePackagingConfigurationRequestCmafPackage
        """

        self._cmaf_package = cmaf_package

    @property
    def dash_package(self):
        """Gets the dash_package of this CreatePackagingConfigurationRequest.


        :return: The dash_package of this CreatePackagingConfigurationRequest.
        :rtype: CreatePackagingConfigurationRequestDashPackage
        """
        return self._dash_package

    @dash_package.setter
    def dash_package(self, dash_package):
        """Sets the dash_package of this CreatePackagingConfigurationRequest.


        :param dash_package: The dash_package of this CreatePackagingConfigurationRequest.
        :type dash_package: CreatePackagingConfigurationRequestDashPackage
        """

        self._dash_package = dash_package

    @property
    def hls_package(self):
        """Gets the hls_package of this CreatePackagingConfigurationRequest.


        :return: The hls_package of this CreatePackagingConfigurationRequest.
        :rtype: CreatePackagingConfigurationRequestHlsPackage
        """
        return self._hls_package

    @hls_package.setter
    def hls_package(self, hls_package):
        """Sets the hls_package of this CreatePackagingConfigurationRequest.


        :param hls_package: The hls_package of this CreatePackagingConfigurationRequest.
        :type hls_package: CreatePackagingConfigurationRequestHlsPackage
        """

        self._hls_package = hls_package

    @property
    def id(self):
        """Gets the id of this CreatePackagingConfigurationRequest.

        The ID of the PackagingConfiguration.

        :return: The id of this CreatePackagingConfigurationRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreatePackagingConfigurationRequest.

        The ID of the PackagingConfiguration.

        :param id: The id of this CreatePackagingConfigurationRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mss_package(self):
        """Gets the mss_package of this CreatePackagingConfigurationRequest.


        :return: The mss_package of this CreatePackagingConfigurationRequest.
        :rtype: CreatePackagingConfigurationRequestMssPackage
        """
        return self._mss_package

    @mss_package.setter
    def mss_package(self, mss_package):
        """Sets the mss_package of this CreatePackagingConfigurationRequest.


        :param mss_package: The mss_package of this CreatePackagingConfigurationRequest.
        :type mss_package: CreatePackagingConfigurationRequestMssPackage
        """

        self._mss_package = mss_package

    @property
    def packaging_group_id(self):
        """Gets the packaging_group_id of this CreatePackagingConfigurationRequest.

        The ID of a PackagingGroup.

        :return: The packaging_group_id of this CreatePackagingConfigurationRequest.
        :rtype: str
        """
        return self._packaging_group_id

    @packaging_group_id.setter
    def packaging_group_id(self, packaging_group_id):
        """Sets the packaging_group_id of this CreatePackagingConfigurationRequest.

        The ID of a PackagingGroup.

        :param packaging_group_id: The packaging_group_id of this CreatePackagingConfigurationRequest.
        :type packaging_group_id: str
        """
        if packaging_group_id is None:
            raise ValueError("Invalid value for `packaging_group_id`, must not be `None`")

        self._packaging_group_id = packaging_group_id

    @property
    def tags(self):
        """Gets the tags of this CreatePackagingConfigurationRequest.

        A collection of tags associated with a resource

        :return: The tags of this CreatePackagingConfigurationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePackagingConfigurationRequest.

        A collection of tags associated with a resource

        :param tags: The tags of this CreatePackagingConfigurationRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
