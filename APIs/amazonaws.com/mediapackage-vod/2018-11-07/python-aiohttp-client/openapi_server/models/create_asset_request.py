# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAssetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, packaging_group_id: str=None, resource_id: str=None, source_arn: str=None, source_role_arn: str=None, tags: Dict[str, str]=None):
        """CreateAssetRequest - a model defined in OpenAPI

        :param id: The id of this CreateAssetRequest.
        :param packaging_group_id: The packaging_group_id of this CreateAssetRequest.
        :param resource_id: The resource_id of this CreateAssetRequest.
        :param source_arn: The source_arn of this CreateAssetRequest.
        :param source_role_arn: The source_role_arn of this CreateAssetRequest.
        :param tags: The tags of this CreateAssetRequest.
        """
        self.openapi_types = {
            'id': str,
            'packaging_group_id': str,
            'resource_id': str,
            'source_arn': str,
            'source_role_arn': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'id': 'id',
            'packaging_group_id': 'packagingGroupId',
            'resource_id': 'resourceId',
            'source_arn': 'sourceArn',
            'source_role_arn': 'sourceRoleArn',
            'tags': 'tags'
        }

        self._id = id
        self._packaging_group_id = packaging_group_id
        self._resource_id = resource_id
        self._source_arn = source_arn
        self._source_role_arn = source_role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAsset_request of this CreateAssetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CreateAssetRequest.

        The unique identifier for the Asset.

        :return: The id of this CreateAssetRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateAssetRequest.

        The unique identifier for the Asset.

        :param id: The id of this CreateAssetRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def packaging_group_id(self):
        """Gets the packaging_group_id of this CreateAssetRequest.

        The ID of the PackagingGroup for the Asset.

        :return: The packaging_group_id of this CreateAssetRequest.
        :rtype: str
        """
        return self._packaging_group_id

    @packaging_group_id.setter
    def packaging_group_id(self, packaging_group_id):
        """Sets the packaging_group_id of this CreateAssetRequest.

        The ID of the PackagingGroup for the Asset.

        :param packaging_group_id: The packaging_group_id of this CreateAssetRequest.
        :type packaging_group_id: str
        """
        if packaging_group_id is None:
            raise ValueError("Invalid value for `packaging_group_id`, must not be `None`")

        self._packaging_group_id = packaging_group_id

    @property
    def resource_id(self):
        """Gets the resource_id of this CreateAssetRequest.

        The resource ID to include in SPEKE key requests.

        :return: The resource_id of this CreateAssetRequest.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this CreateAssetRequest.

        The resource ID to include in SPEKE key requests.

        :param resource_id: The resource_id of this CreateAssetRequest.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def source_arn(self):
        """Gets the source_arn of this CreateAssetRequest.

        ARN of the source object in S3.

        :return: The source_arn of this CreateAssetRequest.
        :rtype: str
        """
        return self._source_arn

    @source_arn.setter
    def source_arn(self, source_arn):
        """Sets the source_arn of this CreateAssetRequest.

        ARN of the source object in S3.

        :param source_arn: The source_arn of this CreateAssetRequest.
        :type source_arn: str
        """
        if source_arn is None:
            raise ValueError("Invalid value for `source_arn`, must not be `None`")

        self._source_arn = source_arn

    @property
    def source_role_arn(self):
        """Gets the source_role_arn of this CreateAssetRequest.

        The IAM role ARN used to access the source S3 bucket.

        :return: The source_role_arn of this CreateAssetRequest.
        :rtype: str
        """
        return self._source_role_arn

    @source_role_arn.setter
    def source_role_arn(self, source_role_arn):
        """Sets the source_role_arn of this CreateAssetRequest.

        The IAM role ARN used to access the source S3 bucket.

        :param source_role_arn: The source_role_arn of this CreateAssetRequest.
        :type source_role_arn: str
        """
        if source_role_arn is None:
            raise ValueError("Invalid value for `source_role_arn`, must not be `None`")

        self._source_role_arn = source_role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateAssetRequest.

        A collection of tags associated with a resource

        :return: The tags of this CreateAssetRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAssetRequest.

        A collection of tags associated with a resource

        :param tags: The tags of this CreateAssetRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
