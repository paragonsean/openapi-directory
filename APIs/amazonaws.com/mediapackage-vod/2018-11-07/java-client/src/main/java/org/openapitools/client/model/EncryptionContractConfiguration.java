/*
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PresetSpeke20Audio;
import org.openapitools.client.model.PresetSpeke20Video;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0.  The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream.  To configure the encryption contract, specify which audio and video encryption presets to use. Note the following considerations when using encryptionContractConfiguration: encryptionContractConfiguration can be used for DASH endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification. You must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:10.701330-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EncryptionContractConfiguration {
  public static final String SERIALIZED_NAME_PRESET_SPEKE20_AUDIO = "PresetSpeke20Audio";
  @SerializedName(SERIALIZED_NAME_PRESET_SPEKE20_AUDIO)
  private PresetSpeke20Audio presetSpeke20Audio;

  public static final String SERIALIZED_NAME_PRESET_SPEKE20_VIDEO = "PresetSpeke20Video";
  @SerializedName(SERIALIZED_NAME_PRESET_SPEKE20_VIDEO)
  private PresetSpeke20Video presetSpeke20Video;

  public EncryptionContractConfiguration() {
  }

  public EncryptionContractConfiguration presetSpeke20Audio(PresetSpeke20Audio presetSpeke20Audio) {
    this.presetSpeke20Audio = presetSpeke20Audio;
    return this;
  }

  /**
   * Get presetSpeke20Audio
   * @return presetSpeke20Audio
   */
  @javax.annotation.Nonnull
  public PresetSpeke20Audio getPresetSpeke20Audio() {
    return presetSpeke20Audio;
  }

  public void setPresetSpeke20Audio(PresetSpeke20Audio presetSpeke20Audio) {
    this.presetSpeke20Audio = presetSpeke20Audio;
  }


  public EncryptionContractConfiguration presetSpeke20Video(PresetSpeke20Video presetSpeke20Video) {
    this.presetSpeke20Video = presetSpeke20Video;
    return this;
  }

  /**
   * Get presetSpeke20Video
   * @return presetSpeke20Video
   */
  @javax.annotation.Nonnull
  public PresetSpeke20Video getPresetSpeke20Video() {
    return presetSpeke20Video;
  }

  public void setPresetSpeke20Video(PresetSpeke20Video presetSpeke20Video) {
    this.presetSpeke20Video = presetSpeke20Video;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptionContractConfiguration encryptionContractConfiguration = (EncryptionContractConfiguration) o;
    return Objects.equals(this.presetSpeke20Audio, encryptionContractConfiguration.presetSpeke20Audio) &&
        Objects.equals(this.presetSpeke20Video, encryptionContractConfiguration.presetSpeke20Video);
  }

  @Override
  public int hashCode() {
    return Objects.hash(presetSpeke20Audio, presetSpeke20Video);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptionContractConfiguration {\n");
    sb.append("    presetSpeke20Audio: ").append(toIndentedString(presetSpeke20Audio)).append("\n");
    sb.append("    presetSpeke20Video: ").append(toIndentedString(presetSpeke20Video)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PresetSpeke20Audio");
    openapiFields.add("PresetSpeke20Video");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PresetSpeke20Audio");
    openapiRequiredFields.add("PresetSpeke20Video");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncryptionContractConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncryptionContractConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncryptionContractConfiguration is not found in the empty JSON string", EncryptionContractConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncryptionContractConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncryptionContractConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EncryptionContractConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `PresetSpeke20Audio`
      PresetSpeke20Audio.validateJsonElement(jsonObj.get("PresetSpeke20Audio"));
      // validate the required field `PresetSpeke20Video`
      PresetSpeke20Video.validateJsonElement(jsonObj.get("PresetSpeke20Video"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncryptionContractConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncryptionContractConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncryptionContractConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncryptionContractConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<EncryptionContractConfiguration>() {
           @Override
           public void write(JsonWriter out, EncryptionContractConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncryptionContractConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncryptionContractConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncryptionContractConfiguration
   * @throws IOException if the JSON string is invalid with respect to EncryptionContractConfiguration
   */
  public static EncryptionContractConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncryptionContractConfiguration.class);
  }

  /**
   * Convert an instance of EncryptionContractConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

