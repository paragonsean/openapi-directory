/*
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdMarkers;
import org.openapitools.client.model.DashManifestStreamSelection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An HTTP Live Streaming (HLS) manifest configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:10.701330-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsManifest {
  public static final String SERIALIZED_NAME_AD_MARKERS = "AdMarkers";
  @SerializedName(SERIALIZED_NAME_AD_MARKERS)
  private AdMarkers adMarkers;

  public static final String SERIALIZED_NAME_INCLUDE_IFRAME_ONLY_STREAM = "IncludeIframeOnlyStream";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IFRAME_ONLY_STREAM)
  private Boolean includeIframeOnlyStream;

  public static final String SERIALIZED_NAME_MANIFEST_NAME = "ManifestName";
  @SerializedName(SERIALIZED_NAME_MANIFEST_NAME)
  private String manifestName;

  public static final String SERIALIZED_NAME_PROGRAM_DATE_TIME_INTERVAL_SECONDS = "ProgramDateTimeIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_PROGRAM_DATE_TIME_INTERVAL_SECONDS)
  private Integer programDateTimeIntervalSeconds;

  public static final String SERIALIZED_NAME_REPEAT_EXT_X_KEY = "RepeatExtXKey";
  @SerializedName(SERIALIZED_NAME_REPEAT_EXT_X_KEY)
  private Boolean repeatExtXKey;

  public static final String SERIALIZED_NAME_STREAM_SELECTION = "StreamSelection";
  @SerializedName(SERIALIZED_NAME_STREAM_SELECTION)
  private DashManifestStreamSelection streamSelection;

  public HlsManifest() {
  }

  public HlsManifest adMarkers(AdMarkers adMarkers) {
    this.adMarkers = adMarkers;
    return this;
  }

  /**
   * Get adMarkers
   * @return adMarkers
   */
  @javax.annotation.Nullable
  public AdMarkers getAdMarkers() {
    return adMarkers;
  }

  public void setAdMarkers(AdMarkers adMarkers) {
    this.adMarkers = adMarkers;
  }


  public HlsManifest includeIframeOnlyStream(Boolean includeIframeOnlyStream) {
    this.includeIframeOnlyStream = includeIframeOnlyStream;
    return this;
  }

  /**
   * Get includeIframeOnlyStream
   * @return includeIframeOnlyStream
   */
  @javax.annotation.Nullable
  public Boolean getIncludeIframeOnlyStream() {
    return includeIframeOnlyStream;
  }

  public void setIncludeIframeOnlyStream(Boolean includeIframeOnlyStream) {
    this.includeIframeOnlyStream = includeIframeOnlyStream;
  }


  public HlsManifest manifestName(String manifestName) {
    this.manifestName = manifestName;
    return this;
  }

  /**
   * Get manifestName
   * @return manifestName
   */
  @javax.annotation.Nullable
  public String getManifestName() {
    return manifestName;
  }

  public void setManifestName(String manifestName) {
    this.manifestName = manifestName;
  }


  public HlsManifest programDateTimeIntervalSeconds(Integer programDateTimeIntervalSeconds) {
    this.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds;
    return this;
  }

  /**
   * Get programDateTimeIntervalSeconds
   * @return programDateTimeIntervalSeconds
   */
  @javax.annotation.Nullable
  public Integer getProgramDateTimeIntervalSeconds() {
    return programDateTimeIntervalSeconds;
  }

  public void setProgramDateTimeIntervalSeconds(Integer programDateTimeIntervalSeconds) {
    this.programDateTimeIntervalSeconds = programDateTimeIntervalSeconds;
  }


  public HlsManifest repeatExtXKey(Boolean repeatExtXKey) {
    this.repeatExtXKey = repeatExtXKey;
    return this;
  }

  /**
   * Get repeatExtXKey
   * @return repeatExtXKey
   */
  @javax.annotation.Nullable
  public Boolean getRepeatExtXKey() {
    return repeatExtXKey;
  }

  public void setRepeatExtXKey(Boolean repeatExtXKey) {
    this.repeatExtXKey = repeatExtXKey;
  }


  public HlsManifest streamSelection(DashManifestStreamSelection streamSelection) {
    this.streamSelection = streamSelection;
    return this;
  }

  /**
   * Get streamSelection
   * @return streamSelection
   */
  @javax.annotation.Nullable
  public DashManifestStreamSelection getStreamSelection() {
    return streamSelection;
  }

  public void setStreamSelection(DashManifestStreamSelection streamSelection) {
    this.streamSelection = streamSelection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsManifest hlsManifest = (HlsManifest) o;
    return Objects.equals(this.adMarkers, hlsManifest.adMarkers) &&
        Objects.equals(this.includeIframeOnlyStream, hlsManifest.includeIframeOnlyStream) &&
        Objects.equals(this.manifestName, hlsManifest.manifestName) &&
        Objects.equals(this.programDateTimeIntervalSeconds, hlsManifest.programDateTimeIntervalSeconds) &&
        Objects.equals(this.repeatExtXKey, hlsManifest.repeatExtXKey) &&
        Objects.equals(this.streamSelection, hlsManifest.streamSelection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adMarkers, includeIframeOnlyStream, manifestName, programDateTimeIntervalSeconds, repeatExtXKey, streamSelection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsManifest {\n");
    sb.append("    adMarkers: ").append(toIndentedString(adMarkers)).append("\n");
    sb.append("    includeIframeOnlyStream: ").append(toIndentedString(includeIframeOnlyStream)).append("\n");
    sb.append("    manifestName: ").append(toIndentedString(manifestName)).append("\n");
    sb.append("    programDateTimeIntervalSeconds: ").append(toIndentedString(programDateTimeIntervalSeconds)).append("\n");
    sb.append("    repeatExtXKey: ").append(toIndentedString(repeatExtXKey)).append("\n");
    sb.append("    streamSelection: ").append(toIndentedString(streamSelection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdMarkers");
    openapiFields.add("IncludeIframeOnlyStream");
    openapiFields.add("ManifestName");
    openapiFields.add("ProgramDateTimeIntervalSeconds");
    openapiFields.add("RepeatExtXKey");
    openapiFields.add("StreamSelection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsManifest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsManifest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsManifest is not found in the empty JSON string", HlsManifest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsManifest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsManifest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AdMarkers`
      if (jsonObj.get("AdMarkers") != null && !jsonObj.get("AdMarkers").isJsonNull()) {
        AdMarkers.validateJsonElement(jsonObj.get("AdMarkers"));
      }
      // validate the optional field `IncludeIframeOnlyStream`
      if (jsonObj.get("IncludeIframeOnlyStream") != null && !jsonObj.get("IncludeIframeOnlyStream").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeIframeOnlyStream"));
      }
      // validate the optional field `ManifestName`
      if (jsonObj.get("ManifestName") != null && !jsonObj.get("ManifestName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ManifestName"));
      }
      // validate the optional field `ProgramDateTimeIntervalSeconds`
      if (jsonObj.get("ProgramDateTimeIntervalSeconds") != null && !jsonObj.get("ProgramDateTimeIntervalSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgramDateTimeIntervalSeconds"));
      }
      // validate the optional field `RepeatExtXKey`
      if (jsonObj.get("RepeatExtXKey") != null && !jsonObj.get("RepeatExtXKey").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RepeatExtXKey"));
      }
      // validate the optional field `StreamSelection`
      if (jsonObj.get("StreamSelection") != null && !jsonObj.get("StreamSelection").isJsonNull()) {
        DashManifestStreamSelection.validateJsonElement(jsonObj.get("StreamSelection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsManifest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsManifest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsManifest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsManifest.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsManifest>() {
           @Override
           public void write(JsonWriter out, HlsManifest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsManifest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsManifest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsManifest
   * @throws IOException if the JSON string is invalid with respect to HlsManifest
   */
  public static HlsManifest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsManifest.class);
  }

  /**
   * Convert an instance of HlsManifest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

