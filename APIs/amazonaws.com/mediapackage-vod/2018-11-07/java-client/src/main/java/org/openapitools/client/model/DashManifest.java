/*
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DashManifestStreamSelection;
import org.openapitools.client.model.ManifestLayout;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.ScteMarkersSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A DASH manifest configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:10.701330-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DashManifest {
  public static final String SERIALIZED_NAME_MANIFEST_LAYOUT = "ManifestLayout";
  @SerializedName(SERIALIZED_NAME_MANIFEST_LAYOUT)
  private ManifestLayout manifestLayout;

  public static final String SERIALIZED_NAME_MANIFEST_NAME = "ManifestName";
  @SerializedName(SERIALIZED_NAME_MANIFEST_NAME)
  private String manifestName;

  public static final String SERIALIZED_NAME_MIN_BUFFER_TIME_SECONDS = "MinBufferTimeSeconds";
  @SerializedName(SERIALIZED_NAME_MIN_BUFFER_TIME_SECONDS)
  private Integer minBufferTimeSeconds;

  public static final String SERIALIZED_NAME_PROFILE = "Profile";
  @SerializedName(SERIALIZED_NAME_PROFILE)
  private Profile profile;

  public static final String SERIALIZED_NAME_SCTE_MARKERS_SOURCE = "ScteMarkersSource";
  @SerializedName(SERIALIZED_NAME_SCTE_MARKERS_SOURCE)
  private ScteMarkersSource scteMarkersSource;

  public static final String SERIALIZED_NAME_STREAM_SELECTION = "StreamSelection";
  @SerializedName(SERIALIZED_NAME_STREAM_SELECTION)
  private DashManifestStreamSelection streamSelection;

  public DashManifest() {
  }

  public DashManifest manifestLayout(ManifestLayout manifestLayout) {
    this.manifestLayout = manifestLayout;
    return this;
  }

  /**
   * Get manifestLayout
   * @return manifestLayout
   */
  @javax.annotation.Nullable
  public ManifestLayout getManifestLayout() {
    return manifestLayout;
  }

  public void setManifestLayout(ManifestLayout manifestLayout) {
    this.manifestLayout = manifestLayout;
  }


  public DashManifest manifestName(String manifestName) {
    this.manifestName = manifestName;
    return this;
  }

  /**
   * Get manifestName
   * @return manifestName
   */
  @javax.annotation.Nullable
  public String getManifestName() {
    return manifestName;
  }

  public void setManifestName(String manifestName) {
    this.manifestName = manifestName;
  }


  public DashManifest minBufferTimeSeconds(Integer minBufferTimeSeconds) {
    this.minBufferTimeSeconds = minBufferTimeSeconds;
    return this;
  }

  /**
   * Get minBufferTimeSeconds
   * @return minBufferTimeSeconds
   */
  @javax.annotation.Nullable
  public Integer getMinBufferTimeSeconds() {
    return minBufferTimeSeconds;
  }

  public void setMinBufferTimeSeconds(Integer minBufferTimeSeconds) {
    this.minBufferTimeSeconds = minBufferTimeSeconds;
  }


  public DashManifest profile(Profile profile) {
    this.profile = profile;
    return this;
  }

  /**
   * Get profile
   * @return profile
   */
  @javax.annotation.Nullable
  public Profile getProfile() {
    return profile;
  }

  public void setProfile(Profile profile) {
    this.profile = profile;
  }


  public DashManifest scteMarkersSource(ScteMarkersSource scteMarkersSource) {
    this.scteMarkersSource = scteMarkersSource;
    return this;
  }

  /**
   * Get scteMarkersSource
   * @return scteMarkersSource
   */
  @javax.annotation.Nullable
  public ScteMarkersSource getScteMarkersSource() {
    return scteMarkersSource;
  }

  public void setScteMarkersSource(ScteMarkersSource scteMarkersSource) {
    this.scteMarkersSource = scteMarkersSource;
  }


  public DashManifest streamSelection(DashManifestStreamSelection streamSelection) {
    this.streamSelection = streamSelection;
    return this;
  }

  /**
   * Get streamSelection
   * @return streamSelection
   */
  @javax.annotation.Nullable
  public DashManifestStreamSelection getStreamSelection() {
    return streamSelection;
  }

  public void setStreamSelection(DashManifestStreamSelection streamSelection) {
    this.streamSelection = streamSelection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashManifest dashManifest = (DashManifest) o;
    return Objects.equals(this.manifestLayout, dashManifest.manifestLayout) &&
        Objects.equals(this.manifestName, dashManifest.manifestName) &&
        Objects.equals(this.minBufferTimeSeconds, dashManifest.minBufferTimeSeconds) &&
        Objects.equals(this.profile, dashManifest.profile) &&
        Objects.equals(this.scteMarkersSource, dashManifest.scteMarkersSource) &&
        Objects.equals(this.streamSelection, dashManifest.streamSelection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(manifestLayout, manifestName, minBufferTimeSeconds, profile, scteMarkersSource, streamSelection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashManifest {\n");
    sb.append("    manifestLayout: ").append(toIndentedString(manifestLayout)).append("\n");
    sb.append("    manifestName: ").append(toIndentedString(manifestName)).append("\n");
    sb.append("    minBufferTimeSeconds: ").append(toIndentedString(minBufferTimeSeconds)).append("\n");
    sb.append("    profile: ").append(toIndentedString(profile)).append("\n");
    sb.append("    scteMarkersSource: ").append(toIndentedString(scteMarkersSource)).append("\n");
    sb.append("    streamSelection: ").append(toIndentedString(streamSelection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ManifestLayout");
    openapiFields.add("ManifestName");
    openapiFields.add("MinBufferTimeSeconds");
    openapiFields.add("Profile");
    openapiFields.add("ScteMarkersSource");
    openapiFields.add("StreamSelection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DashManifest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DashManifest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DashManifest is not found in the empty JSON string", DashManifest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DashManifest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DashManifest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ManifestLayout`
      if (jsonObj.get("ManifestLayout") != null && !jsonObj.get("ManifestLayout").isJsonNull()) {
        ManifestLayout.validateJsonElement(jsonObj.get("ManifestLayout"));
      }
      // validate the optional field `ManifestName`
      if (jsonObj.get("ManifestName") != null && !jsonObj.get("ManifestName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ManifestName"));
      }
      // validate the optional field `MinBufferTimeSeconds`
      if (jsonObj.get("MinBufferTimeSeconds") != null && !jsonObj.get("MinBufferTimeSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MinBufferTimeSeconds"));
      }
      // validate the optional field `Profile`
      if (jsonObj.get("Profile") != null && !jsonObj.get("Profile").isJsonNull()) {
        Profile.validateJsonElement(jsonObj.get("Profile"));
      }
      // validate the optional field `ScteMarkersSource`
      if (jsonObj.get("ScteMarkersSource") != null && !jsonObj.get("ScteMarkersSource").isJsonNull()) {
        ScteMarkersSource.validateJsonElement(jsonObj.get("ScteMarkersSource"));
      }
      // validate the optional field `StreamSelection`
      if (jsonObj.get("StreamSelection") != null && !jsonObj.get("StreamSelection").isJsonNull()) {
        DashManifestStreamSelection.validateJsonElement(jsonObj.get("StreamSelection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DashManifest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DashManifest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DashManifest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DashManifest.class));

       return (TypeAdapter<T>) new TypeAdapter<DashManifest>() {
           @Override
           public void write(JsonWriter out, DashManifest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DashManifest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DashManifest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DashManifest
   * @throws IOException if the JSON string is invalid with respect to DashManifest
   */
  public static DashManifest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DashManifest.class);
  }

  /**
   * Convert an instance of DashManifest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

