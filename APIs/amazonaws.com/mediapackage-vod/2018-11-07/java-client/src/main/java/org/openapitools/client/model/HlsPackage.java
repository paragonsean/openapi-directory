/*
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePackagingConfigurationRequestHlsPackageEncryption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An HTTP Live Streaming (HLS) packaging configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:10.701330-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HlsPackage {
  public static final String SERIALIZED_NAME_ENCRYPTION = "Encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private CreatePackagingConfigurationRequestHlsPackageEncryption encryption;

  public static final String SERIALIZED_NAME_HLS_MANIFESTS = "HlsManifests";
  @SerializedName(SERIALIZED_NAME_HLS_MANIFESTS)
  private List hlsManifests;

  public static final String SERIALIZED_NAME_INCLUDE_DVB_SUBTITLES = "IncludeDvbSubtitles";
  @SerializedName(SERIALIZED_NAME_INCLUDE_DVB_SUBTITLES)
  private Boolean includeDvbSubtitles;

  public static final String SERIALIZED_NAME_SEGMENT_DURATION_SECONDS = "SegmentDurationSeconds";
  @SerializedName(SERIALIZED_NAME_SEGMENT_DURATION_SECONDS)
  private Integer segmentDurationSeconds;

  public static final String SERIALIZED_NAME_USE_AUDIO_RENDITION_GROUP = "UseAudioRenditionGroup";
  @SerializedName(SERIALIZED_NAME_USE_AUDIO_RENDITION_GROUP)
  private Boolean useAudioRenditionGroup;

  public HlsPackage() {
  }

  public HlsPackage encryption(CreatePackagingConfigurationRequestHlsPackageEncryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public CreatePackagingConfigurationRequestHlsPackageEncryption getEncryption() {
    return encryption;
  }

  public void setEncryption(CreatePackagingConfigurationRequestHlsPackageEncryption encryption) {
    this.encryption = encryption;
  }


  public HlsPackage hlsManifests(List hlsManifests) {
    this.hlsManifests = hlsManifests;
    return this;
  }

  /**
   * Get hlsManifests
   * @return hlsManifests
   */
  @javax.annotation.Nonnull
  public List getHlsManifests() {
    return hlsManifests;
  }

  public void setHlsManifests(List hlsManifests) {
    this.hlsManifests = hlsManifests;
  }


  public HlsPackage includeDvbSubtitles(Boolean includeDvbSubtitles) {
    this.includeDvbSubtitles = includeDvbSubtitles;
    return this;
  }

  /**
   * Get includeDvbSubtitles
   * @return includeDvbSubtitles
   */
  @javax.annotation.Nullable
  public Boolean getIncludeDvbSubtitles() {
    return includeDvbSubtitles;
  }

  public void setIncludeDvbSubtitles(Boolean includeDvbSubtitles) {
    this.includeDvbSubtitles = includeDvbSubtitles;
  }


  public HlsPackage segmentDurationSeconds(Integer segmentDurationSeconds) {
    this.segmentDurationSeconds = segmentDurationSeconds;
    return this;
  }

  /**
   * Get segmentDurationSeconds
   * @return segmentDurationSeconds
   */
  @javax.annotation.Nullable
  public Integer getSegmentDurationSeconds() {
    return segmentDurationSeconds;
  }

  public void setSegmentDurationSeconds(Integer segmentDurationSeconds) {
    this.segmentDurationSeconds = segmentDurationSeconds;
  }


  public HlsPackage useAudioRenditionGroup(Boolean useAudioRenditionGroup) {
    this.useAudioRenditionGroup = useAudioRenditionGroup;
    return this;
  }

  /**
   * Get useAudioRenditionGroup
   * @return useAudioRenditionGroup
   */
  @javax.annotation.Nullable
  public Boolean getUseAudioRenditionGroup() {
    return useAudioRenditionGroup;
  }

  public void setUseAudioRenditionGroup(Boolean useAudioRenditionGroup) {
    this.useAudioRenditionGroup = useAudioRenditionGroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HlsPackage hlsPackage = (HlsPackage) o;
    return Objects.equals(this.encryption, hlsPackage.encryption) &&
        Objects.equals(this.hlsManifests, hlsPackage.hlsManifests) &&
        Objects.equals(this.includeDvbSubtitles, hlsPackage.includeDvbSubtitles) &&
        Objects.equals(this.segmentDurationSeconds, hlsPackage.segmentDurationSeconds) &&
        Objects.equals(this.useAudioRenditionGroup, hlsPackage.useAudioRenditionGroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryption, hlsManifests, includeDvbSubtitles, segmentDurationSeconds, useAudioRenditionGroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HlsPackage {\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    hlsManifests: ").append(toIndentedString(hlsManifests)).append("\n");
    sb.append("    includeDvbSubtitles: ").append(toIndentedString(includeDvbSubtitles)).append("\n");
    sb.append("    segmentDurationSeconds: ").append(toIndentedString(segmentDurationSeconds)).append("\n");
    sb.append("    useAudioRenditionGroup: ").append(toIndentedString(useAudioRenditionGroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Encryption");
    openapiFields.add("HlsManifests");
    openapiFields.add("IncludeDvbSubtitles");
    openapiFields.add("SegmentDurationSeconds");
    openapiFields.add("UseAudioRenditionGroup");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HlsManifests");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HlsPackage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HlsPackage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HlsPackage is not found in the empty JSON string", HlsPackage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HlsPackage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HlsPackage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HlsPackage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Encryption`
      if (jsonObj.get("Encryption") != null && !jsonObj.get("Encryption").isJsonNull()) {
        CreatePackagingConfigurationRequestHlsPackageEncryption.validateJsonElement(jsonObj.get("Encryption"));
      }
      // validate the required field `HlsManifests`
      List.validateJsonElement(jsonObj.get("HlsManifests"));
      // validate the optional field `IncludeDvbSubtitles`
      if (jsonObj.get("IncludeDvbSubtitles") != null && !jsonObj.get("IncludeDvbSubtitles").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeDvbSubtitles"));
      }
      // validate the optional field `SegmentDurationSeconds`
      if (jsonObj.get("SegmentDurationSeconds") != null && !jsonObj.get("SegmentDurationSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SegmentDurationSeconds"));
      }
      // validate the optional field `UseAudioRenditionGroup`
      if (jsonObj.get("UseAudioRenditionGroup") != null && !jsonObj.get("UseAudioRenditionGroup").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseAudioRenditionGroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HlsPackage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HlsPackage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HlsPackage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HlsPackage.class));

       return (TypeAdapter<T>) new TypeAdapter<HlsPackage>() {
           @Override
           public void write(JsonWriter out, HlsPackage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HlsPackage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HlsPackage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HlsPackage
   * @throws IOException if the JSON string is invalid with respect to HlsPackage
   */
  public static HlsPackage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HlsPackage.class);
  }

  /**
   * Convert an instance of HlsPackage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

