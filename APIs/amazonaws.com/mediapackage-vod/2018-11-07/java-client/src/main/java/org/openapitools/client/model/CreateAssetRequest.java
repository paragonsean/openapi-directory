/*
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAssetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:10.701330-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAssetRequest {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PACKAGING_GROUP_ID = "packagingGroupId";
  @SerializedName(SERIALIZED_NAME_PACKAGING_GROUP_ID)
  private String packagingGroupId;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_SOURCE_ARN = "sourceArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_ARN)
  private String sourceArn;

  public static final String SERIALIZED_NAME_SOURCE_ROLE_ARN = "sourceRoleArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_ROLE_ARN)
  private String sourceRoleArn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateAssetRequest() {
  }

  public CreateAssetRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier for the Asset.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateAssetRequest packagingGroupId(String packagingGroupId) {
    this.packagingGroupId = packagingGroupId;
    return this;
  }

  /**
   * The ID of the PackagingGroup for the Asset.
   * @return packagingGroupId
   */
  @javax.annotation.Nonnull
  public String getPackagingGroupId() {
    return packagingGroupId;
  }

  public void setPackagingGroupId(String packagingGroupId) {
    this.packagingGroupId = packagingGroupId;
  }


  public CreateAssetRequest resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * The resource ID to include in SPEKE key requests.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public CreateAssetRequest sourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
    return this;
  }

  /**
   * ARN of the source object in S3.
   * @return sourceArn
   */
  @javax.annotation.Nonnull
  public String getSourceArn() {
    return sourceArn;
  }

  public void setSourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
  }


  public CreateAssetRequest sourceRoleArn(String sourceRoleArn) {
    this.sourceRoleArn = sourceRoleArn;
    return this;
  }

  /**
   * The IAM role ARN used to access the source S3 bucket.
   * @return sourceRoleArn
   */
  @javax.annotation.Nonnull
  public String getSourceRoleArn() {
    return sourceRoleArn;
  }

  public void setSourceRoleArn(String sourceRoleArn) {
    this.sourceRoleArn = sourceRoleArn;
  }


  public CreateAssetRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateAssetRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A collection of tags associated with a resource
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAssetRequest createAssetRequest = (CreateAssetRequest) o;
    return Objects.equals(this.id, createAssetRequest.id) &&
        Objects.equals(this.packagingGroupId, createAssetRequest.packagingGroupId) &&
        Objects.equals(this.resourceId, createAssetRequest.resourceId) &&
        Objects.equals(this.sourceArn, createAssetRequest.sourceArn) &&
        Objects.equals(this.sourceRoleArn, createAssetRequest.sourceRoleArn) &&
        Objects.equals(this.tags, createAssetRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, packagingGroupId, resourceId, sourceArn, sourceRoleArn, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAssetRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    packagingGroupId: ").append(toIndentedString(packagingGroupId)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    sourceArn: ").append(toIndentedString(sourceArn)).append("\n");
    sb.append("    sourceRoleArn: ").append(toIndentedString(sourceRoleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("packagingGroupId");
    openapiFields.add("resourceId");
    openapiFields.add("sourceArn");
    openapiFields.add("sourceRoleArn");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("packagingGroupId");
    openapiRequiredFields.add("sourceArn");
    openapiRequiredFields.add("sourceRoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAssetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAssetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAssetRequest is not found in the empty JSON string", CreateAssetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAssetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAssetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAssetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("packagingGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packagingGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packagingGroupId").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if (!jsonObj.get("sourceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceArn").toString()));
      }
      if (!jsonObj.get("sourceRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceRoleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAssetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAssetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAssetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAssetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAssetRequest>() {
           @Override
           public void write(JsonWriter out, CreateAssetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAssetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAssetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAssetRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAssetRequest
   */
  public static CreateAssetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAssetRequest.class);
  }

  /**
   * Convert an instance of CreateAssetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

