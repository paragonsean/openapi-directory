/**
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDashManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDashManifest::OAIDashManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDashManifest::OAIDashManifest() {
    this->initializeModel();
}

OAIDashManifest::~OAIDashManifest() {}

void OAIDashManifest::initializeModel() {

    m_manifest_layout_isSet = false;
    m_manifest_layout_isValid = false;

    m_manifest_name_isSet = false;
    m_manifest_name_isValid = false;

    m_min_buffer_time_seconds_isSet = false;
    m_min_buffer_time_seconds_isValid = false;

    m_profile_isSet = false;
    m_profile_isValid = false;

    m_scte_markers_source_isSet = false;
    m_scte_markers_source_isValid = false;

    m_stream_selection_isSet = false;
    m_stream_selection_isValid = false;
}

void OAIDashManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDashManifest::fromJsonObject(QJsonObject json) {

    m_manifest_layout_isValid = ::OpenAPI::fromJsonValue(m_manifest_layout, json[QString("ManifestLayout")]);
    m_manifest_layout_isSet = !json[QString("ManifestLayout")].isNull() && m_manifest_layout_isValid;

    m_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_manifest_name, json[QString("ManifestName")]);
    m_manifest_name_isSet = !json[QString("ManifestName")].isNull() && m_manifest_name_isValid;

    m_min_buffer_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_min_buffer_time_seconds, json[QString("MinBufferTimeSeconds")]);
    m_min_buffer_time_seconds_isSet = !json[QString("MinBufferTimeSeconds")].isNull() && m_min_buffer_time_seconds_isValid;

    m_profile_isValid = ::OpenAPI::fromJsonValue(m_profile, json[QString("Profile")]);
    m_profile_isSet = !json[QString("Profile")].isNull() && m_profile_isValid;

    m_scte_markers_source_isValid = ::OpenAPI::fromJsonValue(m_scte_markers_source, json[QString("ScteMarkersSource")]);
    m_scte_markers_source_isSet = !json[QString("ScteMarkersSource")].isNull() && m_scte_markers_source_isValid;

    m_stream_selection_isValid = ::OpenAPI::fromJsonValue(m_stream_selection, json[QString("StreamSelection")]);
    m_stream_selection_isSet = !json[QString("StreamSelection")].isNull() && m_stream_selection_isValid;
}

QString OAIDashManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDashManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_manifest_layout.isSet()) {
        obj.insert(QString("ManifestLayout"), ::OpenAPI::toJsonValue(m_manifest_layout));
    }
    if (m_manifest_name_isSet) {
        obj.insert(QString("ManifestName"), ::OpenAPI::toJsonValue(m_manifest_name));
    }
    if (m_min_buffer_time_seconds_isSet) {
        obj.insert(QString("MinBufferTimeSeconds"), ::OpenAPI::toJsonValue(m_min_buffer_time_seconds));
    }
    if (m_profile.isSet()) {
        obj.insert(QString("Profile"), ::OpenAPI::toJsonValue(m_profile));
    }
    if (m_scte_markers_source.isSet()) {
        obj.insert(QString("ScteMarkersSource"), ::OpenAPI::toJsonValue(m_scte_markers_source));
    }
    if (m_stream_selection.isSet()) {
        obj.insert(QString("StreamSelection"), ::OpenAPI::toJsonValue(m_stream_selection));
    }
    return obj;
}

OAIManifestLayout OAIDashManifest::getManifestLayout() const {
    return m_manifest_layout;
}
void OAIDashManifest::setManifestLayout(const OAIManifestLayout &manifest_layout) {
    m_manifest_layout = manifest_layout;
    m_manifest_layout_isSet = true;
}

bool OAIDashManifest::is_manifest_layout_Set() const{
    return m_manifest_layout_isSet;
}

bool OAIDashManifest::is_manifest_layout_Valid() const{
    return m_manifest_layout_isValid;
}

QString OAIDashManifest::getManifestName() const {
    return m_manifest_name;
}
void OAIDashManifest::setManifestName(const QString &manifest_name) {
    m_manifest_name = manifest_name;
    m_manifest_name_isSet = true;
}

bool OAIDashManifest::is_manifest_name_Set() const{
    return m_manifest_name_isSet;
}

bool OAIDashManifest::is_manifest_name_Valid() const{
    return m_manifest_name_isValid;
}

qint32 OAIDashManifest::getMinBufferTimeSeconds() const {
    return m_min_buffer_time_seconds;
}
void OAIDashManifest::setMinBufferTimeSeconds(const qint32 &min_buffer_time_seconds) {
    m_min_buffer_time_seconds = min_buffer_time_seconds;
    m_min_buffer_time_seconds_isSet = true;
}

bool OAIDashManifest::is_min_buffer_time_seconds_Set() const{
    return m_min_buffer_time_seconds_isSet;
}

bool OAIDashManifest::is_min_buffer_time_seconds_Valid() const{
    return m_min_buffer_time_seconds_isValid;
}

OAIProfile OAIDashManifest::getProfile() const {
    return m_profile;
}
void OAIDashManifest::setProfile(const OAIProfile &profile) {
    m_profile = profile;
    m_profile_isSet = true;
}

bool OAIDashManifest::is_profile_Set() const{
    return m_profile_isSet;
}

bool OAIDashManifest::is_profile_Valid() const{
    return m_profile_isValid;
}

OAIScteMarkersSource OAIDashManifest::getScteMarkersSource() const {
    return m_scte_markers_source;
}
void OAIDashManifest::setScteMarkersSource(const OAIScteMarkersSource &scte_markers_source) {
    m_scte_markers_source = scte_markers_source;
    m_scte_markers_source_isSet = true;
}

bool OAIDashManifest::is_scte_markers_source_Set() const{
    return m_scte_markers_source_isSet;
}

bool OAIDashManifest::is_scte_markers_source_Valid() const{
    return m_scte_markers_source_isValid;
}

OAIDashManifest_StreamSelection OAIDashManifest::getStreamSelection() const {
    return m_stream_selection;
}
void OAIDashManifest::setStreamSelection(const OAIDashManifest_StreamSelection &stream_selection) {
    m_stream_selection = stream_selection;
    m_stream_selection_isSet = true;
}

bool OAIDashManifest::is_stream_selection_Set() const{
    return m_stream_selection_isSet;
}

bool OAIDashManifest::is_stream_selection_Valid() const{
    return m_stream_selection_isValid;
}

bool OAIDashManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_manifest_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_buffer_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scte_markers_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDashManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
