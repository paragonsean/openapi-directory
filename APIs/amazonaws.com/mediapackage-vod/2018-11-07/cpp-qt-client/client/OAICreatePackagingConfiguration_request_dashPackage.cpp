/**
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePackagingConfiguration_request_dashPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePackagingConfiguration_request_dashPackage::OAICreatePackagingConfiguration_request_dashPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePackagingConfiguration_request_dashPackage::OAICreatePackagingConfiguration_request_dashPackage() {
    this->initializeModel();
}

OAICreatePackagingConfiguration_request_dashPackage::~OAICreatePackagingConfiguration_request_dashPackage() {}

void OAICreatePackagingConfiguration_request_dashPackage::initializeModel() {

    m_dash_manifests_isSet = false;
    m_dash_manifests_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_include_encoder_configuration_in_segments_isSet = false;
    m_include_encoder_configuration_in_segments_isValid = false;

    m_include_iframe_only_stream_isSet = false;
    m_include_iframe_only_stream_isValid = false;

    m_period_triggers_isSet = false;
    m_period_triggers_isValid = false;

    m_segment_duration_seconds_isSet = false;
    m_segment_duration_seconds_isValid = false;

    m_segment_template_format_isSet = false;
    m_segment_template_format_isValid = false;
}

void OAICreatePackagingConfiguration_request_dashPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePackagingConfiguration_request_dashPackage::fromJsonObject(QJsonObject json) {

    m_dash_manifests_isValid = ::OpenAPI::fromJsonValue(m_dash_manifests, json[QString("DashManifests")]);
    m_dash_manifests_isSet = !json[QString("DashManifests")].isNull() && m_dash_manifests_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_include_encoder_configuration_in_segments_isValid = ::OpenAPI::fromJsonValue(m_include_encoder_configuration_in_segments, json[QString("IncludeEncoderConfigurationInSegments")]);
    m_include_encoder_configuration_in_segments_isSet = !json[QString("IncludeEncoderConfigurationInSegments")].isNull() && m_include_encoder_configuration_in_segments_isValid;

    m_include_iframe_only_stream_isValid = ::OpenAPI::fromJsonValue(m_include_iframe_only_stream, json[QString("IncludeIframeOnlyStream")]);
    m_include_iframe_only_stream_isSet = !json[QString("IncludeIframeOnlyStream")].isNull() && m_include_iframe_only_stream_isValid;

    m_period_triggers_isValid = ::OpenAPI::fromJsonValue(m_period_triggers, json[QString("PeriodTriggers")]);
    m_period_triggers_isSet = !json[QString("PeriodTriggers")].isNull() && m_period_triggers_isValid;

    m_segment_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_segment_duration_seconds, json[QString("SegmentDurationSeconds")]);
    m_segment_duration_seconds_isSet = !json[QString("SegmentDurationSeconds")].isNull() && m_segment_duration_seconds_isValid;

    m_segment_template_format_isValid = ::OpenAPI::fromJsonValue(m_segment_template_format, json[QString("SegmentTemplateFormat")]);
    m_segment_template_format_isSet = !json[QString("SegmentTemplateFormat")].isNull() && m_segment_template_format_isValid;
}

QString OAICreatePackagingConfiguration_request_dashPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePackagingConfiguration_request_dashPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_dash_manifests.isSet()) {
        obj.insert(QString("DashManifests"), ::OpenAPI::toJsonValue(m_dash_manifests));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_include_encoder_configuration_in_segments_isSet) {
        obj.insert(QString("IncludeEncoderConfigurationInSegments"), ::OpenAPI::toJsonValue(m_include_encoder_configuration_in_segments));
    }
    if (m_include_iframe_only_stream_isSet) {
        obj.insert(QString("IncludeIframeOnlyStream"), ::OpenAPI::toJsonValue(m_include_iframe_only_stream));
    }
    if (m_period_triggers.isSet()) {
        obj.insert(QString("PeriodTriggers"), ::OpenAPI::toJsonValue(m_period_triggers));
    }
    if (m_segment_duration_seconds_isSet) {
        obj.insert(QString("SegmentDurationSeconds"), ::OpenAPI::toJsonValue(m_segment_duration_seconds));
    }
    if (m_segment_template_format.isSet()) {
        obj.insert(QString("SegmentTemplateFormat"), ::OpenAPI::toJsonValue(m_segment_template_format));
    }
    return obj;
}

QList OAICreatePackagingConfiguration_request_dashPackage::getDashManifests() const {
    return m_dash_manifests;
}
void OAICreatePackagingConfiguration_request_dashPackage::setDashManifests(const QList &dash_manifests) {
    m_dash_manifests = dash_manifests;
    m_dash_manifests_isSet = true;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_dash_manifests_Set() const{
    return m_dash_manifests_isSet;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_dash_manifests_Valid() const{
    return m_dash_manifests_isValid;
}

OAICreatePackagingConfiguration_request_dashPackage_Encryption OAICreatePackagingConfiguration_request_dashPackage::getEncryption() const {
    return m_encryption;
}
void OAICreatePackagingConfiguration_request_dashPackage::setEncryption(const OAICreatePackagingConfiguration_request_dashPackage_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_encryption_Valid() const{
    return m_encryption_isValid;
}

bool OAICreatePackagingConfiguration_request_dashPackage::getIncludeEncoderConfigurationInSegments() const {
    return m_include_encoder_configuration_in_segments;
}
void OAICreatePackagingConfiguration_request_dashPackage::setIncludeEncoderConfigurationInSegments(const bool &include_encoder_configuration_in_segments) {
    m_include_encoder_configuration_in_segments = include_encoder_configuration_in_segments;
    m_include_encoder_configuration_in_segments_isSet = true;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_include_encoder_configuration_in_segments_Set() const{
    return m_include_encoder_configuration_in_segments_isSet;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_include_encoder_configuration_in_segments_Valid() const{
    return m_include_encoder_configuration_in_segments_isValid;
}

bool OAICreatePackagingConfiguration_request_dashPackage::getIncludeIframeOnlyStream() const {
    return m_include_iframe_only_stream;
}
void OAICreatePackagingConfiguration_request_dashPackage::setIncludeIframeOnlyStream(const bool &include_iframe_only_stream) {
    m_include_iframe_only_stream = include_iframe_only_stream;
    m_include_iframe_only_stream_isSet = true;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_include_iframe_only_stream_Set() const{
    return m_include_iframe_only_stream_isSet;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_include_iframe_only_stream_Valid() const{
    return m_include_iframe_only_stream_isValid;
}

QList OAICreatePackagingConfiguration_request_dashPackage::getPeriodTriggers() const {
    return m_period_triggers;
}
void OAICreatePackagingConfiguration_request_dashPackage::setPeriodTriggers(const QList &period_triggers) {
    m_period_triggers = period_triggers;
    m_period_triggers_isSet = true;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_period_triggers_Set() const{
    return m_period_triggers_isSet;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_period_triggers_Valid() const{
    return m_period_triggers_isValid;
}

qint32 OAICreatePackagingConfiguration_request_dashPackage::getSegmentDurationSeconds() const {
    return m_segment_duration_seconds;
}
void OAICreatePackagingConfiguration_request_dashPackage::setSegmentDurationSeconds(const qint32 &segment_duration_seconds) {
    m_segment_duration_seconds = segment_duration_seconds;
    m_segment_duration_seconds_isSet = true;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_segment_duration_seconds_Set() const{
    return m_segment_duration_seconds_isSet;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_segment_duration_seconds_Valid() const{
    return m_segment_duration_seconds_isValid;
}

OAISegmentTemplateFormat OAICreatePackagingConfiguration_request_dashPackage::getSegmentTemplateFormat() const {
    return m_segment_template_format;
}
void OAICreatePackagingConfiguration_request_dashPackage::setSegmentTemplateFormat(const OAISegmentTemplateFormat &segment_template_format) {
    m_segment_template_format = segment_template_format;
    m_segment_template_format_isSet = true;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_segment_template_format_Set() const{
    return m_segment_template_format_isSet;
}

bool OAICreatePackagingConfiguration_request_dashPackage::is_segment_template_format_Valid() const{
    return m_segment_template_format_isValid;
}

bool OAICreatePackagingConfiguration_request_dashPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dash_manifests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_encoder_configuration_in_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_iframe_only_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_template_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePackagingConfiguration_request_dashPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
