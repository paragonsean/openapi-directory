/**
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsEncryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsEncryption::OAIHlsEncryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsEncryption::OAIHlsEncryption() {
    this->initializeModel();
}

OAIHlsEncryption::~OAIHlsEncryption() {}

void OAIHlsEncryption::initializeModel() {

    m_constant_initialization_vector_isSet = false;
    m_constant_initialization_vector_isValid = false;

    m_encryption_method_isSet = false;
    m_encryption_method_isValid = false;

    m_speke_key_provider_isSet = false;
    m_speke_key_provider_isValid = false;
}

void OAIHlsEncryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsEncryption::fromJsonObject(QJsonObject json) {

    m_constant_initialization_vector_isValid = ::OpenAPI::fromJsonValue(m_constant_initialization_vector, json[QString("ConstantInitializationVector")]);
    m_constant_initialization_vector_isSet = !json[QString("ConstantInitializationVector")].isNull() && m_constant_initialization_vector_isValid;

    m_encryption_method_isValid = ::OpenAPI::fromJsonValue(m_encryption_method, json[QString("EncryptionMethod")]);
    m_encryption_method_isSet = !json[QString("EncryptionMethod")].isNull() && m_encryption_method_isValid;

    m_speke_key_provider_isValid = ::OpenAPI::fromJsonValue(m_speke_key_provider, json[QString("SpekeKeyProvider")]);
    m_speke_key_provider_isSet = !json[QString("SpekeKeyProvider")].isNull() && m_speke_key_provider_isValid;
}

QString OAIHlsEncryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsEncryption::asJsonObject() const {
    QJsonObject obj;
    if (m_constant_initialization_vector_isSet) {
        obj.insert(QString("ConstantInitializationVector"), ::OpenAPI::toJsonValue(m_constant_initialization_vector));
    }
    if (m_encryption_method.isSet()) {
        obj.insert(QString("EncryptionMethod"), ::OpenAPI::toJsonValue(m_encryption_method));
    }
    if (m_speke_key_provider.isSet()) {
        obj.insert(QString("SpekeKeyProvider"), ::OpenAPI::toJsonValue(m_speke_key_provider));
    }
    return obj;
}

QString OAIHlsEncryption::getConstantInitializationVector() const {
    return m_constant_initialization_vector;
}
void OAIHlsEncryption::setConstantInitializationVector(const QString &constant_initialization_vector) {
    m_constant_initialization_vector = constant_initialization_vector;
    m_constant_initialization_vector_isSet = true;
}

bool OAIHlsEncryption::is_constant_initialization_vector_Set() const{
    return m_constant_initialization_vector_isSet;
}

bool OAIHlsEncryption::is_constant_initialization_vector_Valid() const{
    return m_constant_initialization_vector_isValid;
}

OAIEncryptionMethod OAIHlsEncryption::getEncryptionMethod() const {
    return m_encryption_method;
}
void OAIHlsEncryption::setEncryptionMethod(const OAIEncryptionMethod &encryption_method) {
    m_encryption_method = encryption_method;
    m_encryption_method_isSet = true;
}

bool OAIHlsEncryption::is_encryption_method_Set() const{
    return m_encryption_method_isSet;
}

bool OAIHlsEncryption::is_encryption_method_Valid() const{
    return m_encryption_method_isValid;
}

OAICmafEncryption_SpekeKeyProvider OAIHlsEncryption::getSpekeKeyProvider() const {
    return m_speke_key_provider;
}
void OAIHlsEncryption::setSpekeKeyProvider(const OAICmafEncryption_SpekeKeyProvider &speke_key_provider) {
    m_speke_key_provider = speke_key_provider;
    m_speke_key_provider_isSet = true;
}

bool OAIHlsEncryption::is_speke_key_provider_Set() const{
    return m_speke_key_provider_isSet;
}

bool OAIHlsEncryption::is_speke_key_provider_Valid() const{
    return m_speke_key_provider_isValid;
}

bool OAIHlsEncryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constant_initialization_vector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_speke_key_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsEncryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_speke_key_provider_isValid && true;
}

} // namespace OpenAPI
