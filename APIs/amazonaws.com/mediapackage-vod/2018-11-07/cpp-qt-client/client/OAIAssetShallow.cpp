/**
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetShallow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetShallow::OAIAssetShallow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetShallow::OAIAssetShallow() {
    this->initializeModel();
}

OAIAssetShallow::~OAIAssetShallow() {}

void OAIAssetShallow::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_packaging_group_id_isSet = false;
    m_packaging_group_id_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_source_role_arn_isSet = false;
    m_source_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIAssetShallow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetShallow::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_packaging_group_id_isValid = ::OpenAPI::fromJsonValue(m_packaging_group_id, json[QString("PackagingGroupId")]);
    m_packaging_group_id_isSet = !json[QString("PackagingGroupId")].isNull() && m_packaging_group_id_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("SourceArn")]);
    m_source_arn_isSet = !json[QString("SourceArn")].isNull() && m_source_arn_isValid;

    m_source_role_arn_isValid = ::OpenAPI::fromJsonValue(m_source_role_arn, json[QString("SourceRoleArn")]);
    m_source_role_arn_isSet = !json[QString("SourceRoleArn")].isNull() && m_source_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIAssetShallow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetShallow::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_packaging_group_id_isSet) {
        obj.insert(QString("PackagingGroupId"), ::OpenAPI::toJsonValue(m_packaging_group_id));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("SourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_source_role_arn_isSet) {
        obj.insert(QString("SourceRoleArn"), ::OpenAPI::toJsonValue(m_source_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIAssetShallow::getArn() const {
    return m_arn;
}
void OAIAssetShallow::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAssetShallow::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAssetShallow::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIAssetShallow::getCreatedAt() const {
    return m_created_at;
}
void OAIAssetShallow::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAssetShallow::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAssetShallow::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAssetShallow::getId() const {
    return m_id;
}
void OAIAssetShallow::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssetShallow::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssetShallow::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAssetShallow::getPackagingGroupId() const {
    return m_packaging_group_id;
}
void OAIAssetShallow::setPackagingGroupId(const QString &packaging_group_id) {
    m_packaging_group_id = packaging_group_id;
    m_packaging_group_id_isSet = true;
}

bool OAIAssetShallow::is_packaging_group_id_Set() const{
    return m_packaging_group_id_isSet;
}

bool OAIAssetShallow::is_packaging_group_id_Valid() const{
    return m_packaging_group_id_isValid;
}

QString OAIAssetShallow::getResourceId() const {
    return m_resource_id;
}
void OAIAssetShallow::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIAssetShallow::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIAssetShallow::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIAssetShallow::getSourceArn() const {
    return m_source_arn;
}
void OAIAssetShallow::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAIAssetShallow::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAIAssetShallow::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

QString OAIAssetShallow::getSourceRoleArn() const {
    return m_source_role_arn;
}
void OAIAssetShallow::setSourceRoleArn(const QString &source_role_arn) {
    m_source_role_arn = source_role_arn;
    m_source_role_arn_isSet = true;
}

bool OAIAssetShallow::is_source_role_arn_Set() const{
    return m_source_role_arn_isSet;
}

bool OAIAssetShallow::is_source_role_arn_Valid() const{
    return m_source_role_arn_isValid;
}

QMap OAIAssetShallow::getTags() const {
    return m_tags;
}
void OAIAssetShallow::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAssetShallow::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAssetShallow::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIAssetShallow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaging_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetShallow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
