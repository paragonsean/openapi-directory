/**
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAsset_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAsset_request::OAICreateAsset_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAsset_request::OAICreateAsset_request() {
    this->initializeModel();
}

OAICreateAsset_request::~OAICreateAsset_request() {}

void OAICreateAsset_request::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_packaging_group_id_isSet = false;
    m_packaging_group_id_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_source_role_arn_isSet = false;
    m_source_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAsset_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAsset_request::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_packaging_group_id_isValid = ::OpenAPI::fromJsonValue(m_packaging_group_id, json[QString("packagingGroupId")]);
    m_packaging_group_id_isSet = !json[QString("packagingGroupId")].isNull() && m_packaging_group_id_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("sourceArn")]);
    m_source_arn_isSet = !json[QString("sourceArn")].isNull() && m_source_arn_isValid;

    m_source_role_arn_isValid = ::OpenAPI::fromJsonValue(m_source_role_arn, json[QString("sourceRoleArn")]);
    m_source_role_arn_isSet = !json[QString("sourceRoleArn")].isNull() && m_source_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAsset_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAsset_request::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_packaging_group_id_isSet) {
        obj.insert(QString("packagingGroupId"), ::OpenAPI::toJsonValue(m_packaging_group_id));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("sourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_source_role_arn_isSet) {
        obj.insert(QString("sourceRoleArn"), ::OpenAPI::toJsonValue(m_source_role_arn));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAsset_request::getId() const {
    return m_id;
}
void OAICreateAsset_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateAsset_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateAsset_request::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateAsset_request::getPackagingGroupId() const {
    return m_packaging_group_id;
}
void OAICreateAsset_request::setPackagingGroupId(const QString &packaging_group_id) {
    m_packaging_group_id = packaging_group_id;
    m_packaging_group_id_isSet = true;
}

bool OAICreateAsset_request::is_packaging_group_id_Set() const{
    return m_packaging_group_id_isSet;
}

bool OAICreateAsset_request::is_packaging_group_id_Valid() const{
    return m_packaging_group_id_isValid;
}

QString OAICreateAsset_request::getResourceId() const {
    return m_resource_id;
}
void OAICreateAsset_request::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAICreateAsset_request::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAICreateAsset_request::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAICreateAsset_request::getSourceArn() const {
    return m_source_arn;
}
void OAICreateAsset_request::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAICreateAsset_request::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAICreateAsset_request::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

QString OAICreateAsset_request::getSourceRoleArn() const {
    return m_source_role_arn;
}
void OAICreateAsset_request::setSourceRoleArn(const QString &source_role_arn) {
    m_source_role_arn = source_role_arn;
    m_source_role_arn_isSet = true;
}

bool OAICreateAsset_request::is_source_role_arn_Set() const{
    return m_source_role_arn_isSet;
}

bool OAICreateAsset_request::is_source_role_arn_Valid() const{
    return m_source_role_arn_isValid;
}

QMap<QString, QString> OAICreateAsset_request::getTags() const {
    return m_tags;
}
void OAICreateAsset_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAsset_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAsset_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAsset_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_packaging_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAsset_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_packaging_group_id_isValid && m_source_arn_isValid && m_source_role_arn_isValid && true;
}

} // namespace OpenAPI
