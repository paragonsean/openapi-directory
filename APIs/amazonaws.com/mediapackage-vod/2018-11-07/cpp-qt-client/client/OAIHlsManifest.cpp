/**
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsManifest::OAIHlsManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsManifest::OAIHlsManifest() {
    this->initializeModel();
}

OAIHlsManifest::~OAIHlsManifest() {}

void OAIHlsManifest::initializeModel() {

    m_ad_markers_isSet = false;
    m_ad_markers_isValid = false;

    m_include_iframe_only_stream_isSet = false;
    m_include_iframe_only_stream_isValid = false;

    m_manifest_name_isSet = false;
    m_manifest_name_isValid = false;

    m_program_date_time_interval_seconds_isSet = false;
    m_program_date_time_interval_seconds_isValid = false;

    m_repeat_ext_x_key_isSet = false;
    m_repeat_ext_x_key_isValid = false;

    m_stream_selection_isSet = false;
    m_stream_selection_isValid = false;
}

void OAIHlsManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsManifest::fromJsonObject(QJsonObject json) {

    m_ad_markers_isValid = ::OpenAPI::fromJsonValue(m_ad_markers, json[QString("AdMarkers")]);
    m_ad_markers_isSet = !json[QString("AdMarkers")].isNull() && m_ad_markers_isValid;

    m_include_iframe_only_stream_isValid = ::OpenAPI::fromJsonValue(m_include_iframe_only_stream, json[QString("IncludeIframeOnlyStream")]);
    m_include_iframe_only_stream_isSet = !json[QString("IncludeIframeOnlyStream")].isNull() && m_include_iframe_only_stream_isValid;

    m_manifest_name_isValid = ::OpenAPI::fromJsonValue(m_manifest_name, json[QString("ManifestName")]);
    m_manifest_name_isSet = !json[QString("ManifestName")].isNull() && m_manifest_name_isValid;

    m_program_date_time_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_program_date_time_interval_seconds, json[QString("ProgramDateTimeIntervalSeconds")]);
    m_program_date_time_interval_seconds_isSet = !json[QString("ProgramDateTimeIntervalSeconds")].isNull() && m_program_date_time_interval_seconds_isValid;

    m_repeat_ext_x_key_isValid = ::OpenAPI::fromJsonValue(m_repeat_ext_x_key, json[QString("RepeatExtXKey")]);
    m_repeat_ext_x_key_isSet = !json[QString("RepeatExtXKey")].isNull() && m_repeat_ext_x_key_isValid;

    m_stream_selection_isValid = ::OpenAPI::fromJsonValue(m_stream_selection, json[QString("StreamSelection")]);
    m_stream_selection_isSet = !json[QString("StreamSelection")].isNull() && m_stream_selection_isValid;
}

QString OAIHlsManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_markers.isSet()) {
        obj.insert(QString("AdMarkers"), ::OpenAPI::toJsonValue(m_ad_markers));
    }
    if (m_include_iframe_only_stream_isSet) {
        obj.insert(QString("IncludeIframeOnlyStream"), ::OpenAPI::toJsonValue(m_include_iframe_only_stream));
    }
    if (m_manifest_name_isSet) {
        obj.insert(QString("ManifestName"), ::OpenAPI::toJsonValue(m_manifest_name));
    }
    if (m_program_date_time_interval_seconds_isSet) {
        obj.insert(QString("ProgramDateTimeIntervalSeconds"), ::OpenAPI::toJsonValue(m_program_date_time_interval_seconds));
    }
    if (m_repeat_ext_x_key_isSet) {
        obj.insert(QString("RepeatExtXKey"), ::OpenAPI::toJsonValue(m_repeat_ext_x_key));
    }
    if (m_stream_selection.isSet()) {
        obj.insert(QString("StreamSelection"), ::OpenAPI::toJsonValue(m_stream_selection));
    }
    return obj;
}

OAIAdMarkers OAIHlsManifest::getAdMarkers() const {
    return m_ad_markers;
}
void OAIHlsManifest::setAdMarkers(const OAIAdMarkers &ad_markers) {
    m_ad_markers = ad_markers;
    m_ad_markers_isSet = true;
}

bool OAIHlsManifest::is_ad_markers_Set() const{
    return m_ad_markers_isSet;
}

bool OAIHlsManifest::is_ad_markers_Valid() const{
    return m_ad_markers_isValid;
}

bool OAIHlsManifest::getIncludeIframeOnlyStream() const {
    return m_include_iframe_only_stream;
}
void OAIHlsManifest::setIncludeIframeOnlyStream(const bool &include_iframe_only_stream) {
    m_include_iframe_only_stream = include_iframe_only_stream;
    m_include_iframe_only_stream_isSet = true;
}

bool OAIHlsManifest::is_include_iframe_only_stream_Set() const{
    return m_include_iframe_only_stream_isSet;
}

bool OAIHlsManifest::is_include_iframe_only_stream_Valid() const{
    return m_include_iframe_only_stream_isValid;
}

QString OAIHlsManifest::getManifestName() const {
    return m_manifest_name;
}
void OAIHlsManifest::setManifestName(const QString &manifest_name) {
    m_manifest_name = manifest_name;
    m_manifest_name_isSet = true;
}

bool OAIHlsManifest::is_manifest_name_Set() const{
    return m_manifest_name_isSet;
}

bool OAIHlsManifest::is_manifest_name_Valid() const{
    return m_manifest_name_isValid;
}

qint32 OAIHlsManifest::getProgramDateTimeIntervalSeconds() const {
    return m_program_date_time_interval_seconds;
}
void OAIHlsManifest::setProgramDateTimeIntervalSeconds(const qint32 &program_date_time_interval_seconds) {
    m_program_date_time_interval_seconds = program_date_time_interval_seconds;
    m_program_date_time_interval_seconds_isSet = true;
}

bool OAIHlsManifest::is_program_date_time_interval_seconds_Set() const{
    return m_program_date_time_interval_seconds_isSet;
}

bool OAIHlsManifest::is_program_date_time_interval_seconds_Valid() const{
    return m_program_date_time_interval_seconds_isValid;
}

bool OAIHlsManifest::getRepeatExtXKey() const {
    return m_repeat_ext_x_key;
}
void OAIHlsManifest::setRepeatExtXKey(const bool &repeat_ext_x_key) {
    m_repeat_ext_x_key = repeat_ext_x_key;
    m_repeat_ext_x_key_isSet = true;
}

bool OAIHlsManifest::is_repeat_ext_x_key_Set() const{
    return m_repeat_ext_x_key_isSet;
}

bool OAIHlsManifest::is_repeat_ext_x_key_Valid() const{
    return m_repeat_ext_x_key_isValid;
}

OAIDashManifest_StreamSelection OAIHlsManifest::getStreamSelection() const {
    return m_stream_selection;
}
void OAIHlsManifest::setStreamSelection(const OAIDashManifest_StreamSelection &stream_selection) {
    m_stream_selection = stream_selection;
    m_stream_selection_isSet = true;
}

bool OAIHlsManifest::is_stream_selection_Set() const{
    return m_stream_selection_isSet;
}

bool OAIHlsManifest::is_stream_selection_Valid() const{
    return m_stream_selection_isValid;
}

bool OAIHlsManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_markers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_iframe_only_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_program_date_time_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_ext_x_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_selection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
