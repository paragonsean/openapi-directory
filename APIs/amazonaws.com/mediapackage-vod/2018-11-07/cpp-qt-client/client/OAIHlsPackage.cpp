/**
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHlsPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHlsPackage::OAIHlsPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHlsPackage::OAIHlsPackage() {
    this->initializeModel();
}

OAIHlsPackage::~OAIHlsPackage() {}

void OAIHlsPackage::initializeModel() {

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_hls_manifests_isSet = false;
    m_hls_manifests_isValid = false;

    m_include_dvb_subtitles_isSet = false;
    m_include_dvb_subtitles_isValid = false;

    m_segment_duration_seconds_isSet = false;
    m_segment_duration_seconds_isValid = false;

    m_use_audio_rendition_group_isSet = false;
    m_use_audio_rendition_group_isValid = false;
}

void OAIHlsPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHlsPackage::fromJsonObject(QJsonObject json) {

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_hls_manifests_isValid = ::OpenAPI::fromJsonValue(m_hls_manifests, json[QString("HlsManifests")]);
    m_hls_manifests_isSet = !json[QString("HlsManifests")].isNull() && m_hls_manifests_isValid;

    m_include_dvb_subtitles_isValid = ::OpenAPI::fromJsonValue(m_include_dvb_subtitles, json[QString("IncludeDvbSubtitles")]);
    m_include_dvb_subtitles_isSet = !json[QString("IncludeDvbSubtitles")].isNull() && m_include_dvb_subtitles_isValid;

    m_segment_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_segment_duration_seconds, json[QString("SegmentDurationSeconds")]);
    m_segment_duration_seconds_isSet = !json[QString("SegmentDurationSeconds")].isNull() && m_segment_duration_seconds_isValid;

    m_use_audio_rendition_group_isValid = ::OpenAPI::fromJsonValue(m_use_audio_rendition_group, json[QString("UseAudioRenditionGroup")]);
    m_use_audio_rendition_group_isSet = !json[QString("UseAudioRenditionGroup")].isNull() && m_use_audio_rendition_group_isValid;
}

QString OAIHlsPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHlsPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_hls_manifests.isSet()) {
        obj.insert(QString("HlsManifests"), ::OpenAPI::toJsonValue(m_hls_manifests));
    }
    if (m_include_dvb_subtitles_isSet) {
        obj.insert(QString("IncludeDvbSubtitles"), ::OpenAPI::toJsonValue(m_include_dvb_subtitles));
    }
    if (m_segment_duration_seconds_isSet) {
        obj.insert(QString("SegmentDurationSeconds"), ::OpenAPI::toJsonValue(m_segment_duration_seconds));
    }
    if (m_use_audio_rendition_group_isSet) {
        obj.insert(QString("UseAudioRenditionGroup"), ::OpenAPI::toJsonValue(m_use_audio_rendition_group));
    }
    return obj;
}

OAICreatePackagingConfiguration_request_hlsPackage_Encryption OAIHlsPackage::getEncryption() const {
    return m_encryption;
}
void OAIHlsPackage::setEncryption(const OAICreatePackagingConfiguration_request_hlsPackage_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIHlsPackage::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIHlsPackage::is_encryption_Valid() const{
    return m_encryption_isValid;
}

QList OAIHlsPackage::getHlsManifests() const {
    return m_hls_manifests;
}
void OAIHlsPackage::setHlsManifests(const QList &hls_manifests) {
    m_hls_manifests = hls_manifests;
    m_hls_manifests_isSet = true;
}

bool OAIHlsPackage::is_hls_manifests_Set() const{
    return m_hls_manifests_isSet;
}

bool OAIHlsPackage::is_hls_manifests_Valid() const{
    return m_hls_manifests_isValid;
}

bool OAIHlsPackage::getIncludeDvbSubtitles() const {
    return m_include_dvb_subtitles;
}
void OAIHlsPackage::setIncludeDvbSubtitles(const bool &include_dvb_subtitles) {
    m_include_dvb_subtitles = include_dvb_subtitles;
    m_include_dvb_subtitles_isSet = true;
}

bool OAIHlsPackage::is_include_dvb_subtitles_Set() const{
    return m_include_dvb_subtitles_isSet;
}

bool OAIHlsPackage::is_include_dvb_subtitles_Valid() const{
    return m_include_dvb_subtitles_isValid;
}

qint32 OAIHlsPackage::getSegmentDurationSeconds() const {
    return m_segment_duration_seconds;
}
void OAIHlsPackage::setSegmentDurationSeconds(const qint32 &segment_duration_seconds) {
    m_segment_duration_seconds = segment_duration_seconds;
    m_segment_duration_seconds_isSet = true;
}

bool OAIHlsPackage::is_segment_duration_seconds_Set() const{
    return m_segment_duration_seconds_isSet;
}

bool OAIHlsPackage::is_segment_duration_seconds_Valid() const{
    return m_segment_duration_seconds_isValid;
}

bool OAIHlsPackage::getUseAudioRenditionGroup() const {
    return m_use_audio_rendition_group;
}
void OAIHlsPackage::setUseAudioRenditionGroup(const bool &use_audio_rendition_group) {
    m_use_audio_rendition_group = use_audio_rendition_group;
    m_use_audio_rendition_group_isSet = true;
}

bool OAIHlsPackage::is_use_audio_rendition_group_Set() const{
    return m_use_audio_rendition_group_isSet;
}

bool OAIHlsPackage::is_use_audio_rendition_group_Valid() const{
    return m_use_audio_rendition_group_isValid;
}

bool OAIHlsPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_manifests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_dvb_subtitles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_audio_rendition_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHlsPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hls_manifests_isValid && true;
}

} // namespace OpenAPI
