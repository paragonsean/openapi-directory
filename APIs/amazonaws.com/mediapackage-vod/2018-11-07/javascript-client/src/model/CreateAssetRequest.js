/**
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateAssetRequest model module.
 * @module model/CreateAssetRequest
 * @version 2018-11-07
 */
class CreateAssetRequest {
    /**
     * Constructs a new <code>CreateAssetRequest</code>.
     * @alias module:model/CreateAssetRequest
     * @param id {String} The unique identifier for the Asset.
     * @param packagingGroupId {String} The ID of the PackagingGroup for the Asset.
     * @param sourceArn {String} ARN of the source object in S3.
     * @param sourceRoleArn {String} The IAM role ARN used to access the source S3 bucket.
     */
    constructor(id, packagingGroupId, sourceArn, sourceRoleArn) { 
        
        CreateAssetRequest.initialize(this, id, packagingGroupId, sourceArn, sourceRoleArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, packagingGroupId, sourceArn, sourceRoleArn) { 
        obj['id'] = id;
        obj['packagingGroupId'] = packagingGroupId;
        obj['sourceArn'] = sourceArn;
        obj['sourceRoleArn'] = sourceRoleArn;
    }

    /**
     * Constructs a <code>CreateAssetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAssetRequest} obj Optional instance to populate.
     * @return {module:model/CreateAssetRequest} The populated <code>CreateAssetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAssetRequest();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('packagingGroupId')) {
                obj['packagingGroupId'] = ApiClient.convertToType(data['packagingGroupId'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('sourceArn')) {
                obj['sourceArn'] = ApiClient.convertToType(data['sourceArn'], 'String');
            }
            if (data.hasOwnProperty('sourceRoleArn')) {
                obj['sourceRoleArn'] = ApiClient.convertToType(data['sourceRoleArn'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAssetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAssetRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAssetRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['packagingGroupId'] && !(typeof data['packagingGroupId'] === 'string' || data['packagingGroupId'] instanceof String)) {
            throw new Error("Expected the field `packagingGroupId` to be a primitive type in the JSON string but got " + data['packagingGroupId']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['sourceArn'] && !(typeof data['sourceArn'] === 'string' || data['sourceArn'] instanceof String)) {
            throw new Error("Expected the field `sourceArn` to be a primitive type in the JSON string but got " + data['sourceArn']);
        }
        // ensure the json data is a string
        if (data['sourceRoleArn'] && !(typeof data['sourceRoleArn'] === 'string' || data['sourceRoleArn'] instanceof String)) {
            throw new Error("Expected the field `sourceRoleArn` to be a primitive type in the JSON string but got " + data['sourceRoleArn']);
        }

        return true;
    }


}

CreateAssetRequest.RequiredProperties = ["id", "packagingGroupId", "sourceArn", "sourceRoleArn"];

/**
 * The unique identifier for the Asset.
 * @member {String} id
 */
CreateAssetRequest.prototype['id'] = undefined;

/**
 * The ID of the PackagingGroup for the Asset.
 * @member {String} packagingGroupId
 */
CreateAssetRequest.prototype['packagingGroupId'] = undefined;

/**
 * The resource ID to include in SPEKE key requests.
 * @member {String} resourceId
 */
CreateAssetRequest.prototype['resourceId'] = undefined;

/**
 * ARN of the source object in S3.
 * @member {String} sourceArn
 */
CreateAssetRequest.prototype['sourceArn'] = undefined;

/**
 * The IAM role ARN used to access the source S3 bucket.
 * @member {String} sourceRoleArn
 */
CreateAssetRequest.prototype['sourceRoleArn'] = undefined;

/**
 * A collection of tags associated with a resource
 * @member {Object.<String, String>} tags
 */
CreateAssetRequest.prototype['tags'] = undefined;






export default CreateAssetRequest;

