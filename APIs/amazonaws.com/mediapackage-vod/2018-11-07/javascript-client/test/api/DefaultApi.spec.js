/**
 * AWS Elemental MediaPackage VOD
 * AWS Elemental MediaPackage VOD
 *
 * The version of the OpenAPI document: 2018-11-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsElementalMediaPackageVod);
  }
}(this, function(expect, AwsElementalMediaPackageVod) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsElementalMediaPackageVod.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('configureLogs', function() {
      it('should call configureLogs successfully', function(done) {
        //uncomment below and update the code to test configureLogs
        //instance.configureLogs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAsset', function() {
      it('should call createAsset successfully', function(done) {
        //uncomment below and update the code to test createAsset
        //instance.createAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPackagingConfiguration', function() {
      it('should call createPackagingConfiguration successfully', function(done) {
        //uncomment below and update the code to test createPackagingConfiguration
        //instance.createPackagingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPackagingGroup', function() {
      it('should call createPackagingGroup successfully', function(done) {
        //uncomment below and update the code to test createPackagingGroup
        //instance.createPackagingGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAsset', function() {
      it('should call deleteAsset successfully', function(done) {
        //uncomment below and update the code to test deleteAsset
        //instance.deleteAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePackagingConfiguration', function() {
      it('should call deletePackagingConfiguration successfully', function(done) {
        //uncomment below and update the code to test deletePackagingConfiguration
        //instance.deletePackagingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePackagingGroup', function() {
      it('should call deletePackagingGroup successfully', function(done) {
        //uncomment below and update the code to test deletePackagingGroup
        //instance.deletePackagingGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAsset', function() {
      it('should call describeAsset successfully', function(done) {
        //uncomment below and update the code to test describeAsset
        //instance.describeAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePackagingConfiguration', function() {
      it('should call describePackagingConfiguration successfully', function(done) {
        //uncomment below and update the code to test describePackagingConfiguration
        //instance.describePackagingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePackagingGroup', function() {
      it('should call describePackagingGroup successfully', function(done) {
        //uncomment below and update the code to test describePackagingGroup
        //instance.describePackagingGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAssets', function() {
      it('should call listAssets successfully', function(done) {
        //uncomment below and update the code to test listAssets
        //instance.listAssets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPackagingConfigurations', function() {
      it('should call listPackagingConfigurations successfully', function(done) {
        //uncomment below and update the code to test listPackagingConfigurations
        //instance.listPackagingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPackagingGroups', function() {
      it('should call listPackagingGroups successfully', function(done) {
        //uncomment below and update the code to test listPackagingGroups
        //instance.listPackagingGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePackagingGroup', function() {
      it('should call updatePackagingGroup successfully', function(done) {
        //uncomment below and update the code to test updatePackagingGroup
        //instance.updatePackagingGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
