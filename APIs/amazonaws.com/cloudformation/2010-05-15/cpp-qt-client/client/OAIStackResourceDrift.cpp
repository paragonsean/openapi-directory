/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackResourceDrift.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackResourceDrift::OAIStackResourceDrift(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackResourceDrift::OAIStackResourceDrift() {
    this->initializeModel();
}

OAIStackResourceDrift::~OAIStackResourceDrift() {}

void OAIStackResourceDrift::initializeModel() {

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_physical_resource_id_context_isSet = false;
    m_physical_resource_id_context_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_expected_properties_isSet = false;
    m_expected_properties_isValid = false;

    m_actual_properties_isSet = false;
    m_actual_properties_isValid = false;

    m_property_differences_isSet = false;
    m_property_differences_isValid = false;

    m_stack_resource_drift_status_isSet = false;
    m_stack_resource_drift_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_module_info_isSet = false;
    m_module_info_isValid = false;
}

void OAIStackResourceDrift::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackResourceDrift::fromJsonObject(QJsonObject json) {

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("LogicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("LogicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("PhysicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("PhysicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_physical_resource_id_context_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id_context, json[QString("PhysicalResourceIdContext")]);
    m_physical_resource_id_context_isSet = !json[QString("PhysicalResourceIdContext")].isNull() && m_physical_resource_id_context_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_expected_properties_isValid = ::OpenAPI::fromJsonValue(m_expected_properties, json[QString("ExpectedProperties")]);
    m_expected_properties_isSet = !json[QString("ExpectedProperties")].isNull() && m_expected_properties_isValid;

    m_actual_properties_isValid = ::OpenAPI::fromJsonValue(m_actual_properties, json[QString("ActualProperties")]);
    m_actual_properties_isSet = !json[QString("ActualProperties")].isNull() && m_actual_properties_isValid;

    m_property_differences_isValid = ::OpenAPI::fromJsonValue(m_property_differences, json[QString("PropertyDifferences")]);
    m_property_differences_isSet = !json[QString("PropertyDifferences")].isNull() && m_property_differences_isValid;

    m_stack_resource_drift_status_isValid = ::OpenAPI::fromJsonValue(m_stack_resource_drift_status, json[QString("StackResourceDriftStatus")]);
    m_stack_resource_drift_status_isSet = !json[QString("StackResourceDriftStatus")].isNull() && m_stack_resource_drift_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_module_info_isValid = ::OpenAPI::fromJsonValue(m_module_info, json[QString("ModuleInfo")]);
    m_module_info_isSet = !json[QString("ModuleInfo")].isNull() && m_module_info_isValid;
}

QString OAIStackResourceDrift::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackResourceDrift::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_logical_resource_id_isSet) {
        obj.insert(QString("LogicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id_isSet) {
        obj.insert(QString("PhysicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_physical_resource_id_context.isSet()) {
        obj.insert(QString("PhysicalResourceIdContext"), ::OpenAPI::toJsonValue(m_physical_resource_id_context));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_expected_properties_isSet) {
        obj.insert(QString("ExpectedProperties"), ::OpenAPI::toJsonValue(m_expected_properties));
    }
    if (m_actual_properties_isSet) {
        obj.insert(QString("ActualProperties"), ::OpenAPI::toJsonValue(m_actual_properties));
    }
    if (m_property_differences.isSet()) {
        obj.insert(QString("PropertyDifferences"), ::OpenAPI::toJsonValue(m_property_differences));
    }
    if (m_stack_resource_drift_status.isSet()) {
        obj.insert(QString("StackResourceDriftStatus"), ::OpenAPI::toJsonValue(m_stack_resource_drift_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_module_info.isSet()) {
        obj.insert(QString("ModuleInfo"), ::OpenAPI::toJsonValue(m_module_info));
    }
    return obj;
}

QString OAIStackResourceDrift::getStackId() const {
    return m_stack_id;
}
void OAIStackResourceDrift::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIStackResourceDrift::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIStackResourceDrift::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIStackResourceDrift::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIStackResourceDrift::setLogicalResourceId(const QString &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIStackResourceDrift::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIStackResourceDrift::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIStackResourceDrift::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIStackResourceDrift::setPhysicalResourceId(const QString &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIStackResourceDrift::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIStackResourceDrift::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QList OAIStackResourceDrift::getPhysicalResourceIdContext() const {
    return m_physical_resource_id_context;
}
void OAIStackResourceDrift::setPhysicalResourceIdContext(const QList &physical_resource_id_context) {
    m_physical_resource_id_context = physical_resource_id_context;
    m_physical_resource_id_context_isSet = true;
}

bool OAIStackResourceDrift::is_physical_resource_id_context_Set() const{
    return m_physical_resource_id_context_isSet;
}

bool OAIStackResourceDrift::is_physical_resource_id_context_Valid() const{
    return m_physical_resource_id_context_isValid;
}

QString OAIStackResourceDrift::getResourceType() const {
    return m_resource_type;
}
void OAIStackResourceDrift::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStackResourceDrift::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStackResourceDrift::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIStackResourceDrift::getExpectedProperties() const {
    return m_expected_properties;
}
void OAIStackResourceDrift::setExpectedProperties(const QString &expected_properties) {
    m_expected_properties = expected_properties;
    m_expected_properties_isSet = true;
}

bool OAIStackResourceDrift::is_expected_properties_Set() const{
    return m_expected_properties_isSet;
}

bool OAIStackResourceDrift::is_expected_properties_Valid() const{
    return m_expected_properties_isValid;
}

QString OAIStackResourceDrift::getActualProperties() const {
    return m_actual_properties;
}
void OAIStackResourceDrift::setActualProperties(const QString &actual_properties) {
    m_actual_properties = actual_properties;
    m_actual_properties_isSet = true;
}

bool OAIStackResourceDrift::is_actual_properties_Set() const{
    return m_actual_properties_isSet;
}

bool OAIStackResourceDrift::is_actual_properties_Valid() const{
    return m_actual_properties_isValid;
}

QList OAIStackResourceDrift::getPropertyDifferences() const {
    return m_property_differences;
}
void OAIStackResourceDrift::setPropertyDifferences(const QList &property_differences) {
    m_property_differences = property_differences;
    m_property_differences_isSet = true;
}

bool OAIStackResourceDrift::is_property_differences_Set() const{
    return m_property_differences_isSet;
}

bool OAIStackResourceDrift::is_property_differences_Valid() const{
    return m_property_differences_isValid;
}

OAIStackResourceDriftStatus OAIStackResourceDrift::getStackResourceDriftStatus() const {
    return m_stack_resource_drift_status;
}
void OAIStackResourceDrift::setStackResourceDriftStatus(const OAIStackResourceDriftStatus &stack_resource_drift_status) {
    m_stack_resource_drift_status = stack_resource_drift_status;
    m_stack_resource_drift_status_isSet = true;
}

bool OAIStackResourceDrift::is_stack_resource_drift_status_Set() const{
    return m_stack_resource_drift_status_isSet;
}

bool OAIStackResourceDrift::is_stack_resource_drift_status_Valid() const{
    return m_stack_resource_drift_status_isValid;
}

QDateTime OAIStackResourceDrift::getTimestamp() const {
    return m_timestamp;
}
void OAIStackResourceDrift::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIStackResourceDrift::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIStackResourceDrift::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIResourceChange_ModuleInfo OAIStackResourceDrift::getModuleInfo() const {
    return m_module_info;
}
void OAIStackResourceDrift::setModuleInfo(const OAIResourceChange_ModuleInfo &module_info) {
    m_module_info = module_info;
    m_module_info_isSet = true;
}

bool OAIStackResourceDrift::is_module_info_Set() const{
    return m_module_info_isSet;
}

bool OAIStackResourceDrift::is_module_info_Valid() const{
    return m_module_info_isValid;
}

bool OAIStackResourceDrift::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_differences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_resource_drift_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackResourceDrift::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_id_isValid && m_logical_resource_id_isValid && m_resource_type_isValid && m_stack_resource_drift_status_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
