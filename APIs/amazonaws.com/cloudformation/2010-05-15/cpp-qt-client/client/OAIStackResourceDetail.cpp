/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackResourceDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackResourceDetail::OAIStackResourceDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackResourceDetail::OAIStackResourceDetail() {
    this->initializeModel();
}

OAIStackResourceDetail::~OAIStackResourceDetail() {}

void OAIStackResourceDetail::initializeModel() {

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_resource_status_isSet = false;
    m_resource_status_isValid = false;

    m_resource_status_reason_isSet = false;
    m_resource_status_reason_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_drift_information_isSet = false;
    m_drift_information_isValid = false;

    m_module_info_isSet = false;
    m_module_info_isValid = false;
}

void OAIStackResourceDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackResourceDetail::fromJsonObject(QJsonObject json) {

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("LogicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("LogicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("PhysicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("PhysicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_resource_status_isValid = ::OpenAPI::fromJsonValue(m_resource_status, json[QString("ResourceStatus")]);
    m_resource_status_isSet = !json[QString("ResourceStatus")].isNull() && m_resource_status_isValid;

    m_resource_status_reason_isValid = ::OpenAPI::fromJsonValue(m_resource_status_reason, json[QString("ResourceStatusReason")]);
    m_resource_status_reason_isSet = !json[QString("ResourceStatusReason")].isNull() && m_resource_status_reason_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_drift_information_isValid = ::OpenAPI::fromJsonValue(m_drift_information, json[QString("DriftInformation")]);
    m_drift_information_isSet = !json[QString("DriftInformation")].isNull() && m_drift_information_isValid;

    m_module_info_isValid = ::OpenAPI::fromJsonValue(m_module_info, json[QString("ModuleInfo")]);
    m_module_info_isSet = !json[QString("ModuleInfo")].isNull() && m_module_info_isValid;
}

QString OAIStackResourceDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackResourceDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_logical_resource_id_isSet) {
        obj.insert(QString("LogicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id_isSet) {
        obj.insert(QString("PhysicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_resource_status.isSet()) {
        obj.insert(QString("ResourceStatus"), ::OpenAPI::toJsonValue(m_resource_status));
    }
    if (m_resource_status_reason_isSet) {
        obj.insert(QString("ResourceStatusReason"), ::OpenAPI::toJsonValue(m_resource_status_reason));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_drift_information.isSet()) {
        obj.insert(QString("DriftInformation"), ::OpenAPI::toJsonValue(m_drift_information));
    }
    if (m_module_info.isSet()) {
        obj.insert(QString("ModuleInfo"), ::OpenAPI::toJsonValue(m_module_info));
    }
    return obj;
}

QString OAIStackResourceDetail::getStackName() const {
    return m_stack_name;
}
void OAIStackResourceDetail::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIStackResourceDetail::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIStackResourceDetail::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIStackResourceDetail::getStackId() const {
    return m_stack_id;
}
void OAIStackResourceDetail::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIStackResourceDetail::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIStackResourceDetail::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIStackResourceDetail::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIStackResourceDetail::setLogicalResourceId(const QString &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIStackResourceDetail::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIStackResourceDetail::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIStackResourceDetail::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIStackResourceDetail::setPhysicalResourceId(const QString &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIStackResourceDetail::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIStackResourceDetail::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QString OAIStackResourceDetail::getResourceType() const {
    return m_resource_type;
}
void OAIStackResourceDetail::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStackResourceDetail::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStackResourceDetail::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QDateTime OAIStackResourceDetail::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIStackResourceDetail::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIStackResourceDetail::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIStackResourceDetail::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

OAIResourceStatus OAIStackResourceDetail::getResourceStatus() const {
    return m_resource_status;
}
void OAIStackResourceDetail::setResourceStatus(const OAIResourceStatus &resource_status) {
    m_resource_status = resource_status;
    m_resource_status_isSet = true;
}

bool OAIStackResourceDetail::is_resource_status_Set() const{
    return m_resource_status_isSet;
}

bool OAIStackResourceDetail::is_resource_status_Valid() const{
    return m_resource_status_isValid;
}

QString OAIStackResourceDetail::getResourceStatusReason() const {
    return m_resource_status_reason;
}
void OAIStackResourceDetail::setResourceStatusReason(const QString &resource_status_reason) {
    m_resource_status_reason = resource_status_reason;
    m_resource_status_reason_isSet = true;
}

bool OAIStackResourceDetail::is_resource_status_reason_Set() const{
    return m_resource_status_reason_isSet;
}

bool OAIStackResourceDetail::is_resource_status_reason_Valid() const{
    return m_resource_status_reason_isValid;
}

QString OAIStackResourceDetail::getDescription() const {
    return m_description;
}
void OAIStackResourceDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStackResourceDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStackResourceDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStackResourceDetail::getMetadata() const {
    return m_metadata;
}
void OAIStackResourceDetail::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIStackResourceDetail::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIStackResourceDetail::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIStackResourceDetail_DriftInformation OAIStackResourceDetail::getDriftInformation() const {
    return m_drift_information;
}
void OAIStackResourceDetail::setDriftInformation(const OAIStackResourceDetail_DriftInformation &drift_information) {
    m_drift_information = drift_information;
    m_drift_information_isSet = true;
}

bool OAIStackResourceDetail::is_drift_information_Set() const{
    return m_drift_information_isSet;
}

bool OAIStackResourceDetail::is_drift_information_Valid() const{
    return m_drift_information_isValid;
}

OAIResourceChange_ModuleInfo OAIStackResourceDetail::getModuleInfo() const {
    return m_module_info;
}
void OAIStackResourceDetail::setModuleInfo(const OAIResourceChange_ModuleInfo &module_info) {
    m_module_info = module_info;
    m_module_info_isSet = true;
}

bool OAIStackResourceDetail::is_module_info_Set() const{
    return m_module_info_isSet;
}

bool OAIStackResourceDetail::is_module_info_Valid() const{
    return m_module_info_isValid;
}

bool OAIStackResourceDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackResourceDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_logical_resource_id_isValid && m_resource_type_isValid && m_last_updated_timestamp_isValid && m_resource_status_isValid && true;
}

} // namespace OpenAPI
