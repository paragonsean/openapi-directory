/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceChangeDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceChangeDetail::OAIResourceChangeDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceChangeDetail::OAIResourceChangeDetail() {
    this->initializeModel();
}

OAIResourceChangeDetail::~OAIResourceChangeDetail() {}

void OAIResourceChangeDetail::initializeModel() {

    m_target_isSet = false;
    m_target_isValid = false;

    m_evaluation_isSet = false;
    m_evaluation_isValid = false;

    m_change_source_isSet = false;
    m_change_source_isValid = false;

    m_causing_entity_isSet = false;
    m_causing_entity_isValid = false;
}

void OAIResourceChangeDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceChangeDetail::fromJsonObject(QJsonObject json) {

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_evaluation_isValid = ::OpenAPI::fromJsonValue(m_evaluation, json[QString("Evaluation")]);
    m_evaluation_isSet = !json[QString("Evaluation")].isNull() && m_evaluation_isValid;

    m_change_source_isValid = ::OpenAPI::fromJsonValue(m_change_source, json[QString("ChangeSource")]);
    m_change_source_isSet = !json[QString("ChangeSource")].isNull() && m_change_source_isValid;

    m_causing_entity_isValid = ::OpenAPI::fromJsonValue(m_causing_entity, json[QString("CausingEntity")]);
    m_causing_entity_isSet = !json[QString("CausingEntity")].isNull() && m_causing_entity_isValid;
}

QString OAIResourceChangeDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceChangeDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_target.isSet()) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_evaluation.isSet()) {
        obj.insert(QString("Evaluation"), ::OpenAPI::toJsonValue(m_evaluation));
    }
    if (m_change_source.isSet()) {
        obj.insert(QString("ChangeSource"), ::OpenAPI::toJsonValue(m_change_source));
    }
    if (m_causing_entity_isSet) {
        obj.insert(QString("CausingEntity"), ::OpenAPI::toJsonValue(m_causing_entity));
    }
    return obj;
}

OAIResourceChangeDetail_Target OAIResourceChangeDetail::getTarget() const {
    return m_target;
}
void OAIResourceChangeDetail::setTarget(const OAIResourceChangeDetail_Target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIResourceChangeDetail::is_target_Set() const{
    return m_target_isSet;
}

bool OAIResourceChangeDetail::is_target_Valid() const{
    return m_target_isValid;
}

OAIEvaluationType OAIResourceChangeDetail::getEvaluation() const {
    return m_evaluation;
}
void OAIResourceChangeDetail::setEvaluation(const OAIEvaluationType &evaluation) {
    m_evaluation = evaluation;
    m_evaluation_isSet = true;
}

bool OAIResourceChangeDetail::is_evaluation_Set() const{
    return m_evaluation_isSet;
}

bool OAIResourceChangeDetail::is_evaluation_Valid() const{
    return m_evaluation_isValid;
}

OAIChangeSource OAIResourceChangeDetail::getChangeSource() const {
    return m_change_source;
}
void OAIResourceChangeDetail::setChangeSource(const OAIChangeSource &change_source) {
    m_change_source = change_source;
    m_change_source_isSet = true;
}

bool OAIResourceChangeDetail::is_change_source_Set() const{
    return m_change_source_isSet;
}

bool OAIResourceChangeDetail::is_change_source_Valid() const{
    return m_change_source_isValid;
}

QString OAIResourceChangeDetail::getCausingEntity() const {
    return m_causing_entity;
}
void OAIResourceChangeDetail::setCausingEntity(const QString &causing_entity) {
    m_causing_entity = causing_entity;
    m_causing_entity_isSet = true;
}

bool OAIResourceChangeDetail::is_causing_entity_Set() const{
    return m_causing_entity_isSet;
}

bool OAIResourceChangeDetail::is_causing_entity_Valid() const{
    return m_causing_entity_isValid;
}

bool OAIResourceChangeDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_causing_entity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceChangeDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
