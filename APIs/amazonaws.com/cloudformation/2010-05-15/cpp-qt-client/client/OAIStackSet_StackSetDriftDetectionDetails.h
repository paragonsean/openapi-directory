/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStackSet_StackSetDriftDetectionDetails.h
 *
 * 
 */

#ifndef OAIStackSet_StackSetDriftDetectionDetails_H
#define OAIStackSet_StackSetDriftDetectionDetails_H

#include <QJsonObject>

#include "OAIStackSetDriftDetectionStatus.h"
#include "OAIStackSetDriftStatus.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStackSet_StackSetDriftDetectionDetails : public OAIObject {
public:
    OAIStackSet_StackSetDriftDetectionDetails();
    OAIStackSet_StackSetDriftDetectionDetails(QString json);
    ~OAIStackSet_StackSetDriftDetectionDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIStackSetDriftStatus getDriftStatus() const;
    void setDriftStatus(const OAIStackSetDriftStatus &drift_status);
    bool is_drift_status_Set() const;
    bool is_drift_status_Valid() const;

    OAIStackSetDriftDetectionStatus getDriftDetectionStatus() const;
    void setDriftDetectionStatus(const OAIStackSetDriftDetectionStatus &drift_detection_status);
    bool is_drift_detection_status_Set() const;
    bool is_drift_detection_status_Valid() const;

    QDateTime getLastDriftCheckTimestamp() const;
    void setLastDriftCheckTimestamp(const QDateTime &last_drift_check_timestamp);
    bool is_last_drift_check_timestamp_Set() const;
    bool is_last_drift_check_timestamp_Valid() const;

    qint32 getTotalStackInstancesCount() const;
    void setTotalStackInstancesCount(const qint32 &total_stack_instances_count);
    bool is_total_stack_instances_count_Set() const;
    bool is_total_stack_instances_count_Valid() const;

    qint32 getDriftedStackInstancesCount() const;
    void setDriftedStackInstancesCount(const qint32 &drifted_stack_instances_count);
    bool is_drifted_stack_instances_count_Set() const;
    bool is_drifted_stack_instances_count_Valid() const;

    qint32 getInSyncStackInstancesCount() const;
    void setInSyncStackInstancesCount(const qint32 &in_sync_stack_instances_count);
    bool is_in_sync_stack_instances_count_Set() const;
    bool is_in_sync_stack_instances_count_Valid() const;

    qint32 getInProgressStackInstancesCount() const;
    void setInProgressStackInstancesCount(const qint32 &in_progress_stack_instances_count);
    bool is_in_progress_stack_instances_count_Set() const;
    bool is_in_progress_stack_instances_count_Valid() const;

    qint32 getFailedStackInstancesCount() const;
    void setFailedStackInstancesCount(const qint32 &failed_stack_instances_count);
    bool is_failed_stack_instances_count_Set() const;
    bool is_failed_stack_instances_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIStackSetDriftStatus m_drift_status;
    bool m_drift_status_isSet;
    bool m_drift_status_isValid;

    OAIStackSetDriftDetectionStatus m_drift_detection_status;
    bool m_drift_detection_status_isSet;
    bool m_drift_detection_status_isValid;

    QDateTime m_last_drift_check_timestamp;
    bool m_last_drift_check_timestamp_isSet;
    bool m_last_drift_check_timestamp_isValid;

    qint32 m_total_stack_instances_count;
    bool m_total_stack_instances_count_isSet;
    bool m_total_stack_instances_count_isValid;

    qint32 m_drifted_stack_instances_count;
    bool m_drifted_stack_instances_count_isSet;
    bool m_drifted_stack_instances_count_isValid;

    qint32 m_in_sync_stack_instances_count;
    bool m_in_sync_stack_instances_count_isSet;
    bool m_in_sync_stack_instances_count_isValid;

    qint32 m_in_progress_stack_instances_count;
    bool m_in_progress_stack_instances_count_isSet;
    bool m_in_progress_stack_instances_count_isValid;

    qint32 m_failed_stack_instances_count;
    bool m_failed_stack_instances_count_isSet;
    bool m_failed_stack_instances_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStackSet_StackSetDriftDetectionDetails)

#endif // OAIStackSet_StackSetDriftDetectionDetails_H
