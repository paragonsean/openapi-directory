/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackSetOperation_StackSetDriftDetectionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackSetOperation_StackSetDriftDetectionDetails::OAIStackSetOperation_StackSetDriftDetectionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackSetOperation_StackSetDriftDetectionDetails::OAIStackSetOperation_StackSetDriftDetectionDetails() {
    this->initializeModel();
}

OAIStackSetOperation_StackSetDriftDetectionDetails::~OAIStackSetOperation_StackSetDriftDetectionDetails() {}

void OAIStackSetOperation_StackSetDriftDetectionDetails::initializeModel() {

    m_drift_status_isSet = false;
    m_drift_status_isValid = false;

    m_drift_detection_status_isSet = false;
    m_drift_detection_status_isValid = false;

    m_last_drift_check_timestamp_isSet = false;
    m_last_drift_check_timestamp_isValid = false;

    m_total_stack_instances_count_isSet = false;
    m_total_stack_instances_count_isValid = false;

    m_drifted_stack_instances_count_isSet = false;
    m_drifted_stack_instances_count_isValid = false;

    m_in_sync_stack_instances_count_isSet = false;
    m_in_sync_stack_instances_count_isValid = false;

    m_in_progress_stack_instances_count_isSet = false;
    m_in_progress_stack_instances_count_isValid = false;

    m_failed_stack_instances_count_isSet = false;
    m_failed_stack_instances_count_isValid = false;
}

void OAIStackSetOperation_StackSetDriftDetectionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackSetOperation_StackSetDriftDetectionDetails::fromJsonObject(QJsonObject json) {

    m_drift_status_isValid = ::OpenAPI::fromJsonValue(m_drift_status, json[QString("DriftStatus")]);
    m_drift_status_isSet = !json[QString("DriftStatus")].isNull() && m_drift_status_isValid;

    m_drift_detection_status_isValid = ::OpenAPI::fromJsonValue(m_drift_detection_status, json[QString("DriftDetectionStatus")]);
    m_drift_detection_status_isSet = !json[QString("DriftDetectionStatus")].isNull() && m_drift_detection_status_isValid;

    m_last_drift_check_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_drift_check_timestamp, json[QString("LastDriftCheckTimestamp")]);
    m_last_drift_check_timestamp_isSet = !json[QString("LastDriftCheckTimestamp")].isNull() && m_last_drift_check_timestamp_isValid;

    m_total_stack_instances_count_isValid = ::OpenAPI::fromJsonValue(m_total_stack_instances_count, json[QString("TotalStackInstancesCount")]);
    m_total_stack_instances_count_isSet = !json[QString("TotalStackInstancesCount")].isNull() && m_total_stack_instances_count_isValid;

    m_drifted_stack_instances_count_isValid = ::OpenAPI::fromJsonValue(m_drifted_stack_instances_count, json[QString("DriftedStackInstancesCount")]);
    m_drifted_stack_instances_count_isSet = !json[QString("DriftedStackInstancesCount")].isNull() && m_drifted_stack_instances_count_isValid;

    m_in_sync_stack_instances_count_isValid = ::OpenAPI::fromJsonValue(m_in_sync_stack_instances_count, json[QString("InSyncStackInstancesCount")]);
    m_in_sync_stack_instances_count_isSet = !json[QString("InSyncStackInstancesCount")].isNull() && m_in_sync_stack_instances_count_isValid;

    m_in_progress_stack_instances_count_isValid = ::OpenAPI::fromJsonValue(m_in_progress_stack_instances_count, json[QString("InProgressStackInstancesCount")]);
    m_in_progress_stack_instances_count_isSet = !json[QString("InProgressStackInstancesCount")].isNull() && m_in_progress_stack_instances_count_isValid;

    m_failed_stack_instances_count_isValid = ::OpenAPI::fromJsonValue(m_failed_stack_instances_count, json[QString("FailedStackInstancesCount")]);
    m_failed_stack_instances_count_isSet = !json[QString("FailedStackInstancesCount")].isNull() && m_failed_stack_instances_count_isValid;
}

QString OAIStackSetOperation_StackSetDriftDetectionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackSetOperation_StackSetDriftDetectionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_drift_status.isSet()) {
        obj.insert(QString("DriftStatus"), ::OpenAPI::toJsonValue(m_drift_status));
    }
    if (m_drift_detection_status.isSet()) {
        obj.insert(QString("DriftDetectionStatus"), ::OpenAPI::toJsonValue(m_drift_detection_status));
    }
    if (m_last_drift_check_timestamp_isSet) {
        obj.insert(QString("LastDriftCheckTimestamp"), ::OpenAPI::toJsonValue(m_last_drift_check_timestamp));
    }
    if (m_total_stack_instances_count_isSet) {
        obj.insert(QString("TotalStackInstancesCount"), ::OpenAPI::toJsonValue(m_total_stack_instances_count));
    }
    if (m_drifted_stack_instances_count_isSet) {
        obj.insert(QString("DriftedStackInstancesCount"), ::OpenAPI::toJsonValue(m_drifted_stack_instances_count));
    }
    if (m_in_sync_stack_instances_count_isSet) {
        obj.insert(QString("InSyncStackInstancesCount"), ::OpenAPI::toJsonValue(m_in_sync_stack_instances_count));
    }
    if (m_in_progress_stack_instances_count_isSet) {
        obj.insert(QString("InProgressStackInstancesCount"), ::OpenAPI::toJsonValue(m_in_progress_stack_instances_count));
    }
    if (m_failed_stack_instances_count_isSet) {
        obj.insert(QString("FailedStackInstancesCount"), ::OpenAPI::toJsonValue(m_failed_stack_instances_count));
    }
    return obj;
}

OAIStackSetDriftStatus OAIStackSetOperation_StackSetDriftDetectionDetails::getDriftStatus() const {
    return m_drift_status;
}
void OAIStackSetOperation_StackSetDriftDetectionDetails::setDriftStatus(const OAIStackSetDriftStatus &drift_status) {
    m_drift_status = drift_status;
    m_drift_status_isSet = true;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_drift_status_Set() const{
    return m_drift_status_isSet;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_drift_status_Valid() const{
    return m_drift_status_isValid;
}

OAIStackSetDriftDetectionStatus OAIStackSetOperation_StackSetDriftDetectionDetails::getDriftDetectionStatus() const {
    return m_drift_detection_status;
}
void OAIStackSetOperation_StackSetDriftDetectionDetails::setDriftDetectionStatus(const OAIStackSetDriftDetectionStatus &drift_detection_status) {
    m_drift_detection_status = drift_detection_status;
    m_drift_detection_status_isSet = true;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_drift_detection_status_Set() const{
    return m_drift_detection_status_isSet;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_drift_detection_status_Valid() const{
    return m_drift_detection_status_isValid;
}

QDateTime OAIStackSetOperation_StackSetDriftDetectionDetails::getLastDriftCheckTimestamp() const {
    return m_last_drift_check_timestamp;
}
void OAIStackSetOperation_StackSetDriftDetectionDetails::setLastDriftCheckTimestamp(const QDateTime &last_drift_check_timestamp) {
    m_last_drift_check_timestamp = last_drift_check_timestamp;
    m_last_drift_check_timestamp_isSet = true;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_last_drift_check_timestamp_Set() const{
    return m_last_drift_check_timestamp_isSet;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_last_drift_check_timestamp_Valid() const{
    return m_last_drift_check_timestamp_isValid;
}

qint32 OAIStackSetOperation_StackSetDriftDetectionDetails::getTotalStackInstancesCount() const {
    return m_total_stack_instances_count;
}
void OAIStackSetOperation_StackSetDriftDetectionDetails::setTotalStackInstancesCount(const qint32 &total_stack_instances_count) {
    m_total_stack_instances_count = total_stack_instances_count;
    m_total_stack_instances_count_isSet = true;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_total_stack_instances_count_Set() const{
    return m_total_stack_instances_count_isSet;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_total_stack_instances_count_Valid() const{
    return m_total_stack_instances_count_isValid;
}

qint32 OAIStackSetOperation_StackSetDriftDetectionDetails::getDriftedStackInstancesCount() const {
    return m_drifted_stack_instances_count;
}
void OAIStackSetOperation_StackSetDriftDetectionDetails::setDriftedStackInstancesCount(const qint32 &drifted_stack_instances_count) {
    m_drifted_stack_instances_count = drifted_stack_instances_count;
    m_drifted_stack_instances_count_isSet = true;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_drifted_stack_instances_count_Set() const{
    return m_drifted_stack_instances_count_isSet;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_drifted_stack_instances_count_Valid() const{
    return m_drifted_stack_instances_count_isValid;
}

qint32 OAIStackSetOperation_StackSetDriftDetectionDetails::getInSyncStackInstancesCount() const {
    return m_in_sync_stack_instances_count;
}
void OAIStackSetOperation_StackSetDriftDetectionDetails::setInSyncStackInstancesCount(const qint32 &in_sync_stack_instances_count) {
    m_in_sync_stack_instances_count = in_sync_stack_instances_count;
    m_in_sync_stack_instances_count_isSet = true;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_in_sync_stack_instances_count_Set() const{
    return m_in_sync_stack_instances_count_isSet;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_in_sync_stack_instances_count_Valid() const{
    return m_in_sync_stack_instances_count_isValid;
}

qint32 OAIStackSetOperation_StackSetDriftDetectionDetails::getInProgressStackInstancesCount() const {
    return m_in_progress_stack_instances_count;
}
void OAIStackSetOperation_StackSetDriftDetectionDetails::setInProgressStackInstancesCount(const qint32 &in_progress_stack_instances_count) {
    m_in_progress_stack_instances_count = in_progress_stack_instances_count;
    m_in_progress_stack_instances_count_isSet = true;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_in_progress_stack_instances_count_Set() const{
    return m_in_progress_stack_instances_count_isSet;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_in_progress_stack_instances_count_Valid() const{
    return m_in_progress_stack_instances_count_isValid;
}

qint32 OAIStackSetOperation_StackSetDriftDetectionDetails::getFailedStackInstancesCount() const {
    return m_failed_stack_instances_count;
}
void OAIStackSetOperation_StackSetDriftDetectionDetails::setFailedStackInstancesCount(const qint32 &failed_stack_instances_count) {
    m_failed_stack_instances_count = failed_stack_instances_count;
    m_failed_stack_instances_count_isSet = true;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_failed_stack_instances_count_Set() const{
    return m_failed_stack_instances_count_isSet;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::is_failed_stack_instances_count_Valid() const{
    return m_failed_stack_instances_count_isValid;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drift_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_detection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_drift_check_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_stack_instances_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drifted_stack_instances_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_sync_stack_instances_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_stack_instances_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_stack_instances_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackSetOperation_StackSetDriftDetectionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
