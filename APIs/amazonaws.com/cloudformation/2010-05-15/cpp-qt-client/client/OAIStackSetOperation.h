/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStackSetOperation.h
 *
 * The structure that contains information about a stack set operation.
 */

#ifndef OAIStackSetOperation_H
#define OAIStackSetOperation_H

#include <QJsonObject>

#include "OAIStackSetOperationAction.h"
#include "OAIStackSetOperationStatus.h"
#include "OAIStackSetOperation_DeploymentTargets.h"
#include "OAIStackSetOperation_OperationPreferences.h"
#include "OAIStackSetOperation_StackSetDriftDetectionDetails.h"
#include "OAIStackSetOperation_StatusDetails.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStackSetOperation_OperationPreferences;
class OAIStackSetOperation_DeploymentTargets;
class OAIStackSetOperation_StackSetDriftDetectionDetails;
class OAIStackSetOperation_StatusDetails;

class OAIStackSetOperation : public OAIObject {
public:
    OAIStackSetOperation();
    OAIStackSetOperation(QString json);
    ~OAIStackSetOperation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getOperationId() const;
    void setOperationId(const QString &operation_id);
    bool is_operation_id_Set() const;
    bool is_operation_id_Valid() const;

    QString getStackSetId() const;
    void setStackSetId(const QString &stack_set_id);
    bool is_stack_set_id_Set() const;
    bool is_stack_set_id_Valid() const;

    OAIStackSetOperationAction getAction() const;
    void setAction(const OAIStackSetOperationAction &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    OAIStackSetOperationStatus getStatus() const;
    void setStatus(const OAIStackSetOperationStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIStackSetOperation_OperationPreferences getOperationPreferences() const;
    void setOperationPreferences(const OAIStackSetOperation_OperationPreferences &operation_preferences);
    bool is_operation_preferences_Set() const;
    bool is_operation_preferences_Valid() const;

    bool getRetainStacks() const;
    void setRetainStacks(const bool &retain_stacks);
    bool is_retain_stacks_Set() const;
    bool is_retain_stacks_Valid() const;

    QString getAdministrationRoleArn() const;
    void setAdministrationRoleArn(const QString &administration_role_arn);
    bool is_administration_role_arn_Set() const;
    bool is_administration_role_arn_Valid() const;

    QString getExecutionRoleName() const;
    void setExecutionRoleName(const QString &execution_role_name);
    bool is_execution_role_name_Set() const;
    bool is_execution_role_name_Valid() const;

    QDateTime getCreationTimestamp() const;
    void setCreationTimestamp(const QDateTime &creation_timestamp);
    bool is_creation_timestamp_Set() const;
    bool is_creation_timestamp_Valid() const;

    QDateTime getEndTimestamp() const;
    void setEndTimestamp(const QDateTime &end_timestamp);
    bool is_end_timestamp_Set() const;
    bool is_end_timestamp_Valid() const;

    OAIStackSetOperation_DeploymentTargets getDeploymentTargets() const;
    void setDeploymentTargets(const OAIStackSetOperation_DeploymentTargets &deployment_targets);
    bool is_deployment_targets_Set() const;
    bool is_deployment_targets_Valid() const;

    OAIStackSetOperation_StackSetDriftDetectionDetails getStackSetDriftDetectionDetails() const;
    void setStackSetDriftDetectionDetails(const OAIStackSetOperation_StackSetDriftDetectionDetails &stack_set_drift_detection_details);
    bool is_stack_set_drift_detection_details_Set() const;
    bool is_stack_set_drift_detection_details_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    OAIStackSetOperation_StatusDetails getStatusDetails() const;
    void setStatusDetails(const OAIStackSetOperation_StatusDetails &status_details);
    bool is_status_details_Set() const;
    bool is_status_details_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_operation_id;
    bool m_operation_id_isSet;
    bool m_operation_id_isValid;

    QString m_stack_set_id;
    bool m_stack_set_id_isSet;
    bool m_stack_set_id_isValid;

    OAIStackSetOperationAction m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    OAIStackSetOperationStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIStackSetOperation_OperationPreferences m_operation_preferences;
    bool m_operation_preferences_isSet;
    bool m_operation_preferences_isValid;

    bool m_retain_stacks;
    bool m_retain_stacks_isSet;
    bool m_retain_stacks_isValid;

    QString m_administration_role_arn;
    bool m_administration_role_arn_isSet;
    bool m_administration_role_arn_isValid;

    QString m_execution_role_name;
    bool m_execution_role_name_isSet;
    bool m_execution_role_name_isValid;

    QDateTime m_creation_timestamp;
    bool m_creation_timestamp_isSet;
    bool m_creation_timestamp_isValid;

    QDateTime m_end_timestamp;
    bool m_end_timestamp_isSet;
    bool m_end_timestamp_isValid;

    OAIStackSetOperation_DeploymentTargets m_deployment_targets;
    bool m_deployment_targets_isSet;
    bool m_deployment_targets_isValid;

    OAIStackSetOperation_StackSetDriftDetectionDetails m_stack_set_drift_detection_details;
    bool m_stack_set_drift_detection_details_isSet;
    bool m_stack_set_drift_detection_details_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    OAIStackSetOperation_StatusDetails m_status_details;
    bool m_status_details_isSet;
    bool m_status_details_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStackSetOperation)

#endif // OAIStackSetOperation_H
