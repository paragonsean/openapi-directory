/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeChangeSetHooksOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeChangeSetHooksOutput::OAIDescribeChangeSetHooksOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeChangeSetHooksOutput::OAIDescribeChangeSetHooksOutput() {
    this->initializeModel();
}

OAIDescribeChangeSetHooksOutput::~OAIDescribeChangeSetHooksOutput() {}

void OAIDescribeChangeSetHooksOutput::initializeModel() {

    m_change_set_id_isSet = false;
    m_change_set_id_isValid = false;

    m_change_set_name_isSet = false;
    m_change_set_name_isValid = false;

    m_hooks_isSet = false;
    m_hooks_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;
}

void OAIDescribeChangeSetHooksOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeChangeSetHooksOutput::fromJsonObject(QJsonObject json) {

    m_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_change_set_id, json[QString("ChangeSetId")]);
    m_change_set_id_isSet = !json[QString("ChangeSetId")].isNull() && m_change_set_id_isValid;

    m_change_set_name_isValid = ::OpenAPI::fromJsonValue(m_change_set_name, json[QString("ChangeSetName")]);
    m_change_set_name_isSet = !json[QString("ChangeSetName")].isNull() && m_change_set_name_isValid;

    m_hooks_isValid = ::OpenAPI::fromJsonValue(m_hooks, json[QString("Hooks")]);
    m_hooks_isSet = !json[QString("Hooks")].isNull() && m_hooks_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;
}

QString OAIDescribeChangeSetHooksOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeChangeSetHooksOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_change_set_id_isSet) {
        obj.insert(QString("ChangeSetId"), ::OpenAPI::toJsonValue(m_change_set_id));
    }
    if (m_change_set_name_isSet) {
        obj.insert(QString("ChangeSetName"), ::OpenAPI::toJsonValue(m_change_set_name));
    }
    if (m_hooks.isSet()) {
        obj.insert(QString("Hooks"), ::OpenAPI::toJsonValue(m_hooks));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    return obj;
}

QString OAIDescribeChangeSetHooksOutput::getChangeSetId() const {
    return m_change_set_id;
}
void OAIDescribeChangeSetHooksOutput::setChangeSetId(const QString &change_set_id) {
    m_change_set_id = change_set_id;
    m_change_set_id_isSet = true;
}

bool OAIDescribeChangeSetHooksOutput::is_change_set_id_Set() const{
    return m_change_set_id_isSet;
}

bool OAIDescribeChangeSetHooksOutput::is_change_set_id_Valid() const{
    return m_change_set_id_isValid;
}

QString OAIDescribeChangeSetHooksOutput::getChangeSetName() const {
    return m_change_set_name;
}
void OAIDescribeChangeSetHooksOutput::setChangeSetName(const QString &change_set_name) {
    m_change_set_name = change_set_name;
    m_change_set_name_isSet = true;
}

bool OAIDescribeChangeSetHooksOutput::is_change_set_name_Set() const{
    return m_change_set_name_isSet;
}

bool OAIDescribeChangeSetHooksOutput::is_change_set_name_Valid() const{
    return m_change_set_name_isValid;
}

QList OAIDescribeChangeSetHooksOutput::getHooks() const {
    return m_hooks;
}
void OAIDescribeChangeSetHooksOutput::setHooks(const QList &hooks) {
    m_hooks = hooks;
    m_hooks_isSet = true;
}

bool OAIDescribeChangeSetHooksOutput::is_hooks_Set() const{
    return m_hooks_isSet;
}

bool OAIDescribeChangeSetHooksOutput::is_hooks_Valid() const{
    return m_hooks_isValid;
}

OAIChangeSetHooksStatus OAIDescribeChangeSetHooksOutput::getStatus() const {
    return m_status;
}
void OAIDescribeChangeSetHooksOutput::setStatus(const OAIChangeSetHooksStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeChangeSetHooksOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeChangeSetHooksOutput::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeChangeSetHooksOutput::getNextToken() const {
    return m_next_token;
}
void OAIDescribeChangeSetHooksOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeChangeSetHooksOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeChangeSetHooksOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIDescribeChangeSetHooksOutput::getStackId() const {
    return m_stack_id;
}
void OAIDescribeChangeSetHooksOutput::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIDescribeChangeSetHooksOutput::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIDescribeChangeSetHooksOutput::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIDescribeChangeSetHooksOutput::getStackName() const {
    return m_stack_name;
}
void OAIDescribeChangeSetHooksOutput::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIDescribeChangeSetHooksOutput::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIDescribeChangeSetHooksOutput::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

bool OAIDescribeChangeSetHooksOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hooks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeChangeSetHooksOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
