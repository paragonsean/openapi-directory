/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResourceIdentifierSummary.h
 *
 * Describes the target resources of a specific type in your import template (for example, all &lt;code&gt;AWS::S3::Bucket&lt;/code&gt; resources) and the properties you can provide during the import to identify resources of that type.
 */

#ifndef OAIResourceIdentifierSummary_H
#define OAIResourceIdentifierSummary_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResourceIdentifierSummary : public OAIObject {
public:
    OAIResourceIdentifierSummary();
    OAIResourceIdentifierSummary(QString json);
    ~OAIResourceIdentifierSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QList getLogicalResourceIds() const;
    void setLogicalResourceIds(const QList &logical_resource_ids);
    bool is_logical_resource_ids_Set() const;
    bool is_logical_resource_ids_Valid() const;

    QList getResourceIdentifiers() const;
    void setResourceIdentifiers(const QList &resource_identifiers);
    bool is_resource_identifiers_Set() const;
    bool is_resource_identifiers_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QList m_logical_resource_ids;
    bool m_logical_resource_ids_isSet;
    bool m_logical_resource_ids_isValid;

    QList m_resource_identifiers;
    bool m_resource_identifiers_isSet;
    bool m_resource_identifiers_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResourceIdentifierSummary)

#endif // OAIResourceIdentifierSummary_H
