/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListStackInstanceResourceDriftsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListStackInstanceResourceDriftsInput::OAIListStackInstanceResourceDriftsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListStackInstanceResourceDriftsInput::OAIListStackInstanceResourceDriftsInput() {
    this->initializeModel();
}

OAIListStackInstanceResourceDriftsInput::~OAIListStackInstanceResourceDriftsInput() {}

void OAIListStackInstanceResourceDriftsInput::initializeModel() {

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_stack_instance_resource_drift_statuses_isSet = false;
    m_stack_instance_resource_drift_statuses_isValid = false;

    m_stack_instance_account_isSet = false;
    m_stack_instance_account_isValid = false;

    m_stack_instance_region_isSet = false;
    m_stack_instance_region_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_call_as_isSet = false;
    m_call_as_isValid = false;
}

void OAIListStackInstanceResourceDriftsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListStackInstanceResourceDriftsInput::fromJsonObject(QJsonObject json) {

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("StackSetName")]);
    m_stack_set_name_isSet = !json[QString("StackSetName")].isNull() && m_stack_set_name_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_stack_instance_resource_drift_statuses_isValid = ::OpenAPI::fromJsonValue(m_stack_instance_resource_drift_statuses, json[QString("StackInstanceResourceDriftStatuses")]);
    m_stack_instance_resource_drift_statuses_isSet = !json[QString("StackInstanceResourceDriftStatuses")].isNull() && m_stack_instance_resource_drift_statuses_isValid;

    m_stack_instance_account_isValid = ::OpenAPI::fromJsonValue(m_stack_instance_account, json[QString("StackInstanceAccount")]);
    m_stack_instance_account_isSet = !json[QString("StackInstanceAccount")].isNull() && m_stack_instance_account_isValid;

    m_stack_instance_region_isValid = ::OpenAPI::fromJsonValue(m_stack_instance_region, json[QString("StackInstanceRegion")]);
    m_stack_instance_region_isSet = !json[QString("StackInstanceRegion")].isNull() && m_stack_instance_region_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;

    m_call_as_isValid = ::OpenAPI::fromJsonValue(m_call_as, json[QString("CallAs")]);
    m_call_as_isSet = !json[QString("CallAs")].isNull() && m_call_as_isValid;
}

QString OAIListStackInstanceResourceDriftsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListStackInstanceResourceDriftsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_name_isSet) {
        obj.insert(QString("StackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_stack_instance_resource_drift_statuses.isSet()) {
        obj.insert(QString("StackInstanceResourceDriftStatuses"), ::OpenAPI::toJsonValue(m_stack_instance_resource_drift_statuses));
    }
    if (m_stack_instance_account_isSet) {
        obj.insert(QString("StackInstanceAccount"), ::OpenAPI::toJsonValue(m_stack_instance_account));
    }
    if (m_stack_instance_region_isSet) {
        obj.insert(QString("StackInstanceRegion"), ::OpenAPI::toJsonValue(m_stack_instance_region));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_call_as.isSet()) {
        obj.insert(QString("CallAs"), ::OpenAPI::toJsonValue(m_call_as));
    }
    return obj;
}

QString OAIListStackInstanceResourceDriftsInput::getStackSetName() const {
    return m_stack_set_name;
}
void OAIListStackInstanceResourceDriftsInput::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIListStackInstanceResourceDriftsInput::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIListStackInstanceResourceDriftsInput::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

QString OAIListStackInstanceResourceDriftsInput::getNextToken() const {
    return m_next_token;
}
void OAIListStackInstanceResourceDriftsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListStackInstanceResourceDriftsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListStackInstanceResourceDriftsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListStackInstanceResourceDriftsInput::getMaxResults() const {
    return m_max_results;
}
void OAIListStackInstanceResourceDriftsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListStackInstanceResourceDriftsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListStackInstanceResourceDriftsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QList OAIListStackInstanceResourceDriftsInput::getStackInstanceResourceDriftStatuses() const {
    return m_stack_instance_resource_drift_statuses;
}
void OAIListStackInstanceResourceDriftsInput::setStackInstanceResourceDriftStatuses(const QList &stack_instance_resource_drift_statuses) {
    m_stack_instance_resource_drift_statuses = stack_instance_resource_drift_statuses;
    m_stack_instance_resource_drift_statuses_isSet = true;
}

bool OAIListStackInstanceResourceDriftsInput::is_stack_instance_resource_drift_statuses_Set() const{
    return m_stack_instance_resource_drift_statuses_isSet;
}

bool OAIListStackInstanceResourceDriftsInput::is_stack_instance_resource_drift_statuses_Valid() const{
    return m_stack_instance_resource_drift_statuses_isValid;
}

QString OAIListStackInstanceResourceDriftsInput::getStackInstanceAccount() const {
    return m_stack_instance_account;
}
void OAIListStackInstanceResourceDriftsInput::setStackInstanceAccount(const QString &stack_instance_account) {
    m_stack_instance_account = stack_instance_account;
    m_stack_instance_account_isSet = true;
}

bool OAIListStackInstanceResourceDriftsInput::is_stack_instance_account_Set() const{
    return m_stack_instance_account_isSet;
}

bool OAIListStackInstanceResourceDriftsInput::is_stack_instance_account_Valid() const{
    return m_stack_instance_account_isValid;
}

QString OAIListStackInstanceResourceDriftsInput::getStackInstanceRegion() const {
    return m_stack_instance_region;
}
void OAIListStackInstanceResourceDriftsInput::setStackInstanceRegion(const QString &stack_instance_region) {
    m_stack_instance_region = stack_instance_region;
    m_stack_instance_region_isSet = true;
}

bool OAIListStackInstanceResourceDriftsInput::is_stack_instance_region_Set() const{
    return m_stack_instance_region_isSet;
}

bool OAIListStackInstanceResourceDriftsInput::is_stack_instance_region_Valid() const{
    return m_stack_instance_region_isValid;
}

QString OAIListStackInstanceResourceDriftsInput::getOperationId() const {
    return m_operation_id;
}
void OAIListStackInstanceResourceDriftsInput::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIListStackInstanceResourceDriftsInput::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIListStackInstanceResourceDriftsInput::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAICallAs OAIListStackInstanceResourceDriftsInput::getCallAs() const {
    return m_call_as;
}
void OAIListStackInstanceResourceDriftsInput::setCallAs(const OAICallAs &call_as) {
    m_call_as = call_as;
    m_call_as_isSet = true;
}

bool OAIListStackInstanceResourceDriftsInput::is_call_as_Set() const{
    return m_call_as_isSet;
}

bool OAIListStackInstanceResourceDriftsInput::is_call_as_Valid() const{
    return m_call_as_isValid;
}

bool OAIListStackInstanceResourceDriftsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_instance_resource_drift_statuses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_instance_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_instance_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_as.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListStackInstanceResourceDriftsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_set_name_isValid && m_stack_instance_account_isValid && m_stack_instance_region_isValid && m_operation_id_isValid && true;
}

} // namespace OpenAPI
