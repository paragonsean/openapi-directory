/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateStackSetInput_DeploymentTargets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateStackSetInput_DeploymentTargets::OAIUpdateStackSetInput_DeploymentTargets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateStackSetInput_DeploymentTargets::OAIUpdateStackSetInput_DeploymentTargets() {
    this->initializeModel();
}

OAIUpdateStackSetInput_DeploymentTargets::~OAIUpdateStackSetInput_DeploymentTargets() {}

void OAIUpdateStackSetInput_DeploymentTargets::initializeModel() {

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_accounts_url_isSet = false;
    m_accounts_url_isValid = false;

    m_organizational_unit_ids_isSet = false;
    m_organizational_unit_ids_isValid = false;

    m_account_filter_type_isSet = false;
    m_account_filter_type_isValid = false;
}

void OAIUpdateStackSetInput_DeploymentTargets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateStackSetInput_DeploymentTargets::fromJsonObject(QJsonObject json) {

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("Accounts")]);
    m_accounts_isSet = !json[QString("Accounts")].isNull() && m_accounts_isValid;

    m_accounts_url_isValid = ::OpenAPI::fromJsonValue(m_accounts_url, json[QString("AccountsUrl")]);
    m_accounts_url_isSet = !json[QString("AccountsUrl")].isNull() && m_accounts_url_isValid;

    m_organizational_unit_ids_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_ids, json[QString("OrganizationalUnitIds")]);
    m_organizational_unit_ids_isSet = !json[QString("OrganizationalUnitIds")].isNull() && m_organizational_unit_ids_isValid;

    m_account_filter_type_isValid = ::OpenAPI::fromJsonValue(m_account_filter_type, json[QString("AccountFilterType")]);
    m_account_filter_type_isSet = !json[QString("AccountFilterType")].isNull() && m_account_filter_type_isValid;
}

QString OAIUpdateStackSetInput_DeploymentTargets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateStackSetInput_DeploymentTargets::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts.isSet()) {
        obj.insert(QString("Accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_accounts_url_isSet) {
        obj.insert(QString("AccountsUrl"), ::OpenAPI::toJsonValue(m_accounts_url));
    }
    if (m_organizational_unit_ids.isSet()) {
        obj.insert(QString("OrganizationalUnitIds"), ::OpenAPI::toJsonValue(m_organizational_unit_ids));
    }
    if (m_account_filter_type.isSet()) {
        obj.insert(QString("AccountFilterType"), ::OpenAPI::toJsonValue(m_account_filter_type));
    }
    return obj;
}

QList OAIUpdateStackSetInput_DeploymentTargets::getAccounts() const {
    return m_accounts;
}
void OAIUpdateStackSetInput_DeploymentTargets::setAccounts(const QList &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIUpdateStackSetInput_DeploymentTargets::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIUpdateStackSetInput_DeploymentTargets::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QString OAIUpdateStackSetInput_DeploymentTargets::getAccountsUrl() const {
    return m_accounts_url;
}
void OAIUpdateStackSetInput_DeploymentTargets::setAccountsUrl(const QString &accounts_url) {
    m_accounts_url = accounts_url;
    m_accounts_url_isSet = true;
}

bool OAIUpdateStackSetInput_DeploymentTargets::is_accounts_url_Set() const{
    return m_accounts_url_isSet;
}

bool OAIUpdateStackSetInput_DeploymentTargets::is_accounts_url_Valid() const{
    return m_accounts_url_isValid;
}

QList OAIUpdateStackSetInput_DeploymentTargets::getOrganizationalUnitIds() const {
    return m_organizational_unit_ids;
}
void OAIUpdateStackSetInput_DeploymentTargets::setOrganizationalUnitIds(const QList &organizational_unit_ids) {
    m_organizational_unit_ids = organizational_unit_ids;
    m_organizational_unit_ids_isSet = true;
}

bool OAIUpdateStackSetInput_DeploymentTargets::is_organizational_unit_ids_Set() const{
    return m_organizational_unit_ids_isSet;
}

bool OAIUpdateStackSetInput_DeploymentTargets::is_organizational_unit_ids_Valid() const{
    return m_organizational_unit_ids_isValid;
}

OAIAccountFilterType OAIUpdateStackSetInput_DeploymentTargets::getAccountFilterType() const {
    return m_account_filter_type;
}
void OAIUpdateStackSetInput_DeploymentTargets::setAccountFilterType(const OAIAccountFilterType &account_filter_type) {
    m_account_filter_type = account_filter_type;
    m_account_filter_type_isSet = true;
}

bool OAIUpdateStackSetInput_DeploymentTargets::is_account_filter_type_Set() const{
    return m_account_filter_type_isSet;
}

bool OAIUpdateStackSetInput_DeploymentTargets::is_account_filter_type_Valid() const{
    return m_account_filter_type_isValid;
}

bool OAIUpdateStackSetInput_DeploymentTargets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_filter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateStackSetInput_DeploymentTargets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
