/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateStackInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateStackInput::OAICreateStackInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateStackInput::OAICreateStackInput() {
    this->initializeModel();
}

OAICreateStackInput::~OAICreateStackInput() {}

void OAICreateStackInput::initializeModel() {

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_template_body_isSet = false;
    m_template_body_isValid = false;

    m_template_url_isSet = false;
    m_template_url_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_disable_rollback_isSet = false;
    m_disable_rollback_isValid = false;

    m_rollback_configuration_isSet = false;
    m_rollback_configuration_isValid = false;

    m_timeout_in_minutes_isSet = false;
    m_timeout_in_minutes_isValid = false;

    m_notification_arns_isSet = false;
    m_notification_arns_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_on_failure_isSet = false;
    m_on_failure_isValid = false;

    m_stack_policy_body_isSet = false;
    m_stack_policy_body_isValid = false;

    m_stack_policy_url_isSet = false;
    m_stack_policy_url_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_enable_termination_protection_isSet = false;
    m_enable_termination_protection_isValid = false;

    m_retain_except_on_create_isSet = false;
    m_retain_except_on_create_isValid = false;
}

void OAICreateStackInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateStackInput::fromJsonObject(QJsonObject json) {

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_template_body_isValid = ::OpenAPI::fromJsonValue(m_template_body, json[QString("TemplateBody")]);
    m_template_body_isSet = !json[QString("TemplateBody")].isNull() && m_template_body_isValid;

    m_template_url_isValid = ::OpenAPI::fromJsonValue(m_template_url, json[QString("TemplateURL")]);
    m_template_url_isSet = !json[QString("TemplateURL")].isNull() && m_template_url_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_disable_rollback_isValid = ::OpenAPI::fromJsonValue(m_disable_rollback, json[QString("DisableRollback")]);
    m_disable_rollback_isSet = !json[QString("DisableRollback")].isNull() && m_disable_rollback_isValid;

    m_rollback_configuration_isValid = ::OpenAPI::fromJsonValue(m_rollback_configuration, json[QString("RollbackConfiguration")]);
    m_rollback_configuration_isSet = !json[QString("RollbackConfiguration")].isNull() && m_rollback_configuration_isValid;

    m_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_minutes, json[QString("TimeoutInMinutes")]);
    m_timeout_in_minutes_isSet = !json[QString("TimeoutInMinutes")].isNull() && m_timeout_in_minutes_isValid;

    m_notification_arns_isValid = ::OpenAPI::fromJsonValue(m_notification_arns, json[QString("NotificationARNs")]);
    m_notification_arns_isSet = !json[QString("NotificationARNs")].isNull() && m_notification_arns_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_on_failure_isValid = ::OpenAPI::fromJsonValue(m_on_failure, json[QString("OnFailure")]);
    m_on_failure_isSet = !json[QString("OnFailure")].isNull() && m_on_failure_isValid;

    m_stack_policy_body_isValid = ::OpenAPI::fromJsonValue(m_stack_policy_body, json[QString("StackPolicyBody")]);
    m_stack_policy_body_isSet = !json[QString("StackPolicyBody")].isNull() && m_stack_policy_body_isValid;

    m_stack_policy_url_isValid = ::OpenAPI::fromJsonValue(m_stack_policy_url, json[QString("StackPolicyURL")]);
    m_stack_policy_url_isSet = !json[QString("StackPolicyURL")].isNull() && m_stack_policy_url_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_enable_termination_protection_isValid = ::OpenAPI::fromJsonValue(m_enable_termination_protection, json[QString("EnableTerminationProtection")]);
    m_enable_termination_protection_isSet = !json[QString("EnableTerminationProtection")].isNull() && m_enable_termination_protection_isValid;

    m_retain_except_on_create_isValid = ::OpenAPI::fromJsonValue(m_retain_except_on_create, json[QString("RetainExceptOnCreate")]);
    m_retain_except_on_create_isSet = !json[QString("RetainExceptOnCreate")].isNull() && m_retain_except_on_create_isValid;
}

QString OAICreateStackInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateStackInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_template_body_isSet) {
        obj.insert(QString("TemplateBody"), ::OpenAPI::toJsonValue(m_template_body));
    }
    if (m_template_url_isSet) {
        obj.insert(QString("TemplateURL"), ::OpenAPI::toJsonValue(m_template_url));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_disable_rollback_isSet) {
        obj.insert(QString("DisableRollback"), ::OpenAPI::toJsonValue(m_disable_rollback));
    }
    if (m_rollback_configuration.isSet()) {
        obj.insert(QString("RollbackConfiguration"), ::OpenAPI::toJsonValue(m_rollback_configuration));
    }
    if (m_timeout_in_minutes_isSet) {
        obj.insert(QString("TimeoutInMinutes"), ::OpenAPI::toJsonValue(m_timeout_in_minutes));
    }
    if (m_notification_arns.isSet()) {
        obj.insert(QString("NotificationARNs"), ::OpenAPI::toJsonValue(m_notification_arns));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_on_failure.isSet()) {
        obj.insert(QString("OnFailure"), ::OpenAPI::toJsonValue(m_on_failure));
    }
    if (m_stack_policy_body_isSet) {
        obj.insert(QString("StackPolicyBody"), ::OpenAPI::toJsonValue(m_stack_policy_body));
    }
    if (m_stack_policy_url_isSet) {
        obj.insert(QString("StackPolicyURL"), ::OpenAPI::toJsonValue(m_stack_policy_url));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_enable_termination_protection_isSet) {
        obj.insert(QString("EnableTerminationProtection"), ::OpenAPI::toJsonValue(m_enable_termination_protection));
    }
    if (m_retain_except_on_create_isSet) {
        obj.insert(QString("RetainExceptOnCreate"), ::OpenAPI::toJsonValue(m_retain_except_on_create));
    }
    return obj;
}

QString OAICreateStackInput::getStackName() const {
    return m_stack_name;
}
void OAICreateStackInput::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAICreateStackInput::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAICreateStackInput::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAICreateStackInput::getTemplateBody() const {
    return m_template_body;
}
void OAICreateStackInput::setTemplateBody(const QString &template_body) {
    m_template_body = template_body;
    m_template_body_isSet = true;
}

bool OAICreateStackInput::is_template_body_Set() const{
    return m_template_body_isSet;
}

bool OAICreateStackInput::is_template_body_Valid() const{
    return m_template_body_isValid;
}

QString OAICreateStackInput::getTemplateUrl() const {
    return m_template_url;
}
void OAICreateStackInput::setTemplateUrl(const QString &template_url) {
    m_template_url = template_url;
    m_template_url_isSet = true;
}

bool OAICreateStackInput::is_template_url_Set() const{
    return m_template_url_isSet;
}

bool OAICreateStackInput::is_template_url_Valid() const{
    return m_template_url_isValid;
}

QList OAICreateStackInput::getParameters() const {
    return m_parameters;
}
void OAICreateStackInput::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateStackInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateStackInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAICreateStackInput::getDisableRollback() const {
    return m_disable_rollback;
}
void OAICreateStackInput::setDisableRollback(const bool &disable_rollback) {
    m_disable_rollback = disable_rollback;
    m_disable_rollback_isSet = true;
}

bool OAICreateStackInput::is_disable_rollback_Set() const{
    return m_disable_rollback_isSet;
}

bool OAICreateStackInput::is_disable_rollback_Valid() const{
    return m_disable_rollback_isValid;
}

OAIDescribeChangeSetOutput_RollbackConfiguration OAICreateStackInput::getRollbackConfiguration() const {
    return m_rollback_configuration;
}
void OAICreateStackInput::setRollbackConfiguration(const OAIDescribeChangeSetOutput_RollbackConfiguration &rollback_configuration) {
    m_rollback_configuration = rollback_configuration;
    m_rollback_configuration_isSet = true;
}

bool OAICreateStackInput::is_rollback_configuration_Set() const{
    return m_rollback_configuration_isSet;
}

bool OAICreateStackInput::is_rollback_configuration_Valid() const{
    return m_rollback_configuration_isValid;
}

qint32 OAICreateStackInput::getTimeoutInMinutes() const {
    return m_timeout_in_minutes;
}
void OAICreateStackInput::setTimeoutInMinutes(const qint32 &timeout_in_minutes) {
    m_timeout_in_minutes = timeout_in_minutes;
    m_timeout_in_minutes_isSet = true;
}

bool OAICreateStackInput::is_timeout_in_minutes_Set() const{
    return m_timeout_in_minutes_isSet;
}

bool OAICreateStackInput::is_timeout_in_minutes_Valid() const{
    return m_timeout_in_minutes_isValid;
}

QList OAICreateStackInput::getNotificationArns() const {
    return m_notification_arns;
}
void OAICreateStackInput::setNotificationArns(const QList &notification_arns) {
    m_notification_arns = notification_arns;
    m_notification_arns_isSet = true;
}

bool OAICreateStackInput::is_notification_arns_Set() const{
    return m_notification_arns_isSet;
}

bool OAICreateStackInput::is_notification_arns_Valid() const{
    return m_notification_arns_isValid;
}

QList OAICreateStackInput::getCapabilities() const {
    return m_capabilities;
}
void OAICreateStackInput::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAICreateStackInput::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAICreateStackInput::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList OAICreateStackInput::getResourceTypes() const {
    return m_resource_types;
}
void OAICreateStackInput::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAICreateStackInput::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAICreateStackInput::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QString OAICreateStackInput::getRoleArn() const {
    return m_role_arn;
}
void OAICreateStackInput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateStackInput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateStackInput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIOnFailure OAICreateStackInput::getOnFailure() const {
    return m_on_failure;
}
void OAICreateStackInput::setOnFailure(const OAIOnFailure &on_failure) {
    m_on_failure = on_failure;
    m_on_failure_isSet = true;
}

bool OAICreateStackInput::is_on_failure_Set() const{
    return m_on_failure_isSet;
}

bool OAICreateStackInput::is_on_failure_Valid() const{
    return m_on_failure_isValid;
}

QString OAICreateStackInput::getStackPolicyBody() const {
    return m_stack_policy_body;
}
void OAICreateStackInput::setStackPolicyBody(const QString &stack_policy_body) {
    m_stack_policy_body = stack_policy_body;
    m_stack_policy_body_isSet = true;
}

bool OAICreateStackInput::is_stack_policy_body_Set() const{
    return m_stack_policy_body_isSet;
}

bool OAICreateStackInput::is_stack_policy_body_Valid() const{
    return m_stack_policy_body_isValid;
}

QString OAICreateStackInput::getStackPolicyUrl() const {
    return m_stack_policy_url;
}
void OAICreateStackInput::setStackPolicyUrl(const QString &stack_policy_url) {
    m_stack_policy_url = stack_policy_url;
    m_stack_policy_url_isSet = true;
}

bool OAICreateStackInput::is_stack_policy_url_Set() const{
    return m_stack_policy_url_isSet;
}

bool OAICreateStackInput::is_stack_policy_url_Valid() const{
    return m_stack_policy_url_isValid;
}

QList OAICreateStackInput::getTags() const {
    return m_tags;
}
void OAICreateStackInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateStackInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateStackInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateStackInput::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateStackInput::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateStackInput::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateStackInput::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAICreateStackInput::getEnableTerminationProtection() const {
    return m_enable_termination_protection;
}
void OAICreateStackInput::setEnableTerminationProtection(const bool &enable_termination_protection) {
    m_enable_termination_protection = enable_termination_protection;
    m_enable_termination_protection_isSet = true;
}

bool OAICreateStackInput::is_enable_termination_protection_Set() const{
    return m_enable_termination_protection_isSet;
}

bool OAICreateStackInput::is_enable_termination_protection_Valid() const{
    return m_enable_termination_protection_isValid;
}

bool OAICreateStackInput::getRetainExceptOnCreate() const {
    return m_retain_except_on_create;
}
void OAICreateStackInput::setRetainExceptOnCreate(const bool &retain_except_on_create) {
    m_retain_except_on_create = retain_except_on_create;
    m_retain_except_on_create_isSet = true;
}

bool OAICreateStackInput::is_retain_except_on_create_Set() const{
    return m_retain_except_on_create_isSet;
}

bool OAICreateStackInput::is_retain_except_on_create_Valid() const{
    return m_retain_except_on_create_isValid;
}

bool OAICreateStackInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_rollback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_policy_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_policy_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_termination_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_except_on_create_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateStackInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_name_isValid && true;
}

} // namespace OpenAPI
