/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypeVersionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypeVersionSummary::OAITypeVersionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypeVersionSummary::OAITypeVersionSummary() {
    this->initializeModel();
}

OAITypeVersionSummary::~OAITypeVersionSummary() {}

void OAITypeVersionSummary::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_is_default_version_isSet = false;
    m_is_default_version_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_public_version_number_isSet = false;
    m_public_version_number_isValid = false;
}

void OAITypeVersionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypeVersionSummary::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;

    m_is_default_version_isValid = ::OpenAPI::fromJsonValue(m_is_default_version, json[QString("IsDefaultVersion")]);
    m_is_default_version_isSet = !json[QString("IsDefaultVersion")].isNull() && m_is_default_version_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("TimeCreated")]);
    m_time_created_isSet = !json[QString("TimeCreated")].isNull() && m_time_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_public_version_number_isValid = ::OpenAPI::fromJsonValue(m_public_version_number, json[QString("PublicVersionNumber")]);
    m_public_version_number_isSet = !json[QString("PublicVersionNumber")].isNull() && m_public_version_number_isValid;
}

QString OAITypeVersionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypeVersionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_is_default_version_isSet) {
        obj.insert(QString("IsDefaultVersion"), ::OpenAPI::toJsonValue(m_is_default_version));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("TimeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_public_version_number_isSet) {
        obj.insert(QString("PublicVersionNumber"), ::OpenAPI::toJsonValue(m_public_version_number));
    }
    return obj;
}

OAIRegistryType OAITypeVersionSummary::getType() const {
    return m_type;
}
void OAITypeVersionSummary::setType(const OAIRegistryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITypeVersionSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAITypeVersionSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITypeVersionSummary::getTypeName() const {
    return m_type_name;
}
void OAITypeVersionSummary::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAITypeVersionSummary::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAITypeVersionSummary::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAITypeVersionSummary::getVersionId() const {
    return m_version_id;
}
void OAITypeVersionSummary::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAITypeVersionSummary::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAITypeVersionSummary::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAITypeVersionSummary::getIsDefaultVersion() const {
    return m_is_default_version;
}
void OAITypeVersionSummary::setIsDefaultVersion(const bool &is_default_version) {
    m_is_default_version = is_default_version;
    m_is_default_version_isSet = true;
}

bool OAITypeVersionSummary::is_is_default_version_Set() const{
    return m_is_default_version_isSet;
}

bool OAITypeVersionSummary::is_is_default_version_Valid() const{
    return m_is_default_version_isValid;
}

QString OAITypeVersionSummary::getArn() const {
    return m_arn;
}
void OAITypeVersionSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAITypeVersionSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAITypeVersionSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAITypeVersionSummary::getTimeCreated() const {
    return m_time_created;
}
void OAITypeVersionSummary::setTimeCreated(const QDateTime &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAITypeVersionSummary::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAITypeVersionSummary::is_time_created_Valid() const{
    return m_time_created_isValid;
}

QString OAITypeVersionSummary::getDescription() const {
    return m_description;
}
void OAITypeVersionSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITypeVersionSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAITypeVersionSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITypeVersionSummary::getPublicVersionNumber() const {
    return m_public_version_number;
}
void OAITypeVersionSummary::setPublicVersionNumber(const QString &public_version_number) {
    m_public_version_number = public_version_number;
    m_public_version_number_isSet = true;
}

bool OAITypeVersionSummary::is_public_version_number_Set() const{
    return m_public_version_number_isSet;
}

bool OAITypeVersionSummary::is_public_version_number_Valid() const{
    return m_public_version_number_isValid;
}

bool OAITypeVersionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypeVersionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
