/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStack_DriftInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStack_DriftInformation::OAIStack_DriftInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStack_DriftInformation::OAIStack_DriftInformation() {
    this->initializeModel();
}

OAIStack_DriftInformation::~OAIStack_DriftInformation() {}

void OAIStack_DriftInformation::initializeModel() {

    m_stack_drift_status_isSet = false;
    m_stack_drift_status_isValid = false;

    m_last_check_timestamp_isSet = false;
    m_last_check_timestamp_isValid = false;
}

void OAIStack_DriftInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStack_DriftInformation::fromJsonObject(QJsonObject json) {

    m_stack_drift_status_isValid = ::OpenAPI::fromJsonValue(m_stack_drift_status, json[QString("StackDriftStatus")]);
    m_stack_drift_status_isSet = !json[QString("StackDriftStatus")].isNull() && m_stack_drift_status_isValid;

    m_last_check_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_check_timestamp, json[QString("LastCheckTimestamp")]);
    m_last_check_timestamp_isSet = !json[QString("LastCheckTimestamp")].isNull() && m_last_check_timestamp_isValid;
}

QString OAIStack_DriftInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStack_DriftInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_drift_status.isSet()) {
        obj.insert(QString("StackDriftStatus"), ::OpenAPI::toJsonValue(m_stack_drift_status));
    }
    if (m_last_check_timestamp_isSet) {
        obj.insert(QString("LastCheckTimestamp"), ::OpenAPI::toJsonValue(m_last_check_timestamp));
    }
    return obj;
}

OAIStackDriftStatus OAIStack_DriftInformation::getStackDriftStatus() const {
    return m_stack_drift_status;
}
void OAIStack_DriftInformation::setStackDriftStatus(const OAIStackDriftStatus &stack_drift_status) {
    m_stack_drift_status = stack_drift_status;
    m_stack_drift_status_isSet = true;
}

bool OAIStack_DriftInformation::is_stack_drift_status_Set() const{
    return m_stack_drift_status_isSet;
}

bool OAIStack_DriftInformation::is_stack_drift_status_Valid() const{
    return m_stack_drift_status_isValid;
}

QDateTime OAIStack_DriftInformation::getLastCheckTimestamp() const {
    return m_last_check_timestamp;
}
void OAIStack_DriftInformation::setLastCheckTimestamp(const QDateTime &last_check_timestamp) {
    m_last_check_timestamp = last_check_timestamp;
    m_last_check_timestamp_isSet = true;
}

bool OAIStack_DriftInformation::is_last_check_timestamp_Set() const{
    return m_last_check_timestamp_isSet;
}

bool OAIStack_DriftInformation::is_last_check_timestamp_Valid() const{
    return m_last_check_timestamp_isValid;
}

bool OAIStack_DriftInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_drift_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_check_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStack_DriftInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_drift_status_isValid && true;
}

} // namespace OpenAPI
