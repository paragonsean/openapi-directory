/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChange::OAIChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChange::OAIChange() {
    this->initializeModel();
}

OAIChange::~OAIChange() {}

void OAIChange::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_hook_invocation_count_isSet = false;
    m_hook_invocation_count_isValid = false;

    m_resource_change_isSet = false;
    m_resource_change_isValid = false;
}

void OAIChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChange::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_hook_invocation_count_isValid = ::OpenAPI::fromJsonValue(m_hook_invocation_count, json[QString("HookInvocationCount")]);
    m_hook_invocation_count_isSet = !json[QString("HookInvocationCount")].isNull() && m_hook_invocation_count_isValid;

    m_resource_change_isValid = ::OpenAPI::fromJsonValue(m_resource_change, json[QString("ResourceChange")]);
    m_resource_change_isSet = !json[QString("ResourceChange")].isNull() && m_resource_change_isValid;
}

QString OAIChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChange::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_hook_invocation_count_isSet) {
        obj.insert(QString("HookInvocationCount"), ::OpenAPI::toJsonValue(m_hook_invocation_count));
    }
    if (m_resource_change.isSet()) {
        obj.insert(QString("ResourceChange"), ::OpenAPI::toJsonValue(m_resource_change));
    }
    return obj;
}

OAIChangeType OAIChange::getType() const {
    return m_type;
}
void OAIChange::setType(const OAIChangeType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChange::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChange::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIChange::getHookInvocationCount() const {
    return m_hook_invocation_count;
}
void OAIChange::setHookInvocationCount(const qint32 &hook_invocation_count) {
    m_hook_invocation_count = hook_invocation_count;
    m_hook_invocation_count_isSet = true;
}

bool OAIChange::is_hook_invocation_count_Set() const{
    return m_hook_invocation_count_isSet;
}

bool OAIChange::is_hook_invocation_count_Valid() const{
    return m_hook_invocation_count_isValid;
}

OAIChange_ResourceChange OAIChange::getResourceChange() const {
    return m_resource_change;
}
void OAIChange::setResourceChange(const OAIChange_ResourceChange &resource_change) {
    m_resource_change = resource_change;
    m_resource_change_isSet = true;
}

bool OAIChange::is_resource_change_Set() const{
    return m_resource_change_isSet;
}

bool OAIChange::is_resource_change_Valid() const{
    return m_resource_change_isValid;
}

bool OAIChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hook_invocation_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_change.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
