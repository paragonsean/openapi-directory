/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeSetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeSetSummary::OAIChangeSetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeSetSummary::OAIChangeSetSummary() {
    this->initializeModel();
}

OAIChangeSetSummary::~OAIChangeSetSummary() {}

void OAIChangeSetSummary::initializeModel() {

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_change_set_id_isSet = false;
    m_change_set_id_isValid = false;

    m_change_set_name_isSet = false;
    m_change_set_name_isValid = false;

    m_execution_status_isSet = false;
    m_execution_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_include_nested_stacks_isSet = false;
    m_include_nested_stacks_isValid = false;

    m_parent_change_set_id_isSet = false;
    m_parent_change_set_id_isValid = false;

    m_root_change_set_id_isSet = false;
    m_root_change_set_id_isValid = false;
}

void OAIChangeSetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeSetSummary::fromJsonObject(QJsonObject json) {

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_change_set_id, json[QString("ChangeSetId")]);
    m_change_set_id_isSet = !json[QString("ChangeSetId")].isNull() && m_change_set_id_isValid;

    m_change_set_name_isValid = ::OpenAPI::fromJsonValue(m_change_set_name, json[QString("ChangeSetName")]);
    m_change_set_name_isSet = !json[QString("ChangeSetName")].isNull() && m_change_set_name_isValid;

    m_execution_status_isValid = ::OpenAPI::fromJsonValue(m_execution_status, json[QString("ExecutionStatus")]);
    m_execution_status_isSet = !json[QString("ExecutionStatus")].isNull() && m_execution_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_include_nested_stacks_isValid = ::OpenAPI::fromJsonValue(m_include_nested_stacks, json[QString("IncludeNestedStacks")]);
    m_include_nested_stacks_isSet = !json[QString("IncludeNestedStacks")].isNull() && m_include_nested_stacks_isValid;

    m_parent_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_parent_change_set_id, json[QString("ParentChangeSetId")]);
    m_parent_change_set_id_isSet = !json[QString("ParentChangeSetId")].isNull() && m_parent_change_set_id_isValid;

    m_root_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_root_change_set_id, json[QString("RootChangeSetId")]);
    m_root_change_set_id_isSet = !json[QString("RootChangeSetId")].isNull() && m_root_change_set_id_isValid;
}

QString OAIChangeSetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeSetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_change_set_id_isSet) {
        obj.insert(QString("ChangeSetId"), ::OpenAPI::toJsonValue(m_change_set_id));
    }
    if (m_change_set_name_isSet) {
        obj.insert(QString("ChangeSetName"), ::OpenAPI::toJsonValue(m_change_set_name));
    }
    if (m_execution_status.isSet()) {
        obj.insert(QString("ExecutionStatus"), ::OpenAPI::toJsonValue(m_execution_status));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_include_nested_stacks_isSet) {
        obj.insert(QString("IncludeNestedStacks"), ::OpenAPI::toJsonValue(m_include_nested_stacks));
    }
    if (m_parent_change_set_id_isSet) {
        obj.insert(QString("ParentChangeSetId"), ::OpenAPI::toJsonValue(m_parent_change_set_id));
    }
    if (m_root_change_set_id_isSet) {
        obj.insert(QString("RootChangeSetId"), ::OpenAPI::toJsonValue(m_root_change_set_id));
    }
    return obj;
}

QString OAIChangeSetSummary::getStackId() const {
    return m_stack_id;
}
void OAIChangeSetSummary::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIChangeSetSummary::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIChangeSetSummary::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIChangeSetSummary::getStackName() const {
    return m_stack_name;
}
void OAIChangeSetSummary::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIChangeSetSummary::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIChangeSetSummary::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIChangeSetSummary::getChangeSetId() const {
    return m_change_set_id;
}
void OAIChangeSetSummary::setChangeSetId(const QString &change_set_id) {
    m_change_set_id = change_set_id;
    m_change_set_id_isSet = true;
}

bool OAIChangeSetSummary::is_change_set_id_Set() const{
    return m_change_set_id_isSet;
}

bool OAIChangeSetSummary::is_change_set_id_Valid() const{
    return m_change_set_id_isValid;
}

QString OAIChangeSetSummary::getChangeSetName() const {
    return m_change_set_name;
}
void OAIChangeSetSummary::setChangeSetName(const QString &change_set_name) {
    m_change_set_name = change_set_name;
    m_change_set_name_isSet = true;
}

bool OAIChangeSetSummary::is_change_set_name_Set() const{
    return m_change_set_name_isSet;
}

bool OAIChangeSetSummary::is_change_set_name_Valid() const{
    return m_change_set_name_isValid;
}

OAIExecutionStatus OAIChangeSetSummary::getExecutionStatus() const {
    return m_execution_status;
}
void OAIChangeSetSummary::setExecutionStatus(const OAIExecutionStatus &execution_status) {
    m_execution_status = execution_status;
    m_execution_status_isSet = true;
}

bool OAIChangeSetSummary::is_execution_status_Set() const{
    return m_execution_status_isSet;
}

bool OAIChangeSetSummary::is_execution_status_Valid() const{
    return m_execution_status_isValid;
}

OAIChangeSetStatus OAIChangeSetSummary::getStatus() const {
    return m_status;
}
void OAIChangeSetSummary::setStatus(const OAIChangeSetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChangeSetSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChangeSetSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIChangeSetSummary::getStatusReason() const {
    return m_status_reason;
}
void OAIChangeSetSummary::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIChangeSetSummary::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIChangeSetSummary::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QDateTime OAIChangeSetSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIChangeSetSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIChangeSetSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIChangeSetSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIChangeSetSummary::getDescription() const {
    return m_description;
}
void OAIChangeSetSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIChangeSetSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIChangeSetSummary::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIChangeSetSummary::getIncludeNestedStacks() const {
    return m_include_nested_stacks;
}
void OAIChangeSetSummary::setIncludeNestedStacks(const bool &include_nested_stacks) {
    m_include_nested_stacks = include_nested_stacks;
    m_include_nested_stacks_isSet = true;
}

bool OAIChangeSetSummary::is_include_nested_stacks_Set() const{
    return m_include_nested_stacks_isSet;
}

bool OAIChangeSetSummary::is_include_nested_stacks_Valid() const{
    return m_include_nested_stacks_isValid;
}

QString OAIChangeSetSummary::getParentChangeSetId() const {
    return m_parent_change_set_id;
}
void OAIChangeSetSummary::setParentChangeSetId(const QString &parent_change_set_id) {
    m_parent_change_set_id = parent_change_set_id;
    m_parent_change_set_id_isSet = true;
}

bool OAIChangeSetSummary::is_parent_change_set_id_Set() const{
    return m_parent_change_set_id_isSet;
}

bool OAIChangeSetSummary::is_parent_change_set_id_Valid() const{
    return m_parent_change_set_id_isValid;
}

QString OAIChangeSetSummary::getRootChangeSetId() const {
    return m_root_change_set_id;
}
void OAIChangeSetSummary::setRootChangeSetId(const QString &root_change_set_id) {
    m_root_change_set_id = root_change_set_id;
    m_root_change_set_id_isSet = true;
}

bool OAIChangeSetSummary::is_root_change_set_id_Set() const{
    return m_root_change_set_id_isSet;
}

bool OAIChangeSetSummary::is_root_change_set_id_Valid() const{
    return m_root_change_set_id_isValid;
}

bool OAIChangeSetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_nested_stacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeSetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
