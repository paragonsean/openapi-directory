/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTypeVersionsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTypeVersionsInput::OAIListTypeVersionsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTypeVersionsInput::OAIListTypeVersionsInput() {
    this->initializeModel();
}

OAIListTypeVersionsInput::~OAIListTypeVersionsInput() {}

void OAIListTypeVersionsInput::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_deprecated_status_isSet = false;
    m_deprecated_status_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;
}

void OAIListTypeVersionsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTypeVersionsInput::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_deprecated_status_isValid = ::OpenAPI::fromJsonValue(m_deprecated_status, json[QString("DeprecatedStatus")]);
    m_deprecated_status_isSet = !json[QString("DeprecatedStatus")].isNull() && m_deprecated_status_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("PublisherId")]);
    m_publisher_id_isSet = !json[QString("PublisherId")].isNull() && m_publisher_id_isValid;
}

QString OAIListTypeVersionsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTypeVersionsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_deprecated_status.isSet()) {
        obj.insert(QString("DeprecatedStatus"), ::OpenAPI::toJsonValue(m_deprecated_status));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("PublisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    return obj;
}

OAIRegistryType OAIListTypeVersionsInput::getType() const {
    return m_type;
}
void OAIListTypeVersionsInput::setType(const OAIRegistryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListTypeVersionsInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListTypeVersionsInput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIListTypeVersionsInput::getTypeName() const {
    return m_type_name;
}
void OAIListTypeVersionsInput::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIListTypeVersionsInput::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIListTypeVersionsInput::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIListTypeVersionsInput::getArn() const {
    return m_arn;
}
void OAIListTypeVersionsInput::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIListTypeVersionsInput::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIListTypeVersionsInput::is_arn_Valid() const{
    return m_arn_isValid;
}

qint32 OAIListTypeVersionsInput::getMaxResults() const {
    return m_max_results;
}
void OAIListTypeVersionsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListTypeVersionsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListTypeVersionsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListTypeVersionsInput::getNextToken() const {
    return m_next_token;
}
void OAIListTypeVersionsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTypeVersionsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTypeVersionsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIDeprecatedStatus OAIListTypeVersionsInput::getDeprecatedStatus() const {
    return m_deprecated_status;
}
void OAIListTypeVersionsInput::setDeprecatedStatus(const OAIDeprecatedStatus &deprecated_status) {
    m_deprecated_status = deprecated_status;
    m_deprecated_status_isSet = true;
}

bool OAIListTypeVersionsInput::is_deprecated_status_Set() const{
    return m_deprecated_status_isSet;
}

bool OAIListTypeVersionsInput::is_deprecated_status_Valid() const{
    return m_deprecated_status_isValid;
}

QString OAIListTypeVersionsInput::getPublisherId() const {
    return m_publisher_id;
}
void OAIListTypeVersionsInput::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIListTypeVersionsInput::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIListTypeVersionsInput::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

bool OAIListTypeVersionsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTypeVersionsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
