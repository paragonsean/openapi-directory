/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChangeSetSummary.h
 *
 * The &lt;code&gt;ChangeSetSummary&lt;/code&gt; structure describes a change set, its status, and the stack with which it&#39;s associated.
 */

#ifndef OAIChangeSetSummary_H
#define OAIChangeSetSummary_H

#include <QJsonObject>

#include "OAIChangeSetStatus.h"
#include "OAIExecutionStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIChangeSetSummary : public OAIObject {
public:
    OAIChangeSetSummary();
    OAIChangeSetSummary(QString json);
    ~OAIChangeSetSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getStackId() const;
    void setStackId(const QString &stack_id);
    bool is_stack_id_Set() const;
    bool is_stack_id_Valid() const;

    QString getStackName() const;
    void setStackName(const QString &stack_name);
    bool is_stack_name_Set() const;
    bool is_stack_name_Valid() const;

    QString getChangeSetId() const;
    void setChangeSetId(const QString &change_set_id);
    bool is_change_set_id_Set() const;
    bool is_change_set_id_Valid() const;

    QString getChangeSetName() const;
    void setChangeSetName(const QString &change_set_name);
    bool is_change_set_name_Set() const;
    bool is_change_set_name_Valid() const;

    OAIExecutionStatus getExecutionStatus() const;
    void setExecutionStatus(const OAIExecutionStatus &execution_status);
    bool is_execution_status_Set() const;
    bool is_execution_status_Valid() const;

    OAIChangeSetStatus getStatus() const;
    void setStatus(const OAIChangeSetStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool getIncludeNestedStacks() const;
    void setIncludeNestedStacks(const bool &include_nested_stacks);
    bool is_include_nested_stacks_Set() const;
    bool is_include_nested_stacks_Valid() const;

    QString getParentChangeSetId() const;
    void setParentChangeSetId(const QString &parent_change_set_id);
    bool is_parent_change_set_id_Set() const;
    bool is_parent_change_set_id_Valid() const;

    QString getRootChangeSetId() const;
    void setRootChangeSetId(const QString &root_change_set_id);
    bool is_root_change_set_id_Set() const;
    bool is_root_change_set_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_stack_id;
    bool m_stack_id_isSet;
    bool m_stack_id_isValid;

    QString m_stack_name;
    bool m_stack_name_isSet;
    bool m_stack_name_isValid;

    QString m_change_set_id;
    bool m_change_set_id_isSet;
    bool m_change_set_id_isValid;

    QString m_change_set_name;
    bool m_change_set_name_isSet;
    bool m_change_set_name_isValid;

    OAIExecutionStatus m_execution_status;
    bool m_execution_status_isSet;
    bool m_execution_status_isValid;

    OAIChangeSetStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_include_nested_stacks;
    bool m_include_nested_stacks_isSet;
    bool m_include_nested_stacks_isValid;

    QString m_parent_change_set_id;
    bool m_parent_change_set_id_isSet;
    bool m_parent_change_set_id_isValid;

    QString m_root_change_set_id;
    bool m_root_change_set_id_isSet;
    bool m_root_change_set_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChangeSetSummary)

#endif // OAIChangeSetSummary_H
