/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackResourceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackResourceSummary::OAIStackResourceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackResourceSummary::OAIStackResourceSummary() {
    this->initializeModel();
}

OAIStackResourceSummary::~OAIStackResourceSummary() {}

void OAIStackResourceSummary::initializeModel() {

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_resource_status_isSet = false;
    m_resource_status_isValid = false;

    m_resource_status_reason_isSet = false;
    m_resource_status_reason_isValid = false;

    m_drift_information_isSet = false;
    m_drift_information_isValid = false;

    m_module_info_isSet = false;
    m_module_info_isValid = false;
}

void OAIStackResourceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackResourceSummary::fromJsonObject(QJsonObject json) {

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("LogicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("LogicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("PhysicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("PhysicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_resource_status_isValid = ::OpenAPI::fromJsonValue(m_resource_status, json[QString("ResourceStatus")]);
    m_resource_status_isSet = !json[QString("ResourceStatus")].isNull() && m_resource_status_isValid;

    m_resource_status_reason_isValid = ::OpenAPI::fromJsonValue(m_resource_status_reason, json[QString("ResourceStatusReason")]);
    m_resource_status_reason_isSet = !json[QString("ResourceStatusReason")].isNull() && m_resource_status_reason_isValid;

    m_drift_information_isValid = ::OpenAPI::fromJsonValue(m_drift_information, json[QString("DriftInformation")]);
    m_drift_information_isSet = !json[QString("DriftInformation")].isNull() && m_drift_information_isValid;

    m_module_info_isValid = ::OpenAPI::fromJsonValue(m_module_info, json[QString("ModuleInfo")]);
    m_module_info_isSet = !json[QString("ModuleInfo")].isNull() && m_module_info_isValid;
}

QString OAIStackResourceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackResourceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_logical_resource_id_isSet) {
        obj.insert(QString("LogicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id_isSet) {
        obj.insert(QString("PhysicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_resource_status.isSet()) {
        obj.insert(QString("ResourceStatus"), ::OpenAPI::toJsonValue(m_resource_status));
    }
    if (m_resource_status_reason_isSet) {
        obj.insert(QString("ResourceStatusReason"), ::OpenAPI::toJsonValue(m_resource_status_reason));
    }
    if (m_drift_information.isSet()) {
        obj.insert(QString("DriftInformation"), ::OpenAPI::toJsonValue(m_drift_information));
    }
    if (m_module_info.isSet()) {
        obj.insert(QString("ModuleInfo"), ::OpenAPI::toJsonValue(m_module_info));
    }
    return obj;
}

QString OAIStackResourceSummary::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIStackResourceSummary::setLogicalResourceId(const QString &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIStackResourceSummary::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIStackResourceSummary::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIStackResourceSummary::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIStackResourceSummary::setPhysicalResourceId(const QString &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIStackResourceSummary::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIStackResourceSummary::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QString OAIStackResourceSummary::getResourceType() const {
    return m_resource_type;
}
void OAIStackResourceSummary::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStackResourceSummary::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStackResourceSummary::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QDateTime OAIStackResourceSummary::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIStackResourceSummary::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIStackResourceSummary::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIStackResourceSummary::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

OAIResourceStatus OAIStackResourceSummary::getResourceStatus() const {
    return m_resource_status;
}
void OAIStackResourceSummary::setResourceStatus(const OAIResourceStatus &resource_status) {
    m_resource_status = resource_status;
    m_resource_status_isSet = true;
}

bool OAIStackResourceSummary::is_resource_status_Set() const{
    return m_resource_status_isSet;
}

bool OAIStackResourceSummary::is_resource_status_Valid() const{
    return m_resource_status_isValid;
}

QString OAIStackResourceSummary::getResourceStatusReason() const {
    return m_resource_status_reason;
}
void OAIStackResourceSummary::setResourceStatusReason(const QString &resource_status_reason) {
    m_resource_status_reason = resource_status_reason;
    m_resource_status_reason_isSet = true;
}

bool OAIStackResourceSummary::is_resource_status_reason_Set() const{
    return m_resource_status_reason_isSet;
}

bool OAIStackResourceSummary::is_resource_status_reason_Valid() const{
    return m_resource_status_reason_isValid;
}

OAIStackResourceSummary_DriftInformation OAIStackResourceSummary::getDriftInformation() const {
    return m_drift_information;
}
void OAIStackResourceSummary::setDriftInformation(const OAIStackResourceSummary_DriftInformation &drift_information) {
    m_drift_information = drift_information;
    m_drift_information_isSet = true;
}

bool OAIStackResourceSummary::is_drift_information_Set() const{
    return m_drift_information_isSet;
}

bool OAIStackResourceSummary::is_drift_information_Valid() const{
    return m_drift_information_isValid;
}

OAIResourceChange_ModuleInfo OAIStackResourceSummary::getModuleInfo() const {
    return m_module_info;
}
void OAIStackResourceSummary::setModuleInfo(const OAIResourceChange_ModuleInfo &module_info) {
    m_module_info = module_info;
    m_module_info_isSet = true;
}

bool OAIStackResourceSummary::is_module_info_Set() const{
    return m_module_info_isSet;
}

bool OAIStackResourceSummary::is_module_info_Valid() const{
    return m_module_info_isValid;
}

bool OAIStackResourceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackResourceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_logical_resource_id_isValid && m_resource_type_isValid && m_last_updated_timestamp_isValid && m_resource_status_isValid && true;
}

} // namespace OpenAPI
