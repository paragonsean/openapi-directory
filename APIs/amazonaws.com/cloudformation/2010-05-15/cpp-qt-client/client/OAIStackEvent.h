/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStackEvent.h
 *
 * The StackEvent data type.
 */

#ifndef OAIStackEvent_H
#define OAIStackEvent_H

#include <QJsonObject>

#include "OAIHookFailureMode.h"
#include "OAIHookInvocationPoint.h"
#include "OAIHookStatus.h"
#include "OAIResourceStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStackEvent : public OAIObject {
public:
    OAIStackEvent();
    OAIStackEvent(QString json);
    ~OAIStackEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getStackId() const;
    void setStackId(const QString &stack_id);
    bool is_stack_id_Set() const;
    bool is_stack_id_Valid() const;

    QString getEventId() const;
    void setEventId(const QString &event_id);
    bool is_event_id_Set() const;
    bool is_event_id_Valid() const;

    QString getStackName() const;
    void setStackName(const QString &stack_name);
    bool is_stack_name_Set() const;
    bool is_stack_name_Valid() const;

    QString getLogicalResourceId() const;
    void setLogicalResourceId(const QString &logical_resource_id);
    bool is_logical_resource_id_Set() const;
    bool is_logical_resource_id_Valid() const;

    QString getPhysicalResourceId() const;
    void setPhysicalResourceId(const QString &physical_resource_id);
    bool is_physical_resource_id_Set() const;
    bool is_physical_resource_id_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    OAIResourceStatus getResourceStatus() const;
    void setResourceStatus(const OAIResourceStatus &resource_status);
    bool is_resource_status_Set() const;
    bool is_resource_status_Valid() const;

    QString getResourceStatusReason() const;
    void setResourceStatusReason(const QString &resource_status_reason);
    bool is_resource_status_reason_Set() const;
    bool is_resource_status_reason_Valid() const;

    QString getResourceProperties() const;
    void setResourceProperties(const QString &resource_properties);
    bool is_resource_properties_Set() const;
    bool is_resource_properties_Valid() const;

    QString getClientRequestToken() const;
    void setClientRequestToken(const QString &client_request_token);
    bool is_client_request_token_Set() const;
    bool is_client_request_token_Valid() const;

    QString getHookType() const;
    void setHookType(const QString &hook_type);
    bool is_hook_type_Set() const;
    bool is_hook_type_Valid() const;

    OAIHookStatus getHookStatus() const;
    void setHookStatus(const OAIHookStatus &hook_status);
    bool is_hook_status_Set() const;
    bool is_hook_status_Valid() const;

    QString getHookStatusReason() const;
    void setHookStatusReason(const QString &hook_status_reason);
    bool is_hook_status_reason_Set() const;
    bool is_hook_status_reason_Valid() const;

    OAIHookInvocationPoint getHookInvocationPoint() const;
    void setHookInvocationPoint(const OAIHookInvocationPoint &hook_invocation_point);
    bool is_hook_invocation_point_Set() const;
    bool is_hook_invocation_point_Valid() const;

    OAIHookFailureMode getHookFailureMode() const;
    void setHookFailureMode(const OAIHookFailureMode &hook_failure_mode);
    bool is_hook_failure_mode_Set() const;
    bool is_hook_failure_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_stack_id;
    bool m_stack_id_isSet;
    bool m_stack_id_isValid;

    QString m_event_id;
    bool m_event_id_isSet;
    bool m_event_id_isValid;

    QString m_stack_name;
    bool m_stack_name_isSet;
    bool m_stack_name_isValid;

    QString m_logical_resource_id;
    bool m_logical_resource_id_isSet;
    bool m_logical_resource_id_isValid;

    QString m_physical_resource_id;
    bool m_physical_resource_id_isSet;
    bool m_physical_resource_id_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    OAIResourceStatus m_resource_status;
    bool m_resource_status_isSet;
    bool m_resource_status_isValid;

    QString m_resource_status_reason;
    bool m_resource_status_reason_isSet;
    bool m_resource_status_reason_isValid;

    QString m_resource_properties;
    bool m_resource_properties_isSet;
    bool m_resource_properties_isValid;

    QString m_client_request_token;
    bool m_client_request_token_isSet;
    bool m_client_request_token_isValid;

    QString m_hook_type;
    bool m_hook_type_isSet;
    bool m_hook_type_isValid;

    OAIHookStatus m_hook_status;
    bool m_hook_status_isSet;
    bool m_hook_status_isValid;

    QString m_hook_status_reason;
    bool m_hook_status_reason_isSet;
    bool m_hook_status_reason_isValid;

    OAIHookInvocationPoint m_hook_invocation_point;
    bool m_hook_invocation_point_isSet;
    bool m_hook_invocation_point_isValid;

    OAIHookFailureMode m_hook_failure_mode;
    bool m_hook_failure_mode_isSet;
    bool m_hook_failure_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStackEvent)

#endif // OAIStackEvent_H
