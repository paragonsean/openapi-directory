/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackInstanceResourceDriftsSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackInstanceResourceDriftsSummary::OAIStackInstanceResourceDriftsSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackInstanceResourceDriftsSummary::OAIStackInstanceResourceDriftsSummary() {
    this->initializeModel();
}

OAIStackInstanceResourceDriftsSummary::~OAIStackInstanceResourceDriftsSummary() {}

void OAIStackInstanceResourceDriftsSummary::initializeModel() {

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_physical_resource_id_context_isSet = false;
    m_physical_resource_id_context_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_property_differences_isSet = false;
    m_property_differences_isValid = false;

    m_stack_resource_drift_status_isSet = false;
    m_stack_resource_drift_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIStackInstanceResourceDriftsSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackInstanceResourceDriftsSummary::fromJsonObject(QJsonObject json) {

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("LogicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("LogicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("PhysicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("PhysicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_physical_resource_id_context_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id_context, json[QString("PhysicalResourceIdContext")]);
    m_physical_resource_id_context_isSet = !json[QString("PhysicalResourceIdContext")].isNull() && m_physical_resource_id_context_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_property_differences_isValid = ::OpenAPI::fromJsonValue(m_property_differences, json[QString("PropertyDifferences")]);
    m_property_differences_isSet = !json[QString("PropertyDifferences")].isNull() && m_property_differences_isValid;

    m_stack_resource_drift_status_isValid = ::OpenAPI::fromJsonValue(m_stack_resource_drift_status, json[QString("StackResourceDriftStatus")]);
    m_stack_resource_drift_status_isSet = !json[QString("StackResourceDriftStatus")].isNull() && m_stack_resource_drift_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIStackInstanceResourceDriftsSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackInstanceResourceDriftsSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_logical_resource_id_isSet) {
        obj.insert(QString("LogicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id_isSet) {
        obj.insert(QString("PhysicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_physical_resource_id_context.isSet()) {
        obj.insert(QString("PhysicalResourceIdContext"), ::OpenAPI::toJsonValue(m_physical_resource_id_context));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_property_differences.isSet()) {
        obj.insert(QString("PropertyDifferences"), ::OpenAPI::toJsonValue(m_property_differences));
    }
    if (m_stack_resource_drift_status.isSet()) {
        obj.insert(QString("StackResourceDriftStatus"), ::OpenAPI::toJsonValue(m_stack_resource_drift_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIStackInstanceResourceDriftsSummary::getStackId() const {
    return m_stack_id;
}
void OAIStackInstanceResourceDriftsSummary::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIStackInstanceResourceDriftsSummary::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIStackInstanceResourceDriftsSummary::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIStackInstanceResourceDriftsSummary::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIStackInstanceResourceDriftsSummary::setLogicalResourceId(const QString &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIStackInstanceResourceDriftsSummary::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIStackInstanceResourceDriftsSummary::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIStackInstanceResourceDriftsSummary::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIStackInstanceResourceDriftsSummary::setPhysicalResourceId(const QString &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIStackInstanceResourceDriftsSummary::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIStackInstanceResourceDriftsSummary::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QList OAIStackInstanceResourceDriftsSummary::getPhysicalResourceIdContext() const {
    return m_physical_resource_id_context;
}
void OAIStackInstanceResourceDriftsSummary::setPhysicalResourceIdContext(const QList &physical_resource_id_context) {
    m_physical_resource_id_context = physical_resource_id_context;
    m_physical_resource_id_context_isSet = true;
}

bool OAIStackInstanceResourceDriftsSummary::is_physical_resource_id_context_Set() const{
    return m_physical_resource_id_context_isSet;
}

bool OAIStackInstanceResourceDriftsSummary::is_physical_resource_id_context_Valid() const{
    return m_physical_resource_id_context_isValid;
}

QString OAIStackInstanceResourceDriftsSummary::getResourceType() const {
    return m_resource_type;
}
void OAIStackInstanceResourceDriftsSummary::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIStackInstanceResourceDriftsSummary::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIStackInstanceResourceDriftsSummary::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList OAIStackInstanceResourceDriftsSummary::getPropertyDifferences() const {
    return m_property_differences;
}
void OAIStackInstanceResourceDriftsSummary::setPropertyDifferences(const QList &property_differences) {
    m_property_differences = property_differences;
    m_property_differences_isSet = true;
}

bool OAIStackInstanceResourceDriftsSummary::is_property_differences_Set() const{
    return m_property_differences_isSet;
}

bool OAIStackInstanceResourceDriftsSummary::is_property_differences_Valid() const{
    return m_property_differences_isValid;
}

OAIStackResourceDriftStatus OAIStackInstanceResourceDriftsSummary::getStackResourceDriftStatus() const {
    return m_stack_resource_drift_status;
}
void OAIStackInstanceResourceDriftsSummary::setStackResourceDriftStatus(const OAIStackResourceDriftStatus &stack_resource_drift_status) {
    m_stack_resource_drift_status = stack_resource_drift_status;
    m_stack_resource_drift_status_isSet = true;
}

bool OAIStackInstanceResourceDriftsSummary::is_stack_resource_drift_status_Set() const{
    return m_stack_resource_drift_status_isSet;
}

bool OAIStackInstanceResourceDriftsSummary::is_stack_resource_drift_status_Valid() const{
    return m_stack_resource_drift_status_isValid;
}

QDateTime OAIStackInstanceResourceDriftsSummary::getTimestamp() const {
    return m_timestamp;
}
void OAIStackInstanceResourceDriftsSummary::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIStackInstanceResourceDriftsSummary::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIStackInstanceResourceDriftsSummary::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIStackInstanceResourceDriftsSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_differences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_resource_drift_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackInstanceResourceDriftsSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_id_isValid && m_logical_resource_id_isValid && m_resource_type_isValid && m_stack_resource_drift_status_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
