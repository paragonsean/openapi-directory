/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordHandlerProgressInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordHandlerProgressInput::OAIRecordHandlerProgressInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordHandlerProgressInput::OAIRecordHandlerProgressInput() {
    this->initializeModel();
}

OAIRecordHandlerProgressInput::~OAIRecordHandlerProgressInput() {}

void OAIRecordHandlerProgressInput::initializeModel() {

    m_bearer_token_isSet = false;
    m_bearer_token_isValid = false;

    m_operation_status_isSet = false;
    m_operation_status_isValid = false;

    m_current_operation_status_isSet = false;
    m_current_operation_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_resource_model_isSet = false;
    m_resource_model_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAIRecordHandlerProgressInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordHandlerProgressInput::fromJsonObject(QJsonObject json) {

    m_bearer_token_isValid = ::OpenAPI::fromJsonValue(m_bearer_token, json[QString("BearerToken")]);
    m_bearer_token_isSet = !json[QString("BearerToken")].isNull() && m_bearer_token_isValid;

    m_operation_status_isValid = ::OpenAPI::fromJsonValue(m_operation_status, json[QString("OperationStatus")]);
    m_operation_status_isSet = !json[QString("OperationStatus")].isNull() && m_operation_status_isValid;

    m_current_operation_status_isValid = ::OpenAPI::fromJsonValue(m_current_operation_status, json[QString("CurrentOperationStatus")]);
    m_current_operation_status_isSet = !json[QString("CurrentOperationStatus")].isNull() && m_current_operation_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_resource_model_isValid = ::OpenAPI::fromJsonValue(m_resource_model, json[QString("ResourceModel")]);
    m_resource_model_isSet = !json[QString("ResourceModel")].isNull() && m_resource_model_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAIRecordHandlerProgressInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordHandlerProgressInput::asJsonObject() const {
    QJsonObject obj;
    if (m_bearer_token_isSet) {
        obj.insert(QString("BearerToken"), ::OpenAPI::toJsonValue(m_bearer_token));
    }
    if (m_operation_status.isSet()) {
        obj.insert(QString("OperationStatus"), ::OpenAPI::toJsonValue(m_operation_status));
    }
    if (m_current_operation_status.isSet()) {
        obj.insert(QString("CurrentOperationStatus"), ::OpenAPI::toJsonValue(m_current_operation_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_error_code.isSet()) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_resource_model_isSet) {
        obj.insert(QString("ResourceModel"), ::OpenAPI::toJsonValue(m_resource_model));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

QString OAIRecordHandlerProgressInput::getBearerToken() const {
    return m_bearer_token;
}
void OAIRecordHandlerProgressInput::setBearerToken(const QString &bearer_token) {
    m_bearer_token = bearer_token;
    m_bearer_token_isSet = true;
}

bool OAIRecordHandlerProgressInput::is_bearer_token_Set() const{
    return m_bearer_token_isSet;
}

bool OAIRecordHandlerProgressInput::is_bearer_token_Valid() const{
    return m_bearer_token_isValid;
}

OAIOperationStatus OAIRecordHandlerProgressInput::getOperationStatus() const {
    return m_operation_status;
}
void OAIRecordHandlerProgressInput::setOperationStatus(const OAIOperationStatus &operation_status) {
    m_operation_status = operation_status;
    m_operation_status_isSet = true;
}

bool OAIRecordHandlerProgressInput::is_operation_status_Set() const{
    return m_operation_status_isSet;
}

bool OAIRecordHandlerProgressInput::is_operation_status_Valid() const{
    return m_operation_status_isValid;
}

OAIOperationStatus OAIRecordHandlerProgressInput::getCurrentOperationStatus() const {
    return m_current_operation_status;
}
void OAIRecordHandlerProgressInput::setCurrentOperationStatus(const OAIOperationStatus &current_operation_status) {
    m_current_operation_status = current_operation_status;
    m_current_operation_status_isSet = true;
}

bool OAIRecordHandlerProgressInput::is_current_operation_status_Set() const{
    return m_current_operation_status_isSet;
}

bool OAIRecordHandlerProgressInput::is_current_operation_status_Valid() const{
    return m_current_operation_status_isValid;
}

QString OAIRecordHandlerProgressInput::getStatusMessage() const {
    return m_status_message;
}
void OAIRecordHandlerProgressInput::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIRecordHandlerProgressInput::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIRecordHandlerProgressInput::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIHandlerErrorCode OAIRecordHandlerProgressInput::getErrorCode() const {
    return m_error_code;
}
void OAIRecordHandlerProgressInput::setErrorCode(const OAIHandlerErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIRecordHandlerProgressInput::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIRecordHandlerProgressInput::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIRecordHandlerProgressInput::getResourceModel() const {
    return m_resource_model;
}
void OAIRecordHandlerProgressInput::setResourceModel(const QString &resource_model) {
    m_resource_model = resource_model;
    m_resource_model_isSet = true;
}

bool OAIRecordHandlerProgressInput::is_resource_model_Set() const{
    return m_resource_model_isSet;
}

bool OAIRecordHandlerProgressInput::is_resource_model_Valid() const{
    return m_resource_model_isValid;
}

QString OAIRecordHandlerProgressInput::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIRecordHandlerProgressInput::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIRecordHandlerProgressInput::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIRecordHandlerProgressInput::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAIRecordHandlerProgressInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bearer_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_operation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordHandlerProgressInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bearer_token_isValid && m_operation_status_isValid && true;
}

} // namespace OpenAPI
