/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackSetOperationResultSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackSetOperationResultSummary::OAIStackSetOperationResultSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackSetOperationResultSummary::OAIStackSetOperationResultSummary() {
    this->initializeModel();
}

OAIStackSetOperationResultSummary::~OAIStackSetOperationResultSummary() {}

void OAIStackSetOperationResultSummary::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_account_gate_result_isSet = false;
    m_account_gate_result_isValid = false;

    m_organizational_unit_id_isSet = false;
    m_organizational_unit_id_isValid = false;
}

void OAIStackSetOperationResultSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackSetOperationResultSummary::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("Account")]);
    m_account_isSet = !json[QString("Account")].isNull() && m_account_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_account_gate_result_isValid = ::OpenAPI::fromJsonValue(m_account_gate_result, json[QString("AccountGateResult")]);
    m_account_gate_result_isSet = !json[QString("AccountGateResult")].isNull() && m_account_gate_result_isValid;

    m_organizational_unit_id_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_id, json[QString("OrganizationalUnitId")]);
    m_organizational_unit_id_isSet = !json[QString("OrganizationalUnitId")].isNull() && m_organizational_unit_id_isValid;
}

QString OAIStackSetOperationResultSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackSetOperationResultSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("Account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_account_gate_result.isSet()) {
        obj.insert(QString("AccountGateResult"), ::OpenAPI::toJsonValue(m_account_gate_result));
    }
    if (m_organizational_unit_id_isSet) {
        obj.insert(QString("OrganizationalUnitId"), ::OpenAPI::toJsonValue(m_organizational_unit_id));
    }
    return obj;
}

QString OAIStackSetOperationResultSummary::getAccount() const {
    return m_account;
}
void OAIStackSetOperationResultSummary::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIStackSetOperationResultSummary::is_account_Set() const{
    return m_account_isSet;
}

bool OAIStackSetOperationResultSummary::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIStackSetOperationResultSummary::getRegion() const {
    return m_region;
}
void OAIStackSetOperationResultSummary::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIStackSetOperationResultSummary::is_region_Set() const{
    return m_region_isSet;
}

bool OAIStackSetOperationResultSummary::is_region_Valid() const{
    return m_region_isValid;
}

OAIStackSetOperationResultStatus OAIStackSetOperationResultSummary::getStatus() const {
    return m_status;
}
void OAIStackSetOperationResultSummary::setStatus(const OAIStackSetOperationResultStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStackSetOperationResultSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStackSetOperationResultSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStackSetOperationResultSummary::getStatusReason() const {
    return m_status_reason;
}
void OAIStackSetOperationResultSummary::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIStackSetOperationResultSummary::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIStackSetOperationResultSummary::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

OAIStackSetOperationResultSummary_AccountGateResult OAIStackSetOperationResultSummary::getAccountGateResult() const {
    return m_account_gate_result;
}
void OAIStackSetOperationResultSummary::setAccountGateResult(const OAIStackSetOperationResultSummary_AccountGateResult &account_gate_result) {
    m_account_gate_result = account_gate_result;
    m_account_gate_result_isSet = true;
}

bool OAIStackSetOperationResultSummary::is_account_gate_result_Set() const{
    return m_account_gate_result_isSet;
}

bool OAIStackSetOperationResultSummary::is_account_gate_result_Valid() const{
    return m_account_gate_result_isValid;
}

QString OAIStackSetOperationResultSummary::getOrganizationalUnitId() const {
    return m_organizational_unit_id;
}
void OAIStackSetOperationResultSummary::setOrganizationalUnitId(const QString &organizational_unit_id) {
    m_organizational_unit_id = organizational_unit_id;
    m_organizational_unit_id_isSet = true;
}

bool OAIStackSetOperationResultSummary::is_organizational_unit_id_Set() const{
    return m_organizational_unit_id_isSet;
}

bool OAIStackSetOperationResultSummary::is_organizational_unit_id_Valid() const{
    return m_organizational_unit_id_isValid;
}

bool OAIStackSetOperationResultSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_gate_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackSetOperationResultSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
