/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackSummary::OAIStackSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackSummary::OAIStackSummary() {
    this->initializeModel();
}

OAIStackSummary::~OAIStackSummary() {}

void OAIStackSummary::initializeModel() {

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_template_description_isSet = false;
    m_template_description_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_deletion_time_isSet = false;
    m_deletion_time_isValid = false;

    m_stack_status_isSet = false;
    m_stack_status_isValid = false;

    m_stack_status_reason_isSet = false;
    m_stack_status_reason_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_root_id_isSet = false;
    m_root_id_isValid = false;

    m_drift_information_isSet = false;
    m_drift_information_isValid = false;
}

void OAIStackSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackSummary::fromJsonObject(QJsonObject json) {

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_template_description_isValid = ::OpenAPI::fromJsonValue(m_template_description, json[QString("TemplateDescription")]);
    m_template_description_isSet = !json[QString("TemplateDescription")].isNull() && m_template_description_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_deletion_time_isValid = ::OpenAPI::fromJsonValue(m_deletion_time, json[QString("DeletionTime")]);
    m_deletion_time_isSet = !json[QString("DeletionTime")].isNull() && m_deletion_time_isValid;

    m_stack_status_isValid = ::OpenAPI::fromJsonValue(m_stack_status, json[QString("StackStatus")]);
    m_stack_status_isSet = !json[QString("StackStatus")].isNull() && m_stack_status_isValid;

    m_stack_status_reason_isValid = ::OpenAPI::fromJsonValue(m_stack_status_reason, json[QString("StackStatusReason")]);
    m_stack_status_reason_isSet = !json[QString("StackStatusReason")].isNull() && m_stack_status_reason_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("ParentId")]);
    m_parent_id_isSet = !json[QString("ParentId")].isNull() && m_parent_id_isValid;

    m_root_id_isValid = ::OpenAPI::fromJsonValue(m_root_id, json[QString("RootId")]);
    m_root_id_isSet = !json[QString("RootId")].isNull() && m_root_id_isValid;

    m_drift_information_isValid = ::OpenAPI::fromJsonValue(m_drift_information, json[QString("DriftInformation")]);
    m_drift_information_isSet = !json[QString("DriftInformation")].isNull() && m_drift_information_isValid;
}

QString OAIStackSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_template_description_isSet) {
        obj.insert(QString("TemplateDescription"), ::OpenAPI::toJsonValue(m_template_description));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_deletion_time_isSet) {
        obj.insert(QString("DeletionTime"), ::OpenAPI::toJsonValue(m_deletion_time));
    }
    if (m_stack_status.isSet()) {
        obj.insert(QString("StackStatus"), ::OpenAPI::toJsonValue(m_stack_status));
    }
    if (m_stack_status_reason_isSet) {
        obj.insert(QString("StackStatusReason"), ::OpenAPI::toJsonValue(m_stack_status_reason));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("ParentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_root_id_isSet) {
        obj.insert(QString("RootId"), ::OpenAPI::toJsonValue(m_root_id));
    }
    if (m_drift_information.isSet()) {
        obj.insert(QString("DriftInformation"), ::OpenAPI::toJsonValue(m_drift_information));
    }
    return obj;
}

QString OAIStackSummary::getStackId() const {
    return m_stack_id;
}
void OAIStackSummary::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIStackSummary::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIStackSummary::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIStackSummary::getStackName() const {
    return m_stack_name;
}
void OAIStackSummary::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIStackSummary::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIStackSummary::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIStackSummary::getTemplateDescription() const {
    return m_template_description;
}
void OAIStackSummary::setTemplateDescription(const QString &template_description) {
    m_template_description = template_description;
    m_template_description_isSet = true;
}

bool OAIStackSummary::is_template_description_Set() const{
    return m_template_description_isSet;
}

bool OAIStackSummary::is_template_description_Valid() const{
    return m_template_description_isValid;
}

QDateTime OAIStackSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIStackSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIStackSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIStackSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIStackSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIStackSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIStackSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIStackSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QDateTime OAIStackSummary::getDeletionTime() const {
    return m_deletion_time;
}
void OAIStackSummary::setDeletionTime(const QDateTime &deletion_time) {
    m_deletion_time = deletion_time;
    m_deletion_time_isSet = true;
}

bool OAIStackSummary::is_deletion_time_Set() const{
    return m_deletion_time_isSet;
}

bool OAIStackSummary::is_deletion_time_Valid() const{
    return m_deletion_time_isValid;
}

OAIStackStatus OAIStackSummary::getStackStatus() const {
    return m_stack_status;
}
void OAIStackSummary::setStackStatus(const OAIStackStatus &stack_status) {
    m_stack_status = stack_status;
    m_stack_status_isSet = true;
}

bool OAIStackSummary::is_stack_status_Set() const{
    return m_stack_status_isSet;
}

bool OAIStackSummary::is_stack_status_Valid() const{
    return m_stack_status_isValid;
}

QString OAIStackSummary::getStackStatusReason() const {
    return m_stack_status_reason;
}
void OAIStackSummary::setStackStatusReason(const QString &stack_status_reason) {
    m_stack_status_reason = stack_status_reason;
    m_stack_status_reason_isSet = true;
}

bool OAIStackSummary::is_stack_status_reason_Set() const{
    return m_stack_status_reason_isSet;
}

bool OAIStackSummary::is_stack_status_reason_Valid() const{
    return m_stack_status_reason_isValid;
}

QString OAIStackSummary::getParentId() const {
    return m_parent_id;
}
void OAIStackSummary::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIStackSummary::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIStackSummary::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIStackSummary::getRootId() const {
    return m_root_id;
}
void OAIStackSummary::setRootId(const QString &root_id) {
    m_root_id = root_id;
    m_root_id_isSet = true;
}

bool OAIStackSummary::is_root_id_Set() const{
    return m_root_id_isSet;
}

bool OAIStackSummary::is_root_id_Valid() const{
    return m_root_id_isValid;
}

OAIStackSummary_DriftInformation OAIStackSummary::getDriftInformation() const {
    return m_drift_information;
}
void OAIStackSummary::setDriftInformation(const OAIStackSummary_DriftInformation &drift_information) {
    m_drift_information = drift_information;
    m_drift_information_isSet = true;
}

bool OAIStackSummary::is_drift_information_Set() const{
    return m_drift_information_isSet;
}

bool OAIStackSummary::is_drift_information_Valid() const{
    return m_drift_information_isValid;
}

bool OAIStackSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_information.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_name_isValid && m_creation_time_isValid && m_stack_status_isValid && true;
}

} // namespace OpenAPI
