/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStackDriftDetectionStatusOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStackDriftDetectionStatusOutput::OAIDescribeStackDriftDetectionStatusOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStackDriftDetectionStatusOutput::OAIDescribeStackDriftDetectionStatusOutput() {
    this->initializeModel();
}

OAIDescribeStackDriftDetectionStatusOutput::~OAIDescribeStackDriftDetectionStatusOutput() {}

void OAIDescribeStackDriftDetectionStatusOutput::initializeModel() {

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_stack_drift_detection_id_isSet = false;
    m_stack_drift_detection_id_isValid = false;

    m_stack_drift_status_isSet = false;
    m_stack_drift_status_isValid = false;

    m_detection_status_isSet = false;
    m_detection_status_isValid = false;

    m_detection_status_reason_isSet = false;
    m_detection_status_reason_isValid = false;

    m_drifted_stack_resource_count_isSet = false;
    m_drifted_stack_resource_count_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIDescribeStackDriftDetectionStatusOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStackDriftDetectionStatusOutput::fromJsonObject(QJsonObject json) {

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_stack_drift_detection_id_isValid = ::OpenAPI::fromJsonValue(m_stack_drift_detection_id, json[QString("StackDriftDetectionId")]);
    m_stack_drift_detection_id_isSet = !json[QString("StackDriftDetectionId")].isNull() && m_stack_drift_detection_id_isValid;

    m_stack_drift_status_isValid = ::OpenAPI::fromJsonValue(m_stack_drift_status, json[QString("StackDriftStatus")]);
    m_stack_drift_status_isSet = !json[QString("StackDriftStatus")].isNull() && m_stack_drift_status_isValid;

    m_detection_status_isValid = ::OpenAPI::fromJsonValue(m_detection_status, json[QString("DetectionStatus")]);
    m_detection_status_isSet = !json[QString("DetectionStatus")].isNull() && m_detection_status_isValid;

    m_detection_status_reason_isValid = ::OpenAPI::fromJsonValue(m_detection_status_reason, json[QString("DetectionStatusReason")]);
    m_detection_status_reason_isSet = !json[QString("DetectionStatusReason")].isNull() && m_detection_status_reason_isValid;

    m_drifted_stack_resource_count_isValid = ::OpenAPI::fromJsonValue(m_drifted_stack_resource_count, json[QString("DriftedStackResourceCount")]);
    m_drifted_stack_resource_count_isSet = !json[QString("DriftedStackResourceCount")].isNull() && m_drifted_stack_resource_count_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIDescribeStackDriftDetectionStatusOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStackDriftDetectionStatusOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_stack_drift_detection_id_isSet) {
        obj.insert(QString("StackDriftDetectionId"), ::OpenAPI::toJsonValue(m_stack_drift_detection_id));
    }
    if (m_stack_drift_status.isSet()) {
        obj.insert(QString("StackDriftStatus"), ::OpenAPI::toJsonValue(m_stack_drift_status));
    }
    if (m_detection_status.isSet()) {
        obj.insert(QString("DetectionStatus"), ::OpenAPI::toJsonValue(m_detection_status));
    }
    if (m_detection_status_reason_isSet) {
        obj.insert(QString("DetectionStatusReason"), ::OpenAPI::toJsonValue(m_detection_status_reason));
    }
    if (m_drifted_stack_resource_count_isSet) {
        obj.insert(QString("DriftedStackResourceCount"), ::OpenAPI::toJsonValue(m_drifted_stack_resource_count));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIDescribeStackDriftDetectionStatusOutput::getStackId() const {
    return m_stack_id;
}
void OAIDescribeStackDriftDetectionStatusOutput::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIDescribeStackDriftDetectionStatusOutput::getStackDriftDetectionId() const {
    return m_stack_drift_detection_id;
}
void OAIDescribeStackDriftDetectionStatusOutput::setStackDriftDetectionId(const QString &stack_drift_detection_id) {
    m_stack_drift_detection_id = stack_drift_detection_id;
    m_stack_drift_detection_id_isSet = true;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_stack_drift_detection_id_Set() const{
    return m_stack_drift_detection_id_isSet;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_stack_drift_detection_id_Valid() const{
    return m_stack_drift_detection_id_isValid;
}

OAIStackDriftStatus OAIDescribeStackDriftDetectionStatusOutput::getStackDriftStatus() const {
    return m_stack_drift_status;
}
void OAIDescribeStackDriftDetectionStatusOutput::setStackDriftStatus(const OAIStackDriftStatus &stack_drift_status) {
    m_stack_drift_status = stack_drift_status;
    m_stack_drift_status_isSet = true;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_stack_drift_status_Set() const{
    return m_stack_drift_status_isSet;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_stack_drift_status_Valid() const{
    return m_stack_drift_status_isValid;
}

OAIStackDriftDetectionStatus OAIDescribeStackDriftDetectionStatusOutput::getDetectionStatus() const {
    return m_detection_status;
}
void OAIDescribeStackDriftDetectionStatusOutput::setDetectionStatus(const OAIStackDriftDetectionStatus &detection_status) {
    m_detection_status = detection_status;
    m_detection_status_isSet = true;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_detection_status_Set() const{
    return m_detection_status_isSet;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_detection_status_Valid() const{
    return m_detection_status_isValid;
}

QString OAIDescribeStackDriftDetectionStatusOutput::getDetectionStatusReason() const {
    return m_detection_status_reason;
}
void OAIDescribeStackDriftDetectionStatusOutput::setDetectionStatusReason(const QString &detection_status_reason) {
    m_detection_status_reason = detection_status_reason;
    m_detection_status_reason_isSet = true;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_detection_status_reason_Set() const{
    return m_detection_status_reason_isSet;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_detection_status_reason_Valid() const{
    return m_detection_status_reason_isValid;
}

qint32 OAIDescribeStackDriftDetectionStatusOutput::getDriftedStackResourceCount() const {
    return m_drifted_stack_resource_count;
}
void OAIDescribeStackDriftDetectionStatusOutput::setDriftedStackResourceCount(const qint32 &drifted_stack_resource_count) {
    m_drifted_stack_resource_count = drifted_stack_resource_count;
    m_drifted_stack_resource_count_isSet = true;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_drifted_stack_resource_count_Set() const{
    return m_drifted_stack_resource_count_isSet;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_drifted_stack_resource_count_Valid() const{
    return m_drifted_stack_resource_count_isValid;
}

QDateTime OAIDescribeStackDriftDetectionStatusOutput::getTimestamp() const {
    return m_timestamp;
}
void OAIDescribeStackDriftDetectionStatusOutput::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDescribeStackDriftDetectionStatusOutput::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIDescribeStackDriftDetectionStatusOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_drift_detection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_drift_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detection_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drifted_stack_resource_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStackDriftDetectionStatusOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_id_isValid && m_stack_drift_detection_id_isValid && m_detection_status_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
