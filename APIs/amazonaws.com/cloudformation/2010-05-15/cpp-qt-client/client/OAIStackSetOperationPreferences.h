/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStackSetOperationPreferences.h
 *
 * &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt;
 */

#ifndef OAIStackSetOperationPreferences_H
#define OAIStackSetOperationPreferences_H

#include <QJsonObject>

#include "OAIRegionConcurrencyType.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStackSetOperationPreferences : public OAIObject {
public:
    OAIStackSetOperationPreferences();
    OAIStackSetOperationPreferences(QString json);
    ~OAIStackSetOperationPreferences() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIRegionConcurrencyType getRegionConcurrencyType() const;
    void setRegionConcurrencyType(const OAIRegionConcurrencyType &region_concurrency_type);
    bool is_region_concurrency_type_Set() const;
    bool is_region_concurrency_type_Valid() const;

    QList getRegionOrder() const;
    void setRegionOrder(const QList &region_order);
    bool is_region_order_Set() const;
    bool is_region_order_Valid() const;

    qint32 getFailureToleranceCount() const;
    void setFailureToleranceCount(const qint32 &failure_tolerance_count);
    bool is_failure_tolerance_count_Set() const;
    bool is_failure_tolerance_count_Valid() const;

    qint32 getFailureTolerancePercentage() const;
    void setFailureTolerancePercentage(const qint32 &failure_tolerance_percentage);
    bool is_failure_tolerance_percentage_Set() const;
    bool is_failure_tolerance_percentage_Valid() const;

    qint32 getMaxConcurrentCount() const;
    void setMaxConcurrentCount(const qint32 &max_concurrent_count);
    bool is_max_concurrent_count_Set() const;
    bool is_max_concurrent_count_Valid() const;

    qint32 getMaxConcurrentPercentage() const;
    void setMaxConcurrentPercentage(const qint32 &max_concurrent_percentage);
    bool is_max_concurrent_percentage_Set() const;
    bool is_max_concurrent_percentage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIRegionConcurrencyType m_region_concurrency_type;
    bool m_region_concurrency_type_isSet;
    bool m_region_concurrency_type_isValid;

    QList m_region_order;
    bool m_region_order_isSet;
    bool m_region_order_isValid;

    qint32 m_failure_tolerance_count;
    bool m_failure_tolerance_count_isSet;
    bool m_failure_tolerance_count_isValid;

    qint32 m_failure_tolerance_percentage;
    bool m_failure_tolerance_percentage_isSet;
    bool m_failure_tolerance_percentage_isValid;

    qint32 m_max_concurrent_count;
    bool m_max_concurrent_count_isSet;
    bool m_max_concurrent_count_isValid;

    qint32 m_max_concurrent_percentage;
    bool m_max_concurrent_percentage_isSet;
    bool m_max_concurrent_percentage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStackSetOperationPreferences)

#endif // OAIStackSetOperationPreferences_H
