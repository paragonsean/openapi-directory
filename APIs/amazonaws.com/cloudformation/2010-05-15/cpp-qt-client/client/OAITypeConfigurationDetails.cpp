/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypeConfigurationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypeConfigurationDetails::OAITypeConfigurationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypeConfigurationDetails::OAITypeConfigurationDetails() {
    this->initializeModel();
}

OAITypeConfigurationDetails::~OAITypeConfigurationDetails() {}

void OAITypeConfigurationDetails::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_type_arn_isSet = false;
    m_type_arn_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_is_default_configuration_isSet = false;
    m_is_default_configuration_isValid = false;
}

void OAITypeConfigurationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypeConfigurationDetails::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("Alias")]);
    m_alias_isSet = !json[QString("Alias")].isNull() && m_alias_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_type_arn_isValid = ::OpenAPI::fromJsonValue(m_type_arn, json[QString("TypeArn")]);
    m_type_arn_isSet = !json[QString("TypeArn")].isNull() && m_type_arn_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_is_default_configuration_isValid = ::OpenAPI::fromJsonValue(m_is_default_configuration, json[QString("IsDefaultConfiguration")]);
    m_is_default_configuration_isSet = !json[QString("IsDefaultConfiguration")].isNull() && m_is_default_configuration_isValid;
}

QString OAITypeConfigurationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypeConfigurationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_alias_isSet) {
        obj.insert(QString("Alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_configuration_isSet) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_type_arn_isSet) {
        obj.insert(QString("TypeArn"), ::OpenAPI::toJsonValue(m_type_arn));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_is_default_configuration_isSet) {
        obj.insert(QString("IsDefaultConfiguration"), ::OpenAPI::toJsonValue(m_is_default_configuration));
    }
    return obj;
}

QString OAITypeConfigurationDetails::getArn() const {
    return m_arn;
}
void OAITypeConfigurationDetails::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAITypeConfigurationDetails::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAITypeConfigurationDetails::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAITypeConfigurationDetails::getAlias() const {
    return m_alias;
}
void OAITypeConfigurationDetails::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAITypeConfigurationDetails::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAITypeConfigurationDetails::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAITypeConfigurationDetails::getConfiguration() const {
    return m_configuration;
}
void OAITypeConfigurationDetails::setConfiguration(const QString &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAITypeConfigurationDetails::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAITypeConfigurationDetails::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QDateTime OAITypeConfigurationDetails::getLastUpdated() const {
    return m_last_updated;
}
void OAITypeConfigurationDetails::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAITypeConfigurationDetails::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAITypeConfigurationDetails::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAITypeConfigurationDetails::getTypeArn() const {
    return m_type_arn;
}
void OAITypeConfigurationDetails::setTypeArn(const QString &type_arn) {
    m_type_arn = type_arn;
    m_type_arn_isSet = true;
}

bool OAITypeConfigurationDetails::is_type_arn_Set() const{
    return m_type_arn_isSet;
}

bool OAITypeConfigurationDetails::is_type_arn_Valid() const{
    return m_type_arn_isValid;
}

QString OAITypeConfigurationDetails::getTypeName() const {
    return m_type_name;
}
void OAITypeConfigurationDetails::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAITypeConfigurationDetails::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAITypeConfigurationDetails::is_type_name_Valid() const{
    return m_type_name_isValid;
}

bool OAITypeConfigurationDetails::getIsDefaultConfiguration() const {
    return m_is_default_configuration;
}
void OAITypeConfigurationDetails::setIsDefaultConfiguration(const bool &is_default_configuration) {
    m_is_default_configuration = is_default_configuration;
    m_is_default_configuration_isSet = true;
}

bool OAITypeConfigurationDetails::is_is_default_configuration_Set() const{
    return m_is_default_configuration_isSet;
}

bool OAITypeConfigurationDetails::is_is_default_configuration_Valid() const{
    return m_is_default_configuration_isValid;
}

bool OAITypeConfigurationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypeConfigurationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
