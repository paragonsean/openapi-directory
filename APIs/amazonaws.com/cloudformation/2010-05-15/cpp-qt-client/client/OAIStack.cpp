/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStack::OAIStack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStack::OAIStack() {
    this->initializeModel();
}

OAIStack::~OAIStack() {}

void OAIStack::initializeModel() {

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_change_set_id_isSet = false;
    m_change_set_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_deletion_time_isSet = false;
    m_deletion_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_rollback_configuration_isSet = false;
    m_rollback_configuration_isValid = false;

    m_stack_status_isSet = false;
    m_stack_status_isValid = false;

    m_stack_status_reason_isSet = false;
    m_stack_status_reason_isValid = false;

    m_disable_rollback_isSet = false;
    m_disable_rollback_isValid = false;

    m_notification_arns_isSet = false;
    m_notification_arns_isValid = false;

    m_timeout_in_minutes_isSet = false;
    m_timeout_in_minutes_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_enable_termination_protection_isSet = false;
    m_enable_termination_protection_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_root_id_isSet = false;
    m_root_id_isValid = false;

    m_drift_information_isSet = false;
    m_drift_information_isValid = false;

    m_retain_except_on_create_isSet = false;
    m_retain_except_on_create_isValid = false;
}

void OAIStack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStack::fromJsonObject(QJsonObject json) {

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_change_set_id, json[QString("ChangeSetId")]);
    m_change_set_id_isSet = !json[QString("ChangeSetId")].isNull() && m_change_set_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_deletion_time_isValid = ::OpenAPI::fromJsonValue(m_deletion_time, json[QString("DeletionTime")]);
    m_deletion_time_isSet = !json[QString("DeletionTime")].isNull() && m_deletion_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_rollback_configuration_isValid = ::OpenAPI::fromJsonValue(m_rollback_configuration, json[QString("RollbackConfiguration")]);
    m_rollback_configuration_isSet = !json[QString("RollbackConfiguration")].isNull() && m_rollback_configuration_isValid;

    m_stack_status_isValid = ::OpenAPI::fromJsonValue(m_stack_status, json[QString("StackStatus")]);
    m_stack_status_isSet = !json[QString("StackStatus")].isNull() && m_stack_status_isValid;

    m_stack_status_reason_isValid = ::OpenAPI::fromJsonValue(m_stack_status_reason, json[QString("StackStatusReason")]);
    m_stack_status_reason_isSet = !json[QString("StackStatusReason")].isNull() && m_stack_status_reason_isValid;

    m_disable_rollback_isValid = ::OpenAPI::fromJsonValue(m_disable_rollback, json[QString("DisableRollback")]);
    m_disable_rollback_isSet = !json[QString("DisableRollback")].isNull() && m_disable_rollback_isValid;

    m_notification_arns_isValid = ::OpenAPI::fromJsonValue(m_notification_arns, json[QString("NotificationARNs")]);
    m_notification_arns_isSet = !json[QString("NotificationARNs")].isNull() && m_notification_arns_isValid;

    m_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_minutes, json[QString("TimeoutInMinutes")]);
    m_timeout_in_minutes_isSet = !json[QString("TimeoutInMinutes")].isNull() && m_timeout_in_minutes_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("Outputs")]);
    m_outputs_isSet = !json[QString("Outputs")].isNull() && m_outputs_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_enable_termination_protection_isValid = ::OpenAPI::fromJsonValue(m_enable_termination_protection, json[QString("EnableTerminationProtection")]);
    m_enable_termination_protection_isSet = !json[QString("EnableTerminationProtection")].isNull() && m_enable_termination_protection_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("ParentId")]);
    m_parent_id_isSet = !json[QString("ParentId")].isNull() && m_parent_id_isValid;

    m_root_id_isValid = ::OpenAPI::fromJsonValue(m_root_id, json[QString("RootId")]);
    m_root_id_isSet = !json[QString("RootId")].isNull() && m_root_id_isValid;

    m_drift_information_isValid = ::OpenAPI::fromJsonValue(m_drift_information, json[QString("DriftInformation")]);
    m_drift_information_isSet = !json[QString("DriftInformation")].isNull() && m_drift_information_isValid;

    m_retain_except_on_create_isValid = ::OpenAPI::fromJsonValue(m_retain_except_on_create, json[QString("RetainExceptOnCreate")]);
    m_retain_except_on_create_isSet = !json[QString("RetainExceptOnCreate")].isNull() && m_retain_except_on_create_isValid;
}

QString OAIStack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStack::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_change_set_id_isSet) {
        obj.insert(QString("ChangeSetId"), ::OpenAPI::toJsonValue(m_change_set_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_deletion_time_isSet) {
        obj.insert(QString("DeletionTime"), ::OpenAPI::toJsonValue(m_deletion_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_rollback_configuration.isSet()) {
        obj.insert(QString("RollbackConfiguration"), ::OpenAPI::toJsonValue(m_rollback_configuration));
    }
    if (m_stack_status.isSet()) {
        obj.insert(QString("StackStatus"), ::OpenAPI::toJsonValue(m_stack_status));
    }
    if (m_stack_status_reason_isSet) {
        obj.insert(QString("StackStatusReason"), ::OpenAPI::toJsonValue(m_stack_status_reason));
    }
    if (m_disable_rollback_isSet) {
        obj.insert(QString("DisableRollback"), ::OpenAPI::toJsonValue(m_disable_rollback));
    }
    if (m_notification_arns.isSet()) {
        obj.insert(QString("NotificationARNs"), ::OpenAPI::toJsonValue(m_notification_arns));
    }
    if (m_timeout_in_minutes_isSet) {
        obj.insert(QString("TimeoutInMinutes"), ::OpenAPI::toJsonValue(m_timeout_in_minutes));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_outputs.isSet()) {
        obj.insert(QString("Outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_enable_termination_protection_isSet) {
        obj.insert(QString("EnableTerminationProtection"), ::OpenAPI::toJsonValue(m_enable_termination_protection));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("ParentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_root_id_isSet) {
        obj.insert(QString("RootId"), ::OpenAPI::toJsonValue(m_root_id));
    }
    if (m_drift_information.isSet()) {
        obj.insert(QString("DriftInformation"), ::OpenAPI::toJsonValue(m_drift_information));
    }
    if (m_retain_except_on_create_isSet) {
        obj.insert(QString("RetainExceptOnCreate"), ::OpenAPI::toJsonValue(m_retain_except_on_create));
    }
    return obj;
}

QString OAIStack::getStackId() const {
    return m_stack_id;
}
void OAIStack::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIStack::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIStack::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIStack::getStackName() const {
    return m_stack_name;
}
void OAIStack::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIStack::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIStack::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIStack::getChangeSetId() const {
    return m_change_set_id;
}
void OAIStack::setChangeSetId(const QString &change_set_id) {
    m_change_set_id = change_set_id;
    m_change_set_id_isSet = true;
}

bool OAIStack::is_change_set_id_Set() const{
    return m_change_set_id_isSet;
}

bool OAIStack::is_change_set_id_Valid() const{
    return m_change_set_id_isValid;
}

QString OAIStack::getDescription() const {
    return m_description;
}
void OAIStack::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStack::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStack::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIStack::getParameters() const {
    return m_parameters;
}
void OAIStack::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIStack::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIStack::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QDateTime OAIStack::getCreationTime() const {
    return m_creation_time;
}
void OAIStack::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIStack::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIStack::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIStack::getDeletionTime() const {
    return m_deletion_time;
}
void OAIStack::setDeletionTime(const QDateTime &deletion_time) {
    m_deletion_time = deletion_time;
    m_deletion_time_isSet = true;
}

bool OAIStack::is_deletion_time_Set() const{
    return m_deletion_time_isSet;
}

bool OAIStack::is_deletion_time_Valid() const{
    return m_deletion_time_isValid;
}

QDateTime OAIStack::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIStack::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIStack::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIStack::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

OAIDescribeChangeSetOutput_RollbackConfiguration OAIStack::getRollbackConfiguration() const {
    return m_rollback_configuration;
}
void OAIStack::setRollbackConfiguration(const OAIDescribeChangeSetOutput_RollbackConfiguration &rollback_configuration) {
    m_rollback_configuration = rollback_configuration;
    m_rollback_configuration_isSet = true;
}

bool OAIStack::is_rollback_configuration_Set() const{
    return m_rollback_configuration_isSet;
}

bool OAIStack::is_rollback_configuration_Valid() const{
    return m_rollback_configuration_isValid;
}

OAIStackStatus OAIStack::getStackStatus() const {
    return m_stack_status;
}
void OAIStack::setStackStatus(const OAIStackStatus &stack_status) {
    m_stack_status = stack_status;
    m_stack_status_isSet = true;
}

bool OAIStack::is_stack_status_Set() const{
    return m_stack_status_isSet;
}

bool OAIStack::is_stack_status_Valid() const{
    return m_stack_status_isValid;
}

QString OAIStack::getStackStatusReason() const {
    return m_stack_status_reason;
}
void OAIStack::setStackStatusReason(const QString &stack_status_reason) {
    m_stack_status_reason = stack_status_reason;
    m_stack_status_reason_isSet = true;
}

bool OAIStack::is_stack_status_reason_Set() const{
    return m_stack_status_reason_isSet;
}

bool OAIStack::is_stack_status_reason_Valid() const{
    return m_stack_status_reason_isValid;
}

bool OAIStack::getDisableRollback() const {
    return m_disable_rollback;
}
void OAIStack::setDisableRollback(const bool &disable_rollback) {
    m_disable_rollback = disable_rollback;
    m_disable_rollback_isSet = true;
}

bool OAIStack::is_disable_rollback_Set() const{
    return m_disable_rollback_isSet;
}

bool OAIStack::is_disable_rollback_Valid() const{
    return m_disable_rollback_isValid;
}

QList OAIStack::getNotificationArns() const {
    return m_notification_arns;
}
void OAIStack::setNotificationArns(const QList &notification_arns) {
    m_notification_arns = notification_arns;
    m_notification_arns_isSet = true;
}

bool OAIStack::is_notification_arns_Set() const{
    return m_notification_arns_isSet;
}

bool OAIStack::is_notification_arns_Valid() const{
    return m_notification_arns_isValid;
}

qint32 OAIStack::getTimeoutInMinutes() const {
    return m_timeout_in_minutes;
}
void OAIStack::setTimeoutInMinutes(const qint32 &timeout_in_minutes) {
    m_timeout_in_minutes = timeout_in_minutes;
    m_timeout_in_minutes_isSet = true;
}

bool OAIStack::is_timeout_in_minutes_Set() const{
    return m_timeout_in_minutes_isSet;
}

bool OAIStack::is_timeout_in_minutes_Valid() const{
    return m_timeout_in_minutes_isValid;
}

QList OAIStack::getCapabilities() const {
    return m_capabilities;
}
void OAIStack::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIStack::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIStack::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList OAIStack::getOutputs() const {
    return m_outputs;
}
void OAIStack::setOutputs(const QList &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIStack::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIStack::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QString OAIStack::getRoleArn() const {
    return m_role_arn;
}
void OAIStack::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIStack::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIStack::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIStack::getTags() const {
    return m_tags;
}
void OAIStack::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStack::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStack::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStack::getEnableTerminationProtection() const {
    return m_enable_termination_protection;
}
void OAIStack::setEnableTerminationProtection(const bool &enable_termination_protection) {
    m_enable_termination_protection = enable_termination_protection;
    m_enable_termination_protection_isSet = true;
}

bool OAIStack::is_enable_termination_protection_Set() const{
    return m_enable_termination_protection_isSet;
}

bool OAIStack::is_enable_termination_protection_Valid() const{
    return m_enable_termination_protection_isValid;
}

QString OAIStack::getParentId() const {
    return m_parent_id;
}
void OAIStack::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIStack::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIStack::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIStack::getRootId() const {
    return m_root_id;
}
void OAIStack::setRootId(const QString &root_id) {
    m_root_id = root_id;
    m_root_id_isSet = true;
}

bool OAIStack::is_root_id_Set() const{
    return m_root_id_isSet;
}

bool OAIStack::is_root_id_Valid() const{
    return m_root_id_isValid;
}

OAIStack_DriftInformation OAIStack::getDriftInformation() const {
    return m_drift_information;
}
void OAIStack::setDriftInformation(const OAIStack_DriftInformation &drift_information) {
    m_drift_information = drift_information;
    m_drift_information_isSet = true;
}

bool OAIStack::is_drift_information_Set() const{
    return m_drift_information_isSet;
}

bool OAIStack::is_drift_information_Valid() const{
    return m_drift_information_isValid;
}

bool OAIStack::getRetainExceptOnCreate() const {
    return m_retain_except_on_create;
}
void OAIStack::setRetainExceptOnCreate(const bool &retain_except_on_create) {
    m_retain_except_on_create = retain_except_on_create;
    m_retain_except_on_create_isSet = true;
}

bool OAIStack::is_retain_except_on_create_Set() const{
    return m_retain_except_on_create_isSet;
}

bool OAIStack::is_retain_except_on_create_Valid() const{
    return m_retain_except_on_create_isValid;
}

bool OAIStack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_rollback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_termination_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_except_on_create_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStack::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_name_isValid && m_creation_time_isValid && m_stack_status_isValid && true;
}

} // namespace OpenAPI
