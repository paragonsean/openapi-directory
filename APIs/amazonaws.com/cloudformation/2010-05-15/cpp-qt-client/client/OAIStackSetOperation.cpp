/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackSetOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackSetOperation::OAIStackSetOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackSetOperation::OAIStackSetOperation() {
    this->initializeModel();
}

OAIStackSetOperation::~OAIStackSetOperation() {}

void OAIStackSetOperation::initializeModel() {

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_stack_set_id_isSet = false;
    m_stack_set_id_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_operation_preferences_isSet = false;
    m_operation_preferences_isValid = false;

    m_retain_stacks_isSet = false;
    m_retain_stacks_isValid = false;

    m_administration_role_arn_isSet = false;
    m_administration_role_arn_isValid = false;

    m_execution_role_name_isSet = false;
    m_execution_role_name_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_end_timestamp_isSet = false;
    m_end_timestamp_isValid = false;

    m_deployment_targets_isSet = false;
    m_deployment_targets_isValid = false;

    m_stack_set_drift_detection_details_isSet = false;
    m_stack_set_drift_detection_details_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;
}

void OAIStackSetOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackSetOperation::fromJsonObject(QJsonObject json) {

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;

    m_stack_set_id_isValid = ::OpenAPI::fromJsonValue(m_stack_set_id, json[QString("StackSetId")]);
    m_stack_set_id_isSet = !json[QString("StackSetId")].isNull() && m_stack_set_id_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_operation_preferences_isValid = ::OpenAPI::fromJsonValue(m_operation_preferences, json[QString("OperationPreferences")]);
    m_operation_preferences_isSet = !json[QString("OperationPreferences")].isNull() && m_operation_preferences_isValid;

    m_retain_stacks_isValid = ::OpenAPI::fromJsonValue(m_retain_stacks, json[QString("RetainStacks")]);
    m_retain_stacks_isSet = !json[QString("RetainStacks")].isNull() && m_retain_stacks_isValid;

    m_administration_role_arn_isValid = ::OpenAPI::fromJsonValue(m_administration_role_arn, json[QString("AdministrationRoleARN")]);
    m_administration_role_arn_isSet = !json[QString("AdministrationRoleARN")].isNull() && m_administration_role_arn_isValid;

    m_execution_role_name_isValid = ::OpenAPI::fromJsonValue(m_execution_role_name, json[QString("ExecutionRoleName")]);
    m_execution_role_name_isSet = !json[QString("ExecutionRoleName")].isNull() && m_execution_role_name_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_end_timestamp_isValid = ::OpenAPI::fromJsonValue(m_end_timestamp, json[QString("EndTimestamp")]);
    m_end_timestamp_isSet = !json[QString("EndTimestamp")].isNull() && m_end_timestamp_isValid;

    m_deployment_targets_isValid = ::OpenAPI::fromJsonValue(m_deployment_targets, json[QString("DeploymentTargets")]);
    m_deployment_targets_isSet = !json[QString("DeploymentTargets")].isNull() && m_deployment_targets_isValid;

    m_stack_set_drift_detection_details_isValid = ::OpenAPI::fromJsonValue(m_stack_set_drift_detection_details, json[QString("StackSetDriftDetectionDetails")]);
    m_stack_set_drift_detection_details_isSet = !json[QString("StackSetDriftDetectionDetails")].isNull() && m_stack_set_drift_detection_details_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("StatusDetails")]);
    m_status_details_isSet = !json[QString("StatusDetails")].isNull() && m_status_details_isValid;
}

QString OAIStackSetOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackSetOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_stack_set_id_isSet) {
        obj.insert(QString("StackSetId"), ::OpenAPI::toJsonValue(m_stack_set_id));
    }
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_operation_preferences.isSet()) {
        obj.insert(QString("OperationPreferences"), ::OpenAPI::toJsonValue(m_operation_preferences));
    }
    if (m_retain_stacks_isSet) {
        obj.insert(QString("RetainStacks"), ::OpenAPI::toJsonValue(m_retain_stacks));
    }
    if (m_administration_role_arn_isSet) {
        obj.insert(QString("AdministrationRoleARN"), ::OpenAPI::toJsonValue(m_administration_role_arn));
    }
    if (m_execution_role_name_isSet) {
        obj.insert(QString("ExecutionRoleName"), ::OpenAPI::toJsonValue(m_execution_role_name));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_end_timestamp_isSet) {
        obj.insert(QString("EndTimestamp"), ::OpenAPI::toJsonValue(m_end_timestamp));
    }
    if (m_deployment_targets.isSet()) {
        obj.insert(QString("DeploymentTargets"), ::OpenAPI::toJsonValue(m_deployment_targets));
    }
    if (m_stack_set_drift_detection_details.isSet()) {
        obj.insert(QString("StackSetDriftDetectionDetails"), ::OpenAPI::toJsonValue(m_stack_set_drift_detection_details));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_status_details.isSet()) {
        obj.insert(QString("StatusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    return obj;
}

QString OAIStackSetOperation::getOperationId() const {
    return m_operation_id;
}
void OAIStackSetOperation::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIStackSetOperation::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIStackSetOperation::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIStackSetOperation::getStackSetId() const {
    return m_stack_set_id;
}
void OAIStackSetOperation::setStackSetId(const QString &stack_set_id) {
    m_stack_set_id = stack_set_id;
    m_stack_set_id_isSet = true;
}

bool OAIStackSetOperation::is_stack_set_id_Set() const{
    return m_stack_set_id_isSet;
}

bool OAIStackSetOperation::is_stack_set_id_Valid() const{
    return m_stack_set_id_isValid;
}

OAIStackSetOperationAction OAIStackSetOperation::getAction() const {
    return m_action;
}
void OAIStackSetOperation::setAction(const OAIStackSetOperationAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIStackSetOperation::is_action_Set() const{
    return m_action_isSet;
}

bool OAIStackSetOperation::is_action_Valid() const{
    return m_action_isValid;
}

OAIStackSetOperationStatus OAIStackSetOperation::getStatus() const {
    return m_status;
}
void OAIStackSetOperation::setStatus(const OAIStackSetOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStackSetOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStackSetOperation::is_status_Valid() const{
    return m_status_isValid;
}

OAIStackSetOperation_OperationPreferences OAIStackSetOperation::getOperationPreferences() const {
    return m_operation_preferences;
}
void OAIStackSetOperation::setOperationPreferences(const OAIStackSetOperation_OperationPreferences &operation_preferences) {
    m_operation_preferences = operation_preferences;
    m_operation_preferences_isSet = true;
}

bool OAIStackSetOperation::is_operation_preferences_Set() const{
    return m_operation_preferences_isSet;
}

bool OAIStackSetOperation::is_operation_preferences_Valid() const{
    return m_operation_preferences_isValid;
}

bool OAIStackSetOperation::getRetainStacks() const {
    return m_retain_stacks;
}
void OAIStackSetOperation::setRetainStacks(const bool &retain_stacks) {
    m_retain_stacks = retain_stacks;
    m_retain_stacks_isSet = true;
}

bool OAIStackSetOperation::is_retain_stacks_Set() const{
    return m_retain_stacks_isSet;
}

bool OAIStackSetOperation::is_retain_stacks_Valid() const{
    return m_retain_stacks_isValid;
}

QString OAIStackSetOperation::getAdministrationRoleArn() const {
    return m_administration_role_arn;
}
void OAIStackSetOperation::setAdministrationRoleArn(const QString &administration_role_arn) {
    m_administration_role_arn = administration_role_arn;
    m_administration_role_arn_isSet = true;
}

bool OAIStackSetOperation::is_administration_role_arn_Set() const{
    return m_administration_role_arn_isSet;
}

bool OAIStackSetOperation::is_administration_role_arn_Valid() const{
    return m_administration_role_arn_isValid;
}

QString OAIStackSetOperation::getExecutionRoleName() const {
    return m_execution_role_name;
}
void OAIStackSetOperation::setExecutionRoleName(const QString &execution_role_name) {
    m_execution_role_name = execution_role_name;
    m_execution_role_name_isSet = true;
}

bool OAIStackSetOperation::is_execution_role_name_Set() const{
    return m_execution_role_name_isSet;
}

bool OAIStackSetOperation::is_execution_role_name_Valid() const{
    return m_execution_role_name_isValid;
}

QDateTime OAIStackSetOperation::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIStackSetOperation::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIStackSetOperation::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIStackSetOperation::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QDateTime OAIStackSetOperation::getEndTimestamp() const {
    return m_end_timestamp;
}
void OAIStackSetOperation::setEndTimestamp(const QDateTime &end_timestamp) {
    m_end_timestamp = end_timestamp;
    m_end_timestamp_isSet = true;
}

bool OAIStackSetOperation::is_end_timestamp_Set() const{
    return m_end_timestamp_isSet;
}

bool OAIStackSetOperation::is_end_timestamp_Valid() const{
    return m_end_timestamp_isValid;
}

OAIStackSetOperation_DeploymentTargets OAIStackSetOperation::getDeploymentTargets() const {
    return m_deployment_targets;
}
void OAIStackSetOperation::setDeploymentTargets(const OAIStackSetOperation_DeploymentTargets &deployment_targets) {
    m_deployment_targets = deployment_targets;
    m_deployment_targets_isSet = true;
}

bool OAIStackSetOperation::is_deployment_targets_Set() const{
    return m_deployment_targets_isSet;
}

bool OAIStackSetOperation::is_deployment_targets_Valid() const{
    return m_deployment_targets_isValid;
}

OAIStackSetOperation_StackSetDriftDetectionDetails OAIStackSetOperation::getStackSetDriftDetectionDetails() const {
    return m_stack_set_drift_detection_details;
}
void OAIStackSetOperation::setStackSetDriftDetectionDetails(const OAIStackSetOperation_StackSetDriftDetectionDetails &stack_set_drift_detection_details) {
    m_stack_set_drift_detection_details = stack_set_drift_detection_details;
    m_stack_set_drift_detection_details_isSet = true;
}

bool OAIStackSetOperation::is_stack_set_drift_detection_details_Set() const{
    return m_stack_set_drift_detection_details_isSet;
}

bool OAIStackSetOperation::is_stack_set_drift_detection_details_Valid() const{
    return m_stack_set_drift_detection_details_isValid;
}

QString OAIStackSetOperation::getStatusReason() const {
    return m_status_reason;
}
void OAIStackSetOperation::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIStackSetOperation::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIStackSetOperation::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

OAIStackSetOperation_StatusDetails OAIStackSetOperation::getStatusDetails() const {
    return m_status_details;
}
void OAIStackSetOperation::setStatusDetails(const OAIStackSetOperation_StatusDetails &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIStackSetOperation::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIStackSetOperation::is_status_details_Valid() const{
    return m_status_details_isValid;
}

bool OAIStackSetOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_stacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administration_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_drift_detection_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackSetOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
