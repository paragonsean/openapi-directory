/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeChangeSetOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeChangeSetOutput::OAIDescribeChangeSetOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeChangeSetOutput::OAIDescribeChangeSetOutput() {
    this->initializeModel();
}

OAIDescribeChangeSetOutput::~OAIDescribeChangeSetOutput() {}

void OAIDescribeChangeSetOutput::initializeModel() {

    m_change_set_name_isSet = false;
    m_change_set_name_isValid = false;

    m_change_set_id_isSet = false;
    m_change_set_id_isValid = false;

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_execution_status_isSet = false;
    m_execution_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_notification_arns_isSet = false;
    m_notification_arns_isValid = false;

    m_rollback_configuration_isSet = false;
    m_rollback_configuration_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_changes_isSet = false;
    m_changes_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_include_nested_stacks_isSet = false;
    m_include_nested_stacks_isValid = false;

    m_parent_change_set_id_isSet = false;
    m_parent_change_set_id_isValid = false;

    m_root_change_set_id_isSet = false;
    m_root_change_set_id_isValid = false;

    m_on_stack_failure_isSet = false;
    m_on_stack_failure_isValid = false;
}

void OAIDescribeChangeSetOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeChangeSetOutput::fromJsonObject(QJsonObject json) {

    m_change_set_name_isValid = ::OpenAPI::fromJsonValue(m_change_set_name, json[QString("ChangeSetName")]);
    m_change_set_name_isSet = !json[QString("ChangeSetName")].isNull() && m_change_set_name_isValid;

    m_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_change_set_id, json[QString("ChangeSetId")]);
    m_change_set_id_isSet = !json[QString("ChangeSetId")].isNull() && m_change_set_id_isValid;

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_execution_status_isValid = ::OpenAPI::fromJsonValue(m_execution_status, json[QString("ExecutionStatus")]);
    m_execution_status_isSet = !json[QString("ExecutionStatus")].isNull() && m_execution_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_notification_arns_isValid = ::OpenAPI::fromJsonValue(m_notification_arns, json[QString("NotificationARNs")]);
    m_notification_arns_isSet = !json[QString("NotificationARNs")].isNull() && m_notification_arns_isValid;

    m_rollback_configuration_isValid = ::OpenAPI::fromJsonValue(m_rollback_configuration, json[QString("RollbackConfiguration")]);
    m_rollback_configuration_isSet = !json[QString("RollbackConfiguration")].isNull() && m_rollback_configuration_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_changes_isValid = ::OpenAPI::fromJsonValue(m_changes, json[QString("Changes")]);
    m_changes_isSet = !json[QString("Changes")].isNull() && m_changes_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_include_nested_stacks_isValid = ::OpenAPI::fromJsonValue(m_include_nested_stacks, json[QString("IncludeNestedStacks")]);
    m_include_nested_stacks_isSet = !json[QString("IncludeNestedStacks")].isNull() && m_include_nested_stacks_isValid;

    m_parent_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_parent_change_set_id, json[QString("ParentChangeSetId")]);
    m_parent_change_set_id_isSet = !json[QString("ParentChangeSetId")].isNull() && m_parent_change_set_id_isValid;

    m_root_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_root_change_set_id, json[QString("RootChangeSetId")]);
    m_root_change_set_id_isSet = !json[QString("RootChangeSetId")].isNull() && m_root_change_set_id_isValid;

    m_on_stack_failure_isValid = ::OpenAPI::fromJsonValue(m_on_stack_failure, json[QString("OnStackFailure")]);
    m_on_stack_failure_isSet = !json[QString("OnStackFailure")].isNull() && m_on_stack_failure_isValid;
}

QString OAIDescribeChangeSetOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeChangeSetOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_change_set_name_isSet) {
        obj.insert(QString("ChangeSetName"), ::OpenAPI::toJsonValue(m_change_set_name));
    }
    if (m_change_set_id_isSet) {
        obj.insert(QString("ChangeSetId"), ::OpenAPI::toJsonValue(m_change_set_id));
    }
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_execution_status.isSet()) {
        obj.insert(QString("ExecutionStatus"), ::OpenAPI::toJsonValue(m_execution_status));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_notification_arns.isSet()) {
        obj.insert(QString("NotificationARNs"), ::OpenAPI::toJsonValue(m_notification_arns));
    }
    if (m_rollback_configuration.isSet()) {
        obj.insert(QString("RollbackConfiguration"), ::OpenAPI::toJsonValue(m_rollback_configuration));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_changes.isSet()) {
        obj.insert(QString("Changes"), ::OpenAPI::toJsonValue(m_changes));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_include_nested_stacks_isSet) {
        obj.insert(QString("IncludeNestedStacks"), ::OpenAPI::toJsonValue(m_include_nested_stacks));
    }
    if (m_parent_change_set_id_isSet) {
        obj.insert(QString("ParentChangeSetId"), ::OpenAPI::toJsonValue(m_parent_change_set_id));
    }
    if (m_root_change_set_id_isSet) {
        obj.insert(QString("RootChangeSetId"), ::OpenAPI::toJsonValue(m_root_change_set_id));
    }
    if (m_on_stack_failure.isSet()) {
        obj.insert(QString("OnStackFailure"), ::OpenAPI::toJsonValue(m_on_stack_failure));
    }
    return obj;
}

QString OAIDescribeChangeSetOutput::getChangeSetName() const {
    return m_change_set_name;
}
void OAIDescribeChangeSetOutput::setChangeSetName(const QString &change_set_name) {
    m_change_set_name = change_set_name;
    m_change_set_name_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_change_set_name_Set() const{
    return m_change_set_name_isSet;
}

bool OAIDescribeChangeSetOutput::is_change_set_name_Valid() const{
    return m_change_set_name_isValid;
}

QString OAIDescribeChangeSetOutput::getChangeSetId() const {
    return m_change_set_id;
}
void OAIDescribeChangeSetOutput::setChangeSetId(const QString &change_set_id) {
    m_change_set_id = change_set_id;
    m_change_set_id_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_change_set_id_Set() const{
    return m_change_set_id_isSet;
}

bool OAIDescribeChangeSetOutput::is_change_set_id_Valid() const{
    return m_change_set_id_isValid;
}

QString OAIDescribeChangeSetOutput::getStackId() const {
    return m_stack_id;
}
void OAIDescribeChangeSetOutput::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIDescribeChangeSetOutput::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QString OAIDescribeChangeSetOutput::getStackName() const {
    return m_stack_name;
}
void OAIDescribeChangeSetOutput::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIDescribeChangeSetOutput::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIDescribeChangeSetOutput::getDescription() const {
    return m_description;
}
void OAIDescribeChangeSetOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeChangeSetOutput::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIDescribeChangeSetOutput::getParameters() const {
    return m_parameters;
}
void OAIDescribeChangeSetOutput::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDescribeChangeSetOutput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QDateTime OAIDescribeChangeSetOutput::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeChangeSetOutput::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeChangeSetOutput::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAIExecutionStatus OAIDescribeChangeSetOutput::getExecutionStatus() const {
    return m_execution_status;
}
void OAIDescribeChangeSetOutput::setExecutionStatus(const OAIExecutionStatus &execution_status) {
    m_execution_status = execution_status;
    m_execution_status_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_execution_status_Set() const{
    return m_execution_status_isSet;
}

bool OAIDescribeChangeSetOutput::is_execution_status_Valid() const{
    return m_execution_status_isValid;
}

OAIChangeSetStatus OAIDescribeChangeSetOutput::getStatus() const {
    return m_status;
}
void OAIDescribeChangeSetOutput::setStatus(const OAIChangeSetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeChangeSetOutput::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeChangeSetOutput::getStatusReason() const {
    return m_status_reason;
}
void OAIDescribeChangeSetOutput::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIDescribeChangeSetOutput::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QList OAIDescribeChangeSetOutput::getNotificationArns() const {
    return m_notification_arns;
}
void OAIDescribeChangeSetOutput::setNotificationArns(const QList &notification_arns) {
    m_notification_arns = notification_arns;
    m_notification_arns_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_notification_arns_Set() const{
    return m_notification_arns_isSet;
}

bool OAIDescribeChangeSetOutput::is_notification_arns_Valid() const{
    return m_notification_arns_isValid;
}

OAIDescribeChangeSetOutput_RollbackConfiguration OAIDescribeChangeSetOutput::getRollbackConfiguration() const {
    return m_rollback_configuration;
}
void OAIDescribeChangeSetOutput::setRollbackConfiguration(const OAIDescribeChangeSetOutput_RollbackConfiguration &rollback_configuration) {
    m_rollback_configuration = rollback_configuration;
    m_rollback_configuration_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_rollback_configuration_Set() const{
    return m_rollback_configuration_isSet;
}

bool OAIDescribeChangeSetOutput::is_rollback_configuration_Valid() const{
    return m_rollback_configuration_isValid;
}

QList OAIDescribeChangeSetOutput::getCapabilities() const {
    return m_capabilities;
}
void OAIDescribeChangeSetOutput::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIDescribeChangeSetOutput::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList OAIDescribeChangeSetOutput::getTags() const {
    return m_tags;
}
void OAIDescribeChangeSetOutput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeChangeSetOutput::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIDescribeChangeSetOutput::getChanges() const {
    return m_changes;
}
void OAIDescribeChangeSetOutput::setChanges(const QList &changes) {
    m_changes = changes;
    m_changes_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_changes_Set() const{
    return m_changes_isSet;
}

bool OAIDescribeChangeSetOutput::is_changes_Valid() const{
    return m_changes_isValid;
}

QString OAIDescribeChangeSetOutput::getNextToken() const {
    return m_next_token;
}
void OAIDescribeChangeSetOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeChangeSetOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeChangeSetOutput::getIncludeNestedStacks() const {
    return m_include_nested_stacks;
}
void OAIDescribeChangeSetOutput::setIncludeNestedStacks(const bool &include_nested_stacks) {
    m_include_nested_stacks = include_nested_stacks;
    m_include_nested_stacks_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_include_nested_stacks_Set() const{
    return m_include_nested_stacks_isSet;
}

bool OAIDescribeChangeSetOutput::is_include_nested_stacks_Valid() const{
    return m_include_nested_stacks_isValid;
}

QString OAIDescribeChangeSetOutput::getParentChangeSetId() const {
    return m_parent_change_set_id;
}
void OAIDescribeChangeSetOutput::setParentChangeSetId(const QString &parent_change_set_id) {
    m_parent_change_set_id = parent_change_set_id;
    m_parent_change_set_id_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_parent_change_set_id_Set() const{
    return m_parent_change_set_id_isSet;
}

bool OAIDescribeChangeSetOutput::is_parent_change_set_id_Valid() const{
    return m_parent_change_set_id_isValid;
}

QString OAIDescribeChangeSetOutput::getRootChangeSetId() const {
    return m_root_change_set_id;
}
void OAIDescribeChangeSetOutput::setRootChangeSetId(const QString &root_change_set_id) {
    m_root_change_set_id = root_change_set_id;
    m_root_change_set_id_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_root_change_set_id_Set() const{
    return m_root_change_set_id_isSet;
}

bool OAIDescribeChangeSetOutput::is_root_change_set_id_Valid() const{
    return m_root_change_set_id_isValid;
}

OAIOnStackFailure OAIDescribeChangeSetOutput::getOnStackFailure() const {
    return m_on_stack_failure;
}
void OAIDescribeChangeSetOutput::setOnStackFailure(const OAIOnStackFailure &on_stack_failure) {
    m_on_stack_failure = on_stack_failure;
    m_on_stack_failure_isSet = true;
}

bool OAIDescribeChangeSetOutput::is_on_stack_failure_Set() const{
    return m_on_stack_failure_isSet;
}

bool OAIDescribeChangeSetOutput::is_on_stack_failure_Valid() const{
    return m_on_stack_failure_isValid;
}

bool OAIDescribeChangeSetOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_changes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_nested_stacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_stack_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeChangeSetOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
