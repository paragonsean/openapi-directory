/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteStackInstancesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteStackInstancesInput::OAIDeleteStackInstancesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteStackInstancesInput::OAIDeleteStackInstancesInput() {
    this->initializeModel();
}

OAIDeleteStackInstancesInput::~OAIDeleteStackInstancesInput() {}

void OAIDeleteStackInstancesInput::initializeModel() {

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_deployment_targets_isSet = false;
    m_deployment_targets_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_operation_preferences_isSet = false;
    m_operation_preferences_isValid = false;

    m_retain_stacks_isSet = false;
    m_retain_stacks_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_call_as_isSet = false;
    m_call_as_isValid = false;
}

void OAIDeleteStackInstancesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteStackInstancesInput::fromJsonObject(QJsonObject json) {

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("StackSetName")]);
    m_stack_set_name_isSet = !json[QString("StackSetName")].isNull() && m_stack_set_name_isValid;

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("Accounts")]);
    m_accounts_isSet = !json[QString("Accounts")].isNull() && m_accounts_isValid;

    m_deployment_targets_isValid = ::OpenAPI::fromJsonValue(m_deployment_targets, json[QString("DeploymentTargets")]);
    m_deployment_targets_isSet = !json[QString("DeploymentTargets")].isNull() && m_deployment_targets_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("Regions")]);
    m_regions_isSet = !json[QString("Regions")].isNull() && m_regions_isValid;

    m_operation_preferences_isValid = ::OpenAPI::fromJsonValue(m_operation_preferences, json[QString("OperationPreferences")]);
    m_operation_preferences_isSet = !json[QString("OperationPreferences")].isNull() && m_operation_preferences_isValid;

    m_retain_stacks_isValid = ::OpenAPI::fromJsonValue(m_retain_stacks, json[QString("RetainStacks")]);
    m_retain_stacks_isSet = !json[QString("RetainStacks")].isNull() && m_retain_stacks_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;

    m_call_as_isValid = ::OpenAPI::fromJsonValue(m_call_as, json[QString("CallAs")]);
    m_call_as_isSet = !json[QString("CallAs")].isNull() && m_call_as_isValid;
}

QString OAIDeleteStackInstancesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteStackInstancesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_name_isSet) {
        obj.insert(QString("StackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_accounts.isSet()) {
        obj.insert(QString("Accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_deployment_targets.isSet()) {
        obj.insert(QString("DeploymentTargets"), ::OpenAPI::toJsonValue(m_deployment_targets));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("Regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_operation_preferences.isSet()) {
        obj.insert(QString("OperationPreferences"), ::OpenAPI::toJsonValue(m_operation_preferences));
    }
    if (m_retain_stacks_isSet) {
        obj.insert(QString("RetainStacks"), ::OpenAPI::toJsonValue(m_retain_stacks));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_call_as.isSet()) {
        obj.insert(QString("CallAs"), ::OpenAPI::toJsonValue(m_call_as));
    }
    return obj;
}

QString OAIDeleteStackInstancesInput::getStackSetName() const {
    return m_stack_set_name;
}
void OAIDeleteStackInstancesInput::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIDeleteStackInstancesInput::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIDeleteStackInstancesInput::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

QList OAIDeleteStackInstancesInput::getAccounts() const {
    return m_accounts;
}
void OAIDeleteStackInstancesInput::setAccounts(const QList &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIDeleteStackInstancesInput::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIDeleteStackInstancesInput::is_accounts_Valid() const{
    return m_accounts_isValid;
}

OAIDeleteStackInstancesInput_DeploymentTargets OAIDeleteStackInstancesInput::getDeploymentTargets() const {
    return m_deployment_targets;
}
void OAIDeleteStackInstancesInput::setDeploymentTargets(const OAIDeleteStackInstancesInput_DeploymentTargets &deployment_targets) {
    m_deployment_targets = deployment_targets;
    m_deployment_targets_isSet = true;
}

bool OAIDeleteStackInstancesInput::is_deployment_targets_Set() const{
    return m_deployment_targets_isSet;
}

bool OAIDeleteStackInstancesInput::is_deployment_targets_Valid() const{
    return m_deployment_targets_isValid;
}

QList OAIDeleteStackInstancesInput::getRegions() const {
    return m_regions;
}
void OAIDeleteStackInstancesInput::setRegions(const QList &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIDeleteStackInstancesInput::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIDeleteStackInstancesInput::is_regions_Valid() const{
    return m_regions_isValid;
}

OAICreateStackInstancesInput_OperationPreferences OAIDeleteStackInstancesInput::getOperationPreferences() const {
    return m_operation_preferences;
}
void OAIDeleteStackInstancesInput::setOperationPreferences(const OAICreateStackInstancesInput_OperationPreferences &operation_preferences) {
    m_operation_preferences = operation_preferences;
    m_operation_preferences_isSet = true;
}

bool OAIDeleteStackInstancesInput::is_operation_preferences_Set() const{
    return m_operation_preferences_isSet;
}

bool OAIDeleteStackInstancesInput::is_operation_preferences_Valid() const{
    return m_operation_preferences_isValid;
}

bool OAIDeleteStackInstancesInput::getRetainStacks() const {
    return m_retain_stacks;
}
void OAIDeleteStackInstancesInput::setRetainStacks(const bool &retain_stacks) {
    m_retain_stacks = retain_stacks;
    m_retain_stacks_isSet = true;
}

bool OAIDeleteStackInstancesInput::is_retain_stacks_Set() const{
    return m_retain_stacks_isSet;
}

bool OAIDeleteStackInstancesInput::is_retain_stacks_Valid() const{
    return m_retain_stacks_isValid;
}

QString OAIDeleteStackInstancesInput::getOperationId() const {
    return m_operation_id;
}
void OAIDeleteStackInstancesInput::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIDeleteStackInstancesInput::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIDeleteStackInstancesInput::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAICallAs OAIDeleteStackInstancesInput::getCallAs() const {
    return m_call_as;
}
void OAIDeleteStackInstancesInput::setCallAs(const OAICallAs &call_as) {
    m_call_as = call_as;
    m_call_as_isSet = true;
}

bool OAIDeleteStackInstancesInput::is_call_as_Set() const{
    return m_call_as_isSet;
}

bool OAIDeleteStackInstancesInput::is_call_as_Valid() const{
    return m_call_as_isValid;
}

bool OAIDeleteStackInstancesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_stacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_as.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteStackInstancesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_set_name_isValid && m_regions_isValid && m_retain_stacks_isValid && true;
}

} // namespace OpenAPI
