/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnFailure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnFailure::OAIOnFailure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnFailure::OAIOnFailure() {
    this->initializeModel();
}

OAIOnFailure::~OAIOnFailure() {}

void OAIOnFailure::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOnFailure::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOnFailure::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DO_NOTHING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOnFailure::DO_NOTHING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ROLLBACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOnFailure::ROLLBACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOnFailure::DELETE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOnFailure::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOnFailure::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOnFailure::DO_NOTHING:
            val = "DO_NOTHING";
            break;
        case eOAIOnFailure::ROLLBACK:
            val = "ROLLBACK";
            break;
        case eOAIOnFailure::DELETE:
            val = "DELETE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOnFailure::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOnFailure::eOAIOnFailure OAIOnFailure::getValue() const {
    return m_value;
}

void OAIOnFailure::setValue(const OAIOnFailure::eOAIOnFailure& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOnFailure::isSet() const {
    
    return m_value_isSet;
}

bool OAIOnFailure::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
