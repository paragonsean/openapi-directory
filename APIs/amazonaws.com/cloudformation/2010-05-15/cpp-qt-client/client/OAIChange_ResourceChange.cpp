/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChange_ResourceChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChange_ResourceChange::OAIChange_ResourceChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChange_ResourceChange::OAIChange_ResourceChange() {
    this->initializeModel();
}

OAIChange_ResourceChange::~OAIChange_ResourceChange() {}

void OAIChange_ResourceChange::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_logical_resource_id_isSet = false;
    m_logical_resource_id_isValid = false;

    m_physical_resource_id_isSet = false;
    m_physical_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_replacement_isSet = false;
    m_replacement_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_change_set_id_isSet = false;
    m_change_set_id_isValid = false;

    m_module_info_isSet = false;
    m_module_info_isValid = false;
}

void OAIChange_ResourceChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChange_ResourceChange::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_logical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_logical_resource_id, json[QString("LogicalResourceId")]);
    m_logical_resource_id_isSet = !json[QString("LogicalResourceId")].isNull() && m_logical_resource_id_isValid;

    m_physical_resource_id_isValid = ::OpenAPI::fromJsonValue(m_physical_resource_id, json[QString("PhysicalResourceId")]);
    m_physical_resource_id_isSet = !json[QString("PhysicalResourceId")].isNull() && m_physical_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_replacement_isValid = ::OpenAPI::fromJsonValue(m_replacement, json[QString("Replacement")]);
    m_replacement_isSet = !json[QString("Replacement")].isNull() && m_replacement_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("Scope")]);
    m_scope_isSet = !json[QString("Scope")].isNull() && m_scope_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;

    m_change_set_id_isValid = ::OpenAPI::fromJsonValue(m_change_set_id, json[QString("ChangeSetId")]);
    m_change_set_id_isSet = !json[QString("ChangeSetId")].isNull() && m_change_set_id_isValid;

    m_module_info_isValid = ::OpenAPI::fromJsonValue(m_module_info, json[QString("ModuleInfo")]);
    m_module_info_isSet = !json[QString("ModuleInfo")].isNull() && m_module_info_isValid;
}

QString OAIChange_ResourceChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChange_ResourceChange::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_logical_resource_id_isSet) {
        obj.insert(QString("LogicalResourceId"), ::OpenAPI::toJsonValue(m_logical_resource_id));
    }
    if (m_physical_resource_id_isSet) {
        obj.insert(QString("PhysicalResourceId"), ::OpenAPI::toJsonValue(m_physical_resource_id));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_replacement.isSet()) {
        obj.insert(QString("Replacement"), ::OpenAPI::toJsonValue(m_replacement));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("Scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_details.isSet()) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_change_set_id_isSet) {
        obj.insert(QString("ChangeSetId"), ::OpenAPI::toJsonValue(m_change_set_id));
    }
    if (m_module_info.isSet()) {
        obj.insert(QString("ModuleInfo"), ::OpenAPI::toJsonValue(m_module_info));
    }
    return obj;
}

OAIChangeAction OAIChange_ResourceChange::getAction() const {
    return m_action;
}
void OAIChange_ResourceChange::setAction(const OAIChangeAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIChange_ResourceChange::is_action_Set() const{
    return m_action_isSet;
}

bool OAIChange_ResourceChange::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIChange_ResourceChange::getLogicalResourceId() const {
    return m_logical_resource_id;
}
void OAIChange_ResourceChange::setLogicalResourceId(const QString &logical_resource_id) {
    m_logical_resource_id = logical_resource_id;
    m_logical_resource_id_isSet = true;
}

bool OAIChange_ResourceChange::is_logical_resource_id_Set() const{
    return m_logical_resource_id_isSet;
}

bool OAIChange_ResourceChange::is_logical_resource_id_Valid() const{
    return m_logical_resource_id_isValid;
}

QString OAIChange_ResourceChange::getPhysicalResourceId() const {
    return m_physical_resource_id;
}
void OAIChange_ResourceChange::setPhysicalResourceId(const QString &physical_resource_id) {
    m_physical_resource_id = physical_resource_id;
    m_physical_resource_id_isSet = true;
}

bool OAIChange_ResourceChange::is_physical_resource_id_Set() const{
    return m_physical_resource_id_isSet;
}

bool OAIChange_ResourceChange::is_physical_resource_id_Valid() const{
    return m_physical_resource_id_isValid;
}

QString OAIChange_ResourceChange::getResourceType() const {
    return m_resource_type;
}
void OAIChange_ResourceChange::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIChange_ResourceChange::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIChange_ResourceChange::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIReplacement OAIChange_ResourceChange::getReplacement() const {
    return m_replacement;
}
void OAIChange_ResourceChange::setReplacement(const OAIReplacement &replacement) {
    m_replacement = replacement;
    m_replacement_isSet = true;
}

bool OAIChange_ResourceChange::is_replacement_Set() const{
    return m_replacement_isSet;
}

bool OAIChange_ResourceChange::is_replacement_Valid() const{
    return m_replacement_isValid;
}

QList OAIChange_ResourceChange::getScope() const {
    return m_scope;
}
void OAIChange_ResourceChange::setScope(const QList &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIChange_ResourceChange::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIChange_ResourceChange::is_scope_Valid() const{
    return m_scope_isValid;
}

QList OAIChange_ResourceChange::getDetails() const {
    return m_details;
}
void OAIChange_ResourceChange::setDetails(const QList &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIChange_ResourceChange::is_details_Set() const{
    return m_details_isSet;
}

bool OAIChange_ResourceChange::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIChange_ResourceChange::getChangeSetId() const {
    return m_change_set_id;
}
void OAIChange_ResourceChange::setChangeSetId(const QString &change_set_id) {
    m_change_set_id = change_set_id;
    m_change_set_id_isSet = true;
}

bool OAIChange_ResourceChange::is_change_set_id_Set() const{
    return m_change_set_id_isSet;
}

bool OAIChange_ResourceChange::is_change_set_id_Valid() const{
    return m_change_set_id_isValid;
}

OAIResourceChange_ModuleInfo OAIChange_ResourceChange::getModuleInfo() const {
    return m_module_info;
}
void OAIChange_ResourceChange::setModuleInfo(const OAIResourceChange_ModuleInfo &module_info) {
    m_module_info = module_info;
    m_module_info_isSet = true;
}

bool OAIChange_ResourceChange::is_module_info_Set() const{
    return m_module_info_isSet;
}

bool OAIChange_ResourceChange::is_module_info_Valid() const{
    return m_module_info_isValid;
}

bool OAIChange_ResourceChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_physical_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChange_ResourceChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
