/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStackResourceDriftsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStackResourceDriftsInput::OAIDescribeStackResourceDriftsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStackResourceDriftsInput::OAIDescribeStackResourceDriftsInput() {
    this->initializeModel();
}

OAIDescribeStackResourceDriftsInput::~OAIDescribeStackResourceDriftsInput() {}

void OAIDescribeStackResourceDriftsInput::initializeModel() {

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_stack_resource_drift_status_filters_isSet = false;
    m_stack_resource_drift_status_filters_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIDescribeStackResourceDriftsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStackResourceDriftsInput::fromJsonObject(QJsonObject json) {

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_stack_resource_drift_status_filters_isValid = ::OpenAPI::fromJsonValue(m_stack_resource_drift_status_filters, json[QString("StackResourceDriftStatusFilters")]);
    m_stack_resource_drift_status_filters_isSet = !json[QString("StackResourceDriftStatusFilters")].isNull() && m_stack_resource_drift_status_filters_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIDescribeStackResourceDriftsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStackResourceDriftsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_stack_resource_drift_status_filters.isSet()) {
        obj.insert(QString("StackResourceDriftStatusFilters"), ::OpenAPI::toJsonValue(m_stack_resource_drift_status_filters));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIDescribeStackResourceDriftsInput::getStackName() const {
    return m_stack_name;
}
void OAIDescribeStackResourceDriftsInput::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIDescribeStackResourceDriftsInput::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIDescribeStackResourceDriftsInput::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QList OAIDescribeStackResourceDriftsInput::getStackResourceDriftStatusFilters() const {
    return m_stack_resource_drift_status_filters;
}
void OAIDescribeStackResourceDriftsInput::setStackResourceDriftStatusFilters(const QList &stack_resource_drift_status_filters) {
    m_stack_resource_drift_status_filters = stack_resource_drift_status_filters;
    m_stack_resource_drift_status_filters_isSet = true;
}

bool OAIDescribeStackResourceDriftsInput::is_stack_resource_drift_status_filters_Set() const{
    return m_stack_resource_drift_status_filters_isSet;
}

bool OAIDescribeStackResourceDriftsInput::is_stack_resource_drift_status_filters_Valid() const{
    return m_stack_resource_drift_status_filters_isValid;
}

QString OAIDescribeStackResourceDriftsInput::getNextToken() const {
    return m_next_token;
}
void OAIDescribeStackResourceDriftsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeStackResourceDriftsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeStackResourceDriftsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeStackResourceDriftsInput::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeStackResourceDriftsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeStackResourceDriftsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeStackResourceDriftsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIDescribeStackResourceDriftsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_resource_drift_status_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStackResourceDriftsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_name_isValid && true;
}

} // namespace OpenAPI
