/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypeSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypeSummary::OAITypeSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypeSummary::OAITypeSummary() {
    this->initializeModel();
}

OAITypeSummary::~OAITypeSummary() {}

void OAITypeSummary::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_default_version_id_isSet = false;
    m_default_version_id_isValid = false;

    m_type_arn_isSet = false;
    m_type_arn_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;

    m_original_type_name_isSet = false;
    m_original_type_name_isValid = false;

    m_public_version_number_isSet = false;
    m_public_version_number_isValid = false;

    m_latest_public_version_isSet = false;
    m_latest_public_version_isValid = false;

    m_publisher_identity_isSet = false;
    m_publisher_identity_isValid = false;

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_is_activated_isSet = false;
    m_is_activated_isValid = false;
}

void OAITypeSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypeSummary::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_default_version_id_isValid = ::OpenAPI::fromJsonValue(m_default_version_id, json[QString("DefaultVersionId")]);
    m_default_version_id_isSet = !json[QString("DefaultVersionId")].isNull() && m_default_version_id_isValid;

    m_type_arn_isValid = ::OpenAPI::fromJsonValue(m_type_arn, json[QString("TypeArn")]);
    m_type_arn_isSet = !json[QString("TypeArn")].isNull() && m_type_arn_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("PublisherId")]);
    m_publisher_id_isSet = !json[QString("PublisherId")].isNull() && m_publisher_id_isValid;

    m_original_type_name_isValid = ::OpenAPI::fromJsonValue(m_original_type_name, json[QString("OriginalTypeName")]);
    m_original_type_name_isSet = !json[QString("OriginalTypeName")].isNull() && m_original_type_name_isValid;

    m_public_version_number_isValid = ::OpenAPI::fromJsonValue(m_public_version_number, json[QString("PublicVersionNumber")]);
    m_public_version_number_isSet = !json[QString("PublicVersionNumber")].isNull() && m_public_version_number_isValid;

    m_latest_public_version_isValid = ::OpenAPI::fromJsonValue(m_latest_public_version, json[QString("LatestPublicVersion")]);
    m_latest_public_version_isSet = !json[QString("LatestPublicVersion")].isNull() && m_latest_public_version_isValid;

    m_publisher_identity_isValid = ::OpenAPI::fromJsonValue(m_publisher_identity, json[QString("PublisherIdentity")]);
    m_publisher_identity_isSet = !json[QString("PublisherIdentity")].isNull() && m_publisher_identity_isValid;

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("PublisherName")]);
    m_publisher_name_isSet = !json[QString("PublisherName")].isNull() && m_publisher_name_isValid;

    m_is_activated_isValid = ::OpenAPI::fromJsonValue(m_is_activated, json[QString("IsActivated")]);
    m_is_activated_isSet = !json[QString("IsActivated")].isNull() && m_is_activated_isValid;
}

QString OAITypeSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypeSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_default_version_id_isSet) {
        obj.insert(QString("DefaultVersionId"), ::OpenAPI::toJsonValue(m_default_version_id));
    }
    if (m_type_arn_isSet) {
        obj.insert(QString("TypeArn"), ::OpenAPI::toJsonValue(m_type_arn));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("PublisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    if (m_original_type_name_isSet) {
        obj.insert(QString("OriginalTypeName"), ::OpenAPI::toJsonValue(m_original_type_name));
    }
    if (m_public_version_number_isSet) {
        obj.insert(QString("PublicVersionNumber"), ::OpenAPI::toJsonValue(m_public_version_number));
    }
    if (m_latest_public_version_isSet) {
        obj.insert(QString("LatestPublicVersion"), ::OpenAPI::toJsonValue(m_latest_public_version));
    }
    if (m_publisher_identity.isSet()) {
        obj.insert(QString("PublisherIdentity"), ::OpenAPI::toJsonValue(m_publisher_identity));
    }
    if (m_publisher_name_isSet) {
        obj.insert(QString("PublisherName"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_is_activated_isSet) {
        obj.insert(QString("IsActivated"), ::OpenAPI::toJsonValue(m_is_activated));
    }
    return obj;
}

OAIRegistryType OAITypeSummary::getType() const {
    return m_type;
}
void OAITypeSummary::setType(const OAIRegistryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITypeSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAITypeSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITypeSummary::getTypeName() const {
    return m_type_name;
}
void OAITypeSummary::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAITypeSummary::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAITypeSummary::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAITypeSummary::getDefaultVersionId() const {
    return m_default_version_id;
}
void OAITypeSummary::setDefaultVersionId(const QString &default_version_id) {
    m_default_version_id = default_version_id;
    m_default_version_id_isSet = true;
}

bool OAITypeSummary::is_default_version_id_Set() const{
    return m_default_version_id_isSet;
}

bool OAITypeSummary::is_default_version_id_Valid() const{
    return m_default_version_id_isValid;
}

QString OAITypeSummary::getTypeArn() const {
    return m_type_arn;
}
void OAITypeSummary::setTypeArn(const QString &type_arn) {
    m_type_arn = type_arn;
    m_type_arn_isSet = true;
}

bool OAITypeSummary::is_type_arn_Set() const{
    return m_type_arn_isSet;
}

bool OAITypeSummary::is_type_arn_Valid() const{
    return m_type_arn_isValid;
}

QDateTime OAITypeSummary::getLastUpdated() const {
    return m_last_updated;
}
void OAITypeSummary::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAITypeSummary::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAITypeSummary::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAITypeSummary::getDescription() const {
    return m_description;
}
void OAITypeSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITypeSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAITypeSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITypeSummary::getPublisherId() const {
    return m_publisher_id;
}
void OAITypeSummary::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAITypeSummary::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAITypeSummary::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

QString OAITypeSummary::getOriginalTypeName() const {
    return m_original_type_name;
}
void OAITypeSummary::setOriginalTypeName(const QString &original_type_name) {
    m_original_type_name = original_type_name;
    m_original_type_name_isSet = true;
}

bool OAITypeSummary::is_original_type_name_Set() const{
    return m_original_type_name_isSet;
}

bool OAITypeSummary::is_original_type_name_Valid() const{
    return m_original_type_name_isValid;
}

QString OAITypeSummary::getPublicVersionNumber() const {
    return m_public_version_number;
}
void OAITypeSummary::setPublicVersionNumber(const QString &public_version_number) {
    m_public_version_number = public_version_number;
    m_public_version_number_isSet = true;
}

bool OAITypeSummary::is_public_version_number_Set() const{
    return m_public_version_number_isSet;
}

bool OAITypeSummary::is_public_version_number_Valid() const{
    return m_public_version_number_isValid;
}

QString OAITypeSummary::getLatestPublicVersion() const {
    return m_latest_public_version;
}
void OAITypeSummary::setLatestPublicVersion(const QString &latest_public_version) {
    m_latest_public_version = latest_public_version;
    m_latest_public_version_isSet = true;
}

bool OAITypeSummary::is_latest_public_version_Set() const{
    return m_latest_public_version_isSet;
}

bool OAITypeSummary::is_latest_public_version_Valid() const{
    return m_latest_public_version_isValid;
}

OAIIdentityProvider OAITypeSummary::getPublisherIdentity() const {
    return m_publisher_identity;
}
void OAITypeSummary::setPublisherIdentity(const OAIIdentityProvider &publisher_identity) {
    m_publisher_identity = publisher_identity;
    m_publisher_identity_isSet = true;
}

bool OAITypeSummary::is_publisher_identity_Set() const{
    return m_publisher_identity_isSet;
}

bool OAITypeSummary::is_publisher_identity_Valid() const{
    return m_publisher_identity_isValid;
}

QString OAITypeSummary::getPublisherName() const {
    return m_publisher_name;
}
void OAITypeSummary::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAITypeSummary::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAITypeSummary::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

bool OAITypeSummary::getIsActivated() const {
    return m_is_activated;
}
void OAITypeSummary::setIsActivated(const bool &is_activated) {
    m_is_activated = is_activated;
    m_is_activated_isSet = true;
}

bool OAITypeSummary::is_is_activated_Set() const{
    return m_is_activated_isSet;
}

bool OAITypeSummary::is_is_activated_Valid() const{
    return m_is_activated_isValid;
}

bool OAITypeSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_public_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_activated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypeSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
