/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTemplateSummaryInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTemplateSummaryInput::OAIGetTemplateSummaryInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTemplateSummaryInput::OAIGetTemplateSummaryInput() {
    this->initializeModel();
}

OAIGetTemplateSummaryInput::~OAIGetTemplateSummaryInput() {}

void OAIGetTemplateSummaryInput::initializeModel() {

    m_template_body_isSet = false;
    m_template_body_isValid = false;

    m_template_url_isSet = false;
    m_template_url_isValid = false;

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_call_as_isSet = false;
    m_call_as_isValid = false;

    m_template_summary_config_isSet = false;
    m_template_summary_config_isValid = false;
}

void OAIGetTemplateSummaryInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTemplateSummaryInput::fromJsonObject(QJsonObject json) {

    m_template_body_isValid = ::OpenAPI::fromJsonValue(m_template_body, json[QString("TemplateBody")]);
    m_template_body_isSet = !json[QString("TemplateBody")].isNull() && m_template_body_isValid;

    m_template_url_isValid = ::OpenAPI::fromJsonValue(m_template_url, json[QString("TemplateURL")]);
    m_template_url_isSet = !json[QString("TemplateURL")].isNull() && m_template_url_isValid;

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("StackSetName")]);
    m_stack_set_name_isSet = !json[QString("StackSetName")].isNull() && m_stack_set_name_isValid;

    m_call_as_isValid = ::OpenAPI::fromJsonValue(m_call_as, json[QString("CallAs")]);
    m_call_as_isSet = !json[QString("CallAs")].isNull() && m_call_as_isValid;

    m_template_summary_config_isValid = ::OpenAPI::fromJsonValue(m_template_summary_config, json[QString("TemplateSummaryConfig")]);
    m_template_summary_config_isSet = !json[QString("TemplateSummaryConfig")].isNull() && m_template_summary_config_isValid;
}

QString OAIGetTemplateSummaryInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTemplateSummaryInput::asJsonObject() const {
    QJsonObject obj;
    if (m_template_body_isSet) {
        obj.insert(QString("TemplateBody"), ::OpenAPI::toJsonValue(m_template_body));
    }
    if (m_template_url_isSet) {
        obj.insert(QString("TemplateURL"), ::OpenAPI::toJsonValue(m_template_url));
    }
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_stack_set_name_isSet) {
        obj.insert(QString("StackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_call_as.isSet()) {
        obj.insert(QString("CallAs"), ::OpenAPI::toJsonValue(m_call_as));
    }
    if (m_template_summary_config.isSet()) {
        obj.insert(QString("TemplateSummaryConfig"), ::OpenAPI::toJsonValue(m_template_summary_config));
    }
    return obj;
}

QString OAIGetTemplateSummaryInput::getTemplateBody() const {
    return m_template_body;
}
void OAIGetTemplateSummaryInput::setTemplateBody(const QString &template_body) {
    m_template_body = template_body;
    m_template_body_isSet = true;
}

bool OAIGetTemplateSummaryInput::is_template_body_Set() const{
    return m_template_body_isSet;
}

bool OAIGetTemplateSummaryInput::is_template_body_Valid() const{
    return m_template_body_isValid;
}

QString OAIGetTemplateSummaryInput::getTemplateUrl() const {
    return m_template_url;
}
void OAIGetTemplateSummaryInput::setTemplateUrl(const QString &template_url) {
    m_template_url = template_url;
    m_template_url_isSet = true;
}

bool OAIGetTemplateSummaryInput::is_template_url_Set() const{
    return m_template_url_isSet;
}

bool OAIGetTemplateSummaryInput::is_template_url_Valid() const{
    return m_template_url_isValid;
}

QString OAIGetTemplateSummaryInput::getStackName() const {
    return m_stack_name;
}
void OAIGetTemplateSummaryInput::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIGetTemplateSummaryInput::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIGetTemplateSummaryInput::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIGetTemplateSummaryInput::getStackSetName() const {
    return m_stack_set_name;
}
void OAIGetTemplateSummaryInput::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIGetTemplateSummaryInput::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIGetTemplateSummaryInput::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

OAICallAs OAIGetTemplateSummaryInput::getCallAs() const {
    return m_call_as;
}
void OAIGetTemplateSummaryInput::setCallAs(const OAICallAs &call_as) {
    m_call_as = call_as;
    m_call_as_isSet = true;
}

bool OAIGetTemplateSummaryInput::is_call_as_Set() const{
    return m_call_as_isSet;
}

bool OAIGetTemplateSummaryInput::is_call_as_Valid() const{
    return m_call_as_isValid;
}

OAIGetTemplateSummaryInput_TemplateSummaryConfig OAIGetTemplateSummaryInput::getTemplateSummaryConfig() const {
    return m_template_summary_config;
}
void OAIGetTemplateSummaryInput::setTemplateSummaryConfig(const OAIGetTemplateSummaryInput_TemplateSummaryConfig &template_summary_config) {
    m_template_summary_config = template_summary_config;
    m_template_summary_config_isSet = true;
}

bool OAIGetTemplateSummaryInput::is_template_summary_config_Set() const{
    return m_template_summary_config_isSet;
}

bool OAIGetTemplateSummaryInput::is_template_summary_config_Valid() const{
    return m_template_summary_config_isValid;
}

bool OAIGetTemplateSummaryInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_template_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_as.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_summary_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTemplateSummaryInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
