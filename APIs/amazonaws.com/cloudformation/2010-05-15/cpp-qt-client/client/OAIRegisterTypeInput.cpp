/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterTypeInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterTypeInput::OAIRegisterTypeInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterTypeInput::OAIRegisterTypeInput() {
    this->initializeModel();
}

OAIRegisterTypeInput::~OAIRegisterTypeInput() {}

void OAIRegisterTypeInput::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_schema_handler_package_isSet = false;
    m_schema_handler_package_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAIRegisterTypeInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterTypeInput::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_schema_handler_package_isValid = ::OpenAPI::fromJsonValue(m_schema_handler_package, json[QString("SchemaHandlerPackage")]);
    m_schema_handler_package_isSet = !json[QString("SchemaHandlerPackage")].isNull() && m_schema_handler_package_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("LoggingConfig")]);
    m_logging_config_isSet = !json[QString("LoggingConfig")].isNull() && m_logging_config_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("ExecutionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("ExecutionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAIRegisterTypeInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterTypeInput::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_schema_handler_package_isSet) {
        obj.insert(QString("SchemaHandlerPackage"), ::OpenAPI::toJsonValue(m_schema_handler_package));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("LoggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("ExecutionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

OAIRegistryType OAIRegisterTypeInput::getType() const {
    return m_type;
}
void OAIRegisterTypeInput::setType(const OAIRegistryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRegisterTypeInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRegisterTypeInput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRegisterTypeInput::getTypeName() const {
    return m_type_name;
}
void OAIRegisterTypeInput::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIRegisterTypeInput::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIRegisterTypeInput::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIRegisterTypeInput::getSchemaHandlerPackage() const {
    return m_schema_handler_package;
}
void OAIRegisterTypeInput::setSchemaHandlerPackage(const QString &schema_handler_package) {
    m_schema_handler_package = schema_handler_package;
    m_schema_handler_package_isSet = true;
}

bool OAIRegisterTypeInput::is_schema_handler_package_Set() const{
    return m_schema_handler_package_isSet;
}

bool OAIRegisterTypeInput::is_schema_handler_package_Valid() const{
    return m_schema_handler_package_isValid;
}

OAIRegisterTypeInput_LoggingConfig OAIRegisterTypeInput::getLoggingConfig() const {
    return m_logging_config;
}
void OAIRegisterTypeInput::setLoggingConfig(const OAIRegisterTypeInput_LoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAIRegisterTypeInput::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAIRegisterTypeInput::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QString OAIRegisterTypeInput::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIRegisterTypeInput::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIRegisterTypeInput::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIRegisterTypeInput::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

QString OAIRegisterTypeInput::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIRegisterTypeInput::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIRegisterTypeInput::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIRegisterTypeInput::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAIRegisterTypeInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_handler_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterTypeInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_name_isValid && m_schema_handler_package_isValid && true;
}

} // namespace OpenAPI
