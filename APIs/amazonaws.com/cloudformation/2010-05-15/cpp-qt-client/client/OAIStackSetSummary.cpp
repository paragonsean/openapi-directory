/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackSetSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackSetSummary::OAIStackSetSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackSetSummary::OAIStackSetSummary() {
    this->initializeModel();
}

OAIStackSetSummary::~OAIStackSetSummary() {}

void OAIStackSetSummary::initializeModel() {

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_stack_set_id_isSet = false;
    m_stack_set_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_auto_deployment_isSet = false;
    m_auto_deployment_isValid = false;

    m_permission_model_isSet = false;
    m_permission_model_isValid = false;

    m_drift_status_isSet = false;
    m_drift_status_isValid = false;

    m_last_drift_check_timestamp_isSet = false;
    m_last_drift_check_timestamp_isValid = false;

    m_managed_execution_isSet = false;
    m_managed_execution_isValid = false;
}

void OAIStackSetSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackSetSummary::fromJsonObject(QJsonObject json) {

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("StackSetName")]);
    m_stack_set_name_isSet = !json[QString("StackSetName")].isNull() && m_stack_set_name_isValid;

    m_stack_set_id_isValid = ::OpenAPI::fromJsonValue(m_stack_set_id, json[QString("StackSetId")]);
    m_stack_set_id_isSet = !json[QString("StackSetId")].isNull() && m_stack_set_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_auto_deployment_isValid = ::OpenAPI::fromJsonValue(m_auto_deployment, json[QString("AutoDeployment")]);
    m_auto_deployment_isSet = !json[QString("AutoDeployment")].isNull() && m_auto_deployment_isValid;

    m_permission_model_isValid = ::OpenAPI::fromJsonValue(m_permission_model, json[QString("PermissionModel")]);
    m_permission_model_isSet = !json[QString("PermissionModel")].isNull() && m_permission_model_isValid;

    m_drift_status_isValid = ::OpenAPI::fromJsonValue(m_drift_status, json[QString("DriftStatus")]);
    m_drift_status_isSet = !json[QString("DriftStatus")].isNull() && m_drift_status_isValid;

    m_last_drift_check_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_drift_check_timestamp, json[QString("LastDriftCheckTimestamp")]);
    m_last_drift_check_timestamp_isSet = !json[QString("LastDriftCheckTimestamp")].isNull() && m_last_drift_check_timestamp_isValid;

    m_managed_execution_isValid = ::OpenAPI::fromJsonValue(m_managed_execution, json[QString("ManagedExecution")]);
    m_managed_execution_isSet = !json[QString("ManagedExecution")].isNull() && m_managed_execution_isValid;
}

QString OAIStackSetSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackSetSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_name_isSet) {
        obj.insert(QString("StackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_stack_set_id_isSet) {
        obj.insert(QString("StackSetId"), ::OpenAPI::toJsonValue(m_stack_set_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_auto_deployment.isSet()) {
        obj.insert(QString("AutoDeployment"), ::OpenAPI::toJsonValue(m_auto_deployment));
    }
    if (m_permission_model.isSet()) {
        obj.insert(QString("PermissionModel"), ::OpenAPI::toJsonValue(m_permission_model));
    }
    if (m_drift_status.isSet()) {
        obj.insert(QString("DriftStatus"), ::OpenAPI::toJsonValue(m_drift_status));
    }
    if (m_last_drift_check_timestamp_isSet) {
        obj.insert(QString("LastDriftCheckTimestamp"), ::OpenAPI::toJsonValue(m_last_drift_check_timestamp));
    }
    if (m_managed_execution.isSet()) {
        obj.insert(QString("ManagedExecution"), ::OpenAPI::toJsonValue(m_managed_execution));
    }
    return obj;
}

QString OAIStackSetSummary::getStackSetName() const {
    return m_stack_set_name;
}
void OAIStackSetSummary::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIStackSetSummary::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIStackSetSummary::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

QString OAIStackSetSummary::getStackSetId() const {
    return m_stack_set_id;
}
void OAIStackSetSummary::setStackSetId(const QString &stack_set_id) {
    m_stack_set_id = stack_set_id;
    m_stack_set_id_isSet = true;
}

bool OAIStackSetSummary::is_stack_set_id_Set() const{
    return m_stack_set_id_isSet;
}

bool OAIStackSetSummary::is_stack_set_id_Valid() const{
    return m_stack_set_id_isValid;
}

QString OAIStackSetSummary::getDescription() const {
    return m_description;
}
void OAIStackSetSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStackSetSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStackSetSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAIStackSetStatus OAIStackSetSummary::getStatus() const {
    return m_status;
}
void OAIStackSetSummary::setStatus(const OAIStackSetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStackSetSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStackSetSummary::is_status_Valid() const{
    return m_status_isValid;
}

OAIStackSetSummary_AutoDeployment OAIStackSetSummary::getAutoDeployment() const {
    return m_auto_deployment;
}
void OAIStackSetSummary::setAutoDeployment(const OAIStackSetSummary_AutoDeployment &auto_deployment) {
    m_auto_deployment = auto_deployment;
    m_auto_deployment_isSet = true;
}

bool OAIStackSetSummary::is_auto_deployment_Set() const{
    return m_auto_deployment_isSet;
}

bool OAIStackSetSummary::is_auto_deployment_Valid() const{
    return m_auto_deployment_isValid;
}

OAIPermissionModels OAIStackSetSummary::getPermissionModel() const {
    return m_permission_model;
}
void OAIStackSetSummary::setPermissionModel(const OAIPermissionModels &permission_model) {
    m_permission_model = permission_model;
    m_permission_model_isSet = true;
}

bool OAIStackSetSummary::is_permission_model_Set() const{
    return m_permission_model_isSet;
}

bool OAIStackSetSummary::is_permission_model_Valid() const{
    return m_permission_model_isValid;
}

OAIStackDriftStatus OAIStackSetSummary::getDriftStatus() const {
    return m_drift_status;
}
void OAIStackSetSummary::setDriftStatus(const OAIStackDriftStatus &drift_status) {
    m_drift_status = drift_status;
    m_drift_status_isSet = true;
}

bool OAIStackSetSummary::is_drift_status_Set() const{
    return m_drift_status_isSet;
}

bool OAIStackSetSummary::is_drift_status_Valid() const{
    return m_drift_status_isValid;
}

QDateTime OAIStackSetSummary::getLastDriftCheckTimestamp() const {
    return m_last_drift_check_timestamp;
}
void OAIStackSetSummary::setLastDriftCheckTimestamp(const QDateTime &last_drift_check_timestamp) {
    m_last_drift_check_timestamp = last_drift_check_timestamp;
    m_last_drift_check_timestamp_isSet = true;
}

bool OAIStackSetSummary::is_last_drift_check_timestamp_Set() const{
    return m_last_drift_check_timestamp_isSet;
}

bool OAIStackSetSummary::is_last_drift_check_timestamp_Valid() const{
    return m_last_drift_check_timestamp_isValid;
}

OAICreateStackSetInput_ManagedExecution OAIStackSetSummary::getManagedExecution() const {
    return m_managed_execution;
}
void OAIStackSetSummary::setManagedExecution(const OAICreateStackSetInput_ManagedExecution &managed_execution) {
    m_managed_execution = managed_execution;
    m_managed_execution_isSet = true;
}

bool OAIStackSetSummary::is_managed_execution_Set() const{
    return m_managed_execution_isSet;
}

bool OAIStackSetSummary::is_managed_execution_Valid() const{
    return m_managed_execution_isValid;
}

bool OAIStackSetSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_drift_check_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackSetSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
