/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeStackInstanceOutput_StackInstance.h
 *
 * 
 */

#ifndef OAIDescribeStackInstanceOutput_StackInstance_H
#define OAIDescribeStackInstanceOutput_StackInstance_H

#include <QJsonObject>

#include "OAIStackDriftStatus.h"
#include "OAIStackInstanceStatus.h"
#include "OAIStackInstance_StackInstanceStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStackInstance_StackInstanceStatus;

class OAIDescribeStackInstanceOutput_StackInstance : public OAIObject {
public:
    OAIDescribeStackInstanceOutput_StackInstance();
    OAIDescribeStackInstanceOutput_StackInstance(QString json);
    ~OAIDescribeStackInstanceOutput_StackInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getStackSetId() const;
    void setStackSetId(const QString &stack_set_id);
    bool is_stack_set_id_Set() const;
    bool is_stack_set_id_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    QString getAccount() const;
    void setAccount(const QString &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    QString getStackId() const;
    void setStackId(const QString &stack_id);
    bool is_stack_id_Set() const;
    bool is_stack_id_Valid() const;

    QList getParameterOverrides() const;
    void setParameterOverrides(const QList &parameter_overrides);
    bool is_parameter_overrides_Set() const;
    bool is_parameter_overrides_Valid() const;

    OAIStackInstanceStatus getStatus() const;
    void setStatus(const OAIStackInstanceStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIStackInstance_StackInstanceStatus getStackInstanceStatus() const;
    void setStackInstanceStatus(const OAIStackInstance_StackInstanceStatus &stack_instance_status);
    bool is_stack_instance_status_Set() const;
    bool is_stack_instance_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    QString getOrganizationalUnitId() const;
    void setOrganizationalUnitId(const QString &organizational_unit_id);
    bool is_organizational_unit_id_Set() const;
    bool is_organizational_unit_id_Valid() const;

    OAIStackDriftStatus getDriftStatus() const;
    void setDriftStatus(const OAIStackDriftStatus &drift_status);
    bool is_drift_status_Set() const;
    bool is_drift_status_Valid() const;

    QDateTime getLastDriftCheckTimestamp() const;
    void setLastDriftCheckTimestamp(const QDateTime &last_drift_check_timestamp);
    bool is_last_drift_check_timestamp_Set() const;
    bool is_last_drift_check_timestamp_Valid() const;

    QString getLastOperationId() const;
    void setLastOperationId(const QString &last_operation_id);
    bool is_last_operation_id_Set() const;
    bool is_last_operation_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_stack_set_id;
    bool m_stack_set_id_isSet;
    bool m_stack_set_id_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    QString m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    QString m_stack_id;
    bool m_stack_id_isSet;
    bool m_stack_id_isValid;

    QList m_parameter_overrides;
    bool m_parameter_overrides_isSet;
    bool m_parameter_overrides_isValid;

    OAIStackInstanceStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIStackInstance_StackInstanceStatus m_stack_instance_status;
    bool m_stack_instance_status_isSet;
    bool m_stack_instance_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    QString m_organizational_unit_id;
    bool m_organizational_unit_id_isSet;
    bool m_organizational_unit_id_isValid;

    OAIStackDriftStatus m_drift_status;
    bool m_drift_status_isSet;
    bool m_drift_status_isValid;

    QDateTime m_last_drift_check_timestamp;
    bool m_last_drift_check_timestamp_isSet;
    bool m_last_drift_check_timestamp_isValid;

    QString m_last_operation_id;
    bool m_last_operation_id_isSet;
    bool m_last_operation_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeStackInstanceOutput_StackInstance)

#endif // OAIDescribeStackInstanceOutput_StackInstance_H
