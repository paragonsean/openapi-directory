/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackSetOperationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackSetOperationSummary::OAIStackSetOperationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackSetOperationSummary::OAIStackSetOperationSummary() {
    this->initializeModel();
}

OAIStackSetOperationSummary::~OAIStackSetOperationSummary() {}

void OAIStackSetOperationSummary::initializeModel() {

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_timestamp_isSet = false;
    m_creation_timestamp_isValid = false;

    m_end_timestamp_isSet = false;
    m_end_timestamp_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_status_details_isSet = false;
    m_status_details_isValid = false;

    m_operation_preferences_isSet = false;
    m_operation_preferences_isValid = false;
}

void OAIStackSetOperationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackSetOperationSummary::fromJsonObject(QJsonObject json) {

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_timestamp_isValid = ::OpenAPI::fromJsonValue(m_creation_timestamp, json[QString("CreationTimestamp")]);
    m_creation_timestamp_isSet = !json[QString("CreationTimestamp")].isNull() && m_creation_timestamp_isValid;

    m_end_timestamp_isValid = ::OpenAPI::fromJsonValue(m_end_timestamp, json[QString("EndTimestamp")]);
    m_end_timestamp_isSet = !json[QString("EndTimestamp")].isNull() && m_end_timestamp_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_status_details_isValid = ::OpenAPI::fromJsonValue(m_status_details, json[QString("StatusDetails")]);
    m_status_details_isSet = !json[QString("StatusDetails")].isNull() && m_status_details_isValid;

    m_operation_preferences_isValid = ::OpenAPI::fromJsonValue(m_operation_preferences, json[QString("OperationPreferences")]);
    m_operation_preferences_isSet = !json[QString("OperationPreferences")].isNull() && m_operation_preferences_isValid;
}

QString OAIStackSetOperationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackSetOperationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_timestamp_isSet) {
        obj.insert(QString("CreationTimestamp"), ::OpenAPI::toJsonValue(m_creation_timestamp));
    }
    if (m_end_timestamp_isSet) {
        obj.insert(QString("EndTimestamp"), ::OpenAPI::toJsonValue(m_end_timestamp));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_status_details.isSet()) {
        obj.insert(QString("StatusDetails"), ::OpenAPI::toJsonValue(m_status_details));
    }
    if (m_operation_preferences.isSet()) {
        obj.insert(QString("OperationPreferences"), ::OpenAPI::toJsonValue(m_operation_preferences));
    }
    return obj;
}

QString OAIStackSetOperationSummary::getOperationId() const {
    return m_operation_id;
}
void OAIStackSetOperationSummary::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIStackSetOperationSummary::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIStackSetOperationSummary::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAIStackSetOperationAction OAIStackSetOperationSummary::getAction() const {
    return m_action;
}
void OAIStackSetOperationSummary::setAction(const OAIStackSetOperationAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIStackSetOperationSummary::is_action_Set() const{
    return m_action_isSet;
}

bool OAIStackSetOperationSummary::is_action_Valid() const{
    return m_action_isValid;
}

OAIStackSetOperationStatus OAIStackSetOperationSummary::getStatus() const {
    return m_status;
}
void OAIStackSetOperationSummary::setStatus(const OAIStackSetOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStackSetOperationSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStackSetOperationSummary::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIStackSetOperationSummary::getCreationTimestamp() const {
    return m_creation_timestamp;
}
void OAIStackSetOperationSummary::setCreationTimestamp(const QDateTime &creation_timestamp) {
    m_creation_timestamp = creation_timestamp;
    m_creation_timestamp_isSet = true;
}

bool OAIStackSetOperationSummary::is_creation_timestamp_Set() const{
    return m_creation_timestamp_isSet;
}

bool OAIStackSetOperationSummary::is_creation_timestamp_Valid() const{
    return m_creation_timestamp_isValid;
}

QDateTime OAIStackSetOperationSummary::getEndTimestamp() const {
    return m_end_timestamp;
}
void OAIStackSetOperationSummary::setEndTimestamp(const QDateTime &end_timestamp) {
    m_end_timestamp = end_timestamp;
    m_end_timestamp_isSet = true;
}

bool OAIStackSetOperationSummary::is_end_timestamp_Set() const{
    return m_end_timestamp_isSet;
}

bool OAIStackSetOperationSummary::is_end_timestamp_Valid() const{
    return m_end_timestamp_isValid;
}

QString OAIStackSetOperationSummary::getStatusReason() const {
    return m_status_reason;
}
void OAIStackSetOperationSummary::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIStackSetOperationSummary::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIStackSetOperationSummary::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

OAIStackSetOperationSummary_StatusDetails OAIStackSetOperationSummary::getStatusDetails() const {
    return m_status_details;
}
void OAIStackSetOperationSummary::setStatusDetails(const OAIStackSetOperationSummary_StatusDetails &status_details) {
    m_status_details = status_details;
    m_status_details_isSet = true;
}

bool OAIStackSetOperationSummary::is_status_details_Set() const{
    return m_status_details_isSet;
}

bool OAIStackSetOperationSummary::is_status_details_Valid() const{
    return m_status_details_isValid;
}

OAIDetectStackSetDriftInput_OperationPreferences OAIStackSetOperationSummary::getOperationPreferences() const {
    return m_operation_preferences;
}
void OAIStackSetOperationSummary::setOperationPreferences(const OAIDetectStackSetDriftInput_OperationPreferences &operation_preferences) {
    m_operation_preferences = operation_preferences;
    m_operation_preferences_isSet = true;
}

bool OAIStackSetOperationSummary::is_operation_preferences_Set() const{
    return m_operation_preferences_isSet;
}

bool OAIStackSetOperationSummary::is_operation_preferences_Valid() const{
    return m_operation_preferences_isValid;
}

bool OAIStackSetOperationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackSetOperationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
