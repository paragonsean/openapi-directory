/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTypeInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTypeInput::OAIDescribeTypeInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTypeInput::OAIDescribeTypeInput() {
    this->initializeModel();
}

OAIDescribeTypeInput::~OAIDescribeTypeInput() {}

void OAIDescribeTypeInput::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;

    m_public_version_number_isSet = false;
    m_public_version_number_isValid = false;
}

void OAIDescribeTypeInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTypeInput::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("PublisherId")]);
    m_publisher_id_isSet = !json[QString("PublisherId")].isNull() && m_publisher_id_isValid;

    m_public_version_number_isValid = ::OpenAPI::fromJsonValue(m_public_version_number, json[QString("PublicVersionNumber")]);
    m_public_version_number_isSet = !json[QString("PublicVersionNumber")].isNull() && m_public_version_number_isValid;
}

QString OAIDescribeTypeInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTypeInput::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("PublisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    if (m_public_version_number_isSet) {
        obj.insert(QString("PublicVersionNumber"), ::OpenAPI::toJsonValue(m_public_version_number));
    }
    return obj;
}

OAIRegistryType OAIDescribeTypeInput::getType() const {
    return m_type;
}
void OAIDescribeTypeInput::setType(const OAIRegistryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeTypeInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeTypeInput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDescribeTypeInput::getTypeName() const {
    return m_type_name;
}
void OAIDescribeTypeInput::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIDescribeTypeInput::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIDescribeTypeInput::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIDescribeTypeInput::getArn() const {
    return m_arn;
}
void OAIDescribeTypeInput::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeTypeInput::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeTypeInput::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIDescribeTypeInput::getVersionId() const {
    return m_version_id;
}
void OAIDescribeTypeInput::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIDescribeTypeInput::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIDescribeTypeInput::is_version_id_Valid() const{
    return m_version_id_isValid;
}

QString OAIDescribeTypeInput::getPublisherId() const {
    return m_publisher_id;
}
void OAIDescribeTypeInput::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIDescribeTypeInput::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIDescribeTypeInput::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

QString OAIDescribeTypeInput::getPublicVersionNumber() const {
    return m_public_version_number;
}
void OAIDescribeTypeInput::setPublicVersionNumber(const QString &public_version_number) {
    m_public_version_number = public_version_number;
    m_public_version_number_isSet = true;
}

bool OAIDescribeTypeInput::is_public_version_number_Set() const{
    return m_public_version_number_isSet;
}

bool OAIDescribeTypeInput::is_public_version_number_Valid() const{
    return m_public_version_number_isValid;
}

bool OAIDescribeTypeInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTypeInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
