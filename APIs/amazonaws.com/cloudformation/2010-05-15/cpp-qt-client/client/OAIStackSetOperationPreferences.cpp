/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackSetOperationPreferences.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackSetOperationPreferences::OAIStackSetOperationPreferences(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackSetOperationPreferences::OAIStackSetOperationPreferences() {
    this->initializeModel();
}

OAIStackSetOperationPreferences::~OAIStackSetOperationPreferences() {}

void OAIStackSetOperationPreferences::initializeModel() {

    m_region_concurrency_type_isSet = false;
    m_region_concurrency_type_isValid = false;

    m_region_order_isSet = false;
    m_region_order_isValid = false;

    m_failure_tolerance_count_isSet = false;
    m_failure_tolerance_count_isValid = false;

    m_failure_tolerance_percentage_isSet = false;
    m_failure_tolerance_percentage_isValid = false;

    m_max_concurrent_count_isSet = false;
    m_max_concurrent_count_isValid = false;

    m_max_concurrent_percentage_isSet = false;
    m_max_concurrent_percentage_isValid = false;
}

void OAIStackSetOperationPreferences::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackSetOperationPreferences::fromJsonObject(QJsonObject json) {

    m_region_concurrency_type_isValid = ::OpenAPI::fromJsonValue(m_region_concurrency_type, json[QString("RegionConcurrencyType")]);
    m_region_concurrency_type_isSet = !json[QString("RegionConcurrencyType")].isNull() && m_region_concurrency_type_isValid;

    m_region_order_isValid = ::OpenAPI::fromJsonValue(m_region_order, json[QString("RegionOrder")]);
    m_region_order_isSet = !json[QString("RegionOrder")].isNull() && m_region_order_isValid;

    m_failure_tolerance_count_isValid = ::OpenAPI::fromJsonValue(m_failure_tolerance_count, json[QString("FailureToleranceCount")]);
    m_failure_tolerance_count_isSet = !json[QString("FailureToleranceCount")].isNull() && m_failure_tolerance_count_isValid;

    m_failure_tolerance_percentage_isValid = ::OpenAPI::fromJsonValue(m_failure_tolerance_percentage, json[QString("FailureTolerancePercentage")]);
    m_failure_tolerance_percentage_isSet = !json[QString("FailureTolerancePercentage")].isNull() && m_failure_tolerance_percentage_isValid;

    m_max_concurrent_count_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_count, json[QString("MaxConcurrentCount")]);
    m_max_concurrent_count_isSet = !json[QString("MaxConcurrentCount")].isNull() && m_max_concurrent_count_isValid;

    m_max_concurrent_percentage_isValid = ::OpenAPI::fromJsonValue(m_max_concurrent_percentage, json[QString("MaxConcurrentPercentage")]);
    m_max_concurrent_percentage_isSet = !json[QString("MaxConcurrentPercentage")].isNull() && m_max_concurrent_percentage_isValid;
}

QString OAIStackSetOperationPreferences::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackSetOperationPreferences::asJsonObject() const {
    QJsonObject obj;
    if (m_region_concurrency_type.isSet()) {
        obj.insert(QString("RegionConcurrencyType"), ::OpenAPI::toJsonValue(m_region_concurrency_type));
    }
    if (m_region_order.isSet()) {
        obj.insert(QString("RegionOrder"), ::OpenAPI::toJsonValue(m_region_order));
    }
    if (m_failure_tolerance_count_isSet) {
        obj.insert(QString("FailureToleranceCount"), ::OpenAPI::toJsonValue(m_failure_tolerance_count));
    }
    if (m_failure_tolerance_percentage_isSet) {
        obj.insert(QString("FailureTolerancePercentage"), ::OpenAPI::toJsonValue(m_failure_tolerance_percentage));
    }
    if (m_max_concurrent_count_isSet) {
        obj.insert(QString("MaxConcurrentCount"), ::OpenAPI::toJsonValue(m_max_concurrent_count));
    }
    if (m_max_concurrent_percentage_isSet) {
        obj.insert(QString("MaxConcurrentPercentage"), ::OpenAPI::toJsonValue(m_max_concurrent_percentage));
    }
    return obj;
}

OAIRegionConcurrencyType OAIStackSetOperationPreferences::getRegionConcurrencyType() const {
    return m_region_concurrency_type;
}
void OAIStackSetOperationPreferences::setRegionConcurrencyType(const OAIRegionConcurrencyType &region_concurrency_type) {
    m_region_concurrency_type = region_concurrency_type;
    m_region_concurrency_type_isSet = true;
}

bool OAIStackSetOperationPreferences::is_region_concurrency_type_Set() const{
    return m_region_concurrency_type_isSet;
}

bool OAIStackSetOperationPreferences::is_region_concurrency_type_Valid() const{
    return m_region_concurrency_type_isValid;
}

QList OAIStackSetOperationPreferences::getRegionOrder() const {
    return m_region_order;
}
void OAIStackSetOperationPreferences::setRegionOrder(const QList &region_order) {
    m_region_order = region_order;
    m_region_order_isSet = true;
}

bool OAIStackSetOperationPreferences::is_region_order_Set() const{
    return m_region_order_isSet;
}

bool OAIStackSetOperationPreferences::is_region_order_Valid() const{
    return m_region_order_isValid;
}

qint32 OAIStackSetOperationPreferences::getFailureToleranceCount() const {
    return m_failure_tolerance_count;
}
void OAIStackSetOperationPreferences::setFailureToleranceCount(const qint32 &failure_tolerance_count) {
    m_failure_tolerance_count = failure_tolerance_count;
    m_failure_tolerance_count_isSet = true;
}

bool OAIStackSetOperationPreferences::is_failure_tolerance_count_Set() const{
    return m_failure_tolerance_count_isSet;
}

bool OAIStackSetOperationPreferences::is_failure_tolerance_count_Valid() const{
    return m_failure_tolerance_count_isValid;
}

qint32 OAIStackSetOperationPreferences::getFailureTolerancePercentage() const {
    return m_failure_tolerance_percentage;
}
void OAIStackSetOperationPreferences::setFailureTolerancePercentage(const qint32 &failure_tolerance_percentage) {
    m_failure_tolerance_percentage = failure_tolerance_percentage;
    m_failure_tolerance_percentage_isSet = true;
}

bool OAIStackSetOperationPreferences::is_failure_tolerance_percentage_Set() const{
    return m_failure_tolerance_percentage_isSet;
}

bool OAIStackSetOperationPreferences::is_failure_tolerance_percentage_Valid() const{
    return m_failure_tolerance_percentage_isValid;
}

qint32 OAIStackSetOperationPreferences::getMaxConcurrentCount() const {
    return m_max_concurrent_count;
}
void OAIStackSetOperationPreferences::setMaxConcurrentCount(const qint32 &max_concurrent_count) {
    m_max_concurrent_count = max_concurrent_count;
    m_max_concurrent_count_isSet = true;
}

bool OAIStackSetOperationPreferences::is_max_concurrent_count_Set() const{
    return m_max_concurrent_count_isSet;
}

bool OAIStackSetOperationPreferences::is_max_concurrent_count_Valid() const{
    return m_max_concurrent_count_isValid;
}

qint32 OAIStackSetOperationPreferences::getMaxConcurrentPercentage() const {
    return m_max_concurrent_percentage;
}
void OAIStackSetOperationPreferences::setMaxConcurrentPercentage(const qint32 &max_concurrent_percentage) {
    m_max_concurrent_percentage = max_concurrent_percentage;
    m_max_concurrent_percentage_isSet = true;
}

bool OAIStackSetOperationPreferences::is_max_concurrent_percentage_Set() const{
    return m_max_concurrent_percentage_isSet;
}

bool OAIStackSetOperationPreferences::is_max_concurrent_percentage_Valid() const{
    return m_max_concurrent_percentage_isValid;
}

bool OAIStackSetOperationPreferences::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_region_concurrency_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_tolerance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_tolerance_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_concurrent_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackSetOperationPreferences::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
