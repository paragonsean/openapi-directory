/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeSetHook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeSetHook::OAIChangeSetHook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeSetHook::OAIChangeSetHook() {
    this->initializeModel();
}

OAIChangeSetHook::~OAIChangeSetHook() {}

void OAIChangeSetHook::initializeModel() {

    m_invocation_point_isSet = false;
    m_invocation_point_isValid = false;

    m_failure_mode_isSet = false;
    m_failure_mode_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_type_version_id_isSet = false;
    m_type_version_id_isValid = false;

    m_type_configuration_version_id_isSet = false;
    m_type_configuration_version_id_isValid = false;

    m_target_details_isSet = false;
    m_target_details_isValid = false;
}

void OAIChangeSetHook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeSetHook::fromJsonObject(QJsonObject json) {

    m_invocation_point_isValid = ::OpenAPI::fromJsonValue(m_invocation_point, json[QString("InvocationPoint")]);
    m_invocation_point_isSet = !json[QString("InvocationPoint")].isNull() && m_invocation_point_isValid;

    m_failure_mode_isValid = ::OpenAPI::fromJsonValue(m_failure_mode, json[QString("FailureMode")]);
    m_failure_mode_isSet = !json[QString("FailureMode")].isNull() && m_failure_mode_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_type_version_id_isValid = ::OpenAPI::fromJsonValue(m_type_version_id, json[QString("TypeVersionId")]);
    m_type_version_id_isSet = !json[QString("TypeVersionId")].isNull() && m_type_version_id_isValid;

    m_type_configuration_version_id_isValid = ::OpenAPI::fromJsonValue(m_type_configuration_version_id, json[QString("TypeConfigurationVersionId")]);
    m_type_configuration_version_id_isSet = !json[QString("TypeConfigurationVersionId")].isNull() && m_type_configuration_version_id_isValid;

    m_target_details_isValid = ::OpenAPI::fromJsonValue(m_target_details, json[QString("TargetDetails")]);
    m_target_details_isSet = !json[QString("TargetDetails")].isNull() && m_target_details_isValid;
}

QString OAIChangeSetHook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeSetHook::asJsonObject() const {
    QJsonObject obj;
    if (m_invocation_point.isSet()) {
        obj.insert(QString("InvocationPoint"), ::OpenAPI::toJsonValue(m_invocation_point));
    }
    if (m_failure_mode.isSet()) {
        obj.insert(QString("FailureMode"), ::OpenAPI::toJsonValue(m_failure_mode));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_type_version_id_isSet) {
        obj.insert(QString("TypeVersionId"), ::OpenAPI::toJsonValue(m_type_version_id));
    }
    if (m_type_configuration_version_id_isSet) {
        obj.insert(QString("TypeConfigurationVersionId"), ::OpenAPI::toJsonValue(m_type_configuration_version_id));
    }
    if (m_target_details.isSet()) {
        obj.insert(QString("TargetDetails"), ::OpenAPI::toJsonValue(m_target_details));
    }
    return obj;
}

OAIHookInvocationPoint OAIChangeSetHook::getInvocationPoint() const {
    return m_invocation_point;
}
void OAIChangeSetHook::setInvocationPoint(const OAIHookInvocationPoint &invocation_point) {
    m_invocation_point = invocation_point;
    m_invocation_point_isSet = true;
}

bool OAIChangeSetHook::is_invocation_point_Set() const{
    return m_invocation_point_isSet;
}

bool OAIChangeSetHook::is_invocation_point_Valid() const{
    return m_invocation_point_isValid;
}

OAIHookFailureMode OAIChangeSetHook::getFailureMode() const {
    return m_failure_mode;
}
void OAIChangeSetHook::setFailureMode(const OAIHookFailureMode &failure_mode) {
    m_failure_mode = failure_mode;
    m_failure_mode_isSet = true;
}

bool OAIChangeSetHook::is_failure_mode_Set() const{
    return m_failure_mode_isSet;
}

bool OAIChangeSetHook::is_failure_mode_Valid() const{
    return m_failure_mode_isValid;
}

QString OAIChangeSetHook::getTypeName() const {
    return m_type_name;
}
void OAIChangeSetHook::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIChangeSetHook::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIChangeSetHook::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIChangeSetHook::getTypeVersionId() const {
    return m_type_version_id;
}
void OAIChangeSetHook::setTypeVersionId(const QString &type_version_id) {
    m_type_version_id = type_version_id;
    m_type_version_id_isSet = true;
}

bool OAIChangeSetHook::is_type_version_id_Set() const{
    return m_type_version_id_isSet;
}

bool OAIChangeSetHook::is_type_version_id_Valid() const{
    return m_type_version_id_isValid;
}

QString OAIChangeSetHook::getTypeConfigurationVersionId() const {
    return m_type_configuration_version_id;
}
void OAIChangeSetHook::setTypeConfigurationVersionId(const QString &type_configuration_version_id) {
    m_type_configuration_version_id = type_configuration_version_id;
    m_type_configuration_version_id_isSet = true;
}

bool OAIChangeSetHook::is_type_configuration_version_id_Set() const{
    return m_type_configuration_version_id_isSet;
}

bool OAIChangeSetHook::is_type_configuration_version_id_Valid() const{
    return m_type_configuration_version_id_isValid;
}

OAIChangeSetHook_TargetDetails OAIChangeSetHook::getTargetDetails() const {
    return m_target_details;
}
void OAIChangeSetHook::setTargetDetails(const OAIChangeSetHook_TargetDetails &target_details) {
    m_target_details = target_details;
    m_target_details_isSet = true;
}

bool OAIChangeSetHook::is_target_details_Set() const{
    return m_target_details_isSet;
}

bool OAIChangeSetHook::is_target_details_Valid() const{
    return m_target_details_isValid;
}

bool OAIChangeSetHook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invocation_point.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_configuration_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeSetHook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
