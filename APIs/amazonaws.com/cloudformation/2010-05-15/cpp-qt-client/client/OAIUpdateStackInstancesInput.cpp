/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateStackInstancesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateStackInstancesInput::OAIUpdateStackInstancesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateStackInstancesInput::OAIUpdateStackInstancesInput() {
    this->initializeModel();
}

OAIUpdateStackInstancesInput::~OAIUpdateStackInstancesInput() {}

void OAIUpdateStackInstancesInput::initializeModel() {

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_deployment_targets_isSet = false;
    m_deployment_targets_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_parameter_overrides_isSet = false;
    m_parameter_overrides_isValid = false;

    m_operation_preferences_isSet = false;
    m_operation_preferences_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_call_as_isSet = false;
    m_call_as_isValid = false;
}

void OAIUpdateStackInstancesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateStackInstancesInput::fromJsonObject(QJsonObject json) {

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("StackSetName")]);
    m_stack_set_name_isSet = !json[QString("StackSetName")].isNull() && m_stack_set_name_isValid;

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("Accounts")]);
    m_accounts_isSet = !json[QString("Accounts")].isNull() && m_accounts_isValid;

    m_deployment_targets_isValid = ::OpenAPI::fromJsonValue(m_deployment_targets, json[QString("DeploymentTargets")]);
    m_deployment_targets_isSet = !json[QString("DeploymentTargets")].isNull() && m_deployment_targets_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("Regions")]);
    m_regions_isSet = !json[QString("Regions")].isNull() && m_regions_isValid;

    m_parameter_overrides_isValid = ::OpenAPI::fromJsonValue(m_parameter_overrides, json[QString("ParameterOverrides")]);
    m_parameter_overrides_isSet = !json[QString("ParameterOverrides")].isNull() && m_parameter_overrides_isValid;

    m_operation_preferences_isValid = ::OpenAPI::fromJsonValue(m_operation_preferences, json[QString("OperationPreferences")]);
    m_operation_preferences_isSet = !json[QString("OperationPreferences")].isNull() && m_operation_preferences_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;

    m_call_as_isValid = ::OpenAPI::fromJsonValue(m_call_as, json[QString("CallAs")]);
    m_call_as_isSet = !json[QString("CallAs")].isNull() && m_call_as_isValid;
}

QString OAIUpdateStackInstancesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateStackInstancesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_name_isSet) {
        obj.insert(QString("StackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_accounts.isSet()) {
        obj.insert(QString("Accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_deployment_targets.isSet()) {
        obj.insert(QString("DeploymentTargets"), ::OpenAPI::toJsonValue(m_deployment_targets));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("Regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_parameter_overrides.isSet()) {
        obj.insert(QString("ParameterOverrides"), ::OpenAPI::toJsonValue(m_parameter_overrides));
    }
    if (m_operation_preferences.isSet()) {
        obj.insert(QString("OperationPreferences"), ::OpenAPI::toJsonValue(m_operation_preferences));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_call_as.isSet()) {
        obj.insert(QString("CallAs"), ::OpenAPI::toJsonValue(m_call_as));
    }
    return obj;
}

QString OAIUpdateStackInstancesInput::getStackSetName() const {
    return m_stack_set_name;
}
void OAIUpdateStackInstancesInput::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIUpdateStackInstancesInput::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIUpdateStackInstancesInput::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

QList OAIUpdateStackInstancesInput::getAccounts() const {
    return m_accounts;
}
void OAIUpdateStackInstancesInput::setAccounts(const QList &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIUpdateStackInstancesInput::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIUpdateStackInstancesInput::is_accounts_Valid() const{
    return m_accounts_isValid;
}

OAIUpdateStackInstancesInput_DeploymentTargets OAIUpdateStackInstancesInput::getDeploymentTargets() const {
    return m_deployment_targets;
}
void OAIUpdateStackInstancesInput::setDeploymentTargets(const OAIUpdateStackInstancesInput_DeploymentTargets &deployment_targets) {
    m_deployment_targets = deployment_targets;
    m_deployment_targets_isSet = true;
}

bool OAIUpdateStackInstancesInput::is_deployment_targets_Set() const{
    return m_deployment_targets_isSet;
}

bool OAIUpdateStackInstancesInput::is_deployment_targets_Valid() const{
    return m_deployment_targets_isValid;
}

QList OAIUpdateStackInstancesInput::getRegions() const {
    return m_regions;
}
void OAIUpdateStackInstancesInput::setRegions(const QList &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIUpdateStackInstancesInput::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIUpdateStackInstancesInput::is_regions_Valid() const{
    return m_regions_isValid;
}

QList OAIUpdateStackInstancesInput::getParameterOverrides() const {
    return m_parameter_overrides;
}
void OAIUpdateStackInstancesInput::setParameterOverrides(const QList &parameter_overrides) {
    m_parameter_overrides = parameter_overrides;
    m_parameter_overrides_isSet = true;
}

bool OAIUpdateStackInstancesInput::is_parameter_overrides_Set() const{
    return m_parameter_overrides_isSet;
}

bool OAIUpdateStackInstancesInput::is_parameter_overrides_Valid() const{
    return m_parameter_overrides_isValid;
}

OAICreateStackInstancesInput_OperationPreferences OAIUpdateStackInstancesInput::getOperationPreferences() const {
    return m_operation_preferences;
}
void OAIUpdateStackInstancesInput::setOperationPreferences(const OAICreateStackInstancesInput_OperationPreferences &operation_preferences) {
    m_operation_preferences = operation_preferences;
    m_operation_preferences_isSet = true;
}

bool OAIUpdateStackInstancesInput::is_operation_preferences_Set() const{
    return m_operation_preferences_isSet;
}

bool OAIUpdateStackInstancesInput::is_operation_preferences_Valid() const{
    return m_operation_preferences_isValid;
}

QString OAIUpdateStackInstancesInput::getOperationId() const {
    return m_operation_id;
}
void OAIUpdateStackInstancesInput::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIUpdateStackInstancesInput::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIUpdateStackInstancesInput::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAICallAs OAIUpdateStackInstancesInput::getCallAs() const {
    return m_call_as;
}
void OAIUpdateStackInstancesInput::setCallAs(const OAICallAs &call_as) {
    m_call_as = call_as;
    m_call_as_isSet = true;
}

bool OAIUpdateStackInstancesInput::is_call_as_Set() const{
    return m_call_as_isSet;
}

bool OAIUpdateStackInstancesInput::is_call_as_Valid() const{
    return m_call_as_isValid;
}

bool OAIUpdateStackInstancesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_as.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateStackInstancesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_set_name_isValid && m_regions_isValid && true;
}

} // namespace OpenAPI
