/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePublisherOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePublisherOutput::OAIDescribePublisherOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePublisherOutput::OAIDescribePublisherOutput() {
    this->initializeModel();
}

OAIDescribePublisherOutput::~OAIDescribePublisherOutput() {}

void OAIDescribePublisherOutput::initializeModel() {

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;

    m_publisher_status_isSet = false;
    m_publisher_status_isValid = false;

    m_identity_provider_isSet = false;
    m_identity_provider_isValid = false;

    m_publisher_profile_isSet = false;
    m_publisher_profile_isValid = false;
}

void OAIDescribePublisherOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePublisherOutput::fromJsonObject(QJsonObject json) {

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("PublisherId")]);
    m_publisher_id_isSet = !json[QString("PublisherId")].isNull() && m_publisher_id_isValid;

    m_publisher_status_isValid = ::OpenAPI::fromJsonValue(m_publisher_status, json[QString("PublisherStatus")]);
    m_publisher_status_isSet = !json[QString("PublisherStatus")].isNull() && m_publisher_status_isValid;

    m_identity_provider_isValid = ::OpenAPI::fromJsonValue(m_identity_provider, json[QString("IdentityProvider")]);
    m_identity_provider_isSet = !json[QString("IdentityProvider")].isNull() && m_identity_provider_isValid;

    m_publisher_profile_isValid = ::OpenAPI::fromJsonValue(m_publisher_profile, json[QString("PublisherProfile")]);
    m_publisher_profile_isSet = !json[QString("PublisherProfile")].isNull() && m_publisher_profile_isValid;
}

QString OAIDescribePublisherOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePublisherOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_publisher_id_isSet) {
        obj.insert(QString("PublisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    if (m_publisher_status.isSet()) {
        obj.insert(QString("PublisherStatus"), ::OpenAPI::toJsonValue(m_publisher_status));
    }
    if (m_identity_provider.isSet()) {
        obj.insert(QString("IdentityProvider"), ::OpenAPI::toJsonValue(m_identity_provider));
    }
    if (m_publisher_profile_isSet) {
        obj.insert(QString("PublisherProfile"), ::OpenAPI::toJsonValue(m_publisher_profile));
    }
    return obj;
}

QString OAIDescribePublisherOutput::getPublisherId() const {
    return m_publisher_id;
}
void OAIDescribePublisherOutput::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIDescribePublisherOutput::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIDescribePublisherOutput::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

OAIPublisherStatus OAIDescribePublisherOutput::getPublisherStatus() const {
    return m_publisher_status;
}
void OAIDescribePublisherOutput::setPublisherStatus(const OAIPublisherStatus &publisher_status) {
    m_publisher_status = publisher_status;
    m_publisher_status_isSet = true;
}

bool OAIDescribePublisherOutput::is_publisher_status_Set() const{
    return m_publisher_status_isSet;
}

bool OAIDescribePublisherOutput::is_publisher_status_Valid() const{
    return m_publisher_status_isValid;
}

OAIIdentityProvider OAIDescribePublisherOutput::getIdentityProvider() const {
    return m_identity_provider;
}
void OAIDescribePublisherOutput::setIdentityProvider(const OAIIdentityProvider &identity_provider) {
    m_identity_provider = identity_provider;
    m_identity_provider_isSet = true;
}

bool OAIDescribePublisherOutput::is_identity_provider_Set() const{
    return m_identity_provider_isSet;
}

bool OAIDescribePublisherOutput::is_identity_provider_Valid() const{
    return m_identity_provider_isValid;
}

QString OAIDescribePublisherOutput::getPublisherProfile() const {
    return m_publisher_profile;
}
void OAIDescribePublisherOutput::setPublisherProfile(const QString &publisher_profile) {
    m_publisher_profile = publisher_profile;
    m_publisher_profile_isSet = true;
}

bool OAIDescribePublisherOutput::is_publisher_profile_Set() const{
    return m_publisher_profile_isSet;
}

bool OAIDescribePublisherOutput::is_publisher_profile_Valid() const{
    return m_publisher_profile_isValid;
}

bool OAIDescribePublisherOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_profile_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePublisherOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
