/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTypeRegistrationsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTypeRegistrationsInput::OAIListTypeRegistrationsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTypeRegistrationsInput::OAIListTypeRegistrationsInput() {
    this->initializeModel();
}

OAIListTypeRegistrationsInput::~OAIListTypeRegistrationsInput() {}

void OAIListTypeRegistrationsInput::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_type_arn_isSet = false;
    m_type_arn_isValid = false;

    m_registration_status_filter_isSet = false;
    m_registration_status_filter_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTypeRegistrationsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTypeRegistrationsInput::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_type_arn_isValid = ::OpenAPI::fromJsonValue(m_type_arn, json[QString("TypeArn")]);
    m_type_arn_isSet = !json[QString("TypeArn")].isNull() && m_type_arn_isValid;

    m_registration_status_filter_isValid = ::OpenAPI::fromJsonValue(m_registration_status_filter, json[QString("RegistrationStatusFilter")]);
    m_registration_status_filter_isSet = !json[QString("RegistrationStatusFilter")].isNull() && m_registration_status_filter_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTypeRegistrationsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTypeRegistrationsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_type_arn_isSet) {
        obj.insert(QString("TypeArn"), ::OpenAPI::toJsonValue(m_type_arn));
    }
    if (m_registration_status_filter.isSet()) {
        obj.insert(QString("RegistrationStatusFilter"), ::OpenAPI::toJsonValue(m_registration_status_filter));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIRegistryType OAIListTypeRegistrationsInput::getType() const {
    return m_type;
}
void OAIListTypeRegistrationsInput::setType(const OAIRegistryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListTypeRegistrationsInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListTypeRegistrationsInput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIListTypeRegistrationsInput::getTypeName() const {
    return m_type_name;
}
void OAIListTypeRegistrationsInput::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIListTypeRegistrationsInput::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIListTypeRegistrationsInput::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIListTypeRegistrationsInput::getTypeArn() const {
    return m_type_arn;
}
void OAIListTypeRegistrationsInput::setTypeArn(const QString &type_arn) {
    m_type_arn = type_arn;
    m_type_arn_isSet = true;
}

bool OAIListTypeRegistrationsInput::is_type_arn_Set() const{
    return m_type_arn_isSet;
}

bool OAIListTypeRegistrationsInput::is_type_arn_Valid() const{
    return m_type_arn_isValid;
}

OAIRegistrationStatus OAIListTypeRegistrationsInput::getRegistrationStatusFilter() const {
    return m_registration_status_filter;
}
void OAIListTypeRegistrationsInput::setRegistrationStatusFilter(const OAIRegistrationStatus &registration_status_filter) {
    m_registration_status_filter = registration_status_filter;
    m_registration_status_filter_isSet = true;
}

bool OAIListTypeRegistrationsInput::is_registration_status_filter_Set() const{
    return m_registration_status_filter_isSet;
}

bool OAIListTypeRegistrationsInput::is_registration_status_filter_Valid() const{
    return m_registration_status_filter_isValid;
}

qint32 OAIListTypeRegistrationsInput::getMaxResults() const {
    return m_max_results;
}
void OAIListTypeRegistrationsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListTypeRegistrationsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListTypeRegistrationsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListTypeRegistrationsInput::getNextToken() const {
    return m_next_token;
}
void OAIListTypeRegistrationsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTypeRegistrationsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTypeRegistrationsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTypeRegistrationsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_status_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTypeRegistrationsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
