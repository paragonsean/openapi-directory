/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportStacksToStackSetInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportStacksToStackSetInput::OAIImportStacksToStackSetInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportStacksToStackSetInput::OAIImportStacksToStackSetInput() {
    this->initializeModel();
}

OAIImportStacksToStackSetInput::~OAIImportStacksToStackSetInput() {}

void OAIImportStacksToStackSetInput::initializeModel() {

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_stack_ids_isSet = false;
    m_stack_ids_isValid = false;

    m_stack_ids_url_isSet = false;
    m_stack_ids_url_isValid = false;

    m_organizational_unit_ids_isSet = false;
    m_organizational_unit_ids_isValid = false;

    m_operation_preferences_isSet = false;
    m_operation_preferences_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_call_as_isSet = false;
    m_call_as_isValid = false;
}

void OAIImportStacksToStackSetInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportStacksToStackSetInput::fromJsonObject(QJsonObject json) {

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("StackSetName")]);
    m_stack_set_name_isSet = !json[QString("StackSetName")].isNull() && m_stack_set_name_isValid;

    m_stack_ids_isValid = ::OpenAPI::fromJsonValue(m_stack_ids, json[QString("StackIds")]);
    m_stack_ids_isSet = !json[QString("StackIds")].isNull() && m_stack_ids_isValid;

    m_stack_ids_url_isValid = ::OpenAPI::fromJsonValue(m_stack_ids_url, json[QString("StackIdsUrl")]);
    m_stack_ids_url_isSet = !json[QString("StackIdsUrl")].isNull() && m_stack_ids_url_isValid;

    m_organizational_unit_ids_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_ids, json[QString("OrganizationalUnitIds")]);
    m_organizational_unit_ids_isSet = !json[QString("OrganizationalUnitIds")].isNull() && m_organizational_unit_ids_isValid;

    m_operation_preferences_isValid = ::OpenAPI::fromJsonValue(m_operation_preferences, json[QString("OperationPreferences")]);
    m_operation_preferences_isSet = !json[QString("OperationPreferences")].isNull() && m_operation_preferences_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;

    m_call_as_isValid = ::OpenAPI::fromJsonValue(m_call_as, json[QString("CallAs")]);
    m_call_as_isSet = !json[QString("CallAs")].isNull() && m_call_as_isValid;
}

QString OAIImportStacksToStackSetInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportStacksToStackSetInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_name_isSet) {
        obj.insert(QString("StackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_stack_ids.isSet()) {
        obj.insert(QString("StackIds"), ::OpenAPI::toJsonValue(m_stack_ids));
    }
    if (m_stack_ids_url_isSet) {
        obj.insert(QString("StackIdsUrl"), ::OpenAPI::toJsonValue(m_stack_ids_url));
    }
    if (m_organizational_unit_ids.isSet()) {
        obj.insert(QString("OrganizationalUnitIds"), ::OpenAPI::toJsonValue(m_organizational_unit_ids));
    }
    if (m_operation_preferences.isSet()) {
        obj.insert(QString("OperationPreferences"), ::OpenAPI::toJsonValue(m_operation_preferences));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_call_as.isSet()) {
        obj.insert(QString("CallAs"), ::OpenAPI::toJsonValue(m_call_as));
    }
    return obj;
}

QString OAIImportStacksToStackSetInput::getStackSetName() const {
    return m_stack_set_name;
}
void OAIImportStacksToStackSetInput::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIImportStacksToStackSetInput::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIImportStacksToStackSetInput::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

QList OAIImportStacksToStackSetInput::getStackIds() const {
    return m_stack_ids;
}
void OAIImportStacksToStackSetInput::setStackIds(const QList &stack_ids) {
    m_stack_ids = stack_ids;
    m_stack_ids_isSet = true;
}

bool OAIImportStacksToStackSetInput::is_stack_ids_Set() const{
    return m_stack_ids_isSet;
}

bool OAIImportStacksToStackSetInput::is_stack_ids_Valid() const{
    return m_stack_ids_isValid;
}

QString OAIImportStacksToStackSetInput::getStackIdsUrl() const {
    return m_stack_ids_url;
}
void OAIImportStacksToStackSetInput::setStackIdsUrl(const QString &stack_ids_url) {
    m_stack_ids_url = stack_ids_url;
    m_stack_ids_url_isSet = true;
}

bool OAIImportStacksToStackSetInput::is_stack_ids_url_Set() const{
    return m_stack_ids_url_isSet;
}

bool OAIImportStacksToStackSetInput::is_stack_ids_url_Valid() const{
    return m_stack_ids_url_isValid;
}

QList OAIImportStacksToStackSetInput::getOrganizationalUnitIds() const {
    return m_organizational_unit_ids;
}
void OAIImportStacksToStackSetInput::setOrganizationalUnitIds(const QList &organizational_unit_ids) {
    m_organizational_unit_ids = organizational_unit_ids;
    m_organizational_unit_ids_isSet = true;
}

bool OAIImportStacksToStackSetInput::is_organizational_unit_ids_Set() const{
    return m_organizational_unit_ids_isSet;
}

bool OAIImportStacksToStackSetInput::is_organizational_unit_ids_Valid() const{
    return m_organizational_unit_ids_isValid;
}

OAIDetectStackSetDriftInput_OperationPreferences OAIImportStacksToStackSetInput::getOperationPreferences() const {
    return m_operation_preferences;
}
void OAIImportStacksToStackSetInput::setOperationPreferences(const OAIDetectStackSetDriftInput_OperationPreferences &operation_preferences) {
    m_operation_preferences = operation_preferences;
    m_operation_preferences_isSet = true;
}

bool OAIImportStacksToStackSetInput::is_operation_preferences_Set() const{
    return m_operation_preferences_isSet;
}

bool OAIImportStacksToStackSetInput::is_operation_preferences_Valid() const{
    return m_operation_preferences_isValid;
}

QString OAIImportStacksToStackSetInput::getOperationId() const {
    return m_operation_id;
}
void OAIImportStacksToStackSetInput::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIImportStacksToStackSetInput::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIImportStacksToStackSetInput::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAICallAs OAIImportStacksToStackSetInput::getCallAs() const {
    return m_call_as;
}
void OAIImportStacksToStackSetInput::setCallAs(const OAICallAs &call_as) {
    m_call_as = call_as;
    m_call_as_isSet = true;
}

bool OAIImportStacksToStackSetInput::is_call_as_Set() const{
    return m_call_as_isSet;
}

bool OAIImportStacksToStackSetInput::is_call_as_Valid() const{
    return m_call_as_isValid;
}

bool OAIImportStacksToStackSetInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_ids_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_as.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportStacksToStackSetInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_set_name_isValid && true;
}

} // namespace OpenAPI
