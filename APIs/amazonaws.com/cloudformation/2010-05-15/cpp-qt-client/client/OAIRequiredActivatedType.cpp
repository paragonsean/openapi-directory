/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequiredActivatedType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequiredActivatedType::OAIRequiredActivatedType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequiredActivatedType::OAIRequiredActivatedType() {
    this->initializeModel();
}

OAIRequiredActivatedType::~OAIRequiredActivatedType() {}

void OAIRequiredActivatedType::initializeModel() {

    m_type_name_alias_isSet = false;
    m_type_name_alias_isValid = false;

    m_original_type_name_isSet = false;
    m_original_type_name_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;

    m_supported_major_versions_isSet = false;
    m_supported_major_versions_isValid = false;
}

void OAIRequiredActivatedType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequiredActivatedType::fromJsonObject(QJsonObject json) {

    m_type_name_alias_isValid = ::OpenAPI::fromJsonValue(m_type_name_alias, json[QString("TypeNameAlias")]);
    m_type_name_alias_isSet = !json[QString("TypeNameAlias")].isNull() && m_type_name_alias_isValid;

    m_original_type_name_isValid = ::OpenAPI::fromJsonValue(m_original_type_name, json[QString("OriginalTypeName")]);
    m_original_type_name_isSet = !json[QString("OriginalTypeName")].isNull() && m_original_type_name_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("PublisherId")]);
    m_publisher_id_isSet = !json[QString("PublisherId")].isNull() && m_publisher_id_isValid;

    m_supported_major_versions_isValid = ::OpenAPI::fromJsonValue(m_supported_major_versions, json[QString("SupportedMajorVersions")]);
    m_supported_major_versions_isSet = !json[QString("SupportedMajorVersions")].isNull() && m_supported_major_versions_isValid;
}

QString OAIRequiredActivatedType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequiredActivatedType::asJsonObject() const {
    QJsonObject obj;
    if (m_type_name_alias_isSet) {
        obj.insert(QString("TypeNameAlias"), ::OpenAPI::toJsonValue(m_type_name_alias));
    }
    if (m_original_type_name_isSet) {
        obj.insert(QString("OriginalTypeName"), ::OpenAPI::toJsonValue(m_original_type_name));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("PublisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    if (m_supported_major_versions.isSet()) {
        obj.insert(QString("SupportedMajorVersions"), ::OpenAPI::toJsonValue(m_supported_major_versions));
    }
    return obj;
}

QString OAIRequiredActivatedType::getTypeNameAlias() const {
    return m_type_name_alias;
}
void OAIRequiredActivatedType::setTypeNameAlias(const QString &type_name_alias) {
    m_type_name_alias = type_name_alias;
    m_type_name_alias_isSet = true;
}

bool OAIRequiredActivatedType::is_type_name_alias_Set() const{
    return m_type_name_alias_isSet;
}

bool OAIRequiredActivatedType::is_type_name_alias_Valid() const{
    return m_type_name_alias_isValid;
}

QString OAIRequiredActivatedType::getOriginalTypeName() const {
    return m_original_type_name;
}
void OAIRequiredActivatedType::setOriginalTypeName(const QString &original_type_name) {
    m_original_type_name = original_type_name;
    m_original_type_name_isSet = true;
}

bool OAIRequiredActivatedType::is_original_type_name_Set() const{
    return m_original_type_name_isSet;
}

bool OAIRequiredActivatedType::is_original_type_name_Valid() const{
    return m_original_type_name_isValid;
}

QString OAIRequiredActivatedType::getPublisherId() const {
    return m_publisher_id;
}
void OAIRequiredActivatedType::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIRequiredActivatedType::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIRequiredActivatedType::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

QList OAIRequiredActivatedType::getSupportedMajorVersions() const {
    return m_supported_major_versions;
}
void OAIRequiredActivatedType::setSupportedMajorVersions(const QList &supported_major_versions) {
    m_supported_major_versions = supported_major_versions;
    m_supported_major_versions_isSet = true;
}

bool OAIRequiredActivatedType::is_supported_major_versions_Set() const{
    return m_supported_major_versions_isSet;
}

bool OAIRequiredActivatedType::is_supported_major_versions_Valid() const{
    return m_supported_major_versions_isValid;
}

bool OAIRequiredActivatedType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_name_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_major_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequiredActivatedType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
