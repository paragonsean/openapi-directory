/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeStackDriftDetectionStatusOutput.h
 *
 * 
 */

#ifndef OAIDescribeStackDriftDetectionStatusOutput_H
#define OAIDescribeStackDriftDetectionStatusOutput_H

#include <QJsonObject>

#include "OAIStackDriftDetectionStatus.h"
#include "OAIStackDriftStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeStackDriftDetectionStatusOutput : public OAIObject {
public:
    OAIDescribeStackDriftDetectionStatusOutput();
    OAIDescribeStackDriftDetectionStatusOutput(QString json);
    ~OAIDescribeStackDriftDetectionStatusOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getStackId() const;
    void setStackId(const QString &stack_id);
    bool is_stack_id_Set() const;
    bool is_stack_id_Valid() const;

    QString getStackDriftDetectionId() const;
    void setStackDriftDetectionId(const QString &stack_drift_detection_id);
    bool is_stack_drift_detection_id_Set() const;
    bool is_stack_drift_detection_id_Valid() const;

    OAIStackDriftStatus getStackDriftStatus() const;
    void setStackDriftStatus(const OAIStackDriftStatus &stack_drift_status);
    bool is_stack_drift_status_Set() const;
    bool is_stack_drift_status_Valid() const;

    OAIStackDriftDetectionStatus getDetectionStatus() const;
    void setDetectionStatus(const OAIStackDriftDetectionStatus &detection_status);
    bool is_detection_status_Set() const;
    bool is_detection_status_Valid() const;

    QString getDetectionStatusReason() const;
    void setDetectionStatusReason(const QString &detection_status_reason);
    bool is_detection_status_reason_Set() const;
    bool is_detection_status_reason_Valid() const;

    qint32 getDriftedStackResourceCount() const;
    void setDriftedStackResourceCount(const qint32 &drifted_stack_resource_count);
    bool is_drifted_stack_resource_count_Set() const;
    bool is_drifted_stack_resource_count_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_stack_id;
    bool m_stack_id_isSet;
    bool m_stack_id_isValid;

    QString m_stack_drift_detection_id;
    bool m_stack_drift_detection_id_isSet;
    bool m_stack_drift_detection_id_isValid;

    OAIStackDriftStatus m_stack_drift_status;
    bool m_stack_drift_status_isSet;
    bool m_stack_drift_status_isValid;

    OAIStackDriftDetectionStatus m_detection_status;
    bool m_detection_status_isSet;
    bool m_detection_status_isValid;

    QString m_detection_status_reason;
    bool m_detection_status_reason_isSet;
    bool m_detection_status_reason_isValid;

    qint32 m_drifted_stack_resource_count;
    bool m_drifted_stack_resource_count_isSet;
    bool m_drifted_stack_resource_count_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeStackDriftDetectionStatusOutput)

#endif // OAIDescribeStackDriftDetectionStatusOutput_H
