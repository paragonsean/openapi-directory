/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivateTypeInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivateTypeInput::OAIActivateTypeInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivateTypeInput::OAIActivateTypeInput() {
    this->initializeModel();
}

OAIActivateTypeInput::~OAIActivateTypeInput() {}

void OAIActivateTypeInput::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_public_type_arn_isSet = false;
    m_public_type_arn_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_type_name_alias_isSet = false;
    m_type_name_alias_isValid = false;

    m_auto_update_isSet = false;
    m_auto_update_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_version_bump_isSet = false;
    m_version_bump_isValid = false;

    m_major_version_isSet = false;
    m_major_version_isValid = false;
}

void OAIActivateTypeInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivateTypeInput::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_public_type_arn_isValid = ::OpenAPI::fromJsonValue(m_public_type_arn, json[QString("PublicTypeArn")]);
    m_public_type_arn_isSet = !json[QString("PublicTypeArn")].isNull() && m_public_type_arn_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("PublisherId")]);
    m_publisher_id_isSet = !json[QString("PublisherId")].isNull() && m_publisher_id_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_type_name_alias_isValid = ::OpenAPI::fromJsonValue(m_type_name_alias, json[QString("TypeNameAlias")]);
    m_type_name_alias_isSet = !json[QString("TypeNameAlias")].isNull() && m_type_name_alias_isValid;

    m_auto_update_isValid = ::OpenAPI::fromJsonValue(m_auto_update, json[QString("AutoUpdate")]);
    m_auto_update_isSet = !json[QString("AutoUpdate")].isNull() && m_auto_update_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("LoggingConfig")]);
    m_logging_config_isSet = !json[QString("LoggingConfig")].isNull() && m_logging_config_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("ExecutionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("ExecutionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_version_bump_isValid = ::OpenAPI::fromJsonValue(m_version_bump, json[QString("VersionBump")]);
    m_version_bump_isSet = !json[QString("VersionBump")].isNull() && m_version_bump_isValid;

    m_major_version_isValid = ::OpenAPI::fromJsonValue(m_major_version, json[QString("MajorVersion")]);
    m_major_version_isSet = !json[QString("MajorVersion")].isNull() && m_major_version_isValid;
}

QString OAIActivateTypeInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivateTypeInput::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_public_type_arn_isSet) {
        obj.insert(QString("PublicTypeArn"), ::OpenAPI::toJsonValue(m_public_type_arn));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("PublisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_type_name_alias_isSet) {
        obj.insert(QString("TypeNameAlias"), ::OpenAPI::toJsonValue(m_type_name_alias));
    }
    if (m_auto_update_isSet) {
        obj.insert(QString("AutoUpdate"), ::OpenAPI::toJsonValue(m_auto_update));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("LoggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("ExecutionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_version_bump.isSet()) {
        obj.insert(QString("VersionBump"), ::OpenAPI::toJsonValue(m_version_bump));
    }
    if (m_major_version_isSet) {
        obj.insert(QString("MajorVersion"), ::OpenAPI::toJsonValue(m_major_version));
    }
    return obj;
}

OAIThirdPartyType OAIActivateTypeInput::getType() const {
    return m_type;
}
void OAIActivateTypeInput::setType(const OAIThirdPartyType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActivateTypeInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActivateTypeInput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIActivateTypeInput::getPublicTypeArn() const {
    return m_public_type_arn;
}
void OAIActivateTypeInput::setPublicTypeArn(const QString &public_type_arn) {
    m_public_type_arn = public_type_arn;
    m_public_type_arn_isSet = true;
}

bool OAIActivateTypeInput::is_public_type_arn_Set() const{
    return m_public_type_arn_isSet;
}

bool OAIActivateTypeInput::is_public_type_arn_Valid() const{
    return m_public_type_arn_isValid;
}

QString OAIActivateTypeInput::getPublisherId() const {
    return m_publisher_id;
}
void OAIActivateTypeInput::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIActivateTypeInput::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIActivateTypeInput::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

QString OAIActivateTypeInput::getTypeName() const {
    return m_type_name;
}
void OAIActivateTypeInput::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIActivateTypeInput::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIActivateTypeInput::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIActivateTypeInput::getTypeNameAlias() const {
    return m_type_name_alias;
}
void OAIActivateTypeInput::setTypeNameAlias(const QString &type_name_alias) {
    m_type_name_alias = type_name_alias;
    m_type_name_alias_isSet = true;
}

bool OAIActivateTypeInput::is_type_name_alias_Set() const{
    return m_type_name_alias_isSet;
}

bool OAIActivateTypeInput::is_type_name_alias_Valid() const{
    return m_type_name_alias_isValid;
}

bool OAIActivateTypeInput::getAutoUpdate() const {
    return m_auto_update;
}
void OAIActivateTypeInput::setAutoUpdate(const bool &auto_update) {
    m_auto_update = auto_update;
    m_auto_update_isSet = true;
}

bool OAIActivateTypeInput::is_auto_update_Set() const{
    return m_auto_update_isSet;
}

bool OAIActivateTypeInput::is_auto_update_Valid() const{
    return m_auto_update_isValid;
}

OAIActivateTypeInput_LoggingConfig OAIActivateTypeInput::getLoggingConfig() const {
    return m_logging_config;
}
void OAIActivateTypeInput::setLoggingConfig(const OAIActivateTypeInput_LoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAIActivateTypeInput::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAIActivateTypeInput::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QString OAIActivateTypeInput::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIActivateTypeInput::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIActivateTypeInput::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIActivateTypeInput::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

OAIVersionBump OAIActivateTypeInput::getVersionBump() const {
    return m_version_bump;
}
void OAIActivateTypeInput::setVersionBump(const OAIVersionBump &version_bump) {
    m_version_bump = version_bump;
    m_version_bump_isSet = true;
}

bool OAIActivateTypeInput::is_version_bump_Set() const{
    return m_version_bump_isSet;
}

bool OAIActivateTypeInput::is_version_bump_Valid() const{
    return m_version_bump_isValid;
}

qint32 OAIActivateTypeInput::getMajorVersion() const {
    return m_major_version;
}
void OAIActivateTypeInput::setMajorVersion(const qint32 &major_version) {
    m_major_version = major_version;
    m_major_version_isSet = true;
}

bool OAIActivateTypeInput::is_major_version_Set() const{
    return m_major_version_isSet;
}

bool OAIActivateTypeInput::is_major_version_Valid() const{
    return m_major_version_isValid;
}

bool OAIActivateTypeInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_type_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_bump.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_major_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivateTypeInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
