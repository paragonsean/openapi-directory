/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackInstance::OAIStackInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackInstance::OAIStackInstance() {
    this->initializeModel();
}

OAIStackInstance::~OAIStackInstance() {}

void OAIStackInstance::initializeModel() {

    m_stack_set_id_isSet = false;
    m_stack_set_id_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_account_isSet = false;
    m_account_isValid = false;

    m_stack_id_isSet = false;
    m_stack_id_isValid = false;

    m_parameter_overrides_isSet = false;
    m_parameter_overrides_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stack_instance_status_isSet = false;
    m_stack_instance_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_organizational_unit_id_isSet = false;
    m_organizational_unit_id_isValid = false;

    m_drift_status_isSet = false;
    m_drift_status_isValid = false;

    m_last_drift_check_timestamp_isSet = false;
    m_last_drift_check_timestamp_isValid = false;

    m_last_operation_id_isSet = false;
    m_last_operation_id_isValid = false;
}

void OAIStackInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackInstance::fromJsonObject(QJsonObject json) {

    m_stack_set_id_isValid = ::OpenAPI::fromJsonValue(m_stack_set_id, json[QString("StackSetId")]);
    m_stack_set_id_isSet = !json[QString("StackSetId")].isNull() && m_stack_set_id_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("Account")]);
    m_account_isSet = !json[QString("Account")].isNull() && m_account_isValid;

    m_stack_id_isValid = ::OpenAPI::fromJsonValue(m_stack_id, json[QString("StackId")]);
    m_stack_id_isSet = !json[QString("StackId")].isNull() && m_stack_id_isValid;

    m_parameter_overrides_isValid = ::OpenAPI::fromJsonValue(m_parameter_overrides, json[QString("ParameterOverrides")]);
    m_parameter_overrides_isSet = !json[QString("ParameterOverrides")].isNull() && m_parameter_overrides_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_stack_instance_status_isValid = ::OpenAPI::fromJsonValue(m_stack_instance_status, json[QString("StackInstanceStatus")]);
    m_stack_instance_status_isSet = !json[QString("StackInstanceStatus")].isNull() && m_stack_instance_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_organizational_unit_id_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_id, json[QString("OrganizationalUnitId")]);
    m_organizational_unit_id_isSet = !json[QString("OrganizationalUnitId")].isNull() && m_organizational_unit_id_isValid;

    m_drift_status_isValid = ::OpenAPI::fromJsonValue(m_drift_status, json[QString("DriftStatus")]);
    m_drift_status_isSet = !json[QString("DriftStatus")].isNull() && m_drift_status_isValid;

    m_last_drift_check_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_drift_check_timestamp, json[QString("LastDriftCheckTimestamp")]);
    m_last_drift_check_timestamp_isSet = !json[QString("LastDriftCheckTimestamp")].isNull() && m_last_drift_check_timestamp_isValid;

    m_last_operation_id_isValid = ::OpenAPI::fromJsonValue(m_last_operation_id, json[QString("LastOperationId")]);
    m_last_operation_id_isSet = !json[QString("LastOperationId")].isNull() && m_last_operation_id_isValid;
}

QString OAIStackInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_id_isSet) {
        obj.insert(QString("StackSetId"), ::OpenAPI::toJsonValue(m_stack_set_id));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_account_isSet) {
        obj.insert(QString("Account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_stack_id_isSet) {
        obj.insert(QString("StackId"), ::OpenAPI::toJsonValue(m_stack_id));
    }
    if (m_parameter_overrides.isSet()) {
        obj.insert(QString("ParameterOverrides"), ::OpenAPI::toJsonValue(m_parameter_overrides));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stack_instance_status.isSet()) {
        obj.insert(QString("StackInstanceStatus"), ::OpenAPI::toJsonValue(m_stack_instance_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_organizational_unit_id_isSet) {
        obj.insert(QString("OrganizationalUnitId"), ::OpenAPI::toJsonValue(m_organizational_unit_id));
    }
    if (m_drift_status.isSet()) {
        obj.insert(QString("DriftStatus"), ::OpenAPI::toJsonValue(m_drift_status));
    }
    if (m_last_drift_check_timestamp_isSet) {
        obj.insert(QString("LastDriftCheckTimestamp"), ::OpenAPI::toJsonValue(m_last_drift_check_timestamp));
    }
    if (m_last_operation_id_isSet) {
        obj.insert(QString("LastOperationId"), ::OpenAPI::toJsonValue(m_last_operation_id));
    }
    return obj;
}

QString OAIStackInstance::getStackSetId() const {
    return m_stack_set_id;
}
void OAIStackInstance::setStackSetId(const QString &stack_set_id) {
    m_stack_set_id = stack_set_id;
    m_stack_set_id_isSet = true;
}

bool OAIStackInstance::is_stack_set_id_Set() const{
    return m_stack_set_id_isSet;
}

bool OAIStackInstance::is_stack_set_id_Valid() const{
    return m_stack_set_id_isValid;
}

QString OAIStackInstance::getRegion() const {
    return m_region;
}
void OAIStackInstance::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIStackInstance::is_region_Set() const{
    return m_region_isSet;
}

bool OAIStackInstance::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIStackInstance::getAccount() const {
    return m_account;
}
void OAIStackInstance::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIStackInstance::is_account_Set() const{
    return m_account_isSet;
}

bool OAIStackInstance::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIStackInstance::getStackId() const {
    return m_stack_id;
}
void OAIStackInstance::setStackId(const QString &stack_id) {
    m_stack_id = stack_id;
    m_stack_id_isSet = true;
}

bool OAIStackInstance::is_stack_id_Set() const{
    return m_stack_id_isSet;
}

bool OAIStackInstance::is_stack_id_Valid() const{
    return m_stack_id_isValid;
}

QList OAIStackInstance::getParameterOverrides() const {
    return m_parameter_overrides;
}
void OAIStackInstance::setParameterOverrides(const QList &parameter_overrides) {
    m_parameter_overrides = parameter_overrides;
    m_parameter_overrides_isSet = true;
}

bool OAIStackInstance::is_parameter_overrides_Set() const{
    return m_parameter_overrides_isSet;
}

bool OAIStackInstance::is_parameter_overrides_Valid() const{
    return m_parameter_overrides_isValid;
}

OAIStackInstanceStatus OAIStackInstance::getStatus() const {
    return m_status;
}
void OAIStackInstance::setStatus(const OAIStackInstanceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStackInstance::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStackInstance::is_status_Valid() const{
    return m_status_isValid;
}

OAIStackInstance_StackInstanceStatus OAIStackInstance::getStackInstanceStatus() const {
    return m_stack_instance_status;
}
void OAIStackInstance::setStackInstanceStatus(const OAIStackInstance_StackInstanceStatus &stack_instance_status) {
    m_stack_instance_status = stack_instance_status;
    m_stack_instance_status_isSet = true;
}

bool OAIStackInstance::is_stack_instance_status_Set() const{
    return m_stack_instance_status_isSet;
}

bool OAIStackInstance::is_stack_instance_status_Valid() const{
    return m_stack_instance_status_isValid;
}

QString OAIStackInstance::getStatusReason() const {
    return m_status_reason;
}
void OAIStackInstance::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIStackInstance::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIStackInstance::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QString OAIStackInstance::getOrganizationalUnitId() const {
    return m_organizational_unit_id;
}
void OAIStackInstance::setOrganizationalUnitId(const QString &organizational_unit_id) {
    m_organizational_unit_id = organizational_unit_id;
    m_organizational_unit_id_isSet = true;
}

bool OAIStackInstance::is_organizational_unit_id_Set() const{
    return m_organizational_unit_id_isSet;
}

bool OAIStackInstance::is_organizational_unit_id_Valid() const{
    return m_organizational_unit_id_isValid;
}

OAIStackDriftStatus OAIStackInstance::getDriftStatus() const {
    return m_drift_status;
}
void OAIStackInstance::setDriftStatus(const OAIStackDriftStatus &drift_status) {
    m_drift_status = drift_status;
    m_drift_status_isSet = true;
}

bool OAIStackInstance::is_drift_status_Set() const{
    return m_drift_status_isSet;
}

bool OAIStackInstance::is_drift_status_Valid() const{
    return m_drift_status_isValid;
}

QDateTime OAIStackInstance::getLastDriftCheckTimestamp() const {
    return m_last_drift_check_timestamp;
}
void OAIStackInstance::setLastDriftCheckTimestamp(const QDateTime &last_drift_check_timestamp) {
    m_last_drift_check_timestamp = last_drift_check_timestamp;
    m_last_drift_check_timestamp_isSet = true;
}

bool OAIStackInstance::is_last_drift_check_timestamp_Set() const{
    return m_last_drift_check_timestamp_isSet;
}

bool OAIStackInstance::is_last_drift_check_timestamp_Valid() const{
    return m_last_drift_check_timestamp_isValid;
}

QString OAIStackInstance::getLastOperationId() const {
    return m_last_operation_id;
}
void OAIStackInstance::setLastOperationId(const QString &last_operation_id) {
    m_last_operation_id = last_operation_id;
    m_last_operation_id_isSet = true;
}

bool OAIStackInstance::is_last_operation_id_Set() const{
    return m_last_operation_id_isSet;
}

bool OAIStackInstance::is_last_operation_id_Valid() const{
    return m_last_operation_id_isValid;
}

bool OAIStackInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_instance_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drift_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_drift_check_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
