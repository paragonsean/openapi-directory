/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateChangeSetInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateChangeSetInput::OAICreateChangeSetInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateChangeSetInput::OAICreateChangeSetInput() {
    this->initializeModel();
}

OAICreateChangeSetInput::~OAICreateChangeSetInput() {}

void OAICreateChangeSetInput::initializeModel() {

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_template_body_isSet = false;
    m_template_body_isValid = false;

    m_template_url_isSet = false;
    m_template_url_isValid = false;

    m_use_previous_template_isSet = false;
    m_use_previous_template_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_rollback_configuration_isSet = false;
    m_rollback_configuration_isValid = false;

    m_notification_arns_isSet = false;
    m_notification_arns_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_change_set_name_isSet = false;
    m_change_set_name_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_change_set_type_isSet = false;
    m_change_set_type_isValid = false;

    m_resources_to_import_isSet = false;
    m_resources_to_import_isValid = false;

    m_include_nested_stacks_isSet = false;
    m_include_nested_stacks_isValid = false;

    m_on_stack_failure_isSet = false;
    m_on_stack_failure_isValid = false;
}

void OAICreateChangeSetInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateChangeSetInput::fromJsonObject(QJsonObject json) {

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_template_body_isValid = ::OpenAPI::fromJsonValue(m_template_body, json[QString("TemplateBody")]);
    m_template_body_isSet = !json[QString("TemplateBody")].isNull() && m_template_body_isValid;

    m_template_url_isValid = ::OpenAPI::fromJsonValue(m_template_url, json[QString("TemplateURL")]);
    m_template_url_isSet = !json[QString("TemplateURL")].isNull() && m_template_url_isValid;

    m_use_previous_template_isValid = ::OpenAPI::fromJsonValue(m_use_previous_template, json[QString("UsePreviousTemplate")]);
    m_use_previous_template_isSet = !json[QString("UsePreviousTemplate")].isNull() && m_use_previous_template_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_rollback_configuration_isValid = ::OpenAPI::fromJsonValue(m_rollback_configuration, json[QString("RollbackConfiguration")]);
    m_rollback_configuration_isSet = !json[QString("RollbackConfiguration")].isNull() && m_rollback_configuration_isValid;

    m_notification_arns_isValid = ::OpenAPI::fromJsonValue(m_notification_arns, json[QString("NotificationARNs")]);
    m_notification_arns_isSet = !json[QString("NotificationARNs")].isNull() && m_notification_arns_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_change_set_name_isValid = ::OpenAPI::fromJsonValue(m_change_set_name, json[QString("ChangeSetName")]);
    m_change_set_name_isSet = !json[QString("ChangeSetName")].isNull() && m_change_set_name_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_change_set_type_isValid = ::OpenAPI::fromJsonValue(m_change_set_type, json[QString("ChangeSetType")]);
    m_change_set_type_isSet = !json[QString("ChangeSetType")].isNull() && m_change_set_type_isValid;

    m_resources_to_import_isValid = ::OpenAPI::fromJsonValue(m_resources_to_import, json[QString("ResourcesToImport")]);
    m_resources_to_import_isSet = !json[QString("ResourcesToImport")].isNull() && m_resources_to_import_isValid;

    m_include_nested_stacks_isValid = ::OpenAPI::fromJsonValue(m_include_nested_stacks, json[QString("IncludeNestedStacks")]);
    m_include_nested_stacks_isSet = !json[QString("IncludeNestedStacks")].isNull() && m_include_nested_stacks_isValid;

    m_on_stack_failure_isValid = ::OpenAPI::fromJsonValue(m_on_stack_failure, json[QString("OnStackFailure")]);
    m_on_stack_failure_isSet = !json[QString("OnStackFailure")].isNull() && m_on_stack_failure_isValid;
}

QString OAICreateChangeSetInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateChangeSetInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_template_body_isSet) {
        obj.insert(QString("TemplateBody"), ::OpenAPI::toJsonValue(m_template_body));
    }
    if (m_template_url_isSet) {
        obj.insert(QString("TemplateURL"), ::OpenAPI::toJsonValue(m_template_url));
    }
    if (m_use_previous_template_isSet) {
        obj.insert(QString("UsePreviousTemplate"), ::OpenAPI::toJsonValue(m_use_previous_template));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_rollback_configuration.isSet()) {
        obj.insert(QString("RollbackConfiguration"), ::OpenAPI::toJsonValue(m_rollback_configuration));
    }
    if (m_notification_arns.isSet()) {
        obj.insert(QString("NotificationARNs"), ::OpenAPI::toJsonValue(m_notification_arns));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_change_set_name_isSet) {
        obj.insert(QString("ChangeSetName"), ::OpenAPI::toJsonValue(m_change_set_name));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_change_set_type.isSet()) {
        obj.insert(QString("ChangeSetType"), ::OpenAPI::toJsonValue(m_change_set_type));
    }
    if (m_resources_to_import.isSet()) {
        obj.insert(QString("ResourcesToImport"), ::OpenAPI::toJsonValue(m_resources_to_import));
    }
    if (m_include_nested_stacks_isSet) {
        obj.insert(QString("IncludeNestedStacks"), ::OpenAPI::toJsonValue(m_include_nested_stacks));
    }
    if (m_on_stack_failure.isSet()) {
        obj.insert(QString("OnStackFailure"), ::OpenAPI::toJsonValue(m_on_stack_failure));
    }
    return obj;
}

QString OAICreateChangeSetInput::getStackName() const {
    return m_stack_name;
}
void OAICreateChangeSetInput::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAICreateChangeSetInput::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAICreateChangeSetInput::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAICreateChangeSetInput::getTemplateBody() const {
    return m_template_body;
}
void OAICreateChangeSetInput::setTemplateBody(const QString &template_body) {
    m_template_body = template_body;
    m_template_body_isSet = true;
}

bool OAICreateChangeSetInput::is_template_body_Set() const{
    return m_template_body_isSet;
}

bool OAICreateChangeSetInput::is_template_body_Valid() const{
    return m_template_body_isValid;
}

QString OAICreateChangeSetInput::getTemplateUrl() const {
    return m_template_url;
}
void OAICreateChangeSetInput::setTemplateUrl(const QString &template_url) {
    m_template_url = template_url;
    m_template_url_isSet = true;
}

bool OAICreateChangeSetInput::is_template_url_Set() const{
    return m_template_url_isSet;
}

bool OAICreateChangeSetInput::is_template_url_Valid() const{
    return m_template_url_isValid;
}

bool OAICreateChangeSetInput::getUsePreviousTemplate() const {
    return m_use_previous_template;
}
void OAICreateChangeSetInput::setUsePreviousTemplate(const bool &use_previous_template) {
    m_use_previous_template = use_previous_template;
    m_use_previous_template_isSet = true;
}

bool OAICreateChangeSetInput::is_use_previous_template_Set() const{
    return m_use_previous_template_isSet;
}

bool OAICreateChangeSetInput::is_use_previous_template_Valid() const{
    return m_use_previous_template_isValid;
}

QList OAICreateChangeSetInput::getParameters() const {
    return m_parameters;
}
void OAICreateChangeSetInput::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICreateChangeSetInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICreateChangeSetInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList OAICreateChangeSetInput::getCapabilities() const {
    return m_capabilities;
}
void OAICreateChangeSetInput::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAICreateChangeSetInput::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAICreateChangeSetInput::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList OAICreateChangeSetInput::getResourceTypes() const {
    return m_resource_types;
}
void OAICreateChangeSetInput::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAICreateChangeSetInput::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAICreateChangeSetInput::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QString OAICreateChangeSetInput::getRoleArn() const {
    return m_role_arn;
}
void OAICreateChangeSetInput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateChangeSetInput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateChangeSetInput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIDescribeChangeSetOutput_RollbackConfiguration OAICreateChangeSetInput::getRollbackConfiguration() const {
    return m_rollback_configuration;
}
void OAICreateChangeSetInput::setRollbackConfiguration(const OAIDescribeChangeSetOutput_RollbackConfiguration &rollback_configuration) {
    m_rollback_configuration = rollback_configuration;
    m_rollback_configuration_isSet = true;
}

bool OAICreateChangeSetInput::is_rollback_configuration_Set() const{
    return m_rollback_configuration_isSet;
}

bool OAICreateChangeSetInput::is_rollback_configuration_Valid() const{
    return m_rollback_configuration_isValid;
}

QList OAICreateChangeSetInput::getNotificationArns() const {
    return m_notification_arns;
}
void OAICreateChangeSetInput::setNotificationArns(const QList &notification_arns) {
    m_notification_arns = notification_arns;
    m_notification_arns_isSet = true;
}

bool OAICreateChangeSetInput::is_notification_arns_Set() const{
    return m_notification_arns_isSet;
}

bool OAICreateChangeSetInput::is_notification_arns_Valid() const{
    return m_notification_arns_isValid;
}

QList OAICreateChangeSetInput::getTags() const {
    return m_tags;
}
void OAICreateChangeSetInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateChangeSetInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateChangeSetInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateChangeSetInput::getChangeSetName() const {
    return m_change_set_name;
}
void OAICreateChangeSetInput::setChangeSetName(const QString &change_set_name) {
    m_change_set_name = change_set_name;
    m_change_set_name_isSet = true;
}

bool OAICreateChangeSetInput::is_change_set_name_Set() const{
    return m_change_set_name_isSet;
}

bool OAICreateChangeSetInput::is_change_set_name_Valid() const{
    return m_change_set_name_isValid;
}

QString OAICreateChangeSetInput::getClientToken() const {
    return m_client_token;
}
void OAICreateChangeSetInput::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateChangeSetInput::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateChangeSetInput::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateChangeSetInput::getDescription() const {
    return m_description;
}
void OAICreateChangeSetInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateChangeSetInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateChangeSetInput::is_description_Valid() const{
    return m_description_isValid;
}

OAIChangeSetType OAICreateChangeSetInput::getChangeSetType() const {
    return m_change_set_type;
}
void OAICreateChangeSetInput::setChangeSetType(const OAIChangeSetType &change_set_type) {
    m_change_set_type = change_set_type;
    m_change_set_type_isSet = true;
}

bool OAICreateChangeSetInput::is_change_set_type_Set() const{
    return m_change_set_type_isSet;
}

bool OAICreateChangeSetInput::is_change_set_type_Valid() const{
    return m_change_set_type_isValid;
}

QList OAICreateChangeSetInput::getResourcesToImport() const {
    return m_resources_to_import;
}
void OAICreateChangeSetInput::setResourcesToImport(const QList &resources_to_import) {
    m_resources_to_import = resources_to_import;
    m_resources_to_import_isSet = true;
}

bool OAICreateChangeSetInput::is_resources_to_import_Set() const{
    return m_resources_to_import_isSet;
}

bool OAICreateChangeSetInput::is_resources_to_import_Valid() const{
    return m_resources_to_import_isValid;
}

bool OAICreateChangeSetInput::getIncludeNestedStacks() const {
    return m_include_nested_stacks;
}
void OAICreateChangeSetInput::setIncludeNestedStacks(const bool &include_nested_stacks) {
    m_include_nested_stacks = include_nested_stacks;
    m_include_nested_stacks_isSet = true;
}

bool OAICreateChangeSetInput::is_include_nested_stacks_Set() const{
    return m_include_nested_stacks_isSet;
}

bool OAICreateChangeSetInput::is_include_nested_stacks_Valid() const{
    return m_include_nested_stacks_isValid;
}

OAIOnStackFailure OAICreateChangeSetInput::getOnStackFailure() const {
    return m_on_stack_failure;
}
void OAICreateChangeSetInput::setOnStackFailure(const OAIOnStackFailure &on_stack_failure) {
    m_on_stack_failure = on_stack_failure;
    m_on_stack_failure_isSet = true;
}

bool OAICreateChangeSetInput::is_on_stack_failure_Set() const{
    return m_on_stack_failure_isSet;
}

bool OAICreateChangeSetInput::is_on_stack_failure_Valid() const{
    return m_on_stack_failure_isValid;
}

bool OAICreateChangeSetInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_previous_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_to_import.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_nested_stacks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_stack_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateChangeSetInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_name_isValid && m_change_set_name_isValid && true;
}

} // namespace OpenAPI
