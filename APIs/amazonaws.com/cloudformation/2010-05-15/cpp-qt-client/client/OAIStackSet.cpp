/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStackSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStackSet::OAIStackSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStackSet::OAIStackSet() {
    this->initializeModel();
}

OAIStackSet::~OAIStackSet() {}

void OAIStackSet::initializeModel() {

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_stack_set_id_isSet = false;
    m_stack_set_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_template_body_isSet = false;
    m_template_body_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_stack_set_arn_isSet = false;
    m_stack_set_arn_isValid = false;

    m_administration_role_arn_isSet = false;
    m_administration_role_arn_isValid = false;

    m_execution_role_name_isSet = false;
    m_execution_role_name_isValid = false;

    m_stack_set_drift_detection_details_isSet = false;
    m_stack_set_drift_detection_details_isValid = false;

    m_auto_deployment_isSet = false;
    m_auto_deployment_isValid = false;

    m_permission_model_isSet = false;
    m_permission_model_isValid = false;

    m_organizational_unit_ids_isSet = false;
    m_organizational_unit_ids_isValid = false;

    m_managed_execution_isSet = false;
    m_managed_execution_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;
}

void OAIStackSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStackSet::fromJsonObject(QJsonObject json) {

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("StackSetName")]);
    m_stack_set_name_isSet = !json[QString("StackSetName")].isNull() && m_stack_set_name_isValid;

    m_stack_set_id_isValid = ::OpenAPI::fromJsonValue(m_stack_set_id, json[QString("StackSetId")]);
    m_stack_set_id_isSet = !json[QString("StackSetId")].isNull() && m_stack_set_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_template_body_isValid = ::OpenAPI::fromJsonValue(m_template_body, json[QString("TemplateBody")]);
    m_template_body_isSet = !json[QString("TemplateBody")].isNull() && m_template_body_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_stack_set_arn_isValid = ::OpenAPI::fromJsonValue(m_stack_set_arn, json[QString("StackSetARN")]);
    m_stack_set_arn_isSet = !json[QString("StackSetARN")].isNull() && m_stack_set_arn_isValid;

    m_administration_role_arn_isValid = ::OpenAPI::fromJsonValue(m_administration_role_arn, json[QString("AdministrationRoleARN")]);
    m_administration_role_arn_isSet = !json[QString("AdministrationRoleARN")].isNull() && m_administration_role_arn_isValid;

    m_execution_role_name_isValid = ::OpenAPI::fromJsonValue(m_execution_role_name, json[QString("ExecutionRoleName")]);
    m_execution_role_name_isSet = !json[QString("ExecutionRoleName")].isNull() && m_execution_role_name_isValid;

    m_stack_set_drift_detection_details_isValid = ::OpenAPI::fromJsonValue(m_stack_set_drift_detection_details, json[QString("StackSetDriftDetectionDetails")]);
    m_stack_set_drift_detection_details_isSet = !json[QString("StackSetDriftDetectionDetails")].isNull() && m_stack_set_drift_detection_details_isValid;

    m_auto_deployment_isValid = ::OpenAPI::fromJsonValue(m_auto_deployment, json[QString("AutoDeployment")]);
    m_auto_deployment_isSet = !json[QString("AutoDeployment")].isNull() && m_auto_deployment_isValid;

    m_permission_model_isValid = ::OpenAPI::fromJsonValue(m_permission_model, json[QString("PermissionModel")]);
    m_permission_model_isSet = !json[QString("PermissionModel")].isNull() && m_permission_model_isValid;

    m_organizational_unit_ids_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit_ids, json[QString("OrganizationalUnitIds")]);
    m_organizational_unit_ids_isSet = !json[QString("OrganizationalUnitIds")].isNull() && m_organizational_unit_ids_isValid;

    m_managed_execution_isValid = ::OpenAPI::fromJsonValue(m_managed_execution, json[QString("ManagedExecution")]);
    m_managed_execution_isSet = !json[QString("ManagedExecution")].isNull() && m_managed_execution_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("Regions")]);
    m_regions_isSet = !json[QString("Regions")].isNull() && m_regions_isValid;
}

QString OAIStackSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStackSet::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_name_isSet) {
        obj.insert(QString("StackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_stack_set_id_isSet) {
        obj.insert(QString("StackSetId"), ::OpenAPI::toJsonValue(m_stack_set_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_template_body_isSet) {
        obj.insert(QString("TemplateBody"), ::OpenAPI::toJsonValue(m_template_body));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_stack_set_arn_isSet) {
        obj.insert(QString("StackSetARN"), ::OpenAPI::toJsonValue(m_stack_set_arn));
    }
    if (m_administration_role_arn_isSet) {
        obj.insert(QString("AdministrationRoleARN"), ::OpenAPI::toJsonValue(m_administration_role_arn));
    }
    if (m_execution_role_name_isSet) {
        obj.insert(QString("ExecutionRoleName"), ::OpenAPI::toJsonValue(m_execution_role_name));
    }
    if (m_stack_set_drift_detection_details.isSet()) {
        obj.insert(QString("StackSetDriftDetectionDetails"), ::OpenAPI::toJsonValue(m_stack_set_drift_detection_details));
    }
    if (m_auto_deployment.isSet()) {
        obj.insert(QString("AutoDeployment"), ::OpenAPI::toJsonValue(m_auto_deployment));
    }
    if (m_permission_model.isSet()) {
        obj.insert(QString("PermissionModel"), ::OpenAPI::toJsonValue(m_permission_model));
    }
    if (m_organizational_unit_ids.isSet()) {
        obj.insert(QString("OrganizationalUnitIds"), ::OpenAPI::toJsonValue(m_organizational_unit_ids));
    }
    if (m_managed_execution.isSet()) {
        obj.insert(QString("ManagedExecution"), ::OpenAPI::toJsonValue(m_managed_execution));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("Regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    return obj;
}

QString OAIStackSet::getStackSetName() const {
    return m_stack_set_name;
}
void OAIStackSet::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIStackSet::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIStackSet::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

QString OAIStackSet::getStackSetId() const {
    return m_stack_set_id;
}
void OAIStackSet::setStackSetId(const QString &stack_set_id) {
    m_stack_set_id = stack_set_id;
    m_stack_set_id_isSet = true;
}

bool OAIStackSet::is_stack_set_id_Set() const{
    return m_stack_set_id_isSet;
}

bool OAIStackSet::is_stack_set_id_Valid() const{
    return m_stack_set_id_isValid;
}

QString OAIStackSet::getDescription() const {
    return m_description;
}
void OAIStackSet::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStackSet::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStackSet::is_description_Valid() const{
    return m_description_isValid;
}

OAIStackSetStatus OAIStackSet::getStatus() const {
    return m_status;
}
void OAIStackSet::setStatus(const OAIStackSetStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStackSet::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStackSet::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStackSet::getTemplateBody() const {
    return m_template_body;
}
void OAIStackSet::setTemplateBody(const QString &template_body) {
    m_template_body = template_body;
    m_template_body_isSet = true;
}

bool OAIStackSet::is_template_body_Set() const{
    return m_template_body_isSet;
}

bool OAIStackSet::is_template_body_Valid() const{
    return m_template_body_isValid;
}

QList OAIStackSet::getParameters() const {
    return m_parameters;
}
void OAIStackSet::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIStackSet::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIStackSet::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList OAIStackSet::getCapabilities() const {
    return m_capabilities;
}
void OAIStackSet::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIStackSet::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIStackSet::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList OAIStackSet::getTags() const {
    return m_tags;
}
void OAIStackSet::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStackSet::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStackSet::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIStackSet::getStackSetArn() const {
    return m_stack_set_arn;
}
void OAIStackSet::setStackSetArn(const QString &stack_set_arn) {
    m_stack_set_arn = stack_set_arn;
    m_stack_set_arn_isSet = true;
}

bool OAIStackSet::is_stack_set_arn_Set() const{
    return m_stack_set_arn_isSet;
}

bool OAIStackSet::is_stack_set_arn_Valid() const{
    return m_stack_set_arn_isValid;
}

QString OAIStackSet::getAdministrationRoleArn() const {
    return m_administration_role_arn;
}
void OAIStackSet::setAdministrationRoleArn(const QString &administration_role_arn) {
    m_administration_role_arn = administration_role_arn;
    m_administration_role_arn_isSet = true;
}

bool OAIStackSet::is_administration_role_arn_Set() const{
    return m_administration_role_arn_isSet;
}

bool OAIStackSet::is_administration_role_arn_Valid() const{
    return m_administration_role_arn_isValid;
}

QString OAIStackSet::getExecutionRoleName() const {
    return m_execution_role_name;
}
void OAIStackSet::setExecutionRoleName(const QString &execution_role_name) {
    m_execution_role_name = execution_role_name;
    m_execution_role_name_isSet = true;
}

bool OAIStackSet::is_execution_role_name_Set() const{
    return m_execution_role_name_isSet;
}

bool OAIStackSet::is_execution_role_name_Valid() const{
    return m_execution_role_name_isValid;
}

OAIStackSet_StackSetDriftDetectionDetails OAIStackSet::getStackSetDriftDetectionDetails() const {
    return m_stack_set_drift_detection_details;
}
void OAIStackSet::setStackSetDriftDetectionDetails(const OAIStackSet_StackSetDriftDetectionDetails &stack_set_drift_detection_details) {
    m_stack_set_drift_detection_details = stack_set_drift_detection_details;
    m_stack_set_drift_detection_details_isSet = true;
}

bool OAIStackSet::is_stack_set_drift_detection_details_Set() const{
    return m_stack_set_drift_detection_details_isSet;
}

bool OAIStackSet::is_stack_set_drift_detection_details_Valid() const{
    return m_stack_set_drift_detection_details_isValid;
}

OAIStackSet_AutoDeployment OAIStackSet::getAutoDeployment() const {
    return m_auto_deployment;
}
void OAIStackSet::setAutoDeployment(const OAIStackSet_AutoDeployment &auto_deployment) {
    m_auto_deployment = auto_deployment;
    m_auto_deployment_isSet = true;
}

bool OAIStackSet::is_auto_deployment_Set() const{
    return m_auto_deployment_isSet;
}

bool OAIStackSet::is_auto_deployment_Valid() const{
    return m_auto_deployment_isValid;
}

OAIPermissionModels OAIStackSet::getPermissionModel() const {
    return m_permission_model;
}
void OAIStackSet::setPermissionModel(const OAIPermissionModels &permission_model) {
    m_permission_model = permission_model;
    m_permission_model_isSet = true;
}

bool OAIStackSet::is_permission_model_Set() const{
    return m_permission_model_isSet;
}

bool OAIStackSet::is_permission_model_Valid() const{
    return m_permission_model_isValid;
}

QList OAIStackSet::getOrganizationalUnitIds() const {
    return m_organizational_unit_ids;
}
void OAIStackSet::setOrganizationalUnitIds(const QList &organizational_unit_ids) {
    m_organizational_unit_ids = organizational_unit_ids;
    m_organizational_unit_ids_isSet = true;
}

bool OAIStackSet::is_organizational_unit_ids_Set() const{
    return m_organizational_unit_ids_isSet;
}

bool OAIStackSet::is_organizational_unit_ids_Valid() const{
    return m_organizational_unit_ids_isValid;
}

OAICreateStackSetInput_ManagedExecution OAIStackSet::getManagedExecution() const {
    return m_managed_execution;
}
void OAIStackSet::setManagedExecution(const OAICreateStackSetInput_ManagedExecution &managed_execution) {
    m_managed_execution = managed_execution;
    m_managed_execution_isSet = true;
}

bool OAIStackSet::is_managed_execution_Set() const{
    return m_managed_execution_isSet;
}

bool OAIStackSet::is_managed_execution_Valid() const{
    return m_managed_execution_isValid;
}

QList OAIStackSet::getRegions() const {
    return m_regions;
}
void OAIStackSet::setRegions(const QList &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIStackSet::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIStackSet::is_regions_Valid() const{
    return m_regions_isValid;
}

bool OAIStackSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administration_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_set_drift_detection_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStackSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
