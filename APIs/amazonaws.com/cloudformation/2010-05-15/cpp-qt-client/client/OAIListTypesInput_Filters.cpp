/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTypesInput_Filters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTypesInput_Filters::OAIListTypesInput_Filters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTypesInput_Filters::OAIListTypesInput_Filters() {
    this->initializeModel();
}

OAIListTypesInput_Filters::~OAIListTypesInput_Filters() {}

void OAIListTypesInput_Filters::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;

    m_type_name_prefix_isSet = false;
    m_type_name_prefix_isValid = false;
}

void OAIListTypesInput_Filters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTypesInput_Filters::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("PublisherId")]);
    m_publisher_id_isSet = !json[QString("PublisherId")].isNull() && m_publisher_id_isValid;

    m_type_name_prefix_isValid = ::OpenAPI::fromJsonValue(m_type_name_prefix, json[QString("TypeNamePrefix")]);
    m_type_name_prefix_isSet = !json[QString("TypeNamePrefix")].isNull() && m_type_name_prefix_isValid;
}

QString OAIListTypesInput_Filters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTypesInput_Filters::asJsonObject() const {
    QJsonObject obj;
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("PublisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    if (m_type_name_prefix_isSet) {
        obj.insert(QString("TypeNamePrefix"), ::OpenAPI::toJsonValue(m_type_name_prefix));
    }
    return obj;
}

OAICategory OAIListTypesInput_Filters::getCategory() const {
    return m_category;
}
void OAIListTypesInput_Filters::setCategory(const OAICategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIListTypesInput_Filters::is_category_Set() const{
    return m_category_isSet;
}

bool OAIListTypesInput_Filters::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIListTypesInput_Filters::getPublisherId() const {
    return m_publisher_id;
}
void OAIListTypesInput_Filters::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIListTypesInput_Filters::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIListTypesInput_Filters::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

QString OAIListTypesInput_Filters::getTypeNamePrefix() const {
    return m_type_name_prefix;
}
void OAIListTypesInput_Filters::setTypeNamePrefix(const QString &type_name_prefix) {
    m_type_name_prefix = type_name_prefix;
    m_type_name_prefix_isSet = true;
}

bool OAIListTypesInput_Filters::is_type_name_prefix_Set() const{
    return m_type_name_prefix_isSet;
}

bool OAIListTypesInput_Filters::is_type_name_prefix_Valid() const{
    return m_type_name_prefix_isValid;
}

bool OAIListTypesInput_Filters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTypesInput_Filters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
