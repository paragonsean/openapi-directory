/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStackResourceDrift.h
 *
 * &lt;p&gt;Contains the drift information for a resource that has been checked for drift. This includes actual and expected property values for resources in which CloudFormation has detected drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Resources that don&#39;t currently support drift detection can&#39;t be checked. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all resources in a given stack that support drift detection.&lt;/p&gt;
 */

#ifndef OAIStackResourceDrift_H
#define OAIStackResourceDrift_H

#include <QJsonObject>

#include "OAIResourceChange_ModuleInfo.h"
#include "OAIStackResourceDriftStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIResourceChange_ModuleInfo;

class OAIStackResourceDrift : public OAIObject {
public:
    OAIStackResourceDrift();
    OAIStackResourceDrift(QString json);
    ~OAIStackResourceDrift() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getStackId() const;
    void setStackId(const QString &stack_id);
    bool is_stack_id_Set() const;
    bool is_stack_id_Valid() const;

    QString getLogicalResourceId() const;
    void setLogicalResourceId(const QString &logical_resource_id);
    bool is_logical_resource_id_Set() const;
    bool is_logical_resource_id_Valid() const;

    QString getPhysicalResourceId() const;
    void setPhysicalResourceId(const QString &physical_resource_id);
    bool is_physical_resource_id_Set() const;
    bool is_physical_resource_id_Valid() const;

    QList getPhysicalResourceIdContext() const;
    void setPhysicalResourceIdContext(const QList &physical_resource_id_context);
    bool is_physical_resource_id_context_Set() const;
    bool is_physical_resource_id_context_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QString getExpectedProperties() const;
    void setExpectedProperties(const QString &expected_properties);
    bool is_expected_properties_Set() const;
    bool is_expected_properties_Valid() const;

    QString getActualProperties() const;
    void setActualProperties(const QString &actual_properties);
    bool is_actual_properties_Set() const;
    bool is_actual_properties_Valid() const;

    QList getPropertyDifferences() const;
    void setPropertyDifferences(const QList &property_differences);
    bool is_property_differences_Set() const;
    bool is_property_differences_Valid() const;

    OAIStackResourceDriftStatus getStackResourceDriftStatus() const;
    void setStackResourceDriftStatus(const OAIStackResourceDriftStatus &stack_resource_drift_status);
    bool is_stack_resource_drift_status_Set() const;
    bool is_stack_resource_drift_status_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    OAIResourceChange_ModuleInfo getModuleInfo() const;
    void setModuleInfo(const OAIResourceChange_ModuleInfo &module_info);
    bool is_module_info_Set() const;
    bool is_module_info_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_stack_id;
    bool m_stack_id_isSet;
    bool m_stack_id_isValid;

    QString m_logical_resource_id;
    bool m_logical_resource_id_isSet;
    bool m_logical_resource_id_isValid;

    QString m_physical_resource_id;
    bool m_physical_resource_id_isSet;
    bool m_physical_resource_id_isValid;

    QList m_physical_resource_id_context;
    bool m_physical_resource_id_context_isSet;
    bool m_physical_resource_id_context_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QString m_expected_properties;
    bool m_expected_properties_isSet;
    bool m_expected_properties_isValid;

    QString m_actual_properties;
    bool m_actual_properties_isSet;
    bool m_actual_properties_isValid;

    QList m_property_differences;
    bool m_property_differences_isSet;
    bool m_property_differences_isValid;

    OAIStackResourceDriftStatus m_stack_resource_drift_status;
    bool m_stack_resource_drift_status_isSet;
    bool m_stack_resource_drift_status_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    OAIResourceChange_ModuleInfo m_module_info;
    bool m_module_info_isSet;
    bool m_module_info_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStackResourceDrift)

#endif // OAIStackResourceDrift_H
