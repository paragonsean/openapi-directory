/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivateTypeInput.h"
#include "OAIActivateTypeOutput.h"
#include "OAIBatchDescribeTypeConfigurationsInput.h"
#include "OAIBatchDescribeTypeConfigurationsOutput.h"
#include "OAICancelUpdateStackInput.h"
#include "OAICapability.h"
#include "OAIContinueUpdateRollbackInput.h"
#include "OAICreateChangeSetInput.h"
#include "OAICreateChangeSetOutput.h"
#include "OAICreateStackInput.h"
#include "OAICreateStackInstancesInput.h"
#include "OAICreateStackInstancesOutput.h"
#include "OAICreateStackOutput.h"
#include "OAICreateStackSetInput.h"
#include "OAICreateStackSetOutput.h"
#include "OAIDeactivateTypeInput.h"
#include "OAIDeleteChangeSetInput.h"
#include "OAIDeleteStackInput.h"
#include "OAIDeleteStackInstancesInput.h"
#include "OAIDeleteStackInstancesOutput.h"
#include "OAIDeleteStackSetInput.h"
#include "OAIDeregisterTypeInput.h"
#include "OAIDescribeAccountLimitsInput.h"
#include "OAIDescribeAccountLimitsOutput.h"
#include "OAIDescribeChangeSetHooksInput.h"
#include "OAIDescribeChangeSetHooksOutput.h"
#include "OAIDescribeChangeSetInput.h"
#include "OAIDescribeChangeSetOutput.h"
#include "OAIDescribeOrganizationsAccessInput.h"
#include "OAIDescribeOrganizationsAccessOutput.h"
#include "OAIDescribePublisherInput.h"
#include "OAIDescribePublisherOutput.h"
#include "OAIDescribeStackDriftDetectionStatusInput.h"
#include "OAIDescribeStackDriftDetectionStatusOutput.h"
#include "OAIDescribeStackEventsInput.h"
#include "OAIDescribeStackEventsOutput.h"
#include "OAIDescribeStackInstanceInput.h"
#include "OAIDescribeStackInstanceOutput.h"
#include "OAIDescribeStackResourceDriftsInput.h"
#include "OAIDescribeStackResourceDriftsOutput.h"
#include "OAIDescribeStackResourceInput.h"
#include "OAIDescribeStackResourceOutput.h"
#include "OAIDescribeStackResourcesInput.h"
#include "OAIDescribeStackResourcesOutput.h"
#include "OAIDescribeStackSetInput.h"
#include "OAIDescribeStackSetOperationInput.h"
#include "OAIDescribeStackSetOperationOutput.h"
#include "OAIDescribeStackSetOutput.h"
#include "OAIDescribeStacksInput.h"
#include "OAIDescribeStacksOutput.h"
#include "OAIDescribeTypeInput.h"
#include "OAIDescribeTypeOutput.h"
#include "OAIDescribeTypeRegistrationInput.h"
#include "OAIDescribeTypeRegistrationOutput.h"
#include "OAIDetectStackDriftInput.h"
#include "OAIDetectStackDriftOutput.h"
#include "OAIDetectStackResourceDriftInput.h"
#include "OAIDetectStackResourceDriftOutput.h"
#include "OAIDetectStackSetDriftInput.h"
#include "OAIDetectStackSetDriftOutput.h"
#include "OAIEstimateTemplateCostInput.h"
#include "OAIEstimateTemplateCostOutput.h"
#include "OAIExecuteChangeSetInput.h"
#include "OAIGET_ActivateType_LoggingConfig_parameter.h"
#include "OAIGET_CreateChangeSet_RollbackConfiguration_parameter.h"
#include "OAIGET_CreateStackInstances_DeploymentTargets_parameter.h"
#include "OAIGET_CreateStackInstances_OperationPreferences_parameter.h"
#include "OAIGET_CreateStackSet_AutoDeployment_parameter.h"
#include "OAIGET_CreateStackSet_ManagedExecution_parameter.h"
#include "OAIGET_GetTemplateSummary_TemplateSummaryConfig_parameter.h"
#include "OAIGET_ListTypes_Filters_parameter.h"
#include "OAIGetStackPolicyInput.h"
#include "OAIGetStackPolicyOutput.h"
#include "OAIGetTemplateInput.h"
#include "OAIGetTemplateOutput.h"
#include "OAIGetTemplateSummaryInput.h"
#include "OAIGetTemplateSummaryOutput.h"
#include "OAIImportStacksToStackSetInput.h"
#include "OAIImportStacksToStackSetOutput.h"
#include "OAIListChangeSetsInput.h"
#include "OAIListChangeSetsOutput.h"
#include "OAIListExportsInput.h"
#include "OAIListExportsOutput.h"
#include "OAIListImportsInput.h"
#include "OAIListImportsOutput.h"
#include "OAIListStackInstanceResourceDriftsInput.h"
#include "OAIListStackInstanceResourceDriftsOutput.h"
#include "OAIListStackInstancesInput.h"
#include "OAIListStackInstancesOutput.h"
#include "OAIListStackResourcesInput.h"
#include "OAIListStackResourcesOutput.h"
#include "OAIListStackSetOperationResultsInput.h"
#include "OAIListStackSetOperationResultsOutput.h"
#include "OAIListStackSetOperationsInput.h"
#include "OAIListStackSetOperationsOutput.h"
#include "OAIListStackSetsInput.h"
#include "OAIListStackSetsOutput.h"
#include "OAIListStacksInput.h"
#include "OAIListStacksOutput.h"
#include "OAIListTypeRegistrationsInput.h"
#include "OAIListTypeRegistrationsOutput.h"
#include "OAIListTypeVersionsInput.h"
#include "OAIListTypeVersionsOutput.h"
#include "OAIListTypesInput.h"
#include "OAIListTypesOutput.h"
#include "OAIObject.h"
#include "OAIOperationResultFilter.h"
#include "OAIParameter.h"
#include "OAIPublishTypeInput.h"
#include "OAIPublishTypeOutput.h"
#include "OAIRecordHandlerProgressInput.h"
#include "OAIRegisterPublisherInput.h"
#include "OAIRegisterPublisherOutput.h"
#include "OAIRegisterTypeInput.h"
#include "OAIRegisterTypeOutput.h"
#include "OAIResourceToImport.h"
#include "OAIRollbackStackInput.h"
#include "OAIRollbackStackOutput.h"
#include "OAISetStackPolicyInput.h"
#include "OAISetTypeConfigurationInput.h"
#include "OAISetTypeConfigurationOutput.h"
#include "OAISetTypeDefaultVersionInput.h"
#include "OAISignalResourceInput.h"
#include "OAIStackInstanceFilter.h"
#include "OAIStackResourceDriftStatus.h"
#include "OAIStackStatus.h"
#include "OAIStopStackSetOperationInput.h"
#include "OAITag.h"
#include "OAITestTypeInput.h"
#include "OAITestTypeOutput.h"
#include "OAITypeConfigurationIdentifier.h"
#include "OAIUpdateStackInput.h"
#include "OAIUpdateStackInstancesInput.h"
#include "OAIUpdateStackInstancesOutput.h"
#include "OAIUpdateStackOutput.h"
#include "OAIUpdateStackSetInput.h"
#include "OAIUpdateStackSetOutput.h"
#include "OAIUpdateTerminationProtectionInput.h"
#include "OAIUpdateTerminationProtectionOutput.h"
#include "OAIValidateTemplateInput.h"
#include "OAIValidateTemplateOutput.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETActivateOrganizationsAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  public_type_arn QString [optional]
    * @param[in]  publisher_id QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  type_name_alias QString [optional]
    * @param[in]  auto_update bool [optional]
    * @param[in]  logging_config OAIGET_ActivateType_LoggingConfig_parameter [optional]
    * @param[in]  execution_role_arn QString [optional]
    * @param[in]  version_bump QString [optional]
    * @param[in]  major_version qint32 [optional]
    */
    virtual void gETActivateType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_type_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &publisher_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &auto_update = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGET_ActivateType_LoggingConfig_parameter> &logging_config = ::OpenAPI::OptionalParam<OAIGET_ActivateType_LoggingConfig_parameter>(), const ::OpenAPI::OptionalParam<QString> &execution_role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version_bump = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &major_version = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type_configuration_identifiers QList<OAITypeConfigurationIdentifier> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETBatchDescribeTypeConfigurations(const QList<OAITypeConfigurationIdentifier> &type_configuration_identifiers, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  client_request_token QString [optional]
    */
    virtual void gETCancelUpdateStack(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  role_arn QString [optional]
    * @param[in]  resources_to_skip QList<QString> [optional]
    * @param[in]  client_request_token QString [optional]
    */
    virtual void gETContinueUpdateRollback(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &resources_to_skip = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  change_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  template_body QString [optional]
    * @param[in]  template_url QString [optional]
    * @param[in]  use_previous_template bool [optional]
    * @param[in]  parameters QList<OAIParameter> [optional]
    * @param[in]  capabilities QList<OAICapability> [optional]
    * @param[in]  resource_types QList<QString> [optional]
    * @param[in]  role_arn QString [optional]
    * @param[in]  rollback_configuration OAIGET_CreateChangeSet_RollbackConfiguration_parameter [optional]
    * @param[in]  notification_arns QList<QString> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  client_token QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  change_set_type QString [optional]
    * @param[in]  resources_to_import QList<OAIResourceToImport> [optional]
    * @param[in]  include_nested_stacks bool [optional]
    * @param[in]  on_stack_failure QString [optional]
    */
    virtual void gETCreateChangeSet(const QString &stack_name, const QString &change_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_previous_template = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIParameter>> &parameters = ::OpenAPI::OptionalParam<QList<OAIParameter>>(), const ::OpenAPI::OptionalParam<QList<OAICapability>> &capabilities = ::OpenAPI::OptionalParam<QList<OAICapability>>(), const ::OpenAPI::OptionalParam<QList<QString>> &resource_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateChangeSet_RollbackConfiguration_parameter> &rollback_configuration = ::OpenAPI::OptionalParam<OAIGET_CreateChangeSet_RollbackConfiguration_parameter>(), const ::OpenAPI::OptionalParam<QList<QString>> &notification_arns = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QString> &client_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_set_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIResourceToImport>> &resources_to_import = ::OpenAPI::OptionalParam<QList<OAIResourceToImport>>(), const ::OpenAPI::OptionalParam<bool> &include_nested_stacks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &on_stack_failure = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  template_body QString [optional]
    * @param[in]  template_url QString [optional]
    * @param[in]  parameters QList<OAIParameter> [optional]
    * @param[in]  disable_rollback bool [optional]
    * @param[in]  rollback_configuration OAIGET_CreateChangeSet_RollbackConfiguration_parameter [optional]
    * @param[in]  timeout_in_minutes qint32 [optional]
    * @param[in]  notification_arns QList<QString> [optional]
    * @param[in]  capabilities QList<OAICapability> [optional]
    * @param[in]  resource_types QList<QString> [optional]
    * @param[in]  role_arn QString [optional]
    * @param[in]  on_failure QString [optional]
    * @param[in]  stack_policy_body QString [optional]
    * @param[in]  stack_policy_url QString [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  client_request_token QString [optional]
    * @param[in]  enable_termination_protection bool [optional]
    * @param[in]  retain_except_on_create bool [optional]
    */
    virtual void gETCreateStack(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIParameter>> &parameters = ::OpenAPI::OptionalParam<QList<OAIParameter>>(), const ::OpenAPI::OptionalParam<bool> &disable_rollback = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGET_CreateChangeSet_RollbackConfiguration_parameter> &rollback_configuration = ::OpenAPI::OptionalParam<OAIGET_CreateChangeSet_RollbackConfiguration_parameter>(), const ::OpenAPI::OptionalParam<qint32> &timeout_in_minutes = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &notification_arns = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAICapability>> &capabilities = ::OpenAPI::OptionalParam<QList<OAICapability>>(), const ::OpenAPI::OptionalParam<QList<QString>> &resource_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &on_failure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_policy_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_policy_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_termination_protection = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &retain_except_on_create = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  regions QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  accounts QList<QString> [optional]
    * @param[in]  deployment_targets OAIGET_CreateStackInstances_DeploymentTargets_parameter [optional]
    * @param[in]  parameter_overrides QList<OAIParameter> [optional]
    * @param[in]  operation_preferences OAIGET_CreateStackInstances_OperationPreferences_parameter [optional]
    * @param[in]  operation_id QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETCreateStackInstances(const QString &stack_set_name, const QList<QString> &regions, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &accounts = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_DeploymentTargets_parameter> &deployment_targets = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_DeploymentTargets_parameter>(), const ::OpenAPI::OptionalParam<QList<OAIParameter>> &parameter_overrides = ::OpenAPI::OptionalParam<QList<OAIParameter>>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter> &operation_preferences = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter>(), const ::OpenAPI::OptionalParam<QString> &operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  template_body QString [optional]
    * @param[in]  template_url QString [optional]
    * @param[in]  stack_id QString [optional]
    * @param[in]  parameters QList<OAIParameter> [optional]
    * @param[in]  capabilities QList<OAICapability> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  administration_role_arn QString [optional]
    * @param[in]  execution_role_name QString [optional]
    * @param[in]  permission_model QString [optional]
    * @param[in]  auto_deployment OAIGET_CreateStackSet_AutoDeployment_parameter [optional]
    * @param[in]  call_as QString [optional]
    * @param[in]  client_request_token QString [optional]
    * @param[in]  managed_execution OAIGET_CreateStackSet_ManagedExecution_parameter [optional]
    */
    virtual void gETCreateStackSet(const QString &stack_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIParameter>> &parameters = ::OpenAPI::OptionalParam<QList<OAIParameter>>(), const ::OpenAPI::OptionalParam<QList<OAICapability>> &capabilities = ::OpenAPI::OptionalParam<QList<OAICapability>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<QString> &administration_role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &execution_role_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackSet_AutoDeployment_parameter> &auto_deployment = ::OpenAPI::OptionalParam<OAIGET_CreateStackSet_AutoDeployment_parameter>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackSet_ManagedExecution_parameter> &managed_execution = ::OpenAPI::OptionalParam<OAIGET_CreateStackSet_ManagedExecution_parameter>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeactivateOrganizationsAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  arn QString [optional]
    */
    virtual void gETDeactivateType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arn = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  change_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_name QString [optional]
    */
    virtual void gETDeleteChangeSet(const QString &change_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  retain_resources QList<QString> [optional]
    * @param[in]  role_arn QString [optional]
    * @param[in]  client_request_token QString [optional]
    */
    virtual void gETDeleteStack(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &retain_resources = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  regions QList<QString> [required]
    * @param[in]  retain_stacks bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  accounts QList<QString> [optional]
    * @param[in]  deployment_targets OAIGET_CreateStackInstances_DeploymentTargets_parameter [optional]
    * @param[in]  operation_preferences OAIGET_CreateStackInstances_OperationPreferences_parameter [optional]
    * @param[in]  operation_id QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETDeleteStackInstances(const QString &stack_set_name, const QList<QString> &regions, const bool &retain_stacks, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &accounts = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_DeploymentTargets_parameter> &deployment_targets = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_DeploymentTargets_parameter>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter> &operation_preferences = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter>(), const ::OpenAPI::OptionalParam<QString> &operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETDeleteStackSet(const QString &stack_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  arn QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  version_id QString [optional]
    */
    virtual void gETDeregisterType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeAccountLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  change_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_name QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeChangeSet(const QString &change_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  change_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_name QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  logical_resource_id QString [optional]
    */
    virtual void gETDescribeChangeSetHooks(const QString &change_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &logical_resource_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETDescribeOrganizationsAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  publisher_id QString [optional]
    */
    virtual void gETDescribePublisher(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &publisher_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_drift_detection_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeStackDriftDetectionStatus(const QString &stack_drift_detection_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_name QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeStackEvents(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  stack_instance_account QString [required]
    * @param[in]  stack_instance_region QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETDescribeStackInstance(const QString &stack_set_name, const QString &stack_instance_account, const QString &stack_instance_region, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  logical_resource_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeStackResource(const QString &stack_name, const QString &logical_resource_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_resource_drift_status_filters QList<OAIStackResourceDriftStatus> [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void gETDescribeStackResourceDrifts(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIStackResourceDriftStatus>> &stack_resource_drift_status_filters = ::OpenAPI::OptionalParam<QList<OAIStackResourceDriftStatus>>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_name QString [optional]
    * @param[in]  logical_resource_id QString [optional]
    * @param[in]  physical_resource_id QString [optional]
    */
    virtual void gETDescribeStackResources(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &logical_resource_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &physical_resource_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETDescribeStackSet(const QString &stack_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETDescribeStackSetOperation(const QString &stack_set_name, const QString &operation_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_name QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETDescribeStacks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  arn QString [optional]
    * @param[in]  version_id QString [optional]
    * @param[in]  publisher_id QString [optional]
    * @param[in]  public_version_number QString [optional]
    */
    virtual void gETDescribeType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &publisher_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_version_number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  registration_token QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeTypeRegistration(const QString &registration_token, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  logical_resource_ids QList<QString> [optional]
    */
    virtual void gETDetectStackDrift(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &logical_resource_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  logical_resource_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDetectStackResourceDrift(const QString &stack_name, const QString &logical_resource_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  operation_preferences OAIGET_CreateStackInstances_OperationPreferences_parameter [optional]
    * @param[in]  operation_id QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETDetectStackSetDrift(const QString &stack_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter> &operation_preferences = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter>(), const ::OpenAPI::OptionalParam<QString> &operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  template_body QString [optional]
    * @param[in]  template_url QString [optional]
    * @param[in]  parameters QList<OAIParameter> [optional]
    */
    virtual void gETEstimateTemplateCost(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIParameter>> &parameters = ::OpenAPI::OptionalParam<QList<OAIParameter>>());

    /**
    * @param[in]  change_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_name QString [optional]
    * @param[in]  client_request_token QString [optional]
    * @param[in]  disable_rollback bool [optional]
    * @param[in]  retain_except_on_create bool [optional]
    */
    virtual void gETExecuteChangeSet(const QString &change_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &disable_rollback = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &retain_except_on_create = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetStackPolicy(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_name QString [optional]
    * @param[in]  change_set_name QString [optional]
    * @param[in]  template_stage QString [optional]
    */
    virtual void gETGetTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_set_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_stage = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  template_body QString [optional]
    * @param[in]  template_url QString [optional]
    * @param[in]  stack_name QString [optional]
    * @param[in]  stack_set_name QString [optional]
    * @param[in]  call_as QString [optional]
    * @param[in]  template_summary_config OAIGET_GetTemplateSummary_TemplateSummaryConfig_parameter [optional]
    */
    virtual void gETGetTemplateSummary(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_set_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_GetTemplateSummary_TemplateSummaryConfig_parameter> &template_summary_config = ::OpenAPI::OptionalParam<OAIGET_GetTemplateSummary_TemplateSummaryConfig_parameter>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_ids QList<QString> [optional]
    * @param[in]  stack_ids_url QString [optional]
    * @param[in]  organizational_unit_ids QList<QString> [optional]
    * @param[in]  operation_preferences OAIGET_CreateStackInstances_OperationPreferences_parameter [optional]
    * @param[in]  operation_id QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETImportStacksToStackSet(const QString &stack_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &stack_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &stack_ids_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &organizational_unit_ids = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter> &operation_preferences = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter>(), const ::OpenAPI::OptionalParam<QString> &operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListChangeSets(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListExports(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  export_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListImports(const QString &export_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  stack_instance_account QString [required]
    * @param[in]  stack_instance_region QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  stack_instance_resource_drift_statuses QList<OAIStackResourceDriftStatus> [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETListStackInstanceResourceDrifts(const QString &stack_set_name, const QString &stack_instance_account, const QString &stack_instance_region, const QString &operation_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIStackResourceDriftStatus>> &stack_instance_resource_drift_statuses = ::OpenAPI::OptionalParam<QList<OAIStackResourceDriftStatus>>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  filters QList<OAIStackInstanceFilter> [optional]
    * @param[in]  stack_instance_account QString [optional]
    * @param[in]  stack_instance_region QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETListStackInstances(const QString &stack_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIStackInstanceFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAIStackInstanceFilter>>(), const ::OpenAPI::OptionalParam<QString> &stack_instance_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_instance_region = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListStackResources(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  call_as QString [optional]
    * @param[in]  filters QList<OAIOperationResultFilter> [optional]
    */
    virtual void gETListStackSetOperationResults(const QString &stack_set_name, const QString &operation_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIOperationResultFilter>> &filters = ::OpenAPI::OptionalParam<QList<OAIOperationResultFilter>>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETListStackSetOperations(const QString &stack_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  status QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETListStackSets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  stack_status_filter QList<OAIStackStatus> [optional]
    */
    virtual void gETListStacks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIStackStatus>> &stack_status_filter = ::OpenAPI::OptionalParam<QList<OAIStackStatus>>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  type_arn QString [optional]
    * @param[in]  registration_status_filter QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListTypeRegistrations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &registration_status_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  arn QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  deprecated_status QString [optional]
    * @param[in]  publisher_id QString [optional]
    */
    virtual void gETListTypeVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &deprecated_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &publisher_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  provisioning_type QString [optional]
    * @param[in]  deprecated_status QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  filters OAIGET_ListTypes_Filters_parameter [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &provisioning_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &deprecated_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_ListTypes_Filters_parameter> &filters = ::OpenAPI::OptionalParam<OAIGET_ListTypes_Filters_parameter>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  arn QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  public_version_number QString [optional]
    */
    virtual void gETPublishType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &public_version_number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  bearer_token QString [required]
    * @param[in]  operation_status QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  current_operation_status QString [optional]
    * @param[in]  status_message QString [optional]
    * @param[in]  error_code QString [optional]
    * @param[in]  resource_model QString [optional]
    * @param[in]  client_request_token QString [optional]
    */
    virtual void gETRecordHandlerProgress(const QString &bearer_token, const QString &operation_status, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &current_operation_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &error_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resource_model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  accept_terms_and_conditions bool [optional]
    * @param[in]  connection_arn QString [optional]
    */
    virtual void gETRegisterPublisher(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &accept_terms_and_conditions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &connection_arn = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type_name QString [required]
    * @param[in]  schema_handler_package QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  logging_config OAIGET_ActivateType_LoggingConfig_parameter [optional]
    * @param[in]  execution_role_arn QString [optional]
    * @param[in]  client_request_token QString [optional]
    */
    virtual void gETRegisterType(const QString &type_name, const QString &schema_handler_package, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_ActivateType_LoggingConfig_parameter> &logging_config = ::OpenAPI::OptionalParam<OAIGET_ActivateType_LoggingConfig_parameter>(), const ::OpenAPI::OptionalParam<QString> &execution_role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  role_arn QString [optional]
    * @param[in]  client_request_token QString [optional]
    * @param[in]  retain_except_on_create bool [optional]
    */
    virtual void gETRollbackStack(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &retain_except_on_create = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  stack_policy_body QString [optional]
    * @param[in]  stack_policy_url QString [optional]
    */
    virtual void gETSetStackPolicy(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_policy_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_policy_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  type_arn QString [optional]
    * @param[in]  configuration_alias QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void gETSetTypeConfiguration(const QString &configuration, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &configuration_alias = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  arn QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  version_id QString [optional]
    */
    virtual void gETSetTypeDefaultVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  logical_resource_id QString [required]
    * @param[in]  unique_id QString [required]
    * @param[in]  status QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSignalResource(const QString &stack_name, const QString &logical_resource_id, const QString &unique_id, const QString &status, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETStopStackSetOperation(const QString &stack_set_name, const QString &operation_id, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  arn QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  type_name QString [optional]
    * @param[in]  version_id QString [optional]
    * @param[in]  log_delivery_bucket QString [optional]
    */
    virtual void gETTestType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &log_delivery_bucket = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  template_body QString [optional]
    * @param[in]  template_url QString [optional]
    * @param[in]  use_previous_template bool [optional]
    * @param[in]  stack_policy_during_update_body QString [optional]
    * @param[in]  stack_policy_during_update_url QString [optional]
    * @param[in]  parameters QList<OAIParameter> [optional]
    * @param[in]  capabilities QList<OAICapability> [optional]
    * @param[in]  resource_types QList<QString> [optional]
    * @param[in]  role_arn QString [optional]
    * @param[in]  rollback_configuration OAIGET_CreateChangeSet_RollbackConfiguration_parameter [optional]
    * @param[in]  stack_policy_body QString [optional]
    * @param[in]  stack_policy_url QString [optional]
    * @param[in]  notification_arns QList<QString> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  disable_rollback bool [optional]
    * @param[in]  client_request_token QString [optional]
    * @param[in]  retain_except_on_create bool [optional]
    */
    virtual void gETUpdateStack(const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_previous_template = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &stack_policy_during_update_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_policy_during_update_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIParameter>> &parameters = ::OpenAPI::OptionalParam<QList<OAIParameter>>(), const ::OpenAPI::OptionalParam<QList<OAICapability>> &capabilities = ::OpenAPI::OptionalParam<QList<OAICapability>>(), const ::OpenAPI::OptionalParam<QList<QString>> &resource_types = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateChangeSet_RollbackConfiguration_parameter> &rollback_configuration = ::OpenAPI::OptionalParam<OAIGET_CreateChangeSet_RollbackConfiguration_parameter>(), const ::OpenAPI::OptionalParam<QString> &stack_policy_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &stack_policy_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &notification_arns = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<bool> &disable_rollback = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_request_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &retain_except_on_create = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  regions QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  accounts QList<QString> [optional]
    * @param[in]  deployment_targets OAIGET_CreateStackInstances_DeploymentTargets_parameter [optional]
    * @param[in]  parameter_overrides QList<OAIParameter> [optional]
    * @param[in]  operation_preferences OAIGET_CreateStackInstances_OperationPreferences_parameter [optional]
    * @param[in]  operation_id QString [optional]
    * @param[in]  call_as QString [optional]
    */
    virtual void gETUpdateStackInstances(const QString &stack_set_name, const QList<QString> &regions, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &accounts = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_DeploymentTargets_parameter> &deployment_targets = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_DeploymentTargets_parameter>(), const ::OpenAPI::OptionalParam<QList<OAIParameter>> &parameter_overrides = ::OpenAPI::OptionalParam<QList<OAIParameter>>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter> &operation_preferences = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter>(), const ::OpenAPI::OptionalParam<QString> &operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stack_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  template_body QString [optional]
    * @param[in]  template_url QString [optional]
    * @param[in]  use_previous_template bool [optional]
    * @param[in]  parameters QList<OAIParameter> [optional]
    * @param[in]  capabilities QList<OAICapability> [optional]
    * @param[in]  tags QList<OAITag> [optional]
    * @param[in]  operation_preferences OAIGET_CreateStackInstances_OperationPreferences_parameter [optional]
    * @param[in]  administration_role_arn QString [optional]
    * @param[in]  execution_role_name QString [optional]
    * @param[in]  deployment_targets OAIGET_CreateStackInstances_DeploymentTargets_parameter [optional]
    * @param[in]  permission_model QString [optional]
    * @param[in]  auto_deployment OAIGET_CreateStackSet_AutoDeployment_parameter [optional]
    * @param[in]  operation_id QString [optional]
    * @param[in]  accounts QList<QString> [optional]
    * @param[in]  regions QList<QString> [optional]
    * @param[in]  call_as QString [optional]
    * @param[in]  managed_execution OAIGET_CreateStackSet_ManagedExecution_parameter [optional]
    */
    virtual void gETUpdateStackSet(const QString &stack_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_previous_template = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<OAIParameter>> &parameters = ::OpenAPI::OptionalParam<QList<OAIParameter>>(), const ::OpenAPI::OptionalParam<QList<OAICapability>> &capabilities = ::OpenAPI::OptionalParam<QList<OAICapability>>(), const ::OpenAPI::OptionalParam<QList<OAITag>> &tags = ::OpenAPI::OptionalParam<QList<OAITag>>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter> &operation_preferences = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_OperationPreferences_parameter>(), const ::OpenAPI::OptionalParam<QString> &administration_role_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &execution_role_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_DeploymentTargets_parameter> &deployment_targets = ::OpenAPI::OptionalParam<OAIGET_CreateStackInstances_DeploymentTargets_parameter>(), const ::OpenAPI::OptionalParam<QString> &permission_model = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackSet_AutoDeployment_parameter> &auto_deployment = ::OpenAPI::OptionalParam<OAIGET_CreateStackSet_AutoDeployment_parameter>(), const ::OpenAPI::OptionalParam<QString> &operation_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &accounts = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &regions = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &call_as = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_CreateStackSet_ManagedExecution_parameter> &managed_execution = ::OpenAPI::OptionalParam<OAIGET_CreateStackSet_ManagedExecution_parameter>());

    /**
    * @param[in]  enable_termination_protection bool [required]
    * @param[in]  stack_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateTerminationProtection(const bool &enable_termination_protection, const QString &stack_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  template_body QString [optional]
    * @param[in]  template_url QString [optional]
    */
    virtual void gETValidateTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void pOSTActivateOrganizationsAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_activate_type_input OAIActivateTypeInput [optional]
    */
    virtual void pOSTActivateType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIActivateTypeInput> &oai_activate_type_input = ::OpenAPI::OptionalParam<OAIActivateTypeInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_batch_describe_type_configurations_input OAIBatchDescribeTypeConfigurationsInput [optional]
    */
    virtual void pOSTBatchDescribeTypeConfigurations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchDescribeTypeConfigurationsInput> &oai_batch_describe_type_configurations_input = ::OpenAPI::OptionalParam<OAIBatchDescribeTypeConfigurationsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_cancel_update_stack_input OAICancelUpdateStackInput [optional]
    */
    virtual void pOSTCancelUpdateStack(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICancelUpdateStackInput> &oai_cancel_update_stack_input = ::OpenAPI::OptionalParam<OAICancelUpdateStackInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_continue_update_rollback_input OAIContinueUpdateRollbackInput [optional]
    */
    virtual void pOSTContinueUpdateRollback(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIContinueUpdateRollbackInput> &oai_continue_update_rollback_input = ::OpenAPI::OptionalParam<OAIContinueUpdateRollbackInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_change_set_input OAICreateChangeSetInput [optional]
    */
    virtual void pOSTCreateChangeSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateChangeSetInput> &oai_create_change_set_input = ::OpenAPI::OptionalParam<OAICreateChangeSetInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_stack_input OAICreateStackInput [optional]
    */
    virtual void pOSTCreateStack(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateStackInput> &oai_create_stack_input = ::OpenAPI::OptionalParam<OAICreateStackInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_stack_instances_input OAICreateStackInstancesInput [optional]
    */
    virtual void pOSTCreateStackInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateStackInstancesInput> &oai_create_stack_instances_input = ::OpenAPI::OptionalParam<OAICreateStackInstancesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_stack_set_input OAICreateStackSetInput [optional]
    */
    virtual void pOSTCreateStackSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateStackSetInput> &oai_create_stack_set_input = ::OpenAPI::OptionalParam<OAICreateStackSetInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void pOSTDeactivateOrganizationsAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_deactivate_type_input OAIDeactivateTypeInput [optional]
    */
    virtual void pOSTDeactivateType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeactivateTypeInput> &oai_deactivate_type_input = ::OpenAPI::OptionalParam<OAIDeactivateTypeInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_change_set_input OAIDeleteChangeSetInput [optional]
    */
    virtual void pOSTDeleteChangeSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteChangeSetInput> &oai_delete_change_set_input = ::OpenAPI::OptionalParam<OAIDeleteChangeSetInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_stack_input OAIDeleteStackInput [optional]
    */
    virtual void pOSTDeleteStack(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteStackInput> &oai_delete_stack_input = ::OpenAPI::OptionalParam<OAIDeleteStackInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_stack_instances_input OAIDeleteStackInstancesInput [optional]
    */
    virtual void pOSTDeleteStackInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteStackInstancesInput> &oai_delete_stack_instances_input = ::OpenAPI::OptionalParam<OAIDeleteStackInstancesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_stack_set_input OAIDeleteStackSetInput [optional]
    */
    virtual void pOSTDeleteStackSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteStackSetInput> &oai_delete_stack_set_input = ::OpenAPI::OptionalParam<OAIDeleteStackSetInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_deregister_type_input OAIDeregisterTypeInput [optional]
    */
    virtual void pOSTDeregisterType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeregisterTypeInput> &oai_deregister_type_input = ::OpenAPI::OptionalParam<OAIDeregisterTypeInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_account_limits_input OAIDescribeAccountLimitsInput [optional]
    */
    virtual void pOSTDescribeAccountLimits(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeAccountLimitsInput> &oai_describe_account_limits_input = ::OpenAPI::OptionalParam<OAIDescribeAccountLimitsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_change_set_input OAIDescribeChangeSetInput [optional]
    */
    virtual void pOSTDescribeChangeSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeChangeSetInput> &oai_describe_change_set_input = ::OpenAPI::OptionalParam<OAIDescribeChangeSetInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_change_set_hooks_input OAIDescribeChangeSetHooksInput [optional]
    */
    virtual void pOSTDescribeChangeSetHooks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeChangeSetHooksInput> &oai_describe_change_set_hooks_input = ::OpenAPI::OptionalParam<OAIDescribeChangeSetHooksInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_organizations_access_input OAIDescribeOrganizationsAccessInput [optional]
    */
    virtual void pOSTDescribeOrganizationsAccess(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeOrganizationsAccessInput> &oai_describe_organizations_access_input = ::OpenAPI::OptionalParam<OAIDescribeOrganizationsAccessInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_publisher_input OAIDescribePublisherInput [optional]
    */
    virtual void pOSTDescribePublisher(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribePublisherInput> &oai_describe_publisher_input = ::OpenAPI::OptionalParam<OAIDescribePublisherInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_stack_drift_detection_status_input OAIDescribeStackDriftDetectionStatusInput [optional]
    */
    virtual void pOSTDescribeStackDriftDetectionStatus(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStackDriftDetectionStatusInput> &oai_describe_stack_drift_detection_status_input = ::OpenAPI::OptionalParam<OAIDescribeStackDriftDetectionStatusInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_stack_events_input OAIDescribeStackEventsInput [optional]
    */
    virtual void pOSTDescribeStackEvents(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStackEventsInput> &oai_describe_stack_events_input = ::OpenAPI::OptionalParam<OAIDescribeStackEventsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_stack_instance_input OAIDescribeStackInstanceInput [optional]
    */
    virtual void pOSTDescribeStackInstance(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStackInstanceInput> &oai_describe_stack_instance_input = ::OpenAPI::OptionalParam<OAIDescribeStackInstanceInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_stack_resource_input OAIDescribeStackResourceInput [optional]
    */
    virtual void pOSTDescribeStackResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStackResourceInput> &oai_describe_stack_resource_input = ::OpenAPI::OptionalParam<OAIDescribeStackResourceInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_stack_resource_drifts_input OAIDescribeStackResourceDriftsInput [optional]
    */
    virtual void pOSTDescribeStackResourceDrifts(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStackResourceDriftsInput> &oai_describe_stack_resource_drifts_input = ::OpenAPI::OptionalParam<OAIDescribeStackResourceDriftsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_stack_resources_input OAIDescribeStackResourcesInput [optional]
    */
    virtual void pOSTDescribeStackResources(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStackResourcesInput> &oai_describe_stack_resources_input = ::OpenAPI::OptionalParam<OAIDescribeStackResourcesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_stack_set_input OAIDescribeStackSetInput [optional]
    */
    virtual void pOSTDescribeStackSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStackSetInput> &oai_describe_stack_set_input = ::OpenAPI::OptionalParam<OAIDescribeStackSetInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_stack_set_operation_input OAIDescribeStackSetOperationInput [optional]
    */
    virtual void pOSTDescribeStackSetOperation(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStackSetOperationInput> &oai_describe_stack_set_operation_input = ::OpenAPI::OptionalParam<OAIDescribeStackSetOperationInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_describe_stacks_input OAIDescribeStacksInput [optional]
    */
    virtual void pOSTDescribeStacks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeStacksInput> &oai_describe_stacks_input = ::OpenAPI::OptionalParam<OAIDescribeStacksInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_type_input OAIDescribeTypeInput [optional]
    */
    virtual void pOSTDescribeType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTypeInput> &oai_describe_type_input = ::OpenAPI::OptionalParam<OAIDescribeTypeInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_type_registration_input OAIDescribeTypeRegistrationInput [optional]
    */
    virtual void pOSTDescribeTypeRegistration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeTypeRegistrationInput> &oai_describe_type_registration_input = ::OpenAPI::OptionalParam<OAIDescribeTypeRegistrationInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_detect_stack_drift_input OAIDetectStackDriftInput [optional]
    */
    virtual void pOSTDetectStackDrift(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDetectStackDriftInput> &oai_detect_stack_drift_input = ::OpenAPI::OptionalParam<OAIDetectStackDriftInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_detect_stack_resource_drift_input OAIDetectStackResourceDriftInput [optional]
    */
    virtual void pOSTDetectStackResourceDrift(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDetectStackResourceDriftInput> &oai_detect_stack_resource_drift_input = ::OpenAPI::OptionalParam<OAIDetectStackResourceDriftInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_detect_stack_set_drift_input OAIDetectStackSetDriftInput [optional]
    */
    virtual void pOSTDetectStackSetDrift(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDetectStackSetDriftInput> &oai_detect_stack_set_drift_input = ::OpenAPI::OptionalParam<OAIDetectStackSetDriftInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_estimate_template_cost_input OAIEstimateTemplateCostInput [optional]
    */
    virtual void pOSTEstimateTemplateCost(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIEstimateTemplateCostInput> &oai_estimate_template_cost_input = ::OpenAPI::OptionalParam<OAIEstimateTemplateCostInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_execute_change_set_input OAIExecuteChangeSetInput [optional]
    */
    virtual void pOSTExecuteChangeSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIExecuteChangeSetInput> &oai_execute_change_set_input = ::OpenAPI::OptionalParam<OAIExecuteChangeSetInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_stack_policy_input OAIGetStackPolicyInput [optional]
    */
    virtual void pOSTGetStackPolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetStackPolicyInput> &oai_get_stack_policy_input = ::OpenAPI::OptionalParam<OAIGetStackPolicyInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_template_input OAIGetTemplateInput [optional]
    */
    virtual void pOSTGetTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetTemplateInput> &oai_get_template_input = ::OpenAPI::OptionalParam<OAIGetTemplateInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_template_summary_input OAIGetTemplateSummaryInput [optional]
    */
    virtual void pOSTGetTemplateSummary(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetTemplateSummaryInput> &oai_get_template_summary_input = ::OpenAPI::OptionalParam<OAIGetTemplateSummaryInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_import_stacks_to_stack_set_input OAIImportStacksToStackSetInput [optional]
    */
    virtual void pOSTImportStacksToStackSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImportStacksToStackSetInput> &oai_import_stacks_to_stack_set_input = ::OpenAPI::OptionalParam<OAIImportStacksToStackSetInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_change_sets_input OAIListChangeSetsInput [optional]
    */
    virtual void pOSTListChangeSets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListChangeSetsInput> &oai_list_change_sets_input = ::OpenAPI::OptionalParam<OAIListChangeSetsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_exports_input OAIListExportsInput [optional]
    */
    virtual void pOSTListExports(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListExportsInput> &oai_list_exports_input = ::OpenAPI::OptionalParam<OAIListExportsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_imports_input OAIListImportsInput [optional]
    */
    virtual void pOSTListImports(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListImportsInput> &oai_list_imports_input = ::OpenAPI::OptionalParam<OAIListImportsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_list_stack_instance_resource_drifts_input OAIListStackInstanceResourceDriftsInput [optional]
    */
    virtual void pOSTListStackInstanceResourceDrifts(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListStackInstanceResourceDriftsInput> &oai_list_stack_instance_resource_drifts_input = ::OpenAPI::OptionalParam<OAIListStackInstanceResourceDriftsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_stack_instances_input OAIListStackInstancesInput [optional]
    */
    virtual void pOSTListStackInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListStackInstancesInput> &oai_list_stack_instances_input = ::OpenAPI::OptionalParam<OAIListStackInstancesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_stack_resources_input OAIListStackResourcesInput [optional]
    */
    virtual void pOSTListStackResources(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListStackResourcesInput> &oai_list_stack_resources_input = ::OpenAPI::OptionalParam<OAIListStackResourcesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_stack_set_operation_results_input OAIListStackSetOperationResultsInput [optional]
    */
    virtual void pOSTListStackSetOperationResults(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListStackSetOperationResultsInput> &oai_list_stack_set_operation_results_input = ::OpenAPI::OptionalParam<OAIListStackSetOperationResultsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_stack_set_operations_input OAIListStackSetOperationsInput [optional]
    */
    virtual void pOSTListStackSetOperations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListStackSetOperationsInput> &oai_list_stack_set_operations_input = ::OpenAPI::OptionalParam<OAIListStackSetOperationsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_stack_sets_input OAIListStackSetsInput [optional]
    */
    virtual void pOSTListStackSets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListStackSetsInput> &oai_list_stack_sets_input = ::OpenAPI::OptionalParam<OAIListStackSetsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_stacks_input OAIListStacksInput [optional]
    */
    virtual void pOSTListStacks(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListStacksInput> &oai_list_stacks_input = ::OpenAPI::OptionalParam<OAIListStacksInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_type_registrations_input OAIListTypeRegistrationsInput [optional]
    */
    virtual void pOSTListTypeRegistrations(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListTypeRegistrationsInput> &oai_list_type_registrations_input = ::OpenAPI::OptionalParam<OAIListTypeRegistrationsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_type_versions_input OAIListTypeVersionsInput [optional]
    */
    virtual void pOSTListTypeVersions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListTypeVersionsInput> &oai_list_type_versions_input = ::OpenAPI::OptionalParam<OAIListTypeVersionsInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_types_input OAIListTypesInput [optional]
    */
    virtual void pOSTListTypes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListTypesInput> &oai_list_types_input = ::OpenAPI::OptionalParam<OAIListTypesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_publish_type_input OAIPublishTypeInput [optional]
    */
    virtual void pOSTPublishType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPublishTypeInput> &oai_publish_type_input = ::OpenAPI::OptionalParam<OAIPublishTypeInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_record_handler_progress_input OAIRecordHandlerProgressInput [optional]
    */
    virtual void pOSTRecordHandlerProgress(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRecordHandlerProgressInput> &oai_record_handler_progress_input = ::OpenAPI::OptionalParam<OAIRecordHandlerProgressInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_register_publisher_input OAIRegisterPublisherInput [optional]
    */
    virtual void pOSTRegisterPublisher(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRegisterPublisherInput> &oai_register_publisher_input = ::OpenAPI::OptionalParam<OAIRegisterPublisherInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_register_type_input OAIRegisterTypeInput [optional]
    */
    virtual void pOSTRegisterType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRegisterTypeInput> &oai_register_type_input = ::OpenAPI::OptionalParam<OAIRegisterTypeInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_rollback_stack_input OAIRollbackStackInput [optional]
    */
    virtual void pOSTRollbackStack(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRollbackStackInput> &oai_rollback_stack_input = ::OpenAPI::OptionalParam<OAIRollbackStackInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_stack_policy_input OAISetStackPolicyInput [optional]
    */
    virtual void pOSTSetStackPolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetStackPolicyInput> &oai_set_stack_policy_input = ::OpenAPI::OptionalParam<OAISetStackPolicyInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_type_configuration_input OAISetTypeConfigurationInput [optional]
    */
    virtual void pOSTSetTypeConfiguration(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetTypeConfigurationInput> &oai_set_type_configuration_input = ::OpenAPI::OptionalParam<OAISetTypeConfigurationInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_type_default_version_input OAISetTypeDefaultVersionInput [optional]
    */
    virtual void pOSTSetTypeDefaultVersion(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetTypeDefaultVersionInput> &oai_set_type_default_version_input = ::OpenAPI::OptionalParam<OAISetTypeDefaultVersionInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_signal_resource_input OAISignalResourceInput [optional]
    */
    virtual void pOSTSignalResource(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISignalResourceInput> &oai_signal_resource_input = ::OpenAPI::OptionalParam<OAISignalResourceInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_stop_stack_set_operation_input OAIStopStackSetOperationInput [optional]
    */
    virtual void pOSTStopStackSetOperation(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStopStackSetOperationInput> &oai_stop_stack_set_operation_input = ::OpenAPI::OptionalParam<OAIStopStackSetOperationInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_test_type_input OAITestTypeInput [optional]
    */
    virtual void pOSTTestType(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestTypeInput> &oai_test_type_input = ::OpenAPI::OptionalParam<OAITestTypeInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_stack_input OAIUpdateStackInput [optional]
    */
    virtual void pOSTUpdateStack(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateStackInput> &oai_update_stack_input = ::OpenAPI::OptionalParam<OAIUpdateStackInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_stack_instances_input OAIUpdateStackInstancesInput [optional]
    */
    virtual void pOSTUpdateStackInstances(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateStackInstancesInput> &oai_update_stack_instances_input = ::OpenAPI::OptionalParam<OAIUpdateStackInstancesInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_stack_set_input OAIUpdateStackSetInput [optional]
    */
    virtual void pOSTUpdateStackSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateStackSetInput> &oai_update_stack_set_input = ::OpenAPI::OptionalParam<OAIUpdateStackSetInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_termination_protection_input OAIUpdateTerminationProtectionInput [optional]
    */
    virtual void pOSTUpdateTerminationProtection(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateTerminationProtectionInput> &oai_update_termination_protection_input = ::OpenAPI::OptionalParam<OAIUpdateTerminationProtectionInput>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_validate_template_input OAIValidateTemplateInput [optional]
    */
    virtual void pOSTValidateTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIValidateTemplateInput> &oai_validate_template_input = ::OpenAPI::OptionalParam<OAIValidateTemplateInput>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETActivateOrganizationsAccessCallback(OAIHttpRequestWorker *worker);
    void gETActivateTypeCallback(OAIHttpRequestWorker *worker);
    void gETBatchDescribeTypeConfigurationsCallback(OAIHttpRequestWorker *worker);
    void gETCancelUpdateStackCallback(OAIHttpRequestWorker *worker);
    void gETContinueUpdateRollbackCallback(OAIHttpRequestWorker *worker);
    void gETCreateChangeSetCallback(OAIHttpRequestWorker *worker);
    void gETCreateStackCallback(OAIHttpRequestWorker *worker);
    void gETCreateStackInstancesCallback(OAIHttpRequestWorker *worker);
    void gETCreateStackSetCallback(OAIHttpRequestWorker *worker);
    void gETDeactivateOrganizationsAccessCallback(OAIHttpRequestWorker *worker);
    void gETDeactivateTypeCallback(OAIHttpRequestWorker *worker);
    void gETDeleteChangeSetCallback(OAIHttpRequestWorker *worker);
    void gETDeleteStackCallback(OAIHttpRequestWorker *worker);
    void gETDeleteStackInstancesCallback(OAIHttpRequestWorker *worker);
    void gETDeleteStackSetCallback(OAIHttpRequestWorker *worker);
    void gETDeregisterTypeCallback(OAIHttpRequestWorker *worker);
    void gETDescribeAccountLimitsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeChangeSetCallback(OAIHttpRequestWorker *worker);
    void gETDescribeChangeSetHooksCallback(OAIHttpRequestWorker *worker);
    void gETDescribeOrganizationsAccessCallback(OAIHttpRequestWorker *worker);
    void gETDescribePublisherCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStackDriftDetectionStatusCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStackEventsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStackInstanceCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStackResourceCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStackResourceDriftsCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStackResourcesCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStackSetCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStackSetOperationCallback(OAIHttpRequestWorker *worker);
    void gETDescribeStacksCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTypeCallback(OAIHttpRequestWorker *worker);
    void gETDescribeTypeRegistrationCallback(OAIHttpRequestWorker *worker);
    void gETDetectStackDriftCallback(OAIHttpRequestWorker *worker);
    void gETDetectStackResourceDriftCallback(OAIHttpRequestWorker *worker);
    void gETDetectStackSetDriftCallback(OAIHttpRequestWorker *worker);
    void gETEstimateTemplateCostCallback(OAIHttpRequestWorker *worker);
    void gETExecuteChangeSetCallback(OAIHttpRequestWorker *worker);
    void gETGetStackPolicyCallback(OAIHttpRequestWorker *worker);
    void gETGetTemplateCallback(OAIHttpRequestWorker *worker);
    void gETGetTemplateSummaryCallback(OAIHttpRequestWorker *worker);
    void gETImportStacksToStackSetCallback(OAIHttpRequestWorker *worker);
    void gETListChangeSetsCallback(OAIHttpRequestWorker *worker);
    void gETListExportsCallback(OAIHttpRequestWorker *worker);
    void gETListImportsCallback(OAIHttpRequestWorker *worker);
    void gETListStackInstanceResourceDriftsCallback(OAIHttpRequestWorker *worker);
    void gETListStackInstancesCallback(OAIHttpRequestWorker *worker);
    void gETListStackResourcesCallback(OAIHttpRequestWorker *worker);
    void gETListStackSetOperationResultsCallback(OAIHttpRequestWorker *worker);
    void gETListStackSetOperationsCallback(OAIHttpRequestWorker *worker);
    void gETListStackSetsCallback(OAIHttpRequestWorker *worker);
    void gETListStacksCallback(OAIHttpRequestWorker *worker);
    void gETListTypeRegistrationsCallback(OAIHttpRequestWorker *worker);
    void gETListTypeVersionsCallback(OAIHttpRequestWorker *worker);
    void gETListTypesCallback(OAIHttpRequestWorker *worker);
    void gETPublishTypeCallback(OAIHttpRequestWorker *worker);
    void gETRecordHandlerProgressCallback(OAIHttpRequestWorker *worker);
    void gETRegisterPublisherCallback(OAIHttpRequestWorker *worker);
    void gETRegisterTypeCallback(OAIHttpRequestWorker *worker);
    void gETRollbackStackCallback(OAIHttpRequestWorker *worker);
    void gETSetStackPolicyCallback(OAIHttpRequestWorker *worker);
    void gETSetTypeConfigurationCallback(OAIHttpRequestWorker *worker);
    void gETSetTypeDefaultVersionCallback(OAIHttpRequestWorker *worker);
    void gETSignalResourceCallback(OAIHttpRequestWorker *worker);
    void gETStopStackSetOperationCallback(OAIHttpRequestWorker *worker);
    void gETTestTypeCallback(OAIHttpRequestWorker *worker);
    void gETUpdateStackCallback(OAIHttpRequestWorker *worker);
    void gETUpdateStackInstancesCallback(OAIHttpRequestWorker *worker);
    void gETUpdateStackSetCallback(OAIHttpRequestWorker *worker);
    void gETUpdateTerminationProtectionCallback(OAIHttpRequestWorker *worker);
    void gETValidateTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTActivateOrganizationsAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTActivateTypeCallback(OAIHttpRequestWorker *worker);
    void pOSTBatchDescribeTypeConfigurationsCallback(OAIHttpRequestWorker *worker);
    void pOSTCancelUpdateStackCallback(OAIHttpRequestWorker *worker);
    void pOSTContinueUpdateRollbackCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateChangeSetCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateStackCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateStackInstancesCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateStackSetCallback(OAIHttpRequestWorker *worker);
    void pOSTDeactivateOrganizationsAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTDeactivateTypeCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteChangeSetCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteStackCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteStackInstancesCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteStackSetCallback(OAIHttpRequestWorker *worker);
    void pOSTDeregisterTypeCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeAccountLimitsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeChangeSetCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeChangeSetHooksCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeOrganizationsAccessCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribePublisherCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStackDriftDetectionStatusCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStackEventsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStackInstanceCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStackResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStackResourceDriftsCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStackResourcesCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStackSetCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStackSetOperationCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeStacksCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTypeCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeTypeRegistrationCallback(OAIHttpRequestWorker *worker);
    void pOSTDetectStackDriftCallback(OAIHttpRequestWorker *worker);
    void pOSTDetectStackResourceDriftCallback(OAIHttpRequestWorker *worker);
    void pOSTDetectStackSetDriftCallback(OAIHttpRequestWorker *worker);
    void pOSTEstimateTemplateCostCallback(OAIHttpRequestWorker *worker);
    void pOSTExecuteChangeSetCallback(OAIHttpRequestWorker *worker);
    void pOSTGetStackPolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTGetTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTGetTemplateSummaryCallback(OAIHttpRequestWorker *worker);
    void pOSTImportStacksToStackSetCallback(OAIHttpRequestWorker *worker);
    void pOSTListChangeSetsCallback(OAIHttpRequestWorker *worker);
    void pOSTListExportsCallback(OAIHttpRequestWorker *worker);
    void pOSTListImportsCallback(OAIHttpRequestWorker *worker);
    void pOSTListStackInstanceResourceDriftsCallback(OAIHttpRequestWorker *worker);
    void pOSTListStackInstancesCallback(OAIHttpRequestWorker *worker);
    void pOSTListStackResourcesCallback(OAIHttpRequestWorker *worker);
    void pOSTListStackSetOperationResultsCallback(OAIHttpRequestWorker *worker);
    void pOSTListStackSetOperationsCallback(OAIHttpRequestWorker *worker);
    void pOSTListStackSetsCallback(OAIHttpRequestWorker *worker);
    void pOSTListStacksCallback(OAIHttpRequestWorker *worker);
    void pOSTListTypeRegistrationsCallback(OAIHttpRequestWorker *worker);
    void pOSTListTypeVersionsCallback(OAIHttpRequestWorker *worker);
    void pOSTListTypesCallback(OAIHttpRequestWorker *worker);
    void pOSTPublishTypeCallback(OAIHttpRequestWorker *worker);
    void pOSTRecordHandlerProgressCallback(OAIHttpRequestWorker *worker);
    void pOSTRegisterPublisherCallback(OAIHttpRequestWorker *worker);
    void pOSTRegisterTypeCallback(OAIHttpRequestWorker *worker);
    void pOSTRollbackStackCallback(OAIHttpRequestWorker *worker);
    void pOSTSetStackPolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTSetTypeConfigurationCallback(OAIHttpRequestWorker *worker);
    void pOSTSetTypeDefaultVersionCallback(OAIHttpRequestWorker *worker);
    void pOSTSignalResourceCallback(OAIHttpRequestWorker *worker);
    void pOSTStopStackSetOperationCallback(OAIHttpRequestWorker *worker);
    void pOSTTestTypeCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateStackCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateStackInstancesCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateStackSetCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateTerminationProtectionCallback(OAIHttpRequestWorker *worker);
    void pOSTValidateTemplateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETActivateOrganizationsAccessSignal(OAIObject summary);
    void gETActivateTypeSignal(OAIActivateTypeOutput summary);
    void gETBatchDescribeTypeConfigurationsSignal(OAIBatchDescribeTypeConfigurationsOutput summary);
    void gETCancelUpdateStackSignal();
    void gETContinueUpdateRollbackSignal(OAIObject summary);
    void gETCreateChangeSetSignal(OAICreateChangeSetOutput summary);
    void gETCreateStackSignal(OAICreateStackOutput summary);
    void gETCreateStackInstancesSignal(OAICreateStackInstancesOutput summary);
    void gETCreateStackSetSignal(OAICreateStackSetOutput summary);
    void gETDeactivateOrganizationsAccessSignal(OAIObject summary);
    void gETDeactivateTypeSignal(OAIObject summary);
    void gETDeleteChangeSetSignal(OAIObject summary);
    void gETDeleteStackSignal();
    void gETDeleteStackInstancesSignal(OAIDeleteStackInstancesOutput summary);
    void gETDeleteStackSetSignal(OAIObject summary);
    void gETDeregisterTypeSignal(OAIObject summary);
    void gETDescribeAccountLimitsSignal(OAIDescribeAccountLimitsOutput summary);
    void gETDescribeChangeSetSignal(OAIDescribeChangeSetOutput summary);
    void gETDescribeChangeSetHooksSignal(OAIDescribeChangeSetHooksOutput summary);
    void gETDescribeOrganizationsAccessSignal(OAIDescribeOrganizationsAccessOutput summary);
    void gETDescribePublisherSignal(OAIDescribePublisherOutput summary);
    void gETDescribeStackDriftDetectionStatusSignal(OAIDescribeStackDriftDetectionStatusOutput summary);
    void gETDescribeStackEventsSignal(OAIDescribeStackEventsOutput summary);
    void gETDescribeStackInstanceSignal(OAIDescribeStackInstanceOutput summary);
    void gETDescribeStackResourceSignal(OAIDescribeStackResourceOutput summary);
    void gETDescribeStackResourceDriftsSignal(OAIDescribeStackResourceDriftsOutput summary);
    void gETDescribeStackResourcesSignal(OAIDescribeStackResourcesOutput summary);
    void gETDescribeStackSetSignal(OAIDescribeStackSetOutput summary);
    void gETDescribeStackSetOperationSignal(OAIDescribeStackSetOperationOutput summary);
    void gETDescribeStacksSignal(OAIDescribeStacksOutput summary);
    void gETDescribeTypeSignal(OAIDescribeTypeOutput summary);
    void gETDescribeTypeRegistrationSignal(OAIDescribeTypeRegistrationOutput summary);
    void gETDetectStackDriftSignal(OAIDetectStackDriftOutput summary);
    void gETDetectStackResourceDriftSignal(OAIDetectStackResourceDriftOutput summary);
    void gETDetectStackSetDriftSignal(OAIDetectStackSetDriftOutput summary);
    void gETEstimateTemplateCostSignal(OAIEstimateTemplateCostOutput summary);
    void gETExecuteChangeSetSignal(OAIObject summary);
    void gETGetStackPolicySignal(OAIGetStackPolicyOutput summary);
    void gETGetTemplateSignal(OAIGetTemplateOutput summary);
    void gETGetTemplateSummarySignal(OAIGetTemplateSummaryOutput summary);
    void gETImportStacksToStackSetSignal(OAIImportStacksToStackSetOutput summary);
    void gETListChangeSetsSignal(OAIListChangeSetsOutput summary);
    void gETListExportsSignal(OAIListExportsOutput summary);
    void gETListImportsSignal(OAIListImportsOutput summary);
    void gETListStackInstanceResourceDriftsSignal(OAIListStackInstanceResourceDriftsOutput summary);
    void gETListStackInstancesSignal(OAIListStackInstancesOutput summary);
    void gETListStackResourcesSignal(OAIListStackResourcesOutput summary);
    void gETListStackSetOperationResultsSignal(OAIListStackSetOperationResultsOutput summary);
    void gETListStackSetOperationsSignal(OAIListStackSetOperationsOutput summary);
    void gETListStackSetsSignal(OAIListStackSetsOutput summary);
    void gETListStacksSignal(OAIListStacksOutput summary);
    void gETListTypeRegistrationsSignal(OAIListTypeRegistrationsOutput summary);
    void gETListTypeVersionsSignal(OAIListTypeVersionsOutput summary);
    void gETListTypesSignal(OAIListTypesOutput summary);
    void gETPublishTypeSignal(OAIPublishTypeOutput summary);
    void gETRecordHandlerProgressSignal(OAIObject summary);
    void gETRegisterPublisherSignal(OAIRegisterPublisherOutput summary);
    void gETRegisterTypeSignal(OAIRegisterTypeOutput summary);
    void gETRollbackStackSignal(OAIRollbackStackOutput summary);
    void gETSetStackPolicySignal();
    void gETSetTypeConfigurationSignal(OAISetTypeConfigurationOutput summary);
    void gETSetTypeDefaultVersionSignal(OAIObject summary);
    void gETSignalResourceSignal();
    void gETStopStackSetOperationSignal(OAIObject summary);
    void gETTestTypeSignal(OAITestTypeOutput summary);
    void gETUpdateStackSignal(OAIUpdateStackOutput summary);
    void gETUpdateStackInstancesSignal(OAIUpdateStackInstancesOutput summary);
    void gETUpdateStackSetSignal(OAIUpdateStackSetOutput summary);
    void gETUpdateTerminationProtectionSignal(OAIUpdateTerminationProtectionOutput summary);
    void gETValidateTemplateSignal(OAIValidateTemplateOutput summary);
    void pOSTActivateOrganizationsAccessSignal(OAIObject summary);
    void pOSTActivateTypeSignal(OAIActivateTypeOutput summary);
    void pOSTBatchDescribeTypeConfigurationsSignal(OAIBatchDescribeTypeConfigurationsOutput summary);
    void pOSTCancelUpdateStackSignal();
    void pOSTContinueUpdateRollbackSignal(OAIObject summary);
    void pOSTCreateChangeSetSignal(OAICreateChangeSetOutput summary);
    void pOSTCreateStackSignal(OAICreateStackOutput summary);
    void pOSTCreateStackInstancesSignal(OAICreateStackInstancesOutput summary);
    void pOSTCreateStackSetSignal(OAICreateStackSetOutput summary);
    void pOSTDeactivateOrganizationsAccessSignal(OAIObject summary);
    void pOSTDeactivateTypeSignal(OAIObject summary);
    void pOSTDeleteChangeSetSignal(OAIObject summary);
    void pOSTDeleteStackSignal();
    void pOSTDeleteStackInstancesSignal(OAIDeleteStackInstancesOutput summary);
    void pOSTDeleteStackSetSignal(OAIObject summary);
    void pOSTDeregisterTypeSignal(OAIObject summary);
    void pOSTDescribeAccountLimitsSignal(OAIDescribeAccountLimitsOutput summary);
    void pOSTDescribeChangeSetSignal(OAIDescribeChangeSetOutput summary);
    void pOSTDescribeChangeSetHooksSignal(OAIDescribeChangeSetHooksOutput summary);
    void pOSTDescribeOrganizationsAccessSignal(OAIDescribeOrganizationsAccessOutput summary);
    void pOSTDescribePublisherSignal(OAIDescribePublisherOutput summary);
    void pOSTDescribeStackDriftDetectionStatusSignal(OAIDescribeStackDriftDetectionStatusOutput summary);
    void pOSTDescribeStackEventsSignal(OAIDescribeStackEventsOutput summary);
    void pOSTDescribeStackInstanceSignal(OAIDescribeStackInstanceOutput summary);
    void pOSTDescribeStackResourceSignal(OAIDescribeStackResourceOutput summary);
    void pOSTDescribeStackResourceDriftsSignal(OAIDescribeStackResourceDriftsOutput summary);
    void pOSTDescribeStackResourcesSignal(OAIDescribeStackResourcesOutput summary);
    void pOSTDescribeStackSetSignal(OAIDescribeStackSetOutput summary);
    void pOSTDescribeStackSetOperationSignal(OAIDescribeStackSetOperationOutput summary);
    void pOSTDescribeStacksSignal(OAIDescribeStacksOutput summary);
    void pOSTDescribeTypeSignal(OAIDescribeTypeOutput summary);
    void pOSTDescribeTypeRegistrationSignal(OAIDescribeTypeRegistrationOutput summary);
    void pOSTDetectStackDriftSignal(OAIDetectStackDriftOutput summary);
    void pOSTDetectStackResourceDriftSignal(OAIDetectStackResourceDriftOutput summary);
    void pOSTDetectStackSetDriftSignal(OAIDetectStackSetDriftOutput summary);
    void pOSTEstimateTemplateCostSignal(OAIEstimateTemplateCostOutput summary);
    void pOSTExecuteChangeSetSignal(OAIObject summary);
    void pOSTGetStackPolicySignal(OAIGetStackPolicyOutput summary);
    void pOSTGetTemplateSignal(OAIGetTemplateOutput summary);
    void pOSTGetTemplateSummarySignal(OAIGetTemplateSummaryOutput summary);
    void pOSTImportStacksToStackSetSignal(OAIImportStacksToStackSetOutput summary);
    void pOSTListChangeSetsSignal(OAIListChangeSetsOutput summary);
    void pOSTListExportsSignal(OAIListExportsOutput summary);
    void pOSTListImportsSignal(OAIListImportsOutput summary);
    void pOSTListStackInstanceResourceDriftsSignal(OAIListStackInstanceResourceDriftsOutput summary);
    void pOSTListStackInstancesSignal(OAIListStackInstancesOutput summary);
    void pOSTListStackResourcesSignal(OAIListStackResourcesOutput summary);
    void pOSTListStackSetOperationResultsSignal(OAIListStackSetOperationResultsOutput summary);
    void pOSTListStackSetOperationsSignal(OAIListStackSetOperationsOutput summary);
    void pOSTListStackSetsSignal(OAIListStackSetsOutput summary);
    void pOSTListStacksSignal(OAIListStacksOutput summary);
    void pOSTListTypeRegistrationsSignal(OAIListTypeRegistrationsOutput summary);
    void pOSTListTypeVersionsSignal(OAIListTypeVersionsOutput summary);
    void pOSTListTypesSignal(OAIListTypesOutput summary);
    void pOSTPublishTypeSignal(OAIPublishTypeOutput summary);
    void pOSTRecordHandlerProgressSignal(OAIObject summary);
    void pOSTRegisterPublisherSignal(OAIRegisterPublisherOutput summary);
    void pOSTRegisterTypeSignal(OAIRegisterTypeOutput summary);
    void pOSTRollbackStackSignal(OAIRollbackStackOutput summary);
    void pOSTSetStackPolicySignal();
    void pOSTSetTypeConfigurationSignal(OAISetTypeConfigurationOutput summary);
    void pOSTSetTypeDefaultVersionSignal(OAIObject summary);
    void pOSTSignalResourceSignal();
    void pOSTStopStackSetOperationSignal(OAIObject summary);
    void pOSTTestTypeSignal(OAITestTypeOutput summary);
    void pOSTUpdateStackSignal(OAIUpdateStackOutput summary);
    void pOSTUpdateStackInstancesSignal(OAIUpdateStackInstancesOutput summary);
    void pOSTUpdateStackSetSignal(OAIUpdateStackSetOutput summary);
    void pOSTUpdateTerminationProtectionSignal(OAIUpdateTerminationProtectionOutput summary);
    void pOSTValidateTemplateSignal(OAIValidateTemplateOutput summary);


    void gETActivateOrganizationsAccessSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETActivateTypeSignalFull(OAIHttpRequestWorker *worker, OAIActivateTypeOutput summary);
    void gETBatchDescribeTypeConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIBatchDescribeTypeConfigurationsOutput summary);
    void gETCancelUpdateStackSignalFull(OAIHttpRequestWorker *worker);
    void gETContinueUpdateRollbackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateChangeSetSignalFull(OAIHttpRequestWorker *worker, OAICreateChangeSetOutput summary);
    void gETCreateStackSignalFull(OAIHttpRequestWorker *worker, OAICreateStackOutput summary);
    void gETCreateStackInstancesSignalFull(OAIHttpRequestWorker *worker, OAICreateStackInstancesOutput summary);
    void gETCreateStackSetSignalFull(OAIHttpRequestWorker *worker, OAICreateStackSetOutput summary);
    void gETDeactivateOrganizationsAccessSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeactivateTypeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteChangeSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteStackSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteStackInstancesSignalFull(OAIHttpRequestWorker *worker, OAIDeleteStackInstancesOutput summary);
    void gETDeleteStackSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeregisterTypeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDescribeAccountLimitsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountLimitsOutput summary);
    void gETDescribeChangeSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChangeSetOutput summary);
    void gETDescribeChangeSetHooksSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChangeSetHooksOutput summary);
    void gETDescribeOrganizationsAccessSignalFull(OAIHttpRequestWorker *worker, OAIDescribeOrganizationsAccessOutput summary);
    void gETDescribePublisherSignalFull(OAIHttpRequestWorker *worker, OAIDescribePublisherOutput summary);
    void gETDescribeStackDriftDetectionStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackDriftDetectionStatusOutput summary);
    void gETDescribeStackEventsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackEventsOutput summary);
    void gETDescribeStackInstanceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackInstanceOutput summary);
    void gETDescribeStackResourceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackResourceOutput summary);
    void gETDescribeStackResourceDriftsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackResourceDriftsOutput summary);
    void gETDescribeStackResourcesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackResourcesOutput summary);
    void gETDescribeStackSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackSetOutput summary);
    void gETDescribeStackSetOperationSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackSetOperationOutput summary);
    void gETDescribeStacksSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStacksOutput summary);
    void gETDescribeTypeSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTypeOutput summary);
    void gETDescribeTypeRegistrationSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTypeRegistrationOutput summary);
    void gETDetectStackDriftSignalFull(OAIHttpRequestWorker *worker, OAIDetectStackDriftOutput summary);
    void gETDetectStackResourceDriftSignalFull(OAIHttpRequestWorker *worker, OAIDetectStackResourceDriftOutput summary);
    void gETDetectStackSetDriftSignalFull(OAIHttpRequestWorker *worker, OAIDetectStackSetDriftOutput summary);
    void gETEstimateTemplateCostSignalFull(OAIHttpRequestWorker *worker, OAIEstimateTemplateCostOutput summary);
    void gETExecuteChangeSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETGetStackPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetStackPolicyOutput summary);
    void gETGetTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetTemplateOutput summary);
    void gETGetTemplateSummarySignalFull(OAIHttpRequestWorker *worker, OAIGetTemplateSummaryOutput summary);
    void gETImportStacksToStackSetSignalFull(OAIHttpRequestWorker *worker, OAIImportStacksToStackSetOutput summary);
    void gETListChangeSetsSignalFull(OAIHttpRequestWorker *worker, OAIListChangeSetsOutput summary);
    void gETListExportsSignalFull(OAIHttpRequestWorker *worker, OAIListExportsOutput summary);
    void gETListImportsSignalFull(OAIHttpRequestWorker *worker, OAIListImportsOutput summary);
    void gETListStackInstanceResourceDriftsSignalFull(OAIHttpRequestWorker *worker, OAIListStackInstanceResourceDriftsOutput summary);
    void gETListStackInstancesSignalFull(OAIHttpRequestWorker *worker, OAIListStackInstancesOutput summary);
    void gETListStackResourcesSignalFull(OAIHttpRequestWorker *worker, OAIListStackResourcesOutput summary);
    void gETListStackSetOperationResultsSignalFull(OAIHttpRequestWorker *worker, OAIListStackSetOperationResultsOutput summary);
    void gETListStackSetOperationsSignalFull(OAIHttpRequestWorker *worker, OAIListStackSetOperationsOutput summary);
    void gETListStackSetsSignalFull(OAIHttpRequestWorker *worker, OAIListStackSetsOutput summary);
    void gETListStacksSignalFull(OAIHttpRequestWorker *worker, OAIListStacksOutput summary);
    void gETListTypeRegistrationsSignalFull(OAIHttpRequestWorker *worker, OAIListTypeRegistrationsOutput summary);
    void gETListTypeVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListTypeVersionsOutput summary);
    void gETListTypesSignalFull(OAIHttpRequestWorker *worker, OAIListTypesOutput summary);
    void gETPublishTypeSignalFull(OAIHttpRequestWorker *worker, OAIPublishTypeOutput summary);
    void gETRecordHandlerProgressSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETRegisterPublisherSignalFull(OAIHttpRequestWorker *worker, OAIRegisterPublisherOutput summary);
    void gETRegisterTypeSignalFull(OAIHttpRequestWorker *worker, OAIRegisterTypeOutput summary);
    void gETRollbackStackSignalFull(OAIHttpRequestWorker *worker, OAIRollbackStackOutput summary);
    void gETSetStackPolicySignalFull(OAIHttpRequestWorker *worker);
    void gETSetTypeConfigurationSignalFull(OAIHttpRequestWorker *worker, OAISetTypeConfigurationOutput summary);
    void gETSetTypeDefaultVersionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSignalResourceSignalFull(OAIHttpRequestWorker *worker);
    void gETStopStackSetOperationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETTestTypeSignalFull(OAIHttpRequestWorker *worker, OAITestTypeOutput summary);
    void gETUpdateStackSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStackOutput summary);
    void gETUpdateStackInstancesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStackInstancesOutput summary);
    void gETUpdateStackSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStackSetOutput summary);
    void gETUpdateTerminationProtectionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTerminationProtectionOutput summary);
    void gETValidateTemplateSignalFull(OAIHttpRequestWorker *worker, OAIValidateTemplateOutput summary);
    void pOSTActivateOrganizationsAccessSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTActivateTypeSignalFull(OAIHttpRequestWorker *worker, OAIActivateTypeOutput summary);
    void pOSTBatchDescribeTypeConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIBatchDescribeTypeConfigurationsOutput summary);
    void pOSTCancelUpdateStackSignalFull(OAIHttpRequestWorker *worker);
    void pOSTContinueUpdateRollbackSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateChangeSetSignalFull(OAIHttpRequestWorker *worker, OAICreateChangeSetOutput summary);
    void pOSTCreateStackSignalFull(OAIHttpRequestWorker *worker, OAICreateStackOutput summary);
    void pOSTCreateStackInstancesSignalFull(OAIHttpRequestWorker *worker, OAICreateStackInstancesOutput summary);
    void pOSTCreateStackSetSignalFull(OAIHttpRequestWorker *worker, OAICreateStackSetOutput summary);
    void pOSTDeactivateOrganizationsAccessSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeactivateTypeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteChangeSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteStackSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteStackInstancesSignalFull(OAIHttpRequestWorker *worker, OAIDeleteStackInstancesOutput summary);
    void pOSTDeleteStackSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeregisterTypeSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDescribeAccountLimitsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAccountLimitsOutput summary);
    void pOSTDescribeChangeSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChangeSetOutput summary);
    void pOSTDescribeChangeSetHooksSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChangeSetHooksOutput summary);
    void pOSTDescribeOrganizationsAccessSignalFull(OAIHttpRequestWorker *worker, OAIDescribeOrganizationsAccessOutput summary);
    void pOSTDescribePublisherSignalFull(OAIHttpRequestWorker *worker, OAIDescribePublisherOutput summary);
    void pOSTDescribeStackDriftDetectionStatusSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackDriftDetectionStatusOutput summary);
    void pOSTDescribeStackEventsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackEventsOutput summary);
    void pOSTDescribeStackInstanceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackInstanceOutput summary);
    void pOSTDescribeStackResourceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackResourceOutput summary);
    void pOSTDescribeStackResourceDriftsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackResourceDriftsOutput summary);
    void pOSTDescribeStackResourcesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackResourcesOutput summary);
    void pOSTDescribeStackSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackSetOutput summary);
    void pOSTDescribeStackSetOperationSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStackSetOperationOutput summary);
    void pOSTDescribeStacksSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStacksOutput summary);
    void pOSTDescribeTypeSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTypeOutput summary);
    void pOSTDescribeTypeRegistrationSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTypeRegistrationOutput summary);
    void pOSTDetectStackDriftSignalFull(OAIHttpRequestWorker *worker, OAIDetectStackDriftOutput summary);
    void pOSTDetectStackResourceDriftSignalFull(OAIHttpRequestWorker *worker, OAIDetectStackResourceDriftOutput summary);
    void pOSTDetectStackSetDriftSignalFull(OAIHttpRequestWorker *worker, OAIDetectStackSetDriftOutput summary);
    void pOSTEstimateTemplateCostSignalFull(OAIHttpRequestWorker *worker, OAIEstimateTemplateCostOutput summary);
    void pOSTExecuteChangeSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTGetStackPolicySignalFull(OAIHttpRequestWorker *worker, OAIGetStackPolicyOutput summary);
    void pOSTGetTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetTemplateOutput summary);
    void pOSTGetTemplateSummarySignalFull(OAIHttpRequestWorker *worker, OAIGetTemplateSummaryOutput summary);
    void pOSTImportStacksToStackSetSignalFull(OAIHttpRequestWorker *worker, OAIImportStacksToStackSetOutput summary);
    void pOSTListChangeSetsSignalFull(OAIHttpRequestWorker *worker, OAIListChangeSetsOutput summary);
    void pOSTListExportsSignalFull(OAIHttpRequestWorker *worker, OAIListExportsOutput summary);
    void pOSTListImportsSignalFull(OAIHttpRequestWorker *worker, OAIListImportsOutput summary);
    void pOSTListStackInstanceResourceDriftsSignalFull(OAIHttpRequestWorker *worker, OAIListStackInstanceResourceDriftsOutput summary);
    void pOSTListStackInstancesSignalFull(OAIHttpRequestWorker *worker, OAIListStackInstancesOutput summary);
    void pOSTListStackResourcesSignalFull(OAIHttpRequestWorker *worker, OAIListStackResourcesOutput summary);
    void pOSTListStackSetOperationResultsSignalFull(OAIHttpRequestWorker *worker, OAIListStackSetOperationResultsOutput summary);
    void pOSTListStackSetOperationsSignalFull(OAIHttpRequestWorker *worker, OAIListStackSetOperationsOutput summary);
    void pOSTListStackSetsSignalFull(OAIHttpRequestWorker *worker, OAIListStackSetsOutput summary);
    void pOSTListStacksSignalFull(OAIHttpRequestWorker *worker, OAIListStacksOutput summary);
    void pOSTListTypeRegistrationsSignalFull(OAIHttpRequestWorker *worker, OAIListTypeRegistrationsOutput summary);
    void pOSTListTypeVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListTypeVersionsOutput summary);
    void pOSTListTypesSignalFull(OAIHttpRequestWorker *worker, OAIListTypesOutput summary);
    void pOSTPublishTypeSignalFull(OAIHttpRequestWorker *worker, OAIPublishTypeOutput summary);
    void pOSTRecordHandlerProgressSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTRegisterPublisherSignalFull(OAIHttpRequestWorker *worker, OAIRegisterPublisherOutput summary);
    void pOSTRegisterTypeSignalFull(OAIHttpRequestWorker *worker, OAIRegisterTypeOutput summary);
    void pOSTRollbackStackSignalFull(OAIHttpRequestWorker *worker, OAIRollbackStackOutput summary);
    void pOSTSetStackPolicySignalFull(OAIHttpRequestWorker *worker);
    void pOSTSetTypeConfigurationSignalFull(OAIHttpRequestWorker *worker, OAISetTypeConfigurationOutput summary);
    void pOSTSetTypeDefaultVersionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSignalResourceSignalFull(OAIHttpRequestWorker *worker);
    void pOSTStopStackSetOperationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTTestTypeSignalFull(OAIHttpRequestWorker *worker, OAITestTypeOutput summary);
    void pOSTUpdateStackSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStackOutput summary);
    void pOSTUpdateStackInstancesSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStackInstancesOutput summary);
    void pOSTUpdateStackSetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateStackSetOutput summary);
    void pOSTUpdateTerminationProtectionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTerminationProtectionOutput summary);
    void pOSTValidateTemplateSignalFull(OAIHttpRequestWorker *worker, OAIValidateTemplateOutput summary);

    Q_DECL_DEPRECATED_X("Use gETActivateOrganizationsAccessSignalError() instead")
    void gETActivateOrganizationsAccessSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETActivateOrganizationsAccessSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETActivateTypeSignalError() instead")
    void gETActivateTypeSignalE(OAIActivateTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETActivateTypeSignalError(OAIActivateTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchDescribeTypeConfigurationsSignalError() instead")
    void gETBatchDescribeTypeConfigurationsSignalE(OAIBatchDescribeTypeConfigurationsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchDescribeTypeConfigurationsSignalError(OAIBatchDescribeTypeConfigurationsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCancelUpdateStackSignalError() instead")
    void gETCancelUpdateStackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETCancelUpdateStackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETContinueUpdateRollbackSignalError() instead")
    void gETContinueUpdateRollbackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETContinueUpdateRollbackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateChangeSetSignalError() instead")
    void gETCreateChangeSetSignalE(OAICreateChangeSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateChangeSetSignalError(OAICreateChangeSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateStackSignalError() instead")
    void gETCreateStackSignalE(OAICreateStackOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateStackSignalError(OAICreateStackOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateStackInstancesSignalError() instead")
    void gETCreateStackInstancesSignalE(OAICreateStackInstancesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateStackInstancesSignalError(OAICreateStackInstancesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateStackSetSignalError() instead")
    void gETCreateStackSetSignalE(OAICreateStackSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateStackSetSignalError(OAICreateStackSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeactivateOrganizationsAccessSignalError() instead")
    void gETDeactivateOrganizationsAccessSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeactivateOrganizationsAccessSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeactivateTypeSignalError() instead")
    void gETDeactivateTypeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeactivateTypeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteChangeSetSignalError() instead")
    void gETDeleteChangeSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteChangeSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteStackSignalError() instead")
    void gETDeleteStackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteStackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteStackInstancesSignalError() instead")
    void gETDeleteStackInstancesSignalE(OAIDeleteStackInstancesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteStackInstancesSignalError(OAIDeleteStackInstancesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteStackSetSignalError() instead")
    void gETDeleteStackSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteStackSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeregisterTypeSignalError() instead")
    void gETDeregisterTypeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeregisterTypeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountLimitsSignalError() instead")
    void gETDescribeAccountLimitsSignalE(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountLimitsSignalError(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeChangeSetSignalError() instead")
    void gETDescribeChangeSetSignalE(OAIDescribeChangeSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeChangeSetSignalError(OAIDescribeChangeSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeChangeSetHooksSignalError() instead")
    void gETDescribeChangeSetHooksSignalE(OAIDescribeChangeSetHooksOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeChangeSetHooksSignalError(OAIDescribeChangeSetHooksOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeOrganizationsAccessSignalError() instead")
    void gETDescribeOrganizationsAccessSignalE(OAIDescribeOrganizationsAccessOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeOrganizationsAccessSignalError(OAIDescribeOrganizationsAccessOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePublisherSignalError() instead")
    void gETDescribePublisherSignalE(OAIDescribePublisherOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePublisherSignalError(OAIDescribePublisherOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackDriftDetectionStatusSignalError() instead")
    void gETDescribeStackDriftDetectionStatusSignalE(OAIDescribeStackDriftDetectionStatusOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackDriftDetectionStatusSignalError(OAIDescribeStackDriftDetectionStatusOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackEventsSignalError() instead")
    void gETDescribeStackEventsSignalE(OAIDescribeStackEventsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackEventsSignalError(OAIDescribeStackEventsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackInstanceSignalError() instead")
    void gETDescribeStackInstanceSignalE(OAIDescribeStackInstanceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackInstanceSignalError(OAIDescribeStackInstanceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackResourceSignalError() instead")
    void gETDescribeStackResourceSignalE(OAIDescribeStackResourceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackResourceSignalError(OAIDescribeStackResourceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackResourceDriftsSignalError() instead")
    void gETDescribeStackResourceDriftsSignalE(OAIDescribeStackResourceDriftsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackResourceDriftsSignalError(OAIDescribeStackResourceDriftsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackResourcesSignalError() instead")
    void gETDescribeStackResourcesSignalE(OAIDescribeStackResourcesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackResourcesSignalError(OAIDescribeStackResourcesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackSetSignalError() instead")
    void gETDescribeStackSetSignalE(OAIDescribeStackSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackSetSignalError(OAIDescribeStackSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackSetOperationSignalError() instead")
    void gETDescribeStackSetOperationSignalE(OAIDescribeStackSetOperationOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackSetOperationSignalError(OAIDescribeStackSetOperationOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStacksSignalError() instead")
    void gETDescribeStacksSignalE(OAIDescribeStacksOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStacksSignalError(OAIDescribeStacksOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTypeSignalError() instead")
    void gETDescribeTypeSignalE(OAIDescribeTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTypeSignalError(OAIDescribeTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTypeRegistrationSignalError() instead")
    void gETDescribeTypeRegistrationSignalE(OAIDescribeTypeRegistrationOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTypeRegistrationSignalError(OAIDescribeTypeRegistrationOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetectStackDriftSignalError() instead")
    void gETDetectStackDriftSignalE(OAIDetectStackDriftOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetectStackDriftSignalError(OAIDetectStackDriftOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetectStackResourceDriftSignalError() instead")
    void gETDetectStackResourceDriftSignalE(OAIDetectStackResourceDriftOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetectStackResourceDriftSignalError(OAIDetectStackResourceDriftOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetectStackSetDriftSignalError() instead")
    void gETDetectStackSetDriftSignalE(OAIDetectStackSetDriftOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetectStackSetDriftSignalError(OAIDetectStackSetDriftOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEstimateTemplateCostSignalError() instead")
    void gETEstimateTemplateCostSignalE(OAIEstimateTemplateCostOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEstimateTemplateCostSignalError(OAIEstimateTemplateCostOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETExecuteChangeSetSignalError() instead")
    void gETExecuteChangeSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETExecuteChangeSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetStackPolicySignalError() instead")
    void gETGetStackPolicySignalE(OAIGetStackPolicyOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetStackPolicySignalError(OAIGetStackPolicyOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetTemplateSignalError() instead")
    void gETGetTemplateSignalE(OAIGetTemplateOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetTemplateSignalError(OAIGetTemplateOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetTemplateSummarySignalError() instead")
    void gETGetTemplateSummarySignalE(OAIGetTemplateSummaryOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetTemplateSummarySignalError(OAIGetTemplateSummaryOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETImportStacksToStackSetSignalError() instead")
    void gETImportStacksToStackSetSignalE(OAIImportStacksToStackSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETImportStacksToStackSetSignalError(OAIImportStacksToStackSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListChangeSetsSignalError() instead")
    void gETListChangeSetsSignalE(OAIListChangeSetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListChangeSetsSignalError(OAIListChangeSetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListExportsSignalError() instead")
    void gETListExportsSignalE(OAIListExportsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListExportsSignalError(OAIListExportsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListImportsSignalError() instead")
    void gETListImportsSignalE(OAIListImportsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListImportsSignalError(OAIListImportsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackInstanceResourceDriftsSignalError() instead")
    void gETListStackInstanceResourceDriftsSignalE(OAIListStackInstanceResourceDriftsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackInstanceResourceDriftsSignalError(OAIListStackInstanceResourceDriftsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackInstancesSignalError() instead")
    void gETListStackInstancesSignalE(OAIListStackInstancesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackInstancesSignalError(OAIListStackInstancesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackResourcesSignalError() instead")
    void gETListStackResourcesSignalE(OAIListStackResourcesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackResourcesSignalError(OAIListStackResourcesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackSetOperationResultsSignalError() instead")
    void gETListStackSetOperationResultsSignalE(OAIListStackSetOperationResultsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackSetOperationResultsSignalError(OAIListStackSetOperationResultsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackSetOperationsSignalError() instead")
    void gETListStackSetOperationsSignalE(OAIListStackSetOperationsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackSetOperationsSignalError(OAIListStackSetOperationsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackSetsSignalError() instead")
    void gETListStackSetsSignalE(OAIListStackSetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackSetsSignalError(OAIListStackSetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStacksSignalError() instead")
    void gETListStacksSignalE(OAIListStacksOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStacksSignalError(OAIListStacksOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTypeRegistrationsSignalError() instead")
    void gETListTypeRegistrationsSignalE(OAIListTypeRegistrationsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTypeRegistrationsSignalError(OAIListTypeRegistrationsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTypeVersionsSignalError() instead")
    void gETListTypeVersionsSignalE(OAIListTypeVersionsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTypeVersionsSignalError(OAIListTypeVersionsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTypesSignalError() instead")
    void gETListTypesSignalE(OAIListTypesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTypesSignalError(OAIListTypesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPublishTypeSignalError() instead")
    void gETPublishTypeSignalE(OAIPublishTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPublishTypeSignalError(OAIPublishTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRecordHandlerProgressSignalError() instead")
    void gETRecordHandlerProgressSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRecordHandlerProgressSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRegisterPublisherSignalError() instead")
    void gETRegisterPublisherSignalE(OAIRegisterPublisherOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRegisterPublisherSignalError(OAIRegisterPublisherOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRegisterTypeSignalError() instead")
    void gETRegisterTypeSignalE(OAIRegisterTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRegisterTypeSignalError(OAIRegisterTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRollbackStackSignalError() instead")
    void gETRollbackStackSignalE(OAIRollbackStackOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRollbackStackSignalError(OAIRollbackStackOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetStackPolicySignalError() instead")
    void gETSetStackPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetStackPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetTypeConfigurationSignalError() instead")
    void gETSetTypeConfigurationSignalE(OAISetTypeConfigurationOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetTypeConfigurationSignalError(OAISetTypeConfigurationOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetTypeDefaultVersionSignalError() instead")
    void gETSetTypeDefaultVersionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetTypeDefaultVersionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSignalResourceSignalError() instead")
    void gETSignalResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETSignalResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStopStackSetOperationSignalError() instead")
    void gETStopStackSetOperationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStopStackSetOperationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTestTypeSignalError() instead")
    void gETTestTypeSignalE(OAITestTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTestTypeSignalError(OAITestTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStackSignalError() instead")
    void gETUpdateStackSignalE(OAIUpdateStackOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStackSignalError(OAIUpdateStackOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStackInstancesSignalError() instead")
    void gETUpdateStackInstancesSignalE(OAIUpdateStackInstancesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStackInstancesSignalError(OAIUpdateStackInstancesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStackSetSignalError() instead")
    void gETUpdateStackSetSignalE(OAIUpdateStackSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStackSetSignalError(OAIUpdateStackSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateTerminationProtectionSignalError() instead")
    void gETUpdateTerminationProtectionSignalE(OAIUpdateTerminationProtectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateTerminationProtectionSignalError(OAIUpdateTerminationProtectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETValidateTemplateSignalError() instead")
    void gETValidateTemplateSignalE(OAIValidateTemplateOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETValidateTemplateSignalError(OAIValidateTemplateOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTActivateOrganizationsAccessSignalError() instead")
    void pOSTActivateOrganizationsAccessSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTActivateOrganizationsAccessSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTActivateTypeSignalError() instead")
    void pOSTActivateTypeSignalE(OAIActivateTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTActivateTypeSignalError(OAIActivateTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchDescribeTypeConfigurationsSignalError() instead")
    void pOSTBatchDescribeTypeConfigurationsSignalE(OAIBatchDescribeTypeConfigurationsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchDescribeTypeConfigurationsSignalError(OAIBatchDescribeTypeConfigurationsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCancelUpdateStackSignalError() instead")
    void pOSTCancelUpdateStackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCancelUpdateStackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTContinueUpdateRollbackSignalError() instead")
    void pOSTContinueUpdateRollbackSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTContinueUpdateRollbackSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateChangeSetSignalError() instead")
    void pOSTCreateChangeSetSignalE(OAICreateChangeSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateChangeSetSignalError(OAICreateChangeSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateStackSignalError() instead")
    void pOSTCreateStackSignalE(OAICreateStackOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateStackSignalError(OAICreateStackOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateStackInstancesSignalError() instead")
    void pOSTCreateStackInstancesSignalE(OAICreateStackInstancesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateStackInstancesSignalError(OAICreateStackInstancesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateStackSetSignalError() instead")
    void pOSTCreateStackSetSignalE(OAICreateStackSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateStackSetSignalError(OAICreateStackSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeactivateOrganizationsAccessSignalError() instead")
    void pOSTDeactivateOrganizationsAccessSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeactivateOrganizationsAccessSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeactivateTypeSignalError() instead")
    void pOSTDeactivateTypeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeactivateTypeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteChangeSetSignalError() instead")
    void pOSTDeleteChangeSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteChangeSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteStackSignalError() instead")
    void pOSTDeleteStackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteStackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteStackInstancesSignalError() instead")
    void pOSTDeleteStackInstancesSignalE(OAIDeleteStackInstancesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteStackInstancesSignalError(OAIDeleteStackInstancesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteStackSetSignalError() instead")
    void pOSTDeleteStackSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteStackSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeregisterTypeSignalError() instead")
    void pOSTDeregisterTypeSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeregisterTypeSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountLimitsSignalError() instead")
    void pOSTDescribeAccountLimitsSignalE(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountLimitsSignalError(OAIDescribeAccountLimitsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeChangeSetSignalError() instead")
    void pOSTDescribeChangeSetSignalE(OAIDescribeChangeSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeChangeSetSignalError(OAIDescribeChangeSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeChangeSetHooksSignalError() instead")
    void pOSTDescribeChangeSetHooksSignalE(OAIDescribeChangeSetHooksOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeChangeSetHooksSignalError(OAIDescribeChangeSetHooksOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeOrganizationsAccessSignalError() instead")
    void pOSTDescribeOrganizationsAccessSignalE(OAIDescribeOrganizationsAccessOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeOrganizationsAccessSignalError(OAIDescribeOrganizationsAccessOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePublisherSignalError() instead")
    void pOSTDescribePublisherSignalE(OAIDescribePublisherOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePublisherSignalError(OAIDescribePublisherOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackDriftDetectionStatusSignalError() instead")
    void pOSTDescribeStackDriftDetectionStatusSignalE(OAIDescribeStackDriftDetectionStatusOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackDriftDetectionStatusSignalError(OAIDescribeStackDriftDetectionStatusOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackEventsSignalError() instead")
    void pOSTDescribeStackEventsSignalE(OAIDescribeStackEventsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackEventsSignalError(OAIDescribeStackEventsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackInstanceSignalError() instead")
    void pOSTDescribeStackInstanceSignalE(OAIDescribeStackInstanceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackInstanceSignalError(OAIDescribeStackInstanceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackResourceSignalError() instead")
    void pOSTDescribeStackResourceSignalE(OAIDescribeStackResourceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackResourceSignalError(OAIDescribeStackResourceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackResourceDriftsSignalError() instead")
    void pOSTDescribeStackResourceDriftsSignalE(OAIDescribeStackResourceDriftsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackResourceDriftsSignalError(OAIDescribeStackResourceDriftsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackResourcesSignalError() instead")
    void pOSTDescribeStackResourcesSignalE(OAIDescribeStackResourcesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackResourcesSignalError(OAIDescribeStackResourcesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackSetSignalError() instead")
    void pOSTDescribeStackSetSignalE(OAIDescribeStackSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackSetSignalError(OAIDescribeStackSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackSetOperationSignalError() instead")
    void pOSTDescribeStackSetOperationSignalE(OAIDescribeStackSetOperationOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackSetOperationSignalError(OAIDescribeStackSetOperationOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStacksSignalError() instead")
    void pOSTDescribeStacksSignalE(OAIDescribeStacksOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStacksSignalError(OAIDescribeStacksOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTypeSignalError() instead")
    void pOSTDescribeTypeSignalE(OAIDescribeTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTypeSignalError(OAIDescribeTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTypeRegistrationSignalError() instead")
    void pOSTDescribeTypeRegistrationSignalE(OAIDescribeTypeRegistrationOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTypeRegistrationSignalError(OAIDescribeTypeRegistrationOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetectStackDriftSignalError() instead")
    void pOSTDetectStackDriftSignalE(OAIDetectStackDriftOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetectStackDriftSignalError(OAIDetectStackDriftOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetectStackResourceDriftSignalError() instead")
    void pOSTDetectStackResourceDriftSignalE(OAIDetectStackResourceDriftOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetectStackResourceDriftSignalError(OAIDetectStackResourceDriftOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetectStackSetDriftSignalError() instead")
    void pOSTDetectStackSetDriftSignalE(OAIDetectStackSetDriftOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetectStackSetDriftSignalError(OAIDetectStackSetDriftOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEstimateTemplateCostSignalError() instead")
    void pOSTEstimateTemplateCostSignalE(OAIEstimateTemplateCostOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEstimateTemplateCostSignalError(OAIEstimateTemplateCostOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTExecuteChangeSetSignalError() instead")
    void pOSTExecuteChangeSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTExecuteChangeSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetStackPolicySignalError() instead")
    void pOSTGetStackPolicySignalE(OAIGetStackPolicyOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetStackPolicySignalError(OAIGetStackPolicyOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetTemplateSignalError() instead")
    void pOSTGetTemplateSignalE(OAIGetTemplateOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetTemplateSignalError(OAIGetTemplateOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetTemplateSummarySignalError() instead")
    void pOSTGetTemplateSummarySignalE(OAIGetTemplateSummaryOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetTemplateSummarySignalError(OAIGetTemplateSummaryOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTImportStacksToStackSetSignalError() instead")
    void pOSTImportStacksToStackSetSignalE(OAIImportStacksToStackSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTImportStacksToStackSetSignalError(OAIImportStacksToStackSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListChangeSetsSignalError() instead")
    void pOSTListChangeSetsSignalE(OAIListChangeSetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListChangeSetsSignalError(OAIListChangeSetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListExportsSignalError() instead")
    void pOSTListExportsSignalE(OAIListExportsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListExportsSignalError(OAIListExportsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListImportsSignalError() instead")
    void pOSTListImportsSignalE(OAIListImportsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListImportsSignalError(OAIListImportsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackInstanceResourceDriftsSignalError() instead")
    void pOSTListStackInstanceResourceDriftsSignalE(OAIListStackInstanceResourceDriftsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackInstanceResourceDriftsSignalError(OAIListStackInstanceResourceDriftsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackInstancesSignalError() instead")
    void pOSTListStackInstancesSignalE(OAIListStackInstancesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackInstancesSignalError(OAIListStackInstancesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackResourcesSignalError() instead")
    void pOSTListStackResourcesSignalE(OAIListStackResourcesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackResourcesSignalError(OAIListStackResourcesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackSetOperationResultsSignalError() instead")
    void pOSTListStackSetOperationResultsSignalE(OAIListStackSetOperationResultsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackSetOperationResultsSignalError(OAIListStackSetOperationResultsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackSetOperationsSignalError() instead")
    void pOSTListStackSetOperationsSignalE(OAIListStackSetOperationsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackSetOperationsSignalError(OAIListStackSetOperationsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackSetsSignalError() instead")
    void pOSTListStackSetsSignalE(OAIListStackSetsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackSetsSignalError(OAIListStackSetsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStacksSignalError() instead")
    void pOSTListStacksSignalE(OAIListStacksOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStacksSignalError(OAIListStacksOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTypeRegistrationsSignalError() instead")
    void pOSTListTypeRegistrationsSignalE(OAIListTypeRegistrationsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTypeRegistrationsSignalError(OAIListTypeRegistrationsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTypeVersionsSignalError() instead")
    void pOSTListTypeVersionsSignalE(OAIListTypeVersionsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTypeVersionsSignalError(OAIListTypeVersionsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTypesSignalError() instead")
    void pOSTListTypesSignalE(OAIListTypesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTypesSignalError(OAIListTypesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPublishTypeSignalError() instead")
    void pOSTPublishTypeSignalE(OAIPublishTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPublishTypeSignalError(OAIPublishTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRecordHandlerProgressSignalError() instead")
    void pOSTRecordHandlerProgressSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRecordHandlerProgressSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRegisterPublisherSignalError() instead")
    void pOSTRegisterPublisherSignalE(OAIRegisterPublisherOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRegisterPublisherSignalError(OAIRegisterPublisherOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRegisterTypeSignalError() instead")
    void pOSTRegisterTypeSignalE(OAIRegisterTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRegisterTypeSignalError(OAIRegisterTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRollbackStackSignalError() instead")
    void pOSTRollbackStackSignalE(OAIRollbackStackOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRollbackStackSignalError(OAIRollbackStackOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetStackPolicySignalError() instead")
    void pOSTSetStackPolicySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetStackPolicySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetTypeConfigurationSignalError() instead")
    void pOSTSetTypeConfigurationSignalE(OAISetTypeConfigurationOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetTypeConfigurationSignalError(OAISetTypeConfigurationOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetTypeDefaultVersionSignalError() instead")
    void pOSTSetTypeDefaultVersionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetTypeDefaultVersionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSignalResourceSignalError() instead")
    void pOSTSignalResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSignalResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStopStackSetOperationSignalError() instead")
    void pOSTStopStackSetOperationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStopStackSetOperationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTestTypeSignalError() instead")
    void pOSTTestTypeSignalE(OAITestTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTestTypeSignalError(OAITestTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStackSignalError() instead")
    void pOSTUpdateStackSignalE(OAIUpdateStackOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStackSignalError(OAIUpdateStackOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStackInstancesSignalError() instead")
    void pOSTUpdateStackInstancesSignalE(OAIUpdateStackInstancesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStackInstancesSignalError(OAIUpdateStackInstancesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStackSetSignalError() instead")
    void pOSTUpdateStackSetSignalE(OAIUpdateStackSetOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStackSetSignalError(OAIUpdateStackSetOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateTerminationProtectionSignalError() instead")
    void pOSTUpdateTerminationProtectionSignalE(OAIUpdateTerminationProtectionOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateTerminationProtectionSignalError(OAIUpdateTerminationProtectionOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTValidateTemplateSignalError() instead")
    void pOSTValidateTemplateSignalE(OAIValidateTemplateOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTValidateTemplateSignalError(OAIValidateTemplateOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETActivateOrganizationsAccessSignalErrorFull() instead")
    void gETActivateOrganizationsAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETActivateOrganizationsAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETActivateTypeSignalErrorFull() instead")
    void gETActivateTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETActivateTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETBatchDescribeTypeConfigurationsSignalErrorFull() instead")
    void gETBatchDescribeTypeConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETBatchDescribeTypeConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCancelUpdateStackSignalErrorFull() instead")
    void gETCancelUpdateStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCancelUpdateStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETContinueUpdateRollbackSignalErrorFull() instead")
    void gETContinueUpdateRollbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETContinueUpdateRollbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateChangeSetSignalErrorFull() instead")
    void gETCreateChangeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateChangeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateStackSignalErrorFull() instead")
    void gETCreateStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateStackInstancesSignalErrorFull() instead")
    void gETCreateStackInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateStackInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateStackSetSignalErrorFull() instead")
    void gETCreateStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeactivateOrganizationsAccessSignalErrorFull() instead")
    void gETDeactivateOrganizationsAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeactivateOrganizationsAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeactivateTypeSignalErrorFull() instead")
    void gETDeactivateTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeactivateTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteChangeSetSignalErrorFull() instead")
    void gETDeleteChangeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteChangeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteStackSignalErrorFull() instead")
    void gETDeleteStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteStackInstancesSignalErrorFull() instead")
    void gETDeleteStackInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteStackInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteStackSetSignalErrorFull() instead")
    void gETDeleteStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeregisterTypeSignalErrorFull() instead")
    void gETDeregisterTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeregisterTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeAccountLimitsSignalErrorFull() instead")
    void gETDescribeAccountLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeAccountLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeChangeSetSignalErrorFull() instead")
    void gETDescribeChangeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeChangeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeChangeSetHooksSignalErrorFull() instead")
    void gETDescribeChangeSetHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeChangeSetHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeOrganizationsAccessSignalErrorFull() instead")
    void gETDescribeOrganizationsAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeOrganizationsAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribePublisherSignalErrorFull() instead")
    void gETDescribePublisherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribePublisherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackDriftDetectionStatusSignalErrorFull() instead")
    void gETDescribeStackDriftDetectionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackDriftDetectionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackEventsSignalErrorFull() instead")
    void gETDescribeStackEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackInstanceSignalErrorFull() instead")
    void gETDescribeStackInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackResourceSignalErrorFull() instead")
    void gETDescribeStackResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackResourceDriftsSignalErrorFull() instead")
    void gETDescribeStackResourceDriftsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackResourceDriftsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackResourcesSignalErrorFull() instead")
    void gETDescribeStackResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackSetSignalErrorFull() instead")
    void gETDescribeStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStackSetOperationSignalErrorFull() instead")
    void gETDescribeStackSetOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStackSetOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeStacksSignalErrorFull() instead")
    void gETDescribeStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTypeSignalErrorFull() instead")
    void gETDescribeTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeTypeRegistrationSignalErrorFull() instead")
    void gETDescribeTypeRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeTypeRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetectStackDriftSignalErrorFull() instead")
    void gETDetectStackDriftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetectStackDriftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetectStackResourceDriftSignalErrorFull() instead")
    void gETDetectStackResourceDriftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetectStackResourceDriftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDetectStackSetDriftSignalErrorFull() instead")
    void gETDetectStackSetDriftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDetectStackSetDriftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETEstimateTemplateCostSignalErrorFull() instead")
    void gETEstimateTemplateCostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETEstimateTemplateCostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETExecuteChangeSetSignalErrorFull() instead")
    void gETExecuteChangeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETExecuteChangeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetStackPolicySignalErrorFull() instead")
    void gETGetStackPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetStackPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetTemplateSignalErrorFull() instead")
    void gETGetTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetTemplateSummarySignalErrorFull() instead")
    void gETGetTemplateSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetTemplateSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETImportStacksToStackSetSignalErrorFull() instead")
    void gETImportStacksToStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETImportStacksToStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListChangeSetsSignalErrorFull() instead")
    void gETListChangeSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListChangeSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListExportsSignalErrorFull() instead")
    void gETListExportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListExportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListImportsSignalErrorFull() instead")
    void gETListImportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListImportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackInstanceResourceDriftsSignalErrorFull() instead")
    void gETListStackInstanceResourceDriftsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackInstanceResourceDriftsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackInstancesSignalErrorFull() instead")
    void gETListStackInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackResourcesSignalErrorFull() instead")
    void gETListStackResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackSetOperationResultsSignalErrorFull() instead")
    void gETListStackSetOperationResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackSetOperationResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackSetOperationsSignalErrorFull() instead")
    void gETListStackSetOperationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackSetOperationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStackSetsSignalErrorFull() instead")
    void gETListStackSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStackSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListStacksSignalErrorFull() instead")
    void gETListStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTypeRegistrationsSignalErrorFull() instead")
    void gETListTypeRegistrationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTypeRegistrationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTypeVersionsSignalErrorFull() instead")
    void gETListTypeVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTypeVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTypesSignalErrorFull() instead")
    void gETListTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPublishTypeSignalErrorFull() instead")
    void gETPublishTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPublishTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRecordHandlerProgressSignalErrorFull() instead")
    void gETRecordHandlerProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRecordHandlerProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRegisterPublisherSignalErrorFull() instead")
    void gETRegisterPublisherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRegisterPublisherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRegisterTypeSignalErrorFull() instead")
    void gETRegisterTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRegisterTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETRollbackStackSignalErrorFull() instead")
    void gETRollbackStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETRollbackStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetStackPolicySignalErrorFull() instead")
    void gETSetStackPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetStackPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetTypeConfigurationSignalErrorFull() instead")
    void gETSetTypeConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetTypeConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetTypeDefaultVersionSignalErrorFull() instead")
    void gETSetTypeDefaultVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetTypeDefaultVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSignalResourceSignalErrorFull() instead")
    void gETSignalResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSignalResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETStopStackSetOperationSignalErrorFull() instead")
    void gETStopStackSetOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETStopStackSetOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTestTypeSignalErrorFull() instead")
    void gETTestTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTestTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStackSignalErrorFull() instead")
    void gETUpdateStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStackInstancesSignalErrorFull() instead")
    void gETUpdateStackInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStackInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateStackSetSignalErrorFull() instead")
    void gETUpdateStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateTerminationProtectionSignalErrorFull() instead")
    void gETUpdateTerminationProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateTerminationProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETValidateTemplateSignalErrorFull() instead")
    void gETValidateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETValidateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTActivateOrganizationsAccessSignalErrorFull() instead")
    void pOSTActivateOrganizationsAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTActivateOrganizationsAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTActivateTypeSignalErrorFull() instead")
    void pOSTActivateTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTActivateTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTBatchDescribeTypeConfigurationsSignalErrorFull() instead")
    void pOSTBatchDescribeTypeConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTBatchDescribeTypeConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCancelUpdateStackSignalErrorFull() instead")
    void pOSTCancelUpdateStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCancelUpdateStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTContinueUpdateRollbackSignalErrorFull() instead")
    void pOSTContinueUpdateRollbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTContinueUpdateRollbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateChangeSetSignalErrorFull() instead")
    void pOSTCreateChangeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateChangeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateStackSignalErrorFull() instead")
    void pOSTCreateStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateStackInstancesSignalErrorFull() instead")
    void pOSTCreateStackInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateStackInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateStackSetSignalErrorFull() instead")
    void pOSTCreateStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeactivateOrganizationsAccessSignalErrorFull() instead")
    void pOSTDeactivateOrganizationsAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeactivateOrganizationsAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeactivateTypeSignalErrorFull() instead")
    void pOSTDeactivateTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeactivateTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteChangeSetSignalErrorFull() instead")
    void pOSTDeleteChangeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteChangeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteStackSignalErrorFull() instead")
    void pOSTDeleteStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteStackInstancesSignalErrorFull() instead")
    void pOSTDeleteStackInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteStackInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteStackSetSignalErrorFull() instead")
    void pOSTDeleteStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeregisterTypeSignalErrorFull() instead")
    void pOSTDeregisterTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeregisterTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeAccountLimitsSignalErrorFull() instead")
    void pOSTDescribeAccountLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeAccountLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeChangeSetSignalErrorFull() instead")
    void pOSTDescribeChangeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeChangeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeChangeSetHooksSignalErrorFull() instead")
    void pOSTDescribeChangeSetHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeChangeSetHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeOrganizationsAccessSignalErrorFull() instead")
    void pOSTDescribeOrganizationsAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeOrganizationsAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribePublisherSignalErrorFull() instead")
    void pOSTDescribePublisherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribePublisherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackDriftDetectionStatusSignalErrorFull() instead")
    void pOSTDescribeStackDriftDetectionStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackDriftDetectionStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackEventsSignalErrorFull() instead")
    void pOSTDescribeStackEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackInstanceSignalErrorFull() instead")
    void pOSTDescribeStackInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackResourceSignalErrorFull() instead")
    void pOSTDescribeStackResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackResourceDriftsSignalErrorFull() instead")
    void pOSTDescribeStackResourceDriftsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackResourceDriftsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackResourcesSignalErrorFull() instead")
    void pOSTDescribeStackResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackSetSignalErrorFull() instead")
    void pOSTDescribeStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStackSetOperationSignalErrorFull() instead")
    void pOSTDescribeStackSetOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStackSetOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeStacksSignalErrorFull() instead")
    void pOSTDescribeStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTypeSignalErrorFull() instead")
    void pOSTDescribeTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeTypeRegistrationSignalErrorFull() instead")
    void pOSTDescribeTypeRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeTypeRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetectStackDriftSignalErrorFull() instead")
    void pOSTDetectStackDriftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetectStackDriftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetectStackResourceDriftSignalErrorFull() instead")
    void pOSTDetectStackResourceDriftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetectStackResourceDriftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDetectStackSetDriftSignalErrorFull() instead")
    void pOSTDetectStackSetDriftSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDetectStackSetDriftSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTEstimateTemplateCostSignalErrorFull() instead")
    void pOSTEstimateTemplateCostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTEstimateTemplateCostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTExecuteChangeSetSignalErrorFull() instead")
    void pOSTExecuteChangeSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTExecuteChangeSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetStackPolicySignalErrorFull() instead")
    void pOSTGetStackPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetStackPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetTemplateSignalErrorFull() instead")
    void pOSTGetTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetTemplateSummarySignalErrorFull() instead")
    void pOSTGetTemplateSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetTemplateSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTImportStacksToStackSetSignalErrorFull() instead")
    void pOSTImportStacksToStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTImportStacksToStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListChangeSetsSignalErrorFull() instead")
    void pOSTListChangeSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListChangeSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListExportsSignalErrorFull() instead")
    void pOSTListExportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListExportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListImportsSignalErrorFull() instead")
    void pOSTListImportsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListImportsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackInstanceResourceDriftsSignalErrorFull() instead")
    void pOSTListStackInstanceResourceDriftsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackInstanceResourceDriftsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackInstancesSignalErrorFull() instead")
    void pOSTListStackInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackResourcesSignalErrorFull() instead")
    void pOSTListStackResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackResourcesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackSetOperationResultsSignalErrorFull() instead")
    void pOSTListStackSetOperationResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackSetOperationResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackSetOperationsSignalErrorFull() instead")
    void pOSTListStackSetOperationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackSetOperationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStackSetsSignalErrorFull() instead")
    void pOSTListStackSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStackSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListStacksSignalErrorFull() instead")
    void pOSTListStacksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListStacksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTypeRegistrationsSignalErrorFull() instead")
    void pOSTListTypeRegistrationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTypeRegistrationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTypeVersionsSignalErrorFull() instead")
    void pOSTListTypeVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTypeVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTypesSignalErrorFull() instead")
    void pOSTListTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPublishTypeSignalErrorFull() instead")
    void pOSTPublishTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPublishTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRecordHandlerProgressSignalErrorFull() instead")
    void pOSTRecordHandlerProgressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRecordHandlerProgressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRegisterPublisherSignalErrorFull() instead")
    void pOSTRegisterPublisherSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRegisterPublisherSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRegisterTypeSignalErrorFull() instead")
    void pOSTRegisterTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRegisterTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTRollbackStackSignalErrorFull() instead")
    void pOSTRollbackStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTRollbackStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetStackPolicySignalErrorFull() instead")
    void pOSTSetStackPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetStackPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetTypeConfigurationSignalErrorFull() instead")
    void pOSTSetTypeConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetTypeConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetTypeDefaultVersionSignalErrorFull() instead")
    void pOSTSetTypeDefaultVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetTypeDefaultVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSignalResourceSignalErrorFull() instead")
    void pOSTSignalResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSignalResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTStopStackSetOperationSignalErrorFull() instead")
    void pOSTStopStackSetOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTStopStackSetOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTestTypeSignalErrorFull() instead")
    void pOSTTestTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTestTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStackSignalErrorFull() instead")
    void pOSTUpdateStackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStackInstancesSignalErrorFull() instead")
    void pOSTUpdateStackInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStackInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateStackSetSignalErrorFull() instead")
    void pOSTUpdateStackSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateStackSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateTerminationProtectionSignalErrorFull() instead")
    void pOSTUpdateTerminationProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateTerminationProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTValidateTemplateSignalErrorFull() instead")
    void pOSTValidateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTValidateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
