/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidateTemplateOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidateTemplateOutput::OAIValidateTemplateOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidateTemplateOutput::OAIValidateTemplateOutput() {
    this->initializeModel();
}

OAIValidateTemplateOutput::~OAIValidateTemplateOutput() {}

void OAIValidateTemplateOutput::initializeModel() {

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_capabilities_reason_isSet = false;
    m_capabilities_reason_isValid = false;

    m_declared_transforms_isSet = false;
    m_declared_transforms_isValid = false;
}

void OAIValidateTemplateOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidateTemplateOutput::fromJsonObject(QJsonObject json) {

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_capabilities_reason_isValid = ::OpenAPI::fromJsonValue(m_capabilities_reason, json[QString("CapabilitiesReason")]);
    m_capabilities_reason_isSet = !json[QString("CapabilitiesReason")].isNull() && m_capabilities_reason_isValid;

    m_declared_transforms_isValid = ::OpenAPI::fromJsonValue(m_declared_transforms, json[QString("DeclaredTransforms")]);
    m_declared_transforms_isSet = !json[QString("DeclaredTransforms")].isNull() && m_declared_transforms_isValid;
}

QString OAIValidateTemplateOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidateTemplateOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_capabilities_reason_isSet) {
        obj.insert(QString("CapabilitiesReason"), ::OpenAPI::toJsonValue(m_capabilities_reason));
    }
    if (m_declared_transforms.isSet()) {
        obj.insert(QString("DeclaredTransforms"), ::OpenAPI::toJsonValue(m_declared_transforms));
    }
    return obj;
}

QList OAIValidateTemplateOutput::getParameters() const {
    return m_parameters;
}
void OAIValidateTemplateOutput::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIValidateTemplateOutput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIValidateTemplateOutput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIValidateTemplateOutput::getDescription() const {
    return m_description;
}
void OAIValidateTemplateOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIValidateTemplateOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIValidateTemplateOutput::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIValidateTemplateOutput::getCapabilities() const {
    return m_capabilities;
}
void OAIValidateTemplateOutput::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIValidateTemplateOutput::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIValidateTemplateOutput::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAIValidateTemplateOutput::getCapabilitiesReason() const {
    return m_capabilities_reason;
}
void OAIValidateTemplateOutput::setCapabilitiesReason(const QString &capabilities_reason) {
    m_capabilities_reason = capabilities_reason;
    m_capabilities_reason_isSet = true;
}

bool OAIValidateTemplateOutput::is_capabilities_reason_Set() const{
    return m_capabilities_reason_isSet;
}

bool OAIValidateTemplateOutput::is_capabilities_reason_Valid() const{
    return m_capabilities_reason_isValid;
}

QList OAIValidateTemplateOutput::getDeclaredTransforms() const {
    return m_declared_transforms;
}
void OAIValidateTemplateOutput::setDeclaredTransforms(const QList &declared_transforms) {
    m_declared_transforms = declared_transforms;
    m_declared_transforms_isSet = true;
}

bool OAIValidateTemplateOutput::is_declared_transforms_Set() const{
    return m_declared_transforms_isSet;
}

bool OAIValidateTemplateOutput::is_declared_transforms_Valid() const{
    return m_declared_transforms_isValid;
}

bool OAIValidateTemplateOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_transforms.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidateTemplateOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
