/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTemplateSummaryOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTemplateSummaryOutput::OAIGetTemplateSummaryOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTemplateSummaryOutput::OAIGetTemplateSummaryOutput() {
    this->initializeModel();
}

OAIGetTemplateSummaryOutput::~OAIGetTemplateSummaryOutput() {}

void OAIGetTemplateSummaryOutput::initializeModel() {

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_capabilities_reason_isSet = false;
    m_capabilities_reason_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_declared_transforms_isSet = false;
    m_declared_transforms_isValid = false;

    m_resource_identifier_summaries_isSet = false;
    m_resource_identifier_summaries_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIGetTemplateSummaryOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTemplateSummaryOutput::fromJsonObject(QJsonObject json) {

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_capabilities_reason_isValid = ::OpenAPI::fromJsonValue(m_capabilities_reason, json[QString("CapabilitiesReason")]);
    m_capabilities_reason_isSet = !json[QString("CapabilitiesReason")].isNull() && m_capabilities_reason_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_declared_transforms_isValid = ::OpenAPI::fromJsonValue(m_declared_transforms, json[QString("DeclaredTransforms")]);
    m_declared_transforms_isSet = !json[QString("DeclaredTransforms")].isNull() && m_declared_transforms_isValid;

    m_resource_identifier_summaries_isValid = ::OpenAPI::fromJsonValue(m_resource_identifier_summaries, json[QString("ResourceIdentifierSummaries")]);
    m_resource_identifier_summaries_isSet = !json[QString("ResourceIdentifierSummaries")].isNull() && m_resource_identifier_summaries_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;
}

QString OAIGetTemplateSummaryOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTemplateSummaryOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_capabilities_reason_isSet) {
        obj.insert(QString("CapabilitiesReason"), ::OpenAPI::toJsonValue(m_capabilities_reason));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_declared_transforms.isSet()) {
        obj.insert(QString("DeclaredTransforms"), ::OpenAPI::toJsonValue(m_declared_transforms));
    }
    if (m_resource_identifier_summaries.isSet()) {
        obj.insert(QString("ResourceIdentifierSummaries"), ::OpenAPI::toJsonValue(m_resource_identifier_summaries));
    }
    if (m_warnings.isSet()) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QList OAIGetTemplateSummaryOutput::getParameters() const {
    return m_parameters;
}
void OAIGetTemplateSummaryOutput::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGetTemplateSummaryOutput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIGetTemplateSummaryOutput::getDescription() const {
    return m_description;
}
void OAIGetTemplateSummaryOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetTemplateSummaryOutput::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIGetTemplateSummaryOutput::getCapabilities() const {
    return m_capabilities;
}
void OAIGetTemplateSummaryOutput::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIGetTemplateSummaryOutput::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAIGetTemplateSummaryOutput::getCapabilitiesReason() const {
    return m_capabilities_reason;
}
void OAIGetTemplateSummaryOutput::setCapabilitiesReason(const QString &capabilities_reason) {
    m_capabilities_reason = capabilities_reason;
    m_capabilities_reason_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_capabilities_reason_Set() const{
    return m_capabilities_reason_isSet;
}

bool OAIGetTemplateSummaryOutput::is_capabilities_reason_Valid() const{
    return m_capabilities_reason_isValid;
}

QList OAIGetTemplateSummaryOutput::getResourceTypes() const {
    return m_resource_types;
}
void OAIGetTemplateSummaryOutput::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIGetTemplateSummaryOutput::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QString OAIGetTemplateSummaryOutput::getVersion() const {
    return m_version;
}
void OAIGetTemplateSummaryOutput::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetTemplateSummaryOutput::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIGetTemplateSummaryOutput::getMetadata() const {
    return m_metadata;
}
void OAIGetTemplateSummaryOutput::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGetTemplateSummaryOutput::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList OAIGetTemplateSummaryOutput::getDeclaredTransforms() const {
    return m_declared_transforms;
}
void OAIGetTemplateSummaryOutput::setDeclaredTransforms(const QList &declared_transforms) {
    m_declared_transforms = declared_transforms;
    m_declared_transforms_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_declared_transforms_Set() const{
    return m_declared_transforms_isSet;
}

bool OAIGetTemplateSummaryOutput::is_declared_transforms_Valid() const{
    return m_declared_transforms_isValid;
}

QList OAIGetTemplateSummaryOutput::getResourceIdentifierSummaries() const {
    return m_resource_identifier_summaries;
}
void OAIGetTemplateSummaryOutput::setResourceIdentifierSummaries(const QList &resource_identifier_summaries) {
    m_resource_identifier_summaries = resource_identifier_summaries;
    m_resource_identifier_summaries_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_resource_identifier_summaries_Set() const{
    return m_resource_identifier_summaries_isSet;
}

bool OAIGetTemplateSummaryOutput::is_resource_identifier_summaries_Valid() const{
    return m_resource_identifier_summaries_isValid;
}

OAIGetTemplateSummaryOutput_Warnings OAIGetTemplateSummaryOutput::getWarnings() const {
    return m_warnings;
}
void OAIGetTemplateSummaryOutput::setWarnings(const OAIGetTemplateSummaryOutput_Warnings &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIGetTemplateSummaryOutput::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIGetTemplateSummaryOutput::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIGetTemplateSummaryOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_transforms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_identifier_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTemplateSummaryOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
