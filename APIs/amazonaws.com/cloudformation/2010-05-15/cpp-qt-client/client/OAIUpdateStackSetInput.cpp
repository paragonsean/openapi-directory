/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateStackSetInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateStackSetInput::OAIUpdateStackSetInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateStackSetInput::OAIUpdateStackSetInput() {
    this->initializeModel();
}

OAIUpdateStackSetInput::~OAIUpdateStackSetInput() {}

void OAIUpdateStackSetInput::initializeModel() {

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_template_body_isSet = false;
    m_template_body_isValid = false;

    m_template_url_isSet = false;
    m_template_url_isValid = false;

    m_use_previous_template_isSet = false;
    m_use_previous_template_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_operation_preferences_isSet = false;
    m_operation_preferences_isValid = false;

    m_administration_role_arn_isSet = false;
    m_administration_role_arn_isValid = false;

    m_execution_role_name_isSet = false;
    m_execution_role_name_isValid = false;

    m_deployment_targets_isSet = false;
    m_deployment_targets_isValid = false;

    m_permission_model_isSet = false;
    m_permission_model_isValid = false;

    m_auto_deployment_isSet = false;
    m_auto_deployment_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_call_as_isSet = false;
    m_call_as_isValid = false;

    m_managed_execution_isSet = false;
    m_managed_execution_isValid = false;
}

void OAIUpdateStackSetInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateStackSetInput::fromJsonObject(QJsonObject json) {

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("StackSetName")]);
    m_stack_set_name_isSet = !json[QString("StackSetName")].isNull() && m_stack_set_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_template_body_isValid = ::OpenAPI::fromJsonValue(m_template_body, json[QString("TemplateBody")]);
    m_template_body_isSet = !json[QString("TemplateBody")].isNull() && m_template_body_isValid;

    m_template_url_isValid = ::OpenAPI::fromJsonValue(m_template_url, json[QString("TemplateURL")]);
    m_template_url_isSet = !json[QString("TemplateURL")].isNull() && m_template_url_isValid;

    m_use_previous_template_isValid = ::OpenAPI::fromJsonValue(m_use_previous_template, json[QString("UsePreviousTemplate")]);
    m_use_previous_template_isSet = !json[QString("UsePreviousTemplate")].isNull() && m_use_previous_template_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_operation_preferences_isValid = ::OpenAPI::fromJsonValue(m_operation_preferences, json[QString("OperationPreferences")]);
    m_operation_preferences_isSet = !json[QString("OperationPreferences")].isNull() && m_operation_preferences_isValid;

    m_administration_role_arn_isValid = ::OpenAPI::fromJsonValue(m_administration_role_arn, json[QString("AdministrationRoleARN")]);
    m_administration_role_arn_isSet = !json[QString("AdministrationRoleARN")].isNull() && m_administration_role_arn_isValid;

    m_execution_role_name_isValid = ::OpenAPI::fromJsonValue(m_execution_role_name, json[QString("ExecutionRoleName")]);
    m_execution_role_name_isSet = !json[QString("ExecutionRoleName")].isNull() && m_execution_role_name_isValid;

    m_deployment_targets_isValid = ::OpenAPI::fromJsonValue(m_deployment_targets, json[QString("DeploymentTargets")]);
    m_deployment_targets_isSet = !json[QString("DeploymentTargets")].isNull() && m_deployment_targets_isValid;

    m_permission_model_isValid = ::OpenAPI::fromJsonValue(m_permission_model, json[QString("PermissionModel")]);
    m_permission_model_isSet = !json[QString("PermissionModel")].isNull() && m_permission_model_isValid;

    m_auto_deployment_isValid = ::OpenAPI::fromJsonValue(m_auto_deployment, json[QString("AutoDeployment")]);
    m_auto_deployment_isSet = !json[QString("AutoDeployment")].isNull() && m_auto_deployment_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("Accounts")]);
    m_accounts_isSet = !json[QString("Accounts")].isNull() && m_accounts_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("Regions")]);
    m_regions_isSet = !json[QString("Regions")].isNull() && m_regions_isValid;

    m_call_as_isValid = ::OpenAPI::fromJsonValue(m_call_as, json[QString("CallAs")]);
    m_call_as_isSet = !json[QString("CallAs")].isNull() && m_call_as_isValid;

    m_managed_execution_isValid = ::OpenAPI::fromJsonValue(m_managed_execution, json[QString("ManagedExecution")]);
    m_managed_execution_isSet = !json[QString("ManagedExecution")].isNull() && m_managed_execution_isValid;
}

QString OAIUpdateStackSetInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateStackSetInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_name_isSet) {
        obj.insert(QString("StackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_template_body_isSet) {
        obj.insert(QString("TemplateBody"), ::OpenAPI::toJsonValue(m_template_body));
    }
    if (m_template_url_isSet) {
        obj.insert(QString("TemplateURL"), ::OpenAPI::toJsonValue(m_template_url));
    }
    if (m_use_previous_template_isSet) {
        obj.insert(QString("UsePreviousTemplate"), ::OpenAPI::toJsonValue(m_use_previous_template));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_operation_preferences.isSet()) {
        obj.insert(QString("OperationPreferences"), ::OpenAPI::toJsonValue(m_operation_preferences));
    }
    if (m_administration_role_arn_isSet) {
        obj.insert(QString("AdministrationRoleARN"), ::OpenAPI::toJsonValue(m_administration_role_arn));
    }
    if (m_execution_role_name_isSet) {
        obj.insert(QString("ExecutionRoleName"), ::OpenAPI::toJsonValue(m_execution_role_name));
    }
    if (m_deployment_targets.isSet()) {
        obj.insert(QString("DeploymentTargets"), ::OpenAPI::toJsonValue(m_deployment_targets));
    }
    if (m_permission_model.isSet()) {
        obj.insert(QString("PermissionModel"), ::OpenAPI::toJsonValue(m_permission_model));
    }
    if (m_auto_deployment.isSet()) {
        obj.insert(QString("AutoDeployment"), ::OpenAPI::toJsonValue(m_auto_deployment));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_accounts.isSet()) {
        obj.insert(QString("Accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("Regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_call_as.isSet()) {
        obj.insert(QString("CallAs"), ::OpenAPI::toJsonValue(m_call_as));
    }
    if (m_managed_execution.isSet()) {
        obj.insert(QString("ManagedExecution"), ::OpenAPI::toJsonValue(m_managed_execution));
    }
    return obj;
}

QString OAIUpdateStackSetInput::getStackSetName() const {
    return m_stack_set_name;
}
void OAIUpdateStackSetInput::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIUpdateStackSetInput::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIUpdateStackSetInput::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

QString OAIUpdateStackSetInput::getDescription() const {
    return m_description;
}
void OAIUpdateStackSetInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateStackSetInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateStackSetInput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateStackSetInput::getTemplateBody() const {
    return m_template_body;
}
void OAIUpdateStackSetInput::setTemplateBody(const QString &template_body) {
    m_template_body = template_body;
    m_template_body_isSet = true;
}

bool OAIUpdateStackSetInput::is_template_body_Set() const{
    return m_template_body_isSet;
}

bool OAIUpdateStackSetInput::is_template_body_Valid() const{
    return m_template_body_isValid;
}

QString OAIUpdateStackSetInput::getTemplateUrl() const {
    return m_template_url;
}
void OAIUpdateStackSetInput::setTemplateUrl(const QString &template_url) {
    m_template_url = template_url;
    m_template_url_isSet = true;
}

bool OAIUpdateStackSetInput::is_template_url_Set() const{
    return m_template_url_isSet;
}

bool OAIUpdateStackSetInput::is_template_url_Valid() const{
    return m_template_url_isValid;
}

bool OAIUpdateStackSetInput::getUsePreviousTemplate() const {
    return m_use_previous_template;
}
void OAIUpdateStackSetInput::setUsePreviousTemplate(const bool &use_previous_template) {
    m_use_previous_template = use_previous_template;
    m_use_previous_template_isSet = true;
}

bool OAIUpdateStackSetInput::is_use_previous_template_Set() const{
    return m_use_previous_template_isSet;
}

bool OAIUpdateStackSetInput::is_use_previous_template_Valid() const{
    return m_use_previous_template_isValid;
}

QList OAIUpdateStackSetInput::getParameters() const {
    return m_parameters;
}
void OAIUpdateStackSetInput::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIUpdateStackSetInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIUpdateStackSetInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList OAIUpdateStackSetInput::getCapabilities() const {
    return m_capabilities;
}
void OAIUpdateStackSetInput::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIUpdateStackSetInput::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIUpdateStackSetInput::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList OAIUpdateStackSetInput::getTags() const {
    return m_tags;
}
void OAIUpdateStackSetInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateStackSetInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateStackSetInput::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateStackInstancesInput_OperationPreferences OAIUpdateStackSetInput::getOperationPreferences() const {
    return m_operation_preferences;
}
void OAIUpdateStackSetInput::setOperationPreferences(const OAICreateStackInstancesInput_OperationPreferences &operation_preferences) {
    m_operation_preferences = operation_preferences;
    m_operation_preferences_isSet = true;
}

bool OAIUpdateStackSetInput::is_operation_preferences_Set() const{
    return m_operation_preferences_isSet;
}

bool OAIUpdateStackSetInput::is_operation_preferences_Valid() const{
    return m_operation_preferences_isValid;
}

QString OAIUpdateStackSetInput::getAdministrationRoleArn() const {
    return m_administration_role_arn;
}
void OAIUpdateStackSetInput::setAdministrationRoleArn(const QString &administration_role_arn) {
    m_administration_role_arn = administration_role_arn;
    m_administration_role_arn_isSet = true;
}

bool OAIUpdateStackSetInput::is_administration_role_arn_Set() const{
    return m_administration_role_arn_isSet;
}

bool OAIUpdateStackSetInput::is_administration_role_arn_Valid() const{
    return m_administration_role_arn_isValid;
}

QString OAIUpdateStackSetInput::getExecutionRoleName() const {
    return m_execution_role_name;
}
void OAIUpdateStackSetInput::setExecutionRoleName(const QString &execution_role_name) {
    m_execution_role_name = execution_role_name;
    m_execution_role_name_isSet = true;
}

bool OAIUpdateStackSetInput::is_execution_role_name_Set() const{
    return m_execution_role_name_isSet;
}

bool OAIUpdateStackSetInput::is_execution_role_name_Valid() const{
    return m_execution_role_name_isValid;
}

OAIUpdateStackSetInput_DeploymentTargets OAIUpdateStackSetInput::getDeploymentTargets() const {
    return m_deployment_targets;
}
void OAIUpdateStackSetInput::setDeploymentTargets(const OAIUpdateStackSetInput_DeploymentTargets &deployment_targets) {
    m_deployment_targets = deployment_targets;
    m_deployment_targets_isSet = true;
}

bool OAIUpdateStackSetInput::is_deployment_targets_Set() const{
    return m_deployment_targets_isSet;
}

bool OAIUpdateStackSetInput::is_deployment_targets_Valid() const{
    return m_deployment_targets_isValid;
}

OAIPermissionModels OAIUpdateStackSetInput::getPermissionModel() const {
    return m_permission_model;
}
void OAIUpdateStackSetInput::setPermissionModel(const OAIPermissionModels &permission_model) {
    m_permission_model = permission_model;
    m_permission_model_isSet = true;
}

bool OAIUpdateStackSetInput::is_permission_model_Set() const{
    return m_permission_model_isSet;
}

bool OAIUpdateStackSetInput::is_permission_model_Valid() const{
    return m_permission_model_isValid;
}

OAIUpdateStackSetInput_AutoDeployment OAIUpdateStackSetInput::getAutoDeployment() const {
    return m_auto_deployment;
}
void OAIUpdateStackSetInput::setAutoDeployment(const OAIUpdateStackSetInput_AutoDeployment &auto_deployment) {
    m_auto_deployment = auto_deployment;
    m_auto_deployment_isSet = true;
}

bool OAIUpdateStackSetInput::is_auto_deployment_Set() const{
    return m_auto_deployment_isSet;
}

bool OAIUpdateStackSetInput::is_auto_deployment_Valid() const{
    return m_auto_deployment_isValid;
}

QString OAIUpdateStackSetInput::getOperationId() const {
    return m_operation_id;
}
void OAIUpdateStackSetInput::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIUpdateStackSetInput::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIUpdateStackSetInput::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QList OAIUpdateStackSetInput::getAccounts() const {
    return m_accounts;
}
void OAIUpdateStackSetInput::setAccounts(const QList &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIUpdateStackSetInput::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIUpdateStackSetInput::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QList OAIUpdateStackSetInput::getRegions() const {
    return m_regions;
}
void OAIUpdateStackSetInput::setRegions(const QList &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIUpdateStackSetInput::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIUpdateStackSetInput::is_regions_Valid() const{
    return m_regions_isValid;
}

OAICallAs OAIUpdateStackSetInput::getCallAs() const {
    return m_call_as;
}
void OAIUpdateStackSetInput::setCallAs(const OAICallAs &call_as) {
    m_call_as = call_as;
    m_call_as_isSet = true;
}

bool OAIUpdateStackSetInput::is_call_as_Set() const{
    return m_call_as_isSet;
}

bool OAIUpdateStackSetInput::is_call_as_Valid() const{
    return m_call_as_isValid;
}

OAICreateStackSetInput_ManagedExecution OAIUpdateStackSetInput::getManagedExecution() const {
    return m_managed_execution;
}
void OAIUpdateStackSetInput::setManagedExecution(const OAICreateStackSetInput_ManagedExecution &managed_execution) {
    m_managed_execution = managed_execution;
    m_managed_execution_isSet = true;
}

bool OAIUpdateStackSetInput::is_managed_execution_Set() const{
    return m_managed_execution_isSet;
}

bool OAIUpdateStackSetInput::is_managed_execution_Valid() const{
    return m_managed_execution_isValid;
}

bool OAIUpdateStackSetInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_previous_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_preferences.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_administration_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_as.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateStackSetInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_set_name_isValid && true;
}

} // namespace OpenAPI
