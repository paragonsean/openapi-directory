/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateStackInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateStackInput::OAIUpdateStackInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateStackInput::OAIUpdateStackInput() {
    this->initializeModel();
}

OAIUpdateStackInput::~OAIUpdateStackInput() {}

void OAIUpdateStackInput::initializeModel() {

    m_stack_name_isSet = false;
    m_stack_name_isValid = false;

    m_template_body_isSet = false;
    m_template_body_isValid = false;

    m_template_url_isSet = false;
    m_template_url_isValid = false;

    m_use_previous_template_isSet = false;
    m_use_previous_template_isValid = false;

    m_stack_policy_during_update_body_isSet = false;
    m_stack_policy_during_update_body_isValid = false;

    m_stack_policy_during_update_url_isSet = false;
    m_stack_policy_during_update_url_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_resource_types_isSet = false;
    m_resource_types_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_rollback_configuration_isSet = false;
    m_rollback_configuration_isValid = false;

    m_stack_policy_body_isSet = false;
    m_stack_policy_body_isValid = false;

    m_stack_policy_url_isSet = false;
    m_stack_policy_url_isValid = false;

    m_notification_arns_isSet = false;
    m_notification_arns_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_disable_rollback_isSet = false;
    m_disable_rollback_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_retain_except_on_create_isSet = false;
    m_retain_except_on_create_isValid = false;
}

void OAIUpdateStackInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateStackInput::fromJsonObject(QJsonObject json) {

    m_stack_name_isValid = ::OpenAPI::fromJsonValue(m_stack_name, json[QString("StackName")]);
    m_stack_name_isSet = !json[QString("StackName")].isNull() && m_stack_name_isValid;

    m_template_body_isValid = ::OpenAPI::fromJsonValue(m_template_body, json[QString("TemplateBody")]);
    m_template_body_isSet = !json[QString("TemplateBody")].isNull() && m_template_body_isValid;

    m_template_url_isValid = ::OpenAPI::fromJsonValue(m_template_url, json[QString("TemplateURL")]);
    m_template_url_isSet = !json[QString("TemplateURL")].isNull() && m_template_url_isValid;

    m_use_previous_template_isValid = ::OpenAPI::fromJsonValue(m_use_previous_template, json[QString("UsePreviousTemplate")]);
    m_use_previous_template_isSet = !json[QString("UsePreviousTemplate")].isNull() && m_use_previous_template_isValid;

    m_stack_policy_during_update_body_isValid = ::OpenAPI::fromJsonValue(m_stack_policy_during_update_body, json[QString("StackPolicyDuringUpdateBody")]);
    m_stack_policy_during_update_body_isSet = !json[QString("StackPolicyDuringUpdateBody")].isNull() && m_stack_policy_during_update_body_isValid;

    m_stack_policy_during_update_url_isValid = ::OpenAPI::fromJsonValue(m_stack_policy_during_update_url, json[QString("StackPolicyDuringUpdateURL")]);
    m_stack_policy_during_update_url_isSet = !json[QString("StackPolicyDuringUpdateURL")].isNull() && m_stack_policy_during_update_url_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("Parameters")]);
    m_parameters_isSet = !json[QString("Parameters")].isNull() && m_parameters_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_resource_types_isValid = ::OpenAPI::fromJsonValue(m_resource_types, json[QString("ResourceTypes")]);
    m_resource_types_isSet = !json[QString("ResourceTypes")].isNull() && m_resource_types_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_rollback_configuration_isValid = ::OpenAPI::fromJsonValue(m_rollback_configuration, json[QString("RollbackConfiguration")]);
    m_rollback_configuration_isSet = !json[QString("RollbackConfiguration")].isNull() && m_rollback_configuration_isValid;

    m_stack_policy_body_isValid = ::OpenAPI::fromJsonValue(m_stack_policy_body, json[QString("StackPolicyBody")]);
    m_stack_policy_body_isSet = !json[QString("StackPolicyBody")].isNull() && m_stack_policy_body_isValid;

    m_stack_policy_url_isValid = ::OpenAPI::fromJsonValue(m_stack_policy_url, json[QString("StackPolicyURL")]);
    m_stack_policy_url_isSet = !json[QString("StackPolicyURL")].isNull() && m_stack_policy_url_isValid;

    m_notification_arns_isValid = ::OpenAPI::fromJsonValue(m_notification_arns, json[QString("NotificationARNs")]);
    m_notification_arns_isSet = !json[QString("NotificationARNs")].isNull() && m_notification_arns_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_disable_rollback_isValid = ::OpenAPI::fromJsonValue(m_disable_rollback, json[QString("DisableRollback")]);
    m_disable_rollback_isSet = !json[QString("DisableRollback")].isNull() && m_disable_rollback_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_retain_except_on_create_isValid = ::OpenAPI::fromJsonValue(m_retain_except_on_create, json[QString("RetainExceptOnCreate")]);
    m_retain_except_on_create_isSet = !json[QString("RetainExceptOnCreate")].isNull() && m_retain_except_on_create_isValid;
}

QString OAIUpdateStackInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateStackInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_name_isSet) {
        obj.insert(QString("StackName"), ::OpenAPI::toJsonValue(m_stack_name));
    }
    if (m_template_body_isSet) {
        obj.insert(QString("TemplateBody"), ::OpenAPI::toJsonValue(m_template_body));
    }
    if (m_template_url_isSet) {
        obj.insert(QString("TemplateURL"), ::OpenAPI::toJsonValue(m_template_url));
    }
    if (m_use_previous_template_isSet) {
        obj.insert(QString("UsePreviousTemplate"), ::OpenAPI::toJsonValue(m_use_previous_template));
    }
    if (m_stack_policy_during_update_body_isSet) {
        obj.insert(QString("StackPolicyDuringUpdateBody"), ::OpenAPI::toJsonValue(m_stack_policy_during_update_body));
    }
    if (m_stack_policy_during_update_url_isSet) {
        obj.insert(QString("StackPolicyDuringUpdateURL"), ::OpenAPI::toJsonValue(m_stack_policy_during_update_url));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("Parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_resource_types.isSet()) {
        obj.insert(QString("ResourceTypes"), ::OpenAPI::toJsonValue(m_resource_types));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_rollback_configuration.isSet()) {
        obj.insert(QString("RollbackConfiguration"), ::OpenAPI::toJsonValue(m_rollback_configuration));
    }
    if (m_stack_policy_body_isSet) {
        obj.insert(QString("StackPolicyBody"), ::OpenAPI::toJsonValue(m_stack_policy_body));
    }
    if (m_stack_policy_url_isSet) {
        obj.insert(QString("StackPolicyURL"), ::OpenAPI::toJsonValue(m_stack_policy_url));
    }
    if (m_notification_arns.isSet()) {
        obj.insert(QString("NotificationARNs"), ::OpenAPI::toJsonValue(m_notification_arns));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_disable_rollback_isSet) {
        obj.insert(QString("DisableRollback"), ::OpenAPI::toJsonValue(m_disable_rollback));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_retain_except_on_create_isSet) {
        obj.insert(QString("RetainExceptOnCreate"), ::OpenAPI::toJsonValue(m_retain_except_on_create));
    }
    return obj;
}

QString OAIUpdateStackInput::getStackName() const {
    return m_stack_name;
}
void OAIUpdateStackInput::setStackName(const QString &stack_name) {
    m_stack_name = stack_name;
    m_stack_name_isSet = true;
}

bool OAIUpdateStackInput::is_stack_name_Set() const{
    return m_stack_name_isSet;
}

bool OAIUpdateStackInput::is_stack_name_Valid() const{
    return m_stack_name_isValid;
}

QString OAIUpdateStackInput::getTemplateBody() const {
    return m_template_body;
}
void OAIUpdateStackInput::setTemplateBody(const QString &template_body) {
    m_template_body = template_body;
    m_template_body_isSet = true;
}

bool OAIUpdateStackInput::is_template_body_Set() const{
    return m_template_body_isSet;
}

bool OAIUpdateStackInput::is_template_body_Valid() const{
    return m_template_body_isValid;
}

QString OAIUpdateStackInput::getTemplateUrl() const {
    return m_template_url;
}
void OAIUpdateStackInput::setTemplateUrl(const QString &template_url) {
    m_template_url = template_url;
    m_template_url_isSet = true;
}

bool OAIUpdateStackInput::is_template_url_Set() const{
    return m_template_url_isSet;
}

bool OAIUpdateStackInput::is_template_url_Valid() const{
    return m_template_url_isValid;
}

bool OAIUpdateStackInput::getUsePreviousTemplate() const {
    return m_use_previous_template;
}
void OAIUpdateStackInput::setUsePreviousTemplate(const bool &use_previous_template) {
    m_use_previous_template = use_previous_template;
    m_use_previous_template_isSet = true;
}

bool OAIUpdateStackInput::is_use_previous_template_Set() const{
    return m_use_previous_template_isSet;
}

bool OAIUpdateStackInput::is_use_previous_template_Valid() const{
    return m_use_previous_template_isValid;
}

QString OAIUpdateStackInput::getStackPolicyDuringUpdateBody() const {
    return m_stack_policy_during_update_body;
}
void OAIUpdateStackInput::setStackPolicyDuringUpdateBody(const QString &stack_policy_during_update_body) {
    m_stack_policy_during_update_body = stack_policy_during_update_body;
    m_stack_policy_during_update_body_isSet = true;
}

bool OAIUpdateStackInput::is_stack_policy_during_update_body_Set() const{
    return m_stack_policy_during_update_body_isSet;
}

bool OAIUpdateStackInput::is_stack_policy_during_update_body_Valid() const{
    return m_stack_policy_during_update_body_isValid;
}

QString OAIUpdateStackInput::getStackPolicyDuringUpdateUrl() const {
    return m_stack_policy_during_update_url;
}
void OAIUpdateStackInput::setStackPolicyDuringUpdateUrl(const QString &stack_policy_during_update_url) {
    m_stack_policy_during_update_url = stack_policy_during_update_url;
    m_stack_policy_during_update_url_isSet = true;
}

bool OAIUpdateStackInput::is_stack_policy_during_update_url_Set() const{
    return m_stack_policy_during_update_url_isSet;
}

bool OAIUpdateStackInput::is_stack_policy_during_update_url_Valid() const{
    return m_stack_policy_during_update_url_isValid;
}

QList OAIUpdateStackInput::getParameters() const {
    return m_parameters;
}
void OAIUpdateStackInput::setParameters(const QList &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIUpdateStackInput::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIUpdateStackInput::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList OAIUpdateStackInput::getCapabilities() const {
    return m_capabilities;
}
void OAIUpdateStackInput::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIUpdateStackInput::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIUpdateStackInput::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList OAIUpdateStackInput::getResourceTypes() const {
    return m_resource_types;
}
void OAIUpdateStackInput::setResourceTypes(const QList &resource_types) {
    m_resource_types = resource_types;
    m_resource_types_isSet = true;
}

bool OAIUpdateStackInput::is_resource_types_Set() const{
    return m_resource_types_isSet;
}

bool OAIUpdateStackInput::is_resource_types_Valid() const{
    return m_resource_types_isValid;
}

QString OAIUpdateStackInput::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateStackInput::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateStackInput::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateStackInput::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIDescribeChangeSetOutput_RollbackConfiguration OAIUpdateStackInput::getRollbackConfiguration() const {
    return m_rollback_configuration;
}
void OAIUpdateStackInput::setRollbackConfiguration(const OAIDescribeChangeSetOutput_RollbackConfiguration &rollback_configuration) {
    m_rollback_configuration = rollback_configuration;
    m_rollback_configuration_isSet = true;
}

bool OAIUpdateStackInput::is_rollback_configuration_Set() const{
    return m_rollback_configuration_isSet;
}

bool OAIUpdateStackInput::is_rollback_configuration_Valid() const{
    return m_rollback_configuration_isValid;
}

QString OAIUpdateStackInput::getStackPolicyBody() const {
    return m_stack_policy_body;
}
void OAIUpdateStackInput::setStackPolicyBody(const QString &stack_policy_body) {
    m_stack_policy_body = stack_policy_body;
    m_stack_policy_body_isSet = true;
}

bool OAIUpdateStackInput::is_stack_policy_body_Set() const{
    return m_stack_policy_body_isSet;
}

bool OAIUpdateStackInput::is_stack_policy_body_Valid() const{
    return m_stack_policy_body_isValid;
}

QString OAIUpdateStackInput::getStackPolicyUrl() const {
    return m_stack_policy_url;
}
void OAIUpdateStackInput::setStackPolicyUrl(const QString &stack_policy_url) {
    m_stack_policy_url = stack_policy_url;
    m_stack_policy_url_isSet = true;
}

bool OAIUpdateStackInput::is_stack_policy_url_Set() const{
    return m_stack_policy_url_isSet;
}

bool OAIUpdateStackInput::is_stack_policy_url_Valid() const{
    return m_stack_policy_url_isValid;
}

QList OAIUpdateStackInput::getNotificationArns() const {
    return m_notification_arns;
}
void OAIUpdateStackInput::setNotificationArns(const QList &notification_arns) {
    m_notification_arns = notification_arns;
    m_notification_arns_isSet = true;
}

bool OAIUpdateStackInput::is_notification_arns_Set() const{
    return m_notification_arns_isSet;
}

bool OAIUpdateStackInput::is_notification_arns_Valid() const{
    return m_notification_arns_isValid;
}

QList OAIUpdateStackInput::getTags() const {
    return m_tags;
}
void OAIUpdateStackInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateStackInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateStackInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateStackInput::getDisableRollback() const {
    return m_disable_rollback;
}
void OAIUpdateStackInput::setDisableRollback(const bool &disable_rollback) {
    m_disable_rollback = disable_rollback;
    m_disable_rollback_isSet = true;
}

bool OAIUpdateStackInput::is_disable_rollback_Set() const{
    return m_disable_rollback_isSet;
}

bool OAIUpdateStackInput::is_disable_rollback_Valid() const{
    return m_disable_rollback_isValid;
}

QString OAIUpdateStackInput::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIUpdateStackInput::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIUpdateStackInput::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIUpdateStackInput::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAIUpdateStackInput::getRetainExceptOnCreate() const {
    return m_retain_except_on_create;
}
void OAIUpdateStackInput::setRetainExceptOnCreate(const bool &retain_except_on_create) {
    m_retain_except_on_create = retain_except_on_create;
    m_retain_except_on_create_isSet = true;
}

bool OAIUpdateStackInput::is_retain_except_on_create_Set() const{
    return m_retain_except_on_create_isSet;
}

bool OAIUpdateStackInput::is_retain_except_on_create_Valid() const{
    return m_retain_except_on_create_isValid;
}

bool OAIUpdateStackInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_previous_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_policy_during_update_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_policy_during_update_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollback_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_policy_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stack_policy_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_rollback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retain_except_on_create_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateStackInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_name_isValid && true;
}

} // namespace OpenAPI
