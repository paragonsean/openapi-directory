/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListStackSetOperationResultsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListStackSetOperationResultsInput::OAIListStackSetOperationResultsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListStackSetOperationResultsInput::OAIListStackSetOperationResultsInput() {
    this->initializeModel();
}

OAIListStackSetOperationResultsInput::~OAIListStackSetOperationResultsInput() {}

void OAIListStackSetOperationResultsInput::initializeModel() {

    m_stack_set_name_isSet = false;
    m_stack_set_name_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_call_as_isSet = false;
    m_call_as_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAIListStackSetOperationResultsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListStackSetOperationResultsInput::fromJsonObject(QJsonObject json) {

    m_stack_set_name_isValid = ::OpenAPI::fromJsonValue(m_stack_set_name, json[QString("StackSetName")]);
    m_stack_set_name_isSet = !json[QString("StackSetName")].isNull() && m_stack_set_name_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_call_as_isValid = ::OpenAPI::fromJsonValue(m_call_as, json[QString("CallAs")]);
    m_call_as_isSet = !json[QString("CallAs")].isNull() && m_call_as_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;
}

QString OAIListStackSetOperationResultsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListStackSetOperationResultsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stack_set_name_isSet) {
        obj.insert(QString("StackSetName"), ::OpenAPI::toJsonValue(m_stack_set_name));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_call_as.isSet()) {
        obj.insert(QString("CallAs"), ::OpenAPI::toJsonValue(m_call_as));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QString OAIListStackSetOperationResultsInput::getStackSetName() const {
    return m_stack_set_name;
}
void OAIListStackSetOperationResultsInput::setStackSetName(const QString &stack_set_name) {
    m_stack_set_name = stack_set_name;
    m_stack_set_name_isSet = true;
}

bool OAIListStackSetOperationResultsInput::is_stack_set_name_Set() const{
    return m_stack_set_name_isSet;
}

bool OAIListStackSetOperationResultsInput::is_stack_set_name_Valid() const{
    return m_stack_set_name_isValid;
}

QString OAIListStackSetOperationResultsInput::getOperationId() const {
    return m_operation_id;
}
void OAIListStackSetOperationResultsInput::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIListStackSetOperationResultsInput::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIListStackSetOperationResultsInput::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIListStackSetOperationResultsInput::getNextToken() const {
    return m_next_token;
}
void OAIListStackSetOperationResultsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListStackSetOperationResultsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListStackSetOperationResultsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListStackSetOperationResultsInput::getMaxResults() const {
    return m_max_results;
}
void OAIListStackSetOperationResultsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListStackSetOperationResultsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListStackSetOperationResultsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAICallAs OAIListStackSetOperationResultsInput::getCallAs() const {
    return m_call_as;
}
void OAIListStackSetOperationResultsInput::setCallAs(const OAICallAs &call_as) {
    m_call_as = call_as;
    m_call_as_isSet = true;
}

bool OAIListStackSetOperationResultsInput::is_call_as_Set() const{
    return m_call_as_isSet;
}

bool OAIListStackSetOperationResultsInput::is_call_as_Valid() const{
    return m_call_as_isValid;
}

QList OAIListStackSetOperationResultsInput::getFilters() const {
    return m_filters;
}
void OAIListStackSetOperationResultsInput::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIListStackSetOperationResultsInput::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIListStackSetOperationResultsInput::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAIListStackSetOperationResultsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stack_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_as.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListStackSetOperationResultsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stack_set_name_isValid && m_operation_id_isValid && true;
}

} // namespace OpenAPI
