/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTypeOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTypeOutput::OAIDescribeTypeOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTypeOutput::OAIDescribeTypeOutput() {
    this->initializeModel();
}

OAIDescribeTypeOutput::~OAIDescribeTypeOutput() {}

void OAIDescribeTypeOutput::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_default_version_id_isSet = false;
    m_default_version_id_isValid = false;

    m_is_default_version_isSet = false;
    m_is_default_version_isValid = false;

    m_type_tests_status_isSet = false;
    m_type_tests_status_isValid = false;

    m_type_tests_status_description_isSet = false;
    m_type_tests_status_description_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_provisioning_type_isSet = false;
    m_provisioning_type_isValid = false;

    m_deprecated_status_isSet = false;
    m_deprecated_status_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_required_activated_types_isSet = false;
    m_required_activated_types_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_documentation_url_isSet = false;
    m_documentation_url_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_configuration_schema_isSet = false;
    m_configuration_schema_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;

    m_original_type_name_isSet = false;
    m_original_type_name_isValid = false;

    m_original_type_arn_isSet = false;
    m_original_type_arn_isValid = false;

    m_public_version_number_isSet = false;
    m_public_version_number_isValid = false;

    m_latest_public_version_isSet = false;
    m_latest_public_version_isValid = false;

    m_is_activated_isSet = false;
    m_is_activated_isValid = false;

    m_auto_update_isSet = false;
    m_auto_update_isValid = false;
}

void OAIDescribeTypeOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTypeOutput::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;

    m_default_version_id_isValid = ::OpenAPI::fromJsonValue(m_default_version_id, json[QString("DefaultVersionId")]);
    m_default_version_id_isSet = !json[QString("DefaultVersionId")].isNull() && m_default_version_id_isValid;

    m_is_default_version_isValid = ::OpenAPI::fromJsonValue(m_is_default_version, json[QString("IsDefaultVersion")]);
    m_is_default_version_isSet = !json[QString("IsDefaultVersion")].isNull() && m_is_default_version_isValid;

    m_type_tests_status_isValid = ::OpenAPI::fromJsonValue(m_type_tests_status, json[QString("TypeTestsStatus")]);
    m_type_tests_status_isSet = !json[QString("TypeTestsStatus")].isNull() && m_type_tests_status_isValid;

    m_type_tests_status_description_isValid = ::OpenAPI::fromJsonValue(m_type_tests_status_description, json[QString("TypeTestsStatusDescription")]);
    m_type_tests_status_description_isSet = !json[QString("TypeTestsStatusDescription")].isNull() && m_type_tests_status_description_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_provisioning_type_isValid = ::OpenAPI::fromJsonValue(m_provisioning_type, json[QString("ProvisioningType")]);
    m_provisioning_type_isSet = !json[QString("ProvisioningType")].isNull() && m_provisioning_type_isValid;

    m_deprecated_status_isValid = ::OpenAPI::fromJsonValue(m_deprecated_status, json[QString("DeprecatedStatus")]);
    m_deprecated_status_isSet = !json[QString("DeprecatedStatus")].isNull() && m_deprecated_status_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("LoggingConfig")]);
    m_logging_config_isSet = !json[QString("LoggingConfig")].isNull() && m_logging_config_isValid;

    m_required_activated_types_isValid = ::OpenAPI::fromJsonValue(m_required_activated_types, json[QString("RequiredActivatedTypes")]);
    m_required_activated_types_isSet = !json[QString("RequiredActivatedTypes")].isNull() && m_required_activated_types_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("ExecutionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("ExecutionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("SourceUrl")]);
    m_source_url_isSet = !json[QString("SourceUrl")].isNull() && m_source_url_isValid;

    m_documentation_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_url, json[QString("DocumentationUrl")]);
    m_documentation_url_isSet = !json[QString("DocumentationUrl")].isNull() && m_documentation_url_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("TimeCreated")]);
    m_time_created_isSet = !json[QString("TimeCreated")].isNull() && m_time_created_isValid;

    m_configuration_schema_isValid = ::OpenAPI::fromJsonValue(m_configuration_schema, json[QString("ConfigurationSchema")]);
    m_configuration_schema_isSet = !json[QString("ConfigurationSchema")].isNull() && m_configuration_schema_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("PublisherId")]);
    m_publisher_id_isSet = !json[QString("PublisherId")].isNull() && m_publisher_id_isValid;

    m_original_type_name_isValid = ::OpenAPI::fromJsonValue(m_original_type_name, json[QString("OriginalTypeName")]);
    m_original_type_name_isSet = !json[QString("OriginalTypeName")].isNull() && m_original_type_name_isValid;

    m_original_type_arn_isValid = ::OpenAPI::fromJsonValue(m_original_type_arn, json[QString("OriginalTypeArn")]);
    m_original_type_arn_isSet = !json[QString("OriginalTypeArn")].isNull() && m_original_type_arn_isValid;

    m_public_version_number_isValid = ::OpenAPI::fromJsonValue(m_public_version_number, json[QString("PublicVersionNumber")]);
    m_public_version_number_isSet = !json[QString("PublicVersionNumber")].isNull() && m_public_version_number_isValid;

    m_latest_public_version_isValid = ::OpenAPI::fromJsonValue(m_latest_public_version, json[QString("LatestPublicVersion")]);
    m_latest_public_version_isSet = !json[QString("LatestPublicVersion")].isNull() && m_latest_public_version_isValid;

    m_is_activated_isValid = ::OpenAPI::fromJsonValue(m_is_activated, json[QString("IsActivated")]);
    m_is_activated_isSet = !json[QString("IsActivated")].isNull() && m_is_activated_isValid;

    m_auto_update_isValid = ::OpenAPI::fromJsonValue(m_auto_update, json[QString("AutoUpdate")]);
    m_auto_update_isSet = !json[QString("AutoUpdate")].isNull() && m_auto_update_isValid;
}

QString OAIDescribeTypeOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTypeOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_default_version_id_isSet) {
        obj.insert(QString("DefaultVersionId"), ::OpenAPI::toJsonValue(m_default_version_id));
    }
    if (m_is_default_version_isSet) {
        obj.insert(QString("IsDefaultVersion"), ::OpenAPI::toJsonValue(m_is_default_version));
    }
    if (m_type_tests_status.isSet()) {
        obj.insert(QString("TypeTestsStatus"), ::OpenAPI::toJsonValue(m_type_tests_status));
    }
    if (m_type_tests_status_description_isSet) {
        obj.insert(QString("TypeTestsStatusDescription"), ::OpenAPI::toJsonValue(m_type_tests_status_description));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_schema_isSet) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_provisioning_type.isSet()) {
        obj.insert(QString("ProvisioningType"), ::OpenAPI::toJsonValue(m_provisioning_type));
    }
    if (m_deprecated_status.isSet()) {
        obj.insert(QString("DeprecatedStatus"), ::OpenAPI::toJsonValue(m_deprecated_status));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("LoggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_required_activated_types.isSet()) {
        obj.insert(QString("RequiredActivatedTypes"), ::OpenAPI::toJsonValue(m_required_activated_types));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("ExecutionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("SourceUrl"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_documentation_url_isSet) {
        obj.insert(QString("DocumentationUrl"), ::OpenAPI::toJsonValue(m_documentation_url));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("TimeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_configuration_schema_isSet) {
        obj.insert(QString("ConfigurationSchema"), ::OpenAPI::toJsonValue(m_configuration_schema));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("PublisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    if (m_original_type_name_isSet) {
        obj.insert(QString("OriginalTypeName"), ::OpenAPI::toJsonValue(m_original_type_name));
    }
    if (m_original_type_arn_isSet) {
        obj.insert(QString("OriginalTypeArn"), ::OpenAPI::toJsonValue(m_original_type_arn));
    }
    if (m_public_version_number_isSet) {
        obj.insert(QString("PublicVersionNumber"), ::OpenAPI::toJsonValue(m_public_version_number));
    }
    if (m_latest_public_version_isSet) {
        obj.insert(QString("LatestPublicVersion"), ::OpenAPI::toJsonValue(m_latest_public_version));
    }
    if (m_is_activated_isSet) {
        obj.insert(QString("IsActivated"), ::OpenAPI::toJsonValue(m_is_activated));
    }
    if (m_auto_update_isSet) {
        obj.insert(QString("AutoUpdate"), ::OpenAPI::toJsonValue(m_auto_update));
    }
    return obj;
}

QString OAIDescribeTypeOutput::getArn() const {
    return m_arn;
}
void OAIDescribeTypeOutput::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeTypeOutput::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeTypeOutput::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIRegistryType OAIDescribeTypeOutput::getType() const {
    return m_type;
}
void OAIDescribeTypeOutput::setType(const OAIRegistryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeTypeOutput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeTypeOutput::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDescribeTypeOutput::getTypeName() const {
    return m_type_name;
}
void OAIDescribeTypeOutput::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIDescribeTypeOutput::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIDescribeTypeOutput::is_type_name_Valid() const{
    return m_type_name_isValid;
}

QString OAIDescribeTypeOutput::getDefaultVersionId() const {
    return m_default_version_id;
}
void OAIDescribeTypeOutput::setDefaultVersionId(const QString &default_version_id) {
    m_default_version_id = default_version_id;
    m_default_version_id_isSet = true;
}

bool OAIDescribeTypeOutput::is_default_version_id_Set() const{
    return m_default_version_id_isSet;
}

bool OAIDescribeTypeOutput::is_default_version_id_Valid() const{
    return m_default_version_id_isValid;
}

bool OAIDescribeTypeOutput::getIsDefaultVersion() const {
    return m_is_default_version;
}
void OAIDescribeTypeOutput::setIsDefaultVersion(const bool &is_default_version) {
    m_is_default_version = is_default_version;
    m_is_default_version_isSet = true;
}

bool OAIDescribeTypeOutput::is_is_default_version_Set() const{
    return m_is_default_version_isSet;
}

bool OAIDescribeTypeOutput::is_is_default_version_Valid() const{
    return m_is_default_version_isValid;
}

OAITypeTestsStatus OAIDescribeTypeOutput::getTypeTestsStatus() const {
    return m_type_tests_status;
}
void OAIDescribeTypeOutput::setTypeTestsStatus(const OAITypeTestsStatus &type_tests_status) {
    m_type_tests_status = type_tests_status;
    m_type_tests_status_isSet = true;
}

bool OAIDescribeTypeOutput::is_type_tests_status_Set() const{
    return m_type_tests_status_isSet;
}

bool OAIDescribeTypeOutput::is_type_tests_status_Valid() const{
    return m_type_tests_status_isValid;
}

QString OAIDescribeTypeOutput::getTypeTestsStatusDescription() const {
    return m_type_tests_status_description;
}
void OAIDescribeTypeOutput::setTypeTestsStatusDescription(const QString &type_tests_status_description) {
    m_type_tests_status_description = type_tests_status_description;
    m_type_tests_status_description_isSet = true;
}

bool OAIDescribeTypeOutput::is_type_tests_status_description_Set() const{
    return m_type_tests_status_description_isSet;
}

bool OAIDescribeTypeOutput::is_type_tests_status_description_Valid() const{
    return m_type_tests_status_description_isValid;
}

QString OAIDescribeTypeOutput::getDescription() const {
    return m_description;
}
void OAIDescribeTypeOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeTypeOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeTypeOutput::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeTypeOutput::getSchema() const {
    return m_schema;
}
void OAIDescribeTypeOutput::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDescribeTypeOutput::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDescribeTypeOutput::is_schema_Valid() const{
    return m_schema_isValid;
}

OAIProvisioningType OAIDescribeTypeOutput::getProvisioningType() const {
    return m_provisioning_type;
}
void OAIDescribeTypeOutput::setProvisioningType(const OAIProvisioningType &provisioning_type) {
    m_provisioning_type = provisioning_type;
    m_provisioning_type_isSet = true;
}

bool OAIDescribeTypeOutput::is_provisioning_type_Set() const{
    return m_provisioning_type_isSet;
}

bool OAIDescribeTypeOutput::is_provisioning_type_Valid() const{
    return m_provisioning_type_isValid;
}

OAIDeprecatedStatus OAIDescribeTypeOutput::getDeprecatedStatus() const {
    return m_deprecated_status;
}
void OAIDescribeTypeOutput::setDeprecatedStatus(const OAIDeprecatedStatus &deprecated_status) {
    m_deprecated_status = deprecated_status;
    m_deprecated_status_isSet = true;
}

bool OAIDescribeTypeOutput::is_deprecated_status_Set() const{
    return m_deprecated_status_isSet;
}

bool OAIDescribeTypeOutput::is_deprecated_status_Valid() const{
    return m_deprecated_status_isValid;
}

OAIDescribeTypeOutput_LoggingConfig OAIDescribeTypeOutput::getLoggingConfig() const {
    return m_logging_config;
}
void OAIDescribeTypeOutput::setLoggingConfig(const OAIDescribeTypeOutput_LoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAIDescribeTypeOutput::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAIDescribeTypeOutput::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QList OAIDescribeTypeOutput::getRequiredActivatedTypes() const {
    return m_required_activated_types;
}
void OAIDescribeTypeOutput::setRequiredActivatedTypes(const QList &required_activated_types) {
    m_required_activated_types = required_activated_types;
    m_required_activated_types_isSet = true;
}

bool OAIDescribeTypeOutput::is_required_activated_types_Set() const{
    return m_required_activated_types_isSet;
}

bool OAIDescribeTypeOutput::is_required_activated_types_Valid() const{
    return m_required_activated_types_isValid;
}

QString OAIDescribeTypeOutput::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIDescribeTypeOutput::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIDescribeTypeOutput::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIDescribeTypeOutput::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

OAIVisibility OAIDescribeTypeOutput::getVisibility() const {
    return m_visibility;
}
void OAIDescribeTypeOutput::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIDescribeTypeOutput::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIDescribeTypeOutput::is_visibility_Valid() const{
    return m_visibility_isValid;
}

QString OAIDescribeTypeOutput::getSourceUrl() const {
    return m_source_url;
}
void OAIDescribeTypeOutput::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIDescribeTypeOutput::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIDescribeTypeOutput::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIDescribeTypeOutput::getDocumentationUrl() const {
    return m_documentation_url;
}
void OAIDescribeTypeOutput::setDocumentationUrl(const QString &documentation_url) {
    m_documentation_url = documentation_url;
    m_documentation_url_isSet = true;
}

bool OAIDescribeTypeOutput::is_documentation_url_Set() const{
    return m_documentation_url_isSet;
}

bool OAIDescribeTypeOutput::is_documentation_url_Valid() const{
    return m_documentation_url_isValid;
}

QDateTime OAIDescribeTypeOutput::getLastUpdated() const {
    return m_last_updated;
}
void OAIDescribeTypeOutput::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDescribeTypeOutput::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDescribeTypeOutput::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QDateTime OAIDescribeTypeOutput::getTimeCreated() const {
    return m_time_created;
}
void OAIDescribeTypeOutput::setTimeCreated(const QDateTime &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAIDescribeTypeOutput::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAIDescribeTypeOutput::is_time_created_Valid() const{
    return m_time_created_isValid;
}

QString OAIDescribeTypeOutput::getConfigurationSchema() const {
    return m_configuration_schema;
}
void OAIDescribeTypeOutput::setConfigurationSchema(const QString &configuration_schema) {
    m_configuration_schema = configuration_schema;
    m_configuration_schema_isSet = true;
}

bool OAIDescribeTypeOutput::is_configuration_schema_Set() const{
    return m_configuration_schema_isSet;
}

bool OAIDescribeTypeOutput::is_configuration_schema_Valid() const{
    return m_configuration_schema_isValid;
}

QString OAIDescribeTypeOutput::getPublisherId() const {
    return m_publisher_id;
}
void OAIDescribeTypeOutput::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIDescribeTypeOutput::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIDescribeTypeOutput::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

QString OAIDescribeTypeOutput::getOriginalTypeName() const {
    return m_original_type_name;
}
void OAIDescribeTypeOutput::setOriginalTypeName(const QString &original_type_name) {
    m_original_type_name = original_type_name;
    m_original_type_name_isSet = true;
}

bool OAIDescribeTypeOutput::is_original_type_name_Set() const{
    return m_original_type_name_isSet;
}

bool OAIDescribeTypeOutput::is_original_type_name_Valid() const{
    return m_original_type_name_isValid;
}

QString OAIDescribeTypeOutput::getOriginalTypeArn() const {
    return m_original_type_arn;
}
void OAIDescribeTypeOutput::setOriginalTypeArn(const QString &original_type_arn) {
    m_original_type_arn = original_type_arn;
    m_original_type_arn_isSet = true;
}

bool OAIDescribeTypeOutput::is_original_type_arn_Set() const{
    return m_original_type_arn_isSet;
}

bool OAIDescribeTypeOutput::is_original_type_arn_Valid() const{
    return m_original_type_arn_isValid;
}

QString OAIDescribeTypeOutput::getPublicVersionNumber() const {
    return m_public_version_number;
}
void OAIDescribeTypeOutput::setPublicVersionNumber(const QString &public_version_number) {
    m_public_version_number = public_version_number;
    m_public_version_number_isSet = true;
}

bool OAIDescribeTypeOutput::is_public_version_number_Set() const{
    return m_public_version_number_isSet;
}

bool OAIDescribeTypeOutput::is_public_version_number_Valid() const{
    return m_public_version_number_isValid;
}

QString OAIDescribeTypeOutput::getLatestPublicVersion() const {
    return m_latest_public_version;
}
void OAIDescribeTypeOutput::setLatestPublicVersion(const QString &latest_public_version) {
    m_latest_public_version = latest_public_version;
    m_latest_public_version_isSet = true;
}

bool OAIDescribeTypeOutput::is_latest_public_version_Set() const{
    return m_latest_public_version_isSet;
}

bool OAIDescribeTypeOutput::is_latest_public_version_Valid() const{
    return m_latest_public_version_isValid;
}

bool OAIDescribeTypeOutput::getIsActivated() const {
    return m_is_activated;
}
void OAIDescribeTypeOutput::setIsActivated(const bool &is_activated) {
    m_is_activated = is_activated;
    m_is_activated_isSet = true;
}

bool OAIDescribeTypeOutput::is_is_activated_Set() const{
    return m_is_activated_isSet;
}

bool OAIDescribeTypeOutput::is_is_activated_Valid() const{
    return m_is_activated_isValid;
}

bool OAIDescribeTypeOutput::getAutoUpdate() const {
    return m_auto_update;
}
void OAIDescribeTypeOutput::setAutoUpdate(const bool &auto_update) {
    m_auto_update = auto_update;
    m_auto_update_isSet = true;
}

bool OAIDescribeTypeOutput::is_auto_update_Set() const{
    return m_auto_update_isSet;
}

bool OAIDescribeTypeOutput::is_auto_update_Valid() const{
    return m_auto_update_isValid;
}

bool OAIDescribeTypeOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_tests_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_tests_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_activated_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_type_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_public_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_update_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTypeOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
