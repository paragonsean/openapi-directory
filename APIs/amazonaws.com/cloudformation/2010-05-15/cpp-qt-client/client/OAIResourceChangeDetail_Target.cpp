/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceChangeDetail_Target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceChangeDetail_Target::OAIResourceChangeDetail_Target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceChangeDetail_Target::OAIResourceChangeDetail_Target() {
    this->initializeModel();
}

OAIResourceChangeDetail_Target::~OAIResourceChangeDetail_Target() {}

void OAIResourceChangeDetail_Target::initializeModel() {

    m_attribute_isSet = false;
    m_attribute_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_requires_recreation_isSet = false;
    m_requires_recreation_isValid = false;
}

void OAIResourceChangeDetail_Target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceChangeDetail_Target::fromJsonObject(QJsonObject json) {

    m_attribute_isValid = ::OpenAPI::fromJsonValue(m_attribute, json[QString("Attribute")]);
    m_attribute_isSet = !json[QString("Attribute")].isNull() && m_attribute_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_requires_recreation_isValid = ::OpenAPI::fromJsonValue(m_requires_recreation, json[QString("RequiresRecreation")]);
    m_requires_recreation_isSet = !json[QString("RequiresRecreation")].isNull() && m_requires_recreation_isValid;
}

QString OAIResourceChangeDetail_Target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceChangeDetail_Target::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute.isSet()) {
        obj.insert(QString("Attribute"), ::OpenAPI::toJsonValue(m_attribute));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_requires_recreation.isSet()) {
        obj.insert(QString("RequiresRecreation"), ::OpenAPI::toJsonValue(m_requires_recreation));
    }
    return obj;
}

OAIResourceAttribute OAIResourceChangeDetail_Target::getAttribute() const {
    return m_attribute;
}
void OAIResourceChangeDetail_Target::setAttribute(const OAIResourceAttribute &attribute) {
    m_attribute = attribute;
    m_attribute_isSet = true;
}

bool OAIResourceChangeDetail_Target::is_attribute_Set() const{
    return m_attribute_isSet;
}

bool OAIResourceChangeDetail_Target::is_attribute_Valid() const{
    return m_attribute_isValid;
}

QString OAIResourceChangeDetail_Target::getName() const {
    return m_name;
}
void OAIResourceChangeDetail_Target::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceChangeDetail_Target::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceChangeDetail_Target::is_name_Valid() const{
    return m_name_isValid;
}

OAIRequiresRecreation OAIResourceChangeDetail_Target::getRequiresRecreation() const {
    return m_requires_recreation;
}
void OAIResourceChangeDetail_Target::setRequiresRecreation(const OAIRequiresRecreation &requires_recreation) {
    m_requires_recreation = requires_recreation;
    m_requires_recreation_isSet = true;
}

bool OAIResourceChangeDetail_Target::is_requires_recreation_Set() const{
    return m_requires_recreation_isSet;
}

bool OAIResourceChangeDetail_Target::is_requires_recreation_Valid() const{
    return m_requires_recreation_isValid;
}

bool OAIResourceChangeDetail_Target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_recreation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceChangeDetail_Target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
