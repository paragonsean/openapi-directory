/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypeConfigurationIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypeConfigurationIdentifier::OAITypeConfigurationIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypeConfigurationIdentifier::OAITypeConfigurationIdentifier() {
    this->initializeModel();
}

OAITypeConfigurationIdentifier::~OAITypeConfigurationIdentifier() {}

void OAITypeConfigurationIdentifier::initializeModel() {

    m_type_arn_isSet = false;
    m_type_arn_isValid = false;

    m_type_configuration_alias_isSet = false;
    m_type_configuration_alias_isValid = false;

    m_type_configuration_arn_isSet = false;
    m_type_configuration_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;
}

void OAITypeConfigurationIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypeConfigurationIdentifier::fromJsonObject(QJsonObject json) {

    m_type_arn_isValid = ::OpenAPI::fromJsonValue(m_type_arn, json[QString("TypeArn")]);
    m_type_arn_isSet = !json[QString("TypeArn")].isNull() && m_type_arn_isValid;

    m_type_configuration_alias_isValid = ::OpenAPI::fromJsonValue(m_type_configuration_alias, json[QString("TypeConfigurationAlias")]);
    m_type_configuration_alias_isSet = !json[QString("TypeConfigurationAlias")].isNull() && m_type_configuration_alias_isValid;

    m_type_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_type_configuration_arn, json[QString("TypeConfigurationArn")]);
    m_type_configuration_arn_isSet = !json[QString("TypeConfigurationArn")].isNull() && m_type_configuration_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("TypeName")]);
    m_type_name_isSet = !json[QString("TypeName")].isNull() && m_type_name_isValid;
}

QString OAITypeConfigurationIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypeConfigurationIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_type_arn_isSet) {
        obj.insert(QString("TypeArn"), ::OpenAPI::toJsonValue(m_type_arn));
    }
    if (m_type_configuration_alias_isSet) {
        obj.insert(QString("TypeConfigurationAlias"), ::OpenAPI::toJsonValue(m_type_configuration_alias));
    }
    if (m_type_configuration_arn_isSet) {
        obj.insert(QString("TypeConfigurationArn"), ::OpenAPI::toJsonValue(m_type_configuration_arn));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("TypeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    return obj;
}

QString OAITypeConfigurationIdentifier::getTypeArn() const {
    return m_type_arn;
}
void OAITypeConfigurationIdentifier::setTypeArn(const QString &type_arn) {
    m_type_arn = type_arn;
    m_type_arn_isSet = true;
}

bool OAITypeConfigurationIdentifier::is_type_arn_Set() const{
    return m_type_arn_isSet;
}

bool OAITypeConfigurationIdentifier::is_type_arn_Valid() const{
    return m_type_arn_isValid;
}

QString OAITypeConfigurationIdentifier::getTypeConfigurationAlias() const {
    return m_type_configuration_alias;
}
void OAITypeConfigurationIdentifier::setTypeConfigurationAlias(const QString &type_configuration_alias) {
    m_type_configuration_alias = type_configuration_alias;
    m_type_configuration_alias_isSet = true;
}

bool OAITypeConfigurationIdentifier::is_type_configuration_alias_Set() const{
    return m_type_configuration_alias_isSet;
}

bool OAITypeConfigurationIdentifier::is_type_configuration_alias_Valid() const{
    return m_type_configuration_alias_isValid;
}

QString OAITypeConfigurationIdentifier::getTypeConfigurationArn() const {
    return m_type_configuration_arn;
}
void OAITypeConfigurationIdentifier::setTypeConfigurationArn(const QString &type_configuration_arn) {
    m_type_configuration_arn = type_configuration_arn;
    m_type_configuration_arn_isSet = true;
}

bool OAITypeConfigurationIdentifier::is_type_configuration_arn_Set() const{
    return m_type_configuration_arn_isSet;
}

bool OAITypeConfigurationIdentifier::is_type_configuration_arn_Valid() const{
    return m_type_configuration_arn_isValid;
}

OAIThirdPartyType OAITypeConfigurationIdentifier::getType() const {
    return m_type;
}
void OAITypeConfigurationIdentifier::setType(const OAIThirdPartyType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITypeConfigurationIdentifier::is_type_Set() const{
    return m_type_isSet;
}

bool OAITypeConfigurationIdentifier::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITypeConfigurationIdentifier::getTypeName() const {
    return m_type_name;
}
void OAITypeConfigurationIdentifier::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAITypeConfigurationIdentifier::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAITypeConfigurationIdentifier::is_type_name_Valid() const{
    return m_type_name_isValid;
}

bool OAITypeConfigurationIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_configuration_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypeConfigurationIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
