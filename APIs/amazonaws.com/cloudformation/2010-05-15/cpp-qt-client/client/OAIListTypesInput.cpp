/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTypesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTypesInput::OAIListTypesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTypesInput::OAIListTypesInput() {
    this->initializeModel();
}

OAIListTypesInput::~OAIListTypesInput() {}

void OAIListTypesInput::initializeModel() {

    m_visibility_isSet = false;
    m_visibility_isValid = false;

    m_provisioning_type_isSet = false;
    m_provisioning_type_isValid = false;

    m_deprecated_status_isSet = false;
    m_deprecated_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTypesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTypesInput::fromJsonObject(QJsonObject json) {

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;

    m_provisioning_type_isValid = ::OpenAPI::fromJsonValue(m_provisioning_type, json[QString("ProvisioningType")]);
    m_provisioning_type_isSet = !json[QString("ProvisioningType")].isNull() && m_provisioning_type_isValid;

    m_deprecated_status_isValid = ::OpenAPI::fromJsonValue(m_deprecated_status, json[QString("DeprecatedStatus")]);
    m_deprecated_status_isSet = !json[QString("DeprecatedStatus")].isNull() && m_deprecated_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTypesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTypesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_visibility.isSet()) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    if (m_provisioning_type.isSet()) {
        obj.insert(QString("ProvisioningType"), ::OpenAPI::toJsonValue(m_provisioning_type));
    }
    if (m_deprecated_status.isSet()) {
        obj.insert(QString("DeprecatedStatus"), ::OpenAPI::toJsonValue(m_deprecated_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIVisibility OAIListTypesInput::getVisibility() const {
    return m_visibility;
}
void OAIListTypesInput::setVisibility(const OAIVisibility &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIListTypesInput::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIListTypesInput::is_visibility_Valid() const{
    return m_visibility_isValid;
}

OAIProvisioningType OAIListTypesInput::getProvisioningType() const {
    return m_provisioning_type;
}
void OAIListTypesInput::setProvisioningType(const OAIProvisioningType &provisioning_type) {
    m_provisioning_type = provisioning_type;
    m_provisioning_type_isSet = true;
}

bool OAIListTypesInput::is_provisioning_type_Set() const{
    return m_provisioning_type_isSet;
}

bool OAIListTypesInput::is_provisioning_type_Valid() const{
    return m_provisioning_type_isValid;
}

OAIDeprecatedStatus OAIListTypesInput::getDeprecatedStatus() const {
    return m_deprecated_status;
}
void OAIListTypesInput::setDeprecatedStatus(const OAIDeprecatedStatus &deprecated_status) {
    m_deprecated_status = deprecated_status;
    m_deprecated_status_isSet = true;
}

bool OAIListTypesInput::is_deprecated_status_Set() const{
    return m_deprecated_status_isSet;
}

bool OAIListTypesInput::is_deprecated_status_Valid() const{
    return m_deprecated_status_isValid;
}

OAIRegistryType OAIListTypesInput::getType() const {
    return m_type;
}
void OAIListTypesInput::setType(const OAIRegistryType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListTypesInput::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListTypesInput::is_type_Valid() const{
    return m_type_isValid;
}

OAIListTypesInput_Filters OAIListTypesInput::getFilters() const {
    return m_filters;
}
void OAIListTypesInput::setFilters(const OAIListTypesInput_Filters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIListTypesInput::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIListTypesInput::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIListTypesInput::getMaxResults() const {
    return m_max_results;
}
void OAIListTypesInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListTypesInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListTypesInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListTypesInput::getNextToken() const {
    return m_next_token;
}
void OAIListTypesInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTypesInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTypesInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTypesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deprecated_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTypesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
