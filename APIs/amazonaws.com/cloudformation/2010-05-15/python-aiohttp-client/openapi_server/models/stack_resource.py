# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_change_module_info import ResourceChangeModuleInfo
from openapi_server.models.resource_status import ResourceStatus
from openapi_server.models.stack_resource_detail_drift_information import StackResourceDetailDriftInformation
from openapi_server import util


class StackResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_name: str=None, stack_id: str=None, logical_resource_id: str=None, physical_resource_id: str=None, resource_type: str=None, timestamp: datetime=None, resource_status: ResourceStatus=None, resource_status_reason: str=None, description: str=None, drift_information: StackResourceDetailDriftInformation=None, module_info: ResourceChangeModuleInfo=None):
        """StackResource - a model defined in OpenAPI

        :param stack_name: The stack_name of this StackResource.
        :param stack_id: The stack_id of this StackResource.
        :param logical_resource_id: The logical_resource_id of this StackResource.
        :param physical_resource_id: The physical_resource_id of this StackResource.
        :param resource_type: The resource_type of this StackResource.
        :param timestamp: The timestamp of this StackResource.
        :param resource_status: The resource_status of this StackResource.
        :param resource_status_reason: The resource_status_reason of this StackResource.
        :param description: The description of this StackResource.
        :param drift_information: The drift_information of this StackResource.
        :param module_info: The module_info of this StackResource.
        """
        self.openapi_types = {
            'stack_name': str,
            'stack_id': str,
            'logical_resource_id': str,
            'physical_resource_id': str,
            'resource_type': str,
            'timestamp': datetime,
            'resource_status': ResourceStatus,
            'resource_status_reason': str,
            'description': str,
            'drift_information': StackResourceDetailDriftInformation,
            'module_info': ResourceChangeModuleInfo
        }

        self.attribute_map = {
            'stack_name': 'StackName',
            'stack_id': 'StackId',
            'logical_resource_id': 'LogicalResourceId',
            'physical_resource_id': 'PhysicalResourceId',
            'resource_type': 'ResourceType',
            'timestamp': 'Timestamp',
            'resource_status': 'ResourceStatus',
            'resource_status_reason': 'ResourceStatusReason',
            'description': 'Description',
            'drift_information': 'DriftInformation',
            'module_info': 'ModuleInfo'
        }

        self._stack_name = stack_name
        self._stack_id = stack_id
        self._logical_resource_id = logical_resource_id
        self._physical_resource_id = physical_resource_id
        self._resource_type = resource_type
        self._timestamp = timestamp
        self._resource_status = resource_status
        self._resource_status_reason = resource_status_reason
        self._description = description
        self._drift_information = drift_information
        self._module_info = module_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StackResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StackResource of this StackResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_name(self):
        """Gets the stack_name of this StackResource.


        :return: The stack_name of this StackResource.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this StackResource.


        :param stack_name: The stack_name of this StackResource.
        :type stack_name: str
        """

        self._stack_name = stack_name

    @property
    def stack_id(self):
        """Gets the stack_id of this StackResource.


        :return: The stack_id of this StackResource.
        :rtype: str
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """Sets the stack_id of this StackResource.


        :param stack_id: The stack_id of this StackResource.
        :type stack_id: str
        """

        self._stack_id = stack_id

    @property
    def logical_resource_id(self):
        """Gets the logical_resource_id of this StackResource.


        :return: The logical_resource_id of this StackResource.
        :rtype: str
        """
        return self._logical_resource_id

    @logical_resource_id.setter
    def logical_resource_id(self, logical_resource_id):
        """Sets the logical_resource_id of this StackResource.


        :param logical_resource_id: The logical_resource_id of this StackResource.
        :type logical_resource_id: str
        """
        if logical_resource_id is None:
            raise ValueError("Invalid value for `logical_resource_id`, must not be `None`")

        self._logical_resource_id = logical_resource_id

    @property
    def physical_resource_id(self):
        """Gets the physical_resource_id of this StackResource.


        :return: The physical_resource_id of this StackResource.
        :rtype: str
        """
        return self._physical_resource_id

    @physical_resource_id.setter
    def physical_resource_id(self, physical_resource_id):
        """Sets the physical_resource_id of this StackResource.


        :param physical_resource_id: The physical_resource_id of this StackResource.
        :type physical_resource_id: str
        """

        self._physical_resource_id = physical_resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this StackResource.


        :return: The resource_type of this StackResource.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this StackResource.


        :param resource_type: The resource_type of this StackResource.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def timestamp(self):
        """Gets the timestamp of this StackResource.


        :return: The timestamp of this StackResource.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StackResource.


        :param timestamp: The timestamp of this StackResource.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def resource_status(self):
        """Gets the resource_status of this StackResource.


        :return: The resource_status of this StackResource.
        :rtype: ResourceStatus
        """
        return self._resource_status

    @resource_status.setter
    def resource_status(self, resource_status):
        """Sets the resource_status of this StackResource.


        :param resource_status: The resource_status of this StackResource.
        :type resource_status: ResourceStatus
        """
        if resource_status is None:
            raise ValueError("Invalid value for `resource_status`, must not be `None`")

        self._resource_status = resource_status

    @property
    def resource_status_reason(self):
        """Gets the resource_status_reason of this StackResource.


        :return: The resource_status_reason of this StackResource.
        :rtype: str
        """
        return self._resource_status_reason

    @resource_status_reason.setter
    def resource_status_reason(self, resource_status_reason):
        """Sets the resource_status_reason of this StackResource.


        :param resource_status_reason: The resource_status_reason of this StackResource.
        :type resource_status_reason: str
        """

        self._resource_status_reason = resource_status_reason

    @property
    def description(self):
        """Gets the description of this StackResource.


        :return: The description of this StackResource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StackResource.


        :param description: The description of this StackResource.
        :type description: str
        """

        self._description = description

    @property
    def drift_information(self):
        """Gets the drift_information of this StackResource.


        :return: The drift_information of this StackResource.
        :rtype: StackResourceDetailDriftInformation
        """
        return self._drift_information

    @drift_information.setter
    def drift_information(self, drift_information):
        """Sets the drift_information of this StackResource.


        :param drift_information: The drift_information of this StackResource.
        :type drift_information: StackResourceDetailDriftInformation
        """

        self._drift_information = drift_information

    @property
    def module_info(self):
        """Gets the module_info of this StackResource.


        :return: The module_info of this StackResource.
        :rtype: ResourceChangeModuleInfo
        """
        return self._module_info

    @module_info.setter
    def module_info(self, module_info):
        """Sets the module_info of this StackResource.


        :param module_info: The module_info of this StackResource.
        :type module_info: ResourceChangeModuleInfo
        """

        self._module_info = module_info
