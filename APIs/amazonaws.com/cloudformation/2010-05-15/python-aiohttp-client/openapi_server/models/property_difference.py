# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.difference_type import DifferenceType
from openapi_server import util


class PropertyDifference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, property_path: str=None, expected_value: str=None, actual_value: str=None, difference_type: DifferenceType=None):
        """PropertyDifference - a model defined in OpenAPI

        :param property_path: The property_path of this PropertyDifference.
        :param expected_value: The expected_value of this PropertyDifference.
        :param actual_value: The actual_value of this PropertyDifference.
        :param difference_type: The difference_type of this PropertyDifference.
        """
        self.openapi_types = {
            'property_path': str,
            'expected_value': str,
            'actual_value': str,
            'difference_type': DifferenceType
        }

        self.attribute_map = {
            'property_path': 'PropertyPath',
            'expected_value': 'ExpectedValue',
            'actual_value': 'ActualValue',
            'difference_type': 'DifferenceType'
        }

        self._property_path = property_path
        self._expected_value = expected_value
        self._actual_value = actual_value
        self._difference_type = difference_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyDifference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyDifference of this PropertyDifference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def property_path(self):
        """Gets the property_path of this PropertyDifference.


        :return: The property_path of this PropertyDifference.
        :rtype: str
        """
        return self._property_path

    @property_path.setter
    def property_path(self, property_path):
        """Sets the property_path of this PropertyDifference.


        :param property_path: The property_path of this PropertyDifference.
        :type property_path: str
        """
        if property_path is None:
            raise ValueError("Invalid value for `property_path`, must not be `None`")

        self._property_path = property_path

    @property
    def expected_value(self):
        """Gets the expected_value of this PropertyDifference.


        :return: The expected_value of this PropertyDifference.
        :rtype: str
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this PropertyDifference.


        :param expected_value: The expected_value of this PropertyDifference.
        :type expected_value: str
        """
        if expected_value is None:
            raise ValueError("Invalid value for `expected_value`, must not be `None`")

        self._expected_value = expected_value

    @property
    def actual_value(self):
        """Gets the actual_value of this PropertyDifference.


        :return: The actual_value of this PropertyDifference.
        :rtype: str
        """
        return self._actual_value

    @actual_value.setter
    def actual_value(self, actual_value):
        """Sets the actual_value of this PropertyDifference.


        :param actual_value: The actual_value of this PropertyDifference.
        :type actual_value: str
        """
        if actual_value is None:
            raise ValueError("Invalid value for `actual_value`, must not be `None`")

        self._actual_value = actual_value

    @property
    def difference_type(self):
        """Gets the difference_type of this PropertyDifference.


        :return: The difference_type of this PropertyDifference.
        :rtype: DifferenceType
        """
        return self._difference_type

    @difference_type.setter
    def difference_type(self, difference_type):
        """Sets the difference_type of this PropertyDifference.


        :param difference_type: The difference_type of this PropertyDifference.
        :type difference_type: DifferenceType
        """
        if difference_type is None:
            raise ValueError("Invalid value for `difference_type`, must not be `None`")

        self._difference_type = difference_type
