# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchDescribeTypeConfigurationsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List=None, unprocessed_type_configurations: List=None, type_configurations: List=None):
        """BatchDescribeTypeConfigurationsOutput - a model defined in OpenAPI

        :param errors: The errors of this BatchDescribeTypeConfigurationsOutput.
        :param unprocessed_type_configurations: The unprocessed_type_configurations of this BatchDescribeTypeConfigurationsOutput.
        :param type_configurations: The type_configurations of this BatchDescribeTypeConfigurationsOutput.
        """
        self.openapi_types = {
            'errors': List,
            'unprocessed_type_configurations': List,
            'type_configurations': List
        }

        self.attribute_map = {
            'errors': 'Errors',
            'unprocessed_type_configurations': 'UnprocessedTypeConfigurations',
            'type_configurations': 'TypeConfigurations'
        }

        self._errors = errors
        self._unprocessed_type_configurations = unprocessed_type_configurations
        self._type_configurations = type_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDescribeTypeConfigurationsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDescribeTypeConfigurationsOutput of this BatchDescribeTypeConfigurationsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this BatchDescribeTypeConfigurationsOutput.


        :return: The errors of this BatchDescribeTypeConfigurationsOutput.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchDescribeTypeConfigurationsOutput.


        :param errors: The errors of this BatchDescribeTypeConfigurationsOutput.
        :type errors: List
        """

        self._errors = errors

    @property
    def unprocessed_type_configurations(self):
        """Gets the unprocessed_type_configurations of this BatchDescribeTypeConfigurationsOutput.


        :return: The unprocessed_type_configurations of this BatchDescribeTypeConfigurationsOutput.
        :rtype: List
        """
        return self._unprocessed_type_configurations

    @unprocessed_type_configurations.setter
    def unprocessed_type_configurations(self, unprocessed_type_configurations):
        """Sets the unprocessed_type_configurations of this BatchDescribeTypeConfigurationsOutput.


        :param unprocessed_type_configurations: The unprocessed_type_configurations of this BatchDescribeTypeConfigurationsOutput.
        :type unprocessed_type_configurations: List
        """

        self._unprocessed_type_configurations = unprocessed_type_configurations

    @property
    def type_configurations(self):
        """Gets the type_configurations of this BatchDescribeTypeConfigurationsOutput.


        :return: The type_configurations of this BatchDescribeTypeConfigurationsOutput.
        :rtype: List
        """
        return self._type_configurations

    @type_configurations.setter
    def type_configurations(self, type_configurations):
        """Sets the type_configurations of this BatchDescribeTypeConfigurationsOutput.


        :param type_configurations: The type_configurations of this BatchDescribeTypeConfigurationsOutput.
        :type type_configurations: List
        """

        self._type_configurations = type_configurations
