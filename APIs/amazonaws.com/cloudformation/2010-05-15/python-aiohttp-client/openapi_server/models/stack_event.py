# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hook_failure_mode import HookFailureMode
from openapi_server.models.hook_invocation_point import HookInvocationPoint
from openapi_server.models.hook_status import HookStatus
from openapi_server.models.resource_status import ResourceStatus
from openapi_server import util


class StackEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_id: str=None, event_id: str=None, stack_name: str=None, logical_resource_id: str=None, physical_resource_id: str=None, resource_type: str=None, timestamp: datetime=None, resource_status: ResourceStatus=None, resource_status_reason: str=None, resource_properties: str=None, client_request_token: str=None, hook_type: str=None, hook_status: HookStatus=None, hook_status_reason: str=None, hook_invocation_point: HookInvocationPoint=None, hook_failure_mode: HookFailureMode=None):
        """StackEvent - a model defined in OpenAPI

        :param stack_id: The stack_id of this StackEvent.
        :param event_id: The event_id of this StackEvent.
        :param stack_name: The stack_name of this StackEvent.
        :param logical_resource_id: The logical_resource_id of this StackEvent.
        :param physical_resource_id: The physical_resource_id of this StackEvent.
        :param resource_type: The resource_type of this StackEvent.
        :param timestamp: The timestamp of this StackEvent.
        :param resource_status: The resource_status of this StackEvent.
        :param resource_status_reason: The resource_status_reason of this StackEvent.
        :param resource_properties: The resource_properties of this StackEvent.
        :param client_request_token: The client_request_token of this StackEvent.
        :param hook_type: The hook_type of this StackEvent.
        :param hook_status: The hook_status of this StackEvent.
        :param hook_status_reason: The hook_status_reason of this StackEvent.
        :param hook_invocation_point: The hook_invocation_point of this StackEvent.
        :param hook_failure_mode: The hook_failure_mode of this StackEvent.
        """
        self.openapi_types = {
            'stack_id': str,
            'event_id': str,
            'stack_name': str,
            'logical_resource_id': str,
            'physical_resource_id': str,
            'resource_type': str,
            'timestamp': datetime,
            'resource_status': ResourceStatus,
            'resource_status_reason': str,
            'resource_properties': str,
            'client_request_token': str,
            'hook_type': str,
            'hook_status': HookStatus,
            'hook_status_reason': str,
            'hook_invocation_point': HookInvocationPoint,
            'hook_failure_mode': HookFailureMode
        }

        self.attribute_map = {
            'stack_id': 'StackId',
            'event_id': 'EventId',
            'stack_name': 'StackName',
            'logical_resource_id': 'LogicalResourceId',
            'physical_resource_id': 'PhysicalResourceId',
            'resource_type': 'ResourceType',
            'timestamp': 'Timestamp',
            'resource_status': 'ResourceStatus',
            'resource_status_reason': 'ResourceStatusReason',
            'resource_properties': 'ResourceProperties',
            'client_request_token': 'ClientRequestToken',
            'hook_type': 'HookType',
            'hook_status': 'HookStatus',
            'hook_status_reason': 'HookStatusReason',
            'hook_invocation_point': 'HookInvocationPoint',
            'hook_failure_mode': 'HookFailureMode'
        }

        self._stack_id = stack_id
        self._event_id = event_id
        self._stack_name = stack_name
        self._logical_resource_id = logical_resource_id
        self._physical_resource_id = physical_resource_id
        self._resource_type = resource_type
        self._timestamp = timestamp
        self._resource_status = resource_status
        self._resource_status_reason = resource_status_reason
        self._resource_properties = resource_properties
        self._client_request_token = client_request_token
        self._hook_type = hook_type
        self._hook_status = hook_status
        self._hook_status_reason = hook_status_reason
        self._hook_invocation_point = hook_invocation_point
        self._hook_failure_mode = hook_failure_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StackEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StackEvent of this StackEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_id(self):
        """Gets the stack_id of this StackEvent.


        :return: The stack_id of this StackEvent.
        :rtype: str
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """Sets the stack_id of this StackEvent.


        :param stack_id: The stack_id of this StackEvent.
        :type stack_id: str
        """
        if stack_id is None:
            raise ValueError("Invalid value for `stack_id`, must not be `None`")

        self._stack_id = stack_id

    @property
    def event_id(self):
        """Gets the event_id of this StackEvent.


        :return: The event_id of this StackEvent.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this StackEvent.


        :param event_id: The event_id of this StackEvent.
        :type event_id: str
        """
        if event_id is None:
            raise ValueError("Invalid value for `event_id`, must not be `None`")

        self._event_id = event_id

    @property
    def stack_name(self):
        """Gets the stack_name of this StackEvent.


        :return: The stack_name of this StackEvent.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this StackEvent.


        :param stack_name: The stack_name of this StackEvent.
        :type stack_name: str
        """
        if stack_name is None:
            raise ValueError("Invalid value for `stack_name`, must not be `None`")

        self._stack_name = stack_name

    @property
    def logical_resource_id(self):
        """Gets the logical_resource_id of this StackEvent.


        :return: The logical_resource_id of this StackEvent.
        :rtype: str
        """
        return self._logical_resource_id

    @logical_resource_id.setter
    def logical_resource_id(self, logical_resource_id):
        """Sets the logical_resource_id of this StackEvent.


        :param logical_resource_id: The logical_resource_id of this StackEvent.
        :type logical_resource_id: str
        """

        self._logical_resource_id = logical_resource_id

    @property
    def physical_resource_id(self):
        """Gets the physical_resource_id of this StackEvent.


        :return: The physical_resource_id of this StackEvent.
        :rtype: str
        """
        return self._physical_resource_id

    @physical_resource_id.setter
    def physical_resource_id(self, physical_resource_id):
        """Sets the physical_resource_id of this StackEvent.


        :param physical_resource_id: The physical_resource_id of this StackEvent.
        :type physical_resource_id: str
        """

        self._physical_resource_id = physical_resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this StackEvent.


        :return: The resource_type of this StackEvent.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this StackEvent.


        :param resource_type: The resource_type of this StackEvent.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def timestamp(self):
        """Gets the timestamp of this StackEvent.


        :return: The timestamp of this StackEvent.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StackEvent.


        :param timestamp: The timestamp of this StackEvent.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def resource_status(self):
        """Gets the resource_status of this StackEvent.


        :return: The resource_status of this StackEvent.
        :rtype: ResourceStatus
        """
        return self._resource_status

    @resource_status.setter
    def resource_status(self, resource_status):
        """Sets the resource_status of this StackEvent.


        :param resource_status: The resource_status of this StackEvent.
        :type resource_status: ResourceStatus
        """

        self._resource_status = resource_status

    @property
    def resource_status_reason(self):
        """Gets the resource_status_reason of this StackEvent.


        :return: The resource_status_reason of this StackEvent.
        :rtype: str
        """
        return self._resource_status_reason

    @resource_status_reason.setter
    def resource_status_reason(self, resource_status_reason):
        """Sets the resource_status_reason of this StackEvent.


        :param resource_status_reason: The resource_status_reason of this StackEvent.
        :type resource_status_reason: str
        """

        self._resource_status_reason = resource_status_reason

    @property
    def resource_properties(self):
        """Gets the resource_properties of this StackEvent.


        :return: The resource_properties of this StackEvent.
        :rtype: str
        """
        return self._resource_properties

    @resource_properties.setter
    def resource_properties(self, resource_properties):
        """Sets the resource_properties of this StackEvent.


        :param resource_properties: The resource_properties of this StackEvent.
        :type resource_properties: str
        """

        self._resource_properties = resource_properties

    @property
    def client_request_token(self):
        """Gets the client_request_token of this StackEvent.


        :return: The client_request_token of this StackEvent.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this StackEvent.


        :param client_request_token: The client_request_token of this StackEvent.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def hook_type(self):
        """Gets the hook_type of this StackEvent.


        :return: The hook_type of this StackEvent.
        :rtype: str
        """
        return self._hook_type

    @hook_type.setter
    def hook_type(self, hook_type):
        """Sets the hook_type of this StackEvent.


        :param hook_type: The hook_type of this StackEvent.
        :type hook_type: str
        """

        self._hook_type = hook_type

    @property
    def hook_status(self):
        """Gets the hook_status of this StackEvent.


        :return: The hook_status of this StackEvent.
        :rtype: HookStatus
        """
        return self._hook_status

    @hook_status.setter
    def hook_status(self, hook_status):
        """Sets the hook_status of this StackEvent.


        :param hook_status: The hook_status of this StackEvent.
        :type hook_status: HookStatus
        """

        self._hook_status = hook_status

    @property
    def hook_status_reason(self):
        """Gets the hook_status_reason of this StackEvent.


        :return: The hook_status_reason of this StackEvent.
        :rtype: str
        """
        return self._hook_status_reason

    @hook_status_reason.setter
    def hook_status_reason(self, hook_status_reason):
        """Sets the hook_status_reason of this StackEvent.


        :param hook_status_reason: The hook_status_reason of this StackEvent.
        :type hook_status_reason: str
        """

        self._hook_status_reason = hook_status_reason

    @property
    def hook_invocation_point(self):
        """Gets the hook_invocation_point of this StackEvent.


        :return: The hook_invocation_point of this StackEvent.
        :rtype: HookInvocationPoint
        """
        return self._hook_invocation_point

    @hook_invocation_point.setter
    def hook_invocation_point(self, hook_invocation_point):
        """Sets the hook_invocation_point of this StackEvent.


        :param hook_invocation_point: The hook_invocation_point of this StackEvent.
        :type hook_invocation_point: HookInvocationPoint
        """

        self._hook_invocation_point = hook_invocation_point

    @property
    def hook_failure_mode(self):
        """Gets the hook_failure_mode of this StackEvent.


        :return: The hook_failure_mode of this StackEvent.
        :rtype: HookFailureMode
        """
        return self._hook_failure_mode

    @hook_failure_mode.setter
    def hook_failure_mode(self, hook_failure_mode):
        """Sets the hook_failure_mode of this StackEvent.


        :param hook_failure_mode: The hook_failure_mode of this StackEvent.
        :type hook_failure_mode: HookFailureMode
        """

        self._hook_failure_mode = hook_failure_mode
