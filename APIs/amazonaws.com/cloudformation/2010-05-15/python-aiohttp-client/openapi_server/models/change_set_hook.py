# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_set_hook_target_details import ChangeSetHookTargetDetails
from openapi_server.models.hook_failure_mode import HookFailureMode
from openapi_server.models.hook_invocation_point import HookInvocationPoint
from openapi_server import util


class ChangeSetHook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, invocation_point: HookInvocationPoint=None, failure_mode: HookFailureMode=None, type_name: str=None, type_version_id: str=None, type_configuration_version_id: str=None, target_details: ChangeSetHookTargetDetails=None):
        """ChangeSetHook - a model defined in OpenAPI

        :param invocation_point: The invocation_point of this ChangeSetHook.
        :param failure_mode: The failure_mode of this ChangeSetHook.
        :param type_name: The type_name of this ChangeSetHook.
        :param type_version_id: The type_version_id of this ChangeSetHook.
        :param type_configuration_version_id: The type_configuration_version_id of this ChangeSetHook.
        :param target_details: The target_details of this ChangeSetHook.
        """
        self.openapi_types = {
            'invocation_point': HookInvocationPoint,
            'failure_mode': HookFailureMode,
            'type_name': str,
            'type_version_id': str,
            'type_configuration_version_id': str,
            'target_details': ChangeSetHookTargetDetails
        }

        self.attribute_map = {
            'invocation_point': 'InvocationPoint',
            'failure_mode': 'FailureMode',
            'type_name': 'TypeName',
            'type_version_id': 'TypeVersionId',
            'type_configuration_version_id': 'TypeConfigurationVersionId',
            'target_details': 'TargetDetails'
        }

        self._invocation_point = invocation_point
        self._failure_mode = failure_mode
        self._type_name = type_name
        self._type_version_id = type_version_id
        self._type_configuration_version_id = type_configuration_version_id
        self._target_details = target_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeSetHook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeSetHook of this ChangeSetHook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def invocation_point(self):
        """Gets the invocation_point of this ChangeSetHook.


        :return: The invocation_point of this ChangeSetHook.
        :rtype: HookInvocationPoint
        """
        return self._invocation_point

    @invocation_point.setter
    def invocation_point(self, invocation_point):
        """Sets the invocation_point of this ChangeSetHook.


        :param invocation_point: The invocation_point of this ChangeSetHook.
        :type invocation_point: HookInvocationPoint
        """

        self._invocation_point = invocation_point

    @property
    def failure_mode(self):
        """Gets the failure_mode of this ChangeSetHook.


        :return: The failure_mode of this ChangeSetHook.
        :rtype: HookFailureMode
        """
        return self._failure_mode

    @failure_mode.setter
    def failure_mode(self, failure_mode):
        """Sets the failure_mode of this ChangeSetHook.


        :param failure_mode: The failure_mode of this ChangeSetHook.
        :type failure_mode: HookFailureMode
        """

        self._failure_mode = failure_mode

    @property
    def type_name(self):
        """Gets the type_name of this ChangeSetHook.


        :return: The type_name of this ChangeSetHook.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this ChangeSetHook.


        :param type_name: The type_name of this ChangeSetHook.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def type_version_id(self):
        """Gets the type_version_id of this ChangeSetHook.


        :return: The type_version_id of this ChangeSetHook.
        :rtype: str
        """
        return self._type_version_id

    @type_version_id.setter
    def type_version_id(self, type_version_id):
        """Sets the type_version_id of this ChangeSetHook.


        :param type_version_id: The type_version_id of this ChangeSetHook.
        :type type_version_id: str
        """

        self._type_version_id = type_version_id

    @property
    def type_configuration_version_id(self):
        """Gets the type_configuration_version_id of this ChangeSetHook.


        :return: The type_configuration_version_id of this ChangeSetHook.
        :rtype: str
        """
        return self._type_configuration_version_id

    @type_configuration_version_id.setter
    def type_configuration_version_id(self, type_configuration_version_id):
        """Sets the type_configuration_version_id of this ChangeSetHook.


        :param type_configuration_version_id: The type_configuration_version_id of this ChangeSetHook.
        :type type_configuration_version_id: str
        """

        self._type_configuration_version_id = type_configuration_version_id

    @property
    def target_details(self):
        """Gets the target_details of this ChangeSetHook.


        :return: The target_details of this ChangeSetHook.
        :rtype: ChangeSetHookTargetDetails
        """
        return self._target_details

    @target_details.setter
    def target_details(self, target_details):
        """Sets the target_details of this ChangeSetHook.


        :param target_details: The target_details of this ChangeSetHook.
        :type target_details: ChangeSetHookTargetDetails
        """

        self._target_details = target_details
