# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deprecated_status import DeprecatedStatus
from openapi_server.models.list_types_input_filters import ListTypesInputFilters
from openapi_server.models.provisioning_type import ProvisioningType
from openapi_server.models.registry_type import RegistryType
from openapi_server.models.visibility import Visibility
from openapi_server import util


class ListTypesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, visibility: Visibility=None, provisioning_type: ProvisioningType=None, deprecated_status: DeprecatedStatus=None, type: RegistryType=None, filters: ListTypesInputFilters=None, max_results: int=None, next_token: str=None):
        """ListTypesInput - a model defined in OpenAPI

        :param visibility: The visibility of this ListTypesInput.
        :param provisioning_type: The provisioning_type of this ListTypesInput.
        :param deprecated_status: The deprecated_status of this ListTypesInput.
        :param type: The type of this ListTypesInput.
        :param filters: The filters of this ListTypesInput.
        :param max_results: The max_results of this ListTypesInput.
        :param next_token: The next_token of this ListTypesInput.
        """
        self.openapi_types = {
            'visibility': Visibility,
            'provisioning_type': ProvisioningType,
            'deprecated_status': DeprecatedStatus,
            'type': RegistryType,
            'filters': ListTypesInputFilters,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'visibility': 'Visibility',
            'provisioning_type': 'ProvisioningType',
            'deprecated_status': 'DeprecatedStatus',
            'type': 'Type',
            'filters': 'Filters',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._visibility = visibility
        self._provisioning_type = provisioning_type
        self._deprecated_status = deprecated_status
        self._type = type
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTypesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTypesInput of this ListTypesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def visibility(self):
        """Gets the visibility of this ListTypesInput.


        :return: The visibility of this ListTypesInput.
        :rtype: Visibility
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this ListTypesInput.


        :param visibility: The visibility of this ListTypesInput.
        :type visibility: Visibility
        """

        self._visibility = visibility

    @property
    def provisioning_type(self):
        """Gets the provisioning_type of this ListTypesInput.


        :return: The provisioning_type of this ListTypesInput.
        :rtype: ProvisioningType
        """
        return self._provisioning_type

    @provisioning_type.setter
    def provisioning_type(self, provisioning_type):
        """Sets the provisioning_type of this ListTypesInput.


        :param provisioning_type: The provisioning_type of this ListTypesInput.
        :type provisioning_type: ProvisioningType
        """

        self._provisioning_type = provisioning_type

    @property
    def deprecated_status(self):
        """Gets the deprecated_status of this ListTypesInput.


        :return: The deprecated_status of this ListTypesInput.
        :rtype: DeprecatedStatus
        """
        return self._deprecated_status

    @deprecated_status.setter
    def deprecated_status(self, deprecated_status):
        """Sets the deprecated_status of this ListTypesInput.


        :param deprecated_status: The deprecated_status of this ListTypesInput.
        :type deprecated_status: DeprecatedStatus
        """

        self._deprecated_status = deprecated_status

    @property
    def type(self):
        """Gets the type of this ListTypesInput.


        :return: The type of this ListTypesInput.
        :rtype: RegistryType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListTypesInput.


        :param type: The type of this ListTypesInput.
        :type type: RegistryType
        """

        self._type = type

    @property
    def filters(self):
        """Gets the filters of this ListTypesInput.


        :return: The filters of this ListTypesInput.
        :rtype: ListTypesInputFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListTypesInput.


        :param filters: The filters of this ListTypesInput.
        :type filters: ListTypesInputFilters
        """

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListTypesInput.


        :return: The max_results of this ListTypesInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTypesInput.


        :param max_results: The max_results of this ListTypesInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListTypesInput.


        :return: The next_token of this ListTypesInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTypesInput.


        :param next_token: The next_token of this ListTypesInput.
        :type next_token: str
        """

        self._next_token = next_token
