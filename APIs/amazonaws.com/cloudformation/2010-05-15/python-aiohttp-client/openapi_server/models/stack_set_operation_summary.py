# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detect_stack_set_drift_input_operation_preferences import DetectStackSetDriftInputOperationPreferences
from openapi_server.models.stack_set_operation_action import StackSetOperationAction
from openapi_server.models.stack_set_operation_status import StackSetOperationStatus
from openapi_server.models.stack_set_operation_summary_status_details import StackSetOperationSummaryStatusDetails
from openapi_server import util


class StackSetOperationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation_id: str=None, action: StackSetOperationAction=None, status: StackSetOperationStatus=None, creation_timestamp: datetime=None, end_timestamp: datetime=None, status_reason: str=None, status_details: StackSetOperationSummaryStatusDetails=None, operation_preferences: DetectStackSetDriftInputOperationPreferences=None):
        """StackSetOperationSummary - a model defined in OpenAPI

        :param operation_id: The operation_id of this StackSetOperationSummary.
        :param action: The action of this StackSetOperationSummary.
        :param status: The status of this StackSetOperationSummary.
        :param creation_timestamp: The creation_timestamp of this StackSetOperationSummary.
        :param end_timestamp: The end_timestamp of this StackSetOperationSummary.
        :param status_reason: The status_reason of this StackSetOperationSummary.
        :param status_details: The status_details of this StackSetOperationSummary.
        :param operation_preferences: The operation_preferences of this StackSetOperationSummary.
        """
        self.openapi_types = {
            'operation_id': str,
            'action': StackSetOperationAction,
            'status': StackSetOperationStatus,
            'creation_timestamp': datetime,
            'end_timestamp': datetime,
            'status_reason': str,
            'status_details': StackSetOperationSummaryStatusDetails,
            'operation_preferences': DetectStackSetDriftInputOperationPreferences
        }

        self.attribute_map = {
            'operation_id': 'OperationId',
            'action': 'Action',
            'status': 'Status',
            'creation_timestamp': 'CreationTimestamp',
            'end_timestamp': 'EndTimestamp',
            'status_reason': 'StatusReason',
            'status_details': 'StatusDetails',
            'operation_preferences': 'OperationPreferences'
        }

        self._operation_id = operation_id
        self._action = action
        self._status = status
        self._creation_timestamp = creation_timestamp
        self._end_timestamp = end_timestamp
        self._status_reason = status_reason
        self._status_details = status_details
        self._operation_preferences = operation_preferences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StackSetOperationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StackSetOperationSummary of this StackSetOperationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation_id(self):
        """Gets the operation_id of this StackSetOperationSummary.


        :return: The operation_id of this StackSetOperationSummary.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this StackSetOperationSummary.


        :param operation_id: The operation_id of this StackSetOperationSummary.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def action(self):
        """Gets the action of this StackSetOperationSummary.


        :return: The action of this StackSetOperationSummary.
        :rtype: StackSetOperationAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this StackSetOperationSummary.


        :param action: The action of this StackSetOperationSummary.
        :type action: StackSetOperationAction
        """

        self._action = action

    @property
    def status(self):
        """Gets the status of this StackSetOperationSummary.


        :return: The status of this StackSetOperationSummary.
        :rtype: StackSetOperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StackSetOperationSummary.


        :param status: The status of this StackSetOperationSummary.
        :type status: StackSetOperationStatus
        """

        self._status = status

    @property
    def creation_timestamp(self):
        """Gets the creation_timestamp of this StackSetOperationSummary.


        :return: The creation_timestamp of this StackSetOperationSummary.
        :rtype: datetime
        """
        return self._creation_timestamp

    @creation_timestamp.setter
    def creation_timestamp(self, creation_timestamp):
        """Sets the creation_timestamp of this StackSetOperationSummary.


        :param creation_timestamp: The creation_timestamp of this StackSetOperationSummary.
        :type creation_timestamp: datetime
        """

        self._creation_timestamp = creation_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this StackSetOperationSummary.


        :return: The end_timestamp of this StackSetOperationSummary.
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this StackSetOperationSummary.


        :param end_timestamp: The end_timestamp of this StackSetOperationSummary.
        :type end_timestamp: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def status_reason(self):
        """Gets the status_reason of this StackSetOperationSummary.


        :return: The status_reason of this StackSetOperationSummary.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this StackSetOperationSummary.


        :param status_reason: The status_reason of this StackSetOperationSummary.
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def status_details(self):
        """Gets the status_details of this StackSetOperationSummary.


        :return: The status_details of this StackSetOperationSummary.
        :rtype: StackSetOperationSummaryStatusDetails
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this StackSetOperationSummary.


        :param status_details: The status_details of this StackSetOperationSummary.
        :type status_details: StackSetOperationSummaryStatusDetails
        """

        self._status_details = status_details

    @property
    def operation_preferences(self):
        """Gets the operation_preferences of this StackSetOperationSummary.


        :return: The operation_preferences of this StackSetOperationSummary.
        :rtype: DetectStackSetDriftInputOperationPreferences
        """
        return self._operation_preferences

    @operation_preferences.setter
    def operation_preferences(self, operation_preferences):
        """Sets the operation_preferences of this StackSetOperationSummary.


        :param operation_preferences: The operation_preferences of this StackSetOperationSummary.
        :type operation_preferences: DetectStackSetDriftInputOperationPreferences
        """

        self._operation_preferences = operation_preferences
