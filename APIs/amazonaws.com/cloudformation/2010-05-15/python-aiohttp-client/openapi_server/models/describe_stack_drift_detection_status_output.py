# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stack_drift_detection_status import StackDriftDetectionStatus
from openapi_server.models.stack_drift_status import StackDriftStatus
from openapi_server import util


class DescribeStackDriftDetectionStatusOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_id: str=None, stack_drift_detection_id: str=None, stack_drift_status: StackDriftStatus=None, detection_status: StackDriftDetectionStatus=None, detection_status_reason: str=None, drifted_stack_resource_count: int=None, timestamp: datetime=None):
        """DescribeStackDriftDetectionStatusOutput - a model defined in OpenAPI

        :param stack_id: The stack_id of this DescribeStackDriftDetectionStatusOutput.
        :param stack_drift_detection_id: The stack_drift_detection_id of this DescribeStackDriftDetectionStatusOutput.
        :param stack_drift_status: The stack_drift_status of this DescribeStackDriftDetectionStatusOutput.
        :param detection_status: The detection_status of this DescribeStackDriftDetectionStatusOutput.
        :param detection_status_reason: The detection_status_reason of this DescribeStackDriftDetectionStatusOutput.
        :param drifted_stack_resource_count: The drifted_stack_resource_count of this DescribeStackDriftDetectionStatusOutput.
        :param timestamp: The timestamp of this DescribeStackDriftDetectionStatusOutput.
        """
        self.openapi_types = {
            'stack_id': str,
            'stack_drift_detection_id': str,
            'stack_drift_status': StackDriftStatus,
            'detection_status': StackDriftDetectionStatus,
            'detection_status_reason': str,
            'drifted_stack_resource_count': int,
            'timestamp': datetime
        }

        self.attribute_map = {
            'stack_id': 'StackId',
            'stack_drift_detection_id': 'StackDriftDetectionId',
            'stack_drift_status': 'StackDriftStatus',
            'detection_status': 'DetectionStatus',
            'detection_status_reason': 'DetectionStatusReason',
            'drifted_stack_resource_count': 'DriftedStackResourceCount',
            'timestamp': 'Timestamp'
        }

        self._stack_id = stack_id
        self._stack_drift_detection_id = stack_drift_detection_id
        self._stack_drift_status = stack_drift_status
        self._detection_status = detection_status
        self._detection_status_reason = detection_status_reason
        self._drifted_stack_resource_count = drifted_stack_resource_count
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeStackDriftDetectionStatusOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeStackDriftDetectionStatusOutput of this DescribeStackDriftDetectionStatusOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_id(self):
        """Gets the stack_id of this DescribeStackDriftDetectionStatusOutput.


        :return: The stack_id of this DescribeStackDriftDetectionStatusOutput.
        :rtype: str
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """Sets the stack_id of this DescribeStackDriftDetectionStatusOutput.


        :param stack_id: The stack_id of this DescribeStackDriftDetectionStatusOutput.
        :type stack_id: str
        """
        if stack_id is None:
            raise ValueError("Invalid value for `stack_id`, must not be `None`")

        self._stack_id = stack_id

    @property
    def stack_drift_detection_id(self):
        """Gets the stack_drift_detection_id of this DescribeStackDriftDetectionStatusOutput.


        :return: The stack_drift_detection_id of this DescribeStackDriftDetectionStatusOutput.
        :rtype: str
        """
        return self._stack_drift_detection_id

    @stack_drift_detection_id.setter
    def stack_drift_detection_id(self, stack_drift_detection_id):
        """Sets the stack_drift_detection_id of this DescribeStackDriftDetectionStatusOutput.


        :param stack_drift_detection_id: The stack_drift_detection_id of this DescribeStackDriftDetectionStatusOutput.
        :type stack_drift_detection_id: str
        """
        if stack_drift_detection_id is None:
            raise ValueError("Invalid value for `stack_drift_detection_id`, must not be `None`")

        self._stack_drift_detection_id = stack_drift_detection_id

    @property
    def stack_drift_status(self):
        """Gets the stack_drift_status of this DescribeStackDriftDetectionStatusOutput.


        :return: The stack_drift_status of this DescribeStackDriftDetectionStatusOutput.
        :rtype: StackDriftStatus
        """
        return self._stack_drift_status

    @stack_drift_status.setter
    def stack_drift_status(self, stack_drift_status):
        """Sets the stack_drift_status of this DescribeStackDriftDetectionStatusOutput.


        :param stack_drift_status: The stack_drift_status of this DescribeStackDriftDetectionStatusOutput.
        :type stack_drift_status: StackDriftStatus
        """

        self._stack_drift_status = stack_drift_status

    @property
    def detection_status(self):
        """Gets the detection_status of this DescribeStackDriftDetectionStatusOutput.


        :return: The detection_status of this DescribeStackDriftDetectionStatusOutput.
        :rtype: StackDriftDetectionStatus
        """
        return self._detection_status

    @detection_status.setter
    def detection_status(self, detection_status):
        """Sets the detection_status of this DescribeStackDriftDetectionStatusOutput.


        :param detection_status: The detection_status of this DescribeStackDriftDetectionStatusOutput.
        :type detection_status: StackDriftDetectionStatus
        """
        if detection_status is None:
            raise ValueError("Invalid value for `detection_status`, must not be `None`")

        self._detection_status = detection_status

    @property
    def detection_status_reason(self):
        """Gets the detection_status_reason of this DescribeStackDriftDetectionStatusOutput.


        :return: The detection_status_reason of this DescribeStackDriftDetectionStatusOutput.
        :rtype: str
        """
        return self._detection_status_reason

    @detection_status_reason.setter
    def detection_status_reason(self, detection_status_reason):
        """Sets the detection_status_reason of this DescribeStackDriftDetectionStatusOutput.


        :param detection_status_reason: The detection_status_reason of this DescribeStackDriftDetectionStatusOutput.
        :type detection_status_reason: str
        """

        self._detection_status_reason = detection_status_reason

    @property
    def drifted_stack_resource_count(self):
        """Gets the drifted_stack_resource_count of this DescribeStackDriftDetectionStatusOutput.


        :return: The drifted_stack_resource_count of this DescribeStackDriftDetectionStatusOutput.
        :rtype: int
        """
        return self._drifted_stack_resource_count

    @drifted_stack_resource_count.setter
    def drifted_stack_resource_count(self, drifted_stack_resource_count):
        """Sets the drifted_stack_resource_count of this DescribeStackDriftDetectionStatusOutput.


        :param drifted_stack_resource_count: The drifted_stack_resource_count of this DescribeStackDriftDetectionStatusOutput.
        :type drifted_stack_resource_count: int
        """

        self._drifted_stack_resource_count = drifted_stack_resource_count

    @property
    def timestamp(self):
        """Gets the timestamp of this DescribeStackDriftDetectionStatusOutput.


        :return: The timestamp of this DescribeStackDriftDetectionStatusOutput.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DescribeStackDriftDetectionStatusOutput.


        :param timestamp: The timestamp of this DescribeStackDriftDetectionStatusOutput.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
