# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateChangeSetOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, stack_id: str=None):
        """CreateChangeSetOutput - a model defined in OpenAPI

        :param id: The id of this CreateChangeSetOutput.
        :param stack_id: The stack_id of this CreateChangeSetOutput.
        """
        self.openapi_types = {
            'id': str,
            'stack_id': str
        }

        self.attribute_map = {
            'id': 'Id',
            'stack_id': 'StackId'
        }

        self._id = id
        self._stack_id = stack_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChangeSetOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChangeSetOutput of this CreateChangeSetOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CreateChangeSetOutput.


        :return: The id of this CreateChangeSetOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateChangeSetOutput.


        :param id: The id of this CreateChangeSetOutput.
        :type id: str
        """

        self._id = id

    @property
    def stack_id(self):
        """Gets the stack_id of this CreateChangeSetOutput.


        :return: The stack_id of this CreateChangeSetOutput.
        :rtype: str
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """Sets the stack_id of this CreateChangeSetOutput.


        :param stack_id: The stack_id of this CreateChangeSetOutput.
        :type stack_id: str
        """

        self._stack_id = stack_id
