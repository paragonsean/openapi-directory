# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.handler_error_code import HandlerErrorCode
from openapi_server.models.operation_status import OperationStatus
from openapi_server import util


class RecordHandlerProgressInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bearer_token: str=None, operation_status: OperationStatus=None, current_operation_status: OperationStatus=None, status_message: str=None, error_code: HandlerErrorCode=None, resource_model: str=None, client_request_token: str=None):
        """RecordHandlerProgressInput - a model defined in OpenAPI

        :param bearer_token: The bearer_token of this RecordHandlerProgressInput.
        :param operation_status: The operation_status of this RecordHandlerProgressInput.
        :param current_operation_status: The current_operation_status of this RecordHandlerProgressInput.
        :param status_message: The status_message of this RecordHandlerProgressInput.
        :param error_code: The error_code of this RecordHandlerProgressInput.
        :param resource_model: The resource_model of this RecordHandlerProgressInput.
        :param client_request_token: The client_request_token of this RecordHandlerProgressInput.
        """
        self.openapi_types = {
            'bearer_token': str,
            'operation_status': OperationStatus,
            'current_operation_status': OperationStatus,
            'status_message': str,
            'error_code': HandlerErrorCode,
            'resource_model': str,
            'client_request_token': str
        }

        self.attribute_map = {
            'bearer_token': 'BearerToken',
            'operation_status': 'OperationStatus',
            'current_operation_status': 'CurrentOperationStatus',
            'status_message': 'StatusMessage',
            'error_code': 'ErrorCode',
            'resource_model': 'ResourceModel',
            'client_request_token': 'ClientRequestToken'
        }

        self._bearer_token = bearer_token
        self._operation_status = operation_status
        self._current_operation_status = current_operation_status
        self._status_message = status_message
        self._error_code = error_code
        self._resource_model = resource_model
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecordHandlerProgressInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecordHandlerProgressInput of this RecordHandlerProgressInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bearer_token(self):
        """Gets the bearer_token of this RecordHandlerProgressInput.


        :return: The bearer_token of this RecordHandlerProgressInput.
        :rtype: str
        """
        return self._bearer_token

    @bearer_token.setter
    def bearer_token(self, bearer_token):
        """Sets the bearer_token of this RecordHandlerProgressInput.


        :param bearer_token: The bearer_token of this RecordHandlerProgressInput.
        :type bearer_token: str
        """
        if bearer_token is None:
            raise ValueError("Invalid value for `bearer_token`, must not be `None`")

        self._bearer_token = bearer_token

    @property
    def operation_status(self):
        """Gets the operation_status of this RecordHandlerProgressInput.


        :return: The operation_status of this RecordHandlerProgressInput.
        :rtype: OperationStatus
        """
        return self._operation_status

    @operation_status.setter
    def operation_status(self, operation_status):
        """Sets the operation_status of this RecordHandlerProgressInput.


        :param operation_status: The operation_status of this RecordHandlerProgressInput.
        :type operation_status: OperationStatus
        """
        if operation_status is None:
            raise ValueError("Invalid value for `operation_status`, must not be `None`")

        self._operation_status = operation_status

    @property
    def current_operation_status(self):
        """Gets the current_operation_status of this RecordHandlerProgressInput.


        :return: The current_operation_status of this RecordHandlerProgressInput.
        :rtype: OperationStatus
        """
        return self._current_operation_status

    @current_operation_status.setter
    def current_operation_status(self, current_operation_status):
        """Sets the current_operation_status of this RecordHandlerProgressInput.


        :param current_operation_status: The current_operation_status of this RecordHandlerProgressInput.
        :type current_operation_status: OperationStatus
        """

        self._current_operation_status = current_operation_status

    @property
    def status_message(self):
        """Gets the status_message of this RecordHandlerProgressInput.


        :return: The status_message of this RecordHandlerProgressInput.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this RecordHandlerProgressInput.


        :param status_message: The status_message of this RecordHandlerProgressInput.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def error_code(self):
        """Gets the error_code of this RecordHandlerProgressInput.


        :return: The error_code of this RecordHandlerProgressInput.
        :rtype: HandlerErrorCode
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this RecordHandlerProgressInput.


        :param error_code: The error_code of this RecordHandlerProgressInput.
        :type error_code: HandlerErrorCode
        """

        self._error_code = error_code

    @property
    def resource_model(self):
        """Gets the resource_model of this RecordHandlerProgressInput.


        :return: The resource_model of this RecordHandlerProgressInput.
        :rtype: str
        """
        return self._resource_model

    @resource_model.setter
    def resource_model(self, resource_model):
        """Sets the resource_model of this RecordHandlerProgressInput.


        :param resource_model: The resource_model of this RecordHandlerProgressInput.
        :type resource_model: str
        """

        self._resource_model = resource_model

    @property
    def client_request_token(self):
        """Gets the client_request_token of this RecordHandlerProgressInput.


        :return: The client_request_token of this RecordHandlerProgressInput.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this RecordHandlerProgressInput.


        :param client_request_token: The client_request_token of this RecordHandlerProgressInput.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token
