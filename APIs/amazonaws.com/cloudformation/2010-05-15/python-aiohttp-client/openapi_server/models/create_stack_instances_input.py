# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call_as import CallAs
from openapi_server.models.create_stack_instances_input_deployment_targets import CreateStackInstancesInputDeploymentTargets
from openapi_server.models.create_stack_instances_input_operation_preferences import CreateStackInstancesInputOperationPreferences
from openapi_server import util


class CreateStackInstancesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_set_name: str=None, accounts: List=None, deployment_targets: CreateStackInstancesInputDeploymentTargets=None, regions: List=None, parameter_overrides: List=None, operation_preferences: CreateStackInstancesInputOperationPreferences=None, operation_id: str=None, call_as: CallAs=None):
        """CreateStackInstancesInput - a model defined in OpenAPI

        :param stack_set_name: The stack_set_name of this CreateStackInstancesInput.
        :param accounts: The accounts of this CreateStackInstancesInput.
        :param deployment_targets: The deployment_targets of this CreateStackInstancesInput.
        :param regions: The regions of this CreateStackInstancesInput.
        :param parameter_overrides: The parameter_overrides of this CreateStackInstancesInput.
        :param operation_preferences: The operation_preferences of this CreateStackInstancesInput.
        :param operation_id: The operation_id of this CreateStackInstancesInput.
        :param call_as: The call_as of this CreateStackInstancesInput.
        """
        self.openapi_types = {
            'stack_set_name': str,
            'accounts': List,
            'deployment_targets': CreateStackInstancesInputDeploymentTargets,
            'regions': List,
            'parameter_overrides': List,
            'operation_preferences': CreateStackInstancesInputOperationPreferences,
            'operation_id': str,
            'call_as': CallAs
        }

        self.attribute_map = {
            'stack_set_name': 'StackSetName',
            'accounts': 'Accounts',
            'deployment_targets': 'DeploymentTargets',
            'regions': 'Regions',
            'parameter_overrides': 'ParameterOverrides',
            'operation_preferences': 'OperationPreferences',
            'operation_id': 'OperationId',
            'call_as': 'CallAs'
        }

        self._stack_set_name = stack_set_name
        self._accounts = accounts
        self._deployment_targets = deployment_targets
        self._regions = regions
        self._parameter_overrides = parameter_overrides
        self._operation_preferences = operation_preferences
        self._operation_id = operation_id
        self._call_as = call_as

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStackInstancesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStackInstancesInput of this CreateStackInstancesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_set_name(self):
        """Gets the stack_set_name of this CreateStackInstancesInput.


        :return: The stack_set_name of this CreateStackInstancesInput.
        :rtype: str
        """
        return self._stack_set_name

    @stack_set_name.setter
    def stack_set_name(self, stack_set_name):
        """Sets the stack_set_name of this CreateStackInstancesInput.


        :param stack_set_name: The stack_set_name of this CreateStackInstancesInput.
        :type stack_set_name: str
        """
        if stack_set_name is None:
            raise ValueError("Invalid value for `stack_set_name`, must not be `None`")

        self._stack_set_name = stack_set_name

    @property
    def accounts(self):
        """Gets the accounts of this CreateStackInstancesInput.


        :return: The accounts of this CreateStackInstancesInput.
        :rtype: List
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this CreateStackInstancesInput.


        :param accounts: The accounts of this CreateStackInstancesInput.
        :type accounts: List
        """

        self._accounts = accounts

    @property
    def deployment_targets(self):
        """Gets the deployment_targets of this CreateStackInstancesInput.


        :return: The deployment_targets of this CreateStackInstancesInput.
        :rtype: CreateStackInstancesInputDeploymentTargets
        """
        return self._deployment_targets

    @deployment_targets.setter
    def deployment_targets(self, deployment_targets):
        """Sets the deployment_targets of this CreateStackInstancesInput.


        :param deployment_targets: The deployment_targets of this CreateStackInstancesInput.
        :type deployment_targets: CreateStackInstancesInputDeploymentTargets
        """

        self._deployment_targets = deployment_targets

    @property
    def regions(self):
        """Gets the regions of this CreateStackInstancesInput.


        :return: The regions of this CreateStackInstancesInput.
        :rtype: List
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this CreateStackInstancesInput.


        :param regions: The regions of this CreateStackInstancesInput.
        :type regions: List
        """
        if regions is None:
            raise ValueError("Invalid value for `regions`, must not be `None`")

        self._regions = regions

    @property
    def parameter_overrides(self):
        """Gets the parameter_overrides of this CreateStackInstancesInput.


        :return: The parameter_overrides of this CreateStackInstancesInput.
        :rtype: List
        """
        return self._parameter_overrides

    @parameter_overrides.setter
    def parameter_overrides(self, parameter_overrides):
        """Sets the parameter_overrides of this CreateStackInstancesInput.


        :param parameter_overrides: The parameter_overrides of this CreateStackInstancesInput.
        :type parameter_overrides: List
        """

        self._parameter_overrides = parameter_overrides

    @property
    def operation_preferences(self):
        """Gets the operation_preferences of this CreateStackInstancesInput.


        :return: The operation_preferences of this CreateStackInstancesInput.
        :rtype: CreateStackInstancesInputOperationPreferences
        """
        return self._operation_preferences

    @operation_preferences.setter
    def operation_preferences(self, operation_preferences):
        """Sets the operation_preferences of this CreateStackInstancesInput.


        :param operation_preferences: The operation_preferences of this CreateStackInstancesInput.
        :type operation_preferences: CreateStackInstancesInputOperationPreferences
        """

        self._operation_preferences = operation_preferences

    @property
    def operation_id(self):
        """Gets the operation_id of this CreateStackInstancesInput.


        :return: The operation_id of this CreateStackInstancesInput.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this CreateStackInstancesInput.


        :param operation_id: The operation_id of this CreateStackInstancesInput.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def call_as(self):
        """Gets the call_as of this CreateStackInstancesInput.


        :return: The call_as of this CreateStackInstancesInput.
        :rtype: CallAs
        """
        return self._call_as

    @call_as.setter
    def call_as(self, call_as):
        """Sets the call_as of this CreateStackInstancesInput.


        :param call_as: The call_as of this CreateStackInstancesInput.
        :type call_as: CallAs
        """

        self._call_as = call_as
