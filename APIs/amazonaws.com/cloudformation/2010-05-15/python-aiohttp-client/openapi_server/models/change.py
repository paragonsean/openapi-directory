# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_resource_change import ChangeResourceChange
from openapi_server.models.change_type import ChangeType
from openapi_server import util


class Change(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ChangeType=None, hook_invocation_count: int=None, resource_change: ChangeResourceChange=None):
        """Change - a model defined in OpenAPI

        :param type: The type of this Change.
        :param hook_invocation_count: The hook_invocation_count of this Change.
        :param resource_change: The resource_change of this Change.
        """
        self.openapi_types = {
            'type': ChangeType,
            'hook_invocation_count': int,
            'resource_change': ChangeResourceChange
        }

        self.attribute_map = {
            'type': 'Type',
            'hook_invocation_count': 'HookInvocationCount',
            'resource_change': 'ResourceChange'
        }

        self._type = type
        self._hook_invocation_count = hook_invocation_count
        self._resource_change = resource_change

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Change':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Change of this Change.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this Change.


        :return: The type of this Change.
        :rtype: ChangeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Change.


        :param type: The type of this Change.
        :type type: ChangeType
        """

        self._type = type

    @property
    def hook_invocation_count(self):
        """Gets the hook_invocation_count of this Change.


        :return: The hook_invocation_count of this Change.
        :rtype: int
        """
        return self._hook_invocation_count

    @hook_invocation_count.setter
    def hook_invocation_count(self, hook_invocation_count):
        """Sets the hook_invocation_count of this Change.


        :param hook_invocation_count: The hook_invocation_count of this Change.
        :type hook_invocation_count: int
        """

        self._hook_invocation_count = hook_invocation_count

    @property
    def resource_change(self):
        """Gets the resource_change of this Change.


        :return: The resource_change of this Change.
        :rtype: ChangeResourceChange
        """
        return self._resource_change

    @resource_change.setter
    def resource_change(self, resource_change):
        """Sets the resource_change of this Change.


        :param resource_change: The resource_change of this Change.
        :type resource_change: ChangeResourceChange
        """

        self._resource_change = resource_change
