# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegisterPublisherInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_terms_and_conditions: bool=None, connection_arn: str=None):
        """RegisterPublisherInput - a model defined in OpenAPI

        :param accept_terms_and_conditions: The accept_terms_and_conditions of this RegisterPublisherInput.
        :param connection_arn: The connection_arn of this RegisterPublisherInput.
        """
        self.openapi_types = {
            'accept_terms_and_conditions': bool,
            'connection_arn': str
        }

        self.attribute_map = {
            'accept_terms_and_conditions': 'AcceptTermsAndConditions',
            'connection_arn': 'ConnectionArn'
        }

        self._accept_terms_and_conditions = accept_terms_and_conditions
        self._connection_arn = connection_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterPublisherInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterPublisherInput of this RegisterPublisherInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_terms_and_conditions(self):
        """Gets the accept_terms_and_conditions of this RegisterPublisherInput.


        :return: The accept_terms_and_conditions of this RegisterPublisherInput.
        :rtype: bool
        """
        return self._accept_terms_and_conditions

    @accept_terms_and_conditions.setter
    def accept_terms_and_conditions(self, accept_terms_and_conditions):
        """Sets the accept_terms_and_conditions of this RegisterPublisherInput.


        :param accept_terms_and_conditions: The accept_terms_and_conditions of this RegisterPublisherInput.
        :type accept_terms_and_conditions: bool
        """

        self._accept_terms_and_conditions = accept_terms_and_conditions

    @property
    def connection_arn(self):
        """Gets the connection_arn of this RegisterPublisherInput.


        :return: The connection_arn of this RegisterPublisherInput.
        :rtype: str
        """
        return self._connection_arn

    @connection_arn.setter
    def connection_arn(self, connection_arn):
        """Sets the connection_arn of this RegisterPublisherInput.


        :param connection_arn: The connection_arn of this RegisterPublisherInput.
        :type connection_arn: str
        """

        self._connection_arn = connection_arn
