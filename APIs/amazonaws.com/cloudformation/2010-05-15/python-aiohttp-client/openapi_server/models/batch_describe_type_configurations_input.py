# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchDescribeTypeConfigurationsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_configuration_identifiers: List=None):
        """BatchDescribeTypeConfigurationsInput - a model defined in OpenAPI

        :param type_configuration_identifiers: The type_configuration_identifiers of this BatchDescribeTypeConfigurationsInput.
        """
        self.openapi_types = {
            'type_configuration_identifiers': List
        }

        self.attribute_map = {
            'type_configuration_identifiers': 'TypeConfigurationIdentifiers'
        }

        self._type_configuration_identifiers = type_configuration_identifiers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDescribeTypeConfigurationsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDescribeTypeConfigurationsInput of this BatchDescribeTypeConfigurationsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_configuration_identifiers(self):
        """Gets the type_configuration_identifiers of this BatchDescribeTypeConfigurationsInput.


        :return: The type_configuration_identifiers of this BatchDescribeTypeConfigurationsInput.
        :rtype: List
        """
        return self._type_configuration_identifiers

    @type_configuration_identifiers.setter
    def type_configuration_identifiers(self, type_configuration_identifiers):
        """Sets the type_configuration_identifiers of this BatchDescribeTypeConfigurationsInput.


        :param type_configuration_identifiers: The type_configuration_identifiers of this BatchDescribeTypeConfigurationsInput.
        :type type_configuration_identifiers: List
        """
        if type_configuration_identifiers is None:
            raise ValueError("Invalid value for `type_configuration_identifiers`, must not be `None`")

        self._type_configuration_identifiers = type_configuration_identifiers
