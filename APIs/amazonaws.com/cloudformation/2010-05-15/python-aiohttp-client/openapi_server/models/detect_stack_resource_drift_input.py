# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectStackResourceDriftInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_name: str=None, logical_resource_id: str=None):
        """DetectStackResourceDriftInput - a model defined in OpenAPI

        :param stack_name: The stack_name of this DetectStackResourceDriftInput.
        :param logical_resource_id: The logical_resource_id of this DetectStackResourceDriftInput.
        """
        self.openapi_types = {
            'stack_name': str,
            'logical_resource_id': str
        }

        self.attribute_map = {
            'stack_name': 'StackName',
            'logical_resource_id': 'LogicalResourceId'
        }

        self._stack_name = stack_name
        self._logical_resource_id = logical_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectStackResourceDriftInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectStackResourceDriftInput of this DetectStackResourceDriftInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_name(self):
        """Gets the stack_name of this DetectStackResourceDriftInput.


        :return: The stack_name of this DetectStackResourceDriftInput.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this DetectStackResourceDriftInput.


        :param stack_name: The stack_name of this DetectStackResourceDriftInput.
        :type stack_name: str
        """
        if stack_name is None:
            raise ValueError("Invalid value for `stack_name`, must not be `None`")

        self._stack_name = stack_name

    @property
    def logical_resource_id(self):
        """Gets the logical_resource_id of this DetectStackResourceDriftInput.


        :return: The logical_resource_id of this DetectStackResourceDriftInput.
        :rtype: str
        """
        return self._logical_resource_id

    @logical_resource_id.setter
    def logical_resource_id(self, logical_resource_id):
        """Sets the logical_resource_id of this DetectStackResourceDriftInput.


        :param logical_resource_id: The logical_resource_id of this DetectStackResourceDriftInput.
        :type logical_resource_id: str
        """
        if logical_resource_id is None:
            raise ValueError("Invalid value for `logical_resource_id`, must not be `None`")

        self._logical_resource_id = logical_resource_id
