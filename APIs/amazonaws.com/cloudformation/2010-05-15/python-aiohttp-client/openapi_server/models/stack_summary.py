# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stack_status import StackStatus
from openapi_server.models.stack_summary_drift_information import StackSummaryDriftInformation
from openapi_server import util


class StackSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_id: str=None, stack_name: str=None, template_description: str=None, creation_time: datetime=None, last_updated_time: datetime=None, deletion_time: datetime=None, stack_status: StackStatus=None, stack_status_reason: str=None, parent_id: str=None, root_id: str=None, drift_information: StackSummaryDriftInformation=None):
        """StackSummary - a model defined in OpenAPI

        :param stack_id: The stack_id of this StackSummary.
        :param stack_name: The stack_name of this StackSummary.
        :param template_description: The template_description of this StackSummary.
        :param creation_time: The creation_time of this StackSummary.
        :param last_updated_time: The last_updated_time of this StackSummary.
        :param deletion_time: The deletion_time of this StackSummary.
        :param stack_status: The stack_status of this StackSummary.
        :param stack_status_reason: The stack_status_reason of this StackSummary.
        :param parent_id: The parent_id of this StackSummary.
        :param root_id: The root_id of this StackSummary.
        :param drift_information: The drift_information of this StackSummary.
        """
        self.openapi_types = {
            'stack_id': str,
            'stack_name': str,
            'template_description': str,
            'creation_time': datetime,
            'last_updated_time': datetime,
            'deletion_time': datetime,
            'stack_status': StackStatus,
            'stack_status_reason': str,
            'parent_id': str,
            'root_id': str,
            'drift_information': StackSummaryDriftInformation
        }

        self.attribute_map = {
            'stack_id': 'StackId',
            'stack_name': 'StackName',
            'template_description': 'TemplateDescription',
            'creation_time': 'CreationTime',
            'last_updated_time': 'LastUpdatedTime',
            'deletion_time': 'DeletionTime',
            'stack_status': 'StackStatus',
            'stack_status_reason': 'StackStatusReason',
            'parent_id': 'ParentId',
            'root_id': 'RootId',
            'drift_information': 'DriftInformation'
        }

        self._stack_id = stack_id
        self._stack_name = stack_name
        self._template_description = template_description
        self._creation_time = creation_time
        self._last_updated_time = last_updated_time
        self._deletion_time = deletion_time
        self._stack_status = stack_status
        self._stack_status_reason = stack_status_reason
        self._parent_id = parent_id
        self._root_id = root_id
        self._drift_information = drift_information

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StackSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StackSummary of this StackSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_id(self):
        """Gets the stack_id of this StackSummary.


        :return: The stack_id of this StackSummary.
        :rtype: str
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """Sets the stack_id of this StackSummary.


        :param stack_id: The stack_id of this StackSummary.
        :type stack_id: str
        """

        self._stack_id = stack_id

    @property
    def stack_name(self):
        """Gets the stack_name of this StackSummary.


        :return: The stack_name of this StackSummary.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """Sets the stack_name of this StackSummary.


        :param stack_name: The stack_name of this StackSummary.
        :type stack_name: str
        """
        if stack_name is None:
            raise ValueError("Invalid value for `stack_name`, must not be `None`")

        self._stack_name = stack_name

    @property
    def template_description(self):
        """Gets the template_description of this StackSummary.


        :return: The template_description of this StackSummary.
        :rtype: str
        """
        return self._template_description

    @template_description.setter
    def template_description(self, template_description):
        """Sets the template_description of this StackSummary.


        :param template_description: The template_description of this StackSummary.
        :type template_description: str
        """

        self._template_description = template_description

    @property
    def creation_time(self):
        """Gets the creation_time of this StackSummary.


        :return: The creation_time of this StackSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this StackSummary.


        :param creation_time: The creation_time of this StackSummary.
        :type creation_time: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this StackSummary.


        :return: The last_updated_time of this StackSummary.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this StackSummary.


        :param last_updated_time: The last_updated_time of this StackSummary.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def deletion_time(self):
        """Gets the deletion_time of this StackSummary.


        :return: The deletion_time of this StackSummary.
        :rtype: datetime
        """
        return self._deletion_time

    @deletion_time.setter
    def deletion_time(self, deletion_time):
        """Sets the deletion_time of this StackSummary.


        :param deletion_time: The deletion_time of this StackSummary.
        :type deletion_time: datetime
        """

        self._deletion_time = deletion_time

    @property
    def stack_status(self):
        """Gets the stack_status of this StackSummary.


        :return: The stack_status of this StackSummary.
        :rtype: StackStatus
        """
        return self._stack_status

    @stack_status.setter
    def stack_status(self, stack_status):
        """Sets the stack_status of this StackSummary.


        :param stack_status: The stack_status of this StackSummary.
        :type stack_status: StackStatus
        """
        if stack_status is None:
            raise ValueError("Invalid value for `stack_status`, must not be `None`")

        self._stack_status = stack_status

    @property
    def stack_status_reason(self):
        """Gets the stack_status_reason of this StackSummary.


        :return: The stack_status_reason of this StackSummary.
        :rtype: str
        """
        return self._stack_status_reason

    @stack_status_reason.setter
    def stack_status_reason(self, stack_status_reason):
        """Sets the stack_status_reason of this StackSummary.


        :param stack_status_reason: The stack_status_reason of this StackSummary.
        :type stack_status_reason: str
        """

        self._stack_status_reason = stack_status_reason

    @property
    def parent_id(self):
        """Gets the parent_id of this StackSummary.


        :return: The parent_id of this StackSummary.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this StackSummary.


        :param parent_id: The parent_id of this StackSummary.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def root_id(self):
        """Gets the root_id of this StackSummary.


        :return: The root_id of this StackSummary.
        :rtype: str
        """
        return self._root_id

    @root_id.setter
    def root_id(self, root_id):
        """Sets the root_id of this StackSummary.


        :param root_id: The root_id of this StackSummary.
        :type root_id: str
        """

        self._root_id = root_id

    @property
    def drift_information(self):
        """Gets the drift_information of this StackSummary.


        :return: The drift_information of this StackSummary.
        :rtype: StackSummaryDriftInformation
        """
        return self._drift_information

    @drift_information.setter
    def drift_information(self, drift_information):
        """Sets the drift_information of this StackSummary.


        :param drift_information: The drift_information of this StackSummary.
        :type drift_information: StackSummaryDriftInformation
        """

        self._drift_information = drift_information
