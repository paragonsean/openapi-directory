# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stack_set_drift_detection_status import StackSetDriftDetectionStatus
from openapi_server.models.stack_set_drift_status import StackSetDriftStatus
from openapi_server import util


class StackSetStackSetDriftDetectionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, drift_status: StackSetDriftStatus=None, drift_detection_status: StackSetDriftDetectionStatus=None, last_drift_check_timestamp: datetime=None, total_stack_instances_count: int=None, drifted_stack_instances_count: int=None, in_sync_stack_instances_count: int=None, in_progress_stack_instances_count: int=None, failed_stack_instances_count: int=None):
        """StackSetStackSetDriftDetectionDetails - a model defined in OpenAPI

        :param drift_status: The drift_status of this StackSetStackSetDriftDetectionDetails.
        :param drift_detection_status: The drift_detection_status of this StackSetStackSetDriftDetectionDetails.
        :param last_drift_check_timestamp: The last_drift_check_timestamp of this StackSetStackSetDriftDetectionDetails.
        :param total_stack_instances_count: The total_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :param drifted_stack_instances_count: The drifted_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :param in_sync_stack_instances_count: The in_sync_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :param in_progress_stack_instances_count: The in_progress_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :param failed_stack_instances_count: The failed_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        """
        self.openapi_types = {
            'drift_status': StackSetDriftStatus,
            'drift_detection_status': StackSetDriftDetectionStatus,
            'last_drift_check_timestamp': datetime,
            'total_stack_instances_count': int,
            'drifted_stack_instances_count': int,
            'in_sync_stack_instances_count': int,
            'in_progress_stack_instances_count': int,
            'failed_stack_instances_count': int
        }

        self.attribute_map = {
            'drift_status': 'DriftStatus',
            'drift_detection_status': 'DriftDetectionStatus',
            'last_drift_check_timestamp': 'LastDriftCheckTimestamp',
            'total_stack_instances_count': 'TotalStackInstancesCount',
            'drifted_stack_instances_count': 'DriftedStackInstancesCount',
            'in_sync_stack_instances_count': 'InSyncStackInstancesCount',
            'in_progress_stack_instances_count': 'InProgressStackInstancesCount',
            'failed_stack_instances_count': 'FailedStackInstancesCount'
        }

        self._drift_status = drift_status
        self._drift_detection_status = drift_detection_status
        self._last_drift_check_timestamp = last_drift_check_timestamp
        self._total_stack_instances_count = total_stack_instances_count
        self._drifted_stack_instances_count = drifted_stack_instances_count
        self._in_sync_stack_instances_count = in_sync_stack_instances_count
        self._in_progress_stack_instances_count = in_progress_stack_instances_count
        self._failed_stack_instances_count = failed_stack_instances_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StackSetStackSetDriftDetectionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StackSet_StackSetDriftDetectionDetails of this StackSetStackSetDriftDetectionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drift_status(self):
        """Gets the drift_status of this StackSetStackSetDriftDetectionDetails.


        :return: The drift_status of this StackSetStackSetDriftDetectionDetails.
        :rtype: StackSetDriftStatus
        """
        return self._drift_status

    @drift_status.setter
    def drift_status(self, drift_status):
        """Sets the drift_status of this StackSetStackSetDriftDetectionDetails.


        :param drift_status: The drift_status of this StackSetStackSetDriftDetectionDetails.
        :type drift_status: StackSetDriftStatus
        """

        self._drift_status = drift_status

    @property
    def drift_detection_status(self):
        """Gets the drift_detection_status of this StackSetStackSetDriftDetectionDetails.


        :return: The drift_detection_status of this StackSetStackSetDriftDetectionDetails.
        :rtype: StackSetDriftDetectionStatus
        """
        return self._drift_detection_status

    @drift_detection_status.setter
    def drift_detection_status(self, drift_detection_status):
        """Sets the drift_detection_status of this StackSetStackSetDriftDetectionDetails.


        :param drift_detection_status: The drift_detection_status of this StackSetStackSetDriftDetectionDetails.
        :type drift_detection_status: StackSetDriftDetectionStatus
        """

        self._drift_detection_status = drift_detection_status

    @property
    def last_drift_check_timestamp(self):
        """Gets the last_drift_check_timestamp of this StackSetStackSetDriftDetectionDetails.


        :return: The last_drift_check_timestamp of this StackSetStackSetDriftDetectionDetails.
        :rtype: datetime
        """
        return self._last_drift_check_timestamp

    @last_drift_check_timestamp.setter
    def last_drift_check_timestamp(self, last_drift_check_timestamp):
        """Sets the last_drift_check_timestamp of this StackSetStackSetDriftDetectionDetails.


        :param last_drift_check_timestamp: The last_drift_check_timestamp of this StackSetStackSetDriftDetectionDetails.
        :type last_drift_check_timestamp: datetime
        """

        self._last_drift_check_timestamp = last_drift_check_timestamp

    @property
    def total_stack_instances_count(self):
        """Gets the total_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :return: The total_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :rtype: int
        """
        return self._total_stack_instances_count

    @total_stack_instances_count.setter
    def total_stack_instances_count(self, total_stack_instances_count):
        """Sets the total_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :param total_stack_instances_count: The total_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :type total_stack_instances_count: int
        """

        self._total_stack_instances_count = total_stack_instances_count

    @property
    def drifted_stack_instances_count(self):
        """Gets the drifted_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :return: The drifted_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :rtype: int
        """
        return self._drifted_stack_instances_count

    @drifted_stack_instances_count.setter
    def drifted_stack_instances_count(self, drifted_stack_instances_count):
        """Sets the drifted_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :param drifted_stack_instances_count: The drifted_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :type drifted_stack_instances_count: int
        """

        self._drifted_stack_instances_count = drifted_stack_instances_count

    @property
    def in_sync_stack_instances_count(self):
        """Gets the in_sync_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :return: The in_sync_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :rtype: int
        """
        return self._in_sync_stack_instances_count

    @in_sync_stack_instances_count.setter
    def in_sync_stack_instances_count(self, in_sync_stack_instances_count):
        """Sets the in_sync_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :param in_sync_stack_instances_count: The in_sync_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :type in_sync_stack_instances_count: int
        """

        self._in_sync_stack_instances_count = in_sync_stack_instances_count

    @property
    def in_progress_stack_instances_count(self):
        """Gets the in_progress_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :return: The in_progress_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :rtype: int
        """
        return self._in_progress_stack_instances_count

    @in_progress_stack_instances_count.setter
    def in_progress_stack_instances_count(self, in_progress_stack_instances_count):
        """Sets the in_progress_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :param in_progress_stack_instances_count: The in_progress_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :type in_progress_stack_instances_count: int
        """

        self._in_progress_stack_instances_count = in_progress_stack_instances_count

    @property
    def failed_stack_instances_count(self):
        """Gets the failed_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :return: The failed_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :rtype: int
        """
        return self._failed_stack_instances_count

    @failed_stack_instances_count.setter
    def failed_stack_instances_count(self, failed_stack_instances_count):
        """Sets the failed_stack_instances_count of this StackSetStackSetDriftDetectionDetails.


        :param failed_stack_instances_count: The failed_stack_instances_count of this StackSetStackSetDriftDetectionDetails.
        :type failed_stack_instances_count: int
        """

        self._failed_stack_instances_count = failed_stack_instances_count
