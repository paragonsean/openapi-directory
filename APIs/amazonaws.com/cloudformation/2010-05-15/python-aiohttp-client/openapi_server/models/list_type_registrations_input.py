# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registration_status import RegistrationStatus
from openapi_server.models.registry_type import RegistryType
from openapi_server import util


class ListTypeRegistrationsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: RegistryType=None, type_name: str=None, type_arn: str=None, registration_status_filter: RegistrationStatus=None, max_results: int=None, next_token: str=None):
        """ListTypeRegistrationsInput - a model defined in OpenAPI

        :param type: The type of this ListTypeRegistrationsInput.
        :param type_name: The type_name of this ListTypeRegistrationsInput.
        :param type_arn: The type_arn of this ListTypeRegistrationsInput.
        :param registration_status_filter: The registration_status_filter of this ListTypeRegistrationsInput.
        :param max_results: The max_results of this ListTypeRegistrationsInput.
        :param next_token: The next_token of this ListTypeRegistrationsInput.
        """
        self.openapi_types = {
            'type': RegistryType,
            'type_name': str,
            'type_arn': str,
            'registration_status_filter': RegistrationStatus,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'type': 'Type',
            'type_name': 'TypeName',
            'type_arn': 'TypeArn',
            'registration_status_filter': 'RegistrationStatusFilter',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._type = type
        self._type_name = type_name
        self._type_arn = type_arn
        self._registration_status_filter = registration_status_filter
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTypeRegistrationsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTypeRegistrationsInput of this ListTypeRegistrationsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ListTypeRegistrationsInput.


        :return: The type of this ListTypeRegistrationsInput.
        :rtype: RegistryType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListTypeRegistrationsInput.


        :param type: The type of this ListTypeRegistrationsInput.
        :type type: RegistryType
        """

        self._type = type

    @property
    def type_name(self):
        """Gets the type_name of this ListTypeRegistrationsInput.


        :return: The type_name of this ListTypeRegistrationsInput.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this ListTypeRegistrationsInput.


        :param type_name: The type_name of this ListTypeRegistrationsInput.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def type_arn(self):
        """Gets the type_arn of this ListTypeRegistrationsInput.


        :return: The type_arn of this ListTypeRegistrationsInput.
        :rtype: str
        """
        return self._type_arn

    @type_arn.setter
    def type_arn(self, type_arn):
        """Sets the type_arn of this ListTypeRegistrationsInput.


        :param type_arn: The type_arn of this ListTypeRegistrationsInput.
        :type type_arn: str
        """

        self._type_arn = type_arn

    @property
    def registration_status_filter(self):
        """Gets the registration_status_filter of this ListTypeRegistrationsInput.


        :return: The registration_status_filter of this ListTypeRegistrationsInput.
        :rtype: RegistrationStatus
        """
        return self._registration_status_filter

    @registration_status_filter.setter
    def registration_status_filter(self, registration_status_filter):
        """Sets the registration_status_filter of this ListTypeRegistrationsInput.


        :param registration_status_filter: The registration_status_filter of this ListTypeRegistrationsInput.
        :type registration_status_filter: RegistrationStatus
        """

        self._registration_status_filter = registration_status_filter

    @property
    def max_results(self):
        """Gets the max_results of this ListTypeRegistrationsInput.


        :return: The max_results of this ListTypeRegistrationsInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTypeRegistrationsInput.


        :param max_results: The max_results of this ListTypeRegistrationsInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListTypeRegistrationsInput.


        :return: The next_token of this ListTypeRegistrationsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTypeRegistrationsInput.


        :param next_token: The next_token of this ListTypeRegistrationsInput.
        :type next_token: str
        """

        self._next_token = next_token
