# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category import Category
from openapi_server import util


class TypeFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: Category=None, publisher_id: str=None, type_name_prefix: str=None):
        """TypeFilters - a model defined in OpenAPI

        :param category: The category of this TypeFilters.
        :param publisher_id: The publisher_id of this TypeFilters.
        :param type_name_prefix: The type_name_prefix of this TypeFilters.
        """
        self.openapi_types = {
            'category': Category,
            'publisher_id': str,
            'type_name_prefix': str
        }

        self.attribute_map = {
            'category': 'Category',
            'publisher_id': 'PublisherId',
            'type_name_prefix': 'TypeNamePrefix'
        }

        self._category = category
        self._publisher_id = publisher_id
        self._type_name_prefix = type_name_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TypeFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TypeFilters of this TypeFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this TypeFilters.


        :return: The category of this TypeFilters.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TypeFilters.


        :param category: The category of this TypeFilters.
        :type category: Category
        """

        self._category = category

    @property
    def publisher_id(self):
        """Gets the publisher_id of this TypeFilters.


        :return: The publisher_id of this TypeFilters.
        :rtype: str
        """
        return self._publisher_id

    @publisher_id.setter
    def publisher_id(self, publisher_id):
        """Sets the publisher_id of this TypeFilters.


        :param publisher_id: The publisher_id of this TypeFilters.
        :type publisher_id: str
        """

        self._publisher_id = publisher_id

    @property
    def type_name_prefix(self):
        """Gets the type_name_prefix of this TypeFilters.


        :return: The type_name_prefix of this TypeFilters.
        :rtype: str
        """
        return self._type_name_prefix

    @type_name_prefix.setter
    def type_name_prefix(self, type_name_prefix):
        """Sets the type_name_prefix of this TypeFilters.


        :param type_name_prefix: The type_name_prefix of this TypeFilters.
        :type type_name_prefix: str
        """

        self._type_name_prefix = type_name_prefix
