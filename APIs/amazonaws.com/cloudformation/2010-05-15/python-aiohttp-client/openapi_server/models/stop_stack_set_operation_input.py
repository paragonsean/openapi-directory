# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call_as import CallAs
from openapi_server import util


class StopStackSetOperationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_set_name: str=None, operation_id: str=None, call_as: CallAs=None):
        """StopStackSetOperationInput - a model defined in OpenAPI

        :param stack_set_name: The stack_set_name of this StopStackSetOperationInput.
        :param operation_id: The operation_id of this StopStackSetOperationInput.
        :param call_as: The call_as of this StopStackSetOperationInput.
        """
        self.openapi_types = {
            'stack_set_name': str,
            'operation_id': str,
            'call_as': CallAs
        }

        self.attribute_map = {
            'stack_set_name': 'StackSetName',
            'operation_id': 'OperationId',
            'call_as': 'CallAs'
        }

        self._stack_set_name = stack_set_name
        self._operation_id = operation_id
        self._call_as = call_as

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopStackSetOperationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopStackSetOperationInput of this StopStackSetOperationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_set_name(self):
        """Gets the stack_set_name of this StopStackSetOperationInput.


        :return: The stack_set_name of this StopStackSetOperationInput.
        :rtype: str
        """
        return self._stack_set_name

    @stack_set_name.setter
    def stack_set_name(self, stack_set_name):
        """Sets the stack_set_name of this StopStackSetOperationInput.


        :param stack_set_name: The stack_set_name of this StopStackSetOperationInput.
        :type stack_set_name: str
        """
        if stack_set_name is None:
            raise ValueError("Invalid value for `stack_set_name`, must not be `None`")

        self._stack_set_name = stack_set_name

    @property
    def operation_id(self):
        """Gets the operation_id of this StopStackSetOperationInput.


        :return: The operation_id of this StopStackSetOperationInput.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this StopStackSetOperationInput.


        :param operation_id: The operation_id of this StopStackSetOperationInput.
        :type operation_id: str
        """
        if operation_id is None:
            raise ValueError("Invalid value for `operation_id`, must not be `None`")

        self._operation_id = operation_id

    @property
    def call_as(self):
        """Gets the call_as of this StopStackSetOperationInput.


        :return: The call_as of this StopStackSetOperationInput.
        :rtype: CallAs
        """
        return self._call_as

    @call_as.setter
    def call_as(self, call_as):
        """Sets the call_as of this StopStackSetOperationInput.


        :param call_as: The call_as of this StopStackSetOperationInput.
        :type call_as: CallAs
        """

        self._call_as = call_as
