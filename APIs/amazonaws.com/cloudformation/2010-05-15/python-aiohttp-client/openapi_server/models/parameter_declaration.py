# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_declaration_parameter_constraints import ParameterDeclarationParameterConstraints
from openapi_server import util


class ParameterDeclaration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_key: str=None, default_value: str=None, parameter_type: str=None, no_echo: bool=None, description: str=None, parameter_constraints: ParameterDeclarationParameterConstraints=None):
        """ParameterDeclaration - a model defined in OpenAPI

        :param parameter_key: The parameter_key of this ParameterDeclaration.
        :param default_value: The default_value of this ParameterDeclaration.
        :param parameter_type: The parameter_type of this ParameterDeclaration.
        :param no_echo: The no_echo of this ParameterDeclaration.
        :param description: The description of this ParameterDeclaration.
        :param parameter_constraints: The parameter_constraints of this ParameterDeclaration.
        """
        self.openapi_types = {
            'parameter_key': str,
            'default_value': str,
            'parameter_type': str,
            'no_echo': bool,
            'description': str,
            'parameter_constraints': ParameterDeclarationParameterConstraints
        }

        self.attribute_map = {
            'parameter_key': 'ParameterKey',
            'default_value': 'DefaultValue',
            'parameter_type': 'ParameterType',
            'no_echo': 'NoEcho',
            'description': 'Description',
            'parameter_constraints': 'ParameterConstraints'
        }

        self._parameter_key = parameter_key
        self._default_value = default_value
        self._parameter_type = parameter_type
        self._no_echo = no_echo
        self._description = description
        self._parameter_constraints = parameter_constraints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParameterDeclaration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParameterDeclaration of this ParameterDeclaration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_key(self):
        """Gets the parameter_key of this ParameterDeclaration.


        :return: The parameter_key of this ParameterDeclaration.
        :rtype: str
        """
        return self._parameter_key

    @parameter_key.setter
    def parameter_key(self, parameter_key):
        """Sets the parameter_key of this ParameterDeclaration.


        :param parameter_key: The parameter_key of this ParameterDeclaration.
        :type parameter_key: str
        """

        self._parameter_key = parameter_key

    @property
    def default_value(self):
        """Gets the default_value of this ParameterDeclaration.


        :return: The default_value of this ParameterDeclaration.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this ParameterDeclaration.


        :param default_value: The default_value of this ParameterDeclaration.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def parameter_type(self):
        """Gets the parameter_type of this ParameterDeclaration.


        :return: The parameter_type of this ParameterDeclaration.
        :rtype: str
        """
        return self._parameter_type

    @parameter_type.setter
    def parameter_type(self, parameter_type):
        """Sets the parameter_type of this ParameterDeclaration.


        :param parameter_type: The parameter_type of this ParameterDeclaration.
        :type parameter_type: str
        """

        self._parameter_type = parameter_type

    @property
    def no_echo(self):
        """Gets the no_echo of this ParameterDeclaration.


        :return: The no_echo of this ParameterDeclaration.
        :rtype: bool
        """
        return self._no_echo

    @no_echo.setter
    def no_echo(self, no_echo):
        """Sets the no_echo of this ParameterDeclaration.


        :param no_echo: The no_echo of this ParameterDeclaration.
        :type no_echo: bool
        """

        self._no_echo = no_echo

    @property
    def description(self):
        """Gets the description of this ParameterDeclaration.


        :return: The description of this ParameterDeclaration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ParameterDeclaration.


        :param description: The description of this ParameterDeclaration.
        :type description: str
        """

        self._description = description

    @property
    def parameter_constraints(self):
        """Gets the parameter_constraints of this ParameterDeclaration.


        :return: The parameter_constraints of this ParameterDeclaration.
        :rtype: ParameterDeclarationParameterConstraints
        """
        return self._parameter_constraints

    @parameter_constraints.setter
    def parameter_constraints(self, parameter_constraints):
        """Sets the parameter_constraints of this ParameterDeclaration.


        :param parameter_constraints: The parameter_constraints of this ParameterDeclaration.
        :type parameter_constraints: ParameterDeclarationParameterConstraints
        """

        self._parameter_constraints = parameter_constraints
