# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call_as import CallAs
from openapi_server import util


class ListStackSetOperationResultsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stack_set_name: str=None, operation_id: str=None, next_token: str=None, max_results: int=None, call_as: CallAs=None, filters: List=None):
        """ListStackSetOperationResultsInput - a model defined in OpenAPI

        :param stack_set_name: The stack_set_name of this ListStackSetOperationResultsInput.
        :param operation_id: The operation_id of this ListStackSetOperationResultsInput.
        :param next_token: The next_token of this ListStackSetOperationResultsInput.
        :param max_results: The max_results of this ListStackSetOperationResultsInput.
        :param call_as: The call_as of this ListStackSetOperationResultsInput.
        :param filters: The filters of this ListStackSetOperationResultsInput.
        """
        self.openapi_types = {
            'stack_set_name': str,
            'operation_id': str,
            'next_token': str,
            'max_results': int,
            'call_as': CallAs,
            'filters': List
        }

        self.attribute_map = {
            'stack_set_name': 'StackSetName',
            'operation_id': 'OperationId',
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'call_as': 'CallAs',
            'filters': 'Filters'
        }

        self._stack_set_name = stack_set_name
        self._operation_id = operation_id
        self._next_token = next_token
        self._max_results = max_results
        self._call_as = call_as
        self._filters = filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListStackSetOperationResultsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListStackSetOperationResultsInput of this ListStackSetOperationResultsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stack_set_name(self):
        """Gets the stack_set_name of this ListStackSetOperationResultsInput.


        :return: The stack_set_name of this ListStackSetOperationResultsInput.
        :rtype: str
        """
        return self._stack_set_name

    @stack_set_name.setter
    def stack_set_name(self, stack_set_name):
        """Sets the stack_set_name of this ListStackSetOperationResultsInput.


        :param stack_set_name: The stack_set_name of this ListStackSetOperationResultsInput.
        :type stack_set_name: str
        """
        if stack_set_name is None:
            raise ValueError("Invalid value for `stack_set_name`, must not be `None`")

        self._stack_set_name = stack_set_name

    @property
    def operation_id(self):
        """Gets the operation_id of this ListStackSetOperationResultsInput.


        :return: The operation_id of this ListStackSetOperationResultsInput.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this ListStackSetOperationResultsInput.


        :param operation_id: The operation_id of this ListStackSetOperationResultsInput.
        :type operation_id: str
        """
        if operation_id is None:
            raise ValueError("Invalid value for `operation_id`, must not be `None`")

        self._operation_id = operation_id

    @property
    def next_token(self):
        """Gets the next_token of this ListStackSetOperationResultsInput.


        :return: The next_token of this ListStackSetOperationResultsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListStackSetOperationResultsInput.


        :param next_token: The next_token of this ListStackSetOperationResultsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListStackSetOperationResultsInput.


        :return: The max_results of this ListStackSetOperationResultsInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListStackSetOperationResultsInput.


        :param max_results: The max_results of this ListStackSetOperationResultsInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def call_as(self):
        """Gets the call_as of this ListStackSetOperationResultsInput.


        :return: The call_as of this ListStackSetOperationResultsInput.
        :rtype: CallAs
        """
        return self._call_as

    @call_as.setter
    def call_as(self, call_as):
        """Sets the call_as of this ListStackSetOperationResultsInput.


        :param call_as: The call_as of this ListStackSetOperationResultsInput.
        :type call_as: CallAs
        """

        self._call_as = call_as

    @property
    def filters(self):
        """Gets the filters of this ListStackSetOperationResultsInput.


        :return: The filters of this ListStackSetOperationResultsInput.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListStackSetOperationResultsInput.


        :param filters: The filters of this ListStackSetOperationResultsInput.
        :type filters: List
        """

        self._filters = filters
