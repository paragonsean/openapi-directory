# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.register_type_input_logging_config import RegisterTypeInputLoggingConfig
from openapi_server.models.registry_type import RegistryType
from openapi_server import util


class RegisterTypeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: RegistryType=None, type_name: str=None, schema_handler_package: str=None, logging_config: RegisterTypeInputLoggingConfig=None, execution_role_arn: str=None, client_request_token: str=None):
        """RegisterTypeInput - a model defined in OpenAPI

        :param type: The type of this RegisterTypeInput.
        :param type_name: The type_name of this RegisterTypeInput.
        :param schema_handler_package: The schema_handler_package of this RegisterTypeInput.
        :param logging_config: The logging_config of this RegisterTypeInput.
        :param execution_role_arn: The execution_role_arn of this RegisterTypeInput.
        :param client_request_token: The client_request_token of this RegisterTypeInput.
        """
        self.openapi_types = {
            'type': RegistryType,
            'type_name': str,
            'schema_handler_package': str,
            'logging_config': RegisterTypeInputLoggingConfig,
            'execution_role_arn': str,
            'client_request_token': str
        }

        self.attribute_map = {
            'type': 'Type',
            'type_name': 'TypeName',
            'schema_handler_package': 'SchemaHandlerPackage',
            'logging_config': 'LoggingConfig',
            'execution_role_arn': 'ExecutionRoleArn',
            'client_request_token': 'ClientRequestToken'
        }

        self._type = type
        self._type_name = type_name
        self._schema_handler_package = schema_handler_package
        self._logging_config = logging_config
        self._execution_role_arn = execution_role_arn
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterTypeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterTypeInput of this RegisterTypeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RegisterTypeInput.


        :return: The type of this RegisterTypeInput.
        :rtype: RegistryType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RegisterTypeInput.


        :param type: The type of this RegisterTypeInput.
        :type type: RegistryType
        """

        self._type = type

    @property
    def type_name(self):
        """Gets the type_name of this RegisterTypeInput.


        :return: The type_name of this RegisterTypeInput.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this RegisterTypeInput.


        :param type_name: The type_name of this RegisterTypeInput.
        :type type_name: str
        """
        if type_name is None:
            raise ValueError("Invalid value for `type_name`, must not be `None`")

        self._type_name = type_name

    @property
    def schema_handler_package(self):
        """Gets the schema_handler_package of this RegisterTypeInput.


        :return: The schema_handler_package of this RegisterTypeInput.
        :rtype: str
        """
        return self._schema_handler_package

    @schema_handler_package.setter
    def schema_handler_package(self, schema_handler_package):
        """Sets the schema_handler_package of this RegisterTypeInput.


        :param schema_handler_package: The schema_handler_package of this RegisterTypeInput.
        :type schema_handler_package: str
        """
        if schema_handler_package is None:
            raise ValueError("Invalid value for `schema_handler_package`, must not be `None`")

        self._schema_handler_package = schema_handler_package

    @property
    def logging_config(self):
        """Gets the logging_config of this RegisterTypeInput.


        :return: The logging_config of this RegisterTypeInput.
        :rtype: RegisterTypeInputLoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this RegisterTypeInput.


        :param logging_config: The logging_config of this RegisterTypeInput.
        :type logging_config: RegisterTypeInputLoggingConfig
        """

        self._logging_config = logging_config

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this RegisterTypeInput.


        :return: The execution_role_arn of this RegisterTypeInput.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this RegisterTypeInput.


        :param execution_role_arn: The execution_role_arn of this RegisterTypeInput.
        :type execution_role_arn: str
        """

        self._execution_role_arn = execution_role_arn

    @property
    def client_request_token(self):
        """Gets the client_request_token of this RegisterTypeInput.


        :return: The client_request_token of this RegisterTypeInput.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this RegisterTypeInput.


        :param client_request_token: The client_request_token of this RegisterTypeInput.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token
