/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCloudFormation);
  }
}(this, function(expect, AwsCloudFormation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCloudFormation.Stack();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Stack', function() {
    it('should create an instance of Stack', function() {
      // uncomment below and update the code to test Stack
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be.a(AwsCloudFormation.Stack);
    });

    it('should have the property stackId (base name: "StackId")', function() {
      // uncomment below and update the code to test the property stackId
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property stackName (base name: "StackName")', function() {
      // uncomment below and update the code to test the property stackName
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property changeSetId (base name: "ChangeSetId")', function() {
      // uncomment below and update the code to test the property changeSetId
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "Parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "CreationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property deletionTime (base name: "DeletionTime")', function() {
      // uncomment below and update the code to test the property deletionTime
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdatedTime (base name: "LastUpdatedTime")', function() {
      // uncomment below and update the code to test the property lastUpdatedTime
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property rollbackConfiguration (base name: "RollbackConfiguration")', function() {
      // uncomment below and update the code to test the property rollbackConfiguration
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property stackStatus (base name: "StackStatus")', function() {
      // uncomment below and update the code to test the property stackStatus
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property stackStatusReason (base name: "StackStatusReason")', function() {
      // uncomment below and update the code to test the property stackStatusReason
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property disableRollback (base name: "DisableRollback")', function() {
      // uncomment below and update the code to test the property disableRollback
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property notificationARNs (base name: "NotificationARNs")', function() {
      // uncomment below and update the code to test the property notificationARNs
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property timeoutInMinutes (base name: "TimeoutInMinutes")', function() {
      // uncomment below and update the code to test the property timeoutInMinutes
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property capabilities (base name: "Capabilities")', function() {
      // uncomment below and update the code to test the property capabilities
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property outputs (base name: "Outputs")', function() {
      // uncomment below and update the code to test the property outputs
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property roleARN (base name: "RoleARN")', function() {
      // uncomment below and update the code to test the property roleARN
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property enableTerminationProtection (base name: "EnableTerminationProtection")', function() {
      // uncomment below and update the code to test the property enableTerminationProtection
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "ParentId")', function() {
      // uncomment below and update the code to test the property parentId
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property rootId (base name: "RootId")', function() {
      // uncomment below and update the code to test the property rootId
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property driftInformation (base name: "DriftInformation")', function() {
      // uncomment below and update the code to test the property driftInformation
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

    it('should have the property retainExceptOnCreate (base name: "RetainExceptOnCreate")', function() {
      // uncomment below and update the code to test the property retainExceptOnCreate
      //var instance = new AwsCloudFormation.Stack();
      //expect(instance).to.be();
    });

  });

}));
