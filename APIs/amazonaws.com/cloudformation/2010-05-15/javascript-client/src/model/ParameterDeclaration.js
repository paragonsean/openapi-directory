/**
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterDeclarationParameterConstraints from './ParameterDeclarationParameterConstraints';

/**
 * The ParameterDeclaration model module.
 * @module model/ParameterDeclaration
 * @version 2010-05-15
 */
class ParameterDeclaration {
    /**
     * Constructs a new <code>ParameterDeclaration</code>.
     * The ParameterDeclaration data type.
     * @alias module:model/ParameterDeclaration
     */
    constructor() { 
        
        ParameterDeclaration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParameterDeclaration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParameterDeclaration} obj Optional instance to populate.
     * @return {module:model/ParameterDeclaration} The populated <code>ParameterDeclaration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParameterDeclaration();

            if (data.hasOwnProperty('ParameterKey')) {
                obj['ParameterKey'] = ApiClient.convertToType(data['ParameterKey'], 'String');
            }
            if (data.hasOwnProperty('DefaultValue')) {
                obj['DefaultValue'] = ApiClient.convertToType(data['DefaultValue'], 'String');
            }
            if (data.hasOwnProperty('ParameterType')) {
                obj['ParameterType'] = ApiClient.convertToType(data['ParameterType'], 'String');
            }
            if (data.hasOwnProperty('NoEcho')) {
                obj['NoEcho'] = ApiClient.convertToType(data['NoEcho'], 'Boolean');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('ParameterConstraints')) {
                obj['ParameterConstraints'] = ParameterDeclarationParameterConstraints.constructFromObject(data['ParameterConstraints']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParameterDeclaration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParameterDeclaration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ParameterKey`
        if (data['ParameterKey']) { // data not null
          String.validateJSON(data['ParameterKey']);
        }
        // validate the optional field `DefaultValue`
        if (data['DefaultValue']) { // data not null
          String.validateJSON(data['DefaultValue']);
        }
        // validate the optional field `ParameterType`
        if (data['ParameterType']) { // data not null
          String.validateJSON(data['ParameterType']);
        }
        // validate the optional field `NoEcho`
        if (data['NoEcho']) { // data not null
          Boolean.validateJSON(data['NoEcho']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `ParameterConstraints`
        if (data['ParameterConstraints']) { // data not null
          ParameterDeclarationParameterConstraints.validateJSON(data['ParameterConstraints']);
        }

        return true;
    }


}



/**
 * @member {String} ParameterKey
 */
ParameterDeclaration.prototype['ParameterKey'] = undefined;

/**
 * @member {String} DefaultValue
 */
ParameterDeclaration.prototype['DefaultValue'] = undefined;

/**
 * @member {String} ParameterType
 */
ParameterDeclaration.prototype['ParameterType'] = undefined;

/**
 * @member {Boolean} NoEcho
 */
ParameterDeclaration.prototype['NoEcho'] = undefined;

/**
 * @member {String} Description
 */
ParameterDeclaration.prototype['Description'] = undefined;

/**
 * @member {module:model/ParameterDeclarationParameterConstraints} ParameterConstraints
 */
ParameterDeclaration.prototype['ParameterConstraints'] = undefined;






export default ParameterDeclaration;

