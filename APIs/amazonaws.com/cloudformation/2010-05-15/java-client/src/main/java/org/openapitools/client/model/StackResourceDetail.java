/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ResourceChangeModuleInfo;
import org.openapitools.client.model.ResourceStatus;
import org.openapitools.client.model.StackResourceDetailDriftInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains detailed information about the specified stack resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackResourceDetail {
  public static final String SERIALIZED_NAME_STACK_NAME = "StackName";
  @SerializedName(SERIALIZED_NAME_STACK_NAME)
  private String stackName;

  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_LOGICAL_RESOURCE_ID = "LogicalResourceId";
  @SerializedName(SERIALIZED_NAME_LOGICAL_RESOURCE_ID)
  private String logicalResourceId;

  public static final String SERIALIZED_NAME_PHYSICAL_RESOURCE_ID = "PhysicalResourceId";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_RESOURCE_ID)
  private String physicalResourceId;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "LastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  private OffsetDateTime lastUpdatedTimestamp;

  public static final String SERIALIZED_NAME_RESOURCE_STATUS = "ResourceStatus";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATUS)
  private ResourceStatus resourceStatus;

  public static final String SERIALIZED_NAME_RESOURCE_STATUS_REASON = "ResourceStatusReason";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATUS_REASON)
  private String resourceStatusReason;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_DRIFT_INFORMATION = "DriftInformation";
  @SerializedName(SERIALIZED_NAME_DRIFT_INFORMATION)
  private StackResourceDetailDriftInformation driftInformation;

  public static final String SERIALIZED_NAME_MODULE_INFO = "ModuleInfo";
  @SerializedName(SERIALIZED_NAME_MODULE_INFO)
  private ResourceChangeModuleInfo moduleInfo;

  public StackResourceDetail() {
  }

  public StackResourceDetail stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

  /**
   * Get stackName
   * @return stackName
   */
  @javax.annotation.Nullable
  public String getStackName() {
    return stackName;
  }

  public void setStackName(String stackName) {
    this.stackName = stackName;
  }


  public StackResourceDetail stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nullable
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public StackResourceDetail logicalResourceId(String logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
    return this;
  }

  /**
   * Get logicalResourceId
   * @return logicalResourceId
   */
  @javax.annotation.Nonnull
  public String getLogicalResourceId() {
    return logicalResourceId;
  }

  public void setLogicalResourceId(String logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
  }


  public StackResourceDetail physicalResourceId(String physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
    return this;
  }

  /**
   * Get physicalResourceId
   * @return physicalResourceId
   */
  @javax.annotation.Nullable
  public String getPhysicalResourceId() {
    return physicalResourceId;
  }

  public void setPhysicalResourceId(String physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
  }


  public StackResourceDetail resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public StackResourceDetail lastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * Get lastUpdatedTimestamp
   * @return lastUpdatedTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }


  public StackResourceDetail resourceStatus(ResourceStatus resourceStatus) {
    this.resourceStatus = resourceStatus;
    return this;
  }

  /**
   * Get resourceStatus
   * @return resourceStatus
   */
  @javax.annotation.Nonnull
  public ResourceStatus getResourceStatus() {
    return resourceStatus;
  }

  public void setResourceStatus(ResourceStatus resourceStatus) {
    this.resourceStatus = resourceStatus;
  }


  public StackResourceDetail resourceStatusReason(String resourceStatusReason) {
    this.resourceStatusReason = resourceStatusReason;
    return this;
  }

  /**
   * Get resourceStatusReason
   * @return resourceStatusReason
   */
  @javax.annotation.Nullable
  public String getResourceStatusReason() {
    return resourceStatusReason;
  }

  public void setResourceStatusReason(String resourceStatusReason) {
    this.resourceStatusReason = resourceStatusReason;
  }


  public StackResourceDetail description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public StackResourceDetail metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public StackResourceDetail driftInformation(StackResourceDetailDriftInformation driftInformation) {
    this.driftInformation = driftInformation;
    return this;
  }

  /**
   * Get driftInformation
   * @return driftInformation
   */
  @javax.annotation.Nullable
  public StackResourceDetailDriftInformation getDriftInformation() {
    return driftInformation;
  }

  public void setDriftInformation(StackResourceDetailDriftInformation driftInformation) {
    this.driftInformation = driftInformation;
  }


  public StackResourceDetail moduleInfo(ResourceChangeModuleInfo moduleInfo) {
    this.moduleInfo = moduleInfo;
    return this;
  }

  /**
   * Get moduleInfo
   * @return moduleInfo
   */
  @javax.annotation.Nullable
  public ResourceChangeModuleInfo getModuleInfo() {
    return moduleInfo;
  }

  public void setModuleInfo(ResourceChangeModuleInfo moduleInfo) {
    this.moduleInfo = moduleInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackResourceDetail stackResourceDetail = (StackResourceDetail) o;
    return Objects.equals(this.stackName, stackResourceDetail.stackName) &&
        Objects.equals(this.stackId, stackResourceDetail.stackId) &&
        Objects.equals(this.logicalResourceId, stackResourceDetail.logicalResourceId) &&
        Objects.equals(this.physicalResourceId, stackResourceDetail.physicalResourceId) &&
        Objects.equals(this.resourceType, stackResourceDetail.resourceType) &&
        Objects.equals(this.lastUpdatedTimestamp, stackResourceDetail.lastUpdatedTimestamp) &&
        Objects.equals(this.resourceStatus, stackResourceDetail.resourceStatus) &&
        Objects.equals(this.resourceStatusReason, stackResourceDetail.resourceStatusReason) &&
        Objects.equals(this.description, stackResourceDetail.description) &&
        Objects.equals(this.metadata, stackResourceDetail.metadata) &&
        Objects.equals(this.driftInformation, stackResourceDetail.driftInformation) &&
        Objects.equals(this.moduleInfo, stackResourceDetail.moduleInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackName, stackId, logicalResourceId, physicalResourceId, resourceType, lastUpdatedTimestamp, resourceStatus, resourceStatusReason, description, metadata, driftInformation, moduleInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackResourceDetail {\n");
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    logicalResourceId: ").append(toIndentedString(logicalResourceId)).append("\n");
    sb.append("    physicalResourceId: ").append(toIndentedString(physicalResourceId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("    resourceStatus: ").append(toIndentedString(resourceStatus)).append("\n");
    sb.append("    resourceStatusReason: ").append(toIndentedString(resourceStatusReason)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    driftInformation: ").append(toIndentedString(driftInformation)).append("\n");
    sb.append("    moduleInfo: ").append(toIndentedString(moduleInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackName");
    openapiFields.add("StackId");
    openapiFields.add("LogicalResourceId");
    openapiFields.add("PhysicalResourceId");
    openapiFields.add("ResourceType");
    openapiFields.add("LastUpdatedTimestamp");
    openapiFields.add("ResourceStatus");
    openapiFields.add("ResourceStatusReason");
    openapiFields.add("Description");
    openapiFields.add("Metadata");
    openapiFields.add("DriftInformation");
    openapiFields.add("ModuleInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LogicalResourceId");
    openapiRequiredFields.add("ResourceType");
    openapiRequiredFields.add("LastUpdatedTimestamp");
    openapiRequiredFields.add("ResourceStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackResourceDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackResourceDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackResourceDetail is not found in the empty JSON string", StackResourceDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackResourceDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackResourceDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StackResourceDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StackName`
      if (jsonObj.get("StackName") != null && !jsonObj.get("StackName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackName"));
      }
      // validate the optional field `StackId`
      if (jsonObj.get("StackId") != null && !jsonObj.get("StackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackId"));
      }
      // validate the required field `LogicalResourceId`
      String.validateJsonElement(jsonObj.get("LogicalResourceId"));
      // validate the optional field `PhysicalResourceId`
      if (jsonObj.get("PhysicalResourceId") != null && !jsonObj.get("PhysicalResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhysicalResourceId"));
      }
      // validate the required field `ResourceType`
      String.validateJsonElement(jsonObj.get("ResourceType"));
      // validate the required field `LastUpdatedTimestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimestamp"));
      // validate the required field `ResourceStatus`
      ResourceStatus.validateJsonElement(jsonObj.get("ResourceStatus"));
      // validate the optional field `ResourceStatusReason`
      if (jsonObj.get("ResourceStatusReason") != null && !jsonObj.get("ResourceStatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceStatusReason"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Metadata`
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Metadata"));
      }
      // validate the optional field `DriftInformation`
      if (jsonObj.get("DriftInformation") != null && !jsonObj.get("DriftInformation").isJsonNull()) {
        StackResourceDetailDriftInformation.validateJsonElement(jsonObj.get("DriftInformation"));
      }
      // validate the optional field `ModuleInfo`
      if (jsonObj.get("ModuleInfo") != null && !jsonObj.get("ModuleInfo").isJsonNull()) {
        ResourceChangeModuleInfo.validateJsonElement(jsonObj.get("ModuleInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackResourceDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackResourceDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackResourceDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackResourceDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<StackResourceDetail>() {
           @Override
           public void write(JsonWriter out, StackResourceDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackResourceDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackResourceDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackResourceDetail
   * @throws IOException if the JSON string is invalid with respect to StackResourceDetail
   */
  public static StackResourceDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackResourceDetail.class);
  }

  /**
   * Convert an instance of StackResourceDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

