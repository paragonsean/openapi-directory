/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChangeSetHookTargetDetails;
import org.openapitools.client.model.HookFailureMode;
import org.openapitools.client.model.HookInvocationPoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the resource, the hook, and the hook version to be invoked.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangeSetHook {
  public static final String SERIALIZED_NAME_INVOCATION_POINT = "InvocationPoint";
  @SerializedName(SERIALIZED_NAME_INVOCATION_POINT)
  private HookInvocationPoint invocationPoint;

  public static final String SERIALIZED_NAME_FAILURE_MODE = "FailureMode";
  @SerializedName(SERIALIZED_NAME_FAILURE_MODE)
  private HookFailureMode failureMode;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_TYPE_VERSION_ID = "TypeVersionId";
  @SerializedName(SERIALIZED_NAME_TYPE_VERSION_ID)
  private String typeVersionId;

  public static final String SERIALIZED_NAME_TYPE_CONFIGURATION_VERSION_ID = "TypeConfigurationVersionId";
  @SerializedName(SERIALIZED_NAME_TYPE_CONFIGURATION_VERSION_ID)
  private String typeConfigurationVersionId;

  public static final String SERIALIZED_NAME_TARGET_DETAILS = "TargetDetails";
  @SerializedName(SERIALIZED_NAME_TARGET_DETAILS)
  private ChangeSetHookTargetDetails targetDetails;

  public ChangeSetHook() {
  }

  public ChangeSetHook invocationPoint(HookInvocationPoint invocationPoint) {
    this.invocationPoint = invocationPoint;
    return this;
  }

  /**
   * Get invocationPoint
   * @return invocationPoint
   */
  @javax.annotation.Nullable
  public HookInvocationPoint getInvocationPoint() {
    return invocationPoint;
  }

  public void setInvocationPoint(HookInvocationPoint invocationPoint) {
    this.invocationPoint = invocationPoint;
  }


  public ChangeSetHook failureMode(HookFailureMode failureMode) {
    this.failureMode = failureMode;
    return this;
  }

  /**
   * Get failureMode
   * @return failureMode
   */
  @javax.annotation.Nullable
  public HookFailureMode getFailureMode() {
    return failureMode;
  }

  public void setFailureMode(HookFailureMode failureMode) {
    this.failureMode = failureMode;
  }


  public ChangeSetHook typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public ChangeSetHook typeVersionId(String typeVersionId) {
    this.typeVersionId = typeVersionId;
    return this;
  }

  /**
   * Get typeVersionId
   * @return typeVersionId
   */
  @javax.annotation.Nullable
  public String getTypeVersionId() {
    return typeVersionId;
  }

  public void setTypeVersionId(String typeVersionId) {
    this.typeVersionId = typeVersionId;
  }


  public ChangeSetHook typeConfigurationVersionId(String typeConfigurationVersionId) {
    this.typeConfigurationVersionId = typeConfigurationVersionId;
    return this;
  }

  /**
   * Get typeConfigurationVersionId
   * @return typeConfigurationVersionId
   */
  @javax.annotation.Nullable
  public String getTypeConfigurationVersionId() {
    return typeConfigurationVersionId;
  }

  public void setTypeConfigurationVersionId(String typeConfigurationVersionId) {
    this.typeConfigurationVersionId = typeConfigurationVersionId;
  }


  public ChangeSetHook targetDetails(ChangeSetHookTargetDetails targetDetails) {
    this.targetDetails = targetDetails;
    return this;
  }

  /**
   * Get targetDetails
   * @return targetDetails
   */
  @javax.annotation.Nullable
  public ChangeSetHookTargetDetails getTargetDetails() {
    return targetDetails;
  }

  public void setTargetDetails(ChangeSetHookTargetDetails targetDetails) {
    this.targetDetails = targetDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeSetHook changeSetHook = (ChangeSetHook) o;
    return Objects.equals(this.invocationPoint, changeSetHook.invocationPoint) &&
        Objects.equals(this.failureMode, changeSetHook.failureMode) &&
        Objects.equals(this.typeName, changeSetHook.typeName) &&
        Objects.equals(this.typeVersionId, changeSetHook.typeVersionId) &&
        Objects.equals(this.typeConfigurationVersionId, changeSetHook.typeConfigurationVersionId) &&
        Objects.equals(this.targetDetails, changeSetHook.targetDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invocationPoint, failureMode, typeName, typeVersionId, typeConfigurationVersionId, targetDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeSetHook {\n");
    sb.append("    invocationPoint: ").append(toIndentedString(invocationPoint)).append("\n");
    sb.append("    failureMode: ").append(toIndentedString(failureMode)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    typeVersionId: ").append(toIndentedString(typeVersionId)).append("\n");
    sb.append("    typeConfigurationVersionId: ").append(toIndentedString(typeConfigurationVersionId)).append("\n");
    sb.append("    targetDetails: ").append(toIndentedString(targetDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InvocationPoint");
    openapiFields.add("FailureMode");
    openapiFields.add("TypeName");
    openapiFields.add("TypeVersionId");
    openapiFields.add("TypeConfigurationVersionId");
    openapiFields.add("TargetDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangeSetHook
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangeSetHook.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeSetHook is not found in the empty JSON string", ChangeSetHook.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangeSetHook.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangeSetHook` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InvocationPoint`
      if (jsonObj.get("InvocationPoint") != null && !jsonObj.get("InvocationPoint").isJsonNull()) {
        HookInvocationPoint.validateJsonElement(jsonObj.get("InvocationPoint"));
      }
      // validate the optional field `FailureMode`
      if (jsonObj.get("FailureMode") != null && !jsonObj.get("FailureMode").isJsonNull()) {
        HookFailureMode.validateJsonElement(jsonObj.get("FailureMode"));
      }
      // validate the optional field `TypeName`
      if (jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeName"));
      }
      // validate the optional field `TypeVersionId`
      if (jsonObj.get("TypeVersionId") != null && !jsonObj.get("TypeVersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeVersionId"));
      }
      // validate the optional field `TypeConfigurationVersionId`
      if (jsonObj.get("TypeConfigurationVersionId") != null && !jsonObj.get("TypeConfigurationVersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeConfigurationVersionId"));
      }
      // validate the optional field `TargetDetails`
      if (jsonObj.get("TargetDetails") != null && !jsonObj.get("TargetDetails").isJsonNull()) {
        ChangeSetHookTargetDetails.validateJsonElement(jsonObj.get("TargetDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeSetHook.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeSetHook' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeSetHook> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeSetHook.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeSetHook>() {
           @Override
           public void write(JsonWriter out, ChangeSetHook value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeSetHook read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangeSetHook given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangeSetHook
   * @throws IOException if the JSON string is invalid with respect to ChangeSetHook
   */
  public static ChangeSetHook fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeSetHook.class);
  }

  /**
   * Convert an instance of ChangeSetHook to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

