/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallAs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListStackInstanceResourceDriftsInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListStackInstanceResourceDriftsInput {
  public static final String SERIALIZED_NAME_STACK_SET_NAME = "StackSetName";
  @SerializedName(SERIALIZED_NAME_STACK_SET_NAME)
  private String stackSetName;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_STACK_INSTANCE_RESOURCE_DRIFT_STATUSES = "StackInstanceResourceDriftStatuses";
  @SerializedName(SERIALIZED_NAME_STACK_INSTANCE_RESOURCE_DRIFT_STATUSES)
  private List stackInstanceResourceDriftStatuses;

  public static final String SERIALIZED_NAME_STACK_INSTANCE_ACCOUNT = "StackInstanceAccount";
  @SerializedName(SERIALIZED_NAME_STACK_INSTANCE_ACCOUNT)
  private String stackInstanceAccount;

  public static final String SERIALIZED_NAME_STACK_INSTANCE_REGION = "StackInstanceRegion";
  @SerializedName(SERIALIZED_NAME_STACK_INSTANCE_REGION)
  private String stackInstanceRegion;

  public static final String SERIALIZED_NAME_OPERATION_ID = "OperationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_CALL_AS = "CallAs";
  @SerializedName(SERIALIZED_NAME_CALL_AS)
  private CallAs callAs;

  public ListStackInstanceResourceDriftsInput() {
  }

  public ListStackInstanceResourceDriftsInput stackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
    return this;
  }

  /**
   * Get stackSetName
   * @return stackSetName
   */
  @javax.annotation.Nonnull
  public String getStackSetName() {
    return stackSetName;
  }

  public void setStackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
  }


  public ListStackInstanceResourceDriftsInput nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListStackInstanceResourceDriftsInput maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListStackInstanceResourceDriftsInput stackInstanceResourceDriftStatuses(List stackInstanceResourceDriftStatuses) {
    this.stackInstanceResourceDriftStatuses = stackInstanceResourceDriftStatuses;
    return this;
  }

  /**
   * Get stackInstanceResourceDriftStatuses
   * @return stackInstanceResourceDriftStatuses
   */
  @javax.annotation.Nullable
  public List getStackInstanceResourceDriftStatuses() {
    return stackInstanceResourceDriftStatuses;
  }

  public void setStackInstanceResourceDriftStatuses(List stackInstanceResourceDriftStatuses) {
    this.stackInstanceResourceDriftStatuses = stackInstanceResourceDriftStatuses;
  }


  public ListStackInstanceResourceDriftsInput stackInstanceAccount(String stackInstanceAccount) {
    this.stackInstanceAccount = stackInstanceAccount;
    return this;
  }

  /**
   * Get stackInstanceAccount
   * @return stackInstanceAccount
   */
  @javax.annotation.Nonnull
  public String getStackInstanceAccount() {
    return stackInstanceAccount;
  }

  public void setStackInstanceAccount(String stackInstanceAccount) {
    this.stackInstanceAccount = stackInstanceAccount;
  }


  public ListStackInstanceResourceDriftsInput stackInstanceRegion(String stackInstanceRegion) {
    this.stackInstanceRegion = stackInstanceRegion;
    return this;
  }

  /**
   * Get stackInstanceRegion
   * @return stackInstanceRegion
   */
  @javax.annotation.Nonnull
  public String getStackInstanceRegion() {
    return stackInstanceRegion;
  }

  public void setStackInstanceRegion(String stackInstanceRegion) {
    this.stackInstanceRegion = stackInstanceRegion;
  }


  public ListStackInstanceResourceDriftsInput operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Get operationId
   * @return operationId
   */
  @javax.annotation.Nonnull
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public ListStackInstanceResourceDriftsInput callAs(CallAs callAs) {
    this.callAs = callAs;
    return this;
  }

  /**
   * Get callAs
   * @return callAs
   */
  @javax.annotation.Nullable
  public CallAs getCallAs() {
    return callAs;
  }

  public void setCallAs(CallAs callAs) {
    this.callAs = callAs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListStackInstanceResourceDriftsInput listStackInstanceResourceDriftsInput = (ListStackInstanceResourceDriftsInput) o;
    return Objects.equals(this.stackSetName, listStackInstanceResourceDriftsInput.stackSetName) &&
        Objects.equals(this.nextToken, listStackInstanceResourceDriftsInput.nextToken) &&
        Objects.equals(this.maxResults, listStackInstanceResourceDriftsInput.maxResults) &&
        Objects.equals(this.stackInstanceResourceDriftStatuses, listStackInstanceResourceDriftsInput.stackInstanceResourceDriftStatuses) &&
        Objects.equals(this.stackInstanceAccount, listStackInstanceResourceDriftsInput.stackInstanceAccount) &&
        Objects.equals(this.stackInstanceRegion, listStackInstanceResourceDriftsInput.stackInstanceRegion) &&
        Objects.equals(this.operationId, listStackInstanceResourceDriftsInput.operationId) &&
        Objects.equals(this.callAs, listStackInstanceResourceDriftsInput.callAs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackSetName, nextToken, maxResults, stackInstanceResourceDriftStatuses, stackInstanceAccount, stackInstanceRegion, operationId, callAs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListStackInstanceResourceDriftsInput {\n");
    sb.append("    stackSetName: ").append(toIndentedString(stackSetName)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    stackInstanceResourceDriftStatuses: ").append(toIndentedString(stackInstanceResourceDriftStatuses)).append("\n");
    sb.append("    stackInstanceAccount: ").append(toIndentedString(stackInstanceAccount)).append("\n");
    sb.append("    stackInstanceRegion: ").append(toIndentedString(stackInstanceRegion)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    callAs: ").append(toIndentedString(callAs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackSetName");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");
    openapiFields.add("StackInstanceResourceDriftStatuses");
    openapiFields.add("StackInstanceAccount");
    openapiFields.add("StackInstanceRegion");
    openapiFields.add("OperationId");
    openapiFields.add("CallAs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackSetName");
    openapiRequiredFields.add("StackInstanceAccount");
    openapiRequiredFields.add("StackInstanceRegion");
    openapiRequiredFields.add("OperationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListStackInstanceResourceDriftsInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListStackInstanceResourceDriftsInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListStackInstanceResourceDriftsInput is not found in the empty JSON string", ListStackInstanceResourceDriftsInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListStackInstanceResourceDriftsInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListStackInstanceResourceDriftsInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListStackInstanceResourceDriftsInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StackSetName`
      String.validateJsonElement(jsonObj.get("StackSetName"));
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
      // validate the optional field `StackInstanceResourceDriftStatuses`
      if (jsonObj.get("StackInstanceResourceDriftStatuses") != null && !jsonObj.get("StackInstanceResourceDriftStatuses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StackInstanceResourceDriftStatuses"));
      }
      // validate the required field `StackInstanceAccount`
      String.validateJsonElement(jsonObj.get("StackInstanceAccount"));
      // validate the required field `StackInstanceRegion`
      String.validateJsonElement(jsonObj.get("StackInstanceRegion"));
      // validate the required field `OperationId`
      String.validateJsonElement(jsonObj.get("OperationId"));
      // validate the optional field `CallAs`
      if (jsonObj.get("CallAs") != null && !jsonObj.get("CallAs").isJsonNull()) {
        CallAs.validateJsonElement(jsonObj.get("CallAs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListStackInstanceResourceDriftsInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListStackInstanceResourceDriftsInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListStackInstanceResourceDriftsInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListStackInstanceResourceDriftsInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ListStackInstanceResourceDriftsInput>() {
           @Override
           public void write(JsonWriter out, ListStackInstanceResourceDriftsInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListStackInstanceResourceDriftsInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListStackInstanceResourceDriftsInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListStackInstanceResourceDriftsInput
   * @throws IOException if the JSON string is invalid with respect to ListStackInstanceResourceDriftsInput
   */
  public static ListStackInstanceResourceDriftsInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListStackInstanceResourceDriftsInput.class);
  }

  /**
   * Convert an instance of ListStackInstanceResourceDriftsInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

