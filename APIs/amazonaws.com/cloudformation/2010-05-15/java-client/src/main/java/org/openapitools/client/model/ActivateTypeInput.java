/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ActivateTypeInputLoggingConfig;
import org.openapitools.client.model.ThirdPartyType;
import org.openapitools.client.model.VersionBump;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivateTypeInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivateTypeInput {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ThirdPartyType type;

  public static final String SERIALIZED_NAME_PUBLIC_TYPE_ARN = "PublicTypeArn";
  @SerializedName(SERIALIZED_NAME_PUBLIC_TYPE_ARN)
  private String publicTypeArn;

  public static final String SERIALIZED_NAME_PUBLISHER_ID = "PublisherId";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_ID)
  private String publisherId;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_TYPE_NAME_ALIAS = "TypeNameAlias";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME_ALIAS)
  private String typeNameAlias;

  public static final String SERIALIZED_NAME_AUTO_UPDATE = "AutoUpdate";
  @SerializedName(SERIALIZED_NAME_AUTO_UPDATE)
  private Boolean autoUpdate;

  public static final String SERIALIZED_NAME_LOGGING_CONFIG = "LoggingConfig";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIG)
  private ActivateTypeInputLoggingConfig loggingConfig;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_ARN = "ExecutionRoleArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_ARN)
  private String executionRoleArn;

  public static final String SERIALIZED_NAME_VERSION_BUMP = "VersionBump";
  @SerializedName(SERIALIZED_NAME_VERSION_BUMP)
  private VersionBump versionBump;

  public static final String SERIALIZED_NAME_MAJOR_VERSION = "MajorVersion";
  @SerializedName(SERIALIZED_NAME_MAJOR_VERSION)
  private Integer majorVersion;

  public ActivateTypeInput() {
  }

  public ActivateTypeInput type(ThirdPartyType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ThirdPartyType getType() {
    return type;
  }

  public void setType(ThirdPartyType type) {
    this.type = type;
  }


  public ActivateTypeInput publicTypeArn(String publicTypeArn) {
    this.publicTypeArn = publicTypeArn;
    return this;
  }

  /**
   * Get publicTypeArn
   * @return publicTypeArn
   */
  @javax.annotation.Nullable
  public String getPublicTypeArn() {
    return publicTypeArn;
  }

  public void setPublicTypeArn(String publicTypeArn) {
    this.publicTypeArn = publicTypeArn;
  }


  public ActivateTypeInput publisherId(String publisherId) {
    this.publisherId = publisherId;
    return this;
  }

  /**
   * Get publisherId
   * @return publisherId
   */
  @javax.annotation.Nullable
  public String getPublisherId() {
    return publisherId;
  }

  public void setPublisherId(String publisherId) {
    this.publisherId = publisherId;
  }


  public ActivateTypeInput typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public ActivateTypeInput typeNameAlias(String typeNameAlias) {
    this.typeNameAlias = typeNameAlias;
    return this;
  }

  /**
   * Get typeNameAlias
   * @return typeNameAlias
   */
  @javax.annotation.Nullable
  public String getTypeNameAlias() {
    return typeNameAlias;
  }

  public void setTypeNameAlias(String typeNameAlias) {
    this.typeNameAlias = typeNameAlias;
  }


  public ActivateTypeInput autoUpdate(Boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
    return this;
  }

  /**
   * Get autoUpdate
   * @return autoUpdate
   */
  @javax.annotation.Nullable
  public Boolean getAutoUpdate() {
    return autoUpdate;
  }

  public void setAutoUpdate(Boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
  }


  public ActivateTypeInput loggingConfig(ActivateTypeInputLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
    return this;
  }

  /**
   * Get loggingConfig
   * @return loggingConfig
   */
  @javax.annotation.Nullable
  public ActivateTypeInputLoggingConfig getLoggingConfig() {
    return loggingConfig;
  }

  public void setLoggingConfig(ActivateTypeInputLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
  }


  public ActivateTypeInput executionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
    return this;
  }

  /**
   * Get executionRoleArn
   * @return executionRoleArn
   */
  @javax.annotation.Nullable
  public String getExecutionRoleArn() {
    return executionRoleArn;
  }

  public void setExecutionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
  }


  public ActivateTypeInput versionBump(VersionBump versionBump) {
    this.versionBump = versionBump;
    return this;
  }

  /**
   * Get versionBump
   * @return versionBump
   */
  @javax.annotation.Nullable
  public VersionBump getVersionBump() {
    return versionBump;
  }

  public void setVersionBump(VersionBump versionBump) {
    this.versionBump = versionBump;
  }


  public ActivateTypeInput majorVersion(Integer majorVersion) {
    this.majorVersion = majorVersion;
    return this;
  }

  /**
   * Get majorVersion
   * @return majorVersion
   */
  @javax.annotation.Nullable
  public Integer getMajorVersion() {
    return majorVersion;
  }

  public void setMajorVersion(Integer majorVersion) {
    this.majorVersion = majorVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivateTypeInput activateTypeInput = (ActivateTypeInput) o;
    return Objects.equals(this.type, activateTypeInput.type) &&
        Objects.equals(this.publicTypeArn, activateTypeInput.publicTypeArn) &&
        Objects.equals(this.publisherId, activateTypeInput.publisherId) &&
        Objects.equals(this.typeName, activateTypeInput.typeName) &&
        Objects.equals(this.typeNameAlias, activateTypeInput.typeNameAlias) &&
        Objects.equals(this.autoUpdate, activateTypeInput.autoUpdate) &&
        Objects.equals(this.loggingConfig, activateTypeInput.loggingConfig) &&
        Objects.equals(this.executionRoleArn, activateTypeInput.executionRoleArn) &&
        Objects.equals(this.versionBump, activateTypeInput.versionBump) &&
        Objects.equals(this.majorVersion, activateTypeInput.majorVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, publicTypeArn, publisherId, typeName, typeNameAlias, autoUpdate, loggingConfig, executionRoleArn, versionBump, majorVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivateTypeInput {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    publicTypeArn: ").append(toIndentedString(publicTypeArn)).append("\n");
    sb.append("    publisherId: ").append(toIndentedString(publisherId)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    typeNameAlias: ").append(toIndentedString(typeNameAlias)).append("\n");
    sb.append("    autoUpdate: ").append(toIndentedString(autoUpdate)).append("\n");
    sb.append("    loggingConfig: ").append(toIndentedString(loggingConfig)).append("\n");
    sb.append("    executionRoleArn: ").append(toIndentedString(executionRoleArn)).append("\n");
    sb.append("    versionBump: ").append(toIndentedString(versionBump)).append("\n");
    sb.append("    majorVersion: ").append(toIndentedString(majorVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("PublicTypeArn");
    openapiFields.add("PublisherId");
    openapiFields.add("TypeName");
    openapiFields.add("TypeNameAlias");
    openapiFields.add("AutoUpdate");
    openapiFields.add("LoggingConfig");
    openapiFields.add("ExecutionRoleArn");
    openapiFields.add("VersionBump");
    openapiFields.add("MajorVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivateTypeInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivateTypeInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivateTypeInput is not found in the empty JSON string", ActivateTypeInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivateTypeInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivateTypeInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ThirdPartyType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `PublicTypeArn`
      if (jsonObj.get("PublicTypeArn") != null && !jsonObj.get("PublicTypeArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublicTypeArn"));
      }
      // validate the optional field `PublisherId`
      if (jsonObj.get("PublisherId") != null && !jsonObj.get("PublisherId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublisherId"));
      }
      // validate the optional field `TypeName`
      if (jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeName"));
      }
      // validate the optional field `TypeNameAlias`
      if (jsonObj.get("TypeNameAlias") != null && !jsonObj.get("TypeNameAlias").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeNameAlias"));
      }
      // validate the optional field `AutoUpdate`
      if (jsonObj.get("AutoUpdate") != null && !jsonObj.get("AutoUpdate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoUpdate"));
      }
      // validate the optional field `LoggingConfig`
      if (jsonObj.get("LoggingConfig") != null && !jsonObj.get("LoggingConfig").isJsonNull()) {
        ActivateTypeInputLoggingConfig.validateJsonElement(jsonObj.get("LoggingConfig"));
      }
      // validate the optional field `ExecutionRoleArn`
      if (jsonObj.get("ExecutionRoleArn") != null && !jsonObj.get("ExecutionRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutionRoleArn"));
      }
      // validate the optional field `VersionBump`
      if (jsonObj.get("VersionBump") != null && !jsonObj.get("VersionBump").isJsonNull()) {
        VersionBump.validateJsonElement(jsonObj.get("VersionBump"));
      }
      // validate the optional field `MajorVersion`
      if (jsonObj.get("MajorVersion") != null && !jsonObj.get("MajorVersion").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MajorVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivateTypeInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivateTypeInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivateTypeInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivateTypeInput.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivateTypeInput>() {
           @Override
           public void write(JsonWriter out, ActivateTypeInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivateTypeInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivateTypeInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivateTypeInput
   * @throws IOException if the JSON string is invalid with respect to ActivateTypeInput
   */
  public static ActivateTypeInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivateTypeInput.class);
  }

  /**
   * Convert an instance of ActivateTypeInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

