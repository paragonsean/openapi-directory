/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribeChangeSetOutputRollbackConfiguration;
import org.openapitools.client.model.StackDriftInformation;
import org.openapitools.client.model.StackStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Stack data type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Stack {
  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_STACK_NAME = "StackName";
  @SerializedName(SERIALIZED_NAME_STACK_NAME)
  private String stackName;

  public static final String SERIALIZED_NAME_CHANGE_SET_ID = "ChangeSetId";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET_ID)
  private String changeSetId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List parameters;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DELETION_TIME = "DeletionTime";
  @SerializedName(SERIALIZED_NAME_DELETION_TIME)
  private OffsetDateTime deletionTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_ROLLBACK_CONFIGURATION = "RollbackConfiguration";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_CONFIGURATION)
  private DescribeChangeSetOutputRollbackConfiguration rollbackConfiguration;

  public static final String SERIALIZED_NAME_STACK_STATUS = "StackStatus";
  @SerializedName(SERIALIZED_NAME_STACK_STATUS)
  private StackStatus stackStatus;

  public static final String SERIALIZED_NAME_STACK_STATUS_REASON = "StackStatusReason";
  @SerializedName(SERIALIZED_NAME_STACK_STATUS_REASON)
  private String stackStatusReason;

  public static final String SERIALIZED_NAME_DISABLE_ROLLBACK = "DisableRollback";
  @SerializedName(SERIALIZED_NAME_DISABLE_ROLLBACK)
  private Boolean disableRollback;

  public static final String SERIALIZED_NAME_NOTIFICATION_A_R_NS = "NotificationARNs";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_A_R_NS)
  private List notificationARNs;

  public static final String SERIALIZED_NAME_TIMEOUT_IN_MINUTES = "TimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_IN_MINUTES)
  private Integer timeoutInMinutes;

  public static final String SERIALIZED_NAME_CAPABILITIES = "Capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List capabilities;

  public static final String SERIALIZED_NAME_OUTPUTS = "Outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List outputs;

  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_ENABLE_TERMINATION_PROTECTION = "EnableTerminationProtection";
  @SerializedName(SERIALIZED_NAME_ENABLE_TERMINATION_PROTECTION)
  private Boolean enableTerminationProtection;

  public static final String SERIALIZED_NAME_PARENT_ID = "ParentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_ROOT_ID = "RootId";
  @SerializedName(SERIALIZED_NAME_ROOT_ID)
  private String rootId;

  public static final String SERIALIZED_NAME_DRIFT_INFORMATION = "DriftInformation";
  @SerializedName(SERIALIZED_NAME_DRIFT_INFORMATION)
  private StackDriftInformation driftInformation;

  public static final String SERIALIZED_NAME_RETAIN_EXCEPT_ON_CREATE = "RetainExceptOnCreate";
  @SerializedName(SERIALIZED_NAME_RETAIN_EXCEPT_ON_CREATE)
  private Boolean retainExceptOnCreate;

  public Stack() {
  }

  public Stack stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nullable
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public Stack stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

  /**
   * Get stackName
   * @return stackName
   */
  @javax.annotation.Nonnull
  public String getStackName() {
    return stackName;
  }

  public void setStackName(String stackName) {
    this.stackName = stackName;
  }


  public Stack changeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
    return this;
  }

  /**
   * Get changeSetId
   * @return changeSetId
   */
  @javax.annotation.Nullable
  public String getChangeSetId() {
    return changeSetId;
  }

  public void setChangeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
  }


  public Stack description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Stack parameters(List parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List getParameters() {
    return parameters;
  }

  public void setParameters(List parameters) {
    this.parameters = parameters;
  }


  public Stack creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Stack deletionTime(OffsetDateTime deletionTime) {
    this.deletionTime = deletionTime;
    return this;
  }

  /**
   * Get deletionTime
   * @return deletionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletionTime() {
    return deletionTime;
  }

  public void setDeletionTime(OffsetDateTime deletionTime) {
    this.deletionTime = deletionTime;
  }


  public Stack lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public Stack rollbackConfiguration(DescribeChangeSetOutputRollbackConfiguration rollbackConfiguration) {
    this.rollbackConfiguration = rollbackConfiguration;
    return this;
  }

  /**
   * Get rollbackConfiguration
   * @return rollbackConfiguration
   */
  @javax.annotation.Nullable
  public DescribeChangeSetOutputRollbackConfiguration getRollbackConfiguration() {
    return rollbackConfiguration;
  }

  public void setRollbackConfiguration(DescribeChangeSetOutputRollbackConfiguration rollbackConfiguration) {
    this.rollbackConfiguration = rollbackConfiguration;
  }


  public Stack stackStatus(StackStatus stackStatus) {
    this.stackStatus = stackStatus;
    return this;
  }

  /**
   * Get stackStatus
   * @return stackStatus
   */
  @javax.annotation.Nonnull
  public StackStatus getStackStatus() {
    return stackStatus;
  }

  public void setStackStatus(StackStatus stackStatus) {
    this.stackStatus = stackStatus;
  }


  public Stack stackStatusReason(String stackStatusReason) {
    this.stackStatusReason = stackStatusReason;
    return this;
  }

  /**
   * Get stackStatusReason
   * @return stackStatusReason
   */
  @javax.annotation.Nullable
  public String getStackStatusReason() {
    return stackStatusReason;
  }

  public void setStackStatusReason(String stackStatusReason) {
    this.stackStatusReason = stackStatusReason;
  }


  public Stack disableRollback(Boolean disableRollback) {
    this.disableRollback = disableRollback;
    return this;
  }

  /**
   * Get disableRollback
   * @return disableRollback
   */
  @javax.annotation.Nullable
  public Boolean getDisableRollback() {
    return disableRollback;
  }

  public void setDisableRollback(Boolean disableRollback) {
    this.disableRollback = disableRollback;
  }


  public Stack notificationARNs(List notificationARNs) {
    this.notificationARNs = notificationARNs;
    return this;
  }

  /**
   * Get notificationARNs
   * @return notificationARNs
   */
  @javax.annotation.Nullable
  public List getNotificationARNs() {
    return notificationARNs;
  }

  public void setNotificationARNs(List notificationARNs) {
    this.notificationARNs = notificationARNs;
  }


  public Stack timeoutInMinutes(Integer timeoutInMinutes) {
    this.timeoutInMinutes = timeoutInMinutes;
    return this;
  }

  /**
   * Get timeoutInMinutes
   * @return timeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getTimeoutInMinutes() {
    return timeoutInMinutes;
  }

  public void setTimeoutInMinutes(Integer timeoutInMinutes) {
    this.timeoutInMinutes = timeoutInMinutes;
  }


  public Stack capabilities(List capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List capabilities) {
    this.capabilities = capabilities;
  }


  public Stack outputs(List outputs) {
    this.outputs = outputs;
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nullable
  public List getOutputs() {
    return outputs;
  }

  public void setOutputs(List outputs) {
    this.outputs = outputs;
  }


  public Stack roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nullable
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public Stack tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public Stack enableTerminationProtection(Boolean enableTerminationProtection) {
    this.enableTerminationProtection = enableTerminationProtection;
    return this;
  }

  /**
   * Get enableTerminationProtection
   * @return enableTerminationProtection
   */
  @javax.annotation.Nullable
  public Boolean getEnableTerminationProtection() {
    return enableTerminationProtection;
  }

  public void setEnableTerminationProtection(Boolean enableTerminationProtection) {
    this.enableTerminationProtection = enableTerminationProtection;
  }


  public Stack parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public Stack rootId(String rootId) {
    this.rootId = rootId;
    return this;
  }

  /**
   * Get rootId
   * @return rootId
   */
  @javax.annotation.Nullable
  public String getRootId() {
    return rootId;
  }

  public void setRootId(String rootId) {
    this.rootId = rootId;
  }


  public Stack driftInformation(StackDriftInformation driftInformation) {
    this.driftInformation = driftInformation;
    return this;
  }

  /**
   * Get driftInformation
   * @return driftInformation
   */
  @javax.annotation.Nullable
  public StackDriftInformation getDriftInformation() {
    return driftInformation;
  }

  public void setDriftInformation(StackDriftInformation driftInformation) {
    this.driftInformation = driftInformation;
  }


  public Stack retainExceptOnCreate(Boolean retainExceptOnCreate) {
    this.retainExceptOnCreate = retainExceptOnCreate;
    return this;
  }

  /**
   * Get retainExceptOnCreate
   * @return retainExceptOnCreate
   */
  @javax.annotation.Nullable
  public Boolean getRetainExceptOnCreate() {
    return retainExceptOnCreate;
  }

  public void setRetainExceptOnCreate(Boolean retainExceptOnCreate) {
    this.retainExceptOnCreate = retainExceptOnCreate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stack stack = (Stack) o;
    return Objects.equals(this.stackId, stack.stackId) &&
        Objects.equals(this.stackName, stack.stackName) &&
        Objects.equals(this.changeSetId, stack.changeSetId) &&
        Objects.equals(this.description, stack.description) &&
        Objects.equals(this.parameters, stack.parameters) &&
        Objects.equals(this.creationTime, stack.creationTime) &&
        Objects.equals(this.deletionTime, stack.deletionTime) &&
        Objects.equals(this.lastUpdatedTime, stack.lastUpdatedTime) &&
        Objects.equals(this.rollbackConfiguration, stack.rollbackConfiguration) &&
        Objects.equals(this.stackStatus, stack.stackStatus) &&
        Objects.equals(this.stackStatusReason, stack.stackStatusReason) &&
        Objects.equals(this.disableRollback, stack.disableRollback) &&
        Objects.equals(this.notificationARNs, stack.notificationARNs) &&
        Objects.equals(this.timeoutInMinutes, stack.timeoutInMinutes) &&
        Objects.equals(this.capabilities, stack.capabilities) &&
        Objects.equals(this.outputs, stack.outputs) &&
        Objects.equals(this.roleARN, stack.roleARN) &&
        Objects.equals(this.tags, stack.tags) &&
        Objects.equals(this.enableTerminationProtection, stack.enableTerminationProtection) &&
        Objects.equals(this.parentId, stack.parentId) &&
        Objects.equals(this.rootId, stack.rootId) &&
        Objects.equals(this.driftInformation, stack.driftInformation) &&
        Objects.equals(this.retainExceptOnCreate, stack.retainExceptOnCreate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackId, stackName, changeSetId, description, parameters, creationTime, deletionTime, lastUpdatedTime, rollbackConfiguration, stackStatus, stackStatusReason, disableRollback, notificationARNs, timeoutInMinutes, capabilities, outputs, roleARN, tags, enableTerminationProtection, parentId, rootId, driftInformation, retainExceptOnCreate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stack {\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("    changeSetId: ").append(toIndentedString(changeSetId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    deletionTime: ").append(toIndentedString(deletionTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    rollbackConfiguration: ").append(toIndentedString(rollbackConfiguration)).append("\n");
    sb.append("    stackStatus: ").append(toIndentedString(stackStatus)).append("\n");
    sb.append("    stackStatusReason: ").append(toIndentedString(stackStatusReason)).append("\n");
    sb.append("    disableRollback: ").append(toIndentedString(disableRollback)).append("\n");
    sb.append("    notificationARNs: ").append(toIndentedString(notificationARNs)).append("\n");
    sb.append("    timeoutInMinutes: ").append(toIndentedString(timeoutInMinutes)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    enableTerminationProtection: ").append(toIndentedString(enableTerminationProtection)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    rootId: ").append(toIndentedString(rootId)).append("\n");
    sb.append("    driftInformation: ").append(toIndentedString(driftInformation)).append("\n");
    sb.append("    retainExceptOnCreate: ").append(toIndentedString(retainExceptOnCreate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackId");
    openapiFields.add("StackName");
    openapiFields.add("ChangeSetId");
    openapiFields.add("Description");
    openapiFields.add("Parameters");
    openapiFields.add("CreationTime");
    openapiFields.add("DeletionTime");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("RollbackConfiguration");
    openapiFields.add("StackStatus");
    openapiFields.add("StackStatusReason");
    openapiFields.add("DisableRollback");
    openapiFields.add("NotificationARNs");
    openapiFields.add("TimeoutInMinutes");
    openapiFields.add("Capabilities");
    openapiFields.add("Outputs");
    openapiFields.add("RoleARN");
    openapiFields.add("Tags");
    openapiFields.add("EnableTerminationProtection");
    openapiFields.add("ParentId");
    openapiFields.add("RootId");
    openapiFields.add("DriftInformation");
    openapiFields.add("RetainExceptOnCreate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackName");
    openapiRequiredFields.add("CreationTime");
    openapiRequiredFields.add("StackStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Stack
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Stack.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Stack is not found in the empty JSON string", Stack.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Stack.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Stack` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Stack.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StackId`
      if (jsonObj.get("StackId") != null && !jsonObj.get("StackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackId"));
      }
      // validate the required field `StackName`
      String.validateJsonElement(jsonObj.get("StackName"));
      // validate the optional field `ChangeSetId`
      if (jsonObj.get("ChangeSetId") != null && !jsonObj.get("ChangeSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeSetId"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the required field `CreationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      // validate the optional field `DeletionTime`
      if (jsonObj.get("DeletionTime") != null && !jsonObj.get("DeletionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeletionTime"));
      }
      // validate the optional field `LastUpdatedTime`
      if (jsonObj.get("LastUpdatedTime") != null && !jsonObj.get("LastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      }
      // validate the optional field `RollbackConfiguration`
      if (jsonObj.get("RollbackConfiguration") != null && !jsonObj.get("RollbackConfiguration").isJsonNull()) {
        DescribeChangeSetOutputRollbackConfiguration.validateJsonElement(jsonObj.get("RollbackConfiguration"));
      }
      // validate the required field `StackStatus`
      StackStatus.validateJsonElement(jsonObj.get("StackStatus"));
      // validate the optional field `StackStatusReason`
      if (jsonObj.get("StackStatusReason") != null && !jsonObj.get("StackStatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackStatusReason"));
      }
      // validate the optional field `DisableRollback`
      if (jsonObj.get("DisableRollback") != null && !jsonObj.get("DisableRollback").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DisableRollback"));
      }
      // validate the optional field `NotificationARNs`
      if (jsonObj.get("NotificationARNs") != null && !jsonObj.get("NotificationARNs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NotificationARNs"));
      }
      // validate the optional field `TimeoutInMinutes`
      if (jsonObj.get("TimeoutInMinutes") != null && !jsonObj.get("TimeoutInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TimeoutInMinutes"));
      }
      // validate the optional field `Capabilities`
      if (jsonObj.get("Capabilities") != null && !jsonObj.get("Capabilities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Capabilities"));
      }
      // validate the optional field `Outputs`
      if (jsonObj.get("Outputs") != null && !jsonObj.get("Outputs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Outputs"));
      }
      // validate the optional field `RoleARN`
      if (jsonObj.get("RoleARN") != null && !jsonObj.get("RoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleARN"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `EnableTerminationProtection`
      if (jsonObj.get("EnableTerminationProtection") != null && !jsonObj.get("EnableTerminationProtection").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableTerminationProtection"));
      }
      // validate the optional field `ParentId`
      if (jsonObj.get("ParentId") != null && !jsonObj.get("ParentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParentId"));
      }
      // validate the optional field `RootId`
      if (jsonObj.get("RootId") != null && !jsonObj.get("RootId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RootId"));
      }
      // validate the optional field `DriftInformation`
      if (jsonObj.get("DriftInformation") != null && !jsonObj.get("DriftInformation").isJsonNull()) {
        StackDriftInformation.validateJsonElement(jsonObj.get("DriftInformation"));
      }
      // validate the optional field `RetainExceptOnCreate`
      if (jsonObj.get("RetainExceptOnCreate") != null && !jsonObj.get("RetainExceptOnCreate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RetainExceptOnCreate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Stack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Stack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Stack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Stack.class));

       return (TypeAdapter<T>) new TypeAdapter<Stack>() {
           @Override
           public void write(JsonWriter out, Stack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Stack read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Stack given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Stack
   * @throws IOException if the JSON string is invalid with respect to Stack
   */
  public static Stack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Stack.class);
  }

  /**
   * Convert an instance of Stack to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

