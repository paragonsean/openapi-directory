/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChangeAction;
import org.openapitools.client.model.Replacement;
import org.openapitools.client.model.ResourceChangeModuleInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChangeResourceChange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangeResourceChange {
  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ChangeAction action;

  public static final String SERIALIZED_NAME_LOGICAL_RESOURCE_ID = "LogicalResourceId";
  @SerializedName(SERIALIZED_NAME_LOGICAL_RESOURCE_ID)
  private String logicalResourceId;

  public static final String SERIALIZED_NAME_PHYSICAL_RESOURCE_ID = "PhysicalResourceId";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_RESOURCE_ID)
  private String physicalResourceId;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_REPLACEMENT = "Replacement";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT)
  private Replacement replacement;

  public static final String SERIALIZED_NAME_SCOPE = "Scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private List scope;

  public static final String SERIALIZED_NAME_DETAILS = "Details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List details;

  public static final String SERIALIZED_NAME_CHANGE_SET_ID = "ChangeSetId";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET_ID)
  private String changeSetId;

  public static final String SERIALIZED_NAME_MODULE_INFO = "ModuleInfo";
  @SerializedName(SERIALIZED_NAME_MODULE_INFO)
  private ResourceChangeModuleInfo moduleInfo;

  public ChangeResourceChange() {
  }

  public ChangeResourceChange action(ChangeAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public ChangeAction getAction() {
    return action;
  }

  public void setAction(ChangeAction action) {
    this.action = action;
  }


  public ChangeResourceChange logicalResourceId(String logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
    return this;
  }

  /**
   * Get logicalResourceId
   * @return logicalResourceId
   */
  @javax.annotation.Nullable
  public String getLogicalResourceId() {
    return logicalResourceId;
  }

  public void setLogicalResourceId(String logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
  }


  public ChangeResourceChange physicalResourceId(String physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
    return this;
  }

  /**
   * Get physicalResourceId
   * @return physicalResourceId
   */
  @javax.annotation.Nullable
  public String getPhysicalResourceId() {
    return physicalResourceId;
  }

  public void setPhysicalResourceId(String physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
  }


  public ChangeResourceChange resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public ChangeResourceChange replacement(Replacement replacement) {
    this.replacement = replacement;
    return this;
  }

  /**
   * Get replacement
   * @return replacement
   */
  @javax.annotation.Nullable
  public Replacement getReplacement() {
    return replacement;
  }

  public void setReplacement(Replacement replacement) {
    this.replacement = replacement;
  }


  public ChangeResourceChange scope(List scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public List getScope() {
    return scope;
  }

  public void setScope(List scope) {
    this.scope = scope;
  }


  public ChangeResourceChange details(List details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public List getDetails() {
    return details;
  }

  public void setDetails(List details) {
    this.details = details;
  }


  public ChangeResourceChange changeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
    return this;
  }

  /**
   * Get changeSetId
   * @return changeSetId
   */
  @javax.annotation.Nullable
  public String getChangeSetId() {
    return changeSetId;
  }

  public void setChangeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
  }


  public ChangeResourceChange moduleInfo(ResourceChangeModuleInfo moduleInfo) {
    this.moduleInfo = moduleInfo;
    return this;
  }

  /**
   * Get moduleInfo
   * @return moduleInfo
   */
  @javax.annotation.Nullable
  public ResourceChangeModuleInfo getModuleInfo() {
    return moduleInfo;
  }

  public void setModuleInfo(ResourceChangeModuleInfo moduleInfo) {
    this.moduleInfo = moduleInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeResourceChange changeResourceChange = (ChangeResourceChange) o;
    return Objects.equals(this.action, changeResourceChange.action) &&
        Objects.equals(this.logicalResourceId, changeResourceChange.logicalResourceId) &&
        Objects.equals(this.physicalResourceId, changeResourceChange.physicalResourceId) &&
        Objects.equals(this.resourceType, changeResourceChange.resourceType) &&
        Objects.equals(this.replacement, changeResourceChange.replacement) &&
        Objects.equals(this.scope, changeResourceChange.scope) &&
        Objects.equals(this.details, changeResourceChange.details) &&
        Objects.equals(this.changeSetId, changeResourceChange.changeSetId) &&
        Objects.equals(this.moduleInfo, changeResourceChange.moduleInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, logicalResourceId, physicalResourceId, resourceType, replacement, scope, details, changeSetId, moduleInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeResourceChange {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    logicalResourceId: ").append(toIndentedString(logicalResourceId)).append("\n");
    sb.append("    physicalResourceId: ").append(toIndentedString(physicalResourceId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    replacement: ").append(toIndentedString(replacement)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    changeSetId: ").append(toIndentedString(changeSetId)).append("\n");
    sb.append("    moduleInfo: ").append(toIndentedString(moduleInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Action");
    openapiFields.add("LogicalResourceId");
    openapiFields.add("PhysicalResourceId");
    openapiFields.add("ResourceType");
    openapiFields.add("Replacement");
    openapiFields.add("Scope");
    openapiFields.add("Details");
    openapiFields.add("ChangeSetId");
    openapiFields.add("ModuleInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangeResourceChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangeResourceChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeResourceChange is not found in the empty JSON string", ChangeResourceChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangeResourceChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangeResourceChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Action`
      if (jsonObj.get("Action") != null && !jsonObj.get("Action").isJsonNull()) {
        ChangeAction.validateJsonElement(jsonObj.get("Action"));
      }
      // validate the optional field `LogicalResourceId`
      if (jsonObj.get("LogicalResourceId") != null && !jsonObj.get("LogicalResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogicalResourceId"));
      }
      // validate the optional field `PhysicalResourceId`
      if (jsonObj.get("PhysicalResourceId") != null && !jsonObj.get("PhysicalResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhysicalResourceId"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the optional field `Replacement`
      if (jsonObj.get("Replacement") != null && !jsonObj.get("Replacement").isJsonNull()) {
        Replacement.validateJsonElement(jsonObj.get("Replacement"));
      }
      // validate the optional field `Scope`
      if (jsonObj.get("Scope") != null && !jsonObj.get("Scope").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Scope"));
      }
      // validate the optional field `Details`
      if (jsonObj.get("Details") != null && !jsonObj.get("Details").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Details"));
      }
      // validate the optional field `ChangeSetId`
      if (jsonObj.get("ChangeSetId") != null && !jsonObj.get("ChangeSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeSetId"));
      }
      // validate the optional field `ModuleInfo`
      if (jsonObj.get("ModuleInfo") != null && !jsonObj.get("ModuleInfo").isJsonNull()) {
        ResourceChangeModuleInfo.validateJsonElement(jsonObj.get("ModuleInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeResourceChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeResourceChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeResourceChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeResourceChange.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeResourceChange>() {
           @Override
           public void write(JsonWriter out, ChangeResourceChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeResourceChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangeResourceChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangeResourceChange
   * @throws IOException if the JSON string is invalid with respect to ChangeResourceChange
   */
  public static ChangeResourceChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeResourceChange.class);
  }

  /**
   * Convert an instance of ChangeResourceChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

