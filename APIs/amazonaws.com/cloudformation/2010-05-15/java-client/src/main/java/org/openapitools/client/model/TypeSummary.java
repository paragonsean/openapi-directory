/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.IdentityProvider;
import org.openapitools.client.model.RegistryType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains summary information about the specified CloudFormation extension.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TypeSummary {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RegistryType type;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_DEFAULT_VERSION_ID = "DefaultVersionId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VERSION_ID)
  private String defaultVersionId;

  public static final String SERIALIZED_NAME_TYPE_ARN = "TypeArn";
  @SerializedName(SERIALIZED_NAME_TYPE_ARN)
  private String typeArn;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PUBLISHER_ID = "PublisherId";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_ID)
  private String publisherId;

  public static final String SERIALIZED_NAME_ORIGINAL_TYPE_NAME = "OriginalTypeName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TYPE_NAME)
  private String originalTypeName;

  public static final String SERIALIZED_NAME_PUBLIC_VERSION_NUMBER = "PublicVersionNumber";
  @SerializedName(SERIALIZED_NAME_PUBLIC_VERSION_NUMBER)
  private String publicVersionNumber;

  public static final String SERIALIZED_NAME_LATEST_PUBLIC_VERSION = "LatestPublicVersion";
  @SerializedName(SERIALIZED_NAME_LATEST_PUBLIC_VERSION)
  private String latestPublicVersion;

  public static final String SERIALIZED_NAME_PUBLISHER_IDENTITY = "PublisherIdentity";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_IDENTITY)
  private IdentityProvider publisherIdentity;

  public static final String SERIALIZED_NAME_PUBLISHER_NAME = "PublisherName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_NAME)
  private String publisherName;

  public static final String SERIALIZED_NAME_IS_ACTIVATED = "IsActivated";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVATED)
  private Boolean isActivated;

  public TypeSummary() {
  }

  public TypeSummary type(RegistryType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public RegistryType getType() {
    return type;
  }

  public void setType(RegistryType type) {
    this.type = type;
  }


  public TypeSummary typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public TypeSummary defaultVersionId(String defaultVersionId) {
    this.defaultVersionId = defaultVersionId;
    return this;
  }

  /**
   * Get defaultVersionId
   * @return defaultVersionId
   */
  @javax.annotation.Nullable
  public String getDefaultVersionId() {
    return defaultVersionId;
  }

  public void setDefaultVersionId(String defaultVersionId) {
    this.defaultVersionId = defaultVersionId;
  }


  public TypeSummary typeArn(String typeArn) {
    this.typeArn = typeArn;
    return this;
  }

  /**
   * Get typeArn
   * @return typeArn
   */
  @javax.annotation.Nullable
  public String getTypeArn() {
    return typeArn;
  }

  public void setTypeArn(String typeArn) {
    this.typeArn = typeArn;
  }


  public TypeSummary lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public TypeSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TypeSummary publisherId(String publisherId) {
    this.publisherId = publisherId;
    return this;
  }

  /**
   * Get publisherId
   * @return publisherId
   */
  @javax.annotation.Nullable
  public String getPublisherId() {
    return publisherId;
  }

  public void setPublisherId(String publisherId) {
    this.publisherId = publisherId;
  }


  public TypeSummary originalTypeName(String originalTypeName) {
    this.originalTypeName = originalTypeName;
    return this;
  }

  /**
   * Get originalTypeName
   * @return originalTypeName
   */
  @javax.annotation.Nullable
  public String getOriginalTypeName() {
    return originalTypeName;
  }

  public void setOriginalTypeName(String originalTypeName) {
    this.originalTypeName = originalTypeName;
  }


  public TypeSummary publicVersionNumber(String publicVersionNumber) {
    this.publicVersionNumber = publicVersionNumber;
    return this;
  }

  /**
   * Get publicVersionNumber
   * @return publicVersionNumber
   */
  @javax.annotation.Nullable
  public String getPublicVersionNumber() {
    return publicVersionNumber;
  }

  public void setPublicVersionNumber(String publicVersionNumber) {
    this.publicVersionNumber = publicVersionNumber;
  }


  public TypeSummary latestPublicVersion(String latestPublicVersion) {
    this.latestPublicVersion = latestPublicVersion;
    return this;
  }

  /**
   * Get latestPublicVersion
   * @return latestPublicVersion
   */
  @javax.annotation.Nullable
  public String getLatestPublicVersion() {
    return latestPublicVersion;
  }

  public void setLatestPublicVersion(String latestPublicVersion) {
    this.latestPublicVersion = latestPublicVersion;
  }


  public TypeSummary publisherIdentity(IdentityProvider publisherIdentity) {
    this.publisherIdentity = publisherIdentity;
    return this;
  }

  /**
   * Get publisherIdentity
   * @return publisherIdentity
   */
  @javax.annotation.Nullable
  public IdentityProvider getPublisherIdentity() {
    return publisherIdentity;
  }

  public void setPublisherIdentity(IdentityProvider publisherIdentity) {
    this.publisherIdentity = publisherIdentity;
  }


  public TypeSummary publisherName(String publisherName) {
    this.publisherName = publisherName;
    return this;
  }

  /**
   * Get publisherName
   * @return publisherName
   */
  @javax.annotation.Nullable
  public String getPublisherName() {
    return publisherName;
  }

  public void setPublisherName(String publisherName) {
    this.publisherName = publisherName;
  }


  public TypeSummary isActivated(Boolean isActivated) {
    this.isActivated = isActivated;
    return this;
  }

  /**
   * Get isActivated
   * @return isActivated
   */
  @javax.annotation.Nullable
  public Boolean getIsActivated() {
    return isActivated;
  }

  public void setIsActivated(Boolean isActivated) {
    this.isActivated = isActivated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypeSummary typeSummary = (TypeSummary) o;
    return Objects.equals(this.type, typeSummary.type) &&
        Objects.equals(this.typeName, typeSummary.typeName) &&
        Objects.equals(this.defaultVersionId, typeSummary.defaultVersionId) &&
        Objects.equals(this.typeArn, typeSummary.typeArn) &&
        Objects.equals(this.lastUpdated, typeSummary.lastUpdated) &&
        Objects.equals(this.description, typeSummary.description) &&
        Objects.equals(this.publisherId, typeSummary.publisherId) &&
        Objects.equals(this.originalTypeName, typeSummary.originalTypeName) &&
        Objects.equals(this.publicVersionNumber, typeSummary.publicVersionNumber) &&
        Objects.equals(this.latestPublicVersion, typeSummary.latestPublicVersion) &&
        Objects.equals(this.publisherIdentity, typeSummary.publisherIdentity) &&
        Objects.equals(this.publisherName, typeSummary.publisherName) &&
        Objects.equals(this.isActivated, typeSummary.isActivated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, typeName, defaultVersionId, typeArn, lastUpdated, description, publisherId, originalTypeName, publicVersionNumber, latestPublicVersion, publisherIdentity, publisherName, isActivated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypeSummary {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    defaultVersionId: ").append(toIndentedString(defaultVersionId)).append("\n");
    sb.append("    typeArn: ").append(toIndentedString(typeArn)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    publisherId: ").append(toIndentedString(publisherId)).append("\n");
    sb.append("    originalTypeName: ").append(toIndentedString(originalTypeName)).append("\n");
    sb.append("    publicVersionNumber: ").append(toIndentedString(publicVersionNumber)).append("\n");
    sb.append("    latestPublicVersion: ").append(toIndentedString(latestPublicVersion)).append("\n");
    sb.append("    publisherIdentity: ").append(toIndentedString(publisherIdentity)).append("\n");
    sb.append("    publisherName: ").append(toIndentedString(publisherName)).append("\n");
    sb.append("    isActivated: ").append(toIndentedString(isActivated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("TypeName");
    openapiFields.add("DefaultVersionId");
    openapiFields.add("TypeArn");
    openapiFields.add("LastUpdated");
    openapiFields.add("Description");
    openapiFields.add("PublisherId");
    openapiFields.add("OriginalTypeName");
    openapiFields.add("PublicVersionNumber");
    openapiFields.add("LatestPublicVersion");
    openapiFields.add("PublisherIdentity");
    openapiFields.add("PublisherName");
    openapiFields.add("IsActivated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypeSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypeSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypeSummary is not found in the empty JSON string", TypeSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypeSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypeSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        RegistryType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `TypeName`
      if (jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeName"));
      }
      // validate the optional field `DefaultVersionId`
      if (jsonObj.get("DefaultVersionId") != null && !jsonObj.get("DefaultVersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultVersionId"));
      }
      // validate the optional field `TypeArn`
      if (jsonObj.get("TypeArn") != null && !jsonObj.get("TypeArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeArn"));
      }
      // validate the optional field `LastUpdated`
      if (jsonObj.get("LastUpdated") != null && !jsonObj.get("LastUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdated"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `PublisherId`
      if (jsonObj.get("PublisherId") != null && !jsonObj.get("PublisherId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublisherId"));
      }
      // validate the optional field `OriginalTypeName`
      if (jsonObj.get("OriginalTypeName") != null && !jsonObj.get("OriginalTypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OriginalTypeName"));
      }
      // validate the optional field `PublicVersionNumber`
      if (jsonObj.get("PublicVersionNumber") != null && !jsonObj.get("PublicVersionNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublicVersionNumber"));
      }
      // validate the optional field `LatestPublicVersion`
      if (jsonObj.get("LatestPublicVersion") != null && !jsonObj.get("LatestPublicVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LatestPublicVersion"));
      }
      // validate the optional field `PublisherIdentity`
      if (jsonObj.get("PublisherIdentity") != null && !jsonObj.get("PublisherIdentity").isJsonNull()) {
        IdentityProvider.validateJsonElement(jsonObj.get("PublisherIdentity"));
      }
      // validate the optional field `PublisherName`
      if (jsonObj.get("PublisherName") != null && !jsonObj.get("PublisherName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublisherName"));
      }
      // validate the optional field `IsActivated`
      if (jsonObj.get("IsActivated") != null && !jsonObj.get("IsActivated").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsActivated"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypeSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypeSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypeSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypeSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TypeSummary>() {
           @Override
           public void write(JsonWriter out, TypeSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypeSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypeSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypeSummary
   * @throws IOException if the JSON string is invalid with respect to TypeSummary
   */
  public static TypeSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypeSummary.class);
  }

  /**
   * Convert an instance of TypeSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

