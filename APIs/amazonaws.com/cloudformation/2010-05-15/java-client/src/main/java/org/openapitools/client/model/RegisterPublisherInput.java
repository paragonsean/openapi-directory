/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterPublisherInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterPublisherInput {
  public static final String SERIALIZED_NAME_ACCEPT_TERMS_AND_CONDITIONS = "AcceptTermsAndConditions";
  @SerializedName(SERIALIZED_NAME_ACCEPT_TERMS_AND_CONDITIONS)
  private Boolean acceptTermsAndConditions;

  public static final String SERIALIZED_NAME_CONNECTION_ARN = "ConnectionArn";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ARN)
  private String connectionArn;

  public RegisterPublisherInput() {
  }

  public RegisterPublisherInput acceptTermsAndConditions(Boolean acceptTermsAndConditions) {
    this.acceptTermsAndConditions = acceptTermsAndConditions;
    return this;
  }

  /**
   * Get acceptTermsAndConditions
   * @return acceptTermsAndConditions
   */
  @javax.annotation.Nullable
  public Boolean getAcceptTermsAndConditions() {
    return acceptTermsAndConditions;
  }

  public void setAcceptTermsAndConditions(Boolean acceptTermsAndConditions) {
    this.acceptTermsAndConditions = acceptTermsAndConditions;
  }


  public RegisterPublisherInput connectionArn(String connectionArn) {
    this.connectionArn = connectionArn;
    return this;
  }

  /**
   * Get connectionArn
   * @return connectionArn
   */
  @javax.annotation.Nullable
  public String getConnectionArn() {
    return connectionArn;
  }

  public void setConnectionArn(String connectionArn) {
    this.connectionArn = connectionArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterPublisherInput registerPublisherInput = (RegisterPublisherInput) o;
    return Objects.equals(this.acceptTermsAndConditions, registerPublisherInput.acceptTermsAndConditions) &&
        Objects.equals(this.connectionArn, registerPublisherInput.connectionArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptTermsAndConditions, connectionArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterPublisherInput {\n");
    sb.append("    acceptTermsAndConditions: ").append(toIndentedString(acceptTermsAndConditions)).append("\n");
    sb.append("    connectionArn: ").append(toIndentedString(connectionArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcceptTermsAndConditions");
    openapiFields.add("ConnectionArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterPublisherInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterPublisherInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterPublisherInput is not found in the empty JSON string", RegisterPublisherInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterPublisherInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterPublisherInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AcceptTermsAndConditions`
      if (jsonObj.get("AcceptTermsAndConditions") != null && !jsonObj.get("AcceptTermsAndConditions").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AcceptTermsAndConditions"));
      }
      // validate the optional field `ConnectionArn`
      if (jsonObj.get("ConnectionArn") != null && !jsonObj.get("ConnectionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectionArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterPublisherInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterPublisherInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterPublisherInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterPublisherInput.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterPublisherInput>() {
           @Override
           public void write(JsonWriter out, RegisterPublisherInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterPublisherInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterPublisherInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterPublisherInput
   * @throws IOException if the JSON string is invalid with respect to RegisterPublisherInput
   */
  public static RegisterPublisherInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterPublisherInput.class);
  }

  /**
   * Convert an instance of RegisterPublisherInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

