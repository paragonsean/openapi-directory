/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChangeSetHooksStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeChangeSetHooksOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeChangeSetHooksOutput {
  public static final String SERIALIZED_NAME_CHANGE_SET_ID = "ChangeSetId";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET_ID)
  private String changeSetId;

  public static final String SERIALIZED_NAME_CHANGE_SET_NAME = "ChangeSetName";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET_NAME)
  private String changeSetName;

  public static final String SERIALIZED_NAME_HOOKS = "Hooks";
  @SerializedName(SERIALIZED_NAME_HOOKS)
  private List hooks;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ChangeSetHooksStatus status;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_STACK_NAME = "StackName";
  @SerializedName(SERIALIZED_NAME_STACK_NAME)
  private String stackName;

  public DescribeChangeSetHooksOutput() {
  }

  public DescribeChangeSetHooksOutput changeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
    return this;
  }

  /**
   * Get changeSetId
   * @return changeSetId
   */
  @javax.annotation.Nullable
  public String getChangeSetId() {
    return changeSetId;
  }

  public void setChangeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
  }


  public DescribeChangeSetHooksOutput changeSetName(String changeSetName) {
    this.changeSetName = changeSetName;
    return this;
  }

  /**
   * Get changeSetName
   * @return changeSetName
   */
  @javax.annotation.Nullable
  public String getChangeSetName() {
    return changeSetName;
  }

  public void setChangeSetName(String changeSetName) {
    this.changeSetName = changeSetName;
  }


  public DescribeChangeSetHooksOutput hooks(List hooks) {
    this.hooks = hooks;
    return this;
  }

  /**
   * Get hooks
   * @return hooks
   */
  @javax.annotation.Nullable
  public List getHooks() {
    return hooks;
  }

  public void setHooks(List hooks) {
    this.hooks = hooks;
  }


  public DescribeChangeSetHooksOutput status(ChangeSetHooksStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ChangeSetHooksStatus getStatus() {
    return status;
  }

  public void setStatus(ChangeSetHooksStatus status) {
    this.status = status;
  }


  public DescribeChangeSetHooksOutput nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public DescribeChangeSetHooksOutput stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nullable
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public DescribeChangeSetHooksOutput stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

  /**
   * Get stackName
   * @return stackName
   */
  @javax.annotation.Nullable
  public String getStackName() {
    return stackName;
  }

  public void setStackName(String stackName) {
    this.stackName = stackName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeChangeSetHooksOutput describeChangeSetHooksOutput = (DescribeChangeSetHooksOutput) o;
    return Objects.equals(this.changeSetId, describeChangeSetHooksOutput.changeSetId) &&
        Objects.equals(this.changeSetName, describeChangeSetHooksOutput.changeSetName) &&
        Objects.equals(this.hooks, describeChangeSetHooksOutput.hooks) &&
        Objects.equals(this.status, describeChangeSetHooksOutput.status) &&
        Objects.equals(this.nextToken, describeChangeSetHooksOutput.nextToken) &&
        Objects.equals(this.stackId, describeChangeSetHooksOutput.stackId) &&
        Objects.equals(this.stackName, describeChangeSetHooksOutput.stackName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeSetId, changeSetName, hooks, status, nextToken, stackId, stackName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeChangeSetHooksOutput {\n");
    sb.append("    changeSetId: ").append(toIndentedString(changeSetId)).append("\n");
    sb.append("    changeSetName: ").append(toIndentedString(changeSetName)).append("\n");
    sb.append("    hooks: ").append(toIndentedString(hooks)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChangeSetId");
    openapiFields.add("ChangeSetName");
    openapiFields.add("Hooks");
    openapiFields.add("Status");
    openapiFields.add("NextToken");
    openapiFields.add("StackId");
    openapiFields.add("StackName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeChangeSetHooksOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeChangeSetHooksOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeChangeSetHooksOutput is not found in the empty JSON string", DescribeChangeSetHooksOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeChangeSetHooksOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeChangeSetHooksOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChangeSetId`
      if (jsonObj.get("ChangeSetId") != null && !jsonObj.get("ChangeSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeSetId"));
      }
      // validate the optional field `ChangeSetName`
      if (jsonObj.get("ChangeSetName") != null && !jsonObj.get("ChangeSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeSetName"));
      }
      // validate the optional field `Hooks`
      if (jsonObj.get("Hooks") != null && !jsonObj.get("Hooks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Hooks"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ChangeSetHooksStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `StackId`
      if (jsonObj.get("StackId") != null && !jsonObj.get("StackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackId"));
      }
      // validate the optional field `StackName`
      if (jsonObj.get("StackName") != null && !jsonObj.get("StackName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeChangeSetHooksOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeChangeSetHooksOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeChangeSetHooksOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeChangeSetHooksOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeChangeSetHooksOutput>() {
           @Override
           public void write(JsonWriter out, DescribeChangeSetHooksOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeChangeSetHooksOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeChangeSetHooksOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeChangeSetHooksOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeChangeSetHooksOutput
   */
  public static DescribeChangeSetHooksOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeChangeSetHooksOutput.class);
  }

  /**
   * Convert an instance of DescribeChangeSetHooksOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

