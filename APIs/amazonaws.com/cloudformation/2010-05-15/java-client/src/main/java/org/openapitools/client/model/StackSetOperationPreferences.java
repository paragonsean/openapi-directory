/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RegionConcurrencyType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackSetOperationPreferences {
  public static final String SERIALIZED_NAME_REGION_CONCURRENCY_TYPE = "RegionConcurrencyType";
  @SerializedName(SERIALIZED_NAME_REGION_CONCURRENCY_TYPE)
  private RegionConcurrencyType regionConcurrencyType;

  public static final String SERIALIZED_NAME_REGION_ORDER = "RegionOrder";
  @SerializedName(SERIALIZED_NAME_REGION_ORDER)
  private List regionOrder;

  public static final String SERIALIZED_NAME_FAILURE_TOLERANCE_COUNT = "FailureToleranceCount";
  @SerializedName(SERIALIZED_NAME_FAILURE_TOLERANCE_COUNT)
  private Integer failureToleranceCount;

  public static final String SERIALIZED_NAME_FAILURE_TOLERANCE_PERCENTAGE = "FailureTolerancePercentage";
  @SerializedName(SERIALIZED_NAME_FAILURE_TOLERANCE_PERCENTAGE)
  private Integer failureTolerancePercentage;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_COUNT = "MaxConcurrentCount";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_COUNT)
  private Integer maxConcurrentCount;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_PERCENTAGE = "MaxConcurrentPercentage";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_PERCENTAGE)
  private Integer maxConcurrentPercentage;

  public StackSetOperationPreferences() {
  }

  public StackSetOperationPreferences regionConcurrencyType(RegionConcurrencyType regionConcurrencyType) {
    this.regionConcurrencyType = regionConcurrencyType;
    return this;
  }

  /**
   * Get regionConcurrencyType
   * @return regionConcurrencyType
   */
  @javax.annotation.Nullable
  public RegionConcurrencyType getRegionConcurrencyType() {
    return regionConcurrencyType;
  }

  public void setRegionConcurrencyType(RegionConcurrencyType regionConcurrencyType) {
    this.regionConcurrencyType = regionConcurrencyType;
  }


  public StackSetOperationPreferences regionOrder(List regionOrder) {
    this.regionOrder = regionOrder;
    return this;
  }

  /**
   * Get regionOrder
   * @return regionOrder
   */
  @javax.annotation.Nullable
  public List getRegionOrder() {
    return regionOrder;
  }

  public void setRegionOrder(List regionOrder) {
    this.regionOrder = regionOrder;
  }


  public StackSetOperationPreferences failureToleranceCount(Integer failureToleranceCount) {
    this.failureToleranceCount = failureToleranceCount;
    return this;
  }

  /**
   * Get failureToleranceCount
   * @return failureToleranceCount
   */
  @javax.annotation.Nullable
  public Integer getFailureToleranceCount() {
    return failureToleranceCount;
  }

  public void setFailureToleranceCount(Integer failureToleranceCount) {
    this.failureToleranceCount = failureToleranceCount;
  }


  public StackSetOperationPreferences failureTolerancePercentage(Integer failureTolerancePercentage) {
    this.failureTolerancePercentage = failureTolerancePercentage;
    return this;
  }

  /**
   * Get failureTolerancePercentage
   * @return failureTolerancePercentage
   */
  @javax.annotation.Nullable
  public Integer getFailureTolerancePercentage() {
    return failureTolerancePercentage;
  }

  public void setFailureTolerancePercentage(Integer failureTolerancePercentage) {
    this.failureTolerancePercentage = failureTolerancePercentage;
  }


  public StackSetOperationPreferences maxConcurrentCount(Integer maxConcurrentCount) {
    this.maxConcurrentCount = maxConcurrentCount;
    return this;
  }

  /**
   * Get maxConcurrentCount
   * @return maxConcurrentCount
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentCount() {
    return maxConcurrentCount;
  }

  public void setMaxConcurrentCount(Integer maxConcurrentCount) {
    this.maxConcurrentCount = maxConcurrentCount;
  }


  public StackSetOperationPreferences maxConcurrentPercentage(Integer maxConcurrentPercentage) {
    this.maxConcurrentPercentage = maxConcurrentPercentage;
    return this;
  }

  /**
   * Get maxConcurrentPercentage
   * @return maxConcurrentPercentage
   */
  @javax.annotation.Nullable
  public Integer getMaxConcurrentPercentage() {
    return maxConcurrentPercentage;
  }

  public void setMaxConcurrentPercentage(Integer maxConcurrentPercentage) {
    this.maxConcurrentPercentage = maxConcurrentPercentage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackSetOperationPreferences stackSetOperationPreferences = (StackSetOperationPreferences) o;
    return Objects.equals(this.regionConcurrencyType, stackSetOperationPreferences.regionConcurrencyType) &&
        Objects.equals(this.regionOrder, stackSetOperationPreferences.regionOrder) &&
        Objects.equals(this.failureToleranceCount, stackSetOperationPreferences.failureToleranceCount) &&
        Objects.equals(this.failureTolerancePercentage, stackSetOperationPreferences.failureTolerancePercentage) &&
        Objects.equals(this.maxConcurrentCount, stackSetOperationPreferences.maxConcurrentCount) &&
        Objects.equals(this.maxConcurrentPercentage, stackSetOperationPreferences.maxConcurrentPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(regionConcurrencyType, regionOrder, failureToleranceCount, failureTolerancePercentage, maxConcurrentCount, maxConcurrentPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackSetOperationPreferences {\n");
    sb.append("    regionConcurrencyType: ").append(toIndentedString(regionConcurrencyType)).append("\n");
    sb.append("    regionOrder: ").append(toIndentedString(regionOrder)).append("\n");
    sb.append("    failureToleranceCount: ").append(toIndentedString(failureToleranceCount)).append("\n");
    sb.append("    failureTolerancePercentage: ").append(toIndentedString(failureTolerancePercentage)).append("\n");
    sb.append("    maxConcurrentCount: ").append(toIndentedString(maxConcurrentCount)).append("\n");
    sb.append("    maxConcurrentPercentage: ").append(toIndentedString(maxConcurrentPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RegionConcurrencyType");
    openapiFields.add("RegionOrder");
    openapiFields.add("FailureToleranceCount");
    openapiFields.add("FailureTolerancePercentage");
    openapiFields.add("MaxConcurrentCount");
    openapiFields.add("MaxConcurrentPercentage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackSetOperationPreferences
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackSetOperationPreferences.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackSetOperationPreferences is not found in the empty JSON string", StackSetOperationPreferences.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackSetOperationPreferences.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackSetOperationPreferences` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RegionConcurrencyType`
      if (jsonObj.get("RegionConcurrencyType") != null && !jsonObj.get("RegionConcurrencyType").isJsonNull()) {
        RegionConcurrencyType.validateJsonElement(jsonObj.get("RegionConcurrencyType"));
      }
      // validate the optional field `RegionOrder`
      if (jsonObj.get("RegionOrder") != null && !jsonObj.get("RegionOrder").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RegionOrder"));
      }
      // validate the optional field `FailureToleranceCount`
      if (jsonObj.get("FailureToleranceCount") != null && !jsonObj.get("FailureToleranceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailureToleranceCount"));
      }
      // validate the optional field `FailureTolerancePercentage`
      if (jsonObj.get("FailureTolerancePercentage") != null && !jsonObj.get("FailureTolerancePercentage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailureTolerancePercentage"));
      }
      // validate the optional field `MaxConcurrentCount`
      if (jsonObj.get("MaxConcurrentCount") != null && !jsonObj.get("MaxConcurrentCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxConcurrentCount"));
      }
      // validate the optional field `MaxConcurrentPercentage`
      if (jsonObj.get("MaxConcurrentPercentage") != null && !jsonObj.get("MaxConcurrentPercentage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxConcurrentPercentage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackSetOperationPreferences.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackSetOperationPreferences' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackSetOperationPreferences> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackSetOperationPreferences.class));

       return (TypeAdapter<T>) new TypeAdapter<StackSetOperationPreferences>() {
           @Override
           public void write(JsonWriter out, StackSetOperationPreferences value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackSetOperationPreferences read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackSetOperationPreferences given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackSetOperationPreferences
   * @throws IOException if the JSON string is invalid with respect to StackSetOperationPreferences
   */
  public static StackSetOperationPreferences fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackSetOperationPreferences.class);
  }

  /**
   * Convert an instance of StackSetOperationPreferences to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

