/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateStackSetInputManagedExecution;
import org.openapitools.client.model.PermissionModels;
import org.openapitools.client.model.StackSetAutoDeployment;
import org.openapitools.client.model.StackSetStackSetDriftDetectionDetails;
import org.openapitools.client.model.StackSetStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeStackSetOutputStackSet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeStackSetOutputStackSet {
  public static final String SERIALIZED_NAME_STACK_SET_NAME = "StackSetName";
  @SerializedName(SERIALIZED_NAME_STACK_SET_NAME)
  private String stackSetName;

  public static final String SERIALIZED_NAME_STACK_SET_ID = "StackSetId";
  @SerializedName(SERIALIZED_NAME_STACK_SET_ID)
  private String stackSetId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StackSetStatus status;

  public static final String SERIALIZED_NAME_TEMPLATE_BODY = "TemplateBody";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_BODY)
  private String templateBody;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List parameters;

  public static final String SERIALIZED_NAME_CAPABILITIES = "Capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List capabilities;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_STACK_SET_A_R_N = "StackSetARN";
  @SerializedName(SERIALIZED_NAME_STACK_SET_A_R_N)
  private String stackSetARN;

  public static final String SERIALIZED_NAME_ADMINISTRATION_ROLE_A_R_N = "AdministrationRoleARN";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATION_ROLE_A_R_N)
  private String administrationRoleARN;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_NAME = "ExecutionRoleName";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_NAME)
  private String executionRoleName;

  public static final String SERIALIZED_NAME_STACK_SET_DRIFT_DETECTION_DETAILS = "StackSetDriftDetectionDetails";
  @SerializedName(SERIALIZED_NAME_STACK_SET_DRIFT_DETECTION_DETAILS)
  private StackSetStackSetDriftDetectionDetails stackSetDriftDetectionDetails;

  public static final String SERIALIZED_NAME_AUTO_DEPLOYMENT = "AutoDeployment";
  @SerializedName(SERIALIZED_NAME_AUTO_DEPLOYMENT)
  private StackSetAutoDeployment autoDeployment;

  public static final String SERIALIZED_NAME_PERMISSION_MODEL = "PermissionModel";
  @SerializedName(SERIALIZED_NAME_PERMISSION_MODEL)
  private PermissionModels permissionModel;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNIT_IDS = "OrganizationalUnitIds";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNIT_IDS)
  private List organizationalUnitIds;

  public static final String SERIALIZED_NAME_MANAGED_EXECUTION = "ManagedExecution";
  @SerializedName(SERIALIZED_NAME_MANAGED_EXECUTION)
  private CreateStackSetInputManagedExecution managedExecution;

  public static final String SERIALIZED_NAME_REGIONS = "Regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List regions;

  public DescribeStackSetOutputStackSet() {
  }

  public DescribeStackSetOutputStackSet stackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
    return this;
  }

  /**
   * Get stackSetName
   * @return stackSetName
   */
  @javax.annotation.Nullable
  public String getStackSetName() {
    return stackSetName;
  }

  public void setStackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
  }


  public DescribeStackSetOutputStackSet stackSetId(String stackSetId) {
    this.stackSetId = stackSetId;
    return this;
  }

  /**
   * Get stackSetId
   * @return stackSetId
   */
  @javax.annotation.Nullable
  public String getStackSetId() {
    return stackSetId;
  }

  public void setStackSetId(String stackSetId) {
    this.stackSetId = stackSetId;
  }


  public DescribeStackSetOutputStackSet description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeStackSetOutputStackSet status(StackSetStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StackSetStatus getStatus() {
    return status;
  }

  public void setStatus(StackSetStatus status) {
    this.status = status;
  }


  public DescribeStackSetOutputStackSet templateBody(String templateBody) {
    this.templateBody = templateBody;
    return this;
  }

  /**
   * Get templateBody
   * @return templateBody
   */
  @javax.annotation.Nullable
  public String getTemplateBody() {
    return templateBody;
  }

  public void setTemplateBody(String templateBody) {
    this.templateBody = templateBody;
  }


  public DescribeStackSetOutputStackSet parameters(List parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List getParameters() {
    return parameters;
  }

  public void setParameters(List parameters) {
    this.parameters = parameters;
  }


  public DescribeStackSetOutputStackSet capabilities(List capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List capabilities) {
    this.capabilities = capabilities;
  }


  public DescribeStackSetOutputStackSet tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public DescribeStackSetOutputStackSet stackSetARN(String stackSetARN) {
    this.stackSetARN = stackSetARN;
    return this;
  }

  /**
   * Get stackSetARN
   * @return stackSetARN
   */
  @javax.annotation.Nullable
  public String getStackSetARN() {
    return stackSetARN;
  }

  public void setStackSetARN(String stackSetARN) {
    this.stackSetARN = stackSetARN;
  }


  public DescribeStackSetOutputStackSet administrationRoleARN(String administrationRoleARN) {
    this.administrationRoleARN = administrationRoleARN;
    return this;
  }

  /**
   * Get administrationRoleARN
   * @return administrationRoleARN
   */
  @javax.annotation.Nullable
  public String getAdministrationRoleARN() {
    return administrationRoleARN;
  }

  public void setAdministrationRoleARN(String administrationRoleARN) {
    this.administrationRoleARN = administrationRoleARN;
  }


  public DescribeStackSetOutputStackSet executionRoleName(String executionRoleName) {
    this.executionRoleName = executionRoleName;
    return this;
  }

  /**
   * Get executionRoleName
   * @return executionRoleName
   */
  @javax.annotation.Nullable
  public String getExecutionRoleName() {
    return executionRoleName;
  }

  public void setExecutionRoleName(String executionRoleName) {
    this.executionRoleName = executionRoleName;
  }


  public DescribeStackSetOutputStackSet stackSetDriftDetectionDetails(StackSetStackSetDriftDetectionDetails stackSetDriftDetectionDetails) {
    this.stackSetDriftDetectionDetails = stackSetDriftDetectionDetails;
    return this;
  }

  /**
   * Get stackSetDriftDetectionDetails
   * @return stackSetDriftDetectionDetails
   */
  @javax.annotation.Nullable
  public StackSetStackSetDriftDetectionDetails getStackSetDriftDetectionDetails() {
    return stackSetDriftDetectionDetails;
  }

  public void setStackSetDriftDetectionDetails(StackSetStackSetDriftDetectionDetails stackSetDriftDetectionDetails) {
    this.stackSetDriftDetectionDetails = stackSetDriftDetectionDetails;
  }


  public DescribeStackSetOutputStackSet autoDeployment(StackSetAutoDeployment autoDeployment) {
    this.autoDeployment = autoDeployment;
    return this;
  }

  /**
   * Get autoDeployment
   * @return autoDeployment
   */
  @javax.annotation.Nullable
  public StackSetAutoDeployment getAutoDeployment() {
    return autoDeployment;
  }

  public void setAutoDeployment(StackSetAutoDeployment autoDeployment) {
    this.autoDeployment = autoDeployment;
  }


  public DescribeStackSetOutputStackSet permissionModel(PermissionModels permissionModel) {
    this.permissionModel = permissionModel;
    return this;
  }

  /**
   * Get permissionModel
   * @return permissionModel
   */
  @javax.annotation.Nullable
  public PermissionModels getPermissionModel() {
    return permissionModel;
  }

  public void setPermissionModel(PermissionModels permissionModel) {
    this.permissionModel = permissionModel;
  }


  public DescribeStackSetOutputStackSet organizationalUnitIds(List organizationalUnitIds) {
    this.organizationalUnitIds = organizationalUnitIds;
    return this;
  }

  /**
   * Get organizationalUnitIds
   * @return organizationalUnitIds
   */
  @javax.annotation.Nullable
  public List getOrganizationalUnitIds() {
    return organizationalUnitIds;
  }

  public void setOrganizationalUnitIds(List organizationalUnitIds) {
    this.organizationalUnitIds = organizationalUnitIds;
  }


  public DescribeStackSetOutputStackSet managedExecution(CreateStackSetInputManagedExecution managedExecution) {
    this.managedExecution = managedExecution;
    return this;
  }

  /**
   * Get managedExecution
   * @return managedExecution
   */
  @javax.annotation.Nullable
  public CreateStackSetInputManagedExecution getManagedExecution() {
    return managedExecution;
  }

  public void setManagedExecution(CreateStackSetInputManagedExecution managedExecution) {
    this.managedExecution = managedExecution;
  }


  public DescribeStackSetOutputStackSet regions(List regions) {
    this.regions = regions;
    return this;
  }

  /**
   * Get regions
   * @return regions
   */
  @javax.annotation.Nullable
  public List getRegions() {
    return regions;
  }

  public void setRegions(List regions) {
    this.regions = regions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeStackSetOutputStackSet describeStackSetOutputStackSet = (DescribeStackSetOutputStackSet) o;
    return Objects.equals(this.stackSetName, describeStackSetOutputStackSet.stackSetName) &&
        Objects.equals(this.stackSetId, describeStackSetOutputStackSet.stackSetId) &&
        Objects.equals(this.description, describeStackSetOutputStackSet.description) &&
        Objects.equals(this.status, describeStackSetOutputStackSet.status) &&
        Objects.equals(this.templateBody, describeStackSetOutputStackSet.templateBody) &&
        Objects.equals(this.parameters, describeStackSetOutputStackSet.parameters) &&
        Objects.equals(this.capabilities, describeStackSetOutputStackSet.capabilities) &&
        Objects.equals(this.tags, describeStackSetOutputStackSet.tags) &&
        Objects.equals(this.stackSetARN, describeStackSetOutputStackSet.stackSetARN) &&
        Objects.equals(this.administrationRoleARN, describeStackSetOutputStackSet.administrationRoleARN) &&
        Objects.equals(this.executionRoleName, describeStackSetOutputStackSet.executionRoleName) &&
        Objects.equals(this.stackSetDriftDetectionDetails, describeStackSetOutputStackSet.stackSetDriftDetectionDetails) &&
        Objects.equals(this.autoDeployment, describeStackSetOutputStackSet.autoDeployment) &&
        Objects.equals(this.permissionModel, describeStackSetOutputStackSet.permissionModel) &&
        Objects.equals(this.organizationalUnitIds, describeStackSetOutputStackSet.organizationalUnitIds) &&
        Objects.equals(this.managedExecution, describeStackSetOutputStackSet.managedExecution) &&
        Objects.equals(this.regions, describeStackSetOutputStackSet.regions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackSetName, stackSetId, description, status, templateBody, parameters, capabilities, tags, stackSetARN, administrationRoleARN, executionRoleName, stackSetDriftDetectionDetails, autoDeployment, permissionModel, organizationalUnitIds, managedExecution, regions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeStackSetOutputStackSet {\n");
    sb.append("    stackSetName: ").append(toIndentedString(stackSetName)).append("\n");
    sb.append("    stackSetId: ").append(toIndentedString(stackSetId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    templateBody: ").append(toIndentedString(templateBody)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    stackSetARN: ").append(toIndentedString(stackSetARN)).append("\n");
    sb.append("    administrationRoleARN: ").append(toIndentedString(administrationRoleARN)).append("\n");
    sb.append("    executionRoleName: ").append(toIndentedString(executionRoleName)).append("\n");
    sb.append("    stackSetDriftDetectionDetails: ").append(toIndentedString(stackSetDriftDetectionDetails)).append("\n");
    sb.append("    autoDeployment: ").append(toIndentedString(autoDeployment)).append("\n");
    sb.append("    permissionModel: ").append(toIndentedString(permissionModel)).append("\n");
    sb.append("    organizationalUnitIds: ").append(toIndentedString(organizationalUnitIds)).append("\n");
    sb.append("    managedExecution: ").append(toIndentedString(managedExecution)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackSetName");
    openapiFields.add("StackSetId");
    openapiFields.add("Description");
    openapiFields.add("Status");
    openapiFields.add("TemplateBody");
    openapiFields.add("Parameters");
    openapiFields.add("Capabilities");
    openapiFields.add("Tags");
    openapiFields.add("StackSetARN");
    openapiFields.add("AdministrationRoleARN");
    openapiFields.add("ExecutionRoleName");
    openapiFields.add("StackSetDriftDetectionDetails");
    openapiFields.add("AutoDeployment");
    openapiFields.add("PermissionModel");
    openapiFields.add("OrganizationalUnitIds");
    openapiFields.add("ManagedExecution");
    openapiFields.add("Regions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeStackSetOutputStackSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeStackSetOutputStackSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeStackSetOutputStackSet is not found in the empty JSON string", DescribeStackSetOutputStackSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeStackSetOutputStackSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeStackSetOutputStackSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StackSetName`
      if (jsonObj.get("StackSetName") != null && !jsonObj.get("StackSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackSetName"));
      }
      // validate the optional field `StackSetId`
      if (jsonObj.get("StackSetId") != null && !jsonObj.get("StackSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackSetId"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StackSetStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `TemplateBody`
      if (jsonObj.get("TemplateBody") != null && !jsonObj.get("TemplateBody").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TemplateBody"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `Capabilities`
      if (jsonObj.get("Capabilities") != null && !jsonObj.get("Capabilities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Capabilities"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `StackSetARN`
      if (jsonObj.get("StackSetARN") != null && !jsonObj.get("StackSetARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackSetARN"));
      }
      // validate the optional field `AdministrationRoleARN`
      if (jsonObj.get("AdministrationRoleARN") != null && !jsonObj.get("AdministrationRoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AdministrationRoleARN"));
      }
      // validate the optional field `ExecutionRoleName`
      if (jsonObj.get("ExecutionRoleName") != null && !jsonObj.get("ExecutionRoleName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutionRoleName"));
      }
      // validate the optional field `StackSetDriftDetectionDetails`
      if (jsonObj.get("StackSetDriftDetectionDetails") != null && !jsonObj.get("StackSetDriftDetectionDetails").isJsonNull()) {
        StackSetStackSetDriftDetectionDetails.validateJsonElement(jsonObj.get("StackSetDriftDetectionDetails"));
      }
      // validate the optional field `AutoDeployment`
      if (jsonObj.get("AutoDeployment") != null && !jsonObj.get("AutoDeployment").isJsonNull()) {
        StackSetAutoDeployment.validateJsonElement(jsonObj.get("AutoDeployment"));
      }
      // validate the optional field `PermissionModel`
      if (jsonObj.get("PermissionModel") != null && !jsonObj.get("PermissionModel").isJsonNull()) {
        PermissionModels.validateJsonElement(jsonObj.get("PermissionModel"));
      }
      // validate the optional field `OrganizationalUnitIds`
      if (jsonObj.get("OrganizationalUnitIds") != null && !jsonObj.get("OrganizationalUnitIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("OrganizationalUnitIds"));
      }
      // validate the optional field `ManagedExecution`
      if (jsonObj.get("ManagedExecution") != null && !jsonObj.get("ManagedExecution").isJsonNull()) {
        CreateStackSetInputManagedExecution.validateJsonElement(jsonObj.get("ManagedExecution"));
      }
      // validate the optional field `Regions`
      if (jsonObj.get("Regions") != null && !jsonObj.get("Regions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Regions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeStackSetOutputStackSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeStackSetOutputStackSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeStackSetOutputStackSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeStackSetOutputStackSet.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeStackSetOutputStackSet>() {
           @Override
           public void write(JsonWriter out, DescribeStackSetOutputStackSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeStackSetOutputStackSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeStackSetOutputStackSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeStackSetOutputStackSet
   * @throws IOException if the JSON string is invalid with respect to DescribeStackSetOutputStackSet
   */
  public static DescribeStackSetOutputStackSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeStackSetOutputStackSet.class);
  }

  /**
   * Convert an instance of DescribeStackSetOutputStackSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

