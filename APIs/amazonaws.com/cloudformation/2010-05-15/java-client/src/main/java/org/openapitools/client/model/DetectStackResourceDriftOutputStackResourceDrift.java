/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceChangeModuleInfo;
import org.openapitools.client.model.StackResourceDriftStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DetectStackResourceDriftOutputStackResourceDrift
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetectStackResourceDriftOutputStackResourceDrift {
  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_LOGICAL_RESOURCE_ID = "LogicalResourceId";
  @SerializedName(SERIALIZED_NAME_LOGICAL_RESOURCE_ID)
  private String logicalResourceId;

  public static final String SERIALIZED_NAME_PHYSICAL_RESOURCE_ID = "PhysicalResourceId";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_RESOURCE_ID)
  private String physicalResourceId;

  public static final String SERIALIZED_NAME_PHYSICAL_RESOURCE_ID_CONTEXT = "PhysicalResourceIdContext";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_RESOURCE_ID_CONTEXT)
  private List physicalResourceIdContext;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_EXPECTED_PROPERTIES = "ExpectedProperties";
  @SerializedName(SERIALIZED_NAME_EXPECTED_PROPERTIES)
  private String expectedProperties;

  public static final String SERIALIZED_NAME_ACTUAL_PROPERTIES = "ActualProperties";
  @SerializedName(SERIALIZED_NAME_ACTUAL_PROPERTIES)
  private String actualProperties;

  public static final String SERIALIZED_NAME_PROPERTY_DIFFERENCES = "PropertyDifferences";
  @SerializedName(SERIALIZED_NAME_PROPERTY_DIFFERENCES)
  private List propertyDifferences;

  public static final String SERIALIZED_NAME_STACK_RESOURCE_DRIFT_STATUS = "StackResourceDriftStatus";
  @SerializedName(SERIALIZED_NAME_STACK_RESOURCE_DRIFT_STATUS)
  private StackResourceDriftStatus stackResourceDriftStatus;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_MODULE_INFO = "ModuleInfo";
  @SerializedName(SERIALIZED_NAME_MODULE_INFO)
  private ResourceChangeModuleInfo moduleInfo;

  public DetectStackResourceDriftOutputStackResourceDrift() {
  }

  public DetectStackResourceDriftOutputStackResourceDrift stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nonnull
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public DetectStackResourceDriftOutputStackResourceDrift logicalResourceId(String logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
    return this;
  }

  /**
   * Get logicalResourceId
   * @return logicalResourceId
   */
  @javax.annotation.Nonnull
  public String getLogicalResourceId() {
    return logicalResourceId;
  }

  public void setLogicalResourceId(String logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
  }


  public DetectStackResourceDriftOutputStackResourceDrift physicalResourceId(String physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
    return this;
  }

  /**
   * Get physicalResourceId
   * @return physicalResourceId
   */
  @javax.annotation.Nullable
  public String getPhysicalResourceId() {
    return physicalResourceId;
  }

  public void setPhysicalResourceId(String physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
  }


  public DetectStackResourceDriftOutputStackResourceDrift physicalResourceIdContext(List physicalResourceIdContext) {
    this.physicalResourceIdContext = physicalResourceIdContext;
    return this;
  }

  /**
   * Get physicalResourceIdContext
   * @return physicalResourceIdContext
   */
  @javax.annotation.Nullable
  public List getPhysicalResourceIdContext() {
    return physicalResourceIdContext;
  }

  public void setPhysicalResourceIdContext(List physicalResourceIdContext) {
    this.physicalResourceIdContext = physicalResourceIdContext;
  }


  public DetectStackResourceDriftOutputStackResourceDrift resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public DetectStackResourceDriftOutputStackResourceDrift expectedProperties(String expectedProperties) {
    this.expectedProperties = expectedProperties;
    return this;
  }

  /**
   * Get expectedProperties
   * @return expectedProperties
   */
  @javax.annotation.Nullable
  public String getExpectedProperties() {
    return expectedProperties;
  }

  public void setExpectedProperties(String expectedProperties) {
    this.expectedProperties = expectedProperties;
  }


  public DetectStackResourceDriftOutputStackResourceDrift actualProperties(String actualProperties) {
    this.actualProperties = actualProperties;
    return this;
  }

  /**
   * Get actualProperties
   * @return actualProperties
   */
  @javax.annotation.Nullable
  public String getActualProperties() {
    return actualProperties;
  }

  public void setActualProperties(String actualProperties) {
    this.actualProperties = actualProperties;
  }


  public DetectStackResourceDriftOutputStackResourceDrift propertyDifferences(List propertyDifferences) {
    this.propertyDifferences = propertyDifferences;
    return this;
  }

  /**
   * Get propertyDifferences
   * @return propertyDifferences
   */
  @javax.annotation.Nullable
  public List getPropertyDifferences() {
    return propertyDifferences;
  }

  public void setPropertyDifferences(List propertyDifferences) {
    this.propertyDifferences = propertyDifferences;
  }


  public DetectStackResourceDriftOutputStackResourceDrift stackResourceDriftStatus(StackResourceDriftStatus stackResourceDriftStatus) {
    this.stackResourceDriftStatus = stackResourceDriftStatus;
    return this;
  }

  /**
   * Get stackResourceDriftStatus
   * @return stackResourceDriftStatus
   */
  @javax.annotation.Nonnull
  public StackResourceDriftStatus getStackResourceDriftStatus() {
    return stackResourceDriftStatus;
  }

  public void setStackResourceDriftStatus(StackResourceDriftStatus stackResourceDriftStatus) {
    this.stackResourceDriftStatus = stackResourceDriftStatus;
  }


  public DetectStackResourceDriftOutputStackResourceDrift timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public DetectStackResourceDriftOutputStackResourceDrift moduleInfo(ResourceChangeModuleInfo moduleInfo) {
    this.moduleInfo = moduleInfo;
    return this;
  }

  /**
   * Get moduleInfo
   * @return moduleInfo
   */
  @javax.annotation.Nullable
  public ResourceChangeModuleInfo getModuleInfo() {
    return moduleInfo;
  }

  public void setModuleInfo(ResourceChangeModuleInfo moduleInfo) {
    this.moduleInfo = moduleInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetectStackResourceDriftOutputStackResourceDrift detectStackResourceDriftOutputStackResourceDrift = (DetectStackResourceDriftOutputStackResourceDrift) o;
    return Objects.equals(this.stackId, detectStackResourceDriftOutputStackResourceDrift.stackId) &&
        Objects.equals(this.logicalResourceId, detectStackResourceDriftOutputStackResourceDrift.logicalResourceId) &&
        Objects.equals(this.physicalResourceId, detectStackResourceDriftOutputStackResourceDrift.physicalResourceId) &&
        Objects.equals(this.physicalResourceIdContext, detectStackResourceDriftOutputStackResourceDrift.physicalResourceIdContext) &&
        Objects.equals(this.resourceType, detectStackResourceDriftOutputStackResourceDrift.resourceType) &&
        Objects.equals(this.expectedProperties, detectStackResourceDriftOutputStackResourceDrift.expectedProperties) &&
        Objects.equals(this.actualProperties, detectStackResourceDriftOutputStackResourceDrift.actualProperties) &&
        Objects.equals(this.propertyDifferences, detectStackResourceDriftOutputStackResourceDrift.propertyDifferences) &&
        Objects.equals(this.stackResourceDriftStatus, detectStackResourceDriftOutputStackResourceDrift.stackResourceDriftStatus) &&
        Objects.equals(this.timestamp, detectStackResourceDriftOutputStackResourceDrift.timestamp) &&
        Objects.equals(this.moduleInfo, detectStackResourceDriftOutputStackResourceDrift.moduleInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackId, logicalResourceId, physicalResourceId, physicalResourceIdContext, resourceType, expectedProperties, actualProperties, propertyDifferences, stackResourceDriftStatus, timestamp, moduleInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetectStackResourceDriftOutputStackResourceDrift {\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    logicalResourceId: ").append(toIndentedString(logicalResourceId)).append("\n");
    sb.append("    physicalResourceId: ").append(toIndentedString(physicalResourceId)).append("\n");
    sb.append("    physicalResourceIdContext: ").append(toIndentedString(physicalResourceIdContext)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    expectedProperties: ").append(toIndentedString(expectedProperties)).append("\n");
    sb.append("    actualProperties: ").append(toIndentedString(actualProperties)).append("\n");
    sb.append("    propertyDifferences: ").append(toIndentedString(propertyDifferences)).append("\n");
    sb.append("    stackResourceDriftStatus: ").append(toIndentedString(stackResourceDriftStatus)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    moduleInfo: ").append(toIndentedString(moduleInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackId");
    openapiFields.add("LogicalResourceId");
    openapiFields.add("PhysicalResourceId");
    openapiFields.add("PhysicalResourceIdContext");
    openapiFields.add("ResourceType");
    openapiFields.add("ExpectedProperties");
    openapiFields.add("ActualProperties");
    openapiFields.add("PropertyDifferences");
    openapiFields.add("StackResourceDriftStatus");
    openapiFields.add("Timestamp");
    openapiFields.add("ModuleInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackId");
    openapiRequiredFields.add("LogicalResourceId");
    openapiRequiredFields.add("ResourceType");
    openapiRequiredFields.add("StackResourceDriftStatus");
    openapiRequiredFields.add("Timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetectStackResourceDriftOutputStackResourceDrift
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetectStackResourceDriftOutputStackResourceDrift.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetectStackResourceDriftOutputStackResourceDrift is not found in the empty JSON string", DetectStackResourceDriftOutputStackResourceDrift.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetectStackResourceDriftOutputStackResourceDrift.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetectStackResourceDriftOutputStackResourceDrift` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DetectStackResourceDriftOutputStackResourceDrift.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StackId`
      String.validateJsonElement(jsonObj.get("StackId"));
      // validate the required field `LogicalResourceId`
      String.validateJsonElement(jsonObj.get("LogicalResourceId"));
      // validate the optional field `PhysicalResourceId`
      if (jsonObj.get("PhysicalResourceId") != null && !jsonObj.get("PhysicalResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhysicalResourceId"));
      }
      // validate the optional field `PhysicalResourceIdContext`
      if (jsonObj.get("PhysicalResourceIdContext") != null && !jsonObj.get("PhysicalResourceIdContext").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PhysicalResourceIdContext"));
      }
      // validate the required field `ResourceType`
      String.validateJsonElement(jsonObj.get("ResourceType"));
      // validate the optional field `ExpectedProperties`
      if (jsonObj.get("ExpectedProperties") != null && !jsonObj.get("ExpectedProperties").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExpectedProperties"));
      }
      // validate the optional field `ActualProperties`
      if (jsonObj.get("ActualProperties") != null && !jsonObj.get("ActualProperties").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActualProperties"));
      }
      // validate the optional field `PropertyDifferences`
      if (jsonObj.get("PropertyDifferences") != null && !jsonObj.get("PropertyDifferences").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PropertyDifferences"));
      }
      // validate the required field `StackResourceDriftStatus`
      StackResourceDriftStatus.validateJsonElement(jsonObj.get("StackResourceDriftStatus"));
      // validate the required field `Timestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      // validate the optional field `ModuleInfo`
      if (jsonObj.get("ModuleInfo") != null && !jsonObj.get("ModuleInfo").isJsonNull()) {
        ResourceChangeModuleInfo.validateJsonElement(jsonObj.get("ModuleInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetectStackResourceDriftOutputStackResourceDrift.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetectStackResourceDriftOutputStackResourceDrift' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetectStackResourceDriftOutputStackResourceDrift> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetectStackResourceDriftOutputStackResourceDrift.class));

       return (TypeAdapter<T>) new TypeAdapter<DetectStackResourceDriftOutputStackResourceDrift>() {
           @Override
           public void write(JsonWriter out, DetectStackResourceDriftOutputStackResourceDrift value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetectStackResourceDriftOutputStackResourceDrift read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetectStackResourceDriftOutputStackResourceDrift given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetectStackResourceDriftOutputStackResourceDrift
   * @throws IOException if the JSON string is invalid with respect to DetectStackResourceDriftOutputStackResourceDrift
   */
  public static DetectStackResourceDriftOutputStackResourceDrift fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetectStackResourceDriftOutputStackResourceDrift.class);
  }

  /**
   * Convert an instance of DetectStackResourceDriftOutputStackResourceDrift to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

