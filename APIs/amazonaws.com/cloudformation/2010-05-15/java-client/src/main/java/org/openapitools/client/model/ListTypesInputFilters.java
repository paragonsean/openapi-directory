/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Category;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTypesInputFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTypesInputFilters {
  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_PUBLISHER_ID = "PublisherId";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_ID)
  private String publisherId;

  public static final String SERIALIZED_NAME_TYPE_NAME_PREFIX = "TypeNamePrefix";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME_PREFIX)
  private String typeNamePrefix;

  public ListTypesInputFilters() {
  }

  public ListTypesInputFilters category(Category category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }

  public void setCategory(Category category) {
    this.category = category;
  }


  public ListTypesInputFilters publisherId(String publisherId) {
    this.publisherId = publisherId;
    return this;
  }

  /**
   * Get publisherId
   * @return publisherId
   */
  @javax.annotation.Nullable
  public String getPublisherId() {
    return publisherId;
  }

  public void setPublisherId(String publisherId) {
    this.publisherId = publisherId;
  }


  public ListTypesInputFilters typeNamePrefix(String typeNamePrefix) {
    this.typeNamePrefix = typeNamePrefix;
    return this;
  }

  /**
   * Get typeNamePrefix
   * @return typeNamePrefix
   */
  @javax.annotation.Nullable
  public String getTypeNamePrefix() {
    return typeNamePrefix;
  }

  public void setTypeNamePrefix(String typeNamePrefix) {
    this.typeNamePrefix = typeNamePrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTypesInputFilters listTypesInputFilters = (ListTypesInputFilters) o;
    return Objects.equals(this.category, listTypesInputFilters.category) &&
        Objects.equals(this.publisherId, listTypesInputFilters.publisherId) &&
        Objects.equals(this.typeNamePrefix, listTypesInputFilters.typeNamePrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, publisherId, typeNamePrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTypesInputFilters {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    publisherId: ").append(toIndentedString(publisherId)).append("\n");
    sb.append("    typeNamePrefix: ").append(toIndentedString(typeNamePrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Category");
    openapiFields.add("PublisherId");
    openapiFields.add("TypeNamePrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTypesInputFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTypesInputFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTypesInputFilters is not found in the empty JSON string", ListTypesInputFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTypesInputFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTypesInputFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Category`
      if (jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) {
        Category.validateJsonElement(jsonObj.get("Category"));
      }
      // validate the optional field `PublisherId`
      if (jsonObj.get("PublisherId") != null && !jsonObj.get("PublisherId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublisherId"));
      }
      // validate the optional field `TypeNamePrefix`
      if (jsonObj.get("TypeNamePrefix") != null && !jsonObj.get("TypeNamePrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeNamePrefix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTypesInputFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTypesInputFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTypesInputFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTypesInputFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTypesInputFilters>() {
           @Override
           public void write(JsonWriter out, ListTypesInputFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTypesInputFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTypesInputFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTypesInputFilters
   * @throws IOException if the JSON string is invalid with respect to ListTypesInputFilters
   */
  public static ListTypesInputFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTypesInputFilters.class);
  }

  /**
   * Convert an instance of ListTypesInputFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

