/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StackSetDriftDetectionStatus;
import org.openapitools.client.model.StackSetDriftStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StackSetOperationStackSetDriftDetectionDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackSetOperationStackSetDriftDetectionDetails {
  public static final String SERIALIZED_NAME_DRIFT_STATUS = "DriftStatus";
  @SerializedName(SERIALIZED_NAME_DRIFT_STATUS)
  private StackSetDriftStatus driftStatus;

  public static final String SERIALIZED_NAME_DRIFT_DETECTION_STATUS = "DriftDetectionStatus";
  @SerializedName(SERIALIZED_NAME_DRIFT_DETECTION_STATUS)
  private StackSetDriftDetectionStatus driftDetectionStatus;

  public static final String SERIALIZED_NAME_LAST_DRIFT_CHECK_TIMESTAMP = "LastDriftCheckTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_DRIFT_CHECK_TIMESTAMP)
  private OffsetDateTime lastDriftCheckTimestamp;

  public static final String SERIALIZED_NAME_TOTAL_STACK_INSTANCES_COUNT = "TotalStackInstancesCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_STACK_INSTANCES_COUNT)
  private Integer totalStackInstancesCount;

  public static final String SERIALIZED_NAME_DRIFTED_STACK_INSTANCES_COUNT = "DriftedStackInstancesCount";
  @SerializedName(SERIALIZED_NAME_DRIFTED_STACK_INSTANCES_COUNT)
  private Integer driftedStackInstancesCount;

  public static final String SERIALIZED_NAME_IN_SYNC_STACK_INSTANCES_COUNT = "InSyncStackInstancesCount";
  @SerializedName(SERIALIZED_NAME_IN_SYNC_STACK_INSTANCES_COUNT)
  private Integer inSyncStackInstancesCount;

  public static final String SERIALIZED_NAME_IN_PROGRESS_STACK_INSTANCES_COUNT = "InProgressStackInstancesCount";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS_STACK_INSTANCES_COUNT)
  private Integer inProgressStackInstancesCount;

  public static final String SERIALIZED_NAME_FAILED_STACK_INSTANCES_COUNT = "FailedStackInstancesCount";
  @SerializedName(SERIALIZED_NAME_FAILED_STACK_INSTANCES_COUNT)
  private Integer failedStackInstancesCount;

  public StackSetOperationStackSetDriftDetectionDetails() {
  }

  public StackSetOperationStackSetDriftDetectionDetails driftStatus(StackSetDriftStatus driftStatus) {
    this.driftStatus = driftStatus;
    return this;
  }

  /**
   * Get driftStatus
   * @return driftStatus
   */
  @javax.annotation.Nullable
  public StackSetDriftStatus getDriftStatus() {
    return driftStatus;
  }

  public void setDriftStatus(StackSetDriftStatus driftStatus) {
    this.driftStatus = driftStatus;
  }


  public StackSetOperationStackSetDriftDetectionDetails driftDetectionStatus(StackSetDriftDetectionStatus driftDetectionStatus) {
    this.driftDetectionStatus = driftDetectionStatus;
    return this;
  }

  /**
   * Get driftDetectionStatus
   * @return driftDetectionStatus
   */
  @javax.annotation.Nullable
  public StackSetDriftDetectionStatus getDriftDetectionStatus() {
    return driftDetectionStatus;
  }

  public void setDriftDetectionStatus(StackSetDriftDetectionStatus driftDetectionStatus) {
    this.driftDetectionStatus = driftDetectionStatus;
  }


  public StackSetOperationStackSetDriftDetectionDetails lastDriftCheckTimestamp(OffsetDateTime lastDriftCheckTimestamp) {
    this.lastDriftCheckTimestamp = lastDriftCheckTimestamp;
    return this;
  }

  /**
   * Get lastDriftCheckTimestamp
   * @return lastDriftCheckTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDriftCheckTimestamp() {
    return lastDriftCheckTimestamp;
  }

  public void setLastDriftCheckTimestamp(OffsetDateTime lastDriftCheckTimestamp) {
    this.lastDriftCheckTimestamp = lastDriftCheckTimestamp;
  }


  public StackSetOperationStackSetDriftDetectionDetails totalStackInstancesCount(Integer totalStackInstancesCount) {
    this.totalStackInstancesCount = totalStackInstancesCount;
    return this;
  }

  /**
   * Get totalStackInstancesCount
   * @return totalStackInstancesCount
   */
  @javax.annotation.Nullable
  public Integer getTotalStackInstancesCount() {
    return totalStackInstancesCount;
  }

  public void setTotalStackInstancesCount(Integer totalStackInstancesCount) {
    this.totalStackInstancesCount = totalStackInstancesCount;
  }


  public StackSetOperationStackSetDriftDetectionDetails driftedStackInstancesCount(Integer driftedStackInstancesCount) {
    this.driftedStackInstancesCount = driftedStackInstancesCount;
    return this;
  }

  /**
   * Get driftedStackInstancesCount
   * @return driftedStackInstancesCount
   */
  @javax.annotation.Nullable
  public Integer getDriftedStackInstancesCount() {
    return driftedStackInstancesCount;
  }

  public void setDriftedStackInstancesCount(Integer driftedStackInstancesCount) {
    this.driftedStackInstancesCount = driftedStackInstancesCount;
  }


  public StackSetOperationStackSetDriftDetectionDetails inSyncStackInstancesCount(Integer inSyncStackInstancesCount) {
    this.inSyncStackInstancesCount = inSyncStackInstancesCount;
    return this;
  }

  /**
   * Get inSyncStackInstancesCount
   * @return inSyncStackInstancesCount
   */
  @javax.annotation.Nullable
  public Integer getInSyncStackInstancesCount() {
    return inSyncStackInstancesCount;
  }

  public void setInSyncStackInstancesCount(Integer inSyncStackInstancesCount) {
    this.inSyncStackInstancesCount = inSyncStackInstancesCount;
  }


  public StackSetOperationStackSetDriftDetectionDetails inProgressStackInstancesCount(Integer inProgressStackInstancesCount) {
    this.inProgressStackInstancesCount = inProgressStackInstancesCount;
    return this;
  }

  /**
   * Get inProgressStackInstancesCount
   * @return inProgressStackInstancesCount
   */
  @javax.annotation.Nullable
  public Integer getInProgressStackInstancesCount() {
    return inProgressStackInstancesCount;
  }

  public void setInProgressStackInstancesCount(Integer inProgressStackInstancesCount) {
    this.inProgressStackInstancesCount = inProgressStackInstancesCount;
  }


  public StackSetOperationStackSetDriftDetectionDetails failedStackInstancesCount(Integer failedStackInstancesCount) {
    this.failedStackInstancesCount = failedStackInstancesCount;
    return this;
  }

  /**
   * Get failedStackInstancesCount
   * @return failedStackInstancesCount
   */
  @javax.annotation.Nullable
  public Integer getFailedStackInstancesCount() {
    return failedStackInstancesCount;
  }

  public void setFailedStackInstancesCount(Integer failedStackInstancesCount) {
    this.failedStackInstancesCount = failedStackInstancesCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackSetOperationStackSetDriftDetectionDetails stackSetOperationStackSetDriftDetectionDetails = (StackSetOperationStackSetDriftDetectionDetails) o;
    return Objects.equals(this.driftStatus, stackSetOperationStackSetDriftDetectionDetails.driftStatus) &&
        Objects.equals(this.driftDetectionStatus, stackSetOperationStackSetDriftDetectionDetails.driftDetectionStatus) &&
        Objects.equals(this.lastDriftCheckTimestamp, stackSetOperationStackSetDriftDetectionDetails.lastDriftCheckTimestamp) &&
        Objects.equals(this.totalStackInstancesCount, stackSetOperationStackSetDriftDetectionDetails.totalStackInstancesCount) &&
        Objects.equals(this.driftedStackInstancesCount, stackSetOperationStackSetDriftDetectionDetails.driftedStackInstancesCount) &&
        Objects.equals(this.inSyncStackInstancesCount, stackSetOperationStackSetDriftDetectionDetails.inSyncStackInstancesCount) &&
        Objects.equals(this.inProgressStackInstancesCount, stackSetOperationStackSetDriftDetectionDetails.inProgressStackInstancesCount) &&
        Objects.equals(this.failedStackInstancesCount, stackSetOperationStackSetDriftDetectionDetails.failedStackInstancesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(driftStatus, driftDetectionStatus, lastDriftCheckTimestamp, totalStackInstancesCount, driftedStackInstancesCount, inSyncStackInstancesCount, inProgressStackInstancesCount, failedStackInstancesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackSetOperationStackSetDriftDetectionDetails {\n");
    sb.append("    driftStatus: ").append(toIndentedString(driftStatus)).append("\n");
    sb.append("    driftDetectionStatus: ").append(toIndentedString(driftDetectionStatus)).append("\n");
    sb.append("    lastDriftCheckTimestamp: ").append(toIndentedString(lastDriftCheckTimestamp)).append("\n");
    sb.append("    totalStackInstancesCount: ").append(toIndentedString(totalStackInstancesCount)).append("\n");
    sb.append("    driftedStackInstancesCount: ").append(toIndentedString(driftedStackInstancesCount)).append("\n");
    sb.append("    inSyncStackInstancesCount: ").append(toIndentedString(inSyncStackInstancesCount)).append("\n");
    sb.append("    inProgressStackInstancesCount: ").append(toIndentedString(inProgressStackInstancesCount)).append("\n");
    sb.append("    failedStackInstancesCount: ").append(toIndentedString(failedStackInstancesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DriftStatus");
    openapiFields.add("DriftDetectionStatus");
    openapiFields.add("LastDriftCheckTimestamp");
    openapiFields.add("TotalStackInstancesCount");
    openapiFields.add("DriftedStackInstancesCount");
    openapiFields.add("InSyncStackInstancesCount");
    openapiFields.add("InProgressStackInstancesCount");
    openapiFields.add("FailedStackInstancesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackSetOperationStackSetDriftDetectionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackSetOperationStackSetDriftDetectionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackSetOperationStackSetDriftDetectionDetails is not found in the empty JSON string", StackSetOperationStackSetDriftDetectionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackSetOperationStackSetDriftDetectionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackSetOperationStackSetDriftDetectionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DriftStatus`
      if (jsonObj.get("DriftStatus") != null && !jsonObj.get("DriftStatus").isJsonNull()) {
        StackSetDriftStatus.validateJsonElement(jsonObj.get("DriftStatus"));
      }
      // validate the optional field `DriftDetectionStatus`
      if (jsonObj.get("DriftDetectionStatus") != null && !jsonObj.get("DriftDetectionStatus").isJsonNull()) {
        StackSetDriftDetectionStatus.validateJsonElement(jsonObj.get("DriftDetectionStatus"));
      }
      // validate the optional field `LastDriftCheckTimestamp`
      if (jsonObj.get("LastDriftCheckTimestamp") != null && !jsonObj.get("LastDriftCheckTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastDriftCheckTimestamp"));
      }
      // validate the optional field `TotalStackInstancesCount`
      if (jsonObj.get("TotalStackInstancesCount") != null && !jsonObj.get("TotalStackInstancesCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalStackInstancesCount"));
      }
      // validate the optional field `DriftedStackInstancesCount`
      if (jsonObj.get("DriftedStackInstancesCount") != null && !jsonObj.get("DriftedStackInstancesCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DriftedStackInstancesCount"));
      }
      // validate the optional field `InSyncStackInstancesCount`
      if (jsonObj.get("InSyncStackInstancesCount") != null && !jsonObj.get("InSyncStackInstancesCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InSyncStackInstancesCount"));
      }
      // validate the optional field `InProgressStackInstancesCount`
      if (jsonObj.get("InProgressStackInstancesCount") != null && !jsonObj.get("InProgressStackInstancesCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InProgressStackInstancesCount"));
      }
      // validate the optional field `FailedStackInstancesCount`
      if (jsonObj.get("FailedStackInstancesCount") != null && !jsonObj.get("FailedStackInstancesCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailedStackInstancesCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackSetOperationStackSetDriftDetectionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackSetOperationStackSetDriftDetectionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackSetOperationStackSetDriftDetectionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackSetOperationStackSetDriftDetectionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<StackSetOperationStackSetDriftDetectionDetails>() {
           @Override
           public void write(JsonWriter out, StackSetOperationStackSetDriftDetectionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackSetOperationStackSetDriftDetectionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackSetOperationStackSetDriftDetectionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackSetOperationStackSetDriftDetectionDetails
   * @throws IOException if the JSON string is invalid with respect to StackSetOperationStackSetDriftDetectionDetails
   */
  public static StackSetOperationStackSetDriftDetectionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackSetOperationStackSetDriftDetectionDetails.class);
  }

  /**
   * Convert an instance of StackSetOperationStackSetDriftDetectionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

