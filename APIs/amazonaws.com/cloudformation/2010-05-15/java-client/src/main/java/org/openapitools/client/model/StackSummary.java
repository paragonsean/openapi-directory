/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StackStatus;
import org.openapitools.client.model.StackSummaryDriftInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The StackSummary Data Type
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackSummary {
  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_STACK_NAME = "StackName";
  @SerializedName(SERIALIZED_NAME_STACK_NAME)
  private String stackName;

  public static final String SERIALIZED_NAME_TEMPLATE_DESCRIPTION = "TemplateDescription";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_DESCRIPTION)
  private String templateDescription;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_DELETION_TIME = "DeletionTime";
  @SerializedName(SERIALIZED_NAME_DELETION_TIME)
  private OffsetDateTime deletionTime;

  public static final String SERIALIZED_NAME_STACK_STATUS = "StackStatus";
  @SerializedName(SERIALIZED_NAME_STACK_STATUS)
  private StackStatus stackStatus;

  public static final String SERIALIZED_NAME_STACK_STATUS_REASON = "StackStatusReason";
  @SerializedName(SERIALIZED_NAME_STACK_STATUS_REASON)
  private String stackStatusReason;

  public static final String SERIALIZED_NAME_PARENT_ID = "ParentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_ROOT_ID = "RootId";
  @SerializedName(SERIALIZED_NAME_ROOT_ID)
  private String rootId;

  public static final String SERIALIZED_NAME_DRIFT_INFORMATION = "DriftInformation";
  @SerializedName(SERIALIZED_NAME_DRIFT_INFORMATION)
  private StackSummaryDriftInformation driftInformation;

  public StackSummary() {
  }

  public StackSummary stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nullable
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public StackSummary stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

  /**
   * Get stackName
   * @return stackName
   */
  @javax.annotation.Nonnull
  public String getStackName() {
    return stackName;
  }

  public void setStackName(String stackName) {
    this.stackName = stackName;
  }


  public StackSummary templateDescription(String templateDescription) {
    this.templateDescription = templateDescription;
    return this;
  }

  /**
   * Get templateDescription
   * @return templateDescription
   */
  @javax.annotation.Nullable
  public String getTemplateDescription() {
    return templateDescription;
  }

  public void setTemplateDescription(String templateDescription) {
    this.templateDescription = templateDescription;
  }


  public StackSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public StackSummary lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public StackSummary deletionTime(OffsetDateTime deletionTime) {
    this.deletionTime = deletionTime;
    return this;
  }

  /**
   * Get deletionTime
   * @return deletionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletionTime() {
    return deletionTime;
  }

  public void setDeletionTime(OffsetDateTime deletionTime) {
    this.deletionTime = deletionTime;
  }


  public StackSummary stackStatus(StackStatus stackStatus) {
    this.stackStatus = stackStatus;
    return this;
  }

  /**
   * Get stackStatus
   * @return stackStatus
   */
  @javax.annotation.Nonnull
  public StackStatus getStackStatus() {
    return stackStatus;
  }

  public void setStackStatus(StackStatus stackStatus) {
    this.stackStatus = stackStatus;
  }


  public StackSummary stackStatusReason(String stackStatusReason) {
    this.stackStatusReason = stackStatusReason;
    return this;
  }

  /**
   * Get stackStatusReason
   * @return stackStatusReason
   */
  @javax.annotation.Nullable
  public String getStackStatusReason() {
    return stackStatusReason;
  }

  public void setStackStatusReason(String stackStatusReason) {
    this.stackStatusReason = stackStatusReason;
  }


  public StackSummary parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Get parentId
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public StackSummary rootId(String rootId) {
    this.rootId = rootId;
    return this;
  }

  /**
   * Get rootId
   * @return rootId
   */
  @javax.annotation.Nullable
  public String getRootId() {
    return rootId;
  }

  public void setRootId(String rootId) {
    this.rootId = rootId;
  }


  public StackSummary driftInformation(StackSummaryDriftInformation driftInformation) {
    this.driftInformation = driftInformation;
    return this;
  }

  /**
   * Get driftInformation
   * @return driftInformation
   */
  @javax.annotation.Nullable
  public StackSummaryDriftInformation getDriftInformation() {
    return driftInformation;
  }

  public void setDriftInformation(StackSummaryDriftInformation driftInformation) {
    this.driftInformation = driftInformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackSummary stackSummary = (StackSummary) o;
    return Objects.equals(this.stackId, stackSummary.stackId) &&
        Objects.equals(this.stackName, stackSummary.stackName) &&
        Objects.equals(this.templateDescription, stackSummary.templateDescription) &&
        Objects.equals(this.creationTime, stackSummary.creationTime) &&
        Objects.equals(this.lastUpdatedTime, stackSummary.lastUpdatedTime) &&
        Objects.equals(this.deletionTime, stackSummary.deletionTime) &&
        Objects.equals(this.stackStatus, stackSummary.stackStatus) &&
        Objects.equals(this.stackStatusReason, stackSummary.stackStatusReason) &&
        Objects.equals(this.parentId, stackSummary.parentId) &&
        Objects.equals(this.rootId, stackSummary.rootId) &&
        Objects.equals(this.driftInformation, stackSummary.driftInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackId, stackName, templateDescription, creationTime, lastUpdatedTime, deletionTime, stackStatus, stackStatusReason, parentId, rootId, driftInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackSummary {\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("    templateDescription: ").append(toIndentedString(templateDescription)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    deletionTime: ").append(toIndentedString(deletionTime)).append("\n");
    sb.append("    stackStatus: ").append(toIndentedString(stackStatus)).append("\n");
    sb.append("    stackStatusReason: ").append(toIndentedString(stackStatusReason)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    rootId: ").append(toIndentedString(rootId)).append("\n");
    sb.append("    driftInformation: ").append(toIndentedString(driftInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackId");
    openapiFields.add("StackName");
    openapiFields.add("TemplateDescription");
    openapiFields.add("CreationTime");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("DeletionTime");
    openapiFields.add("StackStatus");
    openapiFields.add("StackStatusReason");
    openapiFields.add("ParentId");
    openapiFields.add("RootId");
    openapiFields.add("DriftInformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackName");
    openapiRequiredFields.add("CreationTime");
    openapiRequiredFields.add("StackStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackSummary is not found in the empty JSON string", StackSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StackSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StackId`
      if (jsonObj.get("StackId") != null && !jsonObj.get("StackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackId"));
      }
      // validate the required field `StackName`
      String.validateJsonElement(jsonObj.get("StackName"));
      // validate the optional field `TemplateDescription`
      if (jsonObj.get("TemplateDescription") != null && !jsonObj.get("TemplateDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TemplateDescription"));
      }
      // validate the required field `CreationTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      // validate the optional field `LastUpdatedTime`
      if (jsonObj.get("LastUpdatedTime") != null && !jsonObj.get("LastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      }
      // validate the optional field `DeletionTime`
      if (jsonObj.get("DeletionTime") != null && !jsonObj.get("DeletionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeletionTime"));
      }
      // validate the required field `StackStatus`
      StackStatus.validateJsonElement(jsonObj.get("StackStatus"));
      // validate the optional field `StackStatusReason`
      if (jsonObj.get("StackStatusReason") != null && !jsonObj.get("StackStatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackStatusReason"));
      }
      // validate the optional field `ParentId`
      if (jsonObj.get("ParentId") != null && !jsonObj.get("ParentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParentId"));
      }
      // validate the optional field `RootId`
      if (jsonObj.get("RootId") != null && !jsonObj.get("RootId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RootId"));
      }
      // validate the optional field `DriftInformation`
      if (jsonObj.get("DriftInformation") != null && !jsonObj.get("DriftInformation").isJsonNull()) {
        StackSummaryDriftInformation.validateJsonElement(jsonObj.get("DriftInformation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<StackSummary>() {
           @Override
           public void write(JsonWriter out, StackSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackSummary
   * @throws IOException if the JSON string is invalid with respect to StackSummary
   */
  public static StackSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackSummary.class);
  }

  /**
   * Convert an instance of StackSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

