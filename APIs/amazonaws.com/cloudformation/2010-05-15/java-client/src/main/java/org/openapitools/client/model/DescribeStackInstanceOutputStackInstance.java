/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StackDriftStatus;
import org.openapitools.client.model.StackInstanceStackInstanceStatus;
import org.openapitools.client.model.StackInstanceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeStackInstanceOutputStackInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeStackInstanceOutputStackInstance {
  public static final String SERIALIZED_NAME_STACK_SET_ID = "StackSetId";
  @SerializedName(SERIALIZED_NAME_STACK_SET_ID)
  private String stackSetId;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_ACCOUNT = "Account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_PARAMETER_OVERRIDES = "ParameterOverrides";
  @SerializedName(SERIALIZED_NAME_PARAMETER_OVERRIDES)
  private List parameterOverrides;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StackInstanceStatus status;

  public static final String SERIALIZED_NAME_STACK_INSTANCE_STATUS = "StackInstanceStatus";
  @SerializedName(SERIALIZED_NAME_STACK_INSTANCE_STATUS)
  private StackInstanceStackInstanceStatus stackInstanceStatus;

  public static final String SERIALIZED_NAME_STATUS_REASON = "StatusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  private String statusReason;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNIT_ID = "OrganizationalUnitId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNIT_ID)
  private String organizationalUnitId;

  public static final String SERIALIZED_NAME_DRIFT_STATUS = "DriftStatus";
  @SerializedName(SERIALIZED_NAME_DRIFT_STATUS)
  private StackDriftStatus driftStatus;

  public static final String SERIALIZED_NAME_LAST_DRIFT_CHECK_TIMESTAMP = "LastDriftCheckTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_DRIFT_CHECK_TIMESTAMP)
  private OffsetDateTime lastDriftCheckTimestamp;

  public static final String SERIALIZED_NAME_LAST_OPERATION_ID = "LastOperationId";
  @SerializedName(SERIALIZED_NAME_LAST_OPERATION_ID)
  private String lastOperationId;

  public DescribeStackInstanceOutputStackInstance() {
  }

  public DescribeStackInstanceOutputStackInstance stackSetId(String stackSetId) {
    this.stackSetId = stackSetId;
    return this;
  }

  /**
   * Get stackSetId
   * @return stackSetId
   */
  @javax.annotation.Nullable
  public String getStackSetId() {
    return stackSetId;
  }

  public void setStackSetId(String stackSetId) {
    this.stackSetId = stackSetId;
  }


  public DescribeStackInstanceOutputStackInstance region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public DescribeStackInstanceOutputStackInstance account(String account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(String account) {
    this.account = account;
  }


  public DescribeStackInstanceOutputStackInstance stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nullable
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public DescribeStackInstanceOutputStackInstance parameterOverrides(List parameterOverrides) {
    this.parameterOverrides = parameterOverrides;
    return this;
  }

  /**
   * Get parameterOverrides
   * @return parameterOverrides
   */
  @javax.annotation.Nullable
  public List getParameterOverrides() {
    return parameterOverrides;
  }

  public void setParameterOverrides(List parameterOverrides) {
    this.parameterOverrides = parameterOverrides;
  }


  public DescribeStackInstanceOutputStackInstance status(StackInstanceStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StackInstanceStatus getStatus() {
    return status;
  }

  public void setStatus(StackInstanceStatus status) {
    this.status = status;
  }


  public DescribeStackInstanceOutputStackInstance stackInstanceStatus(StackInstanceStackInstanceStatus stackInstanceStatus) {
    this.stackInstanceStatus = stackInstanceStatus;
    return this;
  }

  /**
   * Get stackInstanceStatus
   * @return stackInstanceStatus
   */
  @javax.annotation.Nullable
  public StackInstanceStackInstanceStatus getStackInstanceStatus() {
    return stackInstanceStatus;
  }

  public void setStackInstanceStatus(StackInstanceStackInstanceStatus stackInstanceStatus) {
    this.stackInstanceStatus = stackInstanceStatus;
  }


  public DescribeStackInstanceOutputStackInstance statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }


  public DescribeStackInstanceOutputStackInstance organizationalUnitId(String organizationalUnitId) {
    this.organizationalUnitId = organizationalUnitId;
    return this;
  }

  /**
   * Get organizationalUnitId
   * @return organizationalUnitId
   */
  @javax.annotation.Nullable
  public String getOrganizationalUnitId() {
    return organizationalUnitId;
  }

  public void setOrganizationalUnitId(String organizationalUnitId) {
    this.organizationalUnitId = organizationalUnitId;
  }


  public DescribeStackInstanceOutputStackInstance driftStatus(StackDriftStatus driftStatus) {
    this.driftStatus = driftStatus;
    return this;
  }

  /**
   * Get driftStatus
   * @return driftStatus
   */
  @javax.annotation.Nullable
  public StackDriftStatus getDriftStatus() {
    return driftStatus;
  }

  public void setDriftStatus(StackDriftStatus driftStatus) {
    this.driftStatus = driftStatus;
  }


  public DescribeStackInstanceOutputStackInstance lastDriftCheckTimestamp(OffsetDateTime lastDriftCheckTimestamp) {
    this.lastDriftCheckTimestamp = lastDriftCheckTimestamp;
    return this;
  }

  /**
   * Get lastDriftCheckTimestamp
   * @return lastDriftCheckTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDriftCheckTimestamp() {
    return lastDriftCheckTimestamp;
  }

  public void setLastDriftCheckTimestamp(OffsetDateTime lastDriftCheckTimestamp) {
    this.lastDriftCheckTimestamp = lastDriftCheckTimestamp;
  }


  public DescribeStackInstanceOutputStackInstance lastOperationId(String lastOperationId) {
    this.lastOperationId = lastOperationId;
    return this;
  }

  /**
   * Get lastOperationId
   * @return lastOperationId
   */
  @javax.annotation.Nullable
  public String getLastOperationId() {
    return lastOperationId;
  }

  public void setLastOperationId(String lastOperationId) {
    this.lastOperationId = lastOperationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeStackInstanceOutputStackInstance describeStackInstanceOutputStackInstance = (DescribeStackInstanceOutputStackInstance) o;
    return Objects.equals(this.stackSetId, describeStackInstanceOutputStackInstance.stackSetId) &&
        Objects.equals(this.region, describeStackInstanceOutputStackInstance.region) &&
        Objects.equals(this.account, describeStackInstanceOutputStackInstance.account) &&
        Objects.equals(this.stackId, describeStackInstanceOutputStackInstance.stackId) &&
        Objects.equals(this.parameterOverrides, describeStackInstanceOutputStackInstance.parameterOverrides) &&
        Objects.equals(this.status, describeStackInstanceOutputStackInstance.status) &&
        Objects.equals(this.stackInstanceStatus, describeStackInstanceOutputStackInstance.stackInstanceStatus) &&
        Objects.equals(this.statusReason, describeStackInstanceOutputStackInstance.statusReason) &&
        Objects.equals(this.organizationalUnitId, describeStackInstanceOutputStackInstance.organizationalUnitId) &&
        Objects.equals(this.driftStatus, describeStackInstanceOutputStackInstance.driftStatus) &&
        Objects.equals(this.lastDriftCheckTimestamp, describeStackInstanceOutputStackInstance.lastDriftCheckTimestamp) &&
        Objects.equals(this.lastOperationId, describeStackInstanceOutputStackInstance.lastOperationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackSetId, region, account, stackId, parameterOverrides, status, stackInstanceStatus, statusReason, organizationalUnitId, driftStatus, lastDriftCheckTimestamp, lastOperationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeStackInstanceOutputStackInstance {\n");
    sb.append("    stackSetId: ").append(toIndentedString(stackSetId)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    parameterOverrides: ").append(toIndentedString(parameterOverrides)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stackInstanceStatus: ").append(toIndentedString(stackInstanceStatus)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    organizationalUnitId: ").append(toIndentedString(organizationalUnitId)).append("\n");
    sb.append("    driftStatus: ").append(toIndentedString(driftStatus)).append("\n");
    sb.append("    lastDriftCheckTimestamp: ").append(toIndentedString(lastDriftCheckTimestamp)).append("\n");
    sb.append("    lastOperationId: ").append(toIndentedString(lastOperationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackSetId");
    openapiFields.add("Region");
    openapiFields.add("Account");
    openapiFields.add("StackId");
    openapiFields.add("ParameterOverrides");
    openapiFields.add("Status");
    openapiFields.add("StackInstanceStatus");
    openapiFields.add("StatusReason");
    openapiFields.add("OrganizationalUnitId");
    openapiFields.add("DriftStatus");
    openapiFields.add("LastDriftCheckTimestamp");
    openapiFields.add("LastOperationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeStackInstanceOutputStackInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeStackInstanceOutputStackInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeStackInstanceOutputStackInstance is not found in the empty JSON string", DescribeStackInstanceOutputStackInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeStackInstanceOutputStackInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeStackInstanceOutputStackInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StackSetId`
      if (jsonObj.get("StackSetId") != null && !jsonObj.get("StackSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackSetId"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `Account`
      if (jsonObj.get("Account") != null && !jsonObj.get("Account").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Account"));
      }
      // validate the optional field `StackId`
      if (jsonObj.get("StackId") != null && !jsonObj.get("StackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackId"));
      }
      // validate the optional field `ParameterOverrides`
      if (jsonObj.get("ParameterOverrides") != null && !jsonObj.get("ParameterOverrides").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ParameterOverrides"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StackInstanceStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StackInstanceStatus`
      if (jsonObj.get("StackInstanceStatus") != null && !jsonObj.get("StackInstanceStatus").isJsonNull()) {
        StackInstanceStackInstanceStatus.validateJsonElement(jsonObj.get("StackInstanceStatus"));
      }
      // validate the optional field `StatusReason`
      if (jsonObj.get("StatusReason") != null && !jsonObj.get("StatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusReason"));
      }
      // validate the optional field `OrganizationalUnitId`
      if (jsonObj.get("OrganizationalUnitId") != null && !jsonObj.get("OrganizationalUnitId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OrganizationalUnitId"));
      }
      // validate the optional field `DriftStatus`
      if (jsonObj.get("DriftStatus") != null && !jsonObj.get("DriftStatus").isJsonNull()) {
        StackDriftStatus.validateJsonElement(jsonObj.get("DriftStatus"));
      }
      // validate the optional field `LastDriftCheckTimestamp`
      if (jsonObj.get("LastDriftCheckTimestamp") != null && !jsonObj.get("LastDriftCheckTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastDriftCheckTimestamp"));
      }
      // validate the optional field `LastOperationId`
      if (jsonObj.get("LastOperationId") != null && !jsonObj.get("LastOperationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastOperationId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeStackInstanceOutputStackInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeStackInstanceOutputStackInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeStackInstanceOutputStackInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeStackInstanceOutputStackInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeStackInstanceOutputStackInstance>() {
           @Override
           public void write(JsonWriter out, DescribeStackInstanceOutputStackInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeStackInstanceOutputStackInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeStackInstanceOutputStackInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeStackInstanceOutputStackInstance
   * @throws IOException if the JSON string is invalid with respect to DescribeStackInstanceOutputStackInstance
   */
  public static DescribeStackInstanceOutputStackInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeStackInstanceOutputStackInstance.class);
  }

  /**
   * Convert an instance of DescribeStackInstanceOutputStackInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

