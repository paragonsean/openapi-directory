/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallAs;
import org.openapitools.client.model.CreateStackInstancesInputOperationPreferences;
import org.openapitools.client.model.CreateStackSetInputManagedExecution;
import org.openapitools.client.model.PermissionModels;
import org.openapitools.client.model.UpdateStackSetInputAutoDeployment;
import org.openapitools.client.model.UpdateStackSetInputDeploymentTargets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateStackSetInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateStackSetInput {
  public static final String SERIALIZED_NAME_STACK_SET_NAME = "StackSetName";
  @SerializedName(SERIALIZED_NAME_STACK_SET_NAME)
  private String stackSetName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TEMPLATE_BODY = "TemplateBody";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_BODY)
  private String templateBody;

  public static final String SERIALIZED_NAME_TEMPLATE_U_R_L = "TemplateURL";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_U_R_L)
  private String templateURL;

  public static final String SERIALIZED_NAME_USE_PREVIOUS_TEMPLATE = "UsePreviousTemplate";
  @SerializedName(SERIALIZED_NAME_USE_PREVIOUS_TEMPLATE)
  private Boolean usePreviousTemplate;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List parameters;

  public static final String SERIALIZED_NAME_CAPABILITIES = "Capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List capabilities;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_OPERATION_PREFERENCES = "OperationPreferences";
  @SerializedName(SERIALIZED_NAME_OPERATION_PREFERENCES)
  private CreateStackInstancesInputOperationPreferences operationPreferences;

  public static final String SERIALIZED_NAME_ADMINISTRATION_ROLE_A_R_N = "AdministrationRoleARN";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATION_ROLE_A_R_N)
  private String administrationRoleARN;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_NAME = "ExecutionRoleName";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_NAME)
  private String executionRoleName;

  public static final String SERIALIZED_NAME_DEPLOYMENT_TARGETS = "DeploymentTargets";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_TARGETS)
  private UpdateStackSetInputDeploymentTargets deploymentTargets;

  public static final String SERIALIZED_NAME_PERMISSION_MODEL = "PermissionModel";
  @SerializedName(SERIALIZED_NAME_PERMISSION_MODEL)
  private PermissionModels permissionModel;

  public static final String SERIALIZED_NAME_AUTO_DEPLOYMENT = "AutoDeployment";
  @SerializedName(SERIALIZED_NAME_AUTO_DEPLOYMENT)
  private UpdateStackSetInputAutoDeployment autoDeployment;

  public static final String SERIALIZED_NAME_OPERATION_ID = "OperationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_ACCOUNTS = "Accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private List accounts;

  public static final String SERIALIZED_NAME_REGIONS = "Regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List regions;

  public static final String SERIALIZED_NAME_CALL_AS = "CallAs";
  @SerializedName(SERIALIZED_NAME_CALL_AS)
  private CallAs callAs;

  public static final String SERIALIZED_NAME_MANAGED_EXECUTION = "ManagedExecution";
  @SerializedName(SERIALIZED_NAME_MANAGED_EXECUTION)
  private CreateStackSetInputManagedExecution managedExecution;

  public UpdateStackSetInput() {
  }

  public UpdateStackSetInput stackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
    return this;
  }

  /**
   * Get stackSetName
   * @return stackSetName
   */
  @javax.annotation.Nonnull
  public String getStackSetName() {
    return stackSetName;
  }

  public void setStackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
  }


  public UpdateStackSetInput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateStackSetInput templateBody(String templateBody) {
    this.templateBody = templateBody;
    return this;
  }

  /**
   * Get templateBody
   * @return templateBody
   */
  @javax.annotation.Nullable
  public String getTemplateBody() {
    return templateBody;
  }

  public void setTemplateBody(String templateBody) {
    this.templateBody = templateBody;
  }


  public UpdateStackSetInput templateURL(String templateURL) {
    this.templateURL = templateURL;
    return this;
  }

  /**
   * Get templateURL
   * @return templateURL
   */
  @javax.annotation.Nullable
  public String getTemplateURL() {
    return templateURL;
  }

  public void setTemplateURL(String templateURL) {
    this.templateURL = templateURL;
  }


  public UpdateStackSetInput usePreviousTemplate(Boolean usePreviousTemplate) {
    this.usePreviousTemplate = usePreviousTemplate;
    return this;
  }

  /**
   * Get usePreviousTemplate
   * @return usePreviousTemplate
   */
  @javax.annotation.Nullable
  public Boolean getUsePreviousTemplate() {
    return usePreviousTemplate;
  }

  public void setUsePreviousTemplate(Boolean usePreviousTemplate) {
    this.usePreviousTemplate = usePreviousTemplate;
  }


  public UpdateStackSetInput parameters(List parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public List getParameters() {
    return parameters;
  }

  public void setParameters(List parameters) {
    this.parameters = parameters;
  }


  public UpdateStackSetInput capabilities(List capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List capabilities) {
    this.capabilities = capabilities;
  }


  public UpdateStackSetInput tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public UpdateStackSetInput operationPreferences(CreateStackInstancesInputOperationPreferences operationPreferences) {
    this.operationPreferences = operationPreferences;
    return this;
  }

  /**
   * Get operationPreferences
   * @return operationPreferences
   */
  @javax.annotation.Nullable
  public CreateStackInstancesInputOperationPreferences getOperationPreferences() {
    return operationPreferences;
  }

  public void setOperationPreferences(CreateStackInstancesInputOperationPreferences operationPreferences) {
    this.operationPreferences = operationPreferences;
  }


  public UpdateStackSetInput administrationRoleARN(String administrationRoleARN) {
    this.administrationRoleARN = administrationRoleARN;
    return this;
  }

  /**
   * Get administrationRoleARN
   * @return administrationRoleARN
   */
  @javax.annotation.Nullable
  public String getAdministrationRoleARN() {
    return administrationRoleARN;
  }

  public void setAdministrationRoleARN(String administrationRoleARN) {
    this.administrationRoleARN = administrationRoleARN;
  }


  public UpdateStackSetInput executionRoleName(String executionRoleName) {
    this.executionRoleName = executionRoleName;
    return this;
  }

  /**
   * Get executionRoleName
   * @return executionRoleName
   */
  @javax.annotation.Nullable
  public String getExecutionRoleName() {
    return executionRoleName;
  }

  public void setExecutionRoleName(String executionRoleName) {
    this.executionRoleName = executionRoleName;
  }


  public UpdateStackSetInput deploymentTargets(UpdateStackSetInputDeploymentTargets deploymentTargets) {
    this.deploymentTargets = deploymentTargets;
    return this;
  }

  /**
   * Get deploymentTargets
   * @return deploymentTargets
   */
  @javax.annotation.Nullable
  public UpdateStackSetInputDeploymentTargets getDeploymentTargets() {
    return deploymentTargets;
  }

  public void setDeploymentTargets(UpdateStackSetInputDeploymentTargets deploymentTargets) {
    this.deploymentTargets = deploymentTargets;
  }


  public UpdateStackSetInput permissionModel(PermissionModels permissionModel) {
    this.permissionModel = permissionModel;
    return this;
  }

  /**
   * Get permissionModel
   * @return permissionModel
   */
  @javax.annotation.Nullable
  public PermissionModels getPermissionModel() {
    return permissionModel;
  }

  public void setPermissionModel(PermissionModels permissionModel) {
    this.permissionModel = permissionModel;
  }


  public UpdateStackSetInput autoDeployment(UpdateStackSetInputAutoDeployment autoDeployment) {
    this.autoDeployment = autoDeployment;
    return this;
  }

  /**
   * Get autoDeployment
   * @return autoDeployment
   */
  @javax.annotation.Nullable
  public UpdateStackSetInputAutoDeployment getAutoDeployment() {
    return autoDeployment;
  }

  public void setAutoDeployment(UpdateStackSetInputAutoDeployment autoDeployment) {
    this.autoDeployment = autoDeployment;
  }


  public UpdateStackSetInput operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Get operationId
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public UpdateStackSetInput accounts(List accounts) {
    this.accounts = accounts;
    return this;
  }

  /**
   * Get accounts
   * @return accounts
   */
  @javax.annotation.Nullable
  public List getAccounts() {
    return accounts;
  }

  public void setAccounts(List accounts) {
    this.accounts = accounts;
  }


  public UpdateStackSetInput regions(List regions) {
    this.regions = regions;
    return this;
  }

  /**
   * Get regions
   * @return regions
   */
  @javax.annotation.Nullable
  public List getRegions() {
    return regions;
  }

  public void setRegions(List regions) {
    this.regions = regions;
  }


  public UpdateStackSetInput callAs(CallAs callAs) {
    this.callAs = callAs;
    return this;
  }

  /**
   * Get callAs
   * @return callAs
   */
  @javax.annotation.Nullable
  public CallAs getCallAs() {
    return callAs;
  }

  public void setCallAs(CallAs callAs) {
    this.callAs = callAs;
  }


  public UpdateStackSetInput managedExecution(CreateStackSetInputManagedExecution managedExecution) {
    this.managedExecution = managedExecution;
    return this;
  }

  /**
   * Get managedExecution
   * @return managedExecution
   */
  @javax.annotation.Nullable
  public CreateStackSetInputManagedExecution getManagedExecution() {
    return managedExecution;
  }

  public void setManagedExecution(CreateStackSetInputManagedExecution managedExecution) {
    this.managedExecution = managedExecution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateStackSetInput updateStackSetInput = (UpdateStackSetInput) o;
    return Objects.equals(this.stackSetName, updateStackSetInput.stackSetName) &&
        Objects.equals(this.description, updateStackSetInput.description) &&
        Objects.equals(this.templateBody, updateStackSetInput.templateBody) &&
        Objects.equals(this.templateURL, updateStackSetInput.templateURL) &&
        Objects.equals(this.usePreviousTemplate, updateStackSetInput.usePreviousTemplate) &&
        Objects.equals(this.parameters, updateStackSetInput.parameters) &&
        Objects.equals(this.capabilities, updateStackSetInput.capabilities) &&
        Objects.equals(this.tags, updateStackSetInput.tags) &&
        Objects.equals(this.operationPreferences, updateStackSetInput.operationPreferences) &&
        Objects.equals(this.administrationRoleARN, updateStackSetInput.administrationRoleARN) &&
        Objects.equals(this.executionRoleName, updateStackSetInput.executionRoleName) &&
        Objects.equals(this.deploymentTargets, updateStackSetInput.deploymentTargets) &&
        Objects.equals(this.permissionModel, updateStackSetInput.permissionModel) &&
        Objects.equals(this.autoDeployment, updateStackSetInput.autoDeployment) &&
        Objects.equals(this.operationId, updateStackSetInput.operationId) &&
        Objects.equals(this.accounts, updateStackSetInput.accounts) &&
        Objects.equals(this.regions, updateStackSetInput.regions) &&
        Objects.equals(this.callAs, updateStackSetInput.callAs) &&
        Objects.equals(this.managedExecution, updateStackSetInput.managedExecution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackSetName, description, templateBody, templateURL, usePreviousTemplate, parameters, capabilities, tags, operationPreferences, administrationRoleARN, executionRoleName, deploymentTargets, permissionModel, autoDeployment, operationId, accounts, regions, callAs, managedExecution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateStackSetInput {\n");
    sb.append("    stackSetName: ").append(toIndentedString(stackSetName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    templateBody: ").append(toIndentedString(templateBody)).append("\n");
    sb.append("    templateURL: ").append(toIndentedString(templateURL)).append("\n");
    sb.append("    usePreviousTemplate: ").append(toIndentedString(usePreviousTemplate)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    operationPreferences: ").append(toIndentedString(operationPreferences)).append("\n");
    sb.append("    administrationRoleARN: ").append(toIndentedString(administrationRoleARN)).append("\n");
    sb.append("    executionRoleName: ").append(toIndentedString(executionRoleName)).append("\n");
    sb.append("    deploymentTargets: ").append(toIndentedString(deploymentTargets)).append("\n");
    sb.append("    permissionModel: ").append(toIndentedString(permissionModel)).append("\n");
    sb.append("    autoDeployment: ").append(toIndentedString(autoDeployment)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    callAs: ").append(toIndentedString(callAs)).append("\n");
    sb.append("    managedExecution: ").append(toIndentedString(managedExecution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackSetName");
    openapiFields.add("Description");
    openapiFields.add("TemplateBody");
    openapiFields.add("TemplateURL");
    openapiFields.add("UsePreviousTemplate");
    openapiFields.add("Parameters");
    openapiFields.add("Capabilities");
    openapiFields.add("Tags");
    openapiFields.add("OperationPreferences");
    openapiFields.add("AdministrationRoleARN");
    openapiFields.add("ExecutionRoleName");
    openapiFields.add("DeploymentTargets");
    openapiFields.add("PermissionModel");
    openapiFields.add("AutoDeployment");
    openapiFields.add("OperationId");
    openapiFields.add("Accounts");
    openapiFields.add("Regions");
    openapiFields.add("CallAs");
    openapiFields.add("ManagedExecution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackSetName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateStackSetInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateStackSetInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateStackSetInput is not found in the empty JSON string", UpdateStackSetInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateStackSetInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateStackSetInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateStackSetInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StackSetName`
      String.validateJsonElement(jsonObj.get("StackSetName"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `TemplateBody`
      if (jsonObj.get("TemplateBody") != null && !jsonObj.get("TemplateBody").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TemplateBody"));
      }
      // validate the optional field `TemplateURL`
      if (jsonObj.get("TemplateURL") != null && !jsonObj.get("TemplateURL").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TemplateURL"));
      }
      // validate the optional field `UsePreviousTemplate`
      if (jsonObj.get("UsePreviousTemplate") != null && !jsonObj.get("UsePreviousTemplate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UsePreviousTemplate"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `Capabilities`
      if (jsonObj.get("Capabilities") != null && !jsonObj.get("Capabilities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Capabilities"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `OperationPreferences`
      if (jsonObj.get("OperationPreferences") != null && !jsonObj.get("OperationPreferences").isJsonNull()) {
        CreateStackInstancesInputOperationPreferences.validateJsonElement(jsonObj.get("OperationPreferences"));
      }
      // validate the optional field `AdministrationRoleARN`
      if (jsonObj.get("AdministrationRoleARN") != null && !jsonObj.get("AdministrationRoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AdministrationRoleARN"));
      }
      // validate the optional field `ExecutionRoleName`
      if (jsonObj.get("ExecutionRoleName") != null && !jsonObj.get("ExecutionRoleName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutionRoleName"));
      }
      // validate the optional field `DeploymentTargets`
      if (jsonObj.get("DeploymentTargets") != null && !jsonObj.get("DeploymentTargets").isJsonNull()) {
        UpdateStackSetInputDeploymentTargets.validateJsonElement(jsonObj.get("DeploymentTargets"));
      }
      // validate the optional field `PermissionModel`
      if (jsonObj.get("PermissionModel") != null && !jsonObj.get("PermissionModel").isJsonNull()) {
        PermissionModels.validateJsonElement(jsonObj.get("PermissionModel"));
      }
      // validate the optional field `AutoDeployment`
      if (jsonObj.get("AutoDeployment") != null && !jsonObj.get("AutoDeployment").isJsonNull()) {
        UpdateStackSetInputAutoDeployment.validateJsonElement(jsonObj.get("AutoDeployment"));
      }
      // validate the optional field `OperationId`
      if (jsonObj.get("OperationId") != null && !jsonObj.get("OperationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OperationId"));
      }
      // validate the optional field `Accounts`
      if (jsonObj.get("Accounts") != null && !jsonObj.get("Accounts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Accounts"));
      }
      // validate the optional field `Regions`
      if (jsonObj.get("Regions") != null && !jsonObj.get("Regions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Regions"));
      }
      // validate the optional field `CallAs`
      if (jsonObj.get("CallAs") != null && !jsonObj.get("CallAs").isJsonNull()) {
        CallAs.validateJsonElement(jsonObj.get("CallAs"));
      }
      // validate the optional field `ManagedExecution`
      if (jsonObj.get("ManagedExecution") != null && !jsonObj.get("ManagedExecution").isJsonNull()) {
        CreateStackSetInputManagedExecution.validateJsonElement(jsonObj.get("ManagedExecution"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateStackSetInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateStackSetInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateStackSetInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateStackSetInput.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateStackSetInput>() {
           @Override
           public void write(JsonWriter out, UpdateStackSetInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateStackSetInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateStackSetInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateStackSetInput
   * @throws IOException if the JSON string is invalid with respect to UpdateStackSetInput
   */
  public static UpdateStackSetInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateStackSetInput.class);
  }

  /**
   * Convert an instance of UpdateStackSetInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

