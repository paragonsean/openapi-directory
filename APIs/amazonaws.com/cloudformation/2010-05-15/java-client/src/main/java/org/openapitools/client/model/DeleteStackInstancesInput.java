/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallAs;
import org.openapitools.client.model.CreateStackInstancesInputOperationPreferences;
import org.openapitools.client.model.DeleteStackInstancesInputDeploymentTargets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteStackInstancesInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteStackInstancesInput {
  public static final String SERIALIZED_NAME_STACK_SET_NAME = "StackSetName";
  @SerializedName(SERIALIZED_NAME_STACK_SET_NAME)
  private String stackSetName;

  public static final String SERIALIZED_NAME_ACCOUNTS = "Accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private List accounts;

  public static final String SERIALIZED_NAME_DEPLOYMENT_TARGETS = "DeploymentTargets";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_TARGETS)
  private DeleteStackInstancesInputDeploymentTargets deploymentTargets;

  public static final String SERIALIZED_NAME_REGIONS = "Regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List regions;

  public static final String SERIALIZED_NAME_OPERATION_PREFERENCES = "OperationPreferences";
  @SerializedName(SERIALIZED_NAME_OPERATION_PREFERENCES)
  private CreateStackInstancesInputOperationPreferences operationPreferences;

  public static final String SERIALIZED_NAME_RETAIN_STACKS = "RetainStacks";
  @SerializedName(SERIALIZED_NAME_RETAIN_STACKS)
  private Boolean retainStacks;

  public static final String SERIALIZED_NAME_OPERATION_ID = "OperationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_CALL_AS = "CallAs";
  @SerializedName(SERIALIZED_NAME_CALL_AS)
  private CallAs callAs;

  public DeleteStackInstancesInput() {
  }

  public DeleteStackInstancesInput stackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
    return this;
  }

  /**
   * Get stackSetName
   * @return stackSetName
   */
  @javax.annotation.Nonnull
  public String getStackSetName() {
    return stackSetName;
  }

  public void setStackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
  }


  public DeleteStackInstancesInput accounts(List accounts) {
    this.accounts = accounts;
    return this;
  }

  /**
   * Get accounts
   * @return accounts
   */
  @javax.annotation.Nullable
  public List getAccounts() {
    return accounts;
  }

  public void setAccounts(List accounts) {
    this.accounts = accounts;
  }


  public DeleteStackInstancesInput deploymentTargets(DeleteStackInstancesInputDeploymentTargets deploymentTargets) {
    this.deploymentTargets = deploymentTargets;
    return this;
  }

  /**
   * Get deploymentTargets
   * @return deploymentTargets
   */
  @javax.annotation.Nullable
  public DeleteStackInstancesInputDeploymentTargets getDeploymentTargets() {
    return deploymentTargets;
  }

  public void setDeploymentTargets(DeleteStackInstancesInputDeploymentTargets deploymentTargets) {
    this.deploymentTargets = deploymentTargets;
  }


  public DeleteStackInstancesInput regions(List regions) {
    this.regions = regions;
    return this;
  }

  /**
   * Get regions
   * @return regions
   */
  @javax.annotation.Nonnull
  public List getRegions() {
    return regions;
  }

  public void setRegions(List regions) {
    this.regions = regions;
  }


  public DeleteStackInstancesInput operationPreferences(CreateStackInstancesInputOperationPreferences operationPreferences) {
    this.operationPreferences = operationPreferences;
    return this;
  }

  /**
   * Get operationPreferences
   * @return operationPreferences
   */
  @javax.annotation.Nullable
  public CreateStackInstancesInputOperationPreferences getOperationPreferences() {
    return operationPreferences;
  }

  public void setOperationPreferences(CreateStackInstancesInputOperationPreferences operationPreferences) {
    this.operationPreferences = operationPreferences;
  }


  public DeleteStackInstancesInput retainStacks(Boolean retainStacks) {
    this.retainStacks = retainStacks;
    return this;
  }

  /**
   * Get retainStacks
   * @return retainStacks
   */
  @javax.annotation.Nonnull
  public Boolean getRetainStacks() {
    return retainStacks;
  }

  public void setRetainStacks(Boolean retainStacks) {
    this.retainStacks = retainStacks;
  }


  public DeleteStackInstancesInput operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Get operationId
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public DeleteStackInstancesInput callAs(CallAs callAs) {
    this.callAs = callAs;
    return this;
  }

  /**
   * Get callAs
   * @return callAs
   */
  @javax.annotation.Nullable
  public CallAs getCallAs() {
    return callAs;
  }

  public void setCallAs(CallAs callAs) {
    this.callAs = callAs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteStackInstancesInput deleteStackInstancesInput = (DeleteStackInstancesInput) o;
    return Objects.equals(this.stackSetName, deleteStackInstancesInput.stackSetName) &&
        Objects.equals(this.accounts, deleteStackInstancesInput.accounts) &&
        Objects.equals(this.deploymentTargets, deleteStackInstancesInput.deploymentTargets) &&
        Objects.equals(this.regions, deleteStackInstancesInput.regions) &&
        Objects.equals(this.operationPreferences, deleteStackInstancesInput.operationPreferences) &&
        Objects.equals(this.retainStacks, deleteStackInstancesInput.retainStacks) &&
        Objects.equals(this.operationId, deleteStackInstancesInput.operationId) &&
        Objects.equals(this.callAs, deleteStackInstancesInput.callAs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackSetName, accounts, deploymentTargets, regions, operationPreferences, retainStacks, operationId, callAs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteStackInstancesInput {\n");
    sb.append("    stackSetName: ").append(toIndentedString(stackSetName)).append("\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    deploymentTargets: ").append(toIndentedString(deploymentTargets)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    operationPreferences: ").append(toIndentedString(operationPreferences)).append("\n");
    sb.append("    retainStacks: ").append(toIndentedString(retainStacks)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    callAs: ").append(toIndentedString(callAs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackSetName");
    openapiFields.add("Accounts");
    openapiFields.add("DeploymentTargets");
    openapiFields.add("Regions");
    openapiFields.add("OperationPreferences");
    openapiFields.add("RetainStacks");
    openapiFields.add("OperationId");
    openapiFields.add("CallAs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackSetName");
    openapiRequiredFields.add("Regions");
    openapiRequiredFields.add("RetainStacks");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteStackInstancesInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteStackInstancesInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteStackInstancesInput is not found in the empty JSON string", DeleteStackInstancesInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteStackInstancesInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteStackInstancesInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeleteStackInstancesInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StackSetName`
      String.validateJsonElement(jsonObj.get("StackSetName"));
      // validate the optional field `Accounts`
      if (jsonObj.get("Accounts") != null && !jsonObj.get("Accounts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Accounts"));
      }
      // validate the optional field `DeploymentTargets`
      if (jsonObj.get("DeploymentTargets") != null && !jsonObj.get("DeploymentTargets").isJsonNull()) {
        DeleteStackInstancesInputDeploymentTargets.validateJsonElement(jsonObj.get("DeploymentTargets"));
      }
      // validate the required field `Regions`
      List.validateJsonElement(jsonObj.get("Regions"));
      // validate the optional field `OperationPreferences`
      if (jsonObj.get("OperationPreferences") != null && !jsonObj.get("OperationPreferences").isJsonNull()) {
        CreateStackInstancesInputOperationPreferences.validateJsonElement(jsonObj.get("OperationPreferences"));
      }
      // validate the required field `RetainStacks`
      Boolean.validateJsonElement(jsonObj.get("RetainStacks"));
      // validate the optional field `OperationId`
      if (jsonObj.get("OperationId") != null && !jsonObj.get("OperationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OperationId"));
      }
      // validate the optional field `CallAs`
      if (jsonObj.get("CallAs") != null && !jsonObj.get("CallAs").isJsonNull()) {
        CallAs.validateJsonElement(jsonObj.get("CallAs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteStackInstancesInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteStackInstancesInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteStackInstancesInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteStackInstancesInput.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteStackInstancesInput>() {
           @Override
           public void write(JsonWriter out, DeleteStackInstancesInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteStackInstancesInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteStackInstancesInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteStackInstancesInput
   * @throws IOException if the JSON string is invalid with respect to DeleteStackInstancesInput
   */
  public static DeleteStackInstancesInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteStackInstancesInput.class);
  }

  /**
   * Convert an instance of DeleteStackInstancesInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

