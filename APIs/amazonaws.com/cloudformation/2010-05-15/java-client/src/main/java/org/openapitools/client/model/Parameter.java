/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Parameter data type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Parameter {
  public static final String SERIALIZED_NAME_PARAMETER_KEY = "ParameterKey";
  @SerializedName(SERIALIZED_NAME_PARAMETER_KEY)
  private String parameterKey;

  public static final String SERIALIZED_NAME_PARAMETER_VALUE = "ParameterValue";
  @SerializedName(SERIALIZED_NAME_PARAMETER_VALUE)
  private String parameterValue;

  public static final String SERIALIZED_NAME_USE_PREVIOUS_VALUE = "UsePreviousValue";
  @SerializedName(SERIALIZED_NAME_USE_PREVIOUS_VALUE)
  private Boolean usePreviousValue;

  public static final String SERIALIZED_NAME_RESOLVED_VALUE = "ResolvedValue";
  @SerializedName(SERIALIZED_NAME_RESOLVED_VALUE)
  private String resolvedValue;

  public Parameter() {
  }

  public Parameter parameterKey(String parameterKey) {
    this.parameterKey = parameterKey;
    return this;
  }

  /**
   * Get parameterKey
   * @return parameterKey
   */
  @javax.annotation.Nullable
  public String getParameterKey() {
    return parameterKey;
  }

  public void setParameterKey(String parameterKey) {
    this.parameterKey = parameterKey;
  }


  public Parameter parameterValue(String parameterValue) {
    this.parameterValue = parameterValue;
    return this;
  }

  /**
   * Get parameterValue
   * @return parameterValue
   */
  @javax.annotation.Nullable
  public String getParameterValue() {
    return parameterValue;
  }

  public void setParameterValue(String parameterValue) {
    this.parameterValue = parameterValue;
  }


  public Parameter usePreviousValue(Boolean usePreviousValue) {
    this.usePreviousValue = usePreviousValue;
    return this;
  }

  /**
   * Get usePreviousValue
   * @return usePreviousValue
   */
  @javax.annotation.Nullable
  public Boolean getUsePreviousValue() {
    return usePreviousValue;
  }

  public void setUsePreviousValue(Boolean usePreviousValue) {
    this.usePreviousValue = usePreviousValue;
  }


  public Parameter resolvedValue(String resolvedValue) {
    this.resolvedValue = resolvedValue;
    return this;
  }

  /**
   * Get resolvedValue
   * @return resolvedValue
   */
  @javax.annotation.Nullable
  public String getResolvedValue() {
    return resolvedValue;
  }

  public void setResolvedValue(String resolvedValue) {
    this.resolvedValue = resolvedValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Parameter parameter = (Parameter) o;
    return Objects.equals(this.parameterKey, parameter.parameterKey) &&
        Objects.equals(this.parameterValue, parameter.parameterValue) &&
        Objects.equals(this.usePreviousValue, parameter.usePreviousValue) &&
        Objects.equals(this.resolvedValue, parameter.resolvedValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parameterKey, parameterValue, usePreviousValue, resolvedValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Parameter {\n");
    sb.append("    parameterKey: ").append(toIndentedString(parameterKey)).append("\n");
    sb.append("    parameterValue: ").append(toIndentedString(parameterValue)).append("\n");
    sb.append("    usePreviousValue: ").append(toIndentedString(usePreviousValue)).append("\n");
    sb.append("    resolvedValue: ").append(toIndentedString(resolvedValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ParameterKey");
    openapiFields.add("ParameterValue");
    openapiFields.add("UsePreviousValue");
    openapiFields.add("ResolvedValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Parameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Parameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Parameter is not found in the empty JSON string", Parameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Parameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Parameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ParameterKey`
      if (jsonObj.get("ParameterKey") != null && !jsonObj.get("ParameterKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParameterKey"));
      }
      // validate the optional field `ParameterValue`
      if (jsonObj.get("ParameterValue") != null && !jsonObj.get("ParameterValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParameterValue"));
      }
      // validate the optional field `UsePreviousValue`
      if (jsonObj.get("UsePreviousValue") != null && !jsonObj.get("UsePreviousValue").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UsePreviousValue"));
      }
      // validate the optional field `ResolvedValue`
      if (jsonObj.get("ResolvedValue") != null && !jsonObj.get("ResolvedValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResolvedValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Parameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Parameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Parameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Parameter.class));

       return (TypeAdapter<T>) new TypeAdapter<Parameter>() {
           @Override
           public void write(JsonWriter out, Parameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Parameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Parameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Parameter
   * @throws IOException if the JSON string is invalid with respect to Parameter
   */
  public static Parameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Parameter.class);
  }

  /**
   * Convert an instance of Parameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

