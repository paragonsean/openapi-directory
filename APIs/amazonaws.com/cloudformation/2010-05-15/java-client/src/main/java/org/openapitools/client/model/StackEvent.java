/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.HookFailureMode;
import org.openapitools.client.model.HookInvocationPoint;
import org.openapitools.client.model.HookStatus;
import org.openapitools.client.model.ResourceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The StackEvent data type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackEvent {
  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_EVENT_ID = "EventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private String eventId;

  public static final String SERIALIZED_NAME_STACK_NAME = "StackName";
  @SerializedName(SERIALIZED_NAME_STACK_NAME)
  private String stackName;

  public static final String SERIALIZED_NAME_LOGICAL_RESOURCE_ID = "LogicalResourceId";
  @SerializedName(SERIALIZED_NAME_LOGICAL_RESOURCE_ID)
  private String logicalResourceId;

  public static final String SERIALIZED_NAME_PHYSICAL_RESOURCE_ID = "PhysicalResourceId";
  @SerializedName(SERIALIZED_NAME_PHYSICAL_RESOURCE_ID)
  private String physicalResourceId;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_RESOURCE_STATUS = "ResourceStatus";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATUS)
  private ResourceStatus resourceStatus;

  public static final String SERIALIZED_NAME_RESOURCE_STATUS_REASON = "ResourceStatusReason";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATUS_REASON)
  private String resourceStatusReason;

  public static final String SERIALIZED_NAME_RESOURCE_PROPERTIES = "ResourceProperties";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PROPERTIES)
  private String resourceProperties;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_HOOK_TYPE = "HookType";
  @SerializedName(SERIALIZED_NAME_HOOK_TYPE)
  private String hookType;

  public static final String SERIALIZED_NAME_HOOK_STATUS = "HookStatus";
  @SerializedName(SERIALIZED_NAME_HOOK_STATUS)
  private HookStatus hookStatus;

  public static final String SERIALIZED_NAME_HOOK_STATUS_REASON = "HookStatusReason";
  @SerializedName(SERIALIZED_NAME_HOOK_STATUS_REASON)
  private String hookStatusReason;

  public static final String SERIALIZED_NAME_HOOK_INVOCATION_POINT = "HookInvocationPoint";
  @SerializedName(SERIALIZED_NAME_HOOK_INVOCATION_POINT)
  private HookInvocationPoint hookInvocationPoint;

  public static final String SERIALIZED_NAME_HOOK_FAILURE_MODE = "HookFailureMode";
  @SerializedName(SERIALIZED_NAME_HOOK_FAILURE_MODE)
  private HookFailureMode hookFailureMode;

  public StackEvent() {
  }

  public StackEvent stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nonnull
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public StackEvent eventId(String eventId) {
    this.eventId = eventId;
    return this;
  }

  /**
   * Get eventId
   * @return eventId
   */
  @javax.annotation.Nonnull
  public String getEventId() {
    return eventId;
  }

  public void setEventId(String eventId) {
    this.eventId = eventId;
  }


  public StackEvent stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

  /**
   * Get stackName
   * @return stackName
   */
  @javax.annotation.Nonnull
  public String getStackName() {
    return stackName;
  }

  public void setStackName(String stackName) {
    this.stackName = stackName;
  }


  public StackEvent logicalResourceId(String logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
    return this;
  }

  /**
   * Get logicalResourceId
   * @return logicalResourceId
   */
  @javax.annotation.Nullable
  public String getLogicalResourceId() {
    return logicalResourceId;
  }

  public void setLogicalResourceId(String logicalResourceId) {
    this.logicalResourceId = logicalResourceId;
  }


  public StackEvent physicalResourceId(String physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
    return this;
  }

  /**
   * Get physicalResourceId
   * @return physicalResourceId
   */
  @javax.annotation.Nullable
  public String getPhysicalResourceId() {
    return physicalResourceId;
  }

  public void setPhysicalResourceId(String physicalResourceId) {
    this.physicalResourceId = physicalResourceId;
  }


  public StackEvent resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public StackEvent timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public StackEvent resourceStatus(ResourceStatus resourceStatus) {
    this.resourceStatus = resourceStatus;
    return this;
  }

  /**
   * Get resourceStatus
   * @return resourceStatus
   */
  @javax.annotation.Nullable
  public ResourceStatus getResourceStatus() {
    return resourceStatus;
  }

  public void setResourceStatus(ResourceStatus resourceStatus) {
    this.resourceStatus = resourceStatus;
  }


  public StackEvent resourceStatusReason(String resourceStatusReason) {
    this.resourceStatusReason = resourceStatusReason;
    return this;
  }

  /**
   * Get resourceStatusReason
   * @return resourceStatusReason
   */
  @javax.annotation.Nullable
  public String getResourceStatusReason() {
    return resourceStatusReason;
  }

  public void setResourceStatusReason(String resourceStatusReason) {
    this.resourceStatusReason = resourceStatusReason;
  }


  public StackEvent resourceProperties(String resourceProperties) {
    this.resourceProperties = resourceProperties;
    return this;
  }

  /**
   * Get resourceProperties
   * @return resourceProperties
   */
  @javax.annotation.Nullable
  public String getResourceProperties() {
    return resourceProperties;
  }

  public void setResourceProperties(String resourceProperties) {
    this.resourceProperties = resourceProperties;
  }


  public StackEvent clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public StackEvent hookType(String hookType) {
    this.hookType = hookType;
    return this;
  }

  /**
   * Get hookType
   * @return hookType
   */
  @javax.annotation.Nullable
  public String getHookType() {
    return hookType;
  }

  public void setHookType(String hookType) {
    this.hookType = hookType;
  }


  public StackEvent hookStatus(HookStatus hookStatus) {
    this.hookStatus = hookStatus;
    return this;
  }

  /**
   * Get hookStatus
   * @return hookStatus
   */
  @javax.annotation.Nullable
  public HookStatus getHookStatus() {
    return hookStatus;
  }

  public void setHookStatus(HookStatus hookStatus) {
    this.hookStatus = hookStatus;
  }


  public StackEvent hookStatusReason(String hookStatusReason) {
    this.hookStatusReason = hookStatusReason;
    return this;
  }

  /**
   * Get hookStatusReason
   * @return hookStatusReason
   */
  @javax.annotation.Nullable
  public String getHookStatusReason() {
    return hookStatusReason;
  }

  public void setHookStatusReason(String hookStatusReason) {
    this.hookStatusReason = hookStatusReason;
  }


  public StackEvent hookInvocationPoint(HookInvocationPoint hookInvocationPoint) {
    this.hookInvocationPoint = hookInvocationPoint;
    return this;
  }

  /**
   * Get hookInvocationPoint
   * @return hookInvocationPoint
   */
  @javax.annotation.Nullable
  public HookInvocationPoint getHookInvocationPoint() {
    return hookInvocationPoint;
  }

  public void setHookInvocationPoint(HookInvocationPoint hookInvocationPoint) {
    this.hookInvocationPoint = hookInvocationPoint;
  }


  public StackEvent hookFailureMode(HookFailureMode hookFailureMode) {
    this.hookFailureMode = hookFailureMode;
    return this;
  }

  /**
   * Get hookFailureMode
   * @return hookFailureMode
   */
  @javax.annotation.Nullable
  public HookFailureMode getHookFailureMode() {
    return hookFailureMode;
  }

  public void setHookFailureMode(HookFailureMode hookFailureMode) {
    this.hookFailureMode = hookFailureMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackEvent stackEvent = (StackEvent) o;
    return Objects.equals(this.stackId, stackEvent.stackId) &&
        Objects.equals(this.eventId, stackEvent.eventId) &&
        Objects.equals(this.stackName, stackEvent.stackName) &&
        Objects.equals(this.logicalResourceId, stackEvent.logicalResourceId) &&
        Objects.equals(this.physicalResourceId, stackEvent.physicalResourceId) &&
        Objects.equals(this.resourceType, stackEvent.resourceType) &&
        Objects.equals(this.timestamp, stackEvent.timestamp) &&
        Objects.equals(this.resourceStatus, stackEvent.resourceStatus) &&
        Objects.equals(this.resourceStatusReason, stackEvent.resourceStatusReason) &&
        Objects.equals(this.resourceProperties, stackEvent.resourceProperties) &&
        Objects.equals(this.clientRequestToken, stackEvent.clientRequestToken) &&
        Objects.equals(this.hookType, stackEvent.hookType) &&
        Objects.equals(this.hookStatus, stackEvent.hookStatus) &&
        Objects.equals(this.hookStatusReason, stackEvent.hookStatusReason) &&
        Objects.equals(this.hookInvocationPoint, stackEvent.hookInvocationPoint) &&
        Objects.equals(this.hookFailureMode, stackEvent.hookFailureMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackId, eventId, stackName, logicalResourceId, physicalResourceId, resourceType, timestamp, resourceStatus, resourceStatusReason, resourceProperties, clientRequestToken, hookType, hookStatus, hookStatusReason, hookInvocationPoint, hookFailureMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackEvent {\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("    logicalResourceId: ").append(toIndentedString(logicalResourceId)).append("\n");
    sb.append("    physicalResourceId: ").append(toIndentedString(physicalResourceId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    resourceStatus: ").append(toIndentedString(resourceStatus)).append("\n");
    sb.append("    resourceStatusReason: ").append(toIndentedString(resourceStatusReason)).append("\n");
    sb.append("    resourceProperties: ").append(toIndentedString(resourceProperties)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    hookType: ").append(toIndentedString(hookType)).append("\n");
    sb.append("    hookStatus: ").append(toIndentedString(hookStatus)).append("\n");
    sb.append("    hookStatusReason: ").append(toIndentedString(hookStatusReason)).append("\n");
    sb.append("    hookInvocationPoint: ").append(toIndentedString(hookInvocationPoint)).append("\n");
    sb.append("    hookFailureMode: ").append(toIndentedString(hookFailureMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackId");
    openapiFields.add("EventId");
    openapiFields.add("StackName");
    openapiFields.add("LogicalResourceId");
    openapiFields.add("PhysicalResourceId");
    openapiFields.add("ResourceType");
    openapiFields.add("Timestamp");
    openapiFields.add("ResourceStatus");
    openapiFields.add("ResourceStatusReason");
    openapiFields.add("ResourceProperties");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("HookType");
    openapiFields.add("HookStatus");
    openapiFields.add("HookStatusReason");
    openapiFields.add("HookInvocationPoint");
    openapiFields.add("HookFailureMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackId");
    openapiRequiredFields.add("EventId");
    openapiRequiredFields.add("StackName");
    openapiRequiredFields.add("Timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackEvent is not found in the empty JSON string", StackEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StackEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StackId`
      String.validateJsonElement(jsonObj.get("StackId"));
      // validate the required field `EventId`
      String.validateJsonElement(jsonObj.get("EventId"));
      // validate the required field `StackName`
      String.validateJsonElement(jsonObj.get("StackName"));
      // validate the optional field `LogicalResourceId`
      if (jsonObj.get("LogicalResourceId") != null && !jsonObj.get("LogicalResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogicalResourceId"));
      }
      // validate the optional field `PhysicalResourceId`
      if (jsonObj.get("PhysicalResourceId") != null && !jsonObj.get("PhysicalResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhysicalResourceId"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the required field `Timestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      // validate the optional field `ResourceStatus`
      if (jsonObj.get("ResourceStatus") != null && !jsonObj.get("ResourceStatus").isJsonNull()) {
        ResourceStatus.validateJsonElement(jsonObj.get("ResourceStatus"));
      }
      // validate the optional field `ResourceStatusReason`
      if (jsonObj.get("ResourceStatusReason") != null && !jsonObj.get("ResourceStatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceStatusReason"));
      }
      // validate the optional field `ResourceProperties`
      if (jsonObj.get("ResourceProperties") != null && !jsonObj.get("ResourceProperties").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceProperties"));
      }
      // validate the optional field `ClientRequestToken`
      if (jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientRequestToken"));
      }
      // validate the optional field `HookType`
      if (jsonObj.get("HookType") != null && !jsonObj.get("HookType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HookType"));
      }
      // validate the optional field `HookStatus`
      if (jsonObj.get("HookStatus") != null && !jsonObj.get("HookStatus").isJsonNull()) {
        HookStatus.validateJsonElement(jsonObj.get("HookStatus"));
      }
      // validate the optional field `HookStatusReason`
      if (jsonObj.get("HookStatusReason") != null && !jsonObj.get("HookStatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HookStatusReason"));
      }
      // validate the optional field `HookInvocationPoint`
      if (jsonObj.get("HookInvocationPoint") != null && !jsonObj.get("HookInvocationPoint").isJsonNull()) {
        HookInvocationPoint.validateJsonElement(jsonObj.get("HookInvocationPoint"));
      }
      // validate the optional field `HookFailureMode`
      if (jsonObj.get("HookFailureMode") != null && !jsonObj.get("HookFailureMode").isJsonNull()) {
        HookFailureMode.validateJsonElement(jsonObj.get("HookFailureMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<StackEvent>() {
           @Override
           public void write(JsonWriter out, StackEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackEvent
   * @throws IOException if the JSON string is invalid with respect to StackEvent
   */
  public static StackEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackEvent.class);
  }

  /**
   * Convert an instance of StackEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

