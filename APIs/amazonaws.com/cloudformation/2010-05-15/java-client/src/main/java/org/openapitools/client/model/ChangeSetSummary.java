/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ChangeSetStatus;
import org.openapitools.client.model.ExecutionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The &lt;code&gt;ChangeSetSummary&lt;/code&gt; structure describes a change set, its status, and the stack with which it&#39;s associated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangeSetSummary {
  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_STACK_NAME = "StackName";
  @SerializedName(SERIALIZED_NAME_STACK_NAME)
  private String stackName;

  public static final String SERIALIZED_NAME_CHANGE_SET_ID = "ChangeSetId";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET_ID)
  private String changeSetId;

  public static final String SERIALIZED_NAME_CHANGE_SET_NAME = "ChangeSetName";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET_NAME)
  private String changeSetName;

  public static final String SERIALIZED_NAME_EXECUTION_STATUS = "ExecutionStatus";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STATUS)
  private ExecutionStatus executionStatus;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ChangeSetStatus status;

  public static final String SERIALIZED_NAME_STATUS_REASON = "StatusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  private String statusReason;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INCLUDE_NESTED_STACKS = "IncludeNestedStacks";
  @SerializedName(SERIALIZED_NAME_INCLUDE_NESTED_STACKS)
  private Boolean includeNestedStacks;

  public static final String SERIALIZED_NAME_PARENT_CHANGE_SET_ID = "ParentChangeSetId";
  @SerializedName(SERIALIZED_NAME_PARENT_CHANGE_SET_ID)
  private String parentChangeSetId;

  public static final String SERIALIZED_NAME_ROOT_CHANGE_SET_ID = "RootChangeSetId";
  @SerializedName(SERIALIZED_NAME_ROOT_CHANGE_SET_ID)
  private String rootChangeSetId;

  public ChangeSetSummary() {
  }

  public ChangeSetSummary stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nullable
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public ChangeSetSummary stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

  /**
   * Get stackName
   * @return stackName
   */
  @javax.annotation.Nullable
  public String getStackName() {
    return stackName;
  }

  public void setStackName(String stackName) {
    this.stackName = stackName;
  }


  public ChangeSetSummary changeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
    return this;
  }

  /**
   * Get changeSetId
   * @return changeSetId
   */
  @javax.annotation.Nullable
  public String getChangeSetId() {
    return changeSetId;
  }

  public void setChangeSetId(String changeSetId) {
    this.changeSetId = changeSetId;
  }


  public ChangeSetSummary changeSetName(String changeSetName) {
    this.changeSetName = changeSetName;
    return this;
  }

  /**
   * Get changeSetName
   * @return changeSetName
   */
  @javax.annotation.Nullable
  public String getChangeSetName() {
    return changeSetName;
  }

  public void setChangeSetName(String changeSetName) {
    this.changeSetName = changeSetName;
  }


  public ChangeSetSummary executionStatus(ExecutionStatus executionStatus) {
    this.executionStatus = executionStatus;
    return this;
  }

  /**
   * Get executionStatus
   * @return executionStatus
   */
  @javax.annotation.Nullable
  public ExecutionStatus getExecutionStatus() {
    return executionStatus;
  }

  public void setExecutionStatus(ExecutionStatus executionStatus) {
    this.executionStatus = executionStatus;
  }


  public ChangeSetSummary status(ChangeSetStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ChangeSetStatus getStatus() {
    return status;
  }

  public void setStatus(ChangeSetStatus status) {
    this.status = status;
  }


  public ChangeSetSummary statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }


  public ChangeSetSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ChangeSetSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ChangeSetSummary includeNestedStacks(Boolean includeNestedStacks) {
    this.includeNestedStacks = includeNestedStacks;
    return this;
  }

  /**
   * Get includeNestedStacks
   * @return includeNestedStacks
   */
  @javax.annotation.Nullable
  public Boolean getIncludeNestedStacks() {
    return includeNestedStacks;
  }

  public void setIncludeNestedStacks(Boolean includeNestedStacks) {
    this.includeNestedStacks = includeNestedStacks;
  }


  public ChangeSetSummary parentChangeSetId(String parentChangeSetId) {
    this.parentChangeSetId = parentChangeSetId;
    return this;
  }

  /**
   * Get parentChangeSetId
   * @return parentChangeSetId
   */
  @javax.annotation.Nullable
  public String getParentChangeSetId() {
    return parentChangeSetId;
  }

  public void setParentChangeSetId(String parentChangeSetId) {
    this.parentChangeSetId = parentChangeSetId;
  }


  public ChangeSetSummary rootChangeSetId(String rootChangeSetId) {
    this.rootChangeSetId = rootChangeSetId;
    return this;
  }

  /**
   * Get rootChangeSetId
   * @return rootChangeSetId
   */
  @javax.annotation.Nullable
  public String getRootChangeSetId() {
    return rootChangeSetId;
  }

  public void setRootChangeSetId(String rootChangeSetId) {
    this.rootChangeSetId = rootChangeSetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeSetSummary changeSetSummary = (ChangeSetSummary) o;
    return Objects.equals(this.stackId, changeSetSummary.stackId) &&
        Objects.equals(this.stackName, changeSetSummary.stackName) &&
        Objects.equals(this.changeSetId, changeSetSummary.changeSetId) &&
        Objects.equals(this.changeSetName, changeSetSummary.changeSetName) &&
        Objects.equals(this.executionStatus, changeSetSummary.executionStatus) &&
        Objects.equals(this.status, changeSetSummary.status) &&
        Objects.equals(this.statusReason, changeSetSummary.statusReason) &&
        Objects.equals(this.creationTime, changeSetSummary.creationTime) &&
        Objects.equals(this.description, changeSetSummary.description) &&
        Objects.equals(this.includeNestedStacks, changeSetSummary.includeNestedStacks) &&
        Objects.equals(this.parentChangeSetId, changeSetSummary.parentChangeSetId) &&
        Objects.equals(this.rootChangeSetId, changeSetSummary.rootChangeSetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackId, stackName, changeSetId, changeSetName, executionStatus, status, statusReason, creationTime, description, includeNestedStacks, parentChangeSetId, rootChangeSetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeSetSummary {\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("    changeSetId: ").append(toIndentedString(changeSetId)).append("\n");
    sb.append("    changeSetName: ").append(toIndentedString(changeSetName)).append("\n");
    sb.append("    executionStatus: ").append(toIndentedString(executionStatus)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    includeNestedStacks: ").append(toIndentedString(includeNestedStacks)).append("\n");
    sb.append("    parentChangeSetId: ").append(toIndentedString(parentChangeSetId)).append("\n");
    sb.append("    rootChangeSetId: ").append(toIndentedString(rootChangeSetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackId");
    openapiFields.add("StackName");
    openapiFields.add("ChangeSetId");
    openapiFields.add("ChangeSetName");
    openapiFields.add("ExecutionStatus");
    openapiFields.add("Status");
    openapiFields.add("StatusReason");
    openapiFields.add("CreationTime");
    openapiFields.add("Description");
    openapiFields.add("IncludeNestedStacks");
    openapiFields.add("ParentChangeSetId");
    openapiFields.add("RootChangeSetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangeSetSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangeSetSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeSetSummary is not found in the empty JSON string", ChangeSetSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangeSetSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangeSetSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StackId`
      if (jsonObj.get("StackId") != null && !jsonObj.get("StackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackId"));
      }
      // validate the optional field `StackName`
      if (jsonObj.get("StackName") != null && !jsonObj.get("StackName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackName"));
      }
      // validate the optional field `ChangeSetId`
      if (jsonObj.get("ChangeSetId") != null && !jsonObj.get("ChangeSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeSetId"));
      }
      // validate the optional field `ChangeSetName`
      if (jsonObj.get("ChangeSetName") != null && !jsonObj.get("ChangeSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeSetName"));
      }
      // validate the optional field `ExecutionStatus`
      if (jsonObj.get("ExecutionStatus") != null && !jsonObj.get("ExecutionStatus").isJsonNull()) {
        ExecutionStatus.validateJsonElement(jsonObj.get("ExecutionStatus"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ChangeSetStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusReason`
      if (jsonObj.get("StatusReason") != null && !jsonObj.get("StatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusReason"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `IncludeNestedStacks`
      if (jsonObj.get("IncludeNestedStacks") != null && !jsonObj.get("IncludeNestedStacks").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeNestedStacks"));
      }
      // validate the optional field `ParentChangeSetId`
      if (jsonObj.get("ParentChangeSetId") != null && !jsonObj.get("ParentChangeSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParentChangeSetId"));
      }
      // validate the optional field `RootChangeSetId`
      if (jsonObj.get("RootChangeSetId") != null && !jsonObj.get("RootChangeSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RootChangeSetId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeSetSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeSetSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeSetSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeSetSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeSetSummary>() {
           @Override
           public void write(JsonWriter out, ChangeSetSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeSetSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangeSetSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangeSetSummary
   * @throws IOException if the JSON string is invalid with respect to ChangeSetSummary
   */
  public static ChangeSetSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeSetSummary.class);
  }

  /**
   * Convert an instance of ChangeSetSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

