/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StackDriftDetectionStatus;
import org.openapitools.client.model.StackDriftStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeStackDriftDetectionStatusOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeStackDriftDetectionStatusOutput {
  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_STACK_DRIFT_DETECTION_ID = "StackDriftDetectionId";
  @SerializedName(SERIALIZED_NAME_STACK_DRIFT_DETECTION_ID)
  private String stackDriftDetectionId;

  public static final String SERIALIZED_NAME_STACK_DRIFT_STATUS = "StackDriftStatus";
  @SerializedName(SERIALIZED_NAME_STACK_DRIFT_STATUS)
  private StackDriftStatus stackDriftStatus;

  public static final String SERIALIZED_NAME_DETECTION_STATUS = "DetectionStatus";
  @SerializedName(SERIALIZED_NAME_DETECTION_STATUS)
  private StackDriftDetectionStatus detectionStatus;

  public static final String SERIALIZED_NAME_DETECTION_STATUS_REASON = "DetectionStatusReason";
  @SerializedName(SERIALIZED_NAME_DETECTION_STATUS_REASON)
  private String detectionStatusReason;

  public static final String SERIALIZED_NAME_DRIFTED_STACK_RESOURCE_COUNT = "DriftedStackResourceCount";
  @SerializedName(SERIALIZED_NAME_DRIFTED_STACK_RESOURCE_COUNT)
  private Integer driftedStackResourceCount;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public DescribeStackDriftDetectionStatusOutput() {
  }

  public DescribeStackDriftDetectionStatusOutput stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nonnull
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public DescribeStackDriftDetectionStatusOutput stackDriftDetectionId(String stackDriftDetectionId) {
    this.stackDriftDetectionId = stackDriftDetectionId;
    return this;
  }

  /**
   * Get stackDriftDetectionId
   * @return stackDriftDetectionId
   */
  @javax.annotation.Nonnull
  public String getStackDriftDetectionId() {
    return stackDriftDetectionId;
  }

  public void setStackDriftDetectionId(String stackDriftDetectionId) {
    this.stackDriftDetectionId = stackDriftDetectionId;
  }


  public DescribeStackDriftDetectionStatusOutput stackDriftStatus(StackDriftStatus stackDriftStatus) {
    this.stackDriftStatus = stackDriftStatus;
    return this;
  }

  /**
   * Get stackDriftStatus
   * @return stackDriftStatus
   */
  @javax.annotation.Nullable
  public StackDriftStatus getStackDriftStatus() {
    return stackDriftStatus;
  }

  public void setStackDriftStatus(StackDriftStatus stackDriftStatus) {
    this.stackDriftStatus = stackDriftStatus;
  }


  public DescribeStackDriftDetectionStatusOutput detectionStatus(StackDriftDetectionStatus detectionStatus) {
    this.detectionStatus = detectionStatus;
    return this;
  }

  /**
   * Get detectionStatus
   * @return detectionStatus
   */
  @javax.annotation.Nonnull
  public StackDriftDetectionStatus getDetectionStatus() {
    return detectionStatus;
  }

  public void setDetectionStatus(StackDriftDetectionStatus detectionStatus) {
    this.detectionStatus = detectionStatus;
  }


  public DescribeStackDriftDetectionStatusOutput detectionStatusReason(String detectionStatusReason) {
    this.detectionStatusReason = detectionStatusReason;
    return this;
  }

  /**
   * Get detectionStatusReason
   * @return detectionStatusReason
   */
  @javax.annotation.Nullable
  public String getDetectionStatusReason() {
    return detectionStatusReason;
  }

  public void setDetectionStatusReason(String detectionStatusReason) {
    this.detectionStatusReason = detectionStatusReason;
  }


  public DescribeStackDriftDetectionStatusOutput driftedStackResourceCount(Integer driftedStackResourceCount) {
    this.driftedStackResourceCount = driftedStackResourceCount;
    return this;
  }

  /**
   * Get driftedStackResourceCount
   * @return driftedStackResourceCount
   */
  @javax.annotation.Nullable
  public Integer getDriftedStackResourceCount() {
    return driftedStackResourceCount;
  }

  public void setDriftedStackResourceCount(Integer driftedStackResourceCount) {
    this.driftedStackResourceCount = driftedStackResourceCount;
  }


  public DescribeStackDriftDetectionStatusOutput timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeStackDriftDetectionStatusOutput describeStackDriftDetectionStatusOutput = (DescribeStackDriftDetectionStatusOutput) o;
    return Objects.equals(this.stackId, describeStackDriftDetectionStatusOutput.stackId) &&
        Objects.equals(this.stackDriftDetectionId, describeStackDriftDetectionStatusOutput.stackDriftDetectionId) &&
        Objects.equals(this.stackDriftStatus, describeStackDriftDetectionStatusOutput.stackDriftStatus) &&
        Objects.equals(this.detectionStatus, describeStackDriftDetectionStatusOutput.detectionStatus) &&
        Objects.equals(this.detectionStatusReason, describeStackDriftDetectionStatusOutput.detectionStatusReason) &&
        Objects.equals(this.driftedStackResourceCount, describeStackDriftDetectionStatusOutput.driftedStackResourceCount) &&
        Objects.equals(this.timestamp, describeStackDriftDetectionStatusOutput.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackId, stackDriftDetectionId, stackDriftStatus, detectionStatus, detectionStatusReason, driftedStackResourceCount, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeStackDriftDetectionStatusOutput {\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    stackDriftDetectionId: ").append(toIndentedString(stackDriftDetectionId)).append("\n");
    sb.append("    stackDriftStatus: ").append(toIndentedString(stackDriftStatus)).append("\n");
    sb.append("    detectionStatus: ").append(toIndentedString(detectionStatus)).append("\n");
    sb.append("    detectionStatusReason: ").append(toIndentedString(detectionStatusReason)).append("\n");
    sb.append("    driftedStackResourceCount: ").append(toIndentedString(driftedStackResourceCount)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackId");
    openapiFields.add("StackDriftDetectionId");
    openapiFields.add("StackDriftStatus");
    openapiFields.add("DetectionStatus");
    openapiFields.add("DetectionStatusReason");
    openapiFields.add("DriftedStackResourceCount");
    openapiFields.add("Timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackId");
    openapiRequiredFields.add("StackDriftDetectionId");
    openapiRequiredFields.add("DetectionStatus");
    openapiRequiredFields.add("Timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeStackDriftDetectionStatusOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeStackDriftDetectionStatusOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeStackDriftDetectionStatusOutput is not found in the empty JSON string", DescribeStackDriftDetectionStatusOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeStackDriftDetectionStatusOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeStackDriftDetectionStatusOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeStackDriftDetectionStatusOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StackId`
      String.validateJsonElement(jsonObj.get("StackId"));
      // validate the required field `StackDriftDetectionId`
      String.validateJsonElement(jsonObj.get("StackDriftDetectionId"));
      // validate the optional field `StackDriftStatus`
      if (jsonObj.get("StackDriftStatus") != null && !jsonObj.get("StackDriftStatus").isJsonNull()) {
        StackDriftStatus.validateJsonElement(jsonObj.get("StackDriftStatus"));
      }
      // validate the required field `DetectionStatus`
      StackDriftDetectionStatus.validateJsonElement(jsonObj.get("DetectionStatus"));
      // validate the optional field `DetectionStatusReason`
      if (jsonObj.get("DetectionStatusReason") != null && !jsonObj.get("DetectionStatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DetectionStatusReason"));
      }
      // validate the optional field `DriftedStackResourceCount`
      if (jsonObj.get("DriftedStackResourceCount") != null && !jsonObj.get("DriftedStackResourceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DriftedStackResourceCount"));
      }
      // validate the required field `Timestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeStackDriftDetectionStatusOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeStackDriftDetectionStatusOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeStackDriftDetectionStatusOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeStackDriftDetectionStatusOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeStackDriftDetectionStatusOutput>() {
           @Override
           public void write(JsonWriter out, DescribeStackDriftDetectionStatusOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeStackDriftDetectionStatusOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeStackDriftDetectionStatusOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeStackDriftDetectionStatusOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeStackDriftDetectionStatusOutput
   */
  public static DescribeStackDriftDetectionStatusOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeStackDriftDetectionStatusOutput.class);
  }

  /**
   * Convert an instance of DescribeStackDriftDetectionStatusOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

