/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RollbackStackInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RollbackStackInput {
  public static final String SERIALIZED_NAME_STACK_NAME = "StackName";
  @SerializedName(SERIALIZED_NAME_STACK_NAME)
  private String stackName;

  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_RETAIN_EXCEPT_ON_CREATE = "RetainExceptOnCreate";
  @SerializedName(SERIALIZED_NAME_RETAIN_EXCEPT_ON_CREATE)
  private Boolean retainExceptOnCreate;

  public RollbackStackInput() {
  }

  public RollbackStackInput stackName(String stackName) {
    this.stackName = stackName;
    return this;
  }

  /**
   * Get stackName
   * @return stackName
   */
  @javax.annotation.Nonnull
  public String getStackName() {
    return stackName;
  }

  public void setStackName(String stackName) {
    this.stackName = stackName;
  }


  public RollbackStackInput roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nullable
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public RollbackStackInput clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public RollbackStackInput retainExceptOnCreate(Boolean retainExceptOnCreate) {
    this.retainExceptOnCreate = retainExceptOnCreate;
    return this;
  }

  /**
   * Get retainExceptOnCreate
   * @return retainExceptOnCreate
   */
  @javax.annotation.Nullable
  public Boolean getRetainExceptOnCreate() {
    return retainExceptOnCreate;
  }

  public void setRetainExceptOnCreate(Boolean retainExceptOnCreate) {
    this.retainExceptOnCreate = retainExceptOnCreate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RollbackStackInput rollbackStackInput = (RollbackStackInput) o;
    return Objects.equals(this.stackName, rollbackStackInput.stackName) &&
        Objects.equals(this.roleARN, rollbackStackInput.roleARN) &&
        Objects.equals(this.clientRequestToken, rollbackStackInput.clientRequestToken) &&
        Objects.equals(this.retainExceptOnCreate, rollbackStackInput.retainExceptOnCreate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackName, roleARN, clientRequestToken, retainExceptOnCreate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RollbackStackInput {\n");
    sb.append("    stackName: ").append(toIndentedString(stackName)).append("\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    retainExceptOnCreate: ").append(toIndentedString(retainExceptOnCreate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackName");
    openapiFields.add("RoleARN");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("RetainExceptOnCreate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RollbackStackInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RollbackStackInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RollbackStackInput is not found in the empty JSON string", RollbackStackInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RollbackStackInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RollbackStackInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RollbackStackInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StackName`
      String.validateJsonElement(jsonObj.get("StackName"));
      // validate the optional field `RoleARN`
      if (jsonObj.get("RoleARN") != null && !jsonObj.get("RoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleARN"));
      }
      // validate the optional field `ClientRequestToken`
      if (jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientRequestToken"));
      }
      // validate the optional field `RetainExceptOnCreate`
      if (jsonObj.get("RetainExceptOnCreate") != null && !jsonObj.get("RetainExceptOnCreate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RetainExceptOnCreate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RollbackStackInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RollbackStackInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RollbackStackInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RollbackStackInput.class));

       return (TypeAdapter<T>) new TypeAdapter<RollbackStackInput>() {
           @Override
           public void write(JsonWriter out, RollbackStackInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RollbackStackInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RollbackStackInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RollbackStackInput
   * @throws IOException if the JSON string is invalid with respect to RollbackStackInput
   */
  public static RollbackStackInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RollbackStackInput.class);
  }

  /**
   * Convert an instance of RollbackStackInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

