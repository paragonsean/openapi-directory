/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ThirdPartyType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestTypeInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestTypeInput {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ThirdPartyType type;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_VERSION_ID = "VersionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public static final String SERIALIZED_NAME_LOG_DELIVERY_BUCKET = "LogDeliveryBucket";
  @SerializedName(SERIALIZED_NAME_LOG_DELIVERY_BUCKET)
  private String logDeliveryBucket;

  public TestTypeInput() {
  }

  public TestTypeInput arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public TestTypeInput type(ThirdPartyType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ThirdPartyType getType() {
    return type;
  }

  public void setType(ThirdPartyType type) {
    this.type = type;
  }


  public TestTypeInput typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public TestTypeInput versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Get versionId
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }


  public TestTypeInput logDeliveryBucket(String logDeliveryBucket) {
    this.logDeliveryBucket = logDeliveryBucket;
    return this;
  }

  /**
   * Get logDeliveryBucket
   * @return logDeliveryBucket
   */
  @javax.annotation.Nullable
  public String getLogDeliveryBucket() {
    return logDeliveryBucket;
  }

  public void setLogDeliveryBucket(String logDeliveryBucket) {
    this.logDeliveryBucket = logDeliveryBucket;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestTypeInput testTypeInput = (TestTypeInput) o;
    return Objects.equals(this.arn, testTypeInput.arn) &&
        Objects.equals(this.type, testTypeInput.type) &&
        Objects.equals(this.typeName, testTypeInput.typeName) &&
        Objects.equals(this.versionId, testTypeInput.versionId) &&
        Objects.equals(this.logDeliveryBucket, testTypeInput.logDeliveryBucket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, type, typeName, versionId, logDeliveryBucket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestTypeInput {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    logDeliveryBucket: ").append(toIndentedString(logDeliveryBucket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Type");
    openapiFields.add("TypeName");
    openapiFields.add("VersionId");
    openapiFields.add("LogDeliveryBucket");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestTypeInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestTypeInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestTypeInput is not found in the empty JSON string", TestTypeInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestTypeInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestTypeInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ThirdPartyType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `TypeName`
      if (jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeName"));
      }
      // validate the optional field `VersionId`
      if (jsonObj.get("VersionId") != null && !jsonObj.get("VersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VersionId"));
      }
      // validate the optional field `LogDeliveryBucket`
      if (jsonObj.get("LogDeliveryBucket") != null && !jsonObj.get("LogDeliveryBucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LogDeliveryBucket"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestTypeInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestTypeInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestTypeInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestTypeInput.class));

       return (TypeAdapter<T>) new TypeAdapter<TestTypeInput>() {
           @Override
           public void write(JsonWriter out, TestTypeInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestTypeInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestTypeInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestTypeInput
   * @throws IOException if the JSON string is invalid with respect to TestTypeInput
   */
  public static TestTypeInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestTypeInput.class);
  }

  /**
   * Convert an instance of TestTypeInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

