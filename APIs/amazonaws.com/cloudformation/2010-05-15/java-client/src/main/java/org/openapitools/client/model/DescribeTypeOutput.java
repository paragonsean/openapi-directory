/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeprecatedStatus;
import org.openapitools.client.model.DescribeTypeOutputLoggingConfig;
import org.openapitools.client.model.ProvisioningType;
import org.openapitools.client.model.RegistryType;
import org.openapitools.client.model.TypeTestsStatus;
import org.openapitools.client.model.Visibility;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeTypeOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeTypeOutput {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RegistryType type;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_DEFAULT_VERSION_ID = "DefaultVersionId";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VERSION_ID)
  private String defaultVersionId;

  public static final String SERIALIZED_NAME_IS_DEFAULT_VERSION = "IsDefaultVersion";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT_VERSION)
  private Boolean isDefaultVersion;

  public static final String SERIALIZED_NAME_TYPE_TESTS_STATUS = "TypeTestsStatus";
  @SerializedName(SERIALIZED_NAME_TYPE_TESTS_STATUS)
  private TypeTestsStatus typeTestsStatus;

  public static final String SERIALIZED_NAME_TYPE_TESTS_STATUS_DESCRIPTION = "TypeTestsStatusDescription";
  @SerializedName(SERIALIZED_NAME_TYPE_TESTS_STATUS_DESCRIPTION)
  private String typeTestsStatusDescription;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMA = "Schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private String schema;

  public static final String SERIALIZED_NAME_PROVISIONING_TYPE = "ProvisioningType";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_TYPE)
  private ProvisioningType provisioningType;

  public static final String SERIALIZED_NAME_DEPRECATED_STATUS = "DeprecatedStatus";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_STATUS)
  private DeprecatedStatus deprecatedStatus;

  public static final String SERIALIZED_NAME_LOGGING_CONFIG = "LoggingConfig";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIG)
  private DescribeTypeOutputLoggingConfig loggingConfig;

  public static final String SERIALIZED_NAME_REQUIRED_ACTIVATED_TYPES = "RequiredActivatedTypes";
  @SerializedName(SERIALIZED_NAME_REQUIRED_ACTIVATED_TYPES)
  private List requiredActivatedTypes;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_ARN = "ExecutionRoleArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_ARN)
  private String executionRoleArn;

  public static final String SERIALIZED_NAME_VISIBILITY = "Visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private Visibility visibility;

  public static final String SERIALIZED_NAME_SOURCE_URL = "SourceUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_DOCUMENTATION_URL = "DocumentationUrl";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_URL)
  private String documentationUrl;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_TIME_CREATED = "TimeCreated";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private OffsetDateTime timeCreated;

  public static final String SERIALIZED_NAME_CONFIGURATION_SCHEMA = "ConfigurationSchema";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_SCHEMA)
  private String configurationSchema;

  public static final String SERIALIZED_NAME_PUBLISHER_ID = "PublisherId";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_ID)
  private String publisherId;

  public static final String SERIALIZED_NAME_ORIGINAL_TYPE_NAME = "OriginalTypeName";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TYPE_NAME)
  private String originalTypeName;

  public static final String SERIALIZED_NAME_ORIGINAL_TYPE_ARN = "OriginalTypeArn";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TYPE_ARN)
  private String originalTypeArn;

  public static final String SERIALIZED_NAME_PUBLIC_VERSION_NUMBER = "PublicVersionNumber";
  @SerializedName(SERIALIZED_NAME_PUBLIC_VERSION_NUMBER)
  private String publicVersionNumber;

  public static final String SERIALIZED_NAME_LATEST_PUBLIC_VERSION = "LatestPublicVersion";
  @SerializedName(SERIALIZED_NAME_LATEST_PUBLIC_VERSION)
  private String latestPublicVersion;

  public static final String SERIALIZED_NAME_IS_ACTIVATED = "IsActivated";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVATED)
  private Boolean isActivated;

  public static final String SERIALIZED_NAME_AUTO_UPDATE = "AutoUpdate";
  @SerializedName(SERIALIZED_NAME_AUTO_UPDATE)
  private Boolean autoUpdate;

  public DescribeTypeOutput() {
  }

  public DescribeTypeOutput arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeTypeOutput type(RegistryType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public RegistryType getType() {
    return type;
  }

  public void setType(RegistryType type) {
    this.type = type;
  }


  public DescribeTypeOutput typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public DescribeTypeOutput defaultVersionId(String defaultVersionId) {
    this.defaultVersionId = defaultVersionId;
    return this;
  }

  /**
   * Get defaultVersionId
   * @return defaultVersionId
   */
  @javax.annotation.Nullable
  public String getDefaultVersionId() {
    return defaultVersionId;
  }

  public void setDefaultVersionId(String defaultVersionId) {
    this.defaultVersionId = defaultVersionId;
  }


  public DescribeTypeOutput isDefaultVersion(Boolean isDefaultVersion) {
    this.isDefaultVersion = isDefaultVersion;
    return this;
  }

  /**
   * Get isDefaultVersion
   * @return isDefaultVersion
   */
  @javax.annotation.Nullable
  public Boolean getIsDefaultVersion() {
    return isDefaultVersion;
  }

  public void setIsDefaultVersion(Boolean isDefaultVersion) {
    this.isDefaultVersion = isDefaultVersion;
  }


  public DescribeTypeOutput typeTestsStatus(TypeTestsStatus typeTestsStatus) {
    this.typeTestsStatus = typeTestsStatus;
    return this;
  }

  /**
   * Get typeTestsStatus
   * @return typeTestsStatus
   */
  @javax.annotation.Nullable
  public TypeTestsStatus getTypeTestsStatus() {
    return typeTestsStatus;
  }

  public void setTypeTestsStatus(TypeTestsStatus typeTestsStatus) {
    this.typeTestsStatus = typeTestsStatus;
  }


  public DescribeTypeOutput typeTestsStatusDescription(String typeTestsStatusDescription) {
    this.typeTestsStatusDescription = typeTestsStatusDescription;
    return this;
  }

  /**
   * Get typeTestsStatusDescription
   * @return typeTestsStatusDescription
   */
  @javax.annotation.Nullable
  public String getTypeTestsStatusDescription() {
    return typeTestsStatusDescription;
  }

  public void setTypeTestsStatusDescription(String typeTestsStatusDescription) {
    this.typeTestsStatusDescription = typeTestsStatusDescription;
  }


  public DescribeTypeOutput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeTypeOutput schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }


  public DescribeTypeOutput provisioningType(ProvisioningType provisioningType) {
    this.provisioningType = provisioningType;
    return this;
  }

  /**
   * Get provisioningType
   * @return provisioningType
   */
  @javax.annotation.Nullable
  public ProvisioningType getProvisioningType() {
    return provisioningType;
  }

  public void setProvisioningType(ProvisioningType provisioningType) {
    this.provisioningType = provisioningType;
  }


  public DescribeTypeOutput deprecatedStatus(DeprecatedStatus deprecatedStatus) {
    this.deprecatedStatus = deprecatedStatus;
    return this;
  }

  /**
   * Get deprecatedStatus
   * @return deprecatedStatus
   */
  @javax.annotation.Nullable
  public DeprecatedStatus getDeprecatedStatus() {
    return deprecatedStatus;
  }

  public void setDeprecatedStatus(DeprecatedStatus deprecatedStatus) {
    this.deprecatedStatus = deprecatedStatus;
  }


  public DescribeTypeOutput loggingConfig(DescribeTypeOutputLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
    return this;
  }

  /**
   * Get loggingConfig
   * @return loggingConfig
   */
  @javax.annotation.Nullable
  public DescribeTypeOutputLoggingConfig getLoggingConfig() {
    return loggingConfig;
  }

  public void setLoggingConfig(DescribeTypeOutputLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
  }


  public DescribeTypeOutput requiredActivatedTypes(List requiredActivatedTypes) {
    this.requiredActivatedTypes = requiredActivatedTypes;
    return this;
  }

  /**
   * Get requiredActivatedTypes
   * @return requiredActivatedTypes
   */
  @javax.annotation.Nullable
  public List getRequiredActivatedTypes() {
    return requiredActivatedTypes;
  }

  public void setRequiredActivatedTypes(List requiredActivatedTypes) {
    this.requiredActivatedTypes = requiredActivatedTypes;
  }


  public DescribeTypeOutput executionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
    return this;
  }

  /**
   * Get executionRoleArn
   * @return executionRoleArn
   */
  @javax.annotation.Nullable
  public String getExecutionRoleArn() {
    return executionRoleArn;
  }

  public void setExecutionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
  }


  public DescribeTypeOutput visibility(Visibility visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public Visibility getVisibility() {
    return visibility;
  }

  public void setVisibility(Visibility visibility) {
    this.visibility = visibility;
  }


  public DescribeTypeOutput sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * Get sourceUrl
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public DescribeTypeOutput documentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
    return this;
  }

  /**
   * Get documentationUrl
   * @return documentationUrl
   */
  @javax.annotation.Nullable
  public String getDocumentationUrl() {
    return documentationUrl;
  }

  public void setDocumentationUrl(String documentationUrl) {
    this.documentationUrl = documentationUrl;
  }


  public DescribeTypeOutput lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public DescribeTypeOutput timeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
    return this;
  }

  /**
   * Get timeCreated
   * @return timeCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeCreated() {
    return timeCreated;
  }

  public void setTimeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
  }


  public DescribeTypeOutput configurationSchema(String configurationSchema) {
    this.configurationSchema = configurationSchema;
    return this;
  }

  /**
   * Get configurationSchema
   * @return configurationSchema
   */
  @javax.annotation.Nullable
  public String getConfigurationSchema() {
    return configurationSchema;
  }

  public void setConfigurationSchema(String configurationSchema) {
    this.configurationSchema = configurationSchema;
  }


  public DescribeTypeOutput publisherId(String publisherId) {
    this.publisherId = publisherId;
    return this;
  }

  /**
   * Get publisherId
   * @return publisherId
   */
  @javax.annotation.Nullable
  public String getPublisherId() {
    return publisherId;
  }

  public void setPublisherId(String publisherId) {
    this.publisherId = publisherId;
  }


  public DescribeTypeOutput originalTypeName(String originalTypeName) {
    this.originalTypeName = originalTypeName;
    return this;
  }

  /**
   * Get originalTypeName
   * @return originalTypeName
   */
  @javax.annotation.Nullable
  public String getOriginalTypeName() {
    return originalTypeName;
  }

  public void setOriginalTypeName(String originalTypeName) {
    this.originalTypeName = originalTypeName;
  }


  public DescribeTypeOutput originalTypeArn(String originalTypeArn) {
    this.originalTypeArn = originalTypeArn;
    return this;
  }

  /**
   * Get originalTypeArn
   * @return originalTypeArn
   */
  @javax.annotation.Nullable
  public String getOriginalTypeArn() {
    return originalTypeArn;
  }

  public void setOriginalTypeArn(String originalTypeArn) {
    this.originalTypeArn = originalTypeArn;
  }


  public DescribeTypeOutput publicVersionNumber(String publicVersionNumber) {
    this.publicVersionNumber = publicVersionNumber;
    return this;
  }

  /**
   * Get publicVersionNumber
   * @return publicVersionNumber
   */
  @javax.annotation.Nullable
  public String getPublicVersionNumber() {
    return publicVersionNumber;
  }

  public void setPublicVersionNumber(String publicVersionNumber) {
    this.publicVersionNumber = publicVersionNumber;
  }


  public DescribeTypeOutput latestPublicVersion(String latestPublicVersion) {
    this.latestPublicVersion = latestPublicVersion;
    return this;
  }

  /**
   * Get latestPublicVersion
   * @return latestPublicVersion
   */
  @javax.annotation.Nullable
  public String getLatestPublicVersion() {
    return latestPublicVersion;
  }

  public void setLatestPublicVersion(String latestPublicVersion) {
    this.latestPublicVersion = latestPublicVersion;
  }


  public DescribeTypeOutput isActivated(Boolean isActivated) {
    this.isActivated = isActivated;
    return this;
  }

  /**
   * Get isActivated
   * @return isActivated
   */
  @javax.annotation.Nullable
  public Boolean getIsActivated() {
    return isActivated;
  }

  public void setIsActivated(Boolean isActivated) {
    this.isActivated = isActivated;
  }


  public DescribeTypeOutput autoUpdate(Boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
    return this;
  }

  /**
   * Get autoUpdate
   * @return autoUpdate
   */
  @javax.annotation.Nullable
  public Boolean getAutoUpdate() {
    return autoUpdate;
  }

  public void setAutoUpdate(Boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeTypeOutput describeTypeOutput = (DescribeTypeOutput) o;
    return Objects.equals(this.arn, describeTypeOutput.arn) &&
        Objects.equals(this.type, describeTypeOutput.type) &&
        Objects.equals(this.typeName, describeTypeOutput.typeName) &&
        Objects.equals(this.defaultVersionId, describeTypeOutput.defaultVersionId) &&
        Objects.equals(this.isDefaultVersion, describeTypeOutput.isDefaultVersion) &&
        Objects.equals(this.typeTestsStatus, describeTypeOutput.typeTestsStatus) &&
        Objects.equals(this.typeTestsStatusDescription, describeTypeOutput.typeTestsStatusDescription) &&
        Objects.equals(this.description, describeTypeOutput.description) &&
        Objects.equals(this.schema, describeTypeOutput.schema) &&
        Objects.equals(this.provisioningType, describeTypeOutput.provisioningType) &&
        Objects.equals(this.deprecatedStatus, describeTypeOutput.deprecatedStatus) &&
        Objects.equals(this.loggingConfig, describeTypeOutput.loggingConfig) &&
        Objects.equals(this.requiredActivatedTypes, describeTypeOutput.requiredActivatedTypes) &&
        Objects.equals(this.executionRoleArn, describeTypeOutput.executionRoleArn) &&
        Objects.equals(this.visibility, describeTypeOutput.visibility) &&
        Objects.equals(this.sourceUrl, describeTypeOutput.sourceUrl) &&
        Objects.equals(this.documentationUrl, describeTypeOutput.documentationUrl) &&
        Objects.equals(this.lastUpdated, describeTypeOutput.lastUpdated) &&
        Objects.equals(this.timeCreated, describeTypeOutput.timeCreated) &&
        Objects.equals(this.configurationSchema, describeTypeOutput.configurationSchema) &&
        Objects.equals(this.publisherId, describeTypeOutput.publisherId) &&
        Objects.equals(this.originalTypeName, describeTypeOutput.originalTypeName) &&
        Objects.equals(this.originalTypeArn, describeTypeOutput.originalTypeArn) &&
        Objects.equals(this.publicVersionNumber, describeTypeOutput.publicVersionNumber) &&
        Objects.equals(this.latestPublicVersion, describeTypeOutput.latestPublicVersion) &&
        Objects.equals(this.isActivated, describeTypeOutput.isActivated) &&
        Objects.equals(this.autoUpdate, describeTypeOutput.autoUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, type, typeName, defaultVersionId, isDefaultVersion, typeTestsStatus, typeTestsStatusDescription, description, schema, provisioningType, deprecatedStatus, loggingConfig, requiredActivatedTypes, executionRoleArn, visibility, sourceUrl, documentationUrl, lastUpdated, timeCreated, configurationSchema, publisherId, originalTypeName, originalTypeArn, publicVersionNumber, latestPublicVersion, isActivated, autoUpdate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeTypeOutput {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    defaultVersionId: ").append(toIndentedString(defaultVersionId)).append("\n");
    sb.append("    isDefaultVersion: ").append(toIndentedString(isDefaultVersion)).append("\n");
    sb.append("    typeTestsStatus: ").append(toIndentedString(typeTestsStatus)).append("\n");
    sb.append("    typeTestsStatusDescription: ").append(toIndentedString(typeTestsStatusDescription)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    provisioningType: ").append(toIndentedString(provisioningType)).append("\n");
    sb.append("    deprecatedStatus: ").append(toIndentedString(deprecatedStatus)).append("\n");
    sb.append("    loggingConfig: ").append(toIndentedString(loggingConfig)).append("\n");
    sb.append("    requiredActivatedTypes: ").append(toIndentedString(requiredActivatedTypes)).append("\n");
    sb.append("    executionRoleArn: ").append(toIndentedString(executionRoleArn)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    documentationUrl: ").append(toIndentedString(documentationUrl)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    configurationSchema: ").append(toIndentedString(configurationSchema)).append("\n");
    sb.append("    publisherId: ").append(toIndentedString(publisherId)).append("\n");
    sb.append("    originalTypeName: ").append(toIndentedString(originalTypeName)).append("\n");
    sb.append("    originalTypeArn: ").append(toIndentedString(originalTypeArn)).append("\n");
    sb.append("    publicVersionNumber: ").append(toIndentedString(publicVersionNumber)).append("\n");
    sb.append("    latestPublicVersion: ").append(toIndentedString(latestPublicVersion)).append("\n");
    sb.append("    isActivated: ").append(toIndentedString(isActivated)).append("\n");
    sb.append("    autoUpdate: ").append(toIndentedString(autoUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Type");
    openapiFields.add("TypeName");
    openapiFields.add("DefaultVersionId");
    openapiFields.add("IsDefaultVersion");
    openapiFields.add("TypeTestsStatus");
    openapiFields.add("TypeTestsStatusDescription");
    openapiFields.add("Description");
    openapiFields.add("Schema");
    openapiFields.add("ProvisioningType");
    openapiFields.add("DeprecatedStatus");
    openapiFields.add("LoggingConfig");
    openapiFields.add("RequiredActivatedTypes");
    openapiFields.add("ExecutionRoleArn");
    openapiFields.add("Visibility");
    openapiFields.add("SourceUrl");
    openapiFields.add("DocumentationUrl");
    openapiFields.add("LastUpdated");
    openapiFields.add("TimeCreated");
    openapiFields.add("ConfigurationSchema");
    openapiFields.add("PublisherId");
    openapiFields.add("OriginalTypeName");
    openapiFields.add("OriginalTypeArn");
    openapiFields.add("PublicVersionNumber");
    openapiFields.add("LatestPublicVersion");
    openapiFields.add("IsActivated");
    openapiFields.add("AutoUpdate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeTypeOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeTypeOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeTypeOutput is not found in the empty JSON string", DescribeTypeOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeTypeOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeTypeOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        RegistryType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `TypeName`
      if (jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeName"));
      }
      // validate the optional field `DefaultVersionId`
      if (jsonObj.get("DefaultVersionId") != null && !jsonObj.get("DefaultVersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultVersionId"));
      }
      // validate the optional field `IsDefaultVersion`
      if (jsonObj.get("IsDefaultVersion") != null && !jsonObj.get("IsDefaultVersion").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsDefaultVersion"));
      }
      // validate the optional field `TypeTestsStatus`
      if (jsonObj.get("TypeTestsStatus") != null && !jsonObj.get("TypeTestsStatus").isJsonNull()) {
        TypeTestsStatus.validateJsonElement(jsonObj.get("TypeTestsStatus"));
      }
      // validate the optional field `TypeTestsStatusDescription`
      if (jsonObj.get("TypeTestsStatusDescription") != null && !jsonObj.get("TypeTestsStatusDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeTestsStatusDescription"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Schema`
      if (jsonObj.get("Schema") != null && !jsonObj.get("Schema").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Schema"));
      }
      // validate the optional field `ProvisioningType`
      if (jsonObj.get("ProvisioningType") != null && !jsonObj.get("ProvisioningType").isJsonNull()) {
        ProvisioningType.validateJsonElement(jsonObj.get("ProvisioningType"));
      }
      // validate the optional field `DeprecatedStatus`
      if (jsonObj.get("DeprecatedStatus") != null && !jsonObj.get("DeprecatedStatus").isJsonNull()) {
        DeprecatedStatus.validateJsonElement(jsonObj.get("DeprecatedStatus"));
      }
      // validate the optional field `LoggingConfig`
      if (jsonObj.get("LoggingConfig") != null && !jsonObj.get("LoggingConfig").isJsonNull()) {
        DescribeTypeOutputLoggingConfig.validateJsonElement(jsonObj.get("LoggingConfig"));
      }
      // validate the optional field `RequiredActivatedTypes`
      if (jsonObj.get("RequiredActivatedTypes") != null && !jsonObj.get("RequiredActivatedTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RequiredActivatedTypes"));
      }
      // validate the optional field `ExecutionRoleArn`
      if (jsonObj.get("ExecutionRoleArn") != null && !jsonObj.get("ExecutionRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutionRoleArn"));
      }
      // validate the optional field `Visibility`
      if (jsonObj.get("Visibility") != null && !jsonObj.get("Visibility").isJsonNull()) {
        Visibility.validateJsonElement(jsonObj.get("Visibility"));
      }
      // validate the optional field `SourceUrl`
      if (jsonObj.get("SourceUrl") != null && !jsonObj.get("SourceUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceUrl"));
      }
      // validate the optional field `DocumentationUrl`
      if (jsonObj.get("DocumentationUrl") != null && !jsonObj.get("DocumentationUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DocumentationUrl"));
      }
      // validate the optional field `LastUpdated`
      if (jsonObj.get("LastUpdated") != null && !jsonObj.get("LastUpdated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdated"));
      }
      // validate the optional field `TimeCreated`
      if (jsonObj.get("TimeCreated") != null && !jsonObj.get("TimeCreated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("TimeCreated"));
      }
      // validate the optional field `ConfigurationSchema`
      if (jsonObj.get("ConfigurationSchema") != null && !jsonObj.get("ConfigurationSchema").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationSchema"));
      }
      // validate the optional field `PublisherId`
      if (jsonObj.get("PublisherId") != null && !jsonObj.get("PublisherId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublisherId"));
      }
      // validate the optional field `OriginalTypeName`
      if (jsonObj.get("OriginalTypeName") != null && !jsonObj.get("OriginalTypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OriginalTypeName"));
      }
      // validate the optional field `OriginalTypeArn`
      if (jsonObj.get("OriginalTypeArn") != null && !jsonObj.get("OriginalTypeArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OriginalTypeArn"));
      }
      // validate the optional field `PublicVersionNumber`
      if (jsonObj.get("PublicVersionNumber") != null && !jsonObj.get("PublicVersionNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublicVersionNumber"));
      }
      // validate the optional field `LatestPublicVersion`
      if (jsonObj.get("LatestPublicVersion") != null && !jsonObj.get("LatestPublicVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LatestPublicVersion"));
      }
      // validate the optional field `IsActivated`
      if (jsonObj.get("IsActivated") != null && !jsonObj.get("IsActivated").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsActivated"));
      }
      // validate the optional field `AutoUpdate`
      if (jsonObj.get("AutoUpdate") != null && !jsonObj.get("AutoUpdate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoUpdate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeTypeOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeTypeOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeTypeOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeTypeOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeTypeOutput>() {
           @Override
           public void write(JsonWriter out, DescribeTypeOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeTypeOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeTypeOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeTypeOutput
   * @throws IOException if the JSON string is invalid with respect to DescribeTypeOutput
   */
  public static DescribeTypeOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeTypeOutput.class);
  }

  /**
   * Convert an instance of DescribeTypeOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

