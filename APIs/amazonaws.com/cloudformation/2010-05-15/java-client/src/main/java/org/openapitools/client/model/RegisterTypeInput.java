/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RegisterTypeInputLoggingConfig;
import org.openapitools.client.model.RegistryType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterTypeInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterTypeInput {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private RegistryType type;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_SCHEMA_HANDLER_PACKAGE = "SchemaHandlerPackage";
  @SerializedName(SERIALIZED_NAME_SCHEMA_HANDLER_PACKAGE)
  private String schemaHandlerPackage;

  public static final String SERIALIZED_NAME_LOGGING_CONFIG = "LoggingConfig";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIG)
  private RegisterTypeInputLoggingConfig loggingConfig;

  public static final String SERIALIZED_NAME_EXECUTION_ROLE_ARN = "ExecutionRoleArn";
  @SerializedName(SERIALIZED_NAME_EXECUTION_ROLE_ARN)
  private String executionRoleArn;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public RegisterTypeInput() {
  }

  public RegisterTypeInput type(RegistryType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public RegistryType getType() {
    return type;
  }

  public void setType(RegistryType type) {
    this.type = type;
  }


  public RegisterTypeInput typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nonnull
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public RegisterTypeInput schemaHandlerPackage(String schemaHandlerPackage) {
    this.schemaHandlerPackage = schemaHandlerPackage;
    return this;
  }

  /**
   * Get schemaHandlerPackage
   * @return schemaHandlerPackage
   */
  @javax.annotation.Nonnull
  public String getSchemaHandlerPackage() {
    return schemaHandlerPackage;
  }

  public void setSchemaHandlerPackage(String schemaHandlerPackage) {
    this.schemaHandlerPackage = schemaHandlerPackage;
  }


  public RegisterTypeInput loggingConfig(RegisterTypeInputLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
    return this;
  }

  /**
   * Get loggingConfig
   * @return loggingConfig
   */
  @javax.annotation.Nullable
  public RegisterTypeInputLoggingConfig getLoggingConfig() {
    return loggingConfig;
  }

  public void setLoggingConfig(RegisterTypeInputLoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
  }


  public RegisterTypeInput executionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
    return this;
  }

  /**
   * Get executionRoleArn
   * @return executionRoleArn
   */
  @javax.annotation.Nullable
  public String getExecutionRoleArn() {
    return executionRoleArn;
  }

  public void setExecutionRoleArn(String executionRoleArn) {
    this.executionRoleArn = executionRoleArn;
  }


  public RegisterTypeInput clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterTypeInput registerTypeInput = (RegisterTypeInput) o;
    return Objects.equals(this.type, registerTypeInput.type) &&
        Objects.equals(this.typeName, registerTypeInput.typeName) &&
        Objects.equals(this.schemaHandlerPackage, registerTypeInput.schemaHandlerPackage) &&
        Objects.equals(this.loggingConfig, registerTypeInput.loggingConfig) &&
        Objects.equals(this.executionRoleArn, registerTypeInput.executionRoleArn) &&
        Objects.equals(this.clientRequestToken, registerTypeInput.clientRequestToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, typeName, schemaHandlerPackage, loggingConfig, executionRoleArn, clientRequestToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterTypeInput {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    schemaHandlerPackage: ").append(toIndentedString(schemaHandlerPackage)).append("\n");
    sb.append("    loggingConfig: ").append(toIndentedString(loggingConfig)).append("\n");
    sb.append("    executionRoleArn: ").append(toIndentedString(executionRoleArn)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("TypeName");
    openapiFields.add("SchemaHandlerPackage");
    openapiFields.add("LoggingConfig");
    openapiFields.add("ExecutionRoleArn");
    openapiFields.add("ClientRequestToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TypeName");
    openapiRequiredFields.add("SchemaHandlerPackage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterTypeInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterTypeInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterTypeInput is not found in the empty JSON string", RegisterTypeInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterTypeInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterTypeInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegisterTypeInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        RegistryType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the required field `TypeName`
      String.validateJsonElement(jsonObj.get("TypeName"));
      // validate the required field `SchemaHandlerPackage`
      String.validateJsonElement(jsonObj.get("SchemaHandlerPackage"));
      // validate the optional field `LoggingConfig`
      if (jsonObj.get("LoggingConfig") != null && !jsonObj.get("LoggingConfig").isJsonNull()) {
        RegisterTypeInputLoggingConfig.validateJsonElement(jsonObj.get("LoggingConfig"));
      }
      // validate the optional field `ExecutionRoleArn`
      if (jsonObj.get("ExecutionRoleArn") != null && !jsonObj.get("ExecutionRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExecutionRoleArn"));
      }
      // validate the optional field `ClientRequestToken`
      if (jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientRequestToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterTypeInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterTypeInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterTypeInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterTypeInput.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterTypeInput>() {
           @Override
           public void write(JsonWriter out, RegisterTypeInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterTypeInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterTypeInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterTypeInput
   * @throws IOException if the JSON string is invalid with respect to RegisterTypeInput
   */
  public static RegisterTypeInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterTypeInput.class);
  }

  /**
   * Convert an instance of RegisterTypeInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

