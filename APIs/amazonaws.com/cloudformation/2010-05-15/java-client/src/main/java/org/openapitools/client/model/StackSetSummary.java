/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateStackSetInputManagedExecution;
import org.openapitools.client.model.PermissionModels;
import org.openapitools.client.model.StackDriftStatus;
import org.openapitools.client.model.StackSetStatus;
import org.openapitools.client.model.StackSetSummaryAutoDeployment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The structures that contain summary information about the specified stack set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StackSetSummary {
  public static final String SERIALIZED_NAME_STACK_SET_NAME = "StackSetName";
  @SerializedName(SERIALIZED_NAME_STACK_SET_NAME)
  private String stackSetName;

  public static final String SERIALIZED_NAME_STACK_SET_ID = "StackSetId";
  @SerializedName(SERIALIZED_NAME_STACK_SET_ID)
  private String stackSetId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StackSetStatus status;

  public static final String SERIALIZED_NAME_AUTO_DEPLOYMENT = "AutoDeployment";
  @SerializedName(SERIALIZED_NAME_AUTO_DEPLOYMENT)
  private StackSetSummaryAutoDeployment autoDeployment;

  public static final String SERIALIZED_NAME_PERMISSION_MODEL = "PermissionModel";
  @SerializedName(SERIALIZED_NAME_PERMISSION_MODEL)
  private PermissionModels permissionModel;

  public static final String SERIALIZED_NAME_DRIFT_STATUS = "DriftStatus";
  @SerializedName(SERIALIZED_NAME_DRIFT_STATUS)
  private StackDriftStatus driftStatus;

  public static final String SERIALIZED_NAME_LAST_DRIFT_CHECK_TIMESTAMP = "LastDriftCheckTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_DRIFT_CHECK_TIMESTAMP)
  private OffsetDateTime lastDriftCheckTimestamp;

  public static final String SERIALIZED_NAME_MANAGED_EXECUTION = "ManagedExecution";
  @SerializedName(SERIALIZED_NAME_MANAGED_EXECUTION)
  private CreateStackSetInputManagedExecution managedExecution;

  public StackSetSummary() {
  }

  public StackSetSummary stackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
    return this;
  }

  /**
   * Get stackSetName
   * @return stackSetName
   */
  @javax.annotation.Nullable
  public String getStackSetName() {
    return stackSetName;
  }

  public void setStackSetName(String stackSetName) {
    this.stackSetName = stackSetName;
  }


  public StackSetSummary stackSetId(String stackSetId) {
    this.stackSetId = stackSetId;
    return this;
  }

  /**
   * Get stackSetId
   * @return stackSetId
   */
  @javax.annotation.Nullable
  public String getStackSetId() {
    return stackSetId;
  }

  public void setStackSetId(String stackSetId) {
    this.stackSetId = stackSetId;
  }


  public StackSetSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public StackSetSummary status(StackSetStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public StackSetStatus getStatus() {
    return status;
  }

  public void setStatus(StackSetStatus status) {
    this.status = status;
  }


  public StackSetSummary autoDeployment(StackSetSummaryAutoDeployment autoDeployment) {
    this.autoDeployment = autoDeployment;
    return this;
  }

  /**
   * Get autoDeployment
   * @return autoDeployment
   */
  @javax.annotation.Nullable
  public StackSetSummaryAutoDeployment getAutoDeployment() {
    return autoDeployment;
  }

  public void setAutoDeployment(StackSetSummaryAutoDeployment autoDeployment) {
    this.autoDeployment = autoDeployment;
  }


  public StackSetSummary permissionModel(PermissionModels permissionModel) {
    this.permissionModel = permissionModel;
    return this;
  }

  /**
   * Get permissionModel
   * @return permissionModel
   */
  @javax.annotation.Nullable
  public PermissionModels getPermissionModel() {
    return permissionModel;
  }

  public void setPermissionModel(PermissionModels permissionModel) {
    this.permissionModel = permissionModel;
  }


  public StackSetSummary driftStatus(StackDriftStatus driftStatus) {
    this.driftStatus = driftStatus;
    return this;
  }

  /**
   * Get driftStatus
   * @return driftStatus
   */
  @javax.annotation.Nullable
  public StackDriftStatus getDriftStatus() {
    return driftStatus;
  }

  public void setDriftStatus(StackDriftStatus driftStatus) {
    this.driftStatus = driftStatus;
  }


  public StackSetSummary lastDriftCheckTimestamp(OffsetDateTime lastDriftCheckTimestamp) {
    this.lastDriftCheckTimestamp = lastDriftCheckTimestamp;
    return this;
  }

  /**
   * Get lastDriftCheckTimestamp
   * @return lastDriftCheckTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDriftCheckTimestamp() {
    return lastDriftCheckTimestamp;
  }

  public void setLastDriftCheckTimestamp(OffsetDateTime lastDriftCheckTimestamp) {
    this.lastDriftCheckTimestamp = lastDriftCheckTimestamp;
  }


  public StackSetSummary managedExecution(CreateStackSetInputManagedExecution managedExecution) {
    this.managedExecution = managedExecution;
    return this;
  }

  /**
   * Get managedExecution
   * @return managedExecution
   */
  @javax.annotation.Nullable
  public CreateStackSetInputManagedExecution getManagedExecution() {
    return managedExecution;
  }

  public void setManagedExecution(CreateStackSetInputManagedExecution managedExecution) {
    this.managedExecution = managedExecution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StackSetSummary stackSetSummary = (StackSetSummary) o;
    return Objects.equals(this.stackSetName, stackSetSummary.stackSetName) &&
        Objects.equals(this.stackSetId, stackSetSummary.stackSetId) &&
        Objects.equals(this.description, stackSetSummary.description) &&
        Objects.equals(this.status, stackSetSummary.status) &&
        Objects.equals(this.autoDeployment, stackSetSummary.autoDeployment) &&
        Objects.equals(this.permissionModel, stackSetSummary.permissionModel) &&
        Objects.equals(this.driftStatus, stackSetSummary.driftStatus) &&
        Objects.equals(this.lastDriftCheckTimestamp, stackSetSummary.lastDriftCheckTimestamp) &&
        Objects.equals(this.managedExecution, stackSetSummary.managedExecution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackSetName, stackSetId, description, status, autoDeployment, permissionModel, driftStatus, lastDriftCheckTimestamp, managedExecution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StackSetSummary {\n");
    sb.append("    stackSetName: ").append(toIndentedString(stackSetName)).append("\n");
    sb.append("    stackSetId: ").append(toIndentedString(stackSetId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    autoDeployment: ").append(toIndentedString(autoDeployment)).append("\n");
    sb.append("    permissionModel: ").append(toIndentedString(permissionModel)).append("\n");
    sb.append("    driftStatus: ").append(toIndentedString(driftStatus)).append("\n");
    sb.append("    lastDriftCheckTimestamp: ").append(toIndentedString(lastDriftCheckTimestamp)).append("\n");
    sb.append("    managedExecution: ").append(toIndentedString(managedExecution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackSetName");
    openapiFields.add("StackSetId");
    openapiFields.add("Description");
    openapiFields.add("Status");
    openapiFields.add("AutoDeployment");
    openapiFields.add("PermissionModel");
    openapiFields.add("DriftStatus");
    openapiFields.add("LastDriftCheckTimestamp");
    openapiFields.add("ManagedExecution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StackSetSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StackSetSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StackSetSummary is not found in the empty JSON string", StackSetSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StackSetSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StackSetSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StackSetName`
      if (jsonObj.get("StackSetName") != null && !jsonObj.get("StackSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackSetName"));
      }
      // validate the optional field `StackSetId`
      if (jsonObj.get("StackSetId") != null && !jsonObj.get("StackSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackSetId"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        StackSetStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `AutoDeployment`
      if (jsonObj.get("AutoDeployment") != null && !jsonObj.get("AutoDeployment").isJsonNull()) {
        StackSetSummaryAutoDeployment.validateJsonElement(jsonObj.get("AutoDeployment"));
      }
      // validate the optional field `PermissionModel`
      if (jsonObj.get("PermissionModel") != null && !jsonObj.get("PermissionModel").isJsonNull()) {
        PermissionModels.validateJsonElement(jsonObj.get("PermissionModel"));
      }
      // validate the optional field `DriftStatus`
      if (jsonObj.get("DriftStatus") != null && !jsonObj.get("DriftStatus").isJsonNull()) {
        StackDriftStatus.validateJsonElement(jsonObj.get("DriftStatus"));
      }
      // validate the optional field `LastDriftCheckTimestamp`
      if (jsonObj.get("LastDriftCheckTimestamp") != null && !jsonObj.get("LastDriftCheckTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastDriftCheckTimestamp"));
      }
      // validate the optional field `ManagedExecution`
      if (jsonObj.get("ManagedExecution") != null && !jsonObj.get("ManagedExecution").isJsonNull()) {
        CreateStackSetInputManagedExecution.validateJsonElement(jsonObj.get("ManagedExecution"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StackSetSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StackSetSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StackSetSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StackSetSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<StackSetSummary>() {
           @Override
           public void write(JsonWriter out, StackSetSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StackSetSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StackSetSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StackSetSummary
   * @throws IOException if the JSON string is invalid with respect to StackSetSummary
   */
  public static StackSetSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StackSetSummary.class);
  }

  /**
   * Convert an instance of StackSetSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

