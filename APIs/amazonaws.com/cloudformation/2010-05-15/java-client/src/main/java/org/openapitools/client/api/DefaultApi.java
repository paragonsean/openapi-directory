/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActivateTypeInput;
import org.openapitools.client.model.ActivateTypeOutput;
import org.openapitools.client.model.BatchDescribeTypeConfigurationsInput;
import org.openapitools.client.model.BatchDescribeTypeConfigurationsOutput;
import org.openapitools.client.model.CancelUpdateStackInput;
import org.openapitools.client.model.Capability;
import org.openapitools.client.model.ContinueUpdateRollbackInput;
import org.openapitools.client.model.CreateChangeSetInput;
import org.openapitools.client.model.CreateChangeSetOutput;
import org.openapitools.client.model.CreateStackInput;
import org.openapitools.client.model.CreateStackInstancesInput;
import org.openapitools.client.model.CreateStackInstancesOutput;
import org.openapitools.client.model.CreateStackOutput;
import org.openapitools.client.model.CreateStackSetInput;
import org.openapitools.client.model.CreateStackSetOutput;
import org.openapitools.client.model.DeactivateTypeInput;
import org.openapitools.client.model.DeleteChangeSetInput;
import org.openapitools.client.model.DeleteStackInput;
import org.openapitools.client.model.DeleteStackInstancesInput;
import org.openapitools.client.model.DeleteStackInstancesOutput;
import org.openapitools.client.model.DeleteStackSetInput;
import org.openapitools.client.model.DeregisterTypeInput;
import org.openapitools.client.model.DescribeAccountLimitsInput;
import org.openapitools.client.model.DescribeAccountLimitsOutput;
import org.openapitools.client.model.DescribeChangeSetHooksInput;
import org.openapitools.client.model.DescribeChangeSetHooksOutput;
import org.openapitools.client.model.DescribeChangeSetInput;
import org.openapitools.client.model.DescribeChangeSetOutput;
import org.openapitools.client.model.DescribeOrganizationsAccessInput;
import org.openapitools.client.model.DescribeOrganizationsAccessOutput;
import org.openapitools.client.model.DescribePublisherInput;
import org.openapitools.client.model.DescribePublisherOutput;
import org.openapitools.client.model.DescribeStackDriftDetectionStatusInput;
import org.openapitools.client.model.DescribeStackDriftDetectionStatusOutput;
import org.openapitools.client.model.DescribeStackEventsInput;
import org.openapitools.client.model.DescribeStackEventsOutput;
import org.openapitools.client.model.DescribeStackInstanceInput;
import org.openapitools.client.model.DescribeStackInstanceOutput;
import org.openapitools.client.model.DescribeStackResourceDriftsInput;
import org.openapitools.client.model.DescribeStackResourceDriftsOutput;
import org.openapitools.client.model.DescribeStackResourceInput;
import org.openapitools.client.model.DescribeStackResourceOutput;
import org.openapitools.client.model.DescribeStackResourcesInput;
import org.openapitools.client.model.DescribeStackResourcesOutput;
import org.openapitools.client.model.DescribeStackSetInput;
import org.openapitools.client.model.DescribeStackSetOperationInput;
import org.openapitools.client.model.DescribeStackSetOperationOutput;
import org.openapitools.client.model.DescribeStackSetOutput;
import org.openapitools.client.model.DescribeStacksInput;
import org.openapitools.client.model.DescribeStacksOutput;
import org.openapitools.client.model.DescribeTypeInput;
import org.openapitools.client.model.DescribeTypeOutput;
import org.openapitools.client.model.DescribeTypeRegistrationInput;
import org.openapitools.client.model.DescribeTypeRegistrationOutput;
import org.openapitools.client.model.DetectStackDriftInput;
import org.openapitools.client.model.DetectStackDriftOutput;
import org.openapitools.client.model.DetectStackResourceDriftInput;
import org.openapitools.client.model.DetectStackResourceDriftOutput;
import org.openapitools.client.model.DetectStackSetDriftInput;
import org.openapitools.client.model.DetectStackSetDriftOutput;
import org.openapitools.client.model.EstimateTemplateCostInput;
import org.openapitools.client.model.EstimateTemplateCostOutput;
import org.openapitools.client.model.ExecuteChangeSetInput;
import org.openapitools.client.model.GETActivateTypeLoggingConfigParameter;
import org.openapitools.client.model.GETCreateChangeSetRollbackConfigurationParameter;
import org.openapitools.client.model.GETCreateStackInstancesDeploymentTargetsParameter;
import org.openapitools.client.model.GETCreateStackInstancesOperationPreferencesParameter;
import org.openapitools.client.model.GETCreateStackSetAutoDeploymentParameter;
import org.openapitools.client.model.GETCreateStackSetManagedExecutionParameter;
import org.openapitools.client.model.GETGetTemplateSummaryTemplateSummaryConfigParameter;
import org.openapitools.client.model.GETListTypesFiltersParameter;
import org.openapitools.client.model.GetStackPolicyInput;
import org.openapitools.client.model.GetStackPolicyOutput;
import org.openapitools.client.model.GetTemplateInput;
import org.openapitools.client.model.GetTemplateOutput;
import org.openapitools.client.model.GetTemplateSummaryInput;
import org.openapitools.client.model.GetTemplateSummaryOutput;
import org.openapitools.client.model.ImportStacksToStackSetInput;
import org.openapitools.client.model.ImportStacksToStackSetOutput;
import org.openapitools.client.model.ListChangeSetsInput;
import org.openapitools.client.model.ListChangeSetsOutput;
import org.openapitools.client.model.ListExportsInput;
import org.openapitools.client.model.ListExportsOutput;
import org.openapitools.client.model.ListImportsInput;
import org.openapitools.client.model.ListImportsOutput;
import org.openapitools.client.model.ListStackInstanceResourceDriftsInput;
import org.openapitools.client.model.ListStackInstanceResourceDriftsOutput;
import org.openapitools.client.model.ListStackInstancesInput;
import org.openapitools.client.model.ListStackInstancesOutput;
import org.openapitools.client.model.ListStackResourcesInput;
import org.openapitools.client.model.ListStackResourcesOutput;
import org.openapitools.client.model.ListStackSetOperationResultsInput;
import org.openapitools.client.model.ListStackSetOperationResultsOutput;
import org.openapitools.client.model.ListStackSetOperationsInput;
import org.openapitools.client.model.ListStackSetOperationsOutput;
import org.openapitools.client.model.ListStackSetsInput;
import org.openapitools.client.model.ListStackSetsOutput;
import org.openapitools.client.model.ListStacksInput;
import org.openapitools.client.model.ListStacksOutput;
import org.openapitools.client.model.ListTypeRegistrationsInput;
import org.openapitools.client.model.ListTypeRegistrationsOutput;
import org.openapitools.client.model.ListTypeVersionsInput;
import org.openapitools.client.model.ListTypeVersionsOutput;
import org.openapitools.client.model.ListTypesInput;
import org.openapitools.client.model.ListTypesOutput;
import org.openapitools.client.model.OperationResultFilter;
import org.openapitools.client.model.Parameter;
import org.openapitools.client.model.PublishTypeInput;
import org.openapitools.client.model.PublishTypeOutput;
import org.openapitools.client.model.RecordHandlerProgressInput;
import org.openapitools.client.model.RegisterPublisherInput;
import org.openapitools.client.model.RegisterPublisherOutput;
import org.openapitools.client.model.RegisterTypeInput;
import org.openapitools.client.model.RegisterTypeOutput;
import org.openapitools.client.model.ResourceToImport;
import org.openapitools.client.model.RollbackStackInput;
import org.openapitools.client.model.RollbackStackOutput;
import org.openapitools.client.model.SetStackPolicyInput;
import org.openapitools.client.model.SetTypeConfigurationInput;
import org.openapitools.client.model.SetTypeConfigurationOutput;
import org.openapitools.client.model.SetTypeDefaultVersionInput;
import org.openapitools.client.model.SignalResourceInput;
import org.openapitools.client.model.StackInstanceFilter;
import org.openapitools.client.model.StackResourceDriftStatus;
import org.openapitools.client.model.StackStatus;
import org.openapitools.client.model.StopStackSetOperationInput;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TestTypeInput;
import org.openapitools.client.model.TestTypeOutput;
import org.openapitools.client.model.TypeConfigurationIdentifier;
import org.openapitools.client.model.UpdateStackInput;
import org.openapitools.client.model.UpdateStackInstancesInput;
import org.openapitools.client.model.UpdateStackInstancesOutput;
import org.openapitools.client.model.UpdateStackOutput;
import org.openapitools.client.model.UpdateStackSetInput;
import org.openapitools.client.model.UpdateStackSetOutput;
import org.openapitools.client.model.UpdateTerminationProtectionInput;
import org.openapitools.client.model.UpdateTerminationProtectionOutput;
import org.openapitools.client.model.ValidateTemplateInput;
import org.openapitools.client.model.ValidateTemplateOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETActivateOrganizationsAccess
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETActivateOrganizationsAccessCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ActivateOrganizationsAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETActivateOrganizationsAccessValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETActivateOrganizationsAccess(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETActivateOrganizationsAccess(Async)");
        }

        return gETActivateOrganizationsAccessCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Activate trusted access with Organizations. With trusted access between StackSets and Organizations activated, the management account has permissions to create and manage StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETActivateOrganizationsAccess(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETActivateOrganizationsAccessWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Activate trusted access with Organizations. With trusted access between StackSets and Organizations activated, the management account has permissions to create and manage StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETActivateOrganizationsAccessWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETActivateOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Activate trusted access with Organizations. With trusted access between StackSets and Organizations activated, the management account has permissions to create and manage StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETActivateOrganizationsAccessAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETActivateOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETActivateType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The extension type.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publicTypeArn &lt;p&gt;The Amazon Resource Name (ARN) of the public extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeNameAlias &lt;p&gt;An alias to assign to the public extension, in this account and Region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and Region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.&lt;/p&gt; &lt;p&gt;An extension alias must be unique within a given account and Region. You can activate the same public resource multiple times in the same account and Region, using different type name aliases.&lt;/p&gt; (optional)
     * @param autoUpdate &lt;p&gt;Whether to automatically update the extension in this account and Region when a new &lt;i&gt;minor&lt;/i&gt; version is published by the extension publisher. Major versions released by the publisher must be manually updated.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param loggingConfig Contains logging configuration information for an extension. (optional)
     * @param executionRoleArn The name of the IAM execution role to use to activate the extension. (optional)
     * @param versionBump &lt;p&gt;Manually updates a previously-activated type to a new major or minor version, if available. You can also use this parameter to update the value of &lt;code&gt;AutoUpdate&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MAJOR&lt;/code&gt;: CloudFormation updates the extension to the newest major version, if one is available.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MINOR&lt;/code&gt;: CloudFormation updates the extension to the newest minor version, if one is available.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param majorVersion &lt;p&gt;The major version of this extension you want to activate, if multiple major versions are available. The default is the latest major version. CloudFormation uses the latest available &lt;i&gt;minor&lt;/i&gt; version of the major version selected.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;MajorVersion&lt;/code&gt; or &lt;code&gt;VersionBump&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETActivateTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String publicTypeArn, String publisherId, String typeName, String typeNameAlias, Boolean autoUpdate, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String versionBump, Integer majorVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ActivateType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (publicTypeArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PublicTypeArn", publicTypeArn));
        }

        if (publisherId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PublisherId", publisherId));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (typeNameAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeNameAlias", typeNameAlias));
        }

        if (autoUpdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoUpdate", autoUpdate));
        }

        if (loggingConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoggingConfig", loggingConfig));
        }

        if (executionRoleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExecutionRoleArn", executionRoleArn));
        }

        if (versionBump != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionBump", versionBump));
        }

        if (majorVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MajorVersion", majorVersion));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETActivateTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String publicTypeArn, String publisherId, String typeName, String typeNameAlias, Boolean autoUpdate, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String versionBump, Integer majorVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETActivateType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETActivateType(Async)");
        }

        return gETActivateTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, publicTypeArn, publisherId, typeName, typeNameAlias, autoUpdate, loggingConfig, executionRoleArn, versionBump, majorVersion, _callback);

    }

    /**
     * 
     * &lt;p&gt;Activates a public third-party extension, making it available for use in stack templates. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html\&quot;&gt;Using public extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Once you have activated a public third-party extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The extension type.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publicTypeArn &lt;p&gt;The Amazon Resource Name (ARN) of the public extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeNameAlias &lt;p&gt;An alias to assign to the public extension, in this account and Region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and Region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.&lt;/p&gt; &lt;p&gt;An extension alias must be unique within a given account and Region. You can activate the same public resource multiple times in the same account and Region, using different type name aliases.&lt;/p&gt; (optional)
     * @param autoUpdate &lt;p&gt;Whether to automatically update the extension in this account and Region when a new &lt;i&gt;minor&lt;/i&gt; version is published by the extension publisher. Major versions released by the publisher must be manually updated.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param loggingConfig Contains logging configuration information for an extension. (optional)
     * @param executionRoleArn The name of the IAM execution role to use to activate the extension. (optional)
     * @param versionBump &lt;p&gt;Manually updates a previously-activated type to a new major or minor version, if available. You can also use this parameter to update the value of &lt;code&gt;AutoUpdate&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MAJOR&lt;/code&gt;: CloudFormation updates the extension to the newest major version, if one is available.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MINOR&lt;/code&gt;: CloudFormation updates the extension to the newest minor version, if one is available.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param majorVersion &lt;p&gt;The major version of this extension you want to activate, if multiple major versions are available. The default is the latest major version. CloudFormation uses the latest available &lt;i&gt;minor&lt;/i&gt; version of the major version selected.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;MajorVersion&lt;/code&gt; or &lt;code&gt;VersionBump&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @return ActivateTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ActivateTypeOutput gETActivateType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String publicTypeArn, String publisherId, String typeName, String typeNameAlias, Boolean autoUpdate, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String versionBump, Integer majorVersion) throws ApiException {
        ApiResponse<ActivateTypeOutput> localVarResp = gETActivateTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, publicTypeArn, publisherId, typeName, typeNameAlias, autoUpdate, loggingConfig, executionRoleArn, versionBump, majorVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Activates a public third-party extension, making it available for use in stack templates. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html\&quot;&gt;Using public extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Once you have activated a public third-party extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The extension type.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publicTypeArn &lt;p&gt;The Amazon Resource Name (ARN) of the public extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeNameAlias &lt;p&gt;An alias to assign to the public extension, in this account and Region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and Region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.&lt;/p&gt; &lt;p&gt;An extension alias must be unique within a given account and Region. You can activate the same public resource multiple times in the same account and Region, using different type name aliases.&lt;/p&gt; (optional)
     * @param autoUpdate &lt;p&gt;Whether to automatically update the extension in this account and Region when a new &lt;i&gt;minor&lt;/i&gt; version is published by the extension publisher. Major versions released by the publisher must be manually updated.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param loggingConfig Contains logging configuration information for an extension. (optional)
     * @param executionRoleArn The name of the IAM execution role to use to activate the extension. (optional)
     * @param versionBump &lt;p&gt;Manually updates a previously-activated type to a new major or minor version, if available. You can also use this parameter to update the value of &lt;code&gt;AutoUpdate&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MAJOR&lt;/code&gt;: CloudFormation updates the extension to the newest major version, if one is available.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MINOR&lt;/code&gt;: CloudFormation updates the extension to the newest minor version, if one is available.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param majorVersion &lt;p&gt;The major version of this extension you want to activate, if multiple major versions are available. The default is the latest major version. CloudFormation uses the latest available &lt;i&gt;minor&lt;/i&gt; version of the major version selected.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;MajorVersion&lt;/code&gt; or &lt;code&gt;VersionBump&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ActivateTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivateTypeOutput> gETActivateTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String publicTypeArn, String publisherId, String typeName, String typeNameAlias, Boolean autoUpdate, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String versionBump, Integer majorVersion) throws ApiException {
        okhttp3.Call localVarCall = gETActivateTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, publicTypeArn, publisherId, typeName, typeNameAlias, autoUpdate, loggingConfig, executionRoleArn, versionBump, majorVersion, null);
        Type localVarReturnType = new TypeToken<ActivateTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Activates a public third-party extension, making it available for use in stack templates. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html\&quot;&gt;Using public extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Once you have activated a public third-party extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The extension type.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publicTypeArn &lt;p&gt;The Amazon Resource Name (ARN) of the public extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;PublicTypeArn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt;, &lt;code&gt;Type&lt;/code&gt;, and &lt;code&gt;PublisherId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeNameAlias &lt;p&gt;An alias to assign to the public extension, in this account and Region. If you specify an alias for the extension, CloudFormation treats the alias as the extension type name within this account and Region. You must use the alias to refer to the extension in your templates, API calls, and CloudFormation console.&lt;/p&gt; &lt;p&gt;An extension alias must be unique within a given account and Region. You can activate the same public resource multiple times in the same account and Region, using different type name aliases.&lt;/p&gt; (optional)
     * @param autoUpdate &lt;p&gt;Whether to automatically update the extension in this account and Region when a new &lt;i&gt;minor&lt;/i&gt; version is published by the extension publisher. Major versions released by the publisher must be manually updated.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param loggingConfig Contains logging configuration information for an extension. (optional)
     * @param executionRoleArn The name of the IAM execution role to use to activate the extension. (optional)
     * @param versionBump &lt;p&gt;Manually updates a previously-activated type to a new major or minor version, if available. You can also use this parameter to update the value of &lt;code&gt;AutoUpdate&lt;/code&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MAJOR&lt;/code&gt;: CloudFormation updates the extension to the newest major version, if one is available.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MINOR&lt;/code&gt;: CloudFormation updates the extension to the newest minor version, if one is available.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param majorVersion &lt;p&gt;The major version of this extension you want to activate, if multiple major versions are available. The default is the latest major version. CloudFormation uses the latest available &lt;i&gt;minor&lt;/i&gt; version of the major version selected.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;MajorVersion&lt;/code&gt; or &lt;code&gt;VersionBump&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETActivateTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String publicTypeArn, String publisherId, String typeName, String typeNameAlias, Boolean autoUpdate, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String versionBump, Integer majorVersion, final ApiCallback<ActivateTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETActivateTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, publicTypeArn, publisherId, typeName, typeNameAlias, autoUpdate, loggingConfig, executionRoleArn, versionBump, majorVersion, _callback);
        Type localVarReturnType = new TypeToken<ActivateTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETBatchDescribeTypeConfigurations
     * @param typeConfigurationIdentifiers The list of identifiers for the desired extension configurations. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TypeConfigurationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchDescribeTypeConfigurationsCall(List<TypeConfigurationIdentifier> typeConfigurationIdentifiers, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=BatchDescribeTypeConfigurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeConfigurationIdentifiers != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TypeConfigurationIdentifiers", typeConfigurationIdentifiers));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETBatchDescribeTypeConfigurationsValidateBeforeCall(List<TypeConfigurationIdentifier> typeConfigurationIdentifiers, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeConfigurationIdentifiers' is set
        if (typeConfigurationIdentifiers == null) {
            throw new ApiException("Missing the required parameter 'typeConfigurationIdentifiers' when calling gETBatchDescribeTypeConfigurations(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETBatchDescribeTypeConfigurations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETBatchDescribeTypeConfigurations(Async)");
        }

        return gETBatchDescribeTypeConfigurationsCall(typeConfigurationIdentifiers, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns configuration data for the specified CloudFormation extensions, from the CloudFormation registry for the account and Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param typeConfigurationIdentifiers The list of identifiers for the desired extension configurations. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchDescribeTypeConfigurationsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TypeConfigurationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public BatchDescribeTypeConfigurationsOutput gETBatchDescribeTypeConfigurations(List<TypeConfigurationIdentifier> typeConfigurationIdentifiers, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchDescribeTypeConfigurationsOutput> localVarResp = gETBatchDescribeTypeConfigurationsWithHttpInfo(typeConfigurationIdentifiers, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns configuration data for the specified CloudFormation extensions, from the CloudFormation registry for the account and Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param typeConfigurationIdentifiers The list of identifiers for the desired extension configurations. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchDescribeTypeConfigurationsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TypeConfigurationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchDescribeTypeConfigurationsOutput> gETBatchDescribeTypeConfigurationsWithHttpInfo(List<TypeConfigurationIdentifier> typeConfigurationIdentifiers, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETBatchDescribeTypeConfigurationsValidateBeforeCall(typeConfigurationIdentifiers, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchDescribeTypeConfigurationsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns configuration data for the specified CloudFormation extensions, from the CloudFormation registry for the account and Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param typeConfigurationIdentifiers The list of identifiers for the desired extension configurations. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TypeConfigurationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchDescribeTypeConfigurationsAsync(List<TypeConfigurationIdentifier> typeConfigurationIdentifiers, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchDescribeTypeConfigurationsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETBatchDescribeTypeConfigurationsValidateBeforeCall(typeConfigurationIdentifiers, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchDescribeTypeConfigurationsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCancelUpdateStack
     * @param stackName &lt;note&gt; &lt;p&gt;If you don&#39;t pass a parameter to &lt;code&gt;StackName&lt;/code&gt;, the API returns a response that describes all resources in the account.&lt;/p&gt; &lt;p&gt;The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ \&quot;Version\&quot;: \&quot;2012-10-17\&quot;, \&quot;Statement\&quot;: [{ \&quot;Effect\&quot;: \&quot;Deny\&quot;, \&quot;Action\&quot;: \&quot;cloudformation:DescribeStacks\&quot;, \&quot;NotResource\&quot;: \&quot;arn:aws:cloudformation:*:*:stack/_*_/_*\&quot; }] }&lt;/code&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;CancelUpdateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to cancel an update on a stack with the same name. You might retry &lt;code&gt;CancelUpdateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCancelUpdateStackCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CancelUpdateStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCancelUpdateStackValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETCancelUpdateStack(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCancelUpdateStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCancelUpdateStack(Async)");
        }

        return gETCancelUpdateStackCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientRequestToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels an update on the specified stack. If the call completes successfully, the stack rolls back the update and reverts to the previous stack configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can cancel only stacks that are in the &lt;code&gt;UPDATE_IN_PROGRESS&lt;/code&gt; state.&lt;/p&gt; &lt;/note&gt;
     * @param stackName &lt;note&gt; &lt;p&gt;If you don&#39;t pass a parameter to &lt;code&gt;StackName&lt;/code&gt;, the API returns a response that describes all resources in the account.&lt;/p&gt; &lt;p&gt;The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ \&quot;Version\&quot;: \&quot;2012-10-17\&quot;, \&quot;Statement\&quot;: [{ \&quot;Effect\&quot;: \&quot;Deny\&quot;, \&quot;Action\&quot;: \&quot;cloudformation:DescribeStacks\&quot;, \&quot;NotResource\&quot;: \&quot;arn:aws:cloudformation:*:*:stack/_*_/_*\&quot; }] }&lt;/code&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;CancelUpdateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to cancel an update on a stack with the same name. You might retry &lt;code&gt;CancelUpdateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public void gETCancelUpdateStack(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String clientRequestToken) throws ApiException {
        gETCancelUpdateStackWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientRequestToken);
    }

    /**
     * 
     * &lt;p&gt;Cancels an update on the specified stack. If the call completes successfully, the stack rolls back the update and reverts to the previous stack configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can cancel only stacks that are in the &lt;code&gt;UPDATE_IN_PROGRESS&lt;/code&gt; state.&lt;/p&gt; &lt;/note&gt;
     * @param stackName &lt;note&gt; &lt;p&gt;If you don&#39;t pass a parameter to &lt;code&gt;StackName&lt;/code&gt;, the API returns a response that describes all resources in the account.&lt;/p&gt; &lt;p&gt;The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ \&quot;Version\&quot;: \&quot;2012-10-17\&quot;, \&quot;Statement\&quot;: [{ \&quot;Effect\&quot;: \&quot;Deny\&quot;, \&quot;Action\&quot;: \&quot;cloudformation:DescribeStacks\&quot;, \&quot;NotResource\&quot;: \&quot;arn:aws:cloudformation:*:*:stack/_*_/_*\&quot; }] }&lt;/code&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;CancelUpdateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to cancel an update on a stack with the same name. You might retry &lt;code&gt;CancelUpdateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETCancelUpdateStackWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String clientRequestToken) throws ApiException {
        okhttp3.Call localVarCall = gETCancelUpdateStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientRequestToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels an update on the specified stack. If the call completes successfully, the stack rolls back the update and reverts to the previous stack configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can cancel only stacks that are in the &lt;code&gt;UPDATE_IN_PROGRESS&lt;/code&gt; state.&lt;/p&gt; &lt;/note&gt;
     * @param stackName &lt;note&gt; &lt;p&gt;If you don&#39;t pass a parameter to &lt;code&gt;StackName&lt;/code&gt;, the API returns a response that describes all resources in the account.&lt;/p&gt; &lt;p&gt;The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{ \&quot;Version\&quot;: \&quot;2012-10-17\&quot;, \&quot;Statement\&quot;: [{ \&quot;Effect\&quot;: \&quot;Deny\&quot;, \&quot;Action\&quot;: \&quot;cloudformation:DescribeStacks\&quot;, \&quot;NotResource\&quot;: \&quot;arn:aws:cloudformation:*:*:stack/_*_/_*\&quot; }] }&lt;/code&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;CancelUpdateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to cancel an update on a stack with the same name. You might retry &lt;code&gt;CancelUpdateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCancelUpdateStackAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String clientRequestToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCancelUpdateStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientRequestToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETContinueUpdateRollback
     * @param stackName &lt;p&gt;The name or the unique ID of the stack that you want to continue rolling back.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t specify the name of a nested stack (a stack that was created by using the &lt;code&gt;AWS::CloudFormation::Stack&lt;/code&gt; resource). Instead, use this operation on the parent stack (the stack that contains the &lt;code&gt;AWS::CloudFormation::Stack&lt;/code&gt; resource).&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to roll back the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least permission.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param resourcesToSkip &lt;p&gt;A list of the logical IDs of the resources that CloudFormation skips during the continue update rollback operation. You can specify only resources that are in the &lt;code&gt;UPDATE_FAILED&lt;/code&gt; state because a rollback failed. You can&#39;t specify resources that are in the &lt;code&gt;UPDATE_FAILED&lt;/code&gt; state for other reasons, for example, because an update was canceled. To check why a resource update failed, use the &lt;a&gt;DescribeStackResources&lt;/a&gt; action, and view the resource status reason.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Specify this property to skip rolling back resources that CloudFormation can&#39;t successfully roll back. We recommend that you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; troubleshoot&lt;/a&gt; resources before skipping them. CloudFormation sets the status of the specified resources to &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; and continues to roll back the stack. After the rollback is complete, the state of the skipped resources will be inconsistent with the state of the resources in the stack template. Before performing another stack update, you must update the stack or resources to be consistent with each other. If you don&#39;t, subsequent stack updates might fail, and the stack will become unrecoverable.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Specify the minimum number of resources required to successfully roll back your stack. For example, a failed resource update might cause dependent resources to fail. In this case, it might not be necessary to skip the dependent resources.&lt;/p&gt; &lt;p&gt;To skip resources that are part of nested stacks, use the following format: &lt;code&gt;NestedStackName.ResourceLogicalID&lt;/code&gt;. If you want to specify the logical ID of a stack resource (&lt;code&gt;Type: AWS::CloudFormation::Stack&lt;/code&gt;) in the &lt;code&gt;ResourcesToSkip&lt;/code&gt; list, then its corresponding embedded stack must be in one of the following states: &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;, &lt;code&gt;DELETE_COMPLETE&lt;/code&gt;, or &lt;code&gt;DELETE_FAILED&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t confuse a child stack&#39;s name with its corresponding logical ID defined in the parent stack. For an example of a continue update rollback operation with nested stacks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html#nested-stacks\&quot;&gt;Using ResourcesToSkip to recover a nested stacks hierarchy&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;ContinueUpdateRollback&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to continue the rollback to a stack with the same name. You might retry &lt;code&gt;ContinueUpdateRollback&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETContinueUpdateRollbackCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, List<String> resourcesToSkip, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ContinueUpdateRollback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (roleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleARN", roleARN));
        }

        if (resourcesToSkip != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ResourcesToSkip", resourcesToSkip));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETContinueUpdateRollbackValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, List<String> resourcesToSkip, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETContinueUpdateRollback(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETContinueUpdateRollback(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETContinueUpdateRollback(Async)");
        }

        return gETContinueUpdateRollbackCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, roleARN, resourcesToSkip, clientRequestToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;For a specified stack that&#39;s in the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state, continues rolling it back to the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state. Depending on the cause of the failure, you can manually &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; fix the error&lt;/a&gt; and continue the rollback. By continuing the rollback, you can return your stack to a working state (the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state), and then try to update the stack again.&lt;/p&gt; &lt;p&gt;A stack goes into the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state when CloudFormation can&#39;t roll back all changes after a failed stack update. For example, you might have a stack that&#39;s rolling back to an old database instance that was deleted outside of CloudFormation. Because CloudFormation doesn&#39;t know the database was deleted, it assumes that the database instance still exists and attempts to roll back to it, causing the update rollback to fail.&lt;/p&gt;
     * @param stackName &lt;p&gt;The name or the unique ID of the stack that you want to continue rolling back.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t specify the name of a nested stack (a stack that was created by using the &lt;code&gt;AWS::CloudFormation::Stack&lt;/code&gt; resource). Instead, use this operation on the parent stack (the stack that contains the &lt;code&gt;AWS::CloudFormation::Stack&lt;/code&gt; resource).&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to roll back the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least permission.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param resourcesToSkip &lt;p&gt;A list of the logical IDs of the resources that CloudFormation skips during the continue update rollback operation. You can specify only resources that are in the &lt;code&gt;UPDATE_FAILED&lt;/code&gt; state because a rollback failed. You can&#39;t specify resources that are in the &lt;code&gt;UPDATE_FAILED&lt;/code&gt; state for other reasons, for example, because an update was canceled. To check why a resource update failed, use the &lt;a&gt;DescribeStackResources&lt;/a&gt; action, and view the resource status reason.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Specify this property to skip rolling back resources that CloudFormation can&#39;t successfully roll back. We recommend that you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; troubleshoot&lt;/a&gt; resources before skipping them. CloudFormation sets the status of the specified resources to &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; and continues to roll back the stack. After the rollback is complete, the state of the skipped resources will be inconsistent with the state of the resources in the stack template. Before performing another stack update, you must update the stack or resources to be consistent with each other. If you don&#39;t, subsequent stack updates might fail, and the stack will become unrecoverable.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Specify the minimum number of resources required to successfully roll back your stack. For example, a failed resource update might cause dependent resources to fail. In this case, it might not be necessary to skip the dependent resources.&lt;/p&gt; &lt;p&gt;To skip resources that are part of nested stacks, use the following format: &lt;code&gt;NestedStackName.ResourceLogicalID&lt;/code&gt;. If you want to specify the logical ID of a stack resource (&lt;code&gt;Type: AWS::CloudFormation::Stack&lt;/code&gt;) in the &lt;code&gt;ResourcesToSkip&lt;/code&gt; list, then its corresponding embedded stack must be in one of the following states: &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;, &lt;code&gt;DELETE_COMPLETE&lt;/code&gt;, or &lt;code&gt;DELETE_FAILED&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t confuse a child stack&#39;s name with its corresponding logical ID defined in the parent stack. For an example of a continue update rollback operation with nested stacks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html#nested-stacks\&quot;&gt;Using ResourcesToSkip to recover a nested stacks hierarchy&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;ContinueUpdateRollback&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to continue the rollback to a stack with the same name. You might retry &lt;code&gt;ContinueUpdateRollback&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETContinueUpdateRollback(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, List<String> resourcesToSkip, String clientRequestToken) throws ApiException {
        ApiResponse<Object> localVarResp = gETContinueUpdateRollbackWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, roleARN, resourcesToSkip, clientRequestToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;For a specified stack that&#39;s in the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state, continues rolling it back to the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state. Depending on the cause of the failure, you can manually &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; fix the error&lt;/a&gt; and continue the rollback. By continuing the rollback, you can return your stack to a working state (the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state), and then try to update the stack again.&lt;/p&gt; &lt;p&gt;A stack goes into the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state when CloudFormation can&#39;t roll back all changes after a failed stack update. For example, you might have a stack that&#39;s rolling back to an old database instance that was deleted outside of CloudFormation. Because CloudFormation doesn&#39;t know the database was deleted, it assumes that the database instance still exists and attempts to roll back to it, causing the update rollback to fail.&lt;/p&gt;
     * @param stackName &lt;p&gt;The name or the unique ID of the stack that you want to continue rolling back.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t specify the name of a nested stack (a stack that was created by using the &lt;code&gt;AWS::CloudFormation::Stack&lt;/code&gt; resource). Instead, use this operation on the parent stack (the stack that contains the &lt;code&gt;AWS::CloudFormation::Stack&lt;/code&gt; resource).&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to roll back the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least permission.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param resourcesToSkip &lt;p&gt;A list of the logical IDs of the resources that CloudFormation skips during the continue update rollback operation. You can specify only resources that are in the &lt;code&gt;UPDATE_FAILED&lt;/code&gt; state because a rollback failed. You can&#39;t specify resources that are in the &lt;code&gt;UPDATE_FAILED&lt;/code&gt; state for other reasons, for example, because an update was canceled. To check why a resource update failed, use the &lt;a&gt;DescribeStackResources&lt;/a&gt; action, and view the resource status reason.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Specify this property to skip rolling back resources that CloudFormation can&#39;t successfully roll back. We recommend that you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; troubleshoot&lt;/a&gt; resources before skipping them. CloudFormation sets the status of the specified resources to &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; and continues to roll back the stack. After the rollback is complete, the state of the skipped resources will be inconsistent with the state of the resources in the stack template. Before performing another stack update, you must update the stack or resources to be consistent with each other. If you don&#39;t, subsequent stack updates might fail, and the stack will become unrecoverable.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Specify the minimum number of resources required to successfully roll back your stack. For example, a failed resource update might cause dependent resources to fail. In this case, it might not be necessary to skip the dependent resources.&lt;/p&gt; &lt;p&gt;To skip resources that are part of nested stacks, use the following format: &lt;code&gt;NestedStackName.ResourceLogicalID&lt;/code&gt;. If you want to specify the logical ID of a stack resource (&lt;code&gt;Type: AWS::CloudFormation::Stack&lt;/code&gt;) in the &lt;code&gt;ResourcesToSkip&lt;/code&gt; list, then its corresponding embedded stack must be in one of the following states: &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;, &lt;code&gt;DELETE_COMPLETE&lt;/code&gt;, or &lt;code&gt;DELETE_FAILED&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t confuse a child stack&#39;s name with its corresponding logical ID defined in the parent stack. For an example of a continue update rollback operation with nested stacks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html#nested-stacks\&quot;&gt;Using ResourcesToSkip to recover a nested stacks hierarchy&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;ContinueUpdateRollback&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to continue the rollback to a stack with the same name. You might retry &lt;code&gt;ContinueUpdateRollback&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETContinueUpdateRollbackWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, List<String> resourcesToSkip, String clientRequestToken) throws ApiException {
        okhttp3.Call localVarCall = gETContinueUpdateRollbackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, roleARN, resourcesToSkip, clientRequestToken, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;For a specified stack that&#39;s in the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state, continues rolling it back to the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state. Depending on the cause of the failure, you can manually &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; fix the error&lt;/a&gt; and continue the rollback. By continuing the rollback, you can return your stack to a working state (the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state), and then try to update the stack again.&lt;/p&gt; &lt;p&gt;A stack goes into the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state when CloudFormation can&#39;t roll back all changes after a failed stack update. For example, you might have a stack that&#39;s rolling back to an old database instance that was deleted outside of CloudFormation. Because CloudFormation doesn&#39;t know the database was deleted, it assumes that the database instance still exists and attempts to roll back to it, causing the update rollback to fail.&lt;/p&gt;
     * @param stackName &lt;p&gt;The name or the unique ID of the stack that you want to continue rolling back.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t specify the name of a nested stack (a stack that was created by using the &lt;code&gt;AWS::CloudFormation::Stack&lt;/code&gt; resource). Instead, use this operation on the parent stack (the stack that contains the &lt;code&gt;AWS::CloudFormation::Stack&lt;/code&gt; resource).&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to roll back the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least permission.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param resourcesToSkip &lt;p&gt;A list of the logical IDs of the resources that CloudFormation skips during the continue update rollback operation. You can specify only resources that are in the &lt;code&gt;UPDATE_FAILED&lt;/code&gt; state because a rollback failed. You can&#39;t specify resources that are in the &lt;code&gt;UPDATE_FAILED&lt;/code&gt; state for other reasons, for example, because an update was canceled. To check why a resource update failed, use the &lt;a&gt;DescribeStackResources&lt;/a&gt; action, and view the resource status reason.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Specify this property to skip rolling back resources that CloudFormation can&#39;t successfully roll back. We recommend that you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; troubleshoot&lt;/a&gt; resources before skipping them. CloudFormation sets the status of the specified resources to &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; and continues to roll back the stack. After the rollback is complete, the state of the skipped resources will be inconsistent with the state of the resources in the stack template. Before performing another stack update, you must update the stack or resources to be consistent with each other. If you don&#39;t, subsequent stack updates might fail, and the stack will become unrecoverable.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Specify the minimum number of resources required to successfully roll back your stack. For example, a failed resource update might cause dependent resources to fail. In this case, it might not be necessary to skip the dependent resources.&lt;/p&gt; &lt;p&gt;To skip resources that are part of nested stacks, use the following format: &lt;code&gt;NestedStackName.ResourceLogicalID&lt;/code&gt;. If you want to specify the logical ID of a stack resource (&lt;code&gt;Type: AWS::CloudFormation::Stack&lt;/code&gt;) in the &lt;code&gt;ResourcesToSkip&lt;/code&gt; list, then its corresponding embedded stack must be in one of the following states: &lt;code&gt;DELETE_IN_PROGRESS&lt;/code&gt;, &lt;code&gt;DELETE_COMPLETE&lt;/code&gt;, or &lt;code&gt;DELETE_FAILED&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Don&#39;t confuse a child stack&#39;s name with its corresponding logical ID defined in the parent stack. For an example of a continue update rollback operation with nested stacks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html#nested-stacks\&quot;&gt;Using ResourcesToSkip to recover a nested stacks hierarchy&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;ContinueUpdateRollback&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to continue the rollback to a stack with the same name. You might retry &lt;code&gt;ContinueUpdateRollback&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETContinueUpdateRollbackAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, List<String> resourcesToSkip, String clientRequestToken, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETContinueUpdateRollbackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, roleARN, resourcesToSkip, clientRequestToken, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateChangeSet
     * @param stackName The name or the unique ID of the stack for which you are creating a change set. CloudFormation generates the change set by comparing this stack&#39;s information with the information that you submit, such as a modified template or different parameter input values. (required)
     * @param changeSetName &lt;p&gt;The name of the change set. The name must be unique among all change sets that are associated with the specified stack.&lt;/p&gt; &lt;p&gt;A change set name can contain only alphanumeric, case sensitive characters, and hyphens. It must start with an alphabetical character and can&#39;t exceed 128 characters.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;A structure that contains the body of the revised template, with a minimum length of 1 byte and a maximum length of 51,200 bytes. CloudFormation generates the change set by comparing this template with the template of the stack that you specified.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the revised template. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. CloudFormation generates the change set by comparing this template with the stack that you specified.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param usePreviousTemplate Whether to reuse the template that&#39;s associated with the stack to create the change set. (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the change set. For more information, see the &lt;a&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM resources in CloudFormation templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This capacity doesn&#39;t apply to creating change sets, and specifying it when creating change sets has no effect.&lt;/p&gt; &lt;p&gt;If you want to create a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must create or update the stack directly from the template using the &lt;a&gt;CreateStack&lt;/a&gt; or &lt;a&gt;UpdateStack&lt;/a&gt; action, and specifying this capability.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about macros, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation macros to perform custom processing on templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with if you execute this change set, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource type that you&#39;re updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for condition keys in IAM policies for CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling access with Identity and Access Management&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes when executing the change set. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least permission.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.&lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param notificationARNs The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS) topics that CloudFormation associates with the stack. To remove all associated notification topics, specify an empty list. (optional)
     * @param tags Key-value pairs to associate with this stack. CloudFormation also propagates these tags to resources in the stack. You can specify a maximum of 50 tags. (optional)
     * @param clientToken A unique identifier for this &lt;code&gt;CreateChangeSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create another change set with the same name. You might retry &lt;code&gt;CreateChangeSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param description A description to help you identify this change set. (optional)
     * @param changeSetType &lt;p&gt;The type of change set operation. To create a change set for a new stack, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt;. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you create a change set for a new stack, CloudFormation creates a stack with a unique stack ID, but no template or resources. The stack will be in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#d0e11995\&quot;&gt;REVIEW_IN_PROGRESS&lt;/a&gt; state until you execute the change set.&lt;/p&gt; &lt;p&gt;By default, CloudFormation specifies &lt;code&gt;UPDATE&lt;/code&gt;. You can&#39;t use the &lt;code&gt;UPDATE&lt;/code&gt; type to create a change set for a new stack or the &lt;code&gt;CREATE&lt;/code&gt; type to create a change set for an existing stack.&lt;/p&gt; (optional)
     * @param resourcesToImport The resources to import into your stack. (optional)
     * @param includeNestedStacks Creates a change set for the all nested stacks specified in the template. The default behavior of this action is set to &lt;code&gt;False&lt;/code&gt;. To include nested sets in a change set, specify &lt;code&gt;True&lt;/code&gt;. (optional)
     * @param onStackFailure &lt;p&gt;Determines what action will be taken if stack creation fails. If this parameter is specified, the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation must not be specified. This must be one of these values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETE&lt;/code&gt; - Deletes the change set if the stack creation fails. This is only valid when the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter is set to &lt;code&gt;CREATE&lt;/code&gt;. If the deletion of the stack fails, the status of the stack is &lt;code&gt;DELETE_FAILED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DO_NOTHING&lt;/code&gt; - if the stack creation fails, do nothing. This is equivalent to specifying &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ROLLBACK&lt;/code&gt; - if the stack creation fails, roll back the stack. This is equivalent to specifying &lt;code&gt;false&lt;/code&gt; for the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For nested stacks, when the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter is set to &lt;code&gt;DELETE&lt;/code&gt; for the change set for the parent stack, any failure in a child stack will cause the parent stack creation to fail and all stacks to be deleted.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateChangeSetCall(String stackName, String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, List<String> notificationARNs, List<Tag> tags, String clientToken, String description, String changeSetType, List<ResourceToImport> resourcesToImport, Boolean includeNestedStacks, String onStackFailure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateChangeSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (templateBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateBody", templateBody));
        }

        if (templateURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateURL", templateURL));
        }

        if (usePreviousTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UsePreviousTemplate", usePreviousTemplate));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (capabilities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Capabilities", capabilities));
        }

        if (resourceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ResourceTypes", resourceTypes));
        }

        if (roleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleARN", roleARN));
        }

        if (rollbackConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RollbackConfiguration", rollbackConfiguration));
        }

        if (notificationARNs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "NotificationARNs", notificationARNs));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (changeSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChangeSetName", changeSetName));
        }

        if (clientToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientToken", clientToken));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (changeSetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChangeSetType", changeSetType));
        }

        if (resourcesToImport != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ResourcesToImport", resourcesToImport));
        }

        if (includeNestedStacks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IncludeNestedStacks", includeNestedStacks));
        }

        if (onStackFailure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OnStackFailure", onStackFailure));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateChangeSetValidateBeforeCall(String stackName, String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, List<String> notificationARNs, List<Tag> tags, String clientToken, String description, String changeSetType, List<ResourceToImport> resourcesToImport, Boolean includeNestedStacks, String onStackFailure, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETCreateChangeSet(Async)");
        }

        // verify the required parameter 'changeSetName' is set
        if (changeSetName == null) {
            throw new ApiException("Missing the required parameter 'changeSetName' when calling gETCreateChangeSet(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateChangeSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateChangeSet(Async)");
        }

        return gETCreateChangeSetCall(stackName, changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, usePreviousTemplate, parameters, capabilities, resourceTypes, roleARN, rollbackConfiguration, notificationARNs, tags, clientToken, description, changeSetType, resourcesToImport, includeNestedStacks, onStackFailure, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a list of changes that will be applied to a stack so that you can review the changes before executing them. You can create a change set for a stack that doesn&#39;t exist or an existing stack. If you create a change set for a stack that doesn&#39;t exist, the change set shows all of the resources that CloudFormation will create. If you create a change set for an existing stack, CloudFormation compares the stack&#39;s information with the information that you submit in the change set and lists the differences. Use change sets to understand which resources CloudFormation will create or change, and how it will change resources in an existing stack, before you create or update a stack.&lt;/p&gt; &lt;p&gt;To create a change set for a stack that doesn&#39;t exist, for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. After the &lt;code&gt;CreateChangeSet&lt;/code&gt; call successfully completes, CloudFormation starts creating the change set. To check the status of the change set or to review it, use the &lt;a&gt;DescribeChangeSet&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;When you are satisfied with the changes the change set will make, execute the change set by using the &lt;a&gt;ExecuteChangeSet&lt;/a&gt; action. CloudFormation doesn&#39;t make changes until you execute the change set.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, set &lt;code&gt;IncludeNestedStacks&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param stackName The name or the unique ID of the stack for which you are creating a change set. CloudFormation generates the change set by comparing this stack&#39;s information with the information that you submit, such as a modified template or different parameter input values. (required)
     * @param changeSetName &lt;p&gt;The name of the change set. The name must be unique among all change sets that are associated with the specified stack.&lt;/p&gt; &lt;p&gt;A change set name can contain only alphanumeric, case sensitive characters, and hyphens. It must start with an alphabetical character and can&#39;t exceed 128 characters.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;A structure that contains the body of the revised template, with a minimum length of 1 byte and a maximum length of 51,200 bytes. CloudFormation generates the change set by comparing this template with the template of the stack that you specified.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the revised template. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. CloudFormation generates the change set by comparing this template with the stack that you specified.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param usePreviousTemplate Whether to reuse the template that&#39;s associated with the stack to create the change set. (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the change set. For more information, see the &lt;a&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM resources in CloudFormation templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This capacity doesn&#39;t apply to creating change sets, and specifying it when creating change sets has no effect.&lt;/p&gt; &lt;p&gt;If you want to create a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must create or update the stack directly from the template using the &lt;a&gt;CreateStack&lt;/a&gt; or &lt;a&gt;UpdateStack&lt;/a&gt; action, and specifying this capability.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about macros, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation macros to perform custom processing on templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with if you execute this change set, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource type that you&#39;re updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for condition keys in IAM policies for CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling access with Identity and Access Management&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes when executing the change set. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least permission.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.&lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param notificationARNs The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS) topics that CloudFormation associates with the stack. To remove all associated notification topics, specify an empty list. (optional)
     * @param tags Key-value pairs to associate with this stack. CloudFormation also propagates these tags to resources in the stack. You can specify a maximum of 50 tags. (optional)
     * @param clientToken A unique identifier for this &lt;code&gt;CreateChangeSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create another change set with the same name. You might retry &lt;code&gt;CreateChangeSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param description A description to help you identify this change set. (optional)
     * @param changeSetType &lt;p&gt;The type of change set operation. To create a change set for a new stack, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt;. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you create a change set for a new stack, CloudFormation creates a stack with a unique stack ID, but no template or resources. The stack will be in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#d0e11995\&quot;&gt;REVIEW_IN_PROGRESS&lt;/a&gt; state until you execute the change set.&lt;/p&gt; &lt;p&gt;By default, CloudFormation specifies &lt;code&gt;UPDATE&lt;/code&gt;. You can&#39;t use the &lt;code&gt;UPDATE&lt;/code&gt; type to create a change set for a new stack or the &lt;code&gt;CREATE&lt;/code&gt; type to create a change set for an existing stack.&lt;/p&gt; (optional)
     * @param resourcesToImport The resources to import into your stack. (optional)
     * @param includeNestedStacks Creates a change set for the all nested stacks specified in the template. The default behavior of this action is set to &lt;code&gt;False&lt;/code&gt;. To include nested sets in a change set, specify &lt;code&gt;True&lt;/code&gt;. (optional)
     * @param onStackFailure &lt;p&gt;Determines what action will be taken if stack creation fails. If this parameter is specified, the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation must not be specified. This must be one of these values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETE&lt;/code&gt; - Deletes the change set if the stack creation fails. This is only valid when the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter is set to &lt;code&gt;CREATE&lt;/code&gt;. If the deletion of the stack fails, the status of the stack is &lt;code&gt;DELETE_FAILED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DO_NOTHING&lt;/code&gt; - if the stack creation fails, do nothing. This is equivalent to specifying &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ROLLBACK&lt;/code&gt; - if the stack creation fails, roll back the stack. This is equivalent to specifying &lt;code&gt;false&lt;/code&gt; for the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For nested stacks, when the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter is set to &lt;code&gt;DELETE&lt;/code&gt; for the change set for the parent stack, any failure in a child stack will cause the parent stack creation to fail and all stacks to be deleted.&lt;/p&gt; (optional)
     * @return CreateChangeSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateChangeSetOutput gETCreateChangeSet(String stackName, String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, List<String> notificationARNs, List<Tag> tags, String clientToken, String description, String changeSetType, List<ResourceToImport> resourcesToImport, Boolean includeNestedStacks, String onStackFailure) throws ApiException {
        ApiResponse<CreateChangeSetOutput> localVarResp = gETCreateChangeSetWithHttpInfo(stackName, changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, usePreviousTemplate, parameters, capabilities, resourceTypes, roleARN, rollbackConfiguration, notificationARNs, tags, clientToken, description, changeSetType, resourcesToImport, includeNestedStacks, onStackFailure);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a list of changes that will be applied to a stack so that you can review the changes before executing them. You can create a change set for a stack that doesn&#39;t exist or an existing stack. If you create a change set for a stack that doesn&#39;t exist, the change set shows all of the resources that CloudFormation will create. If you create a change set for an existing stack, CloudFormation compares the stack&#39;s information with the information that you submit in the change set and lists the differences. Use change sets to understand which resources CloudFormation will create or change, and how it will change resources in an existing stack, before you create or update a stack.&lt;/p&gt; &lt;p&gt;To create a change set for a stack that doesn&#39;t exist, for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. After the &lt;code&gt;CreateChangeSet&lt;/code&gt; call successfully completes, CloudFormation starts creating the change set. To check the status of the change set or to review it, use the &lt;a&gt;DescribeChangeSet&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;When you are satisfied with the changes the change set will make, execute the change set by using the &lt;a&gt;ExecuteChangeSet&lt;/a&gt; action. CloudFormation doesn&#39;t make changes until you execute the change set.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, set &lt;code&gt;IncludeNestedStacks&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param stackName The name or the unique ID of the stack for which you are creating a change set. CloudFormation generates the change set by comparing this stack&#39;s information with the information that you submit, such as a modified template or different parameter input values. (required)
     * @param changeSetName &lt;p&gt;The name of the change set. The name must be unique among all change sets that are associated with the specified stack.&lt;/p&gt; &lt;p&gt;A change set name can contain only alphanumeric, case sensitive characters, and hyphens. It must start with an alphabetical character and can&#39;t exceed 128 characters.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;A structure that contains the body of the revised template, with a minimum length of 1 byte and a maximum length of 51,200 bytes. CloudFormation generates the change set by comparing this template with the template of the stack that you specified.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the revised template. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. CloudFormation generates the change set by comparing this template with the stack that you specified.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param usePreviousTemplate Whether to reuse the template that&#39;s associated with the stack to create the change set. (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the change set. For more information, see the &lt;a&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM resources in CloudFormation templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This capacity doesn&#39;t apply to creating change sets, and specifying it when creating change sets has no effect.&lt;/p&gt; &lt;p&gt;If you want to create a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must create or update the stack directly from the template using the &lt;a&gt;CreateStack&lt;/a&gt; or &lt;a&gt;UpdateStack&lt;/a&gt; action, and specifying this capability.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about macros, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation macros to perform custom processing on templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with if you execute this change set, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource type that you&#39;re updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for condition keys in IAM policies for CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling access with Identity and Access Management&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes when executing the change set. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least permission.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.&lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param notificationARNs The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS) topics that CloudFormation associates with the stack. To remove all associated notification topics, specify an empty list. (optional)
     * @param tags Key-value pairs to associate with this stack. CloudFormation also propagates these tags to resources in the stack. You can specify a maximum of 50 tags. (optional)
     * @param clientToken A unique identifier for this &lt;code&gt;CreateChangeSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create another change set with the same name. You might retry &lt;code&gt;CreateChangeSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param description A description to help you identify this change set. (optional)
     * @param changeSetType &lt;p&gt;The type of change set operation. To create a change set for a new stack, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt;. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you create a change set for a new stack, CloudFormation creates a stack with a unique stack ID, but no template or resources. The stack will be in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#d0e11995\&quot;&gt;REVIEW_IN_PROGRESS&lt;/a&gt; state until you execute the change set.&lt;/p&gt; &lt;p&gt;By default, CloudFormation specifies &lt;code&gt;UPDATE&lt;/code&gt;. You can&#39;t use the &lt;code&gt;UPDATE&lt;/code&gt; type to create a change set for a new stack or the &lt;code&gt;CREATE&lt;/code&gt; type to create a change set for an existing stack.&lt;/p&gt; (optional)
     * @param resourcesToImport The resources to import into your stack. (optional)
     * @param includeNestedStacks Creates a change set for the all nested stacks specified in the template. The default behavior of this action is set to &lt;code&gt;False&lt;/code&gt;. To include nested sets in a change set, specify &lt;code&gt;True&lt;/code&gt;. (optional)
     * @param onStackFailure &lt;p&gt;Determines what action will be taken if stack creation fails. If this parameter is specified, the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation must not be specified. This must be one of these values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETE&lt;/code&gt; - Deletes the change set if the stack creation fails. This is only valid when the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter is set to &lt;code&gt;CREATE&lt;/code&gt;. If the deletion of the stack fails, the status of the stack is &lt;code&gt;DELETE_FAILED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DO_NOTHING&lt;/code&gt; - if the stack creation fails, do nothing. This is equivalent to specifying &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ROLLBACK&lt;/code&gt; - if the stack creation fails, roll back the stack. This is equivalent to specifying &lt;code&gt;false&lt;/code&gt; for the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For nested stacks, when the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter is set to &lt;code&gt;DELETE&lt;/code&gt; for the change set for the parent stack, any failure in a child stack will cause the parent stack creation to fail and all stacks to be deleted.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreateChangeSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateChangeSetOutput> gETCreateChangeSetWithHttpInfo(String stackName, String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, List<String> notificationARNs, List<Tag> tags, String clientToken, String description, String changeSetType, List<ResourceToImport> resourcesToImport, Boolean includeNestedStacks, String onStackFailure) throws ApiException {
        okhttp3.Call localVarCall = gETCreateChangeSetValidateBeforeCall(stackName, changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, usePreviousTemplate, parameters, capabilities, resourceTypes, roleARN, rollbackConfiguration, notificationARNs, tags, clientToken, description, changeSetType, resourcesToImport, includeNestedStacks, onStackFailure, null);
        Type localVarReturnType = new TypeToken<CreateChangeSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a list of changes that will be applied to a stack so that you can review the changes before executing them. You can create a change set for a stack that doesn&#39;t exist or an existing stack. If you create a change set for a stack that doesn&#39;t exist, the change set shows all of the resources that CloudFormation will create. If you create a change set for an existing stack, CloudFormation compares the stack&#39;s information with the information that you submit in the change set and lists the differences. Use change sets to understand which resources CloudFormation will create or change, and how it will change resources in an existing stack, before you create or update a stack.&lt;/p&gt; &lt;p&gt;To create a change set for a stack that doesn&#39;t exist, for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. After the &lt;code&gt;CreateChangeSet&lt;/code&gt; call successfully completes, CloudFormation starts creating the change set. To check the status of the change set or to review it, use the &lt;a&gt;DescribeChangeSet&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;When you are satisfied with the changes the change set will make, execute the change set by using the &lt;a&gt;ExecuteChangeSet&lt;/a&gt; action. CloudFormation doesn&#39;t make changes until you execute the change set.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, set &lt;code&gt;IncludeNestedStacks&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param stackName The name or the unique ID of the stack for which you are creating a change set. CloudFormation generates the change set by comparing this stack&#39;s information with the information that you submit, such as a modified template or different parameter input values. (required)
     * @param changeSetName &lt;p&gt;The name of the change set. The name must be unique among all change sets that are associated with the specified stack.&lt;/p&gt; &lt;p&gt;A change set name can contain only alphanumeric, case sensitive characters, and hyphens. It must start with an alphabetical character and can&#39;t exceed 128 characters.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;A structure that contains the body of the revised template, with a minimum length of 1 byte and a maximum length of 51,200 bytes. CloudFormation generates the change set by comparing this template with the template of the stack that you specified.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the revised template. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. CloudFormation generates the change set by comparing this template with the stack that you specified.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param usePreviousTemplate Whether to reuse the template that&#39;s associated with the stack to create the change set. (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the change set. For more information, see the &lt;a&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM resources in CloudFormation templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This capacity doesn&#39;t apply to creating change sets, and specifying it when creating change sets has no effect.&lt;/p&gt; &lt;p&gt;If you want to create a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must create or update the stack directly from the template using the &lt;a&gt;CreateStack&lt;/a&gt; or &lt;a&gt;UpdateStack&lt;/a&gt; action, and specifying this capability.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information about macros, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation macros to perform custom processing on templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with if you execute this change set, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource type that you&#39;re updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for condition keys in IAM policies for CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling access with Identity and Access Management&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes when executing the change set. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least permission.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.&lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param notificationARNs The Amazon Resource Names (ARNs) of Amazon Simple Notification Service (Amazon SNS) topics that CloudFormation associates with the stack. To remove all associated notification topics, specify an empty list. (optional)
     * @param tags Key-value pairs to associate with this stack. CloudFormation also propagates these tags to resources in the stack. You can specify a maximum of 50 tags. (optional)
     * @param clientToken A unique identifier for this &lt;code&gt;CreateChangeSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create another change set with the same name. You might retry &lt;code&gt;CreateChangeSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param description A description to help you identify this change set. (optional)
     * @param changeSetType &lt;p&gt;The type of change set operation. To create a change set for a new stack, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt;. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you create a change set for a new stack, CloudFormation creates a stack with a unique stack ID, but no template or resources. The stack will be in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-describing-stacks.html#d0e11995\&quot;&gt;REVIEW_IN_PROGRESS&lt;/a&gt; state until you execute the change set.&lt;/p&gt; &lt;p&gt;By default, CloudFormation specifies &lt;code&gt;UPDATE&lt;/code&gt;. You can&#39;t use the &lt;code&gt;UPDATE&lt;/code&gt; type to create a change set for a new stack or the &lt;code&gt;CREATE&lt;/code&gt; type to create a change set for an existing stack.&lt;/p&gt; (optional)
     * @param resourcesToImport The resources to import into your stack. (optional)
     * @param includeNestedStacks Creates a change set for the all nested stacks specified in the template. The default behavior of this action is set to &lt;code&gt;False&lt;/code&gt;. To include nested sets in a change set, specify &lt;code&gt;True&lt;/code&gt;. (optional)
     * @param onStackFailure &lt;p&gt;Determines what action will be taken if stack creation fails. If this parameter is specified, the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation must not be specified. This must be one of these values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETE&lt;/code&gt; - Deletes the change set if the stack creation fails. This is only valid when the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter is set to &lt;code&gt;CREATE&lt;/code&gt;. If the deletion of the stack fails, the status of the stack is &lt;code&gt;DELETE_FAILED&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DO_NOTHING&lt;/code&gt; - if the stack creation fails, do nothing. This is equivalent to specifying &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ROLLBACK&lt;/code&gt; - if the stack creation fails, roll back the stack. This is equivalent to specifying &lt;code&gt;false&lt;/code&gt; for the &lt;code&gt;DisableRollback&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ExecuteChangeSet.html\&quot;&gt;ExecuteChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For nested stacks, when the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter is set to &lt;code&gt;DELETE&lt;/code&gt; for the change set for the parent stack, any failure in a child stack will cause the parent stack creation to fail and all stacks to be deleted.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateChangeSetAsync(String stackName, String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, List<String> notificationARNs, List<Tag> tags, String clientToken, String description, String changeSetType, List<ResourceToImport> resourcesToImport, Boolean includeNestedStacks, String onStackFailure, final ApiCallback<CreateChangeSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateChangeSetValidateBeforeCall(stackName, changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, usePreviousTemplate, parameters, capabilities, resourceTypes, roleARN, rollbackConfiguration, notificationARNs, tags, clientToken, description, changeSetType, resourcesToImport, includeNestedStacks, onStackFailure, _callback);
        Type localVarReturnType = new TypeToken<CreateChangeSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateStack
     * @param stackName &lt;p&gt;The name that&#39;s associated with the stack. The name must be unique in the Region in which you are creating the stack.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A stack name can contain only alphanumeric characters (case sensitive) and hyphens. It must start with an alphabetical character and can&#39;t be longer than 128 characters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the &lt;code&gt;TemplateBody&lt;/code&gt; or the &lt;code&gt;TemplateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the &lt;code&gt;TemplateBody&lt;/code&gt; or the &lt;code&gt;TemplateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the stack. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html\&quot;&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param disableRollback &lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to disable rollback of the stack if stack creation failed. You can specify either &lt;code&gt;DisableRollback&lt;/code&gt; or &lt;code&gt;OnFailure&lt;/code&gt;, but not both.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param timeoutInMinutes The amount of time that can pass before the stack status becomes CREATE_FAILED; if &lt;code&gt;DisableRollback&lt;/code&gt; is not set or is set to &lt;code&gt;false&lt;/code&gt;, the stack will be rolled back. (optional)
     * @param notificationARNs The Amazon Simple Notification Service (Amazon SNS) topic ARNs to publish stack related events. You can find your Amazon SNS topic ARNs using the Amazon SNS console or your Command Line Interface (CLI). (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;p&gt;If you want to create a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must create the stack directly from the template using this capability.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You should only create stacks directly from a stack template that contains macros if you know what processing the macro performs.&lt;/p&gt; &lt;p&gt;Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation macros to perform custom processing on templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with for this create stack action, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;. Use the following syntax to describe template resource types: &lt;code&gt;AWS::*&lt;/code&gt; (for all Amazon Web Services resources), &lt;code&gt;Custom::*&lt;/code&gt; (for all custom resources), &lt;code&gt;Custom::&lt;i&gt;logical_ID&lt;/i&gt; &lt;/code&gt; (for a specific custom resource), &lt;code&gt;AWS::&lt;i&gt;service_name&lt;/i&gt;::*&lt;/code&gt; (for all resources of a particular Amazon Web Services service), and &lt;code&gt;AWS::&lt;i&gt;service_name&lt;/i&gt;::&lt;i&gt;resource_logical_ID&lt;/i&gt; &lt;/code&gt; (for a specific Amazon Web Services resource).&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource that you&#39;re creating, the stack creation fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling Access with Identity and Access Management&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to create the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least privilege.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param onFailure &lt;p&gt;Determines what action will be taken if stack creation fails. This must be one of: &lt;code&gt;DO_NOTHING&lt;/code&gt;, &lt;code&gt;ROLLBACK&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt;. You can specify either &lt;code&gt;OnFailure&lt;/code&gt; or &lt;code&gt;DisableRollback&lt;/code&gt;, but not both.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;ROLLBACK&lt;/code&gt; &lt;/p&gt; (optional)
     * @param stackPolicyBody Structure containing the stack policy body. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html\&quot;&gt; Prevent Updates to Stack Resources&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param stackPolicyURL Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param tags Key-value pairs to associate with this stack. CloudFormation also propagates these tags to the resources created in the stack. A maximum number of 50 tags can be specified. (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;CreateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create a stack with the same name. You might retry &lt;code&gt;CreateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enableTerminationProtection &lt;p&gt;Whether to enable termination protection on the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;. Termination protection is deactivated on stacks by default.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateStackCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters, Boolean disableRollback, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, Integer timeoutInMinutes, List<String> notificationARNs, List<Capability> capabilities, List<String> resourceTypes, String roleARN, String onFailure, String stackPolicyBody, String stackPolicyURL, List<Tag> tags, String clientRequestToken, Boolean enableTerminationProtection, Boolean retainExceptOnCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (templateBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateBody", templateBody));
        }

        if (templateURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateURL", templateURL));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (disableRollback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DisableRollback", disableRollback));
        }

        if (rollbackConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RollbackConfiguration", rollbackConfiguration));
        }

        if (timeoutInMinutes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TimeoutInMinutes", timeoutInMinutes));
        }

        if (notificationARNs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "NotificationARNs", notificationARNs));
        }

        if (capabilities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Capabilities", capabilities));
        }

        if (resourceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ResourceTypes", resourceTypes));
        }

        if (roleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleARN", roleARN));
        }

        if (onFailure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OnFailure", onFailure));
        }

        if (stackPolicyBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackPolicyBody", stackPolicyBody));
        }

        if (stackPolicyURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackPolicyURL", stackPolicyURL));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (enableTerminationProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnableTerminationProtection", enableTerminationProtection));
        }

        if (retainExceptOnCreate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RetainExceptOnCreate", retainExceptOnCreate));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateStackValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters, Boolean disableRollback, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, Integer timeoutInMinutes, List<String> notificationARNs, List<Capability> capabilities, List<String> resourceTypes, String roleARN, String onFailure, String stackPolicyBody, String stackPolicyURL, List<Tag> tags, String clientRequestToken, Boolean enableTerminationProtection, Boolean retainExceptOnCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETCreateStack(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateStack(Async)");
        }

        return gETCreateStackCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, parameters, disableRollback, rollbackConfiguration, timeoutInMinutes, notificationARNs, capabilities, resourceTypes, roleARN, onFailure, stackPolicyBody, stackPolicyURL, tags, clientRequestToken, enableTerminationProtection, retainExceptOnCreate, _callback);

    }

    /**
     * 
     * Creates a stack as specified in the template. After the call completes successfully, the stack creation starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.
     * @param stackName &lt;p&gt;The name that&#39;s associated with the stack. The name must be unique in the Region in which you are creating the stack.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A stack name can contain only alphanumeric characters (case sensitive) and hyphens. It must start with an alphabetical character and can&#39;t be longer than 128 characters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the &lt;code&gt;TemplateBody&lt;/code&gt; or the &lt;code&gt;TemplateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the &lt;code&gt;TemplateBody&lt;/code&gt; or the &lt;code&gt;TemplateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the stack. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html\&quot;&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param disableRollback &lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to disable rollback of the stack if stack creation failed. You can specify either &lt;code&gt;DisableRollback&lt;/code&gt; or &lt;code&gt;OnFailure&lt;/code&gt;, but not both.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param timeoutInMinutes The amount of time that can pass before the stack status becomes CREATE_FAILED; if &lt;code&gt;DisableRollback&lt;/code&gt; is not set or is set to &lt;code&gt;false&lt;/code&gt;, the stack will be rolled back. (optional)
     * @param notificationARNs The Amazon Simple Notification Service (Amazon SNS) topic ARNs to publish stack related events. You can find your Amazon SNS topic ARNs using the Amazon SNS console or your Command Line Interface (CLI). (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;p&gt;If you want to create a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must create the stack directly from the template using this capability.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You should only create stacks directly from a stack template that contains macros if you know what processing the macro performs.&lt;/p&gt; &lt;p&gt;Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation macros to perform custom processing on templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with for this create stack action, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;. Use the following syntax to describe template resource types: &lt;code&gt;AWS::*&lt;/code&gt; (for all Amazon Web Services resources), &lt;code&gt;Custom::*&lt;/code&gt; (for all custom resources), &lt;code&gt;Custom::&lt;i&gt;logical_ID&lt;/i&gt; &lt;/code&gt; (for a specific custom resource), &lt;code&gt;AWS::&lt;i&gt;service_name&lt;/i&gt;::*&lt;/code&gt; (for all resources of a particular Amazon Web Services service), and &lt;code&gt;AWS::&lt;i&gt;service_name&lt;/i&gt;::&lt;i&gt;resource_logical_ID&lt;/i&gt; &lt;/code&gt; (for a specific Amazon Web Services resource).&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource that you&#39;re creating, the stack creation fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling Access with Identity and Access Management&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to create the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least privilege.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param onFailure &lt;p&gt;Determines what action will be taken if stack creation fails. This must be one of: &lt;code&gt;DO_NOTHING&lt;/code&gt;, &lt;code&gt;ROLLBACK&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt;. You can specify either &lt;code&gt;OnFailure&lt;/code&gt; or &lt;code&gt;DisableRollback&lt;/code&gt;, but not both.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;ROLLBACK&lt;/code&gt; &lt;/p&gt; (optional)
     * @param stackPolicyBody Structure containing the stack policy body. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html\&quot;&gt; Prevent Updates to Stack Resources&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param stackPolicyURL Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param tags Key-value pairs to associate with this stack. CloudFormation also propagates these tags to the resources created in the stack. A maximum number of 50 tags can be specified. (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;CreateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create a stack with the same name. You might retry &lt;code&gt;CreateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enableTerminationProtection &lt;p&gt;Whether to enable termination protection on the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;. Termination protection is deactivated on stacks by default.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @return CreateStackOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStackOutput gETCreateStack(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters, Boolean disableRollback, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, Integer timeoutInMinutes, List<String> notificationARNs, List<Capability> capabilities, List<String> resourceTypes, String roleARN, String onFailure, String stackPolicyBody, String stackPolicyURL, List<Tag> tags, String clientRequestToken, Boolean enableTerminationProtection, Boolean retainExceptOnCreate) throws ApiException {
        ApiResponse<CreateStackOutput> localVarResp = gETCreateStackWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, parameters, disableRollback, rollbackConfiguration, timeoutInMinutes, notificationARNs, capabilities, resourceTypes, roleARN, onFailure, stackPolicyBody, stackPolicyURL, tags, clientRequestToken, enableTerminationProtection, retainExceptOnCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a stack as specified in the template. After the call completes successfully, the stack creation starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.
     * @param stackName &lt;p&gt;The name that&#39;s associated with the stack. The name must be unique in the Region in which you are creating the stack.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A stack name can contain only alphanumeric characters (case sensitive) and hyphens. It must start with an alphabetical character and can&#39;t be longer than 128 characters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the &lt;code&gt;TemplateBody&lt;/code&gt; or the &lt;code&gt;TemplateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the &lt;code&gt;TemplateBody&lt;/code&gt; or the &lt;code&gt;TemplateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the stack. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html\&quot;&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param disableRollback &lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to disable rollback of the stack if stack creation failed. You can specify either &lt;code&gt;DisableRollback&lt;/code&gt; or &lt;code&gt;OnFailure&lt;/code&gt;, but not both.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param timeoutInMinutes The amount of time that can pass before the stack status becomes CREATE_FAILED; if &lt;code&gt;DisableRollback&lt;/code&gt; is not set or is set to &lt;code&gt;false&lt;/code&gt;, the stack will be rolled back. (optional)
     * @param notificationARNs The Amazon Simple Notification Service (Amazon SNS) topic ARNs to publish stack related events. You can find your Amazon SNS topic ARNs using the Amazon SNS console or your Command Line Interface (CLI). (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;p&gt;If you want to create a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must create the stack directly from the template using this capability.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You should only create stacks directly from a stack template that contains macros if you know what processing the macro performs.&lt;/p&gt; &lt;p&gt;Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation macros to perform custom processing on templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with for this create stack action, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;. Use the following syntax to describe template resource types: &lt;code&gt;AWS::*&lt;/code&gt; (for all Amazon Web Services resources), &lt;code&gt;Custom::*&lt;/code&gt; (for all custom resources), &lt;code&gt;Custom::&lt;i&gt;logical_ID&lt;/i&gt; &lt;/code&gt; (for a specific custom resource), &lt;code&gt;AWS::&lt;i&gt;service_name&lt;/i&gt;::*&lt;/code&gt; (for all resources of a particular Amazon Web Services service), and &lt;code&gt;AWS::&lt;i&gt;service_name&lt;/i&gt;::&lt;i&gt;resource_logical_ID&lt;/i&gt; &lt;/code&gt; (for a specific Amazon Web Services resource).&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource that you&#39;re creating, the stack creation fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling Access with Identity and Access Management&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to create the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least privilege.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param onFailure &lt;p&gt;Determines what action will be taken if stack creation fails. This must be one of: &lt;code&gt;DO_NOTHING&lt;/code&gt;, &lt;code&gt;ROLLBACK&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt;. You can specify either &lt;code&gt;OnFailure&lt;/code&gt; or &lt;code&gt;DisableRollback&lt;/code&gt;, but not both.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;ROLLBACK&lt;/code&gt; &lt;/p&gt; (optional)
     * @param stackPolicyBody Structure containing the stack policy body. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html\&quot;&gt; Prevent Updates to Stack Resources&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param stackPolicyURL Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param tags Key-value pairs to associate with this stack. CloudFormation also propagates these tags to the resources created in the stack. A maximum number of 50 tags can be specified. (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;CreateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create a stack with the same name. You might retry &lt;code&gt;CreateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enableTerminationProtection &lt;p&gt;Whether to enable termination protection on the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;. Termination protection is deactivated on stacks by default.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @return ApiResponse&lt;CreateStackOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStackOutput> gETCreateStackWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters, Boolean disableRollback, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, Integer timeoutInMinutes, List<String> notificationARNs, List<Capability> capabilities, List<String> resourceTypes, String roleARN, String onFailure, String stackPolicyBody, String stackPolicyURL, List<Tag> tags, String clientRequestToken, Boolean enableTerminationProtection, Boolean retainExceptOnCreate) throws ApiException {
        okhttp3.Call localVarCall = gETCreateStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, parameters, disableRollback, rollbackConfiguration, timeoutInMinutes, notificationARNs, capabilities, resourceTypes, roleARN, onFailure, stackPolicyBody, stackPolicyURL, tags, clientRequestToken, enableTerminationProtection, retainExceptOnCreate, null);
        Type localVarReturnType = new TypeToken<CreateStackOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a stack as specified in the template. After the call completes successfully, the stack creation starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.
     * @param stackName &lt;p&gt;The name that&#39;s associated with the stack. The name must be unique in the Region in which you are creating the stack.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A stack name can contain only alphanumeric characters (case sensitive) and hyphens. It must start with an alphabetical character and can&#39;t be longer than 128 characters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the &lt;code&gt;TemplateBody&lt;/code&gt; or the &lt;code&gt;TemplateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the &lt;code&gt;TemplateBody&lt;/code&gt; or the &lt;code&gt;TemplateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the stack. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html\&quot;&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param disableRollback &lt;p&gt;Set to &lt;code&gt;true&lt;/code&gt; to disable rollback of the stack if stack creation failed. You can specify either &lt;code&gt;DisableRollback&lt;/code&gt; or &lt;code&gt;OnFailure&lt;/code&gt;, but not both.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param timeoutInMinutes The amount of time that can pass before the stack status becomes CREATE_FAILED; if &lt;code&gt;DisableRollback&lt;/code&gt; is not set or is set to &lt;code&gt;false&lt;/code&gt;, the stack will be rolled back. (optional)
     * @param notificationARNs The Amazon Simple Notification Service (Amazon SNS) topic ARNs to publish stack related events. You can find your Amazon SNS topic ARNs using the Amazon SNS console or your Command Line Interface (CLI). (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to create the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually creating the stack. If your stack template contains one or more macros, and you choose to create a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;p&gt;If you want to create a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must create the stack directly from the template using this capability.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You should only create stacks directly from a stack template that contains macros if you know what processing the macro performs.&lt;/p&gt; &lt;p&gt;Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation macros to perform custom processing on templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with for this create stack action, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;. Use the following syntax to describe template resource types: &lt;code&gt;AWS::*&lt;/code&gt; (for all Amazon Web Services resources), &lt;code&gt;Custom::*&lt;/code&gt; (for all custom resources), &lt;code&gt;Custom::&lt;i&gt;logical_ID&lt;/i&gt; &lt;/code&gt; (for a specific custom resource), &lt;code&gt;AWS::&lt;i&gt;service_name&lt;/i&gt;::*&lt;/code&gt; (for all resources of a particular Amazon Web Services service), and &lt;code&gt;AWS::&lt;i&gt;service_name&lt;/i&gt;::&lt;i&gt;resource_logical_ID&lt;/i&gt; &lt;/code&gt; (for a specific Amazon Web Services resource).&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource that you&#39;re creating, the stack creation fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling Access with Identity and Access Management&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to create the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least privilege.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param onFailure &lt;p&gt;Determines what action will be taken if stack creation fails. This must be one of: &lt;code&gt;DO_NOTHING&lt;/code&gt;, &lt;code&gt;ROLLBACK&lt;/code&gt;, or &lt;code&gt;DELETE&lt;/code&gt;. You can specify either &lt;code&gt;OnFailure&lt;/code&gt; or &lt;code&gt;DisableRollback&lt;/code&gt;, but not both.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;ROLLBACK&lt;/code&gt; &lt;/p&gt; (optional)
     * @param stackPolicyBody Structure containing the stack policy body. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html\&quot;&gt; Prevent Updates to Stack Resources&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param stackPolicyURL Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param tags Key-value pairs to associate with this stack. CloudFormation also propagates these tags to the resources created in the stack. A maximum number of 50 tags can be specified. (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;CreateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create a stack with the same name. You might retry &lt;code&gt;CreateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param enableTerminationProtection &lt;p&gt;Whether to enable termination protection on the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;. Termination protection is deactivated on stacks by default.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateStackAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters, Boolean disableRollback, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, Integer timeoutInMinutes, List<String> notificationARNs, List<Capability> capabilities, List<String> resourceTypes, String roleARN, String onFailure, String stackPolicyBody, String stackPolicyURL, List<Tag> tags, String clientRequestToken, Boolean enableTerminationProtection, Boolean retainExceptOnCreate, final ApiCallback<CreateStackOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, parameters, disableRollback, rollbackConfiguration, timeoutInMinutes, notificationARNs, capabilities, resourceTypes, roleARN, onFailure, stackPolicyBody, stackPolicyURL, tags, clientRequestToken, enableTerminationProtection, retainExceptOnCreate, _callback);
        Type localVarReturnType = new TypeToken<CreateStackOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateStackInstances
     * @param stackSetName The name or unique ID of the stack set that you want to create stack instances from. (required)
     * @param regions The names of one or more Amazon Web Services Regions where you want to create stack instances using the specified Amazon Web Services accounts. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of one or more Amazon Web Services accounts that you want to create stack instances in the specified Region(s) for.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts for which to create stack instances in the specified Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param parameterOverrides &lt;p&gt;A list of stack set parameters whose values you want to override in the selected stack instances.&lt;/p&gt; &lt;p&gt;Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To override the current value for a parameter, include the parameter and specify its value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave an overridden parameter set to its present value, include the parameter and specify &lt;code&gt;UsePreviousValue&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;. (You can&#39;t specify both a value and set &lt;code&gt;UsePreviousValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don&#39;t include the parameter in the list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave all parameters set to their present values, don&#39;t specify this property at all.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;During stack set updates, any parameter values overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only override the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateStackInstancesCall(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateStackInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (accounts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Accounts", accounts));
        }

        if (deploymentTargets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeploymentTargets", deploymentTargets));
        }

        if (regions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Regions", regions));
        }

        if (parameterOverrides != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ParameterOverrides", parameterOverrides));
        }

        if (operationPreferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationPreferences", operationPreferences));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateStackInstancesValidateBeforeCall(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETCreateStackInstances(Async)");
        }

        // verify the required parameter 'regions' is set
        if (regions == null) {
            throw new ApiException("Missing the required parameter 'regions' when calling gETCreateStackInstances(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateStackInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateStackInstances(Async)");
        }

        return gETCreateStackInstancesCall(stackSetName, regions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, parameterOverrides, operationPreferences, operationId, callAs, _callback);

    }

    /**
     * 
     * Creates stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region. You must specify at least one value for either &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, and you must specify at least one value for &lt;code&gt;Regions&lt;/code&gt;.
     * @param stackSetName The name or unique ID of the stack set that you want to create stack instances from. (required)
     * @param regions The names of one or more Amazon Web Services Regions where you want to create stack instances using the specified Amazon Web Services accounts. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of one or more Amazon Web Services accounts that you want to create stack instances in the specified Region(s) for.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts for which to create stack instances in the specified Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param parameterOverrides &lt;p&gt;A list of stack set parameters whose values you want to override in the selected stack instances.&lt;/p&gt; &lt;p&gt;Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To override the current value for a parameter, include the parameter and specify its value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave an overridden parameter set to its present value, include the parameter and specify &lt;code&gt;UsePreviousValue&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;. (You can&#39;t specify both a value and set &lt;code&gt;UsePreviousValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don&#39;t include the parameter in the list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave all parameters set to their present values, don&#39;t specify this property at all.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;During stack set updates, any parameter values overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only override the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return CreateStackInstancesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStackInstancesOutput gETCreateStackInstances(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        ApiResponse<CreateStackInstancesOutput> localVarResp = gETCreateStackInstancesWithHttpInfo(stackSetName, regions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, parameterOverrides, operationPreferences, operationId, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region. You must specify at least one value for either &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, and you must specify at least one value for &lt;code&gt;Regions&lt;/code&gt;.
     * @param stackSetName The name or unique ID of the stack set that you want to create stack instances from. (required)
     * @param regions The names of one or more Amazon Web Services Regions where you want to create stack instances using the specified Amazon Web Services accounts. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of one or more Amazon Web Services accounts that you want to create stack instances in the specified Region(s) for.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts for which to create stack instances in the specified Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param parameterOverrides &lt;p&gt;A list of stack set parameters whose values you want to override in the selected stack instances.&lt;/p&gt; &lt;p&gt;Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To override the current value for a parameter, include the parameter and specify its value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave an overridden parameter set to its present value, include the parameter and specify &lt;code&gt;UsePreviousValue&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;. (You can&#39;t specify both a value and set &lt;code&gt;UsePreviousValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don&#39;t include the parameter in the list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave all parameters set to their present values, don&#39;t specify this property at all.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;During stack set updates, any parameter values overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only override the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;CreateStackInstancesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStackInstancesOutput> gETCreateStackInstancesWithHttpInfo(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETCreateStackInstancesValidateBeforeCall(stackSetName, regions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, parameterOverrides, operationPreferences, operationId, callAs, null);
        Type localVarReturnType = new TypeToken<CreateStackInstancesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region. You must specify at least one value for either &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, and you must specify at least one value for &lt;code&gt;Regions&lt;/code&gt;.
     * @param stackSetName The name or unique ID of the stack set that you want to create stack instances from. (required)
     * @param regions The names of one or more Amazon Web Services Regions where you want to create stack instances using the specified Amazon Web Services accounts. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of one or more Amazon Web Services accounts that you want to create stack instances in the specified Region(s) for.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts for which to create stack instances in the specified Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param parameterOverrides &lt;p&gt;A list of stack set parameters whose values you want to override in the selected stack instances.&lt;/p&gt; &lt;p&gt;Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To override the current value for a parameter, include the parameter and specify its value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave an overridden parameter set to its present value, include the parameter and specify &lt;code&gt;UsePreviousValue&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;. (You can&#39;t specify both a value and set &lt;code&gt;UsePreviousValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don&#39;t include the parameter in the list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave all parameters set to their present values, don&#39;t specify this property at all.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;During stack set updates, any parameter values overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only override the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateStackInstancesAsync(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback<CreateStackInstancesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateStackInstancesValidateBeforeCall(stackSetName, regions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, parameterOverrides, operationPreferences, operationId, callAs, _callback);
        Type localVarReturnType = new TypeToken<CreateStackInstancesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateStackSet
     * @param stackSetName &lt;p&gt;The name to associate with the stack set. The name must be unique in the Region where you create your stack set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can&#39;t be longer than 128 characters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A description of the stack set. You can use the description to identify the stack set&#39;s purpose or other important information. (optional)
     * @param templateBody &lt;p&gt;The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.&lt;/p&gt; (optional)
     * @param stackId The stack ID you are importing into a new stack set. Specify the Amazon Resource Name (ARN) of the stack. (optional)
     * @param parameters The input parameters for the stack set template. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for CloudFormation to create the stack set and related stack instances.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stack sets, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some templates reference macros. If your stack set template references one or more macros, you must create the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To create the stack set directly, you must acknowledge this capability. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Stack sets with service-managed permissions don&#39;t currently support the use of macros in templates. (This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.&lt;/p&gt; &lt;p&gt;If you specify tags as part of a &lt;code&gt;CreateStackSet&lt;/code&gt; action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you don&#39;t, the entire &lt;code&gt;CreateStackSet&lt;/code&gt; action fails with an &lt;code&gt;access denied&lt;/code&gt; error, and the stack set is not created.&lt;/p&gt; (optional)
     * @param administrationRoleARN &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role to use to create this stack set.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/stacksets-prereqs.html\&quot;&gt;Prerequisites: Granting Permissions for Stack Set Operations&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param executionRoleName &lt;p&gt;The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, CloudFormation uses the &lt;code&gt;AWSCloudFormationStackSetExecutionRole&lt;/code&gt; role for the stack set operation.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.&lt;/p&gt; (optional)
     * @param permissionModel &lt;p&gt;Describes how the IAM roles required for stack set operations are created. By default, &lt;code&gt;SELF-MANAGED&lt;/code&gt; is specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;self-managed&lt;/code&gt; permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\&quot;&gt;Grant Self-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;service-managed&lt;/code&gt; permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html\&quot;&gt;Grant Service-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param autoDeployment Describes whether StackSets automatically deploys to Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if &lt;code&gt;PermissionModel&lt;/code&gt; is &lt;code&gt;SERVICE_MANAGED&lt;/code&gt;. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a stack set with service-managed permissions while signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a stack set with service-managed permissions while signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated admin in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Stack sets with service-managed permissions are created in the management account, including stack sets that are created by delegated administrators.&lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;CreateStackSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create another stack set with the same name. You might retry &lt;code&gt;CreateStackSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; (optional)
     * @param managedExecution Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CreatedButModifiedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateStackSetCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, String stackId, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, String administrationRoleARN, String executionRoleName, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String callAs, String clientRequestToken, GETCreateStackSetManagedExecutionParameter managedExecution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (templateBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateBody", templateBody));
        }

        if (templateURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateURL", templateURL));
        }

        if (stackId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackId", stackId));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (capabilities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Capabilities", capabilities));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (administrationRoleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AdministrationRoleARN", administrationRoleARN));
        }

        if (executionRoleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExecutionRoleName", executionRoleName));
        }

        if (permissionModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PermissionModel", permissionModel));
        }

        if (autoDeployment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoDeployment", autoDeployment));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (managedExecution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ManagedExecution", managedExecution));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateStackSetValidateBeforeCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, String stackId, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, String administrationRoleARN, String executionRoleName, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String callAs, String clientRequestToken, GETCreateStackSetManagedExecutionParameter managedExecution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETCreateStackSet(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateStackSet(Async)");
        }

        return gETCreateStackSetCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, templateBody, templateURL, stackId, parameters, capabilities, tags, administrationRoleARN, executionRoleName, permissionModel, autoDeployment, callAs, clientRequestToken, managedExecution, _callback);

    }

    /**
     * 
     * Creates a stack set.
     * @param stackSetName &lt;p&gt;The name to associate with the stack set. The name must be unique in the Region where you create your stack set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can&#39;t be longer than 128 characters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A description of the stack set. You can use the description to identify the stack set&#39;s purpose or other important information. (optional)
     * @param templateBody &lt;p&gt;The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.&lt;/p&gt; (optional)
     * @param stackId The stack ID you are importing into a new stack set. Specify the Amazon Resource Name (ARN) of the stack. (optional)
     * @param parameters The input parameters for the stack set template. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for CloudFormation to create the stack set and related stack instances.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stack sets, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some templates reference macros. If your stack set template references one or more macros, you must create the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To create the stack set directly, you must acknowledge this capability. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Stack sets with service-managed permissions don&#39;t currently support the use of macros in templates. (This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.&lt;/p&gt; &lt;p&gt;If you specify tags as part of a &lt;code&gt;CreateStackSet&lt;/code&gt; action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you don&#39;t, the entire &lt;code&gt;CreateStackSet&lt;/code&gt; action fails with an &lt;code&gt;access denied&lt;/code&gt; error, and the stack set is not created.&lt;/p&gt; (optional)
     * @param administrationRoleARN &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role to use to create this stack set.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/stacksets-prereqs.html\&quot;&gt;Prerequisites: Granting Permissions for Stack Set Operations&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param executionRoleName &lt;p&gt;The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, CloudFormation uses the &lt;code&gt;AWSCloudFormationStackSetExecutionRole&lt;/code&gt; role for the stack set operation.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.&lt;/p&gt; (optional)
     * @param permissionModel &lt;p&gt;Describes how the IAM roles required for stack set operations are created. By default, &lt;code&gt;SELF-MANAGED&lt;/code&gt; is specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;self-managed&lt;/code&gt; permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\&quot;&gt;Grant Self-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;service-managed&lt;/code&gt; permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html\&quot;&gt;Grant Service-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param autoDeployment Describes whether StackSets automatically deploys to Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if &lt;code&gt;PermissionModel&lt;/code&gt; is &lt;code&gt;SERVICE_MANAGED&lt;/code&gt;. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a stack set with service-managed permissions while signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a stack set with service-managed permissions while signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated admin in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Stack sets with service-managed permissions are created in the management account, including stack sets that are created by delegated administrators.&lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;CreateStackSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create another stack set with the same name. You might retry &lt;code&gt;CreateStackSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; (optional)
     * @param managedExecution Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations. (optional)
     * @return CreateStackSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CreatedButModifiedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStackSetOutput gETCreateStackSet(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, String stackId, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, String administrationRoleARN, String executionRoleName, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String callAs, String clientRequestToken, GETCreateStackSetManagedExecutionParameter managedExecution) throws ApiException {
        ApiResponse<CreateStackSetOutput> localVarResp = gETCreateStackSetWithHttpInfo(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, templateBody, templateURL, stackId, parameters, capabilities, tags, administrationRoleARN, executionRoleName, permissionModel, autoDeployment, callAs, clientRequestToken, managedExecution);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a stack set.
     * @param stackSetName &lt;p&gt;The name to associate with the stack set. The name must be unique in the Region where you create your stack set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can&#39;t be longer than 128 characters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A description of the stack set. You can use the description to identify the stack set&#39;s purpose or other important information. (optional)
     * @param templateBody &lt;p&gt;The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.&lt;/p&gt; (optional)
     * @param stackId The stack ID you are importing into a new stack set. Specify the Amazon Resource Name (ARN) of the stack. (optional)
     * @param parameters The input parameters for the stack set template. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for CloudFormation to create the stack set and related stack instances.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stack sets, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some templates reference macros. If your stack set template references one or more macros, you must create the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To create the stack set directly, you must acknowledge this capability. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Stack sets with service-managed permissions don&#39;t currently support the use of macros in templates. (This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.&lt;/p&gt; &lt;p&gt;If you specify tags as part of a &lt;code&gt;CreateStackSet&lt;/code&gt; action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you don&#39;t, the entire &lt;code&gt;CreateStackSet&lt;/code&gt; action fails with an &lt;code&gt;access denied&lt;/code&gt; error, and the stack set is not created.&lt;/p&gt; (optional)
     * @param administrationRoleARN &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role to use to create this stack set.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/stacksets-prereqs.html\&quot;&gt;Prerequisites: Granting Permissions for Stack Set Operations&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param executionRoleName &lt;p&gt;The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, CloudFormation uses the &lt;code&gt;AWSCloudFormationStackSetExecutionRole&lt;/code&gt; role for the stack set operation.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.&lt;/p&gt; (optional)
     * @param permissionModel &lt;p&gt;Describes how the IAM roles required for stack set operations are created. By default, &lt;code&gt;SELF-MANAGED&lt;/code&gt; is specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;self-managed&lt;/code&gt; permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\&quot;&gt;Grant Self-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;service-managed&lt;/code&gt; permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html\&quot;&gt;Grant Service-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param autoDeployment Describes whether StackSets automatically deploys to Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if &lt;code&gt;PermissionModel&lt;/code&gt; is &lt;code&gt;SERVICE_MANAGED&lt;/code&gt;. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a stack set with service-managed permissions while signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a stack set with service-managed permissions while signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated admin in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Stack sets with service-managed permissions are created in the management account, including stack sets that are created by delegated administrators.&lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;CreateStackSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create another stack set with the same name. You might retry &lt;code&gt;CreateStackSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; (optional)
     * @param managedExecution Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations. (optional)
     * @return ApiResponse&lt;CreateStackSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CreatedButModifiedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStackSetOutput> gETCreateStackSetWithHttpInfo(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, String stackId, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, String administrationRoleARN, String executionRoleName, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String callAs, String clientRequestToken, GETCreateStackSetManagedExecutionParameter managedExecution) throws ApiException {
        okhttp3.Call localVarCall = gETCreateStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, templateBody, templateURL, stackId, parameters, capabilities, tags, administrationRoleARN, executionRoleName, permissionModel, autoDeployment, callAs, clientRequestToken, managedExecution, null);
        Type localVarReturnType = new TypeToken<CreateStackSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a stack set.
     * @param stackSetName &lt;p&gt;The name to associate with the stack set. The name must be unique in the Region where you create your stack set.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A stack name can contain only alphanumeric characters (case-sensitive) and hyphens. It must start with an alphabetic character and can&#39;t be longer than 128 characters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A description of the stack set. You can use the description to identify the stack set&#39;s purpose or other important information. (optional)
     * @param templateBody &lt;p&gt;The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either the TemplateBody or the TemplateURL parameter, but not both.&lt;/p&gt; (optional)
     * @param stackId The stack ID you are importing into a new stack set. Specify the Amazon Resource Name (ARN) of the stack. (optional)
     * @param parameters The input parameters for the stack set template. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack set template contains certain capabilities in order for CloudFormation to create the stack set and related stack instances.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stack sets, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some templates reference macros. If your stack set template references one or more macros, you must create the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To create the stack set directly, you must acknowledge this capability. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Stack sets with service-managed permissions don&#39;t currently support the use of macros in templates. (This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. A maximum number of 50 tags can be specified.&lt;/p&gt; &lt;p&gt;If you specify tags as part of a &lt;code&gt;CreateStackSet&lt;/code&gt; action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you don&#39;t, the entire &lt;code&gt;CreateStackSet&lt;/code&gt; action fails with an &lt;code&gt;access denied&lt;/code&gt; error, and the stack set is not created.&lt;/p&gt; (optional)
     * @param administrationRoleARN &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role to use to create this stack set.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/stacksets-prereqs.html\&quot;&gt;Prerequisites: Granting Permissions for Stack Set Operations&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param executionRoleName &lt;p&gt;The name of the IAM execution role to use to create the stack set. If you do not specify an execution role, CloudFormation uses the &lt;code&gt;AWSCloudFormationStackSetExecutionRole&lt;/code&gt; role for the stack set operation.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.&lt;/p&gt; (optional)
     * @param permissionModel &lt;p&gt;Describes how the IAM roles required for stack set operations are created. By default, &lt;code&gt;SELF-MANAGED&lt;/code&gt; is specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;self-managed&lt;/code&gt; permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\&quot;&gt;Grant Self-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;service-managed&lt;/code&gt; permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html\&quot;&gt;Grant Service-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param autoDeployment Describes whether StackSets automatically deploys to Organizations accounts that are added to the target organization or organizational unit (OU). Specify only if &lt;code&gt;PermissionModel&lt;/code&gt; is &lt;code&gt;SERVICE_MANAGED&lt;/code&gt;. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a stack set with service-managed permissions while signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a stack set with service-managed permissions while signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated admin in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Stack sets with service-managed permissions are created in the management account, including stack sets that are created by delegated administrators.&lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;CreateStackSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to create another stack set with the same name. You might retry &lt;code&gt;CreateStackSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; (optional)
     * @param managedExecution Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CreatedButModifiedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateStackSetAsync(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, String stackId, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, String administrationRoleARN, String executionRoleName, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String callAs, String clientRequestToken, GETCreateStackSetManagedExecutionParameter managedExecution, final ApiCallback<CreateStackSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, templateBody, templateURL, stackId, parameters, capabilities, tags, administrationRoleARN, executionRoleName, permissionModel, autoDeployment, callAs, clientRequestToken, managedExecution, _callback);
        Type localVarReturnType = new TypeToken<CreateStackSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeactivateOrganizationsAccess
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeactivateOrganizationsAccessCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeactivateOrganizationsAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeactivateOrganizationsAccessValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeactivateOrganizationsAccess(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeactivateOrganizationsAccess(Async)");
        }

        return gETDeactivateOrganizationsAccessCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deactivates trusted access with Organizations. If trusted access is deactivated, the management account does not have permissions to create and manage service-managed StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeactivateOrganizationsAccess(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeactivateOrganizationsAccessWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deactivates trusted access with Organizations. If trusted access is deactivated, the management account does not have permissions to create and manage service-managed StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeactivateOrganizationsAccessWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeactivateOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deactivates trusted access with Organizations. If trusted access is deactivated, the management account does not have permissions to create and manage service-managed StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeactivateOrganizationsAccessAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeactivateOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeactivateType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param typeName &lt;p&gt;The type name of the extension, in this account and Region. If you specified a type name alias when enabling the extension, use the type name alias.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The extension type.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeactivateTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeName, String type, String arn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeactivateType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (arn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Arn", arn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeactivateTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeName, String type, String arn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeactivateType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeactivateType(Async)");
        }

        return gETDeactivateTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, typeName, type, arn, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deactivates a public extension that was previously activated in this account and Region.&lt;/p&gt; &lt;p&gt;Once deactivated, an extension can&#39;t be used in any CloudFormation operation. This includes stack update operations where the stack template includes the extension, even if no updates are being made to the extension. In addition, deactivated extensions aren&#39;t automatically updated if a new version of the extension is released.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param typeName &lt;p&gt;The type name of the extension, in this account and Region. If you specified a type name alias when enabling the extension, use the type name alias.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The extension type.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeactivateType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeName, String type, String arn) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeactivateTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, typeName, type, arn);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deactivates a public extension that was previously activated in this account and Region.&lt;/p&gt; &lt;p&gt;Once deactivated, an extension can&#39;t be used in any CloudFormation operation. This includes stack update operations where the stack template includes the extension, even if no updates are being made to the extension. In addition, deactivated extensions aren&#39;t automatically updated if a new version of the extension is released.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param typeName &lt;p&gt;The type name of the extension, in this account and Region. If you specified a type name alias when enabling the extension, use the type name alias.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The extension type.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeactivateTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeName, String type, String arn) throws ApiException {
        okhttp3.Call localVarCall = gETDeactivateTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, typeName, type, arn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deactivates a public extension that was previously activated in this account and Region.&lt;/p&gt; &lt;p&gt;Once deactivated, an extension can&#39;t be used in any CloudFormation operation. This includes stack update operations where the stack template includes the extension, even if no updates are being made to the extension. In addition, deactivated extensions aren&#39;t automatically updated if a new version of the extension is released.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param typeName &lt;p&gt;The type name of the extension, in this account and Region. If you specified a type name alias when enabling the extension, use the type name alias.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The extension type.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeactivateTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeName, String type, String arn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeactivateTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, typeName, type, arn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteChangeSet
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set to delete, specify the stack name or Amazon Resource Name (ARN) that&#39;s associated with it. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteChangeSetCall(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteChangeSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (changeSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChangeSetName", changeSetName));
        }

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteChangeSetValidateBeforeCall(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeSetName' is set
        if (changeSetName == null) {
            throw new ApiException("Missing the required parameter 'changeSetName' when calling gETDeleteChangeSet(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteChangeSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteChangeSet(Async)");
        }

        return gETDeleteChangeSetCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified change set. Deleting change sets ensures that no one executes the wrong change set.&lt;/p&gt; &lt;p&gt;If the call successfully completes, CloudFormation successfully deleted the change set.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;IncludeNestedStacks&lt;/code&gt; specifies &lt;code&gt;True&lt;/code&gt; during the creation of the nested change set, then &lt;code&gt;DeleteChangeSet&lt;/code&gt; will delete all change sets that belong to the stacks hierarchy and will also delete all change sets for nested stacks with the status of &lt;code&gt;REVIEW_IN_PROGRESS&lt;/code&gt;.&lt;/p&gt;
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set to delete, specify the stack name or Amazon Resource Name (ARN) that&#39;s associated with it. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteChangeSet(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteChangeSetWithHttpInfo(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified change set. Deleting change sets ensures that no one executes the wrong change set.&lt;/p&gt; &lt;p&gt;If the call successfully completes, CloudFormation successfully deleted the change set.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;IncludeNestedStacks&lt;/code&gt; specifies &lt;code&gt;True&lt;/code&gt; during the creation of the nested change set, then &lt;code&gt;DeleteChangeSet&lt;/code&gt; will delete all change sets that belong to the stacks hierarchy and will also delete all change sets for nested stacks with the status of &lt;code&gt;REVIEW_IN_PROGRESS&lt;/code&gt;.&lt;/p&gt;
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set to delete, specify the stack name or Amazon Resource Name (ARN) that&#39;s associated with it. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteChangeSetWithHttpInfo(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteChangeSetValidateBeforeCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified change set. Deleting change sets ensures that no one executes the wrong change set.&lt;/p&gt; &lt;p&gt;If the call successfully completes, CloudFormation successfully deleted the change set.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;IncludeNestedStacks&lt;/code&gt; specifies &lt;code&gt;True&lt;/code&gt; during the creation of the nested change set, then &lt;code&gt;DeleteChangeSet&lt;/code&gt; will delete all change sets that belong to the stacks hierarchy and will also delete all change sets for nested stacks with the status of &lt;code&gt;REVIEW_IN_PROGRESS&lt;/code&gt;.&lt;/p&gt;
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to delete. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set to delete, specify the stack name or Amazon Resource Name (ARN) that&#39;s associated with it. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteChangeSetAsync(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteChangeSetValidateBeforeCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteStack
     * @param stackName The name or the unique stack ID that&#39;s associated with the stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retainResources &lt;p&gt;For stacks in the &lt;code&gt;DELETE_FAILED&lt;/code&gt; state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, CloudFormation deletes the stack but doesn&#39;t delete the retained resources.&lt;/p&gt; &lt;p&gt;Retaining resources is useful when you can&#39;t delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to delete the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;DeleteStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to delete a stack with the same name. You might retry &lt;code&gt;DeleteStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteStackCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> retainResources, String roleARN, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (retainResources != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "RetainResources", retainResources));
        }

        if (roleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleARN", roleARN));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteStackValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> retainResources, String roleARN, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETDeleteStack(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteStack(Async)");
        }

        return gETDeleteStackCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainResources, roleARN, clientRequestToken, _callback);

    }

    /**
     * 
     * Deletes a specified stack. Once the call completes successfully, stack deletion starts. Deleted stacks don&#39;t show up in the &lt;a&gt;DescribeStacks&lt;/a&gt; operation if the deletion has been completed successfully.
     * @param stackName The name or the unique stack ID that&#39;s associated with the stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retainResources &lt;p&gt;For stacks in the &lt;code&gt;DELETE_FAILED&lt;/code&gt; state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, CloudFormation deletes the stack but doesn&#39;t delete the retained resources.&lt;/p&gt; &lt;p&gt;Retaining resources is useful when you can&#39;t delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to delete the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;DeleteStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to delete a stack with the same name. You might retry &lt;code&gt;DeleteStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteStack(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> retainResources, String roleARN, String clientRequestToken) throws ApiException {
        gETDeleteStackWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainResources, roleARN, clientRequestToken);
    }

    /**
     * 
     * Deletes a specified stack. Once the call completes successfully, stack deletion starts. Deleted stacks don&#39;t show up in the &lt;a&gt;DescribeStacks&lt;/a&gt; operation if the deletion has been completed successfully.
     * @param stackName The name or the unique stack ID that&#39;s associated with the stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retainResources &lt;p&gt;For stacks in the &lt;code&gt;DELETE_FAILED&lt;/code&gt; state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, CloudFormation deletes the stack but doesn&#39;t delete the retained resources.&lt;/p&gt; &lt;p&gt;Retaining resources is useful when you can&#39;t delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to delete the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;DeleteStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to delete a stack with the same name. You might retry &lt;code&gt;DeleteStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteStackWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> retainResources, String roleARN, String clientRequestToken) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainResources, roleARN, clientRequestToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified stack. Once the call completes successfully, stack deletion starts. Deleted stacks don&#39;t show up in the &lt;a&gt;DescribeStacks&lt;/a&gt; operation if the deletion has been completed successfully.
     * @param stackName The name or the unique stack ID that&#39;s associated with the stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retainResources &lt;p&gt;For stacks in the &lt;code&gt;DELETE_FAILED&lt;/code&gt; state, a list of resource logical IDs that are associated with the resources you want to retain. During deletion, CloudFormation deletes the stack but doesn&#39;t delete the retained resources.&lt;/p&gt; &lt;p&gt;Retaining resources is useful when you can&#39;t delete a resource, such as a non-empty S3 bucket, but you want to delete the stack.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to delete the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that&#39;s generated from your user credentials.&lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;DeleteStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to delete a stack with the same name. You might retry &lt;code&gt;DeleteStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events initiated by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteStackAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> retainResources, String roleARN, String clientRequestToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainResources, roleARN, clientRequestToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteStackInstances
     * @param stackSetName The name or unique ID of the stack set that you want to delete stack instances for. (required)
     * @param regions The Amazon Web Services Regions where you want to delete stack set instances. (required)
     * @param retainStacks &lt;p&gt;Removes the stack instances from the specified stack set, but doesn&#39;t delete the stacks. You can&#39;t reassociate a retained stack or add an existing, saved stack to a new stack set.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of the Amazon Web Services accounts that you want to delete stack instances for.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts from which to delete stack instances.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You can retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteStackInstancesCall(String stackSetName, List<String> regions, Boolean retainStacks, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteStackInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (accounts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Accounts", accounts));
        }

        if (deploymentTargets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeploymentTargets", deploymentTargets));
        }

        if (regions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Regions", regions));
        }

        if (operationPreferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationPreferences", operationPreferences));
        }

        if (retainStacks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RetainStacks", retainStacks));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteStackInstancesValidateBeforeCall(String stackSetName, List<String> regions, Boolean retainStacks, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETDeleteStackInstances(Async)");
        }

        // verify the required parameter 'regions' is set
        if (regions == null) {
            throw new ApiException("Missing the required parameter 'regions' when calling gETDeleteStackInstances(Async)");
        }

        // verify the required parameter 'retainStacks' is set
        if (retainStacks == null) {
            throw new ApiException("Missing the required parameter 'retainStacks' when calling gETDeleteStackInstances(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteStackInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteStackInstances(Async)");
        }

        return gETDeleteStackInstancesCall(stackSetName, regions, retainStacks, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, operationPreferences, operationId, callAs, _callback);

    }

    /**
     * 
     * Deletes stack instances for the specified accounts, in the specified Amazon Web Services Regions.
     * @param stackSetName The name or unique ID of the stack set that you want to delete stack instances for. (required)
     * @param regions The Amazon Web Services Regions where you want to delete stack set instances. (required)
     * @param retainStacks &lt;p&gt;Removes the stack instances from the specified stack set, but doesn&#39;t delete the stacks. You can&#39;t reassociate a retained stack or add an existing, saved stack to a new stack set.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of the Amazon Web Services accounts that you want to delete stack instances for.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts from which to delete stack instances.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You can retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return DeleteStackInstancesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStackInstancesOutput gETDeleteStackInstances(String stackSetName, List<String> regions, Boolean retainStacks, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        ApiResponse<DeleteStackInstancesOutput> localVarResp = gETDeleteStackInstancesWithHttpInfo(stackSetName, regions, retainStacks, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, operationPreferences, operationId, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes stack instances for the specified accounts, in the specified Amazon Web Services Regions.
     * @param stackSetName The name or unique ID of the stack set that you want to delete stack instances for. (required)
     * @param regions The Amazon Web Services Regions where you want to delete stack set instances. (required)
     * @param retainStacks &lt;p&gt;Removes the stack instances from the specified stack set, but doesn&#39;t delete the stacks. You can&#39;t reassociate a retained stack or add an existing, saved stack to a new stack set.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of the Amazon Web Services accounts that you want to delete stack instances for.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts from which to delete stack instances.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You can retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;DeleteStackInstancesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteStackInstancesOutput> gETDeleteStackInstancesWithHttpInfo(String stackSetName, List<String> regions, Boolean retainStacks, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteStackInstancesValidateBeforeCall(stackSetName, regions, retainStacks, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, operationPreferences, operationId, callAs, null);
        Type localVarReturnType = new TypeToken<DeleteStackInstancesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes stack instances for the specified accounts, in the specified Amazon Web Services Regions.
     * @param stackSetName The name or unique ID of the stack set that you want to delete stack instances for. (required)
     * @param regions The Amazon Web Services Regions where you want to delete stack set instances. (required)
     * @param retainStacks &lt;p&gt;Removes the stack instances from the specified stack set, but doesn&#39;t delete the stacks. You can&#39;t reassociate a retained stack or add an existing, saved stack to a new stack set.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of the Amazon Web Services accounts that you want to delete stack instances for.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts from which to delete stack instances.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You can retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteStackInstancesAsync(String stackSetName, List<String> regions, Boolean retainStacks, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback<DeleteStackInstancesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteStackInstancesValidateBeforeCall(stackSetName, regions, retainStacks, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, operationPreferences, operationId, callAs, _callback);
        Type localVarReturnType = new TypeToken<DeleteStackInstancesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteStackSet
     * @param stackSetName The name or unique ID of the stack set that you&#39;re deleting. You can obtain this value by running &lt;a&gt;ListStackSets&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteStackSetCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteStackSetValidateBeforeCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETDeleteStackSet(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteStackSet(Async)");
        }

        return gETDeleteStackSetCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);

    }

    /**
     * 
     * Deletes a stack set. Before you can delete a stack set, all its member stack instances must be deleted. For more information about how to complete this, see &lt;a&gt;DeleteStackInstances&lt;/a&gt;.
     * @param stackSetName The name or unique ID of the stack set that you&#39;re deleting. You can obtain this value by running &lt;a&gt;ListStackSets&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeleteStackSet(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeleteStackSetWithHttpInfo(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a stack set. Before you can delete a stack set, all its member stack instances must be deleted. For more information about how to complete this, see &lt;a&gt;DeleteStackInstances&lt;/a&gt;.
     * @param stackSetName The name or unique ID of the stack set that you&#39;re deleting. You can obtain this value by running &lt;a&gt;ListStackSets&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeleteStackSetWithHttpInfo(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a stack set. Before you can delete a stack set, all its member stack instances must be deleted. For more information about how to complete this, see &lt;a&gt;DeleteStackInstances&lt;/a&gt;.
     * @param stackSetName The name or unique ID of the stack set that you&#39;re deleting. You can obtain this value by running &lt;a&gt;ListStackSets&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteStackSetAsync(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeregisterType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeregisterTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeregisterType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (arn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Arn", arn));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (versionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionId", versionId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeregisterTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeregisterType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeregisterType(Async)");
        }

        return gETDeregisterTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Marks an extension or extension version as &lt;code&gt;DEPRECATED&lt;/code&gt; in the CloudFormation registry, removing it from active use. Deprecated extensions or extension versions cannot be used in CloudFormation operations.&lt;/p&gt; &lt;p&gt;To deregister an entire extension, you must individually deregister all active versions of that extension. If an extension has only a single active version, deregistering that version results in the extension itself being deregistered and marked as deprecated in the registry.&lt;/p&gt; &lt;p&gt;You can&#39;t deregister the default version of an extension if there are other active version of that extension. If you do deregister the default version of an extension, the extension type itself is deregistered as well and marked as deprecated.&lt;/p&gt; &lt;p&gt;To view the deprecation status of an extension or extension version, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETDeregisterType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId) throws ApiException {
        ApiResponse<Object> localVarResp = gETDeregisterTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Marks an extension or extension version as &lt;code&gt;DEPRECATED&lt;/code&gt; in the CloudFormation registry, removing it from active use. Deprecated extensions or extension versions cannot be used in CloudFormation operations.&lt;/p&gt; &lt;p&gt;To deregister an entire extension, you must individually deregister all active versions of that extension. If an extension has only a single active version, deregistering that version results in the extension itself being deregistered and marked as deprecated in the registry.&lt;/p&gt; &lt;p&gt;You can&#39;t deregister the default version of an extension if there are other active version of that extension. If you do deregister the default version of an extension, the extension type itself is deregistered as well and marked as deprecated.&lt;/p&gt; &lt;p&gt;To view the deprecation status of an extension or extension version, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETDeregisterTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId) throws ApiException {
        okhttp3.Call localVarCall = gETDeregisterTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Marks an extension or extension version as &lt;code&gt;DEPRECATED&lt;/code&gt; in the CloudFormation registry, removing it from active use. Deprecated extensions or extension versions cannot be used in CloudFormation operations.&lt;/p&gt; &lt;p&gt;To deregister an entire extension, you must individually deregister all active versions of that extension. If an extension has only a single active version, deregistering that version results in the extension itself being deregistered and marked as deprecated in the registry.&lt;/p&gt; &lt;p&gt;You can&#39;t deregister the default version of an extension if there are other active version of that extension. If you do deregister the default version of an extension, the extension type itself is deregistered as well and marked as deprecated.&lt;/p&gt; &lt;p&gt;To view the deprecation status of an extension or extension version, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeregisterTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeregisterTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeAccountLimits
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of limits that you want to retrieve. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountLimitsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeAccountLimitsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeAccountLimits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeAccountLimits(Async)");
        }

        return gETDescribeAccountLimitsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * Retrieves your account&#39;s CloudFormation limits, such as the maximum number of stacks that you can create in your account. For more information about account limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html\&quot;&gt;CloudFormation Quotas&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of limits that you want to retrieve. (optional)
     * @return DescribeAccountLimitsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountLimitsOutput gETDescribeAccountLimits(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<DescribeAccountLimitsOutput> localVarResp = gETDescribeAccountLimitsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves your account&#39;s CloudFormation limits, such as the maximum number of stacks that you can create in your account. For more information about account limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html\&quot;&gt;CloudFormation Quotas&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of limits that you want to retrieve. (optional)
     * @return ApiResponse&lt;DescribeAccountLimitsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountLimitsOutput> gETDescribeAccountLimitsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves your account&#39;s CloudFormation limits, such as the maximum number of stacks that you can create in your account. For more information about account limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html\&quot;&gt;CloudFormation Quotas&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of limits that you want to retrieve. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeAccountLimitsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<DescribeAccountLimitsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeChangeSet
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to describe. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or ID (ARN) of the change set you want to describe. (optional)
     * @param nextToken A string (provided by the &lt;a&gt;DescribeChangeSet&lt;/a&gt; response output) that identifies the next page of information that you want to retrieve. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeChangeSetCall(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeChangeSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (changeSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChangeSetName", changeSetName));
        }

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeChangeSetValidateBeforeCall(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeSetName' is set
        if (changeSetName == null) {
            throw new ApiException("Missing the required parameter 'changeSetName' when calling gETDescribeChangeSet(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeChangeSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeChangeSet(Async)");
        }

        return gETDescribeChangeSetCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, _callback);

    }

    /**
     * 
     * Returns the inputs for the change set and a list of changes that CloudFormation will make if you execute the change set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html\&quot;&gt;Updating Stacks Using Change Sets&lt;/a&gt; in the CloudFormation User Guide.
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to describe. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or ID (ARN) of the change set you want to describe. (optional)
     * @param nextToken A string (provided by the &lt;a&gt;DescribeChangeSet&lt;/a&gt; response output) that identifies the next page of information that you want to retrieve. (optional)
     * @return DescribeChangeSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChangeSetOutput gETDescribeChangeSet(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken) throws ApiException {
        ApiResponse<DescribeChangeSetOutput> localVarResp = gETDescribeChangeSetWithHttpInfo(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the inputs for the change set and a list of changes that CloudFormation will make if you execute the change set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html\&quot;&gt;Updating Stacks Using Change Sets&lt;/a&gt; in the CloudFormation User Guide.
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to describe. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or ID (ARN) of the change set you want to describe. (optional)
     * @param nextToken A string (provided by the &lt;a&gt;DescribeChangeSet&lt;/a&gt; response output) that identifies the next page of information that you want to retrieve. (optional)
     * @return ApiResponse&lt;DescribeChangeSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChangeSetOutput> gETDescribeChangeSetWithHttpInfo(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeChangeSetValidateBeforeCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeChangeSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the inputs for the change set and a list of changes that CloudFormation will make if you execute the change set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html\&quot;&gt;Updating Stacks Using Change Sets&lt;/a&gt; in the CloudFormation User Guide.
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to describe. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or ID (ARN) of the change set you want to describe. (optional)
     * @param nextToken A string (provided by the &lt;a&gt;DescribeChangeSet&lt;/a&gt; response output) that identifies the next page of information that you want to retrieve. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeChangeSetAsync(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, final ApiCallback<DescribeChangeSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeChangeSetValidateBeforeCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeChangeSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeChangeSetHooks
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to describe. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe. (optional)
     * @param nextToken A string, provided by the &lt;code&gt;DescribeChangeSetHooks&lt;/code&gt; response output, that identifies the next page of information that you want to retrieve. (optional)
     * @param logicalResourceId If specified, lists only the hooks related to the specified &lt;code&gt;LogicalResourceId&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeChangeSetHooksCall(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, String logicalResourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeChangeSetHooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (changeSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChangeSetName", changeSetName));
        }

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (logicalResourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LogicalResourceId", logicalResourceId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeChangeSetHooksValidateBeforeCall(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, String logicalResourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeSetName' is set
        if (changeSetName == null) {
            throw new ApiException("Missing the required parameter 'changeSetName' when calling gETDescribeChangeSetHooks(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeChangeSetHooks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeChangeSetHooks(Async)");
        }

        return gETDescribeChangeSetHooksCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, logicalResourceId, _callback);

    }

    /**
     * 
     * Returns hook-related information for the change set and a list of changes that CloudFormation makes when you run the change set.
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to describe. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe. (optional)
     * @param nextToken A string, provided by the &lt;code&gt;DescribeChangeSetHooks&lt;/code&gt; response output, that identifies the next page of information that you want to retrieve. (optional)
     * @param logicalResourceId If specified, lists only the hooks related to the specified &lt;code&gt;LogicalResourceId&lt;/code&gt;. (optional)
     * @return DescribeChangeSetHooksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChangeSetHooksOutput gETDescribeChangeSetHooks(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, String logicalResourceId) throws ApiException {
        ApiResponse<DescribeChangeSetHooksOutput> localVarResp = gETDescribeChangeSetHooksWithHttpInfo(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, logicalResourceId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns hook-related information for the change set and a list of changes that CloudFormation makes when you run the change set.
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to describe. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe. (optional)
     * @param nextToken A string, provided by the &lt;code&gt;DescribeChangeSetHooks&lt;/code&gt; response output, that identifies the next page of information that you want to retrieve. (optional)
     * @param logicalResourceId If specified, lists only the hooks related to the specified &lt;code&gt;LogicalResourceId&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeChangeSetHooksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChangeSetHooksOutput> gETDescribeChangeSetHooksWithHttpInfo(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, String logicalResourceId) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeChangeSetHooksValidateBeforeCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, logicalResourceId, null);
        Type localVarReturnType = new TypeToken<DescribeChangeSetHooksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns hook-related information for the change set and a list of changes that CloudFormation makes when you run the change set.
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want to describe. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or stack ID (ARN) of the change set you want to describe. (optional)
     * @param nextToken A string, provided by the &lt;code&gt;DescribeChangeSetHooks&lt;/code&gt; response output, that identifies the next page of information that you want to retrieve. (optional)
     * @param logicalResourceId If specified, lists only the hooks related to the specified &lt;code&gt;LogicalResourceId&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeChangeSetHooksAsync(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, String logicalResourceId, final ApiCallback<DescribeChangeSetHooksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeChangeSetHooksValidateBeforeCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, logicalResourceId, _callback);
        Type localVarReturnType = new TypeToken<DescribeChangeSetHooksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeOrganizationsAccess
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeOrganizationsAccessCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeOrganizationsAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeOrganizationsAccessValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeOrganizationsAccess(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeOrganizationsAccess(Async)");
        }

        return gETDescribeOrganizationsAccessCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);

    }

    /**
     * 
     * Retrieves information about the account&#39;s &lt;code&gt;OrganizationAccess&lt;/code&gt; status. This API can be called either by the management account or the delegated administrator by using the &lt;code&gt;CallAs&lt;/code&gt; parameter. This API can also be called without the &lt;code&gt;CallAs&lt;/code&gt; parameter by the management account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return DescribeOrganizationsAccessOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeOrganizationsAccessOutput gETDescribeOrganizationsAccess(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        ApiResponse<DescribeOrganizationsAccessOutput> localVarResp = gETDescribeOrganizationsAccessWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves information about the account&#39;s &lt;code&gt;OrganizationAccess&lt;/code&gt; status. This API can be called either by the management account or the delegated administrator by using the &lt;code&gt;CallAs&lt;/code&gt; parameter. This API can also be called without the &lt;code&gt;CallAs&lt;/code&gt; parameter by the management account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;DescribeOrganizationsAccessOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeOrganizationsAccessOutput> gETDescribeOrganizationsAccessWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, null);
        Type localVarReturnType = new TypeToken<DescribeOrganizationsAccessOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves information about the account&#39;s &lt;code&gt;OrganizationAccess&lt;/code&gt; status. This API can be called either by the management account or the delegated administrator by using the &lt;code&gt;CallAs&lt;/code&gt; parameter. This API can also be called without the &lt;code&gt;CallAs&lt;/code&gt; parameter by the management account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeOrganizationsAccessAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback<DescribeOrganizationsAccessOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);
        Type localVarReturnType = new TypeToken<DescribeOrganizationsAccessOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribePublisher
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publisherId &lt;p&gt;The ID of the extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePublisherCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String publisherId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribePublisher";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (publisherId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PublisherId", publisherId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribePublisherValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String publisherId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribePublisher(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribePublisher(Async)");
        }

        return gETDescribePublisherCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publisherId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about a CloudFormation extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; &lt;p&gt;For more information about registering as a publisher, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publisherId &lt;p&gt;The ID of the extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; (optional)
     * @return DescribePublisherOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public DescribePublisherOutput gETDescribePublisher(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String publisherId) throws ApiException {
        ApiResponse<DescribePublisherOutput> localVarResp = gETDescribePublisherWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publisherId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about a CloudFormation extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; &lt;p&gt;For more information about registering as a publisher, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publisherId &lt;p&gt;The ID of the extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;DescribePublisherOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribePublisherOutput> gETDescribePublisherWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String publisherId) throws ApiException {
        okhttp3.Call localVarCall = gETDescribePublisherValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publisherId, null);
        Type localVarReturnType = new TypeToken<DescribePublisherOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about a CloudFormation extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; &lt;p&gt;For more information about registering as a publisher, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publisherId &lt;p&gt;The ID of the extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribePublisherAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String publisherId, final ApiCallback<DescribePublisherOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribePublisherValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publisherId, _callback);
        Type localVarReturnType = new TypeToken<DescribePublisherOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeStackDriftDetectionStatus
     * @param stackDriftDetectionId &lt;p&gt;The ID of the drift detection results of this operation.&lt;/p&gt; &lt;p&gt;CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackDriftDetectionStatusCall(String stackDriftDetectionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackDriftDetectionStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackDriftDetectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackDriftDetectionId", stackDriftDetectionId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeStackDriftDetectionStatusValidateBeforeCall(String stackDriftDetectionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackDriftDetectionId' is set
        if (stackDriftDetectionId == null) {
            throw new ApiException("Missing the required parameter 'stackDriftDetectionId' when calling gETDescribeStackDriftDetectionStatus(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeStackDriftDetectionStatus(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeStackDriftDetectionStatus(Async)");
        }

        return gETDescribeStackDriftDetectionStatusCall(stackDriftDetectionId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about a stack drift detection operation. A stack drift detection operation detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackDrift&lt;/a&gt; to initiate a stack drift detection operation. &lt;code&gt;DetectStackDrift&lt;/code&gt; returns a &lt;code&gt;StackDriftDetectionId&lt;/code&gt; you can use to monitor the progress of the operation using &lt;code&gt;DescribeStackDriftDetectionStatus&lt;/code&gt;. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt;
     * @param stackDriftDetectionId &lt;p&gt;The ID of the drift detection results of this operation.&lt;/p&gt; &lt;p&gt;CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeStackDriftDetectionStatusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackDriftDetectionStatusOutput gETDescribeStackDriftDetectionStatus(String stackDriftDetectionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeStackDriftDetectionStatusOutput> localVarResp = gETDescribeStackDriftDetectionStatusWithHttpInfo(stackDriftDetectionId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about a stack drift detection operation. A stack drift detection operation detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackDrift&lt;/a&gt; to initiate a stack drift detection operation. &lt;code&gt;DetectStackDrift&lt;/code&gt; returns a &lt;code&gt;StackDriftDetectionId&lt;/code&gt; you can use to monitor the progress of the operation using &lt;code&gt;DescribeStackDriftDetectionStatus&lt;/code&gt;. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt;
     * @param stackDriftDetectionId &lt;p&gt;The ID of the drift detection results of this operation.&lt;/p&gt; &lt;p&gt;CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeStackDriftDetectionStatusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackDriftDetectionStatusOutput> gETDescribeStackDriftDetectionStatusWithHttpInfo(String stackDriftDetectionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeStackDriftDetectionStatusValidateBeforeCall(stackDriftDetectionId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeStackDriftDetectionStatusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about a stack drift detection operation. A stack drift detection operation detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackDrift&lt;/a&gt; to initiate a stack drift detection operation. &lt;code&gt;DetectStackDrift&lt;/code&gt; returns a &lt;code&gt;StackDriftDetectionId&lt;/code&gt; you can use to monitor the progress of the operation using &lt;code&gt;DescribeStackDriftDetectionStatus&lt;/code&gt;. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt;
     * @param stackDriftDetectionId &lt;p&gt;The ID of the drift detection results of this operation.&lt;/p&gt; &lt;p&gt;CloudFormation generates new results, with a new drift detection ID, each time this operation is run. However, the number of drift results CloudFormation retains for any given stack, and for how long, may vary.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackDriftDetectionStatusAsync(String stackDriftDetectionId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeStackDriftDetectionStatusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeStackDriftDetectionStatusValidateBeforeCall(stackDriftDetectionId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackDriftDetectionStatusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeStackEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param nextToken A string that identifies the next page of events that you want to retrieve. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeStackEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeStackEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeStackEvents(Async)");
        }

        return gETDescribeStackEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns all stack related events for a specified stack in reverse chronological order. For more information about a stack&#39;s event history, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/concept-stack.html\&quot;&gt;Stacks&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can list events for stacks that have failed to create or have been deleted by specifying the unique stack identifier (stack ID).&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param nextToken A string that identifies the next page of events that you want to retrieve. (optional)
     * @return DescribeStackEventsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackEventsOutput gETDescribeStackEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken) throws ApiException {
        ApiResponse<DescribeStackEventsOutput> localVarResp = gETDescribeStackEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns all stack related events for a specified stack in reverse chronological order. For more information about a stack&#39;s event history, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/concept-stack.html\&quot;&gt;Stacks&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can list events for stacks that have failed to create or have been deleted by specifying the unique stack identifier (stack ID).&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param nextToken A string that identifies the next page of events that you want to retrieve. (optional)
     * @return ApiResponse&lt;DescribeStackEventsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackEventsOutput> gETDescribeStackEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeStackEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeStackEventsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns all stack related events for a specified stack in reverse chronological order. For more information about a stack&#39;s event history, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/concept-stack.html\&quot;&gt;Stacks&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can list events for stacks that have failed to create or have been deleted by specifying the unique stack identifier (stack ID).&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param nextToken A string that identifies the next page of events that you want to retrieve. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, final ApiCallback<DescribeStackEventsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeStackEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackEventsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeStackInstance
     * @param stackSetName The name or the unique stack ID of the stack set that you want to get stack instance information for. (required)
     * @param stackInstanceAccount The ID of an Amazon Web Services account that&#39;s associated with this stack instance. (required)
     * @param stackInstanceRegion The name of a Region that&#39;s associated with this stack instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackInstanceCall(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (stackInstanceAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackInstanceAccount", stackInstanceAccount));
        }

        if (stackInstanceRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackInstanceRegion", stackInstanceRegion));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeStackInstanceValidateBeforeCall(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETDescribeStackInstance(Async)");
        }

        // verify the required parameter 'stackInstanceAccount' is set
        if (stackInstanceAccount == null) {
            throw new ApiException("Missing the required parameter 'stackInstanceAccount' when calling gETDescribeStackInstance(Async)");
        }

        // verify the required parameter 'stackInstanceRegion' is set
        if (stackInstanceRegion == null) {
            throw new ApiException("Missing the required parameter 'stackInstanceRegion' when calling gETDescribeStackInstance(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeStackInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeStackInstance(Async)");
        }

        return gETDescribeStackInstanceCall(stackSetName, stackInstanceAccount, stackInstanceRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the stack instance that&#39;s associated with the specified StackSet, Amazon Web Services account, and Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;For a list of stack instances that are associated with a specific StackSet, use &lt;a&gt;ListStackInstances&lt;/a&gt;.&lt;/p&gt;
     * @param stackSetName The name or the unique stack ID of the stack set that you want to get stack instance information for. (required)
     * @param stackInstanceAccount The ID of an Amazon Web Services account that&#39;s associated with this stack instance. (required)
     * @param stackInstanceRegion The name of a Region that&#39;s associated with this stack instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return DescribeStackInstanceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackInstanceOutput gETDescribeStackInstance(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        ApiResponse<DescribeStackInstanceOutput> localVarResp = gETDescribeStackInstanceWithHttpInfo(stackSetName, stackInstanceAccount, stackInstanceRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the stack instance that&#39;s associated with the specified StackSet, Amazon Web Services account, and Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;For a list of stack instances that are associated with a specific StackSet, use &lt;a&gt;ListStackInstances&lt;/a&gt;.&lt;/p&gt;
     * @param stackSetName The name or the unique stack ID of the stack set that you want to get stack instance information for. (required)
     * @param stackInstanceAccount The ID of an Amazon Web Services account that&#39;s associated with this stack instance. (required)
     * @param stackInstanceRegion The name of a Region that&#39;s associated with this stack instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;DescribeStackInstanceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackInstanceOutput> gETDescribeStackInstanceWithHttpInfo(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeStackInstanceValidateBeforeCall(stackSetName, stackInstanceAccount, stackInstanceRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, null);
        Type localVarReturnType = new TypeToken<DescribeStackInstanceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the stack instance that&#39;s associated with the specified StackSet, Amazon Web Services account, and Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;For a list of stack instances that are associated with a specific StackSet, use &lt;a&gt;ListStackInstances&lt;/a&gt;.&lt;/p&gt;
     * @param stackSetName The name or the unique stack ID of the stack set that you want to get stack instance information for. (required)
     * @param stackInstanceAccount The ID of an Amazon Web Services account that&#39;s associated with this stack instance. (required)
     * @param stackInstanceRegion The name of a Region that&#39;s associated with this stack instance. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackInstanceAsync(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback<DescribeStackInstanceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeStackInstanceValidateBeforeCall(stackSetName, stackInstanceAccount, stackInstanceRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackInstanceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeStackResource
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param logicalResourceId &lt;p&gt;The logical name of the resource as specified in the template.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackResourceCall(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (logicalResourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LogicalResourceId", logicalResourceId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeStackResourceValidateBeforeCall(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETDescribeStackResource(Async)");
        }

        // verify the required parameter 'logicalResourceId' is set
        if (logicalResourceId == null) {
            throw new ApiException("Missing the required parameter 'logicalResourceId' when calling gETDescribeStackResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeStackResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeStackResource(Async)");
        }

        return gETDescribeStackResourceCall(stackName, logicalResourceId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a description of the specified resource in the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, DescribeStackResource returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param logicalResourceId &lt;p&gt;The logical name of the resource as specified in the template.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeStackResourceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackResourceOutput gETDescribeStackResource(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeStackResourceOutput> localVarResp = gETDescribeStackResourceWithHttpInfo(stackName, logicalResourceId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a description of the specified resource in the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, DescribeStackResource returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param logicalResourceId &lt;p&gt;The logical name of the resource as specified in the template.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeStackResourceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackResourceOutput> gETDescribeStackResourceWithHttpInfo(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeStackResourceValidateBeforeCall(stackName, logicalResourceId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeStackResourceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a description of the specified resource in the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, DescribeStackResource returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param logicalResourceId &lt;p&gt;The logical name of the resource as specified in the template.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackResourceAsync(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeStackResourceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeStackResourceValidateBeforeCall(stackName, logicalResourceId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackResourceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeStackResourceDrifts
     * @param stackName The name of the stack for which you want drift information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackResourceDriftStatusFilters &lt;p&gt;The resource drift status values to use as filters for the resource drift results returned.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt;: The resource differs from its expected template configuration in that the resource has been deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MODIFIED&lt;/code&gt;: One or more resource properties differ from their expected template values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IN_SYNC&lt;/code&gt;: The resource&#39;s actual configuration matches its expected template configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_CHECKED&lt;/code&gt;: CloudFormation doesn&#39;t currently return this value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param nextToken A string that identifies the next page of stack resource drift results. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackResourceDriftsCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<StackResourceDriftStatus> stackResourceDriftStatusFilters, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackResourceDrifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (stackResourceDriftStatusFilters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "StackResourceDriftStatusFilters", stackResourceDriftStatusFilters));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeStackResourceDriftsValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<StackResourceDriftStatus> stackResourceDriftStatusFilters, String nextToken, Integer maxResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETDescribeStackResourceDrifts(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeStackResourceDrifts(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeStackResourceDrifts(Async)");
        }

        return gETDescribeStackResourceDriftsCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackResourceDriftStatusFilters, nextToken, maxResults, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects configuration drift.&lt;/p&gt; &lt;p&gt;For a given stack, there will be one &lt;code&gt;StackResourceDrift&lt;/code&gt; for each stack resource that has been checked for drift. Resources that haven&#39;t yet been checked for drift aren&#39;t included. Resources that don&#39;t currently support drift detection aren&#39;t checked, and so not included. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all supported resources for a given stack.&lt;/p&gt;
     * @param stackName The name of the stack for which you want drift information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackResourceDriftStatusFilters &lt;p&gt;The resource drift status values to use as filters for the resource drift results returned.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt;: The resource differs from its expected template configuration in that the resource has been deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MODIFIED&lt;/code&gt;: One or more resource properties differ from their expected template values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IN_SYNC&lt;/code&gt;: The resource&#39;s actual configuration matches its expected template configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_CHECKED&lt;/code&gt;: CloudFormation doesn&#39;t currently return this value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param nextToken A string that identifies the next page of stack resource drift results. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @return DescribeStackResourceDriftsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackResourceDriftsOutput gETDescribeStackResourceDrifts(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<StackResourceDriftStatus> stackResourceDriftStatusFilters, String nextToken, Integer maxResults) throws ApiException {
        ApiResponse<DescribeStackResourceDriftsOutput> localVarResp = gETDescribeStackResourceDriftsWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackResourceDriftStatusFilters, nextToken, maxResults);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects configuration drift.&lt;/p&gt; &lt;p&gt;For a given stack, there will be one &lt;code&gt;StackResourceDrift&lt;/code&gt; for each stack resource that has been checked for drift. Resources that haven&#39;t yet been checked for drift aren&#39;t included. Resources that don&#39;t currently support drift detection aren&#39;t checked, and so not included. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all supported resources for a given stack.&lt;/p&gt;
     * @param stackName The name of the stack for which you want drift information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackResourceDriftStatusFilters &lt;p&gt;The resource drift status values to use as filters for the resource drift results returned.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt;: The resource differs from its expected template configuration in that the resource has been deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MODIFIED&lt;/code&gt;: One or more resource properties differ from their expected template values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IN_SYNC&lt;/code&gt;: The resource&#39;s actual configuration matches its expected template configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_CHECKED&lt;/code&gt;: CloudFormation doesn&#39;t currently return this value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param nextToken A string that identifies the next page of stack resource drift results. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @return ApiResponse&lt;DescribeStackResourceDriftsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackResourceDriftsOutput> gETDescribeStackResourceDriftsWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<StackResourceDriftStatus> stackResourceDriftStatusFilters, String nextToken, Integer maxResults) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeStackResourceDriftsValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackResourceDriftStatusFilters, nextToken, maxResults, null);
        Type localVarReturnType = new TypeToken<DescribeStackResourceDriftsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects configuration drift.&lt;/p&gt; &lt;p&gt;For a given stack, there will be one &lt;code&gt;StackResourceDrift&lt;/code&gt; for each stack resource that has been checked for drift. Resources that haven&#39;t yet been checked for drift aren&#39;t included. Resources that don&#39;t currently support drift detection aren&#39;t checked, and so not included. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all supported resources for a given stack.&lt;/p&gt;
     * @param stackName The name of the stack for which you want drift information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackResourceDriftStatusFilters &lt;p&gt;The resource drift status values to use as filters for the resource drift results returned.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt;: The resource differs from its expected template configuration in that the resource has been deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MODIFIED&lt;/code&gt;: One or more resource properties differ from their expected template values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IN_SYNC&lt;/code&gt;: The resource&#39;s actual configuration matches its expected template configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_CHECKED&lt;/code&gt;: CloudFormation doesn&#39;t currently return this value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param nextToken A string that identifies the next page of stack resource drift results. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackResourceDriftsAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<StackResourceDriftStatus> stackResourceDriftStatusFilters, String nextToken, Integer maxResults, final ApiCallback<DescribeStackResourceDriftsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeStackResourceDriftsValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackResourceDriftStatusFilters, nextToken, maxResults, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackResourceDriftsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeStackResources
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that is associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; &lt;p&gt;Required: Conditional. If you don&#39;t specify &lt;code&gt;StackName&lt;/code&gt;, you must specify &lt;code&gt;PhysicalResourceId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param logicalResourceId &lt;p&gt;The logical name of the resource as specified in the template.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param physicalResourceId &lt;p&gt;The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.&lt;/p&gt; &lt;p&gt;For example, for an Amazon Elastic Compute Cloud (EC2) instance, &lt;code&gt;PhysicalResourceId&lt;/code&gt; corresponds to the &lt;code&gt;InstanceId&lt;/code&gt;. You can pass the EC2 &lt;code&gt;InstanceId&lt;/code&gt; to &lt;code&gt;DescribeStackResources&lt;/code&gt; to find which stack the instance belongs to and what other resources are part of the stack.&lt;/p&gt; &lt;p&gt;Required: Conditional. If you don&#39;t specify &lt;code&gt;PhysicalResourceId&lt;/code&gt;, you must specify &lt;code&gt;StackName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackResourcesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String logicalResourceId, String physicalResourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (logicalResourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LogicalResourceId", logicalResourceId));
        }

        if (physicalResourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PhysicalResourceId", physicalResourceId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeStackResourcesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String logicalResourceId, String physicalResourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeStackResources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeStackResources(Async)");
        }

        return gETDescribeStackResourcesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, logicalResourceId, physicalResourceId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns Amazon Web Services resource descriptions for running and deleted stacks. If &lt;code&gt;StackName&lt;/code&gt; is specified, all the associated resources that are part of the stack are returned. If &lt;code&gt;PhysicalResourceId&lt;/code&gt; is specified, the associated resources of the stack that the resource belongs to are returned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the first 100 resources will be returned. If your stack has more resources than this, you should use &lt;code&gt;ListStackResources&lt;/code&gt; instead.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;DescribeStackResources&lt;/code&gt; returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;p&gt;You must specify either &lt;code&gt;StackName&lt;/code&gt; or &lt;code&gt;PhysicalResourceId&lt;/code&gt;, but not both. In addition, you can specify &lt;code&gt;LogicalResourceId&lt;/code&gt; to filter the returned result. For more information about resources, the &lt;code&gt;LogicalResourceId&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt;, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/\&quot;&gt;CloudFormation User Guide&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;code&gt;ValidationError&lt;/code&gt; is returned if you specify both &lt;code&gt;StackName&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt; in the same request.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that is associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; &lt;p&gt;Required: Conditional. If you don&#39;t specify &lt;code&gt;StackName&lt;/code&gt;, you must specify &lt;code&gt;PhysicalResourceId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param logicalResourceId &lt;p&gt;The logical name of the resource as specified in the template.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param physicalResourceId &lt;p&gt;The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.&lt;/p&gt; &lt;p&gt;For example, for an Amazon Elastic Compute Cloud (EC2) instance, &lt;code&gt;PhysicalResourceId&lt;/code&gt; corresponds to the &lt;code&gt;InstanceId&lt;/code&gt;. You can pass the EC2 &lt;code&gt;InstanceId&lt;/code&gt; to &lt;code&gt;DescribeStackResources&lt;/code&gt; to find which stack the instance belongs to and what other resources are part of the stack.&lt;/p&gt; &lt;p&gt;Required: Conditional. If you don&#39;t specify &lt;code&gt;PhysicalResourceId&lt;/code&gt;, you must specify &lt;code&gt;StackName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @return DescribeStackResourcesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackResourcesOutput gETDescribeStackResources(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String logicalResourceId, String physicalResourceId) throws ApiException {
        ApiResponse<DescribeStackResourcesOutput> localVarResp = gETDescribeStackResourcesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, logicalResourceId, physicalResourceId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns Amazon Web Services resource descriptions for running and deleted stacks. If &lt;code&gt;StackName&lt;/code&gt; is specified, all the associated resources that are part of the stack are returned. If &lt;code&gt;PhysicalResourceId&lt;/code&gt; is specified, the associated resources of the stack that the resource belongs to are returned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the first 100 resources will be returned. If your stack has more resources than this, you should use &lt;code&gt;ListStackResources&lt;/code&gt; instead.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;DescribeStackResources&lt;/code&gt; returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;p&gt;You must specify either &lt;code&gt;StackName&lt;/code&gt; or &lt;code&gt;PhysicalResourceId&lt;/code&gt;, but not both. In addition, you can specify &lt;code&gt;LogicalResourceId&lt;/code&gt; to filter the returned result. For more information about resources, the &lt;code&gt;LogicalResourceId&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt;, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/\&quot;&gt;CloudFormation User Guide&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;code&gt;ValidationError&lt;/code&gt; is returned if you specify both &lt;code&gt;StackName&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt; in the same request.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that is associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; &lt;p&gt;Required: Conditional. If you don&#39;t specify &lt;code&gt;StackName&lt;/code&gt;, you must specify &lt;code&gt;PhysicalResourceId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param logicalResourceId &lt;p&gt;The logical name of the resource as specified in the template.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param physicalResourceId &lt;p&gt;The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.&lt;/p&gt; &lt;p&gt;For example, for an Amazon Elastic Compute Cloud (EC2) instance, &lt;code&gt;PhysicalResourceId&lt;/code&gt; corresponds to the &lt;code&gt;InstanceId&lt;/code&gt;. You can pass the EC2 &lt;code&gt;InstanceId&lt;/code&gt; to &lt;code&gt;DescribeStackResources&lt;/code&gt; to find which stack the instance belongs to and what other resources are part of the stack.&lt;/p&gt; &lt;p&gt;Required: Conditional. If you don&#39;t specify &lt;code&gt;PhysicalResourceId&lt;/code&gt;, you must specify &lt;code&gt;StackName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;DescribeStackResourcesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackResourcesOutput> gETDescribeStackResourcesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String logicalResourceId, String physicalResourceId) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeStackResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, logicalResourceId, physicalResourceId, null);
        Type localVarReturnType = new TypeToken<DescribeStackResourcesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns Amazon Web Services resource descriptions for running and deleted stacks. If &lt;code&gt;StackName&lt;/code&gt; is specified, all the associated resources that are part of the stack are returned. If &lt;code&gt;PhysicalResourceId&lt;/code&gt; is specified, the associated resources of the stack that the resource belongs to are returned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the first 100 resources will be returned. If your stack has more resources than this, you should use &lt;code&gt;ListStackResources&lt;/code&gt; instead.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;DescribeStackResources&lt;/code&gt; returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;p&gt;You must specify either &lt;code&gt;StackName&lt;/code&gt; or &lt;code&gt;PhysicalResourceId&lt;/code&gt;, but not both. In addition, you can specify &lt;code&gt;LogicalResourceId&lt;/code&gt; to filter the returned result. For more information about resources, the &lt;code&gt;LogicalResourceId&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt;, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/\&quot;&gt;CloudFormation User Guide&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;code&gt;ValidationError&lt;/code&gt; is returned if you specify both &lt;code&gt;StackName&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt; in the same request.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that is associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; &lt;p&gt;Required: Conditional. If you don&#39;t specify &lt;code&gt;StackName&lt;/code&gt;, you must specify &lt;code&gt;PhysicalResourceId&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param logicalResourceId &lt;p&gt;The logical name of the resource as specified in the template.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param physicalResourceId &lt;p&gt;The name or unique identifier that corresponds to a physical instance ID of a resource supported by CloudFormation.&lt;/p&gt; &lt;p&gt;For example, for an Amazon Elastic Compute Cloud (EC2) instance, &lt;code&gt;PhysicalResourceId&lt;/code&gt; corresponds to the &lt;code&gt;InstanceId&lt;/code&gt;. You can pass the EC2 &lt;code&gt;InstanceId&lt;/code&gt; to &lt;code&gt;DescribeStackResources&lt;/code&gt; to find which stack the instance belongs to and what other resources are part of the stack.&lt;/p&gt; &lt;p&gt;Required: Conditional. If you don&#39;t specify &lt;code&gt;PhysicalResourceId&lt;/code&gt;, you must specify &lt;code&gt;StackName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackResourcesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String logicalResourceId, String physicalResourceId, final ApiCallback<DescribeStackResourcesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeStackResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, logicalResourceId, physicalResourceId, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackResourcesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeStackSet
     * @param stackSetName The name or unique ID of the stack set whose description you want. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackSetCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeStackSetValidateBeforeCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETDescribeStackSet(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeStackSet(Async)");
        }

        return gETDescribeStackSetCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);

    }

    /**
     * 
     * Returns the description of the specified StackSet.
     * @param stackSetName The name or unique ID of the stack set whose description you want. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return DescribeStackSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackSetOutput gETDescribeStackSet(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        ApiResponse<DescribeStackSetOutput> localVarResp = gETDescribeStackSetWithHttpInfo(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the description of the specified StackSet.
     * @param stackSetName The name or unique ID of the stack set whose description you want. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;DescribeStackSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackSetOutput> gETDescribeStackSetWithHttpInfo(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, null);
        Type localVarReturnType = new TypeToken<DescribeStackSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the description of the specified StackSet.
     * @param stackSetName The name or unique ID of the stack set whose description you want. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackSetAsync(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback<DescribeStackSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeStackSetOperation
     * @param stackSetName The name or the unique stack ID of the stack set for the stack operation. (required)
     * @param operationId The unique ID of the stack set operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackSetOperationCall(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackSetOperation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeStackSetOperationValidateBeforeCall(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETDescribeStackSetOperation(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling gETDescribeStackSetOperation(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeStackSetOperation(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeStackSetOperation(Async)");
        }

        return gETDescribeStackSetOperationCall(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);

    }

    /**
     * 
     * Returns the description of the specified StackSet operation.
     * @param stackSetName The name or the unique stack ID of the stack set for the stack operation. (required)
     * @param operationId The unique ID of the stack set operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return DescribeStackSetOperationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackSetOperationOutput gETDescribeStackSetOperation(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        ApiResponse<DescribeStackSetOperationOutput> localVarResp = gETDescribeStackSetOperationWithHttpInfo(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the description of the specified StackSet operation.
     * @param stackSetName The name or the unique stack ID of the stack set for the stack operation. (required)
     * @param operationId The unique ID of the stack set operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;DescribeStackSetOperationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackSetOperationOutput> gETDescribeStackSetOperationWithHttpInfo(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeStackSetOperationValidateBeforeCall(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, null);
        Type localVarReturnType = new TypeToken<DescribeStackSetOperationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the description of the specified StackSet operation.
     * @param stackSetName The name or the unique stack ID of the stack set for the stack operation. (required)
     * @param operationId The unique ID of the stack set operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStackSetOperationAsync(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback<DescribeStackSetOperationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeStackSetOperationValidateBeforeCall(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackSetOperationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeStacks
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;note&gt; &lt;p&gt;If you don&#39;t pass a parameter to &lt;code&gt;StackName&lt;/code&gt;, the API returns a response that describes all resources in the account. This requires &lt;code&gt;ListStacks&lt;/code&gt; and &lt;code&gt;DescribeStacks&lt;/code&gt; permissions.&lt;/p&gt; &lt;p&gt;The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request:&lt;/p&gt; &lt;p&gt;{ \&quot;Version\&quot;: \&quot;2012-10-17\&quot;, \&quot;Statement\&quot;: [{ \&quot;Effect\&quot;: \&quot;Deny\&quot;, \&quot;Action\&quot;: \&quot;cloudformation:DescribeStacks\&quot;, \&quot;NotResource\&quot;: \&quot;arn:aws:cloudformation:*:*:stack/_*_/_*\&quot; }] }&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param nextToken A string that identifies the next page of stacks that you want to retrieve. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStacksCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeStacksValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeStacks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeStacks(Async)");
        }

        return gETDescribeStacksCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the description for the specified stack; if no stack name was specified, then it returns the description for all the stacks created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the stack doesn&#39;t exist, an &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;note&gt; &lt;p&gt;If you don&#39;t pass a parameter to &lt;code&gt;StackName&lt;/code&gt;, the API returns a response that describes all resources in the account. This requires &lt;code&gt;ListStacks&lt;/code&gt; and &lt;code&gt;DescribeStacks&lt;/code&gt; permissions.&lt;/p&gt; &lt;p&gt;The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request:&lt;/p&gt; &lt;p&gt;{ \&quot;Version\&quot;: \&quot;2012-10-17\&quot;, \&quot;Statement\&quot;: [{ \&quot;Effect\&quot;: \&quot;Deny\&quot;, \&quot;Action\&quot;: \&quot;cloudformation:DescribeStacks\&quot;, \&quot;NotResource\&quot;: \&quot;arn:aws:cloudformation:*:*:stack/_*_/_*\&quot; }] }&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param nextToken A string that identifies the next page of stacks that you want to retrieve. (optional)
     * @return DescribeStacksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStacksOutput gETDescribeStacks(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken) throws ApiException {
        ApiResponse<DescribeStacksOutput> localVarResp = gETDescribeStacksWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the description for the specified stack; if no stack name was specified, then it returns the description for all the stacks created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the stack doesn&#39;t exist, an &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;note&gt; &lt;p&gt;If you don&#39;t pass a parameter to &lt;code&gt;StackName&lt;/code&gt;, the API returns a response that describes all resources in the account. This requires &lt;code&gt;ListStacks&lt;/code&gt; and &lt;code&gt;DescribeStacks&lt;/code&gt; permissions.&lt;/p&gt; &lt;p&gt;The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request:&lt;/p&gt; &lt;p&gt;{ \&quot;Version\&quot;: \&quot;2012-10-17\&quot;, \&quot;Statement\&quot;: [{ \&quot;Effect\&quot;: \&quot;Deny\&quot;, \&quot;Action\&quot;: \&quot;cloudformation:DescribeStacks\&quot;, \&quot;NotResource\&quot;: \&quot;arn:aws:cloudformation:*:*:stack/_*_/_*\&quot; }] }&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param nextToken A string that identifies the next page of stacks that you want to retrieve. (optional)
     * @return ApiResponse&lt;DescribeStacksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStacksOutput> gETDescribeStacksWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeStacksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the description for the specified stack; if no stack name was specified, then it returns the description for all the stacks created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the stack doesn&#39;t exist, an &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;note&gt; &lt;p&gt;If you don&#39;t pass a parameter to &lt;code&gt;StackName&lt;/code&gt;, the API returns a response that describes all resources in the account. This requires &lt;code&gt;ListStacks&lt;/code&gt; and &lt;code&gt;DescribeStacks&lt;/code&gt; permissions.&lt;/p&gt; &lt;p&gt;The IAM policy below can be added to IAM policies when you want to limit resource-level permissions and avoid returning a response when no parameter is sent in the request:&lt;/p&gt; &lt;p&gt;{ \&quot;Version\&quot;: \&quot;2012-10-17\&quot;, \&quot;Statement\&quot;: [{ \&quot;Effect\&quot;: \&quot;Deny\&quot;, \&quot;Action\&quot;: \&quot;cloudformation:DescribeStacks\&quot;, \&quot;NotResource\&quot;: \&quot;arn:aws:cloudformation:*:*:stack/_*_/_*\&quot; }] }&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param nextToken A string that identifies the next page of stacks that you want to retrieve. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeStacksAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String nextToken, final ApiCallback<DescribeStacksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeStacksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId &lt;p&gt;The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The publisher ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Extensions provided by Amazon Web Services are not assigned a publisher ID.&lt;/p&gt; (optional)
     * @param publicVersionNumber The version number of a public third-party extension. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, String versionId, String publisherId, String publicVersionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (arn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Arn", arn));
        }

        if (versionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionId", versionId));
        }

        if (publisherId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PublisherId", publisherId));
        }

        if (publicVersionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PublicVersionNumber", publicVersionNumber));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, String versionId, String publisherId, String publicVersionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeType(Async)");
        }

        return gETDescribeTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, arn, versionId, publisherId, publicVersionNumber, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns detailed information about an extension that has been registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId &lt;p&gt;The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The publisher ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Extensions provided by Amazon Web Services are not assigned a publisher ID.&lt;/p&gt; (optional)
     * @param publicVersionNumber The version number of a public third-party extension. (optional)
     * @return DescribeTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTypeOutput gETDescribeType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, String versionId, String publisherId, String publicVersionNumber) throws ApiException {
        ApiResponse<DescribeTypeOutput> localVarResp = gETDescribeTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, arn, versionId, publisherId, publicVersionNumber);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns detailed information about an extension that has been registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId &lt;p&gt;The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The publisher ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Extensions provided by Amazon Web Services are not assigned a publisher ID.&lt;/p&gt; (optional)
     * @param publicVersionNumber The version number of a public third-party extension. (optional)
     * @return ApiResponse&lt;DescribeTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTypeOutput> gETDescribeTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, String versionId, String publisherId, String publicVersionNumber) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, arn, versionId, publisherId, publicVersionNumber, null);
        Type localVarReturnType = new TypeToken<DescribeTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns detailed information about an extension that has been registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId &lt;p&gt;The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The publisher ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Extensions provided by Amazon Web Services are not assigned a publisher ID.&lt;/p&gt; (optional)
     * @param publicVersionNumber The version number of a public third-party extension. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, String versionId, String publisherId, String publicVersionNumber, final ApiCallback<DescribeTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, arn, versionId, publisherId, publicVersionNumber, _callback);
        Type localVarReturnType = new TypeToken<DescribeTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeTypeRegistration
     * @param registrationToken &lt;p&gt;The identifier for this registration request.&lt;/p&gt; &lt;p&gt;This registration token is generated by CloudFormation when you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTypeRegistrationCall(String registrationToken, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTypeRegistration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (registrationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RegistrationToken", registrationToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeTypeRegistrationValidateBeforeCall(String registrationToken, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'registrationToken' is set
        if (registrationToken == null) {
            throw new ApiException("Missing the required parameter 'registrationToken' when calling gETDescribeTypeRegistration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeTypeRegistration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeTypeRegistration(Async)");
        }

        return gETDescribeTypeRegistrationCall(registrationToken, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about an extension&#39;s registration, including its current status and type and version identifiers.&lt;/p&gt; &lt;p&gt;When you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can then use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of that registration request.&lt;/p&gt; &lt;p&gt;Once the registration request has completed, use &lt;a&gt;DescribeType&lt;/a&gt; to return detailed information about an extension.&lt;/p&gt;
     * @param registrationToken &lt;p&gt;The identifier for this registration request.&lt;/p&gt; &lt;p&gt;This registration token is generated by CloudFormation when you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeTypeRegistrationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTypeRegistrationOutput gETDescribeTypeRegistration(String registrationToken, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeTypeRegistrationOutput> localVarResp = gETDescribeTypeRegistrationWithHttpInfo(registrationToken, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about an extension&#39;s registration, including its current status and type and version identifiers.&lt;/p&gt; &lt;p&gt;When you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can then use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of that registration request.&lt;/p&gt; &lt;p&gt;Once the registration request has completed, use &lt;a&gt;DescribeType&lt;/a&gt; to return detailed information about an extension.&lt;/p&gt;
     * @param registrationToken &lt;p&gt;The identifier for this registration request.&lt;/p&gt; &lt;p&gt;This registration token is generated by CloudFormation when you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeTypeRegistrationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTypeRegistrationOutput> gETDescribeTypeRegistrationWithHttpInfo(String registrationToken, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeTypeRegistrationValidateBeforeCall(registrationToken, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeTypeRegistrationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about an extension&#39;s registration, including its current status and type and version identifiers.&lt;/p&gt; &lt;p&gt;When you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can then use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of that registration request.&lt;/p&gt; &lt;p&gt;Once the registration request has completed, use &lt;a&gt;DescribeType&lt;/a&gt; to return detailed information about an extension.&lt;/p&gt;
     * @param registrationToken &lt;p&gt;The identifier for this registration request.&lt;/p&gt; &lt;p&gt;This registration token is generated by CloudFormation when you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeTypeRegistrationAsync(String registrationToken, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeTypeRegistrationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeTypeRegistrationValidateBeforeCall(registrationToken, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeTypeRegistrationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDetectStackDrift
     * @param stackName The name of the stack for which you want to detect drift. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param logicalResourceIds The logical names of any resources you want to use as filters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetectStackDriftCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> logicalResourceIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DetectStackDrift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (logicalResourceIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LogicalResourceIds", logicalResourceIds));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDetectStackDriftValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> logicalResourceIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETDetectStackDrift(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDetectStackDrift(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDetectStackDrift(Async)");
        }

        return gETDetectStackDriftCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, logicalResourceIds, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. For each resource in the stack that supports drift detection, CloudFormation compares the actual configuration of the resource with its expected template configuration. Only resource properties explicitly defined in the stack template are checked for drift. A stack is considered to have drifted if one or more of its resources differ from their expected template configurations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackDrift&lt;/code&gt; to detect drift on all supported resources for a given stack, or &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources.&lt;/p&gt; &lt;p&gt;For a list of stack resources that currently support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackDrift&lt;/code&gt; can take up to several minutes, depending on the number of resources contained within the stack. Use &lt;a&gt;DescribeStackDriftDetectionStatus&lt;/a&gt; to monitor the progress of a detect stack drift operation. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt; &lt;p&gt;When detecting drift on a stack, CloudFormation doesn&#39;t detect drift on any nested stacks belonging to that stack. Perform &lt;code&gt;DetectStackDrift&lt;/code&gt; directly on the nested stack itself.&lt;/p&gt;
     * @param stackName The name of the stack for which you want to detect drift. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param logicalResourceIds The logical names of any resources you want to use as filters. (optional)
     * @return DetectStackDriftOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DetectStackDriftOutput gETDetectStackDrift(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> logicalResourceIds) throws ApiException {
        ApiResponse<DetectStackDriftOutput> localVarResp = gETDetectStackDriftWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, logicalResourceIds);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. For each resource in the stack that supports drift detection, CloudFormation compares the actual configuration of the resource with its expected template configuration. Only resource properties explicitly defined in the stack template are checked for drift. A stack is considered to have drifted if one or more of its resources differ from their expected template configurations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackDrift&lt;/code&gt; to detect drift on all supported resources for a given stack, or &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources.&lt;/p&gt; &lt;p&gt;For a list of stack resources that currently support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackDrift&lt;/code&gt; can take up to several minutes, depending on the number of resources contained within the stack. Use &lt;a&gt;DescribeStackDriftDetectionStatus&lt;/a&gt; to monitor the progress of a detect stack drift operation. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt; &lt;p&gt;When detecting drift on a stack, CloudFormation doesn&#39;t detect drift on any nested stacks belonging to that stack. Perform &lt;code&gt;DetectStackDrift&lt;/code&gt; directly on the nested stack itself.&lt;/p&gt;
     * @param stackName The name of the stack for which you want to detect drift. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param logicalResourceIds The logical names of any resources you want to use as filters. (optional)
     * @return ApiResponse&lt;DetectStackDriftOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectStackDriftOutput> gETDetectStackDriftWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> logicalResourceIds) throws ApiException {
        okhttp3.Call localVarCall = gETDetectStackDriftValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, logicalResourceIds, null);
        Type localVarReturnType = new TypeToken<DetectStackDriftOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. For each resource in the stack that supports drift detection, CloudFormation compares the actual configuration of the resource with its expected template configuration. Only resource properties explicitly defined in the stack template are checked for drift. A stack is considered to have drifted if one or more of its resources differ from their expected template configurations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackDrift&lt;/code&gt; to detect drift on all supported resources for a given stack, or &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources.&lt;/p&gt; &lt;p&gt;For a list of stack resources that currently support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackDrift&lt;/code&gt; can take up to several minutes, depending on the number of resources contained within the stack. Use &lt;a&gt;DescribeStackDriftDetectionStatus&lt;/a&gt; to monitor the progress of a detect stack drift operation. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt; &lt;p&gt;When detecting drift on a stack, CloudFormation doesn&#39;t detect drift on any nested stacks belonging to that stack. Perform &lt;code&gt;DetectStackDrift&lt;/code&gt; directly on the nested stack itself.&lt;/p&gt;
     * @param stackName The name of the stack for which you want to detect drift. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param logicalResourceIds The logical names of any resources you want to use as filters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetectStackDriftAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> logicalResourceIds, final ApiCallback<DetectStackDriftOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDetectStackDriftValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, logicalResourceIds, _callback);
        Type localVarReturnType = new TypeToken<DetectStackDriftOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDetectStackResourceDrift
     * @param stackName The name of the stack to which the resource belongs. (required)
     * @param logicalResourceId The logical name of the resource for which to return drift information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetectStackResourceDriftCall(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DetectStackResourceDrift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (logicalResourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LogicalResourceId", logicalResourceId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDetectStackResourceDriftValidateBeforeCall(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETDetectStackResourceDrift(Async)");
        }

        // verify the required parameter 'logicalResourceId' is set
        if (logicalResourceId == null) {
            throw new ApiException("Missing the required parameter 'logicalResourceId' when calling gETDetectStackResourceDrift(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDetectStackResourceDrift(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDetectStackResourceDrift(Async)");
        }

        return gETDetectStackResourceDriftCall(stackName, logicalResourceId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about whether a resource&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. This information includes actual and expected property values for resources in which CloudFormation detects drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackResourceDrift&lt;/code&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all resources in a given stack that support drift detection.&lt;/p&gt; &lt;p&gt;Resources that don&#39;t currently support drift detection can&#39;t be checked. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt;
     * @param stackName The name of the stack to which the resource belongs. (required)
     * @param logicalResourceId The logical name of the resource for which to return drift information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DetectStackResourceDriftOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DetectStackResourceDriftOutput gETDetectStackResourceDrift(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DetectStackResourceDriftOutput> localVarResp = gETDetectStackResourceDriftWithHttpInfo(stackName, logicalResourceId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about whether a resource&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. This information includes actual and expected property values for resources in which CloudFormation detects drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackResourceDrift&lt;/code&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all resources in a given stack that support drift detection.&lt;/p&gt; &lt;p&gt;Resources that don&#39;t currently support drift detection can&#39;t be checked. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt;
     * @param stackName The name of the stack to which the resource belongs. (required)
     * @param logicalResourceId The logical name of the resource for which to return drift information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DetectStackResourceDriftOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectStackResourceDriftOutput> gETDetectStackResourceDriftWithHttpInfo(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDetectStackResourceDriftValidateBeforeCall(stackName, logicalResourceId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DetectStackResourceDriftOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about whether a resource&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. This information includes actual and expected property values for resources in which CloudFormation detects drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackResourceDrift&lt;/code&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all resources in a given stack that support drift detection.&lt;/p&gt; &lt;p&gt;Resources that don&#39;t currently support drift detection can&#39;t be checked. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt;
     * @param stackName The name of the stack to which the resource belongs. (required)
     * @param logicalResourceId The logical name of the resource for which to return drift information. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetectStackResourceDriftAsync(String stackName, String logicalResourceId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DetectStackResourceDriftOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDetectStackResourceDriftValidateBeforeCall(stackName, logicalResourceId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DetectStackResourceDriftOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDetectStackSetDrift
     * @param stackSetName The name of the stack set on which to perform the drift detection operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param operationPreferences &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param operationId  &lt;i&gt;The ID of the stack set operation.&lt;/i&gt;  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetectStackSetDriftCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DetectStackSetDrift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (operationPreferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationPreferences", operationPreferences));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDetectStackSetDriftValidateBeforeCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETDetectStackSetDrift(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDetectStackSetDrift(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDetectStackSetDrift(Async)");
        }

        return gETDetectStackSetDriftCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, operationPreferences, operationId, callAs, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detect drift on a stack set. When CloudFormation performs drift detection on a stack set, it performs drift detection on the stack associated with each stack instance in the stack set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;How CloudFormation performs drift detection on a stack set&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackSetDrift&lt;/code&gt; returns the &lt;code&gt;OperationId&lt;/code&gt; of the stack set drift detection operation. Use this operation id with &lt;a&gt;DescribeStackSetOperation&lt;/a&gt; to monitor the progress of the drift detection operation. The drift detection operation may take some time, depending on the number of stack instances included in the stack set, in addition to the number of resources included in each stack.&lt;/p&gt; &lt;p&gt;Once the operation has completed, use the following actions to return drift information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackSet&lt;/a&gt; to return detailed information about the stack set, including detailed information about the last &lt;i&gt;completed&lt;/i&gt; drift operation performed on the stack set. (Information about drift operations that are in progress isn&#39;t included.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;ListStackInstances&lt;/a&gt; to return a list of stack instances belonging to the stack set, including the drift status and last drift time checked of each instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackInstance&lt;/a&gt; to return detailed information about a specific stack instance, including its drift status and last drift time checked.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about performing a drift detection operation on a stack set, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;Detecting unmanaged changes in stack sets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can only run a single drift detection operation on a given stack set at one time.&lt;/p&gt; &lt;p&gt;To stop a drift detection stack set operation, use &lt;a&gt;StopStackSetOperation&lt;/a&gt;.&lt;/p&gt;
     * @param stackSetName The name of the stack set on which to perform the drift detection operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param operationPreferences &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param operationId  &lt;i&gt;The ID of the stack set operation.&lt;/i&gt;  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return DetectStackSetDriftOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DetectStackSetDriftOutput gETDetectStackSetDrift(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        ApiResponse<DetectStackSetDriftOutput> localVarResp = gETDetectStackSetDriftWithHttpInfo(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, operationPreferences, operationId, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detect drift on a stack set. When CloudFormation performs drift detection on a stack set, it performs drift detection on the stack associated with each stack instance in the stack set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;How CloudFormation performs drift detection on a stack set&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackSetDrift&lt;/code&gt; returns the &lt;code&gt;OperationId&lt;/code&gt; of the stack set drift detection operation. Use this operation id with &lt;a&gt;DescribeStackSetOperation&lt;/a&gt; to monitor the progress of the drift detection operation. The drift detection operation may take some time, depending on the number of stack instances included in the stack set, in addition to the number of resources included in each stack.&lt;/p&gt; &lt;p&gt;Once the operation has completed, use the following actions to return drift information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackSet&lt;/a&gt; to return detailed information about the stack set, including detailed information about the last &lt;i&gt;completed&lt;/i&gt; drift operation performed on the stack set. (Information about drift operations that are in progress isn&#39;t included.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;ListStackInstances&lt;/a&gt; to return a list of stack instances belonging to the stack set, including the drift status and last drift time checked of each instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackInstance&lt;/a&gt; to return detailed information about a specific stack instance, including its drift status and last drift time checked.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about performing a drift detection operation on a stack set, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;Detecting unmanaged changes in stack sets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can only run a single drift detection operation on a given stack set at one time.&lt;/p&gt; &lt;p&gt;To stop a drift detection stack set operation, use &lt;a&gt;StopStackSetOperation&lt;/a&gt;.&lt;/p&gt;
     * @param stackSetName The name of the stack set on which to perform the drift detection operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param operationPreferences &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param operationId  &lt;i&gt;The ID of the stack set operation.&lt;/i&gt;  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;DetectStackSetDriftOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectStackSetDriftOutput> gETDetectStackSetDriftWithHttpInfo(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETDetectStackSetDriftValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, operationPreferences, operationId, callAs, null);
        Type localVarReturnType = new TypeToken<DetectStackSetDriftOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detect drift on a stack set. When CloudFormation performs drift detection on a stack set, it performs drift detection on the stack associated with each stack instance in the stack set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;How CloudFormation performs drift detection on a stack set&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackSetDrift&lt;/code&gt; returns the &lt;code&gt;OperationId&lt;/code&gt; of the stack set drift detection operation. Use this operation id with &lt;a&gt;DescribeStackSetOperation&lt;/a&gt; to monitor the progress of the drift detection operation. The drift detection operation may take some time, depending on the number of stack instances included in the stack set, in addition to the number of resources included in each stack.&lt;/p&gt; &lt;p&gt;Once the operation has completed, use the following actions to return drift information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackSet&lt;/a&gt; to return detailed information about the stack set, including detailed information about the last &lt;i&gt;completed&lt;/i&gt; drift operation performed on the stack set. (Information about drift operations that are in progress isn&#39;t included.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;ListStackInstances&lt;/a&gt; to return a list of stack instances belonging to the stack set, including the drift status and last drift time checked of each instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackInstance&lt;/a&gt; to return detailed information about a specific stack instance, including its drift status and last drift time checked.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about performing a drift detection operation on a stack set, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;Detecting unmanaged changes in stack sets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can only run a single drift detection operation on a given stack set at one time.&lt;/p&gt; &lt;p&gt;To stop a drift detection stack set operation, use &lt;a&gt;StopStackSetOperation&lt;/a&gt;.&lt;/p&gt;
     * @param stackSetName The name of the stack set on which to perform the drift detection operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param operationPreferences &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param operationId  &lt;i&gt;The ID of the stack set operation.&lt;/i&gt;  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDetectStackSetDriftAsync(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback<DetectStackSetDriftOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDetectStackSetDriftValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, operationPreferences, operationId, callAs, _callback);
        Type localVarReturnType = new TypeToken<DetectStackSetDriftOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETEstimateTemplateCost
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.)&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEstimateTemplateCostCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=EstimateTemplateCost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateBody", templateBody));
        }

        if (templateURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateURL", templateURL));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETEstimateTemplateCostValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETEstimateTemplateCost(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETEstimateTemplateCost(Async)");
        }

        return gETEstimateTemplateCostCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, parameters, _callback);

    }

    /**
     * 
     * Returns the estimated monthly cost of a template. The return value is an Amazon Web Services Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.)&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters. (optional)
     * @return EstimateTemplateCostOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EstimateTemplateCostOutput gETEstimateTemplateCost(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters) throws ApiException {
        ApiResponse<EstimateTemplateCostOutput> localVarResp = gETEstimateTemplateCostWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the estimated monthly cost of a template. The return value is an Amazon Web Services Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.)&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters. (optional)
     * @return ApiResponse&lt;EstimateTemplateCostOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EstimateTemplateCostOutput> gETEstimateTemplateCostWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters) throws ApiException {
        okhttp3.Call localVarCall = gETEstimateTemplateCostValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, parameters, null);
        Type localVarReturnType = new TypeToken<EstimateTemplateCostOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the estimated monthly cost of a template. The return value is an Amazon Web Services Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.)&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETEstimateTemplateCostAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, List<Parameter> parameters, final ApiCallback<EstimateTemplateCostOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETEstimateTemplateCostValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, parameters, _callback);
        Type localVarReturnType = new TypeToken<EstimateTemplateCostOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETExecuteChangeSet
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want use to update the specified stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or Amazon Resource Name (ARN) that&#39;s associated with the change set you want to execute. (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;ExecuteChangeSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to execute a change set to update a stack with the same name. You might retry &lt;code&gt;ExecuteChangeSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param disableRollback &lt;p&gt;Preserves the state of previously provisioned resources when an operation fails. This parameter can&#39;t be specified when the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation was specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;True&lt;/code&gt; - if the stack creation fails, do nothing. This is equivalent to specifying &lt;code&gt;DO_NOTHING&lt;/code&gt; for the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;False&lt;/code&gt; - if the stack creation fails, roll back the stack. This is equivalent to specifying &lt;code&gt;ROLLBACK&lt;/code&gt; for the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: &lt;code&gt;True&lt;/code&gt; &lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETExecuteChangeSetCall(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String clientRequestToken, Boolean disableRollback, Boolean retainExceptOnCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ExecuteChangeSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (changeSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChangeSetName", changeSetName));
        }

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (disableRollback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DisableRollback", disableRollback));
        }

        if (retainExceptOnCreate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RetainExceptOnCreate", retainExceptOnCreate));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETExecuteChangeSetValidateBeforeCall(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String clientRequestToken, Boolean disableRollback, Boolean retainExceptOnCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changeSetName' is set
        if (changeSetName == null) {
            throw new ApiException("Missing the required parameter 'changeSetName' when calling gETExecuteChangeSet(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETExecuteChangeSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETExecuteChangeSet(Async)");
        }

        return gETExecuteChangeSetCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, clientRequestToken, disableRollback, retainExceptOnCreate, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a stack using the input information that was provided when the specified change set was created. After the call successfully completes, CloudFormation starts updating the stack. Use the &lt;a&gt;DescribeStacks&lt;/a&gt; action to view the status of the update.&lt;/p&gt; &lt;p&gt;When you execute a change set, CloudFormation deletes all other change sets associated with the stack because they aren&#39;t valid for the updated stack.&lt;/p&gt; &lt;p&gt;If a stack policy is associated with the stack, CloudFormation enforces the policy during the update. You can&#39;t specify a temporary stack policy that overrides the current policy.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, &lt;code&gt;IncludeNestedStacks&lt;/code&gt; must have been set to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want use to update the specified stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or Amazon Resource Name (ARN) that&#39;s associated with the change set you want to execute. (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;ExecuteChangeSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to execute a change set to update a stack with the same name. You might retry &lt;code&gt;ExecuteChangeSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param disableRollback &lt;p&gt;Preserves the state of previously provisioned resources when an operation fails. This parameter can&#39;t be specified when the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation was specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;True&lt;/code&gt; - if the stack creation fails, do nothing. This is equivalent to specifying &lt;code&gt;DO_NOTHING&lt;/code&gt; for the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;False&lt;/code&gt; - if the stack creation fails, roll back the stack. This is equivalent to specifying &lt;code&gt;ROLLBACK&lt;/code&gt; for the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: &lt;code&gt;True&lt;/code&gt; &lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETExecuteChangeSet(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String clientRequestToken, Boolean disableRollback, Boolean retainExceptOnCreate) throws ApiException {
        ApiResponse<Object> localVarResp = gETExecuteChangeSetWithHttpInfo(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, clientRequestToken, disableRollback, retainExceptOnCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a stack using the input information that was provided when the specified change set was created. After the call successfully completes, CloudFormation starts updating the stack. Use the &lt;a&gt;DescribeStacks&lt;/a&gt; action to view the status of the update.&lt;/p&gt; &lt;p&gt;When you execute a change set, CloudFormation deletes all other change sets associated with the stack because they aren&#39;t valid for the updated stack.&lt;/p&gt; &lt;p&gt;If a stack policy is associated with the stack, CloudFormation enforces the policy during the update. You can&#39;t specify a temporary stack policy that overrides the current policy.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, &lt;code&gt;IncludeNestedStacks&lt;/code&gt; must have been set to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want use to update the specified stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or Amazon Resource Name (ARN) that&#39;s associated with the change set you want to execute. (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;ExecuteChangeSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to execute a change set to update a stack with the same name. You might retry &lt;code&gt;ExecuteChangeSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param disableRollback &lt;p&gt;Preserves the state of previously provisioned resources when an operation fails. This parameter can&#39;t be specified when the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation was specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;True&lt;/code&gt; - if the stack creation fails, do nothing. This is equivalent to specifying &lt;code&gt;DO_NOTHING&lt;/code&gt; for the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;False&lt;/code&gt; - if the stack creation fails, roll back the stack. This is equivalent to specifying &lt;code&gt;ROLLBACK&lt;/code&gt; for the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: &lt;code&gt;True&lt;/code&gt; &lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETExecuteChangeSetWithHttpInfo(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String clientRequestToken, Boolean disableRollback, Boolean retainExceptOnCreate) throws ApiException {
        okhttp3.Call localVarCall = gETExecuteChangeSetValidateBeforeCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, clientRequestToken, disableRollback, retainExceptOnCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a stack using the input information that was provided when the specified change set was created. After the call successfully completes, CloudFormation starts updating the stack. Use the &lt;a&gt;DescribeStacks&lt;/a&gt; action to view the status of the update.&lt;/p&gt; &lt;p&gt;When you execute a change set, CloudFormation deletes all other change sets associated with the stack because they aren&#39;t valid for the updated stack.&lt;/p&gt; &lt;p&gt;If a stack policy is associated with the stack, CloudFormation enforces the policy during the update. You can&#39;t specify a temporary stack policy that overrides the current policy.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, &lt;code&gt;IncludeNestedStacks&lt;/code&gt; must have been set to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param changeSetName The name or Amazon Resource Name (ARN) of the change set that you want use to update the specified stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName If you specified the name of a change set, specify the stack name or Amazon Resource Name (ARN) that&#39;s associated with the change set you want to execute. (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;ExecuteChangeSet&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to execute a change set to update a stack with the same name. You might retry &lt;code&gt;ExecuteChangeSet&lt;/code&gt; requests to ensure that CloudFormation successfully received them. (optional)
     * @param disableRollback &lt;p&gt;Preserves the state of previously provisioned resources when an operation fails. This parameter can&#39;t be specified when the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation was specified.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;True&lt;/code&gt; - if the stack creation fails, do nothing. This is equivalent to specifying &lt;code&gt;DO_NOTHING&lt;/code&gt; for the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;False&lt;/code&gt; - if the stack creation fails, roll back the stack. This is equivalent to specifying &lt;code&gt;ROLLBACK&lt;/code&gt; for the &lt;code&gt;OnStackFailure&lt;/code&gt; parameter to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateChangeSet.html\&quot;&gt;CreateChangeSet&lt;/a&gt; API operation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: &lt;code&gt;True&lt;/code&gt; &lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETExecuteChangeSetAsync(String changeSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String clientRequestToken, Boolean disableRollback, Boolean retainExceptOnCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETExecuteChangeSetValidateBeforeCall(changeSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, clientRequestToken, disableRollback, retainExceptOnCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetStackPolicy
     * @param stackName The name or unique stack ID that&#39;s associated with the stack whose policy you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetStackPolicyCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetStackPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetStackPolicyValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETGetStackPolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetStackPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetStackPolicy(Async)");
        }

        return gETGetStackPolicyCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the stack policy for a specified stack. If a stack doesn&#39;t have a policy, a null value is returned.
     * @param stackName The name or unique stack ID that&#39;s associated with the stack whose policy you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetStackPolicyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetStackPolicyOutput gETGetStackPolicy(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetStackPolicyOutput> localVarResp = gETGetStackPolicyWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the stack policy for a specified stack. If a stack doesn&#39;t have a policy, a null value is returned.
     * @param stackName The name or unique stack ID that&#39;s associated with the stack whose policy you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetStackPolicyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStackPolicyOutput> gETGetStackPolicyWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETGetStackPolicyValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetStackPolicyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the stack policy for a specified stack. If a stack doesn&#39;t have a policy, a null value is returned.
     * @param stackName The name or unique stack ID that&#39;s associated with the stack whose policy you want to get. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetStackPolicyAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetStackPolicyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetStackPolicyValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetStackPolicyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetTemplate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param changeSetName The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the &lt;code&gt;StackName&lt;/code&gt;. (optional)
     * @param templateStage &lt;p&gt;For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify &lt;code&gt;Original&lt;/code&gt;. To get the template after CloudFormation has processed all transforms, specify &lt;code&gt;Processed&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the template doesn&#39;t include transforms, &lt;code&gt;Original&lt;/code&gt; and &lt;code&gt;Processed&lt;/code&gt; return the same template. By default, CloudFormation specifies &lt;code&gt;Processed&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetTemplateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String changeSetName, String templateStage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (changeSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChangeSetName", changeSetName));
        }

        if (templateStage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateStage", templateStage));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetTemplateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String changeSetName, String templateStage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetTemplate(Async)");
        }

        return gETGetTemplateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, changeSetName, templateStage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the template body for a specified stack. You can get the template for running or deleted stacks.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplate&lt;/code&gt; returns the template for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param changeSetName The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the &lt;code&gt;StackName&lt;/code&gt;. (optional)
     * @param templateStage &lt;p&gt;For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify &lt;code&gt;Original&lt;/code&gt;. To get the template after CloudFormation has processed all transforms, specify &lt;code&gt;Processed&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the template doesn&#39;t include transforms, &lt;code&gt;Original&lt;/code&gt; and &lt;code&gt;Processed&lt;/code&gt; return the same template. By default, CloudFormation specifies &lt;code&gt;Processed&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return GetTemplateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetTemplateOutput gETGetTemplate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String changeSetName, String templateStage) throws ApiException {
        ApiResponse<GetTemplateOutput> localVarResp = gETGetTemplateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, changeSetName, templateStage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the template body for a specified stack. You can get the template for running or deleted stacks.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplate&lt;/code&gt; returns the template for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param changeSetName The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the &lt;code&gt;StackName&lt;/code&gt;. (optional)
     * @param templateStage &lt;p&gt;For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify &lt;code&gt;Original&lt;/code&gt;. To get the template after CloudFormation has processed all transforms, specify &lt;code&gt;Processed&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the template doesn&#39;t include transforms, &lt;code&gt;Original&lt;/code&gt; and &lt;code&gt;Processed&lt;/code&gt; return the same template. By default, CloudFormation specifies &lt;code&gt;Processed&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;GetTemplateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTemplateOutput> gETGetTemplateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String changeSetName, String templateStage) throws ApiException {
        okhttp3.Call localVarCall = gETGetTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, changeSetName, templateStage, null);
        Type localVarReturnType = new TypeToken<GetTemplateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the template body for a specified stack. You can get the template for running or deleted stacks.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplate&lt;/code&gt; returns the template for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackName &lt;p&gt;The name or the unique stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (optional)
     * @param changeSetName The name or Amazon Resource Name (ARN) of a change set for which CloudFormation returns the associated template. If you specify a name, you must also specify the &lt;code&gt;StackName&lt;/code&gt;. (optional)
     * @param templateStage &lt;p&gt;For templates that include transforms, the stage of the template that CloudFormation returns. To get the user-submitted template, specify &lt;code&gt;Original&lt;/code&gt;. To get the template after CloudFormation has processed all transforms, specify &lt;code&gt;Processed&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the template doesn&#39;t include transforms, &lt;code&gt;Original&lt;/code&gt; and &lt;code&gt;Processed&lt;/code&gt; return the same template. By default, CloudFormation specifies &lt;code&gt;Processed&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetTemplateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackName, String changeSetName, String templateStage, final ApiCallback<GetTemplateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackName, changeSetName, templateStage, _callback);
        Type localVarReturnType = new TypeToken<GetTemplateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETGetTemplateSummary
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information about templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information about templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackName &lt;p&gt;The name or the stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable. For running stacks, you can specify either the stack&#39;s name or its unique stack ID. For deleted stack, you must specify the unique stack ID.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackSetName &lt;p&gt;The name or unique ID of the stack set from which the stack was created.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param templateSummaryConfig Specifies options for the &lt;code&gt;GetTemplateSummary&lt;/code&gt; API action. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetTemplateSummaryCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, String stackName, String stackSetName, String callAs, GETGetTemplateSummaryTemplateSummaryConfigParameter templateSummaryConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=GetTemplateSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateBody", templateBody));
        }

        if (templateURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateURL", templateURL));
        }

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (templateSummaryConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateSummaryConfig", templateSummaryConfig));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETGetTemplateSummaryValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, String stackName, String stackSetName, String callAs, GETGetTemplateSummaryTemplateSummaryConfigParameter templateSummaryConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETGetTemplateSummary(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETGetTemplateSummary(Async)");
        }

        return gETGetTemplateSummaryCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, stackName, stackSetName, callAs, templateSummaryConfig, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about a new or existing template. The &lt;code&gt;GetTemplateSummary&lt;/code&gt; action is useful for viewing parameter information, such as default parameter values and parameter types, before you create or update a stack or stack set.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetTemplateSummary&lt;/code&gt; action when you submit a template, or you can get template information for a stack set, or a running or deleted stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplateSummary&lt;/code&gt; returns the template information for up to 90 days after the stack has been deleted. If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information about templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information about templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackName &lt;p&gt;The name or the stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable. For running stacks, you can specify either the stack&#39;s name or its unique stack ID. For deleted stack, you must specify the unique stack ID.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackSetName &lt;p&gt;The name or unique ID of the stack set from which the stack was created.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param templateSummaryConfig Specifies options for the &lt;code&gt;GetTemplateSummary&lt;/code&gt; API action. (optional)
     * @return GetTemplateSummaryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetTemplateSummaryOutput gETGetTemplateSummary(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, String stackName, String stackSetName, String callAs, GETGetTemplateSummaryTemplateSummaryConfigParameter templateSummaryConfig) throws ApiException {
        ApiResponse<GetTemplateSummaryOutput> localVarResp = gETGetTemplateSummaryWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, stackName, stackSetName, callAs, templateSummaryConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about a new or existing template. The &lt;code&gt;GetTemplateSummary&lt;/code&gt; action is useful for viewing parameter information, such as default parameter values and parameter types, before you create or update a stack or stack set.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetTemplateSummary&lt;/code&gt; action when you submit a template, or you can get template information for a stack set, or a running or deleted stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplateSummary&lt;/code&gt; returns the template information for up to 90 days after the stack has been deleted. If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information about templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information about templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackName &lt;p&gt;The name or the stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable. For running stacks, you can specify either the stack&#39;s name or its unique stack ID. For deleted stack, you must specify the unique stack ID.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackSetName &lt;p&gt;The name or unique ID of the stack set from which the stack was created.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param templateSummaryConfig Specifies options for the &lt;code&gt;GetTemplateSummary&lt;/code&gt; API action. (optional)
     * @return ApiResponse&lt;GetTemplateSummaryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTemplateSummaryOutput> gETGetTemplateSummaryWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, String stackName, String stackSetName, String callAs, GETGetTemplateSummaryTemplateSummaryConfigParameter templateSummaryConfig) throws ApiException {
        okhttp3.Call localVarCall = gETGetTemplateSummaryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, stackName, stackSetName, callAs, templateSummaryConfig, null);
        Type localVarReturnType = new TypeToken<GetTemplateSummaryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about a new or existing template. The &lt;code&gt;GetTemplateSummary&lt;/code&gt; action is useful for viewing parameter information, such as default parameter values and parameter types, before you create or update a stack or stack set.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetTemplateSummary&lt;/code&gt; action when you submit a template, or you can get template information for a stack set, or a running or deleted stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplateSummary&lt;/code&gt; returns the template information for up to 90 days after the stack has been deleted. If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information about templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information about templates, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackName &lt;p&gt;The name or the stack ID that&#39;s associated with the stack, which aren&#39;t always interchangeable. For running stacks, you can specify either the stack&#39;s name or its unique stack ID. For deleted stack, you must specify the unique stack ID.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackSetName &lt;p&gt;The name or unique ID of the stack set from which the stack was created.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;StackName&lt;/code&gt;, &lt;code&gt;StackSetName&lt;/code&gt;, &lt;code&gt;TemplateBody&lt;/code&gt;, or &lt;code&gt;TemplateURL&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param templateSummaryConfig Specifies options for the &lt;code&gt;GetTemplateSummary&lt;/code&gt; API action. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETGetTemplateSummaryAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, String stackName, String stackSetName, String callAs, GETGetTemplateSummaryTemplateSummaryConfigParameter templateSummaryConfig, final ApiCallback<GetTemplateSummaryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETGetTemplateSummaryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, stackName, stackSetName, callAs, templateSummaryConfig, _callback);
        Type localVarReturnType = new TypeToken<GetTemplateSummaryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETImportStacksToStackSet
     * @param stackSetName The name of the stack set. The name must be unique in the Region where you create your stack set. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackIds &lt;p&gt;The IDs of the stacks you are importing into a stack set. You import up to 10 stacks per stack set at a time.&lt;/p&gt; &lt;p&gt;Specify either &lt;code&gt;StackIds&lt;/code&gt; or &lt;code&gt;StackIdsUrl&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackIdsUrl &lt;p&gt;The Amazon S3 URL which contains list of stack ids to be inputted.&lt;/p&gt; &lt;p&gt;Specify either &lt;code&gt;StackIds&lt;/code&gt; or &lt;code&gt;StackIdsUrl&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param organizationalUnitIds The list of OU ID&#39;s to which the stacks being imported has to be mapped as deployment target. (optional)
     * @param operationPreferences &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param operationId A unique, user defined, identifier for the stack set operation. (optional)
     * @param callAs &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For service managed stack sets, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETImportStacksToStackSetCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> stackIds, String stackIdsUrl, List<String> organizationalUnitIds, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ImportStacksToStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (stackIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "StackIds", stackIds));
        }

        if (stackIdsUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackIdsUrl", stackIdsUrl));
        }

        if (organizationalUnitIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "OrganizationalUnitIds", organizationalUnitIds));
        }

        if (operationPreferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationPreferences", operationPreferences));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETImportStacksToStackSetValidateBeforeCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> stackIds, String stackIdsUrl, List<String> organizationalUnitIds, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETImportStacksToStackSet(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETImportStacksToStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETImportStacksToStackSet(Async)");
        }

        return gETImportStacksToStackSetCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackIds, stackIdsUrl, organizationalUnitIds, operationPreferences, operationId, callAs, _callback);

    }

    /**
     * 
     * Import existing stacks into a new stack sets. Use the stack import operation to import up to 10 stacks into a new stack set in the same account as the source stack or in a different administrator account and Region, by specifying the stack ID of the stack you intend to import.
     * @param stackSetName The name of the stack set. The name must be unique in the Region where you create your stack set. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackIds &lt;p&gt;The IDs of the stacks you are importing into a stack set. You import up to 10 stacks per stack set at a time.&lt;/p&gt; &lt;p&gt;Specify either &lt;code&gt;StackIds&lt;/code&gt; or &lt;code&gt;StackIdsUrl&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackIdsUrl &lt;p&gt;The Amazon S3 URL which contains list of stack ids to be inputted.&lt;/p&gt; &lt;p&gt;Specify either &lt;code&gt;StackIds&lt;/code&gt; or &lt;code&gt;StackIdsUrl&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param organizationalUnitIds The list of OU ID&#39;s to which the stacks being imported has to be mapped as deployment target. (optional)
     * @param operationPreferences &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param operationId A unique, user defined, identifier for the stack set operation. (optional)
     * @param callAs &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For service managed stack sets, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ImportStacksToStackSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ImportStacksToStackSetOutput gETImportStacksToStackSet(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> stackIds, String stackIdsUrl, List<String> organizationalUnitIds, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        ApiResponse<ImportStacksToStackSetOutput> localVarResp = gETImportStacksToStackSetWithHttpInfo(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackIds, stackIdsUrl, organizationalUnitIds, operationPreferences, operationId, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Import existing stacks into a new stack sets. Use the stack import operation to import up to 10 stacks into a new stack set in the same account as the source stack or in a different administrator account and Region, by specifying the stack ID of the stack you intend to import.
     * @param stackSetName The name of the stack set. The name must be unique in the Region where you create your stack set. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackIds &lt;p&gt;The IDs of the stacks you are importing into a stack set. You import up to 10 stacks per stack set at a time.&lt;/p&gt; &lt;p&gt;Specify either &lt;code&gt;StackIds&lt;/code&gt; or &lt;code&gt;StackIdsUrl&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackIdsUrl &lt;p&gt;The Amazon S3 URL which contains list of stack ids to be inputted.&lt;/p&gt; &lt;p&gt;Specify either &lt;code&gt;StackIds&lt;/code&gt; or &lt;code&gt;StackIdsUrl&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param organizationalUnitIds The list of OU ID&#39;s to which the stacks being imported has to be mapped as deployment target. (optional)
     * @param operationPreferences &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param operationId A unique, user defined, identifier for the stack set operation. (optional)
     * @param callAs &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For service managed stack sets, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;ImportStacksToStackSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportStacksToStackSetOutput> gETImportStacksToStackSetWithHttpInfo(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> stackIds, String stackIdsUrl, List<String> organizationalUnitIds, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETImportStacksToStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackIds, stackIdsUrl, organizationalUnitIds, operationPreferences, operationId, callAs, null);
        Type localVarReturnType = new TypeToken<ImportStacksToStackSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Import existing stacks into a new stack sets. Use the stack import operation to import up to 10 stacks into a new stack set in the same account as the source stack or in a different administrator account and Region, by specifying the stack ID of the stack you intend to import.
     * @param stackSetName The name of the stack set. The name must be unique in the Region where you create your stack set. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackIds &lt;p&gt;The IDs of the stacks you are importing into a stack set. You import up to 10 stacks per stack set at a time.&lt;/p&gt; &lt;p&gt;Specify either &lt;code&gt;StackIds&lt;/code&gt; or &lt;code&gt;StackIdsUrl&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackIdsUrl &lt;p&gt;The Amazon S3 URL which contains list of stack ids to be inputted.&lt;/p&gt; &lt;p&gt;Specify either &lt;code&gt;StackIds&lt;/code&gt; or &lt;code&gt;StackIdsUrl&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param organizationalUnitIds The list of OU ID&#39;s to which the stacks being imported has to be mapped as deployment target. (optional)
     * @param operationPreferences &lt;p&gt;The user-specified preferences for how CloudFormation performs a stack set operation.&lt;/p&gt; &lt;p&gt;For more information about maximum concurrent accounts and failure tolerance, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options\&quot;&gt;Stack set operation options&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param operationId A unique, user defined, identifier for the stack set operation. (optional)
     * @param callAs &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For service managed stack sets, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETImportStacksToStackSetAsync(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> stackIds, String stackIdsUrl, List<String> organizationalUnitIds, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback<ImportStacksToStackSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETImportStacksToStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackIds, stackIdsUrl, organizationalUnitIds, operationPreferences, operationId, callAs, _callback);
        Type localVarReturnType = new TypeToken<ImportStacksToStackSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListChangeSets
     * @param stackName The name or the Amazon Resource Name (ARN) of the stack for which you want to list change sets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListChangeSets&lt;/a&gt; response output) that identifies the next page of change sets that you want to retrieve. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListChangeSetsCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListChangeSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListChangeSetsValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETListChangeSets(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListChangeSets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListChangeSets(Async)");
        }

        return gETListChangeSetsCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * Returns the ID and status of each active change set for a stack. For example, CloudFormation lists change sets that are in the &lt;code&gt;CREATE_IN_PROGRESS&lt;/code&gt; or &lt;code&gt;CREATE_PENDING&lt;/code&gt; state.
     * @param stackName The name or the Amazon Resource Name (ARN) of the stack for which you want to list change sets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListChangeSets&lt;/a&gt; response output) that identifies the next page of change sets that you want to retrieve. (optional)
     * @return ListChangeSetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListChangeSetsOutput gETListChangeSets(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListChangeSetsOutput> localVarResp = gETListChangeSetsWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the ID and status of each active change set for a stack. For example, CloudFormation lists change sets that are in the &lt;code&gt;CREATE_IN_PROGRESS&lt;/code&gt; or &lt;code&gt;CREATE_PENDING&lt;/code&gt; state.
     * @param stackName The name or the Amazon Resource Name (ARN) of the stack for which you want to list change sets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListChangeSets&lt;/a&gt; response output) that identifies the next page of change sets that you want to retrieve. (optional)
     * @return ApiResponse&lt;ListChangeSetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChangeSetsOutput> gETListChangeSetsWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListChangeSetsValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListChangeSetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the ID and status of each active change set for a stack. For example, CloudFormation lists change sets that are in the &lt;code&gt;CREATE_IN_PROGRESS&lt;/code&gt; or &lt;code&gt;CREATE_PENDING&lt;/code&gt; state.
     * @param stackName The name or the Amazon Resource Name (ARN) of the stack for which you want to list change sets. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListChangeSets&lt;/a&gt; response output) that identifies the next page of change sets that you want to retrieve. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListChangeSetsAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListChangeSetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListChangeSetsValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListChangeSetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListExports
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListExports&lt;/a&gt; response output) that identifies the next page of exported output values that you asked to retrieve. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListExportsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListExports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListExportsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListExports(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListExports(Async)");
        }

        return gETListExportsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all exported output values in the account and Region in which you call this action. Use this action to see the exported output values that you can import into other stacks. To import values, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt; Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html\&quot;&gt; CloudFormation export stack output values&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListExports&lt;/a&gt; response output) that identifies the next page of exported output values that you asked to retrieve. (optional)
     * @return ListExportsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListExportsOutput gETListExports(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListExportsOutput> localVarResp = gETListExportsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all exported output values in the account and Region in which you call this action. Use this action to see the exported output values that you can import into other stacks. To import values, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt; Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html\&quot;&gt; CloudFormation export stack output values&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListExports&lt;/a&gt; response output) that identifies the next page of exported output values that you asked to retrieve. (optional)
     * @return ApiResponse&lt;ListExportsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListExportsOutput> gETListExportsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListExportsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListExportsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all exported output values in the account and Region in which you call this action. Use this action to see the exported output values that you can import into other stacks. To import values, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt; Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html\&quot;&gt; CloudFormation export stack output values&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListExports&lt;/a&gt; response output) that identifies the next page of exported output values that you asked to retrieve. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListExportsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListExportsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListExportsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListExportsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListImports
     * @param exportName The name of the exported output value. CloudFormation returns the stack names that are importing this value. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListImports&lt;/a&gt; response output) that identifies the next page of stacks that are importing the specified exported output value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListImportsCall(String exportName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListImports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExportName", exportName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListImportsValidateBeforeCall(String exportName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportName' is set
        if (exportName == null) {
            throw new ApiException("Missing the required parameter 'exportName' when calling gETListImports(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListImports(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListImports(Async)");
        }

        return gETListImportsCall(exportName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all stacks that are importing an exported output value. To modify or remove an exported output value, first use this action to see which stacks are using it. To see the exported output values in your account, see &lt;a&gt;ListExports&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about importing an exported output value, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt;Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt;
     * @param exportName The name of the exported output value. CloudFormation returns the stack names that are importing this value. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListImports&lt;/a&gt; response output) that identifies the next page of stacks that are importing the specified exported output value. (optional)
     * @return ListImportsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListImportsOutput gETListImports(String exportName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListImportsOutput> localVarResp = gETListImportsWithHttpInfo(exportName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all stacks that are importing an exported output value. To modify or remove an exported output value, first use this action to see which stacks are using it. To see the exported output values in your account, see &lt;a&gt;ListExports&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about importing an exported output value, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt;Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt;
     * @param exportName The name of the exported output value. CloudFormation returns the stack names that are importing this value. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListImports&lt;/a&gt; response output) that identifies the next page of stacks that are importing the specified exported output value. (optional)
     * @return ApiResponse&lt;ListImportsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListImportsOutput> gETListImportsWithHttpInfo(String exportName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListImportsValidateBeforeCall(exportName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListImportsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all stacks that are importing an exported output value. To modify or remove an exported output value, first use this action to see which stacks are using it. To see the exported output values in your account, see &lt;a&gt;ListExports&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about importing an exported output value, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt;Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt;
     * @param exportName The name of the exported output value. CloudFormation returns the stack names that are importing this value. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string (provided by the &lt;a&gt;ListImports&lt;/a&gt; response output) that identifies the next page of stacks that are importing the specified exported output value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListImportsAsync(String exportName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListImportsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListImportsValidateBeforeCall(exportName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListImportsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListStackInstanceResourceDrifts
     * @param stackSetName The name or unique ID of the stack set that you want to list drifted resources for. (required)
     * @param stackInstanceAccount The name of the Amazon Web Services account that you want to list resource drifts for. (required)
     * @param stackInstanceRegion The name of the Region where you want to list resource drifts. (required)
     * @param operationId The unique ID of the drift operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param stackInstanceResourceDriftStatuses &lt;p&gt;The resource drift status of the stack instance. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt;: The resource differs from its expected template configuration in that the resource has been deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MODIFIED&lt;/code&gt;: One or more resource properties differ from their expected template values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IN_SYNC&lt;/code&gt;: The resource&#39;s actual configuration matches its expected template configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_CHECKED&lt;/code&gt;: CloudFormation doesn&#39;t currently return this value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackInstanceResourceDriftsCall(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackResourceDriftStatus> stackInstanceResourceDriftStatuses, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListStackInstanceResourceDrifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (stackInstanceResourceDriftStatuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "StackInstanceResourceDriftStatuses", stackInstanceResourceDriftStatuses));
        }

        if (stackInstanceAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackInstanceAccount", stackInstanceAccount));
        }

        if (stackInstanceRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackInstanceRegion", stackInstanceRegion));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListStackInstanceResourceDriftsValidateBeforeCall(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackResourceDriftStatus> stackInstanceResourceDriftStatuses, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETListStackInstanceResourceDrifts(Async)");
        }

        // verify the required parameter 'stackInstanceAccount' is set
        if (stackInstanceAccount == null) {
            throw new ApiException("Missing the required parameter 'stackInstanceAccount' when calling gETListStackInstanceResourceDrifts(Async)");
        }

        // verify the required parameter 'stackInstanceRegion' is set
        if (stackInstanceRegion == null) {
            throw new ApiException("Missing the required parameter 'stackInstanceRegion' when calling gETListStackInstanceResourceDrifts(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling gETListStackInstanceResourceDrifts(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListStackInstanceResourceDrifts(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListStackInstanceResourceDrifts(Async)");
        }

        return gETListStackInstanceResourceDriftsCall(stackSetName, stackInstanceAccount, stackInstanceRegion, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, stackInstanceResourceDriftStatuses, callAs, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns drift information for resources in a stack instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ListStackInstanceResourceDrifts&lt;/code&gt; returns drift information for the most recent drift detection operation. If an operation is in progress, it may only return partial results.&lt;/p&gt; &lt;/note&gt;
     * @param stackSetName The name or unique ID of the stack set that you want to list drifted resources for. (required)
     * @param stackInstanceAccount The name of the Amazon Web Services account that you want to list resource drifts for. (required)
     * @param stackInstanceRegion The name of the Region where you want to list resource drifts. (required)
     * @param operationId The unique ID of the drift operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param stackInstanceResourceDriftStatuses &lt;p&gt;The resource drift status of the stack instance. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt;: The resource differs from its expected template configuration in that the resource has been deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MODIFIED&lt;/code&gt;: One or more resource properties differ from their expected template values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IN_SYNC&lt;/code&gt;: The resource&#39;s actual configuration matches its expected template configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_CHECKED&lt;/code&gt;: CloudFormation doesn&#39;t currently return this value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ListStackInstanceResourceDriftsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListStackInstanceResourceDriftsOutput gETListStackInstanceResourceDrifts(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackResourceDriftStatus> stackInstanceResourceDriftStatuses, String callAs) throws ApiException {
        ApiResponse<ListStackInstanceResourceDriftsOutput> localVarResp = gETListStackInstanceResourceDriftsWithHttpInfo(stackSetName, stackInstanceAccount, stackInstanceRegion, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, stackInstanceResourceDriftStatuses, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns drift information for resources in a stack instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ListStackInstanceResourceDrifts&lt;/code&gt; returns drift information for the most recent drift detection operation. If an operation is in progress, it may only return partial results.&lt;/p&gt; &lt;/note&gt;
     * @param stackSetName The name or unique ID of the stack set that you want to list drifted resources for. (required)
     * @param stackInstanceAccount The name of the Amazon Web Services account that you want to list resource drifts for. (required)
     * @param stackInstanceRegion The name of the Region where you want to list resource drifts. (required)
     * @param operationId The unique ID of the drift operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param stackInstanceResourceDriftStatuses &lt;p&gt;The resource drift status of the stack instance. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt;: The resource differs from its expected template configuration in that the resource has been deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MODIFIED&lt;/code&gt;: One or more resource properties differ from their expected template values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IN_SYNC&lt;/code&gt;: The resource&#39;s actual configuration matches its expected template configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_CHECKED&lt;/code&gt;: CloudFormation doesn&#39;t currently return this value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;ListStackInstanceResourceDriftsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackInstanceResourceDriftsOutput> gETListStackInstanceResourceDriftsWithHttpInfo(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackResourceDriftStatus> stackInstanceResourceDriftStatuses, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETListStackInstanceResourceDriftsValidateBeforeCall(stackSetName, stackInstanceAccount, stackInstanceRegion, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, stackInstanceResourceDriftStatuses, callAs, null);
        Type localVarReturnType = new TypeToken<ListStackInstanceResourceDriftsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns drift information for resources in a stack instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ListStackInstanceResourceDrifts&lt;/code&gt; returns drift information for the most recent drift detection operation. If an operation is in progress, it may only return partial results.&lt;/p&gt; &lt;/note&gt;
     * @param stackSetName The name or unique ID of the stack set that you want to list drifted resources for. (required)
     * @param stackInstanceAccount The name of the Amazon Web Services account that you want to list resource drifts for. (required)
     * @param stackInstanceRegion The name of the Region where you want to list resource drifts. (required)
     * @param operationId The unique ID of the drift operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param stackInstanceResourceDriftStatuses &lt;p&gt;The resource drift status of the stack instance. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DELETED&lt;/code&gt;: The resource differs from its expected template configuration in that the resource has been deleted.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;MODIFIED&lt;/code&gt;: One or more resource properties differ from their expected template values.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IN_SYNC&lt;/code&gt;: The resource&#39;s actual configuration matches its expected template configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NOT_CHECKED&lt;/code&gt;: CloudFormation doesn&#39;t currently return this value.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackInstanceResourceDriftsAsync(String stackSetName, String stackInstanceAccount, String stackInstanceRegion, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackResourceDriftStatus> stackInstanceResourceDriftStatuses, String callAs, final ApiCallback<ListStackInstanceResourceDriftsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListStackInstanceResourceDriftsValidateBeforeCall(stackSetName, stackInstanceAccount, stackInstanceRegion, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, stackInstanceResourceDriftStatuses, callAs, _callback);
        Type localVarReturnType = new TypeToken<ListStackInstanceResourceDriftsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListStackInstances
     * @param stackSetName The name or unique ID of the stack set that you want to list stack instances for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous request didn&#39;t return all the remaining results, the response&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackInstances&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param filters The filter to apply to stack instances (optional)
     * @param stackInstanceAccount The name of the Amazon Web Services account that you want to list stack instances for. (optional)
     * @param stackInstanceRegion The name of the Region where you want to list stack instances. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackInstancesCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackInstanceFilter> filters, String stackInstanceAccount, String stackInstanceRegion, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListStackInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (stackInstanceAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackInstanceAccount", stackInstanceAccount));
        }

        if (stackInstanceRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackInstanceRegion", stackInstanceRegion));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListStackInstancesValidateBeforeCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackInstanceFilter> filters, String stackInstanceAccount, String stackInstanceRegion, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETListStackInstances(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListStackInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListStackInstances(Async)");
        }

        return gETListStackInstancesCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, filters, stackInstanceAccount, stackInstanceRegion, callAs, _callback);

    }

    /**
     * 
     * Returns summary information about stack instances that are associated with the specified stack set. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region, or that have a specific status.
     * @param stackSetName The name or unique ID of the stack set that you want to list stack instances for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous request didn&#39;t return all the remaining results, the response&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackInstances&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param filters The filter to apply to stack instances (optional)
     * @param stackInstanceAccount The name of the Amazon Web Services account that you want to list stack instances for. (optional)
     * @param stackInstanceRegion The name of the Region where you want to list stack instances. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ListStackInstancesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListStackInstancesOutput gETListStackInstances(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackInstanceFilter> filters, String stackInstanceAccount, String stackInstanceRegion, String callAs) throws ApiException {
        ApiResponse<ListStackInstancesOutput> localVarResp = gETListStackInstancesWithHttpInfo(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, filters, stackInstanceAccount, stackInstanceRegion, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about stack instances that are associated with the specified stack set. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region, or that have a specific status.
     * @param stackSetName The name or unique ID of the stack set that you want to list stack instances for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous request didn&#39;t return all the remaining results, the response&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackInstances&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param filters The filter to apply to stack instances (optional)
     * @param stackInstanceAccount The name of the Amazon Web Services account that you want to list stack instances for. (optional)
     * @param stackInstanceRegion The name of the Region where you want to list stack instances. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;ListStackInstancesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackInstancesOutput> gETListStackInstancesWithHttpInfo(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackInstanceFilter> filters, String stackInstanceAccount, String stackInstanceRegion, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETListStackInstancesValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, filters, stackInstanceAccount, stackInstanceRegion, callAs, null);
        Type localVarReturnType = new TypeToken<ListStackInstancesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about stack instances that are associated with the specified stack set. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region, or that have a specific status.
     * @param stackSetName The name or unique ID of the stack set that you want to list stack instances for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous request didn&#39;t return all the remaining results, the response&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackInstances&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param filters The filter to apply to stack instances (optional)
     * @param stackInstanceAccount The name of the Amazon Web Services account that you want to list stack instances for. (optional)
     * @param stackInstanceRegion The name of the Region where you want to list stack instances. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackInstancesAsync(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, List<StackInstanceFilter> filters, String stackInstanceAccount, String stackInstanceRegion, String callAs, final ApiCallback<ListStackInstancesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListStackInstancesValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, filters, stackInstanceAccount, stackInstanceRegion, callAs, _callback);
        Type localVarReturnType = new TypeToken<ListStackInstancesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListStackResources
     * @param stackName &lt;p&gt;The name or the unique stack ID that is associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of stack resources that you want to retrieve. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackResourcesCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListStackResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListStackResourcesValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETListStackResources(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListStackResources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListStackResources(Async)");
        }

        return gETListStackResourcesCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns descriptions of all resources of the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, ListStackResources returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param stackName &lt;p&gt;The name or the unique stack ID that is associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of stack resources that you want to retrieve. (optional)
     * @return ListStackResourcesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListStackResourcesOutput gETListStackResources(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        ApiResponse<ListStackResourcesOutput> localVarResp = gETListStackResourcesWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns descriptions of all resources of the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, ListStackResources returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param stackName &lt;p&gt;The name or the unique stack ID that is associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of stack resources that you want to retrieve. (optional)
     * @return ApiResponse&lt;ListStackResourcesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackResourcesOutput> gETListStackResourcesWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListStackResourcesValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, null);
        Type localVarReturnType = new TypeToken<ListStackResourcesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns descriptions of all resources of the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, ListStackResources returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param stackName &lt;p&gt;The name or the unique stack ID that is associated with the stack, which aren&#39;t always interchangeable:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Running stacks: You can specify either the stack&#39;s name or its unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deleted stacks: You must specify the unique stack ID.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Default: There is no default value.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of stack resources that you want to retrieve. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackResourcesAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, final ApiCallback<ListStackResourcesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListStackResourcesValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListStackResourcesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListStackSetOperationResults
     * @param stackSetName The name or unique ID of the stack set that you want to get operation results for. (required)
     * @param operationId The ID of the stack set operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSetOperationResults&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters The filter to apply to operation results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackSetOperationResultsCall(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs, List<OperationResultFilter> filters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListStackSetOperationResults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListStackSetOperationResultsValidateBeforeCall(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs, List<OperationResultFilter> filters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETListStackSetOperationResults(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling gETListStackSetOperationResults(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListStackSetOperationResults(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListStackSetOperationResults(Async)");
        }

        return gETListStackSetOperationResultsCall(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, callAs, filters, _callback);

    }

    /**
     * 
     * Returns summary information about the results of a stack set operation.
     * @param stackSetName The name or unique ID of the stack set that you want to get operation results for. (required)
     * @param operationId The ID of the stack set operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSetOperationResults&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters The filter to apply to operation results. (optional)
     * @return ListStackSetOperationResultsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListStackSetOperationResultsOutput gETListStackSetOperationResults(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs, List<OperationResultFilter> filters) throws ApiException {
        ApiResponse<ListStackSetOperationResultsOutput> localVarResp = gETListStackSetOperationResultsWithHttpInfo(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, callAs, filters);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about the results of a stack set operation.
     * @param stackSetName The name or unique ID of the stack set that you want to get operation results for. (required)
     * @param operationId The ID of the stack set operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSetOperationResults&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters The filter to apply to operation results. (optional)
     * @return ApiResponse&lt;ListStackSetOperationResultsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackSetOperationResultsOutput> gETListStackSetOperationResultsWithHttpInfo(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs, List<OperationResultFilter> filters) throws ApiException {
        okhttp3.Call localVarCall = gETListStackSetOperationResultsValidateBeforeCall(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, callAs, filters, null);
        Type localVarReturnType = new TypeToken<ListStackSetOperationResultsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about the results of a stack set operation.
     * @param stackSetName The name or unique ID of the stack set that you want to get operation results for. (required)
     * @param operationId The ID of the stack set operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSetOperationResults&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param filters The filter to apply to operation results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackSetOperationResultsAsync(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs, List<OperationResultFilter> filters, final ApiCallback<ListStackSetOperationResultsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListStackSetOperationResultsValidateBeforeCall(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, callAs, filters, _callback);
        Type localVarReturnType = new TypeToken<ListStackSetOperationResultsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListStackSetOperations
     * @param stackSetName The name or unique ID of the stack set that you want to get operation summaries for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSetOperations&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackSetOperationsCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListStackSetOperations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListStackSetOperationsValidateBeforeCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETListStackSetOperations(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListStackSetOperations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListStackSetOperations(Async)");
        }

        return gETListStackSetOperationsCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, callAs, _callback);

    }

    /**
     * 
     * Returns summary information about operations performed on a stack set.
     * @param stackSetName The name or unique ID of the stack set that you want to get operation summaries for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSetOperations&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ListStackSetOperationsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListStackSetOperationsOutput gETListStackSetOperations(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs) throws ApiException {
        ApiResponse<ListStackSetOperationsOutput> localVarResp = gETListStackSetOperationsWithHttpInfo(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about operations performed on a stack set.
     * @param stackSetName The name or unique ID of the stack set that you want to get operation summaries for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSetOperations&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;ListStackSetOperationsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackSetOperationsOutput> gETListStackSetOperationsWithHttpInfo(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETListStackSetOperationsValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, callAs, null);
        Type localVarReturnType = new TypeToken<ListStackSetOperationsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about operations performed on a stack set.
     * @param stackSetName The name or unique ID of the stack set that you want to get operation summaries for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSetOperations&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackSetOperationsAsync(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String callAs, final ApiCallback<ListStackSetOperationsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListStackSetOperationsValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, callAs, _callback);
        Type localVarReturnType = new TypeToken<ListStackSetOperationsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListStackSets
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSets&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param status The status of the stack sets that you want to get summary information about. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackSetsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String status, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListStackSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListStackSetsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String status, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListStackSets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListStackSets(Async)");
        }

        return gETListStackSetsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, status, callAs, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns summary information about stack sets that are associated with the user.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[Self-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to your Amazon Web Services account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all self-managed stack sets in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to the organization&#39;s management account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets in the management account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt; while signed in to your member account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets with service-managed permissions in the management account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSets&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param status The status of the stack sets that you want to get summary information about. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ListStackSetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListStackSetsOutput gETListStackSets(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String status, String callAs) throws ApiException {
        ApiResponse<ListStackSetsOutput> localVarResp = gETListStackSetsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, status, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns summary information about stack sets that are associated with the user.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[Self-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to your Amazon Web Services account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all self-managed stack sets in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to the organization&#39;s management account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets in the management account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt; while signed in to your member account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets with service-managed permissions in the management account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSets&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param status The status of the stack sets that you want to get summary information about. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;ListStackSetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackSetsOutput> gETListStackSetsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String status, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETListStackSetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, status, callAs, null);
        Type localVarReturnType = new TypeToken<ListStackSetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns summary information about stack sets that are associated with the user.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[Self-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to your Amazon Web Services account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all self-managed stack sets in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to the organization&#39;s management account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets in the management account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt; while signed in to your member account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets with service-managed permissions in the management account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call &lt;code&gt;ListStackSets&lt;/code&gt; again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param status The status of the stack sets that you want to get summary information about. (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStackSetsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String status, String callAs, final ApiCallback<ListStackSetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListStackSetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, status, callAs, _callback);
        Type localVarReturnType = new TypeToken<ListStackSetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListStacks
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of stacks that you want to retrieve. (optional)
     * @param stackStatusFilter Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the &lt;code&gt;StackStatus&lt;/code&gt; parameter of the &lt;a&gt;Stack&lt;/a&gt; data type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStacksCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, List<StackStatus> stackStatusFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListStacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (stackStatusFilter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "StackStatusFilter", stackStatusFilter));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListStacksValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, List<StackStatus> stackStatusFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListStacks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListStacks(Async)");
        }

        return gETListStacksCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, stackStatusFilter, _callback);

    }

    /**
     * 
     * Returns the summary information for stacks whose status matches the specified StackStatusFilter. Summary information for stacks that have been deleted is kept for 90 days after the stack is deleted. If no StackStatusFilter is specified, summary information for all stacks is returned (including existing stacks and stacks that have been deleted).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of stacks that you want to retrieve. (optional)
     * @param stackStatusFilter Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the &lt;code&gt;StackStatus&lt;/code&gt; parameter of the &lt;a&gt;Stack&lt;/a&gt; data type. (optional)
     * @return ListStacksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListStacksOutput gETListStacks(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, List<StackStatus> stackStatusFilter) throws ApiException {
        ApiResponse<ListStacksOutput> localVarResp = gETListStacksWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, stackStatusFilter);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the summary information for stacks whose status matches the specified StackStatusFilter. Summary information for stacks that have been deleted is kept for 90 days after the stack is deleted. If no StackStatusFilter is specified, summary information for all stacks is returned (including existing stacks and stacks that have been deleted).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of stacks that you want to retrieve. (optional)
     * @param stackStatusFilter Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the &lt;code&gt;StackStatus&lt;/code&gt; parameter of the &lt;a&gt;Stack&lt;/a&gt; data type. (optional)
     * @return ApiResponse&lt;ListStacksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStacksOutput> gETListStacksWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, List<StackStatus> stackStatusFilter) throws ApiException {
        okhttp3.Call localVarCall = gETListStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, stackStatusFilter, null);
        Type localVarReturnType = new TypeToken<ListStacksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the summary information for stacks whose status matches the specified StackStatusFilter. Summary information for stacks that have been deleted is kept for 90 days after the stack is deleted. If no StackStatusFilter is specified, summary information for all stacks is returned (including existing stacks and stacks that have been deleted).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken A string that identifies the next page of stacks that you want to retrieve. (optional)
     * @param stackStatusFilter Stack status to use as a filter. Specify one or more stack status codes to list only stacks with the specified status codes. For a complete list of stack status codes, see the &lt;code&gt;StackStatus&lt;/code&gt; parameter of the &lt;a&gt;Stack&lt;/a&gt; data type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListStacksAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, List<StackStatus> stackStatusFilter, final ApiCallback<ListStacksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, stackStatusFilter, _callback);
        Type localVarReturnType = new TypeToken<ListStacksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTypeRegistrations
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeArn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param registrationStatusFilter &lt;p&gt;The current status of the extension registration request.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;IN_PROGRESS&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTypeRegistrationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String typeArn, String registrationStatusFilter, Integer maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTypeRegistrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (typeArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeArn", typeArn));
        }

        if (registrationStatusFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RegistrationStatusFilter", registrationStatusFilter));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTypeRegistrationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String typeArn, String registrationStatusFilter, Integer maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTypeRegistrations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTypeRegistrations(Async)");
        }

        return gETListTypeRegistrationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, typeArn, registrationStatusFilter, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a list of registration tokens for the specified extension(s).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeArn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param registrationStatusFilter &lt;p&gt;The current status of the extension registration request.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;IN_PROGRESS&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @return ListTypeRegistrationsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ListTypeRegistrationsOutput gETListTypeRegistrations(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String typeArn, String registrationStatusFilter, Integer maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTypeRegistrationsOutput> localVarResp = gETListTypeRegistrationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, typeArn, registrationStatusFilter, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of registration tokens for the specified extension(s).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeArn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param registrationStatusFilter &lt;p&gt;The current status of the extension registration request.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;IN_PROGRESS&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ListTypeRegistrationsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTypeRegistrationsOutput> gETListTypeRegistrationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String typeArn, String registrationStatusFilter, Integer maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListTypeRegistrationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, typeArn, registrationStatusFilter, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTypeRegistrationsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of registration tokens for the specified extension(s).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeArn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param registrationStatusFilter &lt;p&gt;The current status of the extension registration request.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;IN_PROGRESS&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTypeRegistrationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String typeArn, String registrationStatusFilter, Integer maxResults, String nextToken, final ApiCallback<ListTypeRegistrationsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTypeRegistrationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, typeArn, registrationStatusFilter, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTypeRegistrationsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTypeVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param deprecatedStatus &lt;p&gt;The deprecation status of the extension versions that you want to get summary information about.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LIVE&lt;/code&gt;: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DEPRECATED&lt;/code&gt;: The extension version has been deregistered and can no longer be used in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The publisher ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Extensions published by Amazon aren&#39;t assigned a publisher ID.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTypeVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, Integer maxResults, String nextToken, String deprecatedStatus, String publisherId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTypeVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (arn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Arn", arn));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (deprecatedStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeprecatedStatus", deprecatedStatus));
        }

        if (publisherId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PublisherId", publisherId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTypeVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, Integer maxResults, String nextToken, String deprecatedStatus, String publisherId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTypeVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTypeVersions(Async)");
        }

        return gETListTypeVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, arn, maxResults, nextToken, deprecatedStatus, publisherId, _callback);

    }

    /**
     * 
     * Returns summary information about the versions of an extension.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param deprecatedStatus &lt;p&gt;The deprecation status of the extension versions that you want to get summary information about.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LIVE&lt;/code&gt;: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DEPRECATED&lt;/code&gt;: The extension version has been deregistered and can no longer be used in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The publisher ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Extensions published by Amazon aren&#39;t assigned a publisher ID.&lt;/p&gt; (optional)
     * @return ListTypeVersionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ListTypeVersionsOutput gETListTypeVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, Integer maxResults, String nextToken, String deprecatedStatus, String publisherId) throws ApiException {
        ApiResponse<ListTypeVersionsOutput> localVarResp = gETListTypeVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, arn, maxResults, nextToken, deprecatedStatus, publisherId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about the versions of an extension.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param deprecatedStatus &lt;p&gt;The deprecation status of the extension versions that you want to get summary information about.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LIVE&lt;/code&gt;: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DEPRECATED&lt;/code&gt;: The extension version has been deregistered and can no longer be used in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The publisher ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Extensions published by Amazon aren&#39;t assigned a publisher ID.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ListTypeVersionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTypeVersionsOutput> gETListTypeVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, Integer maxResults, String nextToken, String deprecatedStatus, String publisherId) throws ApiException {
        okhttp3.Call localVarCall = gETListTypeVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, arn, maxResults, nextToken, deprecatedStatus, publisherId, null);
        Type localVarReturnType = new TypeToken<ListTypeVersionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about the versions of an extension.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The kind of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all of the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param deprecatedStatus &lt;p&gt;The deprecation status of the extension versions that you want to get summary information about.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LIVE&lt;/code&gt;: The extension version is registered and can be used in CloudFormation operations, dependent on its provisioning behavior and visibility scope.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DEPRECATED&lt;/code&gt;: The extension version has been deregistered and can no longer be used in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publisherId &lt;p&gt;The publisher ID of the extension publisher.&lt;/p&gt; &lt;p&gt;Extensions published by Amazon aren&#39;t assigned a publisher ID.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTypeVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String typeName, String arn, Integer maxResults, String nextToken, String deprecatedStatus, String publisherId, final ApiCallback<ListTypeVersionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTypeVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, typeName, arn, maxResults, nextToken, deprecatedStatus, publisherId, _callback);
        Type localVarReturnType = new TypeToken<ListTypeVersionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param visibility &lt;p&gt;The scope at which the extensions are visible and usable in CloudFormation operations.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PRIVATE&lt;/code&gt;: Extensions that are visible and usable within this account and Region. This includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Private extensions you have registered in this account and Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Public extensions that you have activated in this account and Region.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PUBLIC&lt;/code&gt;: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;PRIVATE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param provisioningType &lt;p&gt;For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FULLY_MUTABLE&lt;/code&gt;: The resource type includes an update handler to process updates to the type during stack update operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMMUTABLE&lt;/code&gt;: The resource type doesn&#39;t include an update handler, so the type can&#39;t be updated and must instead be replaced during stack update operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NON_PROVISIONABLE&lt;/code&gt;: The resource type doesn&#39;t include create, read, and delete handlers, and therefore can&#39;t actually be provisioned.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;FULLY_MUTABLE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param deprecatedStatus &lt;p&gt;The deprecation status of the extension that you want to get summary information about.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LIVE&lt;/code&gt;: The extension is registered for use in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DEPRECATED&lt;/code&gt;: The extension has been deregistered and can no longer be used in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param type The type of extension. (optional)
     * @param filters &lt;p&gt;Filter criteria to use in determining which extensions to return.&lt;/p&gt; &lt;p&gt;Filters must be compatible with &lt;code&gt;Visibility&lt;/code&gt; to return valid results. For example, specifying &lt;code&gt;AWS_TYPES&lt;/code&gt; for &lt;code&gt;Category&lt;/code&gt; and &lt;code&gt;PRIVATE&lt;/code&gt; for &lt;code&gt;Visibility&lt;/code&gt; returns an empty list of types, but specifying &lt;code&gt;PUBLIC&lt;/code&gt; for &lt;code&gt;Visibility&lt;/code&gt; returns the desired list.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String visibility, String provisioningType, String deprecatedStatus, String type, GETListTypesFiltersParameter filters, Integer maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Visibility", visibility));
        }

        if (provisioningType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProvisioningType", provisioningType));
        }

        if (deprecatedStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeprecatedStatus", deprecatedStatus));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Filters", filters));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String visibility, String provisioningType, String deprecatedStatus, String type, GETListTypesFiltersParameter filters, Integer maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTypes(Async)");
        }

        return gETListTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, visibility, provisioningType, deprecatedStatus, type, filters, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns summary information about extension that have been registered with CloudFormation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param visibility &lt;p&gt;The scope at which the extensions are visible and usable in CloudFormation operations.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PRIVATE&lt;/code&gt;: Extensions that are visible and usable within this account and Region. This includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Private extensions you have registered in this account and Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Public extensions that you have activated in this account and Region.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PUBLIC&lt;/code&gt;: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;PRIVATE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param provisioningType &lt;p&gt;For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FULLY_MUTABLE&lt;/code&gt;: The resource type includes an update handler to process updates to the type during stack update operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMMUTABLE&lt;/code&gt;: The resource type doesn&#39;t include an update handler, so the type can&#39;t be updated and must instead be replaced during stack update operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NON_PROVISIONABLE&lt;/code&gt;: The resource type doesn&#39;t include create, read, and delete handlers, and therefore can&#39;t actually be provisioned.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;FULLY_MUTABLE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param deprecatedStatus &lt;p&gt;The deprecation status of the extension that you want to get summary information about.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LIVE&lt;/code&gt;: The extension is registered for use in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DEPRECATED&lt;/code&gt;: The extension has been deregistered and can no longer be used in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param type The type of extension. (optional)
     * @param filters &lt;p&gt;Filter criteria to use in determining which extensions to return.&lt;/p&gt; &lt;p&gt;Filters must be compatible with &lt;code&gt;Visibility&lt;/code&gt; to return valid results. For example, specifying &lt;code&gt;AWS_TYPES&lt;/code&gt; for &lt;code&gt;Category&lt;/code&gt; and &lt;code&gt;PRIVATE&lt;/code&gt; for &lt;code&gt;Visibility&lt;/code&gt; returns an empty list of types, but specifying &lt;code&gt;PUBLIC&lt;/code&gt; for &lt;code&gt;Visibility&lt;/code&gt; returns the desired list.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @return ListTypesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ListTypesOutput gETListTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String visibility, String provisioningType, String deprecatedStatus, String type, GETListTypesFiltersParameter filters, Integer maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTypesOutput> localVarResp = gETListTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, visibility, provisioningType, deprecatedStatus, type, filters, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about extension that have been registered with CloudFormation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param visibility &lt;p&gt;The scope at which the extensions are visible and usable in CloudFormation operations.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PRIVATE&lt;/code&gt;: Extensions that are visible and usable within this account and Region. This includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Private extensions you have registered in this account and Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Public extensions that you have activated in this account and Region.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PUBLIC&lt;/code&gt;: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;PRIVATE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param provisioningType &lt;p&gt;For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FULLY_MUTABLE&lt;/code&gt;: The resource type includes an update handler to process updates to the type during stack update operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMMUTABLE&lt;/code&gt;: The resource type doesn&#39;t include an update handler, so the type can&#39;t be updated and must instead be replaced during stack update operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NON_PROVISIONABLE&lt;/code&gt;: The resource type doesn&#39;t include create, read, and delete handlers, and therefore can&#39;t actually be provisioned.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;FULLY_MUTABLE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param deprecatedStatus &lt;p&gt;The deprecation status of the extension that you want to get summary information about.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LIVE&lt;/code&gt;: The extension is registered for use in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DEPRECATED&lt;/code&gt;: The extension has been deregistered and can no longer be used in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param type The type of extension. (optional)
     * @param filters &lt;p&gt;Filter criteria to use in determining which extensions to return.&lt;/p&gt; &lt;p&gt;Filters must be compatible with &lt;code&gt;Visibility&lt;/code&gt; to return valid results. For example, specifying &lt;code&gt;AWS_TYPES&lt;/code&gt; for &lt;code&gt;Category&lt;/code&gt; and &lt;code&gt;PRIVATE&lt;/code&gt; for &lt;code&gt;Visibility&lt;/code&gt; returns an empty list of types, but specifying &lt;code&gt;PUBLIC&lt;/code&gt; for &lt;code&gt;Visibility&lt;/code&gt; returns the desired list.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ListTypesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTypesOutput> gETListTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String visibility, String provisioningType, String deprecatedStatus, String type, GETListTypesFiltersParameter filters, Integer maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = gETListTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, visibility, provisioningType, deprecatedStatus, type, filters, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTypesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about extension that have been registered with CloudFormation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param visibility &lt;p&gt;The scope at which the extensions are visible and usable in CloudFormation operations.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PRIVATE&lt;/code&gt;: Extensions that are visible and usable within this account and Region. This includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Private extensions you have registered in this account and Region.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Public extensions that you have activated in this account and Region.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PUBLIC&lt;/code&gt;: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;PRIVATE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param provisioningType &lt;p&gt;For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FULLY_MUTABLE&lt;/code&gt;: The resource type includes an update handler to process updates to the type during stack update operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMMUTABLE&lt;/code&gt;: The resource type doesn&#39;t include an update handler, so the type can&#39;t be updated and must instead be replaced during stack update operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NON_PROVISIONABLE&lt;/code&gt;: The resource type doesn&#39;t include create, read, and delete handlers, and therefore can&#39;t actually be provisioned.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;FULLY_MUTABLE&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param deprecatedStatus &lt;p&gt;The deprecation status of the extension that you want to get summary information about.&lt;/p&gt; &lt;p&gt;Valid values include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;LIVE&lt;/code&gt;: The extension is registered for use in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DEPRECATED&lt;/code&gt;: The extension has been deregistered and can no longer be used in CloudFormation operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param type The type of extension. (optional)
     * @param filters &lt;p&gt;Filter criteria to use in determining which extensions to return.&lt;/p&gt; &lt;p&gt;Filters must be compatible with &lt;code&gt;Visibility&lt;/code&gt; to return valid results. For example, specifying &lt;code&gt;AWS_TYPES&lt;/code&gt; for &lt;code&gt;Category&lt;/code&gt; and &lt;code&gt;PRIVATE&lt;/code&gt; for &lt;code&gt;Visibility&lt;/code&gt; returns an empty list of types, but specifying &lt;code&gt;PUBLIC&lt;/code&gt; for &lt;code&gt;Visibility&lt;/code&gt; returns the desired list.&lt;/p&gt; (optional)
     * @param maxResults The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a &lt;code&gt;NextToken&lt;/code&gt; value that you can assign to the &lt;code&gt;NextToken&lt;/code&gt; request parameter to get the next set of results. (optional)
     * @param nextToken If the previous paginated request didn&#39;t return all the remaining results, the response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter. If there are no remaining results, the previous response object&#39;s &lt;code&gt;NextToken&lt;/code&gt; parameter is set to &lt;code&gt;null&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String visibility, String provisioningType, String deprecatedStatus, String type, GETListTypesFiltersParameter filters, Integer maxResults, String nextToken, final ApiCallback<ListTypesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, visibility, provisioningType, deprecatedStatus, type, filters, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTypesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPublishType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The type of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publicVersionNumber &lt;p&gt;The version number to assign to this version of the extension.&lt;/p&gt; &lt;p&gt;Use the following format, and adhere to semantic versioning when assigning a version number to your extension:&lt;/p&gt; &lt;p&gt; &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://semver.org/\&quot;&gt;Semantic Versioning 2.0.0&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version number, CloudFormation increments the version number by one minor version release.&lt;/p&gt; &lt;p&gt;You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be &lt;code&gt;1.0.0&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPublishTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String arn, String typeName, String publicVersionNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PublishType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (arn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Arn", arn));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (publicVersionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PublicVersionNumber", publicVersionNumber));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPublishTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String arn, String typeName, String publicVersionNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPublishType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPublishType(Async)");
        }

        return gETPublishTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, arn, typeName, publicVersionNumber, _callback);

    }

    /**
     * 
     * &lt;p&gt;Publishes the specified extension to the CloudFormation registry as a public extension in this Region. Public extensions are available for use by all CloudFormation users. For more information about publishing extensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To publish an extension, you must be registered as a publisher with CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The type of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publicVersionNumber &lt;p&gt;The version number to assign to this version of the extension.&lt;/p&gt; &lt;p&gt;Use the following format, and adhere to semantic versioning when assigning a version number to your extension:&lt;/p&gt; &lt;p&gt; &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://semver.org/\&quot;&gt;Semantic Versioning 2.0.0&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version number, CloudFormation increments the version number by one minor version release.&lt;/p&gt; &lt;p&gt;You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be &lt;code&gt;1.0.0&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return PublishTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public PublishTypeOutput gETPublishType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String arn, String typeName, String publicVersionNumber) throws ApiException {
        ApiResponse<PublishTypeOutput> localVarResp = gETPublishTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, arn, typeName, publicVersionNumber);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Publishes the specified extension to the CloudFormation registry as a public extension in this Region. Public extensions are available for use by all CloudFormation users. For more information about publishing extensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To publish an extension, you must be registered as a publisher with CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The type of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publicVersionNumber &lt;p&gt;The version number to assign to this version of the extension.&lt;/p&gt; &lt;p&gt;Use the following format, and adhere to semantic versioning when assigning a version number to your extension:&lt;/p&gt; &lt;p&gt; &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://semver.org/\&quot;&gt;Semantic Versioning 2.0.0&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version number, CloudFormation increments the version number by one minor version release.&lt;/p&gt; &lt;p&gt;You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be &lt;code&gt;1.0.0&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;PublishTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishTypeOutput> gETPublishTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String arn, String typeName, String publicVersionNumber) throws ApiException {
        okhttp3.Call localVarCall = gETPublishTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, arn, typeName, publicVersionNumber, null);
        Type localVarReturnType = new TypeToken<PublishTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Publishes the specified extension to the CloudFormation registry as a public extension in this Region. Public extensions are available for use by all CloudFormation users. For more information about publishing extensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To publish an extension, you must be registered as a publisher with CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type &lt;p&gt;The type of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param publicVersionNumber &lt;p&gt;The version number to assign to this version of the extension.&lt;/p&gt; &lt;p&gt;Use the following format, and adhere to semantic versioning when assigning a version number to your extension:&lt;/p&gt; &lt;p&gt; &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://semver.org/\&quot;&gt;Semantic Versioning 2.0.0&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version number, CloudFormation increments the version number by one minor version release.&lt;/p&gt; &lt;p&gt;You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be &lt;code&gt;1.0.0&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPublishTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, String arn, String typeName, String publicVersionNumber, final ApiCallback<PublishTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPublishTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, arn, typeName, publicVersionNumber, _callback);
        Type localVarReturnType = new TypeToken<PublishTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRecordHandlerProgress
     * @param bearerToken Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (required)
     * @param operationStatus Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param currentOperationStatus Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param statusMessage Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param errorCode Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param resourceModel Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param clientRequestToken Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidStateTransitionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationStatusCheckFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRecordHandlerProgressCall(String bearerToken, String operationStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String currentOperationStatus, String statusMessage, String errorCode, String resourceModel, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RecordHandlerProgress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (bearerToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("BearerToken", bearerToken));
        }

        if (operationStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationStatus", operationStatus));
        }

        if (currentOperationStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CurrentOperationStatus", currentOperationStatus));
        }

        if (statusMessage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StatusMessage", statusMessage));
        }

        if (errorCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ErrorCode", errorCode));
        }

        if (resourceModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceModel", resourceModel));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRecordHandlerProgressValidateBeforeCall(String bearerToken, String operationStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String currentOperationStatus, String statusMessage, String errorCode, String resourceModel, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bearerToken' is set
        if (bearerToken == null) {
            throw new ApiException("Missing the required parameter 'bearerToken' when calling gETRecordHandlerProgress(Async)");
        }

        // verify the required parameter 'operationStatus' is set
        if (operationStatus == null) {
            throw new ApiException("Missing the required parameter 'operationStatus' when calling gETRecordHandlerProgress(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRecordHandlerProgress(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRecordHandlerProgress(Async)");
        }

        return gETRecordHandlerProgressCall(bearerToken, operationStatus, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, currentOperationStatus, statusMessage, errorCode, resourceModel, clientRequestToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Reports progress of a resource handler to CloudFormation.&lt;/p&gt; &lt;p&gt;Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. Don&#39;t use this API in your code.&lt;/p&gt;
     * @param bearerToken Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (required)
     * @param operationStatus Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param currentOperationStatus Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param statusMessage Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param errorCode Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param resourceModel Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param clientRequestToken Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidStateTransitionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationStatusCheckFailedException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETRecordHandlerProgress(String bearerToken, String operationStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String currentOperationStatus, String statusMessage, String errorCode, String resourceModel, String clientRequestToken) throws ApiException {
        ApiResponse<Object> localVarResp = gETRecordHandlerProgressWithHttpInfo(bearerToken, operationStatus, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, currentOperationStatus, statusMessage, errorCode, resourceModel, clientRequestToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Reports progress of a resource handler to CloudFormation.&lt;/p&gt; &lt;p&gt;Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. Don&#39;t use this API in your code.&lt;/p&gt;
     * @param bearerToken Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (required)
     * @param operationStatus Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param currentOperationStatus Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param statusMessage Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param errorCode Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param resourceModel Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param clientRequestToken Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidStateTransitionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationStatusCheckFailedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETRecordHandlerProgressWithHttpInfo(String bearerToken, String operationStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String currentOperationStatus, String statusMessage, String errorCode, String resourceModel, String clientRequestToken) throws ApiException {
        okhttp3.Call localVarCall = gETRecordHandlerProgressValidateBeforeCall(bearerToken, operationStatus, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, currentOperationStatus, statusMessage, errorCode, resourceModel, clientRequestToken, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Reports progress of a resource handler to CloudFormation.&lt;/p&gt; &lt;p&gt;Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. Don&#39;t use this API in your code.&lt;/p&gt;
     * @param bearerToken Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (required)
     * @param operationStatus Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param currentOperationStatus Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param statusMessage Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param errorCode Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param resourceModel Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param clientRequestToken Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidStateTransitionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationStatusCheckFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRecordHandlerProgressAsync(String bearerToken, String operationStatus, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String currentOperationStatus, String statusMessage, String errorCode, String resourceModel, String clientRequestToken, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRecordHandlerProgressValidateBeforeCall(bearerToken, operationStatus, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, currentOperationStatus, statusMessage, errorCode, resourceModel, clientRequestToken, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRegisterPublisher
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param acceptTermsAndConditions &lt;p&gt;Whether you accept the &lt;a href&#x3D;\&quot;https://cloudformation-registry-documents.s3.amazonaws.com/Terms_and_Conditions_for_AWS_CloudFormation_Registry_Publishers.pdf\&quot;&gt;Terms and Conditions&lt;/a&gt; for publishing extensions in the CloudFormation registry. You must accept the terms and conditions in order to register to publish public extensions to the CloudFormation registry.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param connectionArn &lt;p&gt;If you are using a Bitbucket or GitHub account for identity verification, the Amazon Resource Name (ARN) for your connection to that account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRegisterPublisherCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean acceptTermsAndConditions, String connectionArn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RegisterPublisher";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptTermsAndConditions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AcceptTermsAndConditions", acceptTermsAndConditions));
        }

        if (connectionArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ConnectionArn", connectionArn));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRegisterPublisherValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean acceptTermsAndConditions, String connectionArn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRegisterPublisher(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRegisterPublisher(Async)");
        }

        return gETRegisterPublisherCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, acceptTermsAndConditions, connectionArn, _callback);

    }

    /**
     * 
     * &lt;p&gt;Registers your account as a publisher of public extensions in the CloudFormation registry. Public extensions are available for use by all CloudFormation users. This publisher ID applies to your account in all Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;For information about requirements for registering as a public extension publisher, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p/&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param acceptTermsAndConditions &lt;p&gt;Whether you accept the &lt;a href&#x3D;\&quot;https://cloudformation-registry-documents.s3.amazonaws.com/Terms_and_Conditions_for_AWS_CloudFormation_Registry_Publishers.pdf\&quot;&gt;Terms and Conditions&lt;/a&gt; for publishing extensions in the CloudFormation registry. You must accept the terms and conditions in order to register to publish public extensions to the CloudFormation registry.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param connectionArn &lt;p&gt;If you are using a Bitbucket or GitHub account for identity verification, the Amazon Resource Name (ARN) for your connection to that account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return RegisterPublisherOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public RegisterPublisherOutput gETRegisterPublisher(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean acceptTermsAndConditions, String connectionArn) throws ApiException {
        ApiResponse<RegisterPublisherOutput> localVarResp = gETRegisterPublisherWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, acceptTermsAndConditions, connectionArn);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Registers your account as a publisher of public extensions in the CloudFormation registry. Public extensions are available for use by all CloudFormation users. This publisher ID applies to your account in all Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;For information about requirements for registering as a public extension publisher, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p/&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param acceptTermsAndConditions &lt;p&gt;Whether you accept the &lt;a href&#x3D;\&quot;https://cloudformation-registry-documents.s3.amazonaws.com/Terms_and_Conditions_for_AWS_CloudFormation_Registry_Publishers.pdf\&quot;&gt;Terms and Conditions&lt;/a&gt; for publishing extensions in the CloudFormation registry. You must accept the terms and conditions in order to register to publish public extensions to the CloudFormation registry.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param connectionArn &lt;p&gt;If you are using a Bitbucket or GitHub account for identity verification, the Amazon Resource Name (ARN) for your connection to that account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;RegisterPublisherOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterPublisherOutput> gETRegisterPublisherWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean acceptTermsAndConditions, String connectionArn) throws ApiException {
        okhttp3.Call localVarCall = gETRegisterPublisherValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, acceptTermsAndConditions, connectionArn, null);
        Type localVarReturnType = new TypeToken<RegisterPublisherOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Registers your account as a publisher of public extensions in the CloudFormation registry. Public extensions are available for use by all CloudFormation users. This publisher ID applies to your account in all Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;For information about requirements for registering as a public extension publisher, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p/&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param acceptTermsAndConditions &lt;p&gt;Whether you accept the &lt;a href&#x3D;\&quot;https://cloudformation-registry-documents.s3.amazonaws.com/Terms_and_Conditions_for_AWS_CloudFormation_Registry_Publishers.pdf\&quot;&gt;Terms and Conditions&lt;/a&gt; for publishing extensions in the CloudFormation registry. You must accept the terms and conditions in order to register to publish public extensions to the CloudFormation registry.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param connectionArn &lt;p&gt;If you are using a Bitbucket or GitHub account for identity verification, the Amazon Resource Name (ARN) for your connection to that account.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRegisterPublisherAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean acceptTermsAndConditions, String connectionArn, final ApiCallback<RegisterPublisherOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRegisterPublisherValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, acceptTermsAndConditions, connectionArn, _callback);
        Type localVarReturnType = new TypeToken<RegisterPublisherOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRegisterType
     * @param typeName &lt;p&gt;The name of the extension being registered.&lt;/p&gt; &lt;p&gt;We suggest that extension names adhere to the following patterns:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, &lt;i&gt;company_or_organization&lt;/i&gt;::&lt;i&gt;service&lt;/i&gt;::&lt;i&gt;type&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, &lt;i&gt;company_or_organization&lt;/i&gt;::&lt;i&gt;service&lt;/i&gt;::&lt;i&gt;type&lt;/i&gt;::MODULE.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For hooks, &lt;i&gt;MyCompany&lt;/i&gt;::&lt;i&gt;Testing&lt;/i&gt;::&lt;i&gt;MyTestHook&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The following organization namespaces are reserved and can&#39;t be used in your extension names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Alexa&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AMZN&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Amazon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWS&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Custom&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dev&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; (required)
     * @param schemaHandlerPackage &lt;p&gt;A URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register.&lt;/p&gt; &lt;p&gt;For information about generating a schema handler package for the extension you want to register, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html\&quot;&gt;submit&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The user registering the extension must be able to access the package in the S3 bucket. That&#39;s, the user needs to have &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\&quot;&gt;GetObject&lt;/a&gt; permissions for the schema handler package. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html\&quot;&gt;Actions, Resources, and Condition Keys for Amazon S3&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The kind of extension. (optional)
     * @param loggingConfig Specifies logging configuration information for an extension. (optional)
     * @param executionRoleArn &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when invoking the extension.&lt;/p&gt; &lt;p&gt;For CloudFormation to assume the specified execution role, the role must contain a trust relationship with the CloudFormation service principle (&lt;code&gt;resources.cloudformation.amazonaws.com&lt;/code&gt;). For more information about adding trust relationships, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-managingrole-editing-console.html#roles-managingrole_edit-trust-policy\&quot;&gt;Modifying a role trust policy&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If your extension calls Amazon Web Services APIs in any of its handlers, you must create an &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\&quot;&gt;IAM execution role&lt;/a&gt; &lt;/i&gt; that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. When CloudFormation needs to invoke the resource type handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the resource type handler, thereby supplying your resource type with the appropriate credentials.&lt;/p&gt; (optional)
     * @param clientRequestToken A unique identifier that acts as an idempotency key for this registration request. Specifying a client request token prevents CloudFormation from generating more than one version of an extension from the same registration request, even if the request is submitted multiple times. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRegisterTypeCall(String typeName, String schemaHandlerPackage, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RegisterType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (schemaHandlerPackage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SchemaHandlerPackage", schemaHandlerPackage));
        }

        if (loggingConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LoggingConfig", loggingConfig));
        }

        if (executionRoleArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExecutionRoleArn", executionRoleArn));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRegisterTypeValidateBeforeCall(String typeName, String schemaHandlerPackage, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String clientRequestToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'typeName' is set
        if (typeName == null) {
            throw new ApiException("Missing the required parameter 'typeName' when calling gETRegisterType(Async)");
        }

        // verify the required parameter 'schemaHandlerPackage' is set
        if (schemaHandlerPackage == null) {
            throw new ApiException("Missing the required parameter 'schemaHandlerPackage' when calling gETRegisterType(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRegisterType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRegisterType(Async)");
        }

        return gETRegisterTypeCall(typeName, schemaHandlerPackage, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, loggingConfig, executionRoleArn, clientRequestToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Registers an extension with the CloudFormation service. Registering an extension makes it available for use in CloudFormation templates in your Amazon Web Services account, and includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Validating the extension schema.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Determining which handlers, if any, have been specified for the extension.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Making the extension available for use in your account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how to develop extensions and ready them for registration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-types.html\&quot;&gt;Creating Resource Providers&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can have a maximum of 50 resource extension versions registered at a time. This maximum is per account and per Region. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeregisterType.html\&quot;&gt;DeregisterType&lt;/a&gt; to deregister specific extension versions if necessary.&lt;/p&gt; &lt;p&gt;Once you have initiated a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of the registration request.&lt;/p&gt; &lt;p&gt;Once you have registered a private extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param typeName &lt;p&gt;The name of the extension being registered.&lt;/p&gt; &lt;p&gt;We suggest that extension names adhere to the following patterns:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, &lt;i&gt;company_or_organization&lt;/i&gt;::&lt;i&gt;service&lt;/i&gt;::&lt;i&gt;type&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, &lt;i&gt;company_or_organization&lt;/i&gt;::&lt;i&gt;service&lt;/i&gt;::&lt;i&gt;type&lt;/i&gt;::MODULE.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For hooks, &lt;i&gt;MyCompany&lt;/i&gt;::&lt;i&gt;Testing&lt;/i&gt;::&lt;i&gt;MyTestHook&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The following organization namespaces are reserved and can&#39;t be used in your extension names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Alexa&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AMZN&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Amazon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWS&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Custom&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dev&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; (required)
     * @param schemaHandlerPackage &lt;p&gt;A URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register.&lt;/p&gt; &lt;p&gt;For information about generating a schema handler package for the extension you want to register, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html\&quot;&gt;submit&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The user registering the extension must be able to access the package in the S3 bucket. That&#39;s, the user needs to have &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\&quot;&gt;GetObject&lt;/a&gt; permissions for the schema handler package. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html\&quot;&gt;Actions, Resources, and Condition Keys for Amazon S3&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The kind of extension. (optional)
     * @param loggingConfig Specifies logging configuration information for an extension. (optional)
     * @param executionRoleArn &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when invoking the extension.&lt;/p&gt; &lt;p&gt;For CloudFormation to assume the specified execution role, the role must contain a trust relationship with the CloudFormation service principle (&lt;code&gt;resources.cloudformation.amazonaws.com&lt;/code&gt;). For more information about adding trust relationships, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-managingrole-editing-console.html#roles-managingrole_edit-trust-policy\&quot;&gt;Modifying a role trust policy&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If your extension calls Amazon Web Services APIs in any of its handlers, you must create an &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\&quot;&gt;IAM execution role&lt;/a&gt; &lt;/i&gt; that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. When CloudFormation needs to invoke the resource type handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the resource type handler, thereby supplying your resource type with the appropriate credentials.&lt;/p&gt; (optional)
     * @param clientRequestToken A unique identifier that acts as an idempotency key for this registration request. Specifying a client request token prevents CloudFormation from generating more than one version of an extension from the same registration request, even if the request is submitted multiple times. (optional)
     * @return RegisterTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public RegisterTypeOutput gETRegisterType(String typeName, String schemaHandlerPackage, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String clientRequestToken) throws ApiException {
        ApiResponse<RegisterTypeOutput> localVarResp = gETRegisterTypeWithHttpInfo(typeName, schemaHandlerPackage, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, loggingConfig, executionRoleArn, clientRequestToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Registers an extension with the CloudFormation service. Registering an extension makes it available for use in CloudFormation templates in your Amazon Web Services account, and includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Validating the extension schema.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Determining which handlers, if any, have been specified for the extension.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Making the extension available for use in your account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how to develop extensions and ready them for registration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-types.html\&quot;&gt;Creating Resource Providers&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can have a maximum of 50 resource extension versions registered at a time. This maximum is per account and per Region. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeregisterType.html\&quot;&gt;DeregisterType&lt;/a&gt; to deregister specific extension versions if necessary.&lt;/p&gt; &lt;p&gt;Once you have initiated a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of the registration request.&lt;/p&gt; &lt;p&gt;Once you have registered a private extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param typeName &lt;p&gt;The name of the extension being registered.&lt;/p&gt; &lt;p&gt;We suggest that extension names adhere to the following patterns:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, &lt;i&gt;company_or_organization&lt;/i&gt;::&lt;i&gt;service&lt;/i&gt;::&lt;i&gt;type&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, &lt;i&gt;company_or_organization&lt;/i&gt;::&lt;i&gt;service&lt;/i&gt;::&lt;i&gt;type&lt;/i&gt;::MODULE.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For hooks, &lt;i&gt;MyCompany&lt;/i&gt;::&lt;i&gt;Testing&lt;/i&gt;::&lt;i&gt;MyTestHook&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The following organization namespaces are reserved and can&#39;t be used in your extension names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Alexa&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AMZN&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Amazon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWS&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Custom&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dev&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; (required)
     * @param schemaHandlerPackage &lt;p&gt;A URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register.&lt;/p&gt; &lt;p&gt;For information about generating a schema handler package for the extension you want to register, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html\&quot;&gt;submit&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The user registering the extension must be able to access the package in the S3 bucket. That&#39;s, the user needs to have &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\&quot;&gt;GetObject&lt;/a&gt; permissions for the schema handler package. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html\&quot;&gt;Actions, Resources, and Condition Keys for Amazon S3&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The kind of extension. (optional)
     * @param loggingConfig Specifies logging configuration information for an extension. (optional)
     * @param executionRoleArn &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when invoking the extension.&lt;/p&gt; &lt;p&gt;For CloudFormation to assume the specified execution role, the role must contain a trust relationship with the CloudFormation service principle (&lt;code&gt;resources.cloudformation.amazonaws.com&lt;/code&gt;). For more information about adding trust relationships, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-managingrole-editing-console.html#roles-managingrole_edit-trust-policy\&quot;&gt;Modifying a role trust policy&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If your extension calls Amazon Web Services APIs in any of its handlers, you must create an &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\&quot;&gt;IAM execution role&lt;/a&gt; &lt;/i&gt; that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. When CloudFormation needs to invoke the resource type handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the resource type handler, thereby supplying your resource type with the appropriate credentials.&lt;/p&gt; (optional)
     * @param clientRequestToken A unique identifier that acts as an idempotency key for this registration request. Specifying a client request token prevents CloudFormation from generating more than one version of an extension from the same registration request, even if the request is submitted multiple times. (optional)
     * @return ApiResponse&lt;RegisterTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterTypeOutput> gETRegisterTypeWithHttpInfo(String typeName, String schemaHandlerPackage, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String clientRequestToken) throws ApiException {
        okhttp3.Call localVarCall = gETRegisterTypeValidateBeforeCall(typeName, schemaHandlerPackage, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, loggingConfig, executionRoleArn, clientRequestToken, null);
        Type localVarReturnType = new TypeToken<RegisterTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Registers an extension with the CloudFormation service. Registering an extension makes it available for use in CloudFormation templates in your Amazon Web Services account, and includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Validating the extension schema.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Determining which handlers, if any, have been specified for the extension.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Making the extension available for use in your account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how to develop extensions and ready them for registration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-types.html\&quot;&gt;Creating Resource Providers&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can have a maximum of 50 resource extension versions registered at a time. This maximum is per account and per Region. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeregisterType.html\&quot;&gt;DeregisterType&lt;/a&gt; to deregister specific extension versions if necessary.&lt;/p&gt; &lt;p&gt;Once you have initiated a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of the registration request.&lt;/p&gt; &lt;p&gt;Once you have registered a private extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param typeName &lt;p&gt;The name of the extension being registered.&lt;/p&gt; &lt;p&gt;We suggest that extension names adhere to the following patterns:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, &lt;i&gt;company_or_organization&lt;/i&gt;::&lt;i&gt;service&lt;/i&gt;::&lt;i&gt;type&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, &lt;i&gt;company_or_organization&lt;/i&gt;::&lt;i&gt;service&lt;/i&gt;::&lt;i&gt;type&lt;/i&gt;::MODULE.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For hooks, &lt;i&gt;MyCompany&lt;/i&gt;::&lt;i&gt;Testing&lt;/i&gt;::&lt;i&gt;MyTestHook&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The following organization namespaces are reserved and can&#39;t be used in your extension names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Alexa&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AMZN&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Amazon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AWS&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Custom&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Dev&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/note&gt; (required)
     * @param schemaHandlerPackage &lt;p&gt;A URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register.&lt;/p&gt; &lt;p&gt;For information about generating a schema handler package for the extension you want to register, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-cli-submit.html\&quot;&gt;submit&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The user registering the extension must be able to access the package in the S3 bucket. That&#39;s, the user needs to have &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html\&quot;&gt;GetObject&lt;/a&gt; permissions for the schema handler package. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/list_amazons3.html\&quot;&gt;Actions, Resources, and Condition Keys for Amazon S3&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The kind of extension. (optional)
     * @param loggingConfig Specifies logging configuration information for an extension. (optional)
     * @param executionRoleArn &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role for CloudFormation to assume when invoking the extension.&lt;/p&gt; &lt;p&gt;For CloudFormation to assume the specified execution role, the role must contain a trust relationship with the CloudFormation service principle (&lt;code&gt;resources.cloudformation.amazonaws.com&lt;/code&gt;). For more information about adding trust relationships, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-managingrole-editing-console.html#roles-managingrole_edit-trust-policy\&quot;&gt;Modifying a role trust policy&lt;/a&gt; in the &lt;i&gt;Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If your extension calls Amazon Web Services APIs in any of its handlers, you must create an &lt;i&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\&quot;&gt;IAM execution role&lt;/a&gt; &lt;/i&gt; that includes the necessary permissions to call those Amazon Web Services APIs, and provision that execution role in your account. When CloudFormation needs to invoke the resource type handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the resource type handler, thereby supplying your resource type with the appropriate credentials.&lt;/p&gt; (optional)
     * @param clientRequestToken A unique identifier that acts as an idempotency key for this registration request. Specifying a client request token prevents CloudFormation from generating more than one version of an extension from the same registration request, even if the request is submitted multiple times. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRegisterTypeAsync(String typeName, String schemaHandlerPackage, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, GETActivateTypeLoggingConfigParameter loggingConfig, String executionRoleArn, String clientRequestToken, final ApiCallback<RegisterTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRegisterTypeValidateBeforeCall(typeName, schemaHandlerPackage, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, loggingConfig, executionRoleArn, clientRequestToken, _callback);
        Type localVarReturnType = new TypeToken<RegisterTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRollbackStack
     * @param stackName The name that&#39;s associated with the stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param roleARN The Amazon Resource Name (ARN) of an Identity and Access Management role that CloudFormation assumes to rollback the stack. (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;RollbackStack&lt;/code&gt; request. (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRollbackStackCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, String clientRequestToken, Boolean retainExceptOnCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RollbackStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (roleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleARN", roleARN));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (retainExceptOnCreate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RetainExceptOnCreate", retainExceptOnCreate));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRollbackStackValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, String clientRequestToken, Boolean retainExceptOnCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETRollbackStack(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRollbackStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRollbackStack(Async)");
        }

        return gETRollbackStackCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, roleARN, clientRequestToken, retainExceptOnCreate, _callback);

    }

    /**
     * 
     * &lt;p&gt;When specifying &lt;code&gt;RollbackStack&lt;/code&gt;, you preserve the state of previously provisioned resources when an operation fails. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;Rolls back the specified stack to the last known stable state from &lt;code&gt;CREATE_FAILED&lt;/code&gt; or &lt;code&gt;UPDATE_FAILED&lt;/code&gt; stack statuses.&lt;/p&gt; &lt;p&gt;This operation will delete a stack if it doesn&#39;t contain a last known stable state. A last known stable state includes any status in a &lt;code&gt;*_COMPLETE&lt;/code&gt;. This includes the following stack statuses.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param stackName The name that&#39;s associated with the stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param roleARN The Amazon Resource Name (ARN) of an Identity and Access Management role that CloudFormation assumes to rollback the stack. (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;RollbackStack&lt;/code&gt; request. (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @return RollbackStackOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public RollbackStackOutput gETRollbackStack(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, String clientRequestToken, Boolean retainExceptOnCreate) throws ApiException {
        ApiResponse<RollbackStackOutput> localVarResp = gETRollbackStackWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, roleARN, clientRequestToken, retainExceptOnCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;When specifying &lt;code&gt;RollbackStack&lt;/code&gt;, you preserve the state of previously provisioned resources when an operation fails. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;Rolls back the specified stack to the last known stable state from &lt;code&gt;CREATE_FAILED&lt;/code&gt; or &lt;code&gt;UPDATE_FAILED&lt;/code&gt; stack statuses.&lt;/p&gt; &lt;p&gt;This operation will delete a stack if it doesn&#39;t contain a last known stable state. A last known stable state includes any status in a &lt;code&gt;*_COMPLETE&lt;/code&gt;. This includes the following stack statuses.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param stackName The name that&#39;s associated with the stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param roleARN The Amazon Resource Name (ARN) of an Identity and Access Management role that CloudFormation assumes to rollback the stack. (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;RollbackStack&lt;/code&gt; request. (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @return ApiResponse&lt;RollbackStackOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RollbackStackOutput> gETRollbackStackWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, String clientRequestToken, Boolean retainExceptOnCreate) throws ApiException {
        okhttp3.Call localVarCall = gETRollbackStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, roleARN, clientRequestToken, retainExceptOnCreate, null);
        Type localVarReturnType = new TypeToken<RollbackStackOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;When specifying &lt;code&gt;RollbackStack&lt;/code&gt;, you preserve the state of previously provisioned resources when an operation fails. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;Rolls back the specified stack to the last known stable state from &lt;code&gt;CREATE_FAILED&lt;/code&gt; or &lt;code&gt;UPDATE_FAILED&lt;/code&gt; stack statuses.&lt;/p&gt; &lt;p&gt;This operation will delete a stack if it doesn&#39;t contain a last known stable state. A last known stable state includes any status in a &lt;code&gt;*_COMPLETE&lt;/code&gt;. This includes the following stack statuses.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param stackName The name that&#39;s associated with the stack. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param roleARN The Amazon Resource Name (ARN) of an Identity and Access Management role that CloudFormation assumes to rollback the stack. (optional)
     * @param clientRequestToken A unique identifier for this &lt;code&gt;RollbackStack&lt;/code&gt; request. (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRollbackStackAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String roleARN, String clientRequestToken, Boolean retainExceptOnCreate, final ApiCallback<RollbackStackOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRollbackStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, roleARN, clientRequestToken, retainExceptOnCreate, _callback);
        Type localVarReturnType = new TypeToken<RollbackStackOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetStackPolicy
     * @param stackName The name or unique stack ID that you want to associate a policy with. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackPolicyBody Structure containing the stack policy body. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html\&quot;&gt; Prevent updates to stack resources&lt;/a&gt; in the CloudFormation User Guide. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param stackPolicyURL Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an Amazon S3 bucket in the same Amazon Web Services Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetStackPolicyCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackPolicyBody, String stackPolicyURL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetStackPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (stackPolicyBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackPolicyBody", stackPolicyBody));
        }

        if (stackPolicyURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackPolicyURL", stackPolicyURL));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetStackPolicyValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackPolicyBody, String stackPolicyURL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETSetStackPolicy(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetStackPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetStackPolicy(Async)");
        }

        return gETSetStackPolicyCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackPolicyBody, stackPolicyURL, _callback);

    }

    /**
     * 
     * Sets a stack policy for a specified stack.
     * @param stackName The name or unique stack ID that you want to associate a policy with. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackPolicyBody Structure containing the stack policy body. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html\&quot;&gt; Prevent updates to stack resources&lt;/a&gt; in the CloudFormation User Guide. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param stackPolicyURL Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an Amazon S3 bucket in the same Amazon Web Services Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETSetStackPolicy(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackPolicyBody, String stackPolicyURL) throws ApiException {
        gETSetStackPolicyWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackPolicyBody, stackPolicyURL);
    }

    /**
     * 
     * Sets a stack policy for a specified stack.
     * @param stackName The name or unique stack ID that you want to associate a policy with. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackPolicyBody Structure containing the stack policy body. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html\&quot;&gt; Prevent updates to stack resources&lt;/a&gt; in the CloudFormation User Guide. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param stackPolicyURL Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an Amazon S3 bucket in the same Amazon Web Services Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSetStackPolicyWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackPolicyBody, String stackPolicyURL) throws ApiException {
        okhttp3.Call localVarCall = gETSetStackPolicyValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackPolicyBody, stackPolicyURL, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets a stack policy for a specified stack.
     * @param stackName The name or unique stack ID that you want to associate a policy with. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stackPolicyBody Structure containing the stack policy body. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html\&quot;&gt; Prevent updates to stack resources&lt;/a&gt; in the CloudFormation User Guide. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param stackPolicyURL Location of a file containing the stack policy. The URL must point to a policy (maximum size: 16 KB) located in an Amazon S3 bucket in the same Amazon Web Services Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetStackPolicyAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String stackPolicyBody, String stackPolicyURL, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetStackPolicyValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stackPolicyBody, stackPolicyURL, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetTypeConfiguration
     * @param _configuration &lt;p&gt;The configuration data for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;The configuration data must be formatted as JSON, and validate against the schema returned in the &lt;code&gt;ConfigurationSchema&lt;/code&gt; response element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-model.html#resource-type-howto-configuration\&quot;&gt;Defining account-level configuration data for an extension&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param typeArn &lt;p&gt;The Amazon Resource Name (ARN) for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;For public extensions, this will be the ARN assigned when you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html\&quot;&gt;activate the type&lt;/a&gt; in this account and Region. For private extensions, this will be the ARN assigned when you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;register the type&lt;/a&gt; in this account and Region.&lt;/p&gt; &lt;p&gt;Do not include the extension versions suffix at the end of the ARN. You can set the configuration for an extension, but not for a specific extension version.&lt;/p&gt; (optional)
     * @param configurationAlias &lt;p&gt;An alias by which to refer to this extension configuration data.&lt;/p&gt; &lt;p&gt;Conditional: Specifying a configuration alias is required when setting a configuration for a resource type extension.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;ConfigurationArn&lt;/code&gt;, or &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;TypeName&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The type of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;ConfigurationArn&lt;/code&gt;, or &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;TypeName&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetTypeConfigurationCall(String _configuration, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeArn, String configurationAlias, String typeName, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetTypeConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeArn", typeArn));
        }

        if (_configuration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Configuration", _configuration));
        }

        if (configurationAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ConfigurationAlias", configurationAlias));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetTypeConfigurationValidateBeforeCall(String _configuration, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeArn, String configurationAlias, String typeName, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_configuration' is set
        if (_configuration == null) {
            throw new ApiException("Missing the required parameter '_configuration' when calling gETSetTypeConfiguration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetTypeConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetTypeConfiguration(Async)");
        }

        return gETSetTypeConfigurationCall(_configuration, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, typeArn, configurationAlias, typeName, type, _callback);

    }

    /**
     * 
     * &lt;p&gt;Specifies the configuration data for a registered CloudFormation extension, in the given account and Region.&lt;/p&gt; &lt;p&gt;To view the current configuration data for an extension, refer to the &lt;code&gt;ConfigurationSchema&lt;/code&gt; element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;It&#39;s strongly recommended that you use dynamic references to restrict sensitive configuration definitions, such as third-party credentials. For more details on dynamic references, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/\&quot;&gt;Using dynamic references to specify template values&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param _configuration &lt;p&gt;The configuration data for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;The configuration data must be formatted as JSON, and validate against the schema returned in the &lt;code&gt;ConfigurationSchema&lt;/code&gt; response element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-model.html#resource-type-howto-configuration\&quot;&gt;Defining account-level configuration data for an extension&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param typeArn &lt;p&gt;The Amazon Resource Name (ARN) for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;For public extensions, this will be the ARN assigned when you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html\&quot;&gt;activate the type&lt;/a&gt; in this account and Region. For private extensions, this will be the ARN assigned when you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;register the type&lt;/a&gt; in this account and Region.&lt;/p&gt; &lt;p&gt;Do not include the extension versions suffix at the end of the ARN. You can set the configuration for an extension, but not for a specific extension version.&lt;/p&gt; (optional)
     * @param configurationAlias &lt;p&gt;An alias by which to refer to this extension configuration data.&lt;/p&gt; &lt;p&gt;Conditional: Specifying a configuration alias is required when setting a configuration for a resource type extension.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;ConfigurationArn&lt;/code&gt;, or &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;TypeName&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The type of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;ConfigurationArn&lt;/code&gt;, or &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;TypeName&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return SetTypeConfigurationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public SetTypeConfigurationOutput gETSetTypeConfiguration(String _configuration, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeArn, String configurationAlias, String typeName, String type) throws ApiException {
        ApiResponse<SetTypeConfigurationOutput> localVarResp = gETSetTypeConfigurationWithHttpInfo(_configuration, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, typeArn, configurationAlias, typeName, type);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Specifies the configuration data for a registered CloudFormation extension, in the given account and Region.&lt;/p&gt; &lt;p&gt;To view the current configuration data for an extension, refer to the &lt;code&gt;ConfigurationSchema&lt;/code&gt; element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;It&#39;s strongly recommended that you use dynamic references to restrict sensitive configuration definitions, such as third-party credentials. For more details on dynamic references, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/\&quot;&gt;Using dynamic references to specify template values&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param _configuration &lt;p&gt;The configuration data for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;The configuration data must be formatted as JSON, and validate against the schema returned in the &lt;code&gt;ConfigurationSchema&lt;/code&gt; response element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-model.html#resource-type-howto-configuration\&quot;&gt;Defining account-level configuration data for an extension&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param typeArn &lt;p&gt;The Amazon Resource Name (ARN) for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;For public extensions, this will be the ARN assigned when you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html\&quot;&gt;activate the type&lt;/a&gt; in this account and Region. For private extensions, this will be the ARN assigned when you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;register the type&lt;/a&gt; in this account and Region.&lt;/p&gt; &lt;p&gt;Do not include the extension versions suffix at the end of the ARN. You can set the configuration for an extension, but not for a specific extension version.&lt;/p&gt; (optional)
     * @param configurationAlias &lt;p&gt;An alias by which to refer to this extension configuration data.&lt;/p&gt; &lt;p&gt;Conditional: Specifying a configuration alias is required when setting a configuration for a resource type extension.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;ConfigurationArn&lt;/code&gt;, or &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;TypeName&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The type of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;ConfigurationArn&lt;/code&gt;, or &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;TypeName&lt;/code&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;SetTypeConfigurationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetTypeConfigurationOutput> gETSetTypeConfigurationWithHttpInfo(String _configuration, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeArn, String configurationAlias, String typeName, String type) throws ApiException {
        okhttp3.Call localVarCall = gETSetTypeConfigurationValidateBeforeCall(_configuration, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, typeArn, configurationAlias, typeName, type, null);
        Type localVarReturnType = new TypeToken<SetTypeConfigurationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Specifies the configuration data for a registered CloudFormation extension, in the given account and Region.&lt;/p&gt; &lt;p&gt;To view the current configuration data for an extension, refer to the &lt;code&gt;ConfigurationSchema&lt;/code&gt; element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;It&#39;s strongly recommended that you use dynamic references to restrict sensitive configuration definitions, such as third-party credentials. For more details on dynamic references, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/\&quot;&gt;Using dynamic references to specify template values&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param _configuration &lt;p&gt;The configuration data for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;The configuration data must be formatted as JSON, and validate against the schema returned in the &lt;code&gt;ConfigurationSchema&lt;/code&gt; response element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-model.html#resource-type-howto-configuration\&quot;&gt;Defining account-level configuration data for an extension&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param typeArn &lt;p&gt;The Amazon Resource Name (ARN) for the extension, in this account and Region.&lt;/p&gt; &lt;p&gt;For public extensions, this will be the ARN assigned when you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ActivateType.html\&quot;&gt;activate the type&lt;/a&gt; in this account and Region. For private extensions, this will be the ARN assigned when you &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;register the type&lt;/a&gt; in this account and Region.&lt;/p&gt; &lt;p&gt;Do not include the extension versions suffix at the end of the ARN. You can set the configuration for an extension, but not for a specific extension version.&lt;/p&gt; (optional)
     * @param configurationAlias &lt;p&gt;An alias by which to refer to this extension configuration data.&lt;/p&gt; &lt;p&gt;Conditional: Specifying a configuration alias is required when setting a configuration for a resource type extension.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;ConfigurationArn&lt;/code&gt;, or &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;TypeName&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The type of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;ConfigurationArn&lt;/code&gt;, or &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;TypeName&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetTypeConfigurationAsync(String _configuration, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String typeArn, String configurationAlias, String typeName, String type, final ApiCallback<SetTypeConfigurationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetTypeConfigurationValidateBeforeCall(_configuration, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, typeArn, configurationAlias, typeName, type, _callback);
        Type localVarReturnType = new TypeToken<SetTypeConfigurationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSetTypeDefaultVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetTypeDefaultVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SetTypeDefaultVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (arn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Arn", arn));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (versionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionId", versionId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSetTypeDefaultVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSetTypeDefaultVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSetTypeDefaultVersion(Async)");
        }

        return gETSetTypeDefaultVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, _callback);

    }

    /**
     * 
     * Specify the default version of an extension. The default version of an extension will be used in CloudFormation operations.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETSetTypeDefaultVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId) throws ApiException {
        ApiResponse<Object> localVarResp = gETSetTypeDefaultVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Specify the default version of an extension. The default version of an extension will be used in CloudFormation operations.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETSetTypeDefaultVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId) throws ApiException {
        okhttp3.Call localVarCall = gETSetTypeDefaultVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Specify the default version of an extension. The default version of an extension will be used in CloudFormation operations.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension for which you want version summary information.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The kind of extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify either &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;, or &lt;code&gt;Arn&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId The ID of a specific version of the extension. The version ID is the value at the end of the Amazon Resource Name (ARN) assigned to the extension version when it is registered. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSetTypeDefaultVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSetTypeDefaultVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETSignalResource
     * @param stackName The stack name or unique stack ID that includes the resource that you want to signal. (required)
     * @param logicalResourceId The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template. (required)
     * @param uniqueId A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID. (required)
     * @param status The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSignalResourceCall(String stackName, String logicalResourceId, String uniqueId, String status, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=SignalResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (logicalResourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LogicalResourceId", logicalResourceId));
        }

        if (uniqueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UniqueId", uniqueId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETSignalResourceValidateBeforeCall(String stackName, String logicalResourceId, String uniqueId, String status, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETSignalResource(Async)");
        }

        // verify the required parameter 'logicalResourceId' is set
        if (logicalResourceId == null) {
            throw new ApiException("Missing the required parameter 'logicalResourceId' when calling gETSignalResource(Async)");
        }

        // verify the required parameter 'uniqueId' is set
        if (uniqueId == null) {
            throw new ApiException("Missing the required parameter 'uniqueId' when calling gETSignalResource(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling gETSignalResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETSignalResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETSignalResource(Async)");
        }

        return gETSignalResourceCall(stackName, logicalResourceId, uniqueId, status, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Sends a signal to the specified resource with a success or failure status. You can use the &lt;code&gt;SignalResource&lt;/code&gt; operation in conjunction with a creation policy or update policy. CloudFormation doesn&#39;t proceed with a stack creation or update until resources receive the required number of signals or the timeout period is exceeded. The &lt;code&gt;SignalResource&lt;/code&gt; operation is useful in cases where you want to send signals from anywhere other than an Amazon EC2 instance.
     * @param stackName The stack name or unique stack ID that includes the resource that you want to signal. (required)
     * @param logicalResourceId The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template. (required)
     * @param uniqueId A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID. (required)
     * @param status The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void gETSignalResource(String stackName, String logicalResourceId, String uniqueId, String status, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETSignalResourceWithHttpInfo(stackName, logicalResourceId, uniqueId, status, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Sends a signal to the specified resource with a success or failure status. You can use the &lt;code&gt;SignalResource&lt;/code&gt; operation in conjunction with a creation policy or update policy. CloudFormation doesn&#39;t proceed with a stack creation or update until resources receive the required number of signals or the timeout period is exceeded. The &lt;code&gt;SignalResource&lt;/code&gt; operation is useful in cases where you want to send signals from anywhere other than an Amazon EC2 instance.
     * @param stackName The stack name or unique stack ID that includes the resource that you want to signal. (required)
     * @param logicalResourceId The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template. (required)
     * @param uniqueId A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID. (required)
     * @param status The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETSignalResourceWithHttpInfo(String stackName, String logicalResourceId, String uniqueId, String status, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETSignalResourceValidateBeforeCall(stackName, logicalResourceId, uniqueId, status, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sends a signal to the specified resource with a success or failure status. You can use the &lt;code&gt;SignalResource&lt;/code&gt; operation in conjunction with a creation policy or update policy. CloudFormation doesn&#39;t proceed with a stack creation or update until resources receive the required number of signals or the timeout period is exceeded. The &lt;code&gt;SignalResource&lt;/code&gt; operation is useful in cases where you want to send signals from anywhere other than an Amazon EC2 instance.
     * @param stackName The stack name or unique stack ID that includes the resource that you want to signal. (required)
     * @param logicalResourceId The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template. (required)
     * @param uniqueId A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID. (required)
     * @param status The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETSignalResourceAsync(String stackName, String logicalResourceId, String uniqueId, String status, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETSignalResourceValidateBeforeCall(stackName, logicalResourceId, uniqueId, status, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStopStackSetOperation
     * @param stackSetName The name or unique ID of the stack set that you want to stop the operation for. (required)
     * @param operationId The ID of the stack operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStopStackSetOperationCall(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StopStackSetOperation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStopStackSetOperationValidateBeforeCall(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETStopStackSetOperation(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling gETStopStackSetOperation(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStopStackSetOperation(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStopStackSetOperation(Async)");
        }

        return gETStopStackSetOperationCall(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);

    }

    /**
     * 
     * Stops an in-progress operation on a stack set and its associated stack instances. StackSets will cancel all the unstarted stack instance deployments and wait for those are in-progress to complete.
     * @param stackSetName The name or unique ID of the stack set that you want to stop the operation for. (required)
     * @param operationId The ID of the stack operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public Object gETStopStackSetOperation(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        ApiResponse<Object> localVarResp = gETStopStackSetOperationWithHttpInfo(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops an in-progress operation on a stack set and its associated stack instances. StackSets will cancel all the unstarted stack instance deployments and wait for those are in-progress to complete.
     * @param stackSetName The name or unique ID of the stack set that you want to stop the operation for. (required)
     * @param operationId The ID of the stack operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gETStopStackSetOperationWithHttpInfo(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETStopStackSetOperationValidateBeforeCall(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops an in-progress operation on a stack set and its associated stack instances. StackSets will cancel all the unstarted stack instance deployments and wait for those are in-progress to complete.
     * @param stackSetName The name or unique ID of the stack set that you want to stop the operation for. (required)
     * @param operationId The ID of the stack operation. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStopStackSetOperationAsync(String stackSetName, String operationId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String callAs, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStopStackSetOperationValidateBeforeCall(stackSetName, operationId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, callAs, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETTestType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The type of the extension to test.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension to test.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId &lt;p&gt;The version of the extension to test.&lt;/p&gt; &lt;p&gt;You can specify the version id with either &lt;code&gt;Arn&lt;/code&gt;, or with &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in this account and Region for testing.&lt;/p&gt; (optional)
     * @param logDeliveryBucket &lt;p&gt;The S3 bucket to which CloudFormation delivers the contract test execution logs.&lt;/p&gt; &lt;p&gt;CloudFormation delivers the logs by the time contract testing has completed and the extension has been assigned a test type status of &lt;code&gt;PASSED&lt;/code&gt; or &lt;code&gt;FAILED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The user calling &lt;code&gt;TestType&lt;/code&gt; must be able to access items in the specified S3 bucket. Specifically, the user needs the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GetObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PutObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazons3.html\&quot;&gt;Actions, Resources, and Condition Keys for Amazon S3&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTestTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, String logDeliveryBucket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=TestType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (arn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Arn", arn));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TypeName", typeName));
        }

        if (versionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("VersionId", versionId));
        }

        if (logDeliveryBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LogDeliveryBucket", logDeliveryBucket));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETTestTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, String logDeliveryBucket, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETTestType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETTestType(Async)");
        }

        return gETTestTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, logDeliveryBucket, _callback);

    }

    /**
     * 
     * &lt;p&gt;Tests a registered extension to make sure it meets all necessary requirements for being published in the CloudFormation registry.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, this includes passing all contracts tests defined for the type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, this includes determining if the module&#39;s model meets all necessary requirements.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-testing\&quot;&gt;Testing your public extension prior to publishing&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in your account and Region for testing.&lt;/p&gt; &lt;p&gt;To perform testing, CloudFormation assumes the execution role specified when the type was registered. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Once you&#39;ve initiated testing on an extension using &lt;code&gt;TestType&lt;/code&gt;, you can pass the returned &lt;code&gt;TypeVersionArn&lt;/code&gt; into &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt; to monitor the current test status and test status description for the extension.&lt;/p&gt; &lt;p&gt;An extension must have a test status of &lt;code&gt;PASSED&lt;/code&gt; before it can be published. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The type of the extension to test.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension to test.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId &lt;p&gt;The version of the extension to test.&lt;/p&gt; &lt;p&gt;You can specify the version id with either &lt;code&gt;Arn&lt;/code&gt;, or with &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in this account and Region for testing.&lt;/p&gt; (optional)
     * @param logDeliveryBucket &lt;p&gt;The S3 bucket to which CloudFormation delivers the contract test execution logs.&lt;/p&gt; &lt;p&gt;CloudFormation delivers the logs by the time contract testing has completed and the extension has been assigned a test type status of &lt;code&gt;PASSED&lt;/code&gt; or &lt;code&gt;FAILED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The user calling &lt;code&gt;TestType&lt;/code&gt; must be able to access items in the specified S3 bucket. Specifically, the user needs the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GetObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PutObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazons3.html\&quot;&gt;Actions, Resources, and Condition Keys for Amazon S3&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return TestTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public TestTypeOutput gETTestType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, String logDeliveryBucket) throws ApiException {
        ApiResponse<TestTypeOutput> localVarResp = gETTestTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, logDeliveryBucket);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Tests a registered extension to make sure it meets all necessary requirements for being published in the CloudFormation registry.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, this includes passing all contracts tests defined for the type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, this includes determining if the module&#39;s model meets all necessary requirements.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-testing\&quot;&gt;Testing your public extension prior to publishing&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in your account and Region for testing.&lt;/p&gt; &lt;p&gt;To perform testing, CloudFormation assumes the execution role specified when the type was registered. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Once you&#39;ve initiated testing on an extension using &lt;code&gt;TestType&lt;/code&gt;, you can pass the returned &lt;code&gt;TypeVersionArn&lt;/code&gt; into &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt; to monitor the current test status and test status description for the extension.&lt;/p&gt; &lt;p&gt;An extension must have a test status of &lt;code&gt;PASSED&lt;/code&gt; before it can be published. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The type of the extension to test.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension to test.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId &lt;p&gt;The version of the extension to test.&lt;/p&gt; &lt;p&gt;You can specify the version id with either &lt;code&gt;Arn&lt;/code&gt;, or with &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in this account and Region for testing.&lt;/p&gt; (optional)
     * @param logDeliveryBucket &lt;p&gt;The S3 bucket to which CloudFormation delivers the contract test execution logs.&lt;/p&gt; &lt;p&gt;CloudFormation delivers the logs by the time contract testing has completed and the extension has been assigned a test type status of &lt;code&gt;PASSED&lt;/code&gt; or &lt;code&gt;FAILED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The user calling &lt;code&gt;TestType&lt;/code&gt; must be able to access items in the specified S3 bucket. Specifically, the user needs the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GetObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PutObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazons3.html\&quot;&gt;Actions, Resources, and Condition Keys for Amazon S3&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;TestTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestTypeOutput> gETTestTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, String logDeliveryBucket) throws ApiException {
        okhttp3.Call localVarCall = gETTestTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, logDeliveryBucket, null);
        Type localVarReturnType = new TypeToken<TestTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Tests a registered extension to make sure it meets all necessary requirements for being published in the CloudFormation registry.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, this includes passing all contracts tests defined for the type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, this includes determining if the module&#39;s model meets all necessary requirements.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-testing\&quot;&gt;Testing your public extension prior to publishing&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in your account and Region for testing.&lt;/p&gt; &lt;p&gt;To perform testing, CloudFormation assumes the execution role specified when the type was registered. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Once you&#39;ve initiated testing on an extension using &lt;code&gt;TestType&lt;/code&gt;, you can pass the returned &lt;code&gt;TypeVersionArn&lt;/code&gt; into &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt; to monitor the current test status and test status description for the extension.&lt;/p&gt; &lt;p&gt;An extension must have a test status of &lt;code&gt;PASSED&lt;/code&gt; before it can be published. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param arn &lt;p&gt;The Amazon Resource Name (ARN) of the extension.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param type &lt;p&gt;The type of the extension to test.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param typeName &lt;p&gt;The name of the extension to test.&lt;/p&gt; &lt;p&gt;Conditional: You must specify &lt;code&gt;Arn&lt;/code&gt;, or &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param versionId &lt;p&gt;The version of the extension to test.&lt;/p&gt; &lt;p&gt;You can specify the version id with either &lt;code&gt;Arn&lt;/code&gt;, or with &lt;code&gt;TypeName&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in this account and Region for testing.&lt;/p&gt; (optional)
     * @param logDeliveryBucket &lt;p&gt;The S3 bucket to which CloudFormation delivers the contract test execution logs.&lt;/p&gt; &lt;p&gt;CloudFormation delivers the logs by the time contract testing has completed and the extension has been assigned a test type status of &lt;code&gt;PASSED&lt;/code&gt; or &lt;code&gt;FAILED&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The user calling &lt;code&gt;TestType&lt;/code&gt; must be able to access items in the specified S3 bucket. Specifically, the user needs the following permissions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;GetObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PutObject&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazons3.html\&quot;&gt;Actions, Resources, and Condition Keys for Amazon S3&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Identity and Access Management User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTestTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String arn, String type, String typeName, String versionId, String logDeliveryBucket, final ApiCallback<TestTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETTestTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, arn, type, typeName, versionId, logDeliveryBucket, _callback);
        Type localVarReturnType = new TypeToken<TestTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateStack
     * @param stackName The name or unique stack ID of the stack to update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.)&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param usePreviousTemplate &lt;p&gt;Reuse the existing template that is associated with the stack that you are updating.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackPolicyDuringUpdateBody &lt;p&gt;Structure containing the temporary overriding stack policy body. You can specify either the &lt;code&gt;StackPolicyDuringUpdateBody&lt;/code&gt; or the &lt;code&gt;StackPolicyDuringUpdateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack will be used.&lt;/p&gt; (optional)
     * @param stackPolicyDuringUpdateURL &lt;p&gt;Location of a file containing the temporary overriding stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyDuringUpdateBody&lt;/code&gt; or the &lt;code&gt;StackPolicyDuringUpdateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack will be used.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the stack. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html\&quot;&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually updating the stack. If your stack template contains one or more macros, and you choose to update a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;p&gt;If you want to update a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must update the stack directly from the template using this capability.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You should only update stacks directly from a stack template that contains macros if you know what processing the macro performs.&lt;/p&gt; &lt;p&gt;Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with for this update stack action, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource that you&#39;re updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling Access with Identity and Access Management&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to update the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least privilege.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.&lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param stackPolicyBody &lt;p&gt;Structure containing a new stack policy body. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack is unchanged.&lt;/p&gt; (optional)
     * @param stackPolicyURL &lt;p&gt;Location of a file containing the updated stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack is unchanged.&lt;/p&gt; (optional)
     * @param notificationARNs Amazon Simple Notification Service topic Amazon Resource Names (ARNs) that CloudFormation associates with the stack. Specify an empty list to remove all notification topics. (optional)
     * @param tags &lt;p&gt;Key-value pairs to associate with this stack. CloudFormation also propagates these tags to supported resources in the stack. You can specify a maximum number of 50 tags.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify this parameter, CloudFormation doesn&#39;t modify the stack&#39;s tags. If you specify an empty value, CloudFormation removes all associated tags.&lt;/p&gt; (optional)
     * @param disableRollback &lt;p&gt;Preserve the state of previously provisioned resources when an operation fails.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;False&lt;/code&gt; &lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;UpdateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to update a stack with the same name. You might retry &lt;code&gt;UpdateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateStackCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, String stackPolicyDuringUpdateBody, String stackPolicyDuringUpdateURL, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, String stackPolicyBody, String stackPolicyURL, List<String> notificationARNs, List<Tag> tags, Boolean disableRollback, String clientRequestToken, Boolean retainExceptOnCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (templateBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateBody", templateBody));
        }

        if (templateURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateURL", templateURL));
        }

        if (usePreviousTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UsePreviousTemplate", usePreviousTemplate));
        }

        if (stackPolicyDuringUpdateBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackPolicyDuringUpdateBody", stackPolicyDuringUpdateBody));
        }

        if (stackPolicyDuringUpdateURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackPolicyDuringUpdateURL", stackPolicyDuringUpdateURL));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (capabilities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Capabilities", capabilities));
        }

        if (resourceTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ResourceTypes", resourceTypes));
        }

        if (roleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RoleARN", roleARN));
        }

        if (rollbackConfiguration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RollbackConfiguration", rollbackConfiguration));
        }

        if (stackPolicyBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackPolicyBody", stackPolicyBody));
        }

        if (stackPolicyURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackPolicyURL", stackPolicyURL));
        }

        if (notificationARNs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "NotificationARNs", notificationARNs));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (disableRollback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DisableRollback", disableRollback));
        }

        if (clientRequestToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ClientRequestToken", clientRequestToken));
        }

        if (retainExceptOnCreate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RetainExceptOnCreate", retainExceptOnCreate));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateStackValidateBeforeCall(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, String stackPolicyDuringUpdateBody, String stackPolicyDuringUpdateURL, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, String stackPolicyBody, String stackPolicyURL, List<String> notificationARNs, List<Tag> tags, Boolean disableRollback, String clientRequestToken, Boolean retainExceptOnCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETUpdateStack(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateStack(Async)");
        }

        return gETUpdateStackCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, usePreviousTemplate, stackPolicyDuringUpdateBody, stackPolicyDuringUpdateURL, parameters, capabilities, resourceTypes, roleARN, rollbackConfiguration, stackPolicyBody, stackPolicyURL, notificationARNs, tags, disableRollback, clientRequestToken, retainExceptOnCreate, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a stack as specified in the template. After the call completes successfully, the stack update starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To get a copy of the template for an existing stack, you can use the &lt;a&gt;GetTemplate&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about creating an update template, updating a stack, and monitoring the progress of the update, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks.html\&quot;&gt;Updating a Stack&lt;/a&gt;.&lt;/p&gt;
     * @param stackName The name or unique stack ID of the stack to update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.)&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param usePreviousTemplate &lt;p&gt;Reuse the existing template that is associated with the stack that you are updating.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackPolicyDuringUpdateBody &lt;p&gt;Structure containing the temporary overriding stack policy body. You can specify either the &lt;code&gt;StackPolicyDuringUpdateBody&lt;/code&gt; or the &lt;code&gt;StackPolicyDuringUpdateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack will be used.&lt;/p&gt; (optional)
     * @param stackPolicyDuringUpdateURL &lt;p&gt;Location of a file containing the temporary overriding stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyDuringUpdateBody&lt;/code&gt; or the &lt;code&gt;StackPolicyDuringUpdateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack will be used.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the stack. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html\&quot;&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually updating the stack. If your stack template contains one or more macros, and you choose to update a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;p&gt;If you want to update a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must update the stack directly from the template using this capability.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You should only update stacks directly from a stack template that contains macros if you know what processing the macro performs.&lt;/p&gt; &lt;p&gt;Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with for this update stack action, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource that you&#39;re updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling Access with Identity and Access Management&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to update the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least privilege.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.&lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param stackPolicyBody &lt;p&gt;Structure containing a new stack policy body. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack is unchanged.&lt;/p&gt; (optional)
     * @param stackPolicyURL &lt;p&gt;Location of a file containing the updated stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack is unchanged.&lt;/p&gt; (optional)
     * @param notificationARNs Amazon Simple Notification Service topic Amazon Resource Names (ARNs) that CloudFormation associates with the stack. Specify an empty list to remove all notification topics. (optional)
     * @param tags &lt;p&gt;Key-value pairs to associate with this stack. CloudFormation also propagates these tags to supported resources in the stack. You can specify a maximum number of 50 tags.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify this parameter, CloudFormation doesn&#39;t modify the stack&#39;s tags. If you specify an empty value, CloudFormation removes all associated tags.&lt;/p&gt; (optional)
     * @param disableRollback &lt;p&gt;Preserve the state of previously provisioned resources when an operation fails.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;False&lt;/code&gt; &lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;UpdateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to update a stack with the same name. You might retry &lt;code&gt;UpdateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @return UpdateStackOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStackOutput gETUpdateStack(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, String stackPolicyDuringUpdateBody, String stackPolicyDuringUpdateURL, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, String stackPolicyBody, String stackPolicyURL, List<String> notificationARNs, List<Tag> tags, Boolean disableRollback, String clientRequestToken, Boolean retainExceptOnCreate) throws ApiException {
        ApiResponse<UpdateStackOutput> localVarResp = gETUpdateStackWithHttpInfo(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, usePreviousTemplate, stackPolicyDuringUpdateBody, stackPolicyDuringUpdateURL, parameters, capabilities, resourceTypes, roleARN, rollbackConfiguration, stackPolicyBody, stackPolicyURL, notificationARNs, tags, disableRollback, clientRequestToken, retainExceptOnCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a stack as specified in the template. After the call completes successfully, the stack update starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To get a copy of the template for an existing stack, you can use the &lt;a&gt;GetTemplate&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about creating an update template, updating a stack, and monitoring the progress of the update, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks.html\&quot;&gt;Updating a Stack&lt;/a&gt;.&lt;/p&gt;
     * @param stackName The name or unique stack ID of the stack to update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.)&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param usePreviousTemplate &lt;p&gt;Reuse the existing template that is associated with the stack that you are updating.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackPolicyDuringUpdateBody &lt;p&gt;Structure containing the temporary overriding stack policy body. You can specify either the &lt;code&gt;StackPolicyDuringUpdateBody&lt;/code&gt; or the &lt;code&gt;StackPolicyDuringUpdateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack will be used.&lt;/p&gt; (optional)
     * @param stackPolicyDuringUpdateURL &lt;p&gt;Location of a file containing the temporary overriding stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyDuringUpdateBody&lt;/code&gt; or the &lt;code&gt;StackPolicyDuringUpdateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack will be used.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the stack. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html\&quot;&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually updating the stack. If your stack template contains one or more macros, and you choose to update a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;p&gt;If you want to update a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must update the stack directly from the template using this capability.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You should only update stacks directly from a stack template that contains macros if you know what processing the macro performs.&lt;/p&gt; &lt;p&gt;Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with for this update stack action, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource that you&#39;re updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling Access with Identity and Access Management&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to update the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least privilege.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.&lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param stackPolicyBody &lt;p&gt;Structure containing a new stack policy body. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack is unchanged.&lt;/p&gt; (optional)
     * @param stackPolicyURL &lt;p&gt;Location of a file containing the updated stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack is unchanged.&lt;/p&gt; (optional)
     * @param notificationARNs Amazon Simple Notification Service topic Amazon Resource Names (ARNs) that CloudFormation associates with the stack. Specify an empty list to remove all notification topics. (optional)
     * @param tags &lt;p&gt;Key-value pairs to associate with this stack. CloudFormation also propagates these tags to supported resources in the stack. You can specify a maximum number of 50 tags.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify this parameter, CloudFormation doesn&#39;t modify the stack&#39;s tags. If you specify an empty value, CloudFormation removes all associated tags.&lt;/p&gt; (optional)
     * @param disableRollback &lt;p&gt;Preserve the state of previously provisioned resources when an operation fails.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;False&lt;/code&gt; &lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;UpdateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to update a stack with the same name. You might retry &lt;code&gt;UpdateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @return ApiResponse&lt;UpdateStackOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStackOutput> gETUpdateStackWithHttpInfo(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, String stackPolicyDuringUpdateBody, String stackPolicyDuringUpdateURL, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, String stackPolicyBody, String stackPolicyURL, List<String> notificationARNs, List<Tag> tags, Boolean disableRollback, String clientRequestToken, Boolean retainExceptOnCreate) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, usePreviousTemplate, stackPolicyDuringUpdateBody, stackPolicyDuringUpdateURL, parameters, capabilities, resourceTypes, roleARN, rollbackConfiguration, stackPolicyBody, stackPolicyURL, notificationARNs, tags, disableRollback, clientRequestToken, retainExceptOnCreate, null);
        Type localVarReturnType = new TypeToken<UpdateStackOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a stack as specified in the template. After the call completes successfully, the stack update starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To get a copy of the template for an existing stack, you can use the &lt;a&gt;GetTemplate&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about creating an update template, updating a stack, and monitoring the progress of the update, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks.html\&quot;&gt;Updating a Stack&lt;/a&gt;.&lt;/p&gt;
     * @param stackName The name or unique stack ID of the stack to update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. (For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.)&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template that&#39;s located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param usePreviousTemplate &lt;p&gt;Reuse the existing template that is associated with the stack that you are updating.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt;, &lt;code&gt;TemplateURL&lt;/code&gt;, or set the &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param stackPolicyDuringUpdateBody &lt;p&gt;Structure containing the temporary overriding stack policy body. You can specify either the &lt;code&gt;StackPolicyDuringUpdateBody&lt;/code&gt; or the &lt;code&gt;StackPolicyDuringUpdateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack will be used.&lt;/p&gt; (optional)
     * @param stackPolicyDuringUpdateURL &lt;p&gt;Location of a file containing the temporary overriding stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyDuringUpdateBody&lt;/code&gt; or the &lt;code&gt;StackPolicyDuringUpdateURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;If you want to update protected resources, specify a temporary overriding stack policy during this update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack will be used.&lt;/p&gt; (optional)
     * @param parameters A list of &lt;code&gt;Parameter&lt;/code&gt; structures that specify input parameters for the stack. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_Parameter.html\&quot;&gt;Parameter&lt;/a&gt; data type. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we suggest that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt;AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt;AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some template contain macros. Macros perform custom processing on templates; this can include simple actions like find-and-replace operations, all the way to extensive transformations of entire templates. Because of this, users typically create a change set from the processed template, so that they can review the changes resulting from the macros before actually updating the stack. If your stack template contains one or more macros, and you choose to update a stack directly from the processed template, without first reviewing the resulting changes in a change set, you must acknowledge this capability. This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.&lt;/p&gt; &lt;p&gt;If you want to update a stack from a stack template that contains macros &lt;i&gt;and&lt;/i&gt; nested stacks, you must update the stack directly from the template using this capability.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You should only update stacks directly from a stack template that contains macros if you know what processing the macro performs.&lt;/p&gt; &lt;p&gt;Each macro relies on an underlying Lambda service function for processing stack templates. Be aware that the Lambda function owner can update the function operation without CloudFormation being notified.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param resourceTypes &lt;p&gt;The template resource types that you have permissions to work with for this update stack action, such as &lt;code&gt;AWS::EC2::Instance&lt;/code&gt;, &lt;code&gt;AWS::EC2::*&lt;/code&gt;, or &lt;code&gt;Custom::MyCustomInstance&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the list of resource types doesn&#39;t include a resource that you&#39;re updating, the stack update fails. By default, CloudFormation grants permissions to all resource types. Identity and Access Management (IAM) uses this parameter for CloudFormation-specific condition keys in IAM policies. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html\&quot;&gt;Controlling Access with Identity and Access Management&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param roleARN &lt;p&gt;The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that CloudFormation assumes to update the stack. CloudFormation uses the role&#39;s credentials to make calls on your behalf. CloudFormation always uses this role for all future operations on the stack. Provided that users have permission to operate on the stack, CloudFormation uses this role even if the users don&#39;t have permission to pass it. Ensure that the role grants least privilege.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a value, CloudFormation uses the role that was previously associated with the stack. If no role is available, CloudFormation uses a temporary session that is generated from your user credentials.&lt;/p&gt; (optional)
     * @param rollbackConfiguration The rollback triggers for CloudFormation to monitor during stack creation and updating operations, and for the specified monitoring period afterwards. (optional)
     * @param stackPolicyBody &lt;p&gt;Structure containing a new stack policy body. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack is unchanged.&lt;/p&gt; (optional)
     * @param stackPolicyURL &lt;p&gt;Location of a file containing the updated stack policy. The URL must point to a policy (max size: 16KB) located in an S3 bucket in the same Region as the stack. You can specify either the &lt;code&gt;StackPolicyBody&lt;/code&gt; or the &lt;code&gt;StackPolicyURL&lt;/code&gt; parameter, but not both.&lt;/p&gt; &lt;p&gt;You might update the stack policy, for example, in order to protect a new resource that you created during a stack update. If you don&#39;t specify a stack policy, the current policy that is associated with the stack is unchanged.&lt;/p&gt; (optional)
     * @param notificationARNs Amazon Simple Notification Service topic Amazon Resource Names (ARNs) that CloudFormation associates with the stack. Specify an empty list to remove all notification topics. (optional)
     * @param tags &lt;p&gt;Key-value pairs to associate with this stack. CloudFormation also propagates these tags to supported resources in the stack. You can specify a maximum number of 50 tags.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify this parameter, CloudFormation doesn&#39;t modify the stack&#39;s tags. If you specify an empty value, CloudFormation removes all associated tags.&lt;/p&gt; (optional)
     * @param disableRollback &lt;p&gt;Preserve the state of previously provisioned resources when an operation fails.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;False&lt;/code&gt; &lt;/p&gt; (optional)
     * @param clientRequestToken &lt;p&gt;A unique identifier for this &lt;code&gt;UpdateStack&lt;/code&gt; request. Specify this token if you plan to retry requests so that CloudFormation knows that you&#39;re not attempting to update a stack with the same name. You might retry &lt;code&gt;UpdateStack&lt;/code&gt; requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;All events triggered by a given stack operation are assigned the same client request token, which you can use to track operations. For example, if you execute a &lt;code&gt;CreateStack&lt;/code&gt; operation with the token &lt;code&gt;token1&lt;/code&gt;, then all the &lt;code&gt;StackEvents&lt;/code&gt; generated by that operation will have &lt;code&gt;ClientRequestToken&lt;/code&gt; set as &lt;code&gt;token1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;In the console, stack operations display the client request token on the Events tab. Stack operations that are initiated from the console use the token format &lt;i&gt;Console-StackOperation-ID&lt;/i&gt;, which helps you easily identify the stack operation . For example, if you create a stack using the console, each stack event would be assigned the same token in the following format: &lt;code&gt;Console-CreateStack-7f59c3cf-00d2-40c7-b2ff-e75db0987002&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param retainExceptOnCreate This deletion policy deletes newly created resources, but retains existing resources, when a stack operation is rolled back. This ensures new, empty, and unused resources are deleted, while critical resources and their data are retained. &lt;code&gt;RetainExceptOnCreate&lt;/code&gt; can be specified for any resource that supports the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\&quot;&gt; DeletionPolicy&lt;/a&gt; attribute. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateStackAsync(String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, Boolean usePreviousTemplate, String stackPolicyDuringUpdateBody, String stackPolicyDuringUpdateURL, List<Parameter> parameters, List<Capability> capabilities, List<String> resourceTypes, String roleARN, GETCreateChangeSetRollbackConfigurationParameter rollbackConfiguration, String stackPolicyBody, String stackPolicyURL, List<String> notificationARNs, List<Tag> tags, Boolean disableRollback, String clientRequestToken, Boolean retainExceptOnCreate, final ApiCallback<UpdateStackOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateStackValidateBeforeCall(stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, usePreviousTemplate, stackPolicyDuringUpdateBody, stackPolicyDuringUpdateURL, parameters, capabilities, resourceTypes, roleARN, rollbackConfiguration, stackPolicyBody, stackPolicyURL, notificationARNs, tags, disableRollback, clientRequestToken, retainExceptOnCreate, _callback);
        Type localVarReturnType = new TypeToken<UpdateStackOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateStackInstances
     * @param stackSetName The name or unique ID of the stack set associated with the stack instances. (required)
     * @param regions The names of one or more Amazon Web Services Regions in which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of one or more Amazon Web Services accounts for which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts for which you want to update parameter values for stack instances. If your update targets OUs, the overridden parameter values only apply to the accounts that are currently in the target OUs and their child OUs. Accounts added to the target OUs and their child OUs in the future won&#39;t use the overridden values.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param parameterOverrides &lt;p&gt;A list of input parameters whose values you want to update for the specified stack instances.&lt;/p&gt; &lt;p&gt;Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance update operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To override the current value for a parameter, include the parameter and specify its value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave an overridden parameter set to its present value, include the parameter and specify &lt;code&gt;UsePreviousValue&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;. (You can&#39;t specify both a value and set &lt;code&gt;UsePreviousValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don&#39;t include the parameter in the list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave all parameters set to their present values, don&#39;t specify this property at all.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;During stack set updates, any parameter values overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only override the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;code&gt;UpdateStackSet&lt;/code&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateStackInstancesCall(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateStackInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (accounts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Accounts", accounts));
        }

        if (deploymentTargets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeploymentTargets", deploymentTargets));
        }

        if (regions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Regions", regions));
        }

        if (parameterOverrides != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ParameterOverrides", parameterOverrides));
        }

        if (operationPreferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationPreferences", operationPreferences));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateStackInstancesValidateBeforeCall(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETUpdateStackInstances(Async)");
        }

        // verify the required parameter 'regions' is set
        if (regions == null) {
            throw new ApiException("Missing the required parameter 'regions' when calling gETUpdateStackInstances(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateStackInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateStackInstances(Async)");
        }

        return gETUpdateStackInstancesCall(stackSetName, regions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, parameterOverrides, operationPreferences, operationId, callAs, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the parameter values for stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region.&lt;/p&gt; &lt;p&gt;You can only update stack instances in Amazon Web Services Regions and accounts where they already exist; to create additional stack instances, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStackInstances.html\&quot;&gt;CreateStackInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;During stack set updates, any parameters overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only update the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt;
     * @param stackSetName The name or unique ID of the stack set associated with the stack instances. (required)
     * @param regions The names of one or more Amazon Web Services Regions in which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of one or more Amazon Web Services accounts for which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts for which you want to update parameter values for stack instances. If your update targets OUs, the overridden parameter values only apply to the accounts that are currently in the target OUs and their child OUs. Accounts added to the target OUs and their child OUs in the future won&#39;t use the overridden values.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param parameterOverrides &lt;p&gt;A list of input parameters whose values you want to update for the specified stack instances.&lt;/p&gt; &lt;p&gt;Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance update operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To override the current value for a parameter, include the parameter and specify its value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave an overridden parameter set to its present value, include the parameter and specify &lt;code&gt;UsePreviousValue&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;. (You can&#39;t specify both a value and set &lt;code&gt;UsePreviousValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don&#39;t include the parameter in the list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave all parameters set to their present values, don&#39;t specify this property at all.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;During stack set updates, any parameter values overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only override the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;code&gt;UpdateStackSet&lt;/code&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return UpdateStackInstancesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStackInstancesOutput gETUpdateStackInstances(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        ApiResponse<UpdateStackInstancesOutput> localVarResp = gETUpdateStackInstancesWithHttpInfo(stackSetName, regions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, parameterOverrides, operationPreferences, operationId, callAs);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the parameter values for stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region.&lt;/p&gt; &lt;p&gt;You can only update stack instances in Amazon Web Services Regions and accounts where they already exist; to create additional stack instances, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStackInstances.html\&quot;&gt;CreateStackInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;During stack set updates, any parameters overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only update the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt;
     * @param stackSetName The name or unique ID of the stack set associated with the stack instances. (required)
     * @param regions The names of one or more Amazon Web Services Regions in which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of one or more Amazon Web Services accounts for which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts for which you want to update parameter values for stack instances. If your update targets OUs, the overridden parameter values only apply to the accounts that are currently in the target OUs and their child OUs. Accounts added to the target OUs and their child OUs in the future won&#39;t use the overridden values.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param parameterOverrides &lt;p&gt;A list of input parameters whose values you want to update for the specified stack instances.&lt;/p&gt; &lt;p&gt;Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance update operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To override the current value for a parameter, include the parameter and specify its value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave an overridden parameter set to its present value, include the parameter and specify &lt;code&gt;UsePreviousValue&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;. (You can&#39;t specify both a value and set &lt;code&gt;UsePreviousValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don&#39;t include the parameter in the list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave all parameters set to their present values, don&#39;t specify this property at all.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;During stack set updates, any parameter values overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only override the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;code&gt;UpdateStackSet&lt;/code&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;UpdateStackInstancesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStackInstancesOutput> gETUpdateStackInstancesWithHttpInfo(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateStackInstancesValidateBeforeCall(stackSetName, regions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, parameterOverrides, operationPreferences, operationId, callAs, null);
        Type localVarReturnType = new TypeToken<UpdateStackInstancesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the parameter values for stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region.&lt;/p&gt; &lt;p&gt;You can only update stack instances in Amazon Web Services Regions and accounts where they already exist; to create additional stack instances, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStackInstances.html\&quot;&gt;CreateStackInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;During stack set updates, any parameters overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only update the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt;
     * @param stackSetName The name or unique ID of the stack set associated with the stack instances. (required)
     * @param regions The names of one or more Amazon Web Services Regions in which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The names of one or more Amazon Web Services accounts for which you want to update parameter values for stack instances. The overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts for which you want to update parameter values for stack instances. If your update targets OUs, the overridden parameter values only apply to the accounts that are currently in the target OUs and their child OUs. Accounts added to the target OUs and their child OUs in the future won&#39;t use the overridden values.&lt;/p&gt; &lt;p&gt;You can specify &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, but not both.&lt;/p&gt; (optional)
     * @param parameterOverrides &lt;p&gt;A list of input parameters whose values you want to update for the specified stack instances.&lt;/p&gt; &lt;p&gt;Any overridden parameter values will be applied to all stack instances in the specified accounts and Amazon Web Services Regions. When specifying parameters and their values, be aware of how CloudFormation sets parameter values during stack instance update operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To override the current value for a parameter, include the parameter and specify its value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave an overridden parameter set to its present value, include the parameter and specify &lt;code&gt;UsePreviousValue&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;. (You can&#39;t specify both a value and set &lt;code&gt;UsePreviousValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To set an overridden parameter back to the value specified in the stack set, specify a parameter list but don&#39;t include the parameter in the list.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To leave all parameters set to their present values, don&#39;t specify this property at all.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;During stack set updates, any parameter values overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only override the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;code&gt;UpdateStackSet&lt;/code&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param operationId &lt;p&gt;The unique identifier for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, the SDK generates one automatically.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateStackInstancesAsync(String stackSetName, List<String> regions, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> accounts, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, List<Parameter> parameterOverrides, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String operationId, String callAs, final ApiCallback<UpdateStackInstancesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateStackInstancesValidateBeforeCall(stackSetName, regions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accounts, deploymentTargets, parameterOverrides, operationPreferences, operationId, callAs, _callback);
        Type localVarReturnType = new TypeToken<UpdateStackInstancesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateStackSet
     * @param stackSetName The name or unique ID of the stack set that you want to update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A brief description of updates that you are making. (optional)
     * @param templateBody &lt;p&gt;The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param usePreviousTemplate &lt;p&gt;Use the existing template that&#39;s associated with the stack set that you&#39;re updating.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param parameters A list of input parameters for the stack set template. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack set and its associated stack instances.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks sets, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt; AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt; AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some templates reference macros. If your stack set template references one or more macros, you must update the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To update the stack set directly, you must acknowledge this capability. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Stack sets with service-managed permissions do not currently support the use of macros in templates. (This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. You can specify a maximum number of 50 tags.&lt;/p&gt; &lt;p&gt;If you specify tags for this parameter, those tags replace any list of tags that are currently associated with this stack set. This means:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify this parameter, CloudFormation doesn&#39;t modify the stack&#39;s tags.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify &lt;i&gt;any&lt;/i&gt; tags using this parameter, you must specify &lt;i&gt;all&lt;/i&gt; the tags that you want associated with this stack set, even tags you&#39;ve specified before (for example, when creating the stack set or during a previous update of the stack set.). Any tags that you don&#39;t include in the updated list of tags are removed from the stack set, and therefore from the stacks and resources as well.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify an empty value, CloudFormation removes all currently associated tags.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify new tags as part of an &lt;code&gt;UpdateStackSet&lt;/code&gt; action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you omit tags that are currently associated with the stack set from the list of tags you specify, CloudFormation assumes that you want to remove those tags from the stack set, and checks to see if you have permission to untag resources. If you don&#39;t have the necessary permission(s), the entire &lt;code&gt;UpdateStackSet&lt;/code&gt; action fails with an &lt;code&gt;access denied&lt;/code&gt; error, and the stack set is not updated.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param administrationRoleARN &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role to use to update this stack set.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/stacksets-prereqs.html\&quot;&gt;Granting Permissions for Stack Set Operations&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specified a customized administrator role when you created the stack set, you must specify a customized administrator role, even if it is the same customized administrator role used with this stack set previously.&lt;/p&gt; (optional)
     * @param executionRoleName &lt;p&gt;The name of the IAM execution role to use to update the stack set. If you do not specify an execution role, CloudFormation uses the &lt;code&gt;AWSCloudFormationStackSetExecutionRole&lt;/code&gt; role for the stack set operation.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.&lt;/p&gt; &lt;p&gt;If you specify a customized execution role, CloudFormation uses that role to update the stack. If you do not specify a customized execution role, CloudFormation performs the update using the role previously associated with the stack set, so long as you have permissions to perform operations on the stack set.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts in which to update associated stack instances.&lt;/p&gt; &lt;p&gt;To update all the stack instances associated with this stack set, do not specify &lt;code&gt;DeploymentTargets&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; is specified), or the &lt;code&gt;Parameters&lt;/code&gt;, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update doesn&#39;t include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param permissionModel &lt;p&gt;Describes how the IAM roles required for stack set operations are created. You cannot modify &lt;code&gt;PermissionModel&lt;/code&gt; if there are stack instances associated with your stack set.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;self-managed&lt;/code&gt; permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\&quot;&gt;Grant Self-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;service-managed&lt;/code&gt; permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html\&quot;&gt;Grant Service-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param autoDeployment &lt;p&gt;[Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU).&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;AutoDeployment&lt;/code&gt;, don&#39;t specify &lt;code&gt;DeploymentTargets&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param operationId &lt;p&gt;The unique ID for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, CloudFormation generates one automatically.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The accounts in which to update associated stack instances. If you specify accounts, you must also specify the Amazon Web Services Regions in which to update stack set instances.&lt;/p&gt; &lt;p&gt;To update &lt;i&gt;all&lt;/i&gt; the stack instances associated with this stack set, don&#39;t specify the &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt; properties.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if the &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; properties are specified), or the &lt;code&gt;Parameters&lt;/code&gt; property, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Amazon Web Services Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param regions &lt;p&gt;The Amazon Web Services Regions in which to update associated stack instances. If you specify Regions, you must also specify accounts in which to update stack set instances.&lt;/p&gt; &lt;p&gt;To update &lt;i&gt;all&lt;/i&gt; the stack instances associated with this stack set, do not specify the &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt; properties.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if the &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; properties are specified), or the &lt;code&gt;Parameters&lt;/code&gt; property, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param managedExecution Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateStackSetCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String administrationRoleARN, String executionRoleName, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String operationId, List<String> accounts, List<String> regions, String callAs, GETCreateStackSetManagedExecutionParameter managedExecution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stackSetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackSetName", stackSetName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (templateBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateBody", templateBody));
        }

        if (templateURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateURL", templateURL));
        }

        if (usePreviousTemplate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UsePreviousTemplate", usePreviousTemplate));
        }

        if (parameters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Parameters", parameters));
        }

        if (capabilities != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Capabilities", capabilities));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (operationPreferences != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationPreferences", operationPreferences));
        }

        if (administrationRoleARN != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AdministrationRoleARN", administrationRoleARN));
        }

        if (executionRoleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExecutionRoleName", executionRoleName));
        }

        if (deploymentTargets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeploymentTargets", deploymentTargets));
        }

        if (permissionModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PermissionModel", permissionModel));
        }

        if (autoDeployment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoDeployment", autoDeployment));
        }

        if (operationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OperationId", operationId));
        }

        if (accounts != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Accounts", accounts));
        }

        if (regions != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Regions", regions));
        }

        if (callAs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallAs", callAs));
        }

        if (managedExecution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ManagedExecution", managedExecution));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateStackSetValidateBeforeCall(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String administrationRoleARN, String executionRoleName, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String operationId, List<String> accounts, List<String> regions, String callAs, GETCreateStackSetManagedExecutionParameter managedExecution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stackSetName' is set
        if (stackSetName == null) {
            throw new ApiException("Missing the required parameter 'stackSetName' when calling gETUpdateStackSet(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateStackSet(Async)");
        }

        return gETUpdateStackSetCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, templateBody, templateURL, usePreviousTemplate, parameters, capabilities, tags, operationPreferences, administrationRoleARN, executionRoleName, deploymentTargets, permissionModel, autoDeployment, operationId, accounts, regions, callAs, managedExecution, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the stack set, and associated stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;Even if the stack set operation created by updating the stack set fails (completely or partially, below or above a specified failure tolerance), the stack set is updated with your changes. Subsequent &lt;a&gt;CreateStackInstances&lt;/a&gt; calls on the specified stack set use the updated stack set.&lt;/p&gt;
     * @param stackSetName The name or unique ID of the stack set that you want to update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A brief description of updates that you are making. (optional)
     * @param templateBody &lt;p&gt;The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param usePreviousTemplate &lt;p&gt;Use the existing template that&#39;s associated with the stack set that you&#39;re updating.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param parameters A list of input parameters for the stack set template. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack set and its associated stack instances.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks sets, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt; AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt; AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some templates reference macros. If your stack set template references one or more macros, you must update the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To update the stack set directly, you must acknowledge this capability. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Stack sets with service-managed permissions do not currently support the use of macros in templates. (This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. You can specify a maximum number of 50 tags.&lt;/p&gt; &lt;p&gt;If you specify tags for this parameter, those tags replace any list of tags that are currently associated with this stack set. This means:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify this parameter, CloudFormation doesn&#39;t modify the stack&#39;s tags.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify &lt;i&gt;any&lt;/i&gt; tags using this parameter, you must specify &lt;i&gt;all&lt;/i&gt; the tags that you want associated with this stack set, even tags you&#39;ve specified before (for example, when creating the stack set or during a previous update of the stack set.). Any tags that you don&#39;t include in the updated list of tags are removed from the stack set, and therefore from the stacks and resources as well.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify an empty value, CloudFormation removes all currently associated tags.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify new tags as part of an &lt;code&gt;UpdateStackSet&lt;/code&gt; action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you omit tags that are currently associated with the stack set from the list of tags you specify, CloudFormation assumes that you want to remove those tags from the stack set, and checks to see if you have permission to untag resources. If you don&#39;t have the necessary permission(s), the entire &lt;code&gt;UpdateStackSet&lt;/code&gt; action fails with an &lt;code&gt;access denied&lt;/code&gt; error, and the stack set is not updated.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param administrationRoleARN &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role to use to update this stack set.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/stacksets-prereqs.html\&quot;&gt;Granting Permissions for Stack Set Operations&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specified a customized administrator role when you created the stack set, you must specify a customized administrator role, even if it is the same customized administrator role used with this stack set previously.&lt;/p&gt; (optional)
     * @param executionRoleName &lt;p&gt;The name of the IAM execution role to use to update the stack set. If you do not specify an execution role, CloudFormation uses the &lt;code&gt;AWSCloudFormationStackSetExecutionRole&lt;/code&gt; role for the stack set operation.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.&lt;/p&gt; &lt;p&gt;If you specify a customized execution role, CloudFormation uses that role to update the stack. If you do not specify a customized execution role, CloudFormation performs the update using the role previously associated with the stack set, so long as you have permissions to perform operations on the stack set.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts in which to update associated stack instances.&lt;/p&gt; &lt;p&gt;To update all the stack instances associated with this stack set, do not specify &lt;code&gt;DeploymentTargets&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; is specified), or the &lt;code&gt;Parameters&lt;/code&gt;, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update doesn&#39;t include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param permissionModel &lt;p&gt;Describes how the IAM roles required for stack set operations are created. You cannot modify &lt;code&gt;PermissionModel&lt;/code&gt; if there are stack instances associated with your stack set.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;self-managed&lt;/code&gt; permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\&quot;&gt;Grant Self-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;service-managed&lt;/code&gt; permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html\&quot;&gt;Grant Service-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param autoDeployment &lt;p&gt;[Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU).&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;AutoDeployment&lt;/code&gt;, don&#39;t specify &lt;code&gt;DeploymentTargets&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param operationId &lt;p&gt;The unique ID for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, CloudFormation generates one automatically.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The accounts in which to update associated stack instances. If you specify accounts, you must also specify the Amazon Web Services Regions in which to update stack set instances.&lt;/p&gt; &lt;p&gt;To update &lt;i&gt;all&lt;/i&gt; the stack instances associated with this stack set, don&#39;t specify the &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt; properties.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if the &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; properties are specified), or the &lt;code&gt;Parameters&lt;/code&gt; property, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Amazon Web Services Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param regions &lt;p&gt;The Amazon Web Services Regions in which to update associated stack instances. If you specify Regions, you must also specify accounts in which to update stack set instances.&lt;/p&gt; &lt;p&gt;To update &lt;i&gt;all&lt;/i&gt; the stack instances associated with this stack set, do not specify the &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt; properties.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if the &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; properties are specified), or the &lt;code&gt;Parameters&lt;/code&gt; property, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param managedExecution Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations. (optional)
     * @return UpdateStackSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStackSetOutput gETUpdateStackSet(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String administrationRoleARN, String executionRoleName, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String operationId, List<String> accounts, List<String> regions, String callAs, GETCreateStackSetManagedExecutionParameter managedExecution) throws ApiException {
        ApiResponse<UpdateStackSetOutput> localVarResp = gETUpdateStackSetWithHttpInfo(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, templateBody, templateURL, usePreviousTemplate, parameters, capabilities, tags, operationPreferences, administrationRoleARN, executionRoleName, deploymentTargets, permissionModel, autoDeployment, operationId, accounts, regions, callAs, managedExecution);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the stack set, and associated stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;Even if the stack set operation created by updating the stack set fails (completely or partially, below or above a specified failure tolerance), the stack set is updated with your changes. Subsequent &lt;a&gt;CreateStackInstances&lt;/a&gt; calls on the specified stack set use the updated stack set.&lt;/p&gt;
     * @param stackSetName The name or unique ID of the stack set that you want to update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A brief description of updates that you are making. (optional)
     * @param templateBody &lt;p&gt;The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param usePreviousTemplate &lt;p&gt;Use the existing template that&#39;s associated with the stack set that you&#39;re updating.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param parameters A list of input parameters for the stack set template. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack set and its associated stack instances.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks sets, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt; AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt; AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some templates reference macros. If your stack set template references one or more macros, you must update the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To update the stack set directly, you must acknowledge this capability. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Stack sets with service-managed permissions do not currently support the use of macros in templates. (This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. You can specify a maximum number of 50 tags.&lt;/p&gt; &lt;p&gt;If you specify tags for this parameter, those tags replace any list of tags that are currently associated with this stack set. This means:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify this parameter, CloudFormation doesn&#39;t modify the stack&#39;s tags.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify &lt;i&gt;any&lt;/i&gt; tags using this parameter, you must specify &lt;i&gt;all&lt;/i&gt; the tags that you want associated with this stack set, even tags you&#39;ve specified before (for example, when creating the stack set or during a previous update of the stack set.). Any tags that you don&#39;t include in the updated list of tags are removed from the stack set, and therefore from the stacks and resources as well.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify an empty value, CloudFormation removes all currently associated tags.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify new tags as part of an &lt;code&gt;UpdateStackSet&lt;/code&gt; action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you omit tags that are currently associated with the stack set from the list of tags you specify, CloudFormation assumes that you want to remove those tags from the stack set, and checks to see if you have permission to untag resources. If you don&#39;t have the necessary permission(s), the entire &lt;code&gt;UpdateStackSet&lt;/code&gt; action fails with an &lt;code&gt;access denied&lt;/code&gt; error, and the stack set is not updated.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param administrationRoleARN &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role to use to update this stack set.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/stacksets-prereqs.html\&quot;&gt;Granting Permissions for Stack Set Operations&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specified a customized administrator role when you created the stack set, you must specify a customized administrator role, even if it is the same customized administrator role used with this stack set previously.&lt;/p&gt; (optional)
     * @param executionRoleName &lt;p&gt;The name of the IAM execution role to use to update the stack set. If you do not specify an execution role, CloudFormation uses the &lt;code&gt;AWSCloudFormationStackSetExecutionRole&lt;/code&gt; role for the stack set operation.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.&lt;/p&gt; &lt;p&gt;If you specify a customized execution role, CloudFormation uses that role to update the stack. If you do not specify a customized execution role, CloudFormation performs the update using the role previously associated with the stack set, so long as you have permissions to perform operations on the stack set.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts in which to update associated stack instances.&lt;/p&gt; &lt;p&gt;To update all the stack instances associated with this stack set, do not specify &lt;code&gt;DeploymentTargets&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; is specified), or the &lt;code&gt;Parameters&lt;/code&gt;, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update doesn&#39;t include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param permissionModel &lt;p&gt;Describes how the IAM roles required for stack set operations are created. You cannot modify &lt;code&gt;PermissionModel&lt;/code&gt; if there are stack instances associated with your stack set.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;self-managed&lt;/code&gt; permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\&quot;&gt;Grant Self-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;service-managed&lt;/code&gt; permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html\&quot;&gt;Grant Service-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param autoDeployment &lt;p&gt;[Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU).&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;AutoDeployment&lt;/code&gt;, don&#39;t specify &lt;code&gt;DeploymentTargets&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param operationId &lt;p&gt;The unique ID for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, CloudFormation generates one automatically.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The accounts in which to update associated stack instances. If you specify accounts, you must also specify the Amazon Web Services Regions in which to update stack set instances.&lt;/p&gt; &lt;p&gt;To update &lt;i&gt;all&lt;/i&gt; the stack instances associated with this stack set, don&#39;t specify the &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt; properties.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if the &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; properties are specified), or the &lt;code&gt;Parameters&lt;/code&gt; property, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Amazon Web Services Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param regions &lt;p&gt;The Amazon Web Services Regions in which to update associated stack instances. If you specify Regions, you must also specify accounts in which to update stack set instances.&lt;/p&gt; &lt;p&gt;To update &lt;i&gt;all&lt;/i&gt; the stack instances associated with this stack set, do not specify the &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt; properties.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if the &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; properties are specified), or the &lt;code&gt;Parameters&lt;/code&gt; property, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param managedExecution Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations. (optional)
     * @return ApiResponse&lt;UpdateStackSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStackSetOutput> gETUpdateStackSetWithHttpInfo(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String administrationRoleARN, String executionRoleName, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String operationId, List<String> accounts, List<String> regions, String callAs, GETCreateStackSetManagedExecutionParameter managedExecution) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, templateBody, templateURL, usePreviousTemplate, parameters, capabilities, tags, operationPreferences, administrationRoleARN, executionRoleName, deploymentTargets, permissionModel, autoDeployment, operationId, accounts, regions, callAs, managedExecution, null);
        Type localVarReturnType = new TypeToken<UpdateStackSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the stack set, and associated stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;Even if the stack set operation created by updating the stack set fails (completely or partially, below or above a specified failure tolerance), the stack set is updated with your changes. Subsequent &lt;a&gt;CreateStackInstances&lt;/a&gt; calls on the specified stack set use the updated stack set.&lt;/p&gt;
     * @param stackSetName The name or unique ID of the stack set that you want to update. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param description A brief description of updates that you are making. (optional)
     * @param templateBody &lt;p&gt;The structure that contains the template body, with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;The location of the file that contains the template body. The URL must point to a template (maximum size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param usePreviousTemplate &lt;p&gt;Use the existing template that&#39;s associated with the stack set that you&#39;re updating.&lt;/p&gt; &lt;p&gt;Conditional: You must specify only one of the following parameters: &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt;—or set &lt;code&gt;UsePreviousTemplate&lt;/code&gt; to true.&lt;/p&gt; (optional)
     * @param parameters A list of input parameters for the stack set template. (optional)
     * @param capabilities &lt;p&gt;In some cases, you must explicitly acknowledge that your stack template contains certain capabilities in order for CloudFormation to update the stack set and its associated stack instances.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; and &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some stack templates might include resources that can affect permissions in your Amazon Web Services account; for example, by creating new Identity and Access Management (IAM) users. For those stacks sets, you must explicitly acknowledge this by specifying one of these capabilities.&lt;/p&gt; &lt;p&gt;The following IAM resources require you to specify either the &lt;code&gt;CAPABILITY_IAM&lt;/code&gt; or &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt; capability.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources, you can specify either capability.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you have IAM resources with custom names, you &lt;i&gt;must&lt;/i&gt; specify &lt;code&gt;CAPABILITY_NAMED_IAM&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify either of these capabilities, CloudFormation returns an &lt;code&gt;InsufficientCapabilities&lt;/code&gt; error.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If your stack template contains these resources, we recommend that you review all permissions associated with them and edit their permissions if necessary.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html\&quot;&gt; AWS::IAM::AccessKey&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html\&quot;&gt; AWS::IAM::Group&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\&quot;&gt; AWS::IAM::InstanceProfile&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-policy.html\&quot;&gt; AWS::IAM::Policy&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\&quot;&gt; AWS::IAM::Role&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html\&quot;&gt; AWS::IAM::User&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html\&quot;&gt; AWS::IAM::UserToGroupAddition&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/using-iam-template.html#capabilities\&quot;&gt;Acknowledging IAM Resources in CloudFormation Templates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CAPABILITY_AUTO_EXPAND&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Some templates reference macros. If your stack set template references one or more macros, you must update the stack set directly from the processed template, without first reviewing the resulting changes in a change set. To update the stack set directly, you must acknowledge this capability. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/template-macros.html\&quot;&gt;Using CloudFormation Macros to Perform Custom Processing on Templates&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Stack sets with service-managed permissions do not currently support the use of macros in templates. (This includes the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/create-reusable-transform-function-snippets-and-add-to-your-template-with-aws-include-transform.html\&quot;&gt;AWS::Include&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/transform-aws-serverless.html\&quot;&gt;AWS::Serverless&lt;/a&gt; transforms, which are macros hosted by CloudFormation.) Even if you specify this capability for a stack set with service-managed permissions, if you reference a macro in your template the stack set operation will fail.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param tags &lt;p&gt;The key-value pairs to associate with this stack set and the stacks created from it. CloudFormation also propagates these tags to supported resources that are created in the stacks. You can specify a maximum number of 50 tags.&lt;/p&gt; &lt;p&gt;If you specify tags for this parameter, those tags replace any list of tags that are currently associated with this stack set. This means:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify this parameter, CloudFormation doesn&#39;t modify the stack&#39;s tags.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify &lt;i&gt;any&lt;/i&gt; tags using this parameter, you must specify &lt;i&gt;all&lt;/i&gt; the tags that you want associated with this stack set, even tags you&#39;ve specified before (for example, when creating the stack set or during a previous update of the stack set.). Any tags that you don&#39;t include in the updated list of tags are removed from the stack set, and therefore from the stacks and resources as well.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you specify an empty value, CloudFormation removes all currently associated tags.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify new tags as part of an &lt;code&gt;UpdateStackSet&lt;/code&gt; action, CloudFormation checks to see if you have the required IAM permission to tag resources. If you omit tags that are currently associated with the stack set from the list of tags you specify, CloudFormation assumes that you want to remove those tags from the stack set, and checks to see if you have permission to untag resources. If you don&#39;t have the necessary permission(s), the entire &lt;code&gt;UpdateStackSet&lt;/code&gt; action fails with an &lt;code&gt;access denied&lt;/code&gt; error, and the stack set is not updated.&lt;/p&gt; (optional)
     * @param operationPreferences Preferences for how CloudFormation performs this stack set operation. (optional)
     * @param administrationRoleARN &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role to use to update this stack set.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized administrator roles to control which users or groups can manage specific stack sets within the same administrator account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/stacksets-prereqs.html\&quot;&gt;Granting Permissions for Stack Set Operations&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specified a customized administrator role when you created the stack set, you must specify a customized administrator role, even if it is the same customized administrator role used with this stack set previously.&lt;/p&gt; (optional)
     * @param executionRoleName &lt;p&gt;The name of the IAM execution role to use to update the stack set. If you do not specify an execution role, CloudFormation uses the &lt;code&gt;AWSCloudFormationStackSetExecutionRole&lt;/code&gt; role for the stack set operation.&lt;/p&gt; &lt;p&gt;Specify an IAM role only if you are using customized execution roles to control which stack resources users and groups can include in their stack sets.&lt;/p&gt; &lt;p&gt;If you specify a customized execution role, CloudFormation uses that role to update the stack. If you do not specify a customized execution role, CloudFormation performs the update using the role previously associated with the stack set, so long as you have permissions to perform operations on the stack set.&lt;/p&gt; (optional)
     * @param deploymentTargets &lt;p&gt;[Service-managed permissions] The Organizations accounts in which to update associated stack instances.&lt;/p&gt; &lt;p&gt;To update all the stack instances associated with this stack set, do not specify &lt;code&gt;DeploymentTargets&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; is specified), or the &lt;code&gt;Parameters&lt;/code&gt;, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update doesn&#39;t include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param permissionModel &lt;p&gt;Describes how the IAM roles required for stack set operations are created. You cannot modify &lt;code&gt;PermissionModel&lt;/code&gt; if there are stack instances associated with your stack set.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;self-managed&lt;/code&gt; permissions, you must create the administrator and execution roles required to deploy to target accounts. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html\&quot;&gt;Grant Self-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;With &lt;code&gt;service-managed&lt;/code&gt; permissions, StackSets automatically creates the IAM roles required to deploy to accounts managed by Organizations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-service-managed.html\&quot;&gt;Grant Service-Managed Stack Set Permissions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param autoDeployment &lt;p&gt;[Service-managed permissions] Describes whether StackSets automatically deploys to Organizations accounts that are added to a target organization or organizational unit (OU).&lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;AutoDeployment&lt;/code&gt;, don&#39;t specify &lt;code&gt;DeploymentTargets&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param operationId &lt;p&gt;The unique ID for this stack set operation.&lt;/p&gt; &lt;p&gt;The operation ID also functions as an idempotency token, to ensure that CloudFormation performs the stack set operation only once, even if you retry the request multiple times. You might retry stack set operation requests to ensure that CloudFormation successfully received them.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify an operation ID, CloudFormation generates one automatically.&lt;/p&gt; &lt;p&gt;Repeating this stack set operation with a new operation ID retries all stack instances whose status is &lt;code&gt;OUTDATED&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param accounts &lt;p&gt;[Self-managed permissions] The accounts in which to update associated stack instances. If you specify accounts, you must also specify the Amazon Web Services Regions in which to update stack set instances.&lt;/p&gt; &lt;p&gt;To update &lt;i&gt;all&lt;/i&gt; the stack instances associated with this stack set, don&#39;t specify the &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt; properties.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if the &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; properties are specified), or the &lt;code&gt;Parameters&lt;/code&gt; property, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Amazon Web Services Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Amazon Web Services Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param regions &lt;p&gt;The Amazon Web Services Regions in which to update associated stack instances. If you specify Regions, you must also specify accounts in which to update stack set instances.&lt;/p&gt; &lt;p&gt;To update &lt;i&gt;all&lt;/i&gt; the stack instances associated with this stack set, do not specify the &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;Regions&lt;/code&gt; properties.&lt;/p&gt; &lt;p&gt;If the stack set update includes changes to the template (that is, if the &lt;code&gt;TemplateBody&lt;/code&gt; or &lt;code&gt;TemplateURL&lt;/code&gt; properties are specified), or the &lt;code&gt;Parameters&lt;/code&gt; property, CloudFormation marks all stack instances with a status of &lt;code&gt;OUTDATED&lt;/code&gt; prior to updating the stack instances in the specified accounts and Regions. If the stack set update does not include changes to the template or parameters, CloudFormation updates the stack instances in the specified accounts and Regions, while leaving all other stack instances with their existing stack instance status.&lt;/p&gt; (optional)
     * @param callAs &lt;p&gt;[Service-managed permissions] Specifies whether you are acting as an account administrator in the organization&#39;s management account or as a delegated administrator in a member account.&lt;/p&gt; &lt;p&gt;By default, &lt;code&gt;SELF&lt;/code&gt; is specified. Use &lt;code&gt;SELF&lt;/code&gt; for stack sets with self-managed permissions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you are signed in to the management account, specify &lt;code&gt;SELF&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you are signed in to a delegated administrator account, specify &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Your Amazon Web Services account must be registered as a delegated administrator in the management account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-orgs-delegated-admin.html\&quot;&gt;Register a delegated administrator&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param managedExecution Describes whether StackSets performs non-conflicting operations concurrently and queues conflicting operations. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateStackSetAsync(String stackSetName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String description, String templateBody, String templateURL, Boolean usePreviousTemplate, List<Parameter> parameters, List<Capability> capabilities, List<Tag> tags, GETCreateStackInstancesOperationPreferencesParameter operationPreferences, String administrationRoleARN, String executionRoleName, GETCreateStackInstancesDeploymentTargetsParameter deploymentTargets, String permissionModel, GETCreateStackSetAutoDeploymentParameter autoDeployment, String operationId, List<String> accounts, List<String> regions, String callAs, GETCreateStackSetManagedExecutionParameter managedExecution, final ApiCallback<UpdateStackSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateStackSetValidateBeforeCall(stackSetName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description, templateBody, templateURL, usePreviousTemplate, parameters, capabilities, tags, operationPreferences, administrationRoleARN, executionRoleName, deploymentTargets, permissionModel, autoDeployment, operationId, accounts, regions, callAs, managedExecution, _callback);
        Type localVarReturnType = new TypeToken<UpdateStackSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETUpdateTerminationProtection
     * @param enableTerminationProtection Whether to enable termination protection on the specified stack. (required)
     * @param stackName The name or unique ID of the stack for which you want to set termination protection. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateTerminationProtectionCall(Boolean enableTerminationProtection, String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=UpdateTerminationProtection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enableTerminationProtection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EnableTerminationProtection", enableTerminationProtection));
        }

        if (stackName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StackName", stackName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETUpdateTerminationProtectionValidateBeforeCall(Boolean enableTerminationProtection, String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'enableTerminationProtection' is set
        if (enableTerminationProtection == null) {
            throw new ApiException("Missing the required parameter 'enableTerminationProtection' when calling gETUpdateTerminationProtection(Async)");
        }

        // verify the required parameter 'stackName' is set
        if (stackName == null) {
            throw new ApiException("Missing the required parameter 'stackName' when calling gETUpdateTerminationProtection(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETUpdateTerminationProtection(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETUpdateTerminationProtection(Async)");
        }

        return gETUpdateTerminationProtectionCall(enableTerminationProtection, stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates termination protection for the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt;
     * @param enableTerminationProtection Whether to enable termination protection on the specified stack. (required)
     * @param stackName The name or unique ID of the stack for which you want to set termination protection. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateTerminationProtectionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTerminationProtectionOutput gETUpdateTerminationProtection(Boolean enableTerminationProtection, String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateTerminationProtectionOutput> localVarResp = gETUpdateTerminationProtectionWithHttpInfo(enableTerminationProtection, stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates termination protection for the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt;
     * @param enableTerminationProtection Whether to enable termination protection on the specified stack. (required)
     * @param stackName The name or unique ID of the stack for which you want to set termination protection. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateTerminationProtectionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTerminationProtectionOutput> gETUpdateTerminationProtectionWithHttpInfo(Boolean enableTerminationProtection, String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETUpdateTerminationProtectionValidateBeforeCall(enableTerminationProtection, stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateTerminationProtectionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates termination protection for the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt;
     * @param enableTerminationProtection Whether to enable termination protection on the specified stack. (required)
     * @param stackName The name or unique ID of the stack for which you want to set termination protection. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETUpdateTerminationProtectionAsync(Boolean enableTerminationProtection, String stackName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateTerminationProtectionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETUpdateTerminationProtectionValidateBeforeCall(enableTerminationProtection, stackName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateTerminationProtectionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETValidateTemplate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETValidateTemplateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ValidateTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateBody != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateBody", templateBody));
        }

        if (templateURL != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TemplateURL", templateURL));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETValidateTemplateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETValidateTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETValidateTemplate(Async)");
        }

        return gETValidateTemplateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, _callback);

    }

    /**
     * 
     * Validates a specified template. CloudFormation first checks if the template is valid JSON. If it isn&#39;t, CloudFormation checks if the template is valid YAML. If both these checks fail, CloudFormation returns a template validation error.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @return ValidateTemplateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValidateTemplateOutput gETValidateTemplate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL) throws ApiException {
        ApiResponse<ValidateTemplateOutput> localVarResp = gETValidateTemplateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL);
        return localVarResp.getData();
    }

    /**
     * 
     * Validates a specified template. CloudFormation first checks if the template is valid JSON. If it isn&#39;t, CloudFormation checks if the template is valid YAML. If both these checks fail, CloudFormation returns a template validation error.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ValidateTemplateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateTemplateOutput> gETValidateTemplateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL) throws ApiException {
        okhttp3.Call localVarCall = gETValidateTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, null);
        Type localVarReturnType = new TypeToken<ValidateTemplateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Validates a specified template. CloudFormation first checks if the template is valid JSON. If it isn&#39;t, CloudFormation checks if the template is valid YAML. If both these checks fail, CloudFormation returns a template validation error.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param templateBody &lt;p&gt;Structure containing the template body with a minimum length of 1 byte and a maximum length of 51,200 bytes. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param templateURL &lt;p&gt;Location of file containing the template body. The URL must point to a template (max size: 460,800 bytes) that is located in an Amazon S3 bucket or a Systems Manager document. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html\&quot;&gt;Template Anatomy&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;p&gt;Conditional: You must pass &lt;code&gt;TemplateURL&lt;/code&gt; or &lt;code&gt;TemplateBody&lt;/code&gt;. If both are passed, only &lt;code&gt;TemplateBody&lt;/code&gt; is used.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETValidateTemplateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String templateBody, String templateURL, final ApiCallback<ValidateTemplateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETValidateTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, templateBody, templateURL, _callback);
        Type localVarReturnType = new TypeToken<ValidateTemplateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTActivateOrganizationsAccess
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTActivateOrganizationsAccessCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#Action=ActivateOrganizationsAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTActivateOrganizationsAccessValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTActivateOrganizationsAccess(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTActivateOrganizationsAccess(Async)");
        }

        return pOSTActivateOrganizationsAccessCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body, _callback);

    }

    /**
     * 
     * Activate trusted access with Organizations. With trusted access between StackSets and Organizations activated, the management account has permissions to create and manage StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTActivateOrganizationsAccess(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTActivateOrganizationsAccessWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Activate trusted access with Organizations. With trusted access between StackSets and Organizations activated, the management account has permissions to create and manage StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTActivateOrganizationsAccessWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body) throws ApiException {
        okhttp3.Call localVarCall = pOSTActivateOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Activate trusted access with Organizations. With trusted access between StackSets and Organizations activated, the management account has permissions to create and manage StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTActivateOrganizationsAccessAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTActivateOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTActivateType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param activateTypeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTActivateTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ActivateTypeInput activateTypeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activateTypeInput;

        // create path and map variables
        String localVarPath = "/#Action=ActivateType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTActivateTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ActivateTypeInput activateTypeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTActivateType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTActivateType(Async)");
        }

        return pOSTActivateTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, activateTypeInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Activates a public third-party extension, making it available for use in stack templates. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html\&quot;&gt;Using public extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Once you have activated a public third-party extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param activateTypeInput  (optional)
     * @return ActivateTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ActivateTypeOutput pOSTActivateType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ActivateTypeInput activateTypeInput) throws ApiException {
        ApiResponse<ActivateTypeOutput> localVarResp = pOSTActivateTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, activateTypeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Activates a public third-party extension, making it available for use in stack templates. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html\&quot;&gt;Using public extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Once you have activated a public third-party extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param activateTypeInput  (optional)
     * @return ApiResponse&lt;ActivateTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActivateTypeOutput> pOSTActivateTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ActivateTypeInput activateTypeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTActivateTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, activateTypeInput, null);
        Type localVarReturnType = new TypeToken<ActivateTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Activates a public third-party extension, making it available for use in stack templates. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-public.html\&quot;&gt;Using public extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Once you have activated a public third-party extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param activateTypeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTActivateTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ActivateTypeInput activateTypeInput, final ApiCallback<ActivateTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTActivateTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, activateTypeInput, _callback);
        Type localVarReturnType = new TypeToken<ActivateTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTBatchDescribeTypeConfigurations
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchDescribeTypeConfigurationsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TypeConfigurationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchDescribeTypeConfigurationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDescribeTypeConfigurationsInput batchDescribeTypeConfigurationsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchDescribeTypeConfigurationsInput;

        // create path and map variables
        String localVarPath = "/#Action=BatchDescribeTypeConfigurations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTBatchDescribeTypeConfigurationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDescribeTypeConfigurationsInput batchDescribeTypeConfigurationsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTBatchDescribeTypeConfigurations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTBatchDescribeTypeConfigurations(Async)");
        }

        return pOSTBatchDescribeTypeConfigurationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDescribeTypeConfigurationsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns configuration data for the specified CloudFormation extensions, from the CloudFormation registry for the account and Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchDescribeTypeConfigurationsInput  (optional)
     * @return BatchDescribeTypeConfigurationsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TypeConfigurationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public BatchDescribeTypeConfigurationsOutput pOSTBatchDescribeTypeConfigurations(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDescribeTypeConfigurationsInput batchDescribeTypeConfigurationsInput) throws ApiException {
        ApiResponse<BatchDescribeTypeConfigurationsOutput> localVarResp = pOSTBatchDescribeTypeConfigurationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDescribeTypeConfigurationsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns configuration data for the specified CloudFormation extensions, from the CloudFormation registry for the account and Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchDescribeTypeConfigurationsInput  (optional)
     * @return ApiResponse&lt;BatchDescribeTypeConfigurationsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TypeConfigurationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchDescribeTypeConfigurationsOutput> pOSTBatchDescribeTypeConfigurationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDescribeTypeConfigurationsInput batchDescribeTypeConfigurationsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTBatchDescribeTypeConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDescribeTypeConfigurationsInput, null);
        Type localVarReturnType = new TypeToken<BatchDescribeTypeConfigurationsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns configuration data for the specified CloudFormation extensions, from the CloudFormation registry for the account and Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchDescribeTypeConfigurationsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TypeConfigurationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchDescribeTypeConfigurationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchDescribeTypeConfigurationsInput batchDescribeTypeConfigurationsInput, final ApiCallback<BatchDescribeTypeConfigurationsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTBatchDescribeTypeConfigurationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDescribeTypeConfigurationsInput, _callback);
        Type localVarReturnType = new TypeToken<BatchDescribeTypeConfigurationsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCancelUpdateStack
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelUpdateStackInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCancelUpdateStackCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelUpdateStackInput cancelUpdateStackInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelUpdateStackInput;

        // create path and map variables
        String localVarPath = "/#Action=CancelUpdateStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCancelUpdateStackValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelUpdateStackInput cancelUpdateStackInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCancelUpdateStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCancelUpdateStack(Async)");
        }

        return pOSTCancelUpdateStackCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelUpdateStackInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels an update on the specified stack. If the call completes successfully, the stack rolls back the update and reverts to the previous stack configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can cancel only stacks that are in the &lt;code&gt;UPDATE_IN_PROGRESS&lt;/code&gt; state.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelUpdateStackInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTCancelUpdateStack(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelUpdateStackInput cancelUpdateStackInput) throws ApiException {
        pOSTCancelUpdateStackWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelUpdateStackInput);
    }

    /**
     * 
     * &lt;p&gt;Cancels an update on the specified stack. If the call completes successfully, the stack rolls back the update and reverts to the previous stack configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can cancel only stacks that are in the &lt;code&gt;UPDATE_IN_PROGRESS&lt;/code&gt; state.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelUpdateStackInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTCancelUpdateStackWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelUpdateStackInput cancelUpdateStackInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCancelUpdateStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelUpdateStackInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels an update on the specified stack. If the call completes successfully, the stack rolls back the update and reverts to the previous stack configuration.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can cancel only stacks that are in the &lt;code&gt;UPDATE_IN_PROGRESS&lt;/code&gt; state.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cancelUpdateStackInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCancelUpdateStackAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CancelUpdateStackInput cancelUpdateStackInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCancelUpdateStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelUpdateStackInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTContinueUpdateRollback
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param continueUpdateRollbackInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTContinueUpdateRollbackCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ContinueUpdateRollbackInput continueUpdateRollbackInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = continueUpdateRollbackInput;

        // create path and map variables
        String localVarPath = "/#Action=ContinueUpdateRollback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTContinueUpdateRollbackValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ContinueUpdateRollbackInput continueUpdateRollbackInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTContinueUpdateRollback(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTContinueUpdateRollback(Async)");
        }

        return pOSTContinueUpdateRollbackCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, continueUpdateRollbackInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;For a specified stack that&#39;s in the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state, continues rolling it back to the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state. Depending on the cause of the failure, you can manually &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; fix the error&lt;/a&gt; and continue the rollback. By continuing the rollback, you can return your stack to a working state (the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state), and then try to update the stack again.&lt;/p&gt; &lt;p&gt;A stack goes into the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state when CloudFormation can&#39;t roll back all changes after a failed stack update. For example, you might have a stack that&#39;s rolling back to an old database instance that was deleted outside of CloudFormation. Because CloudFormation doesn&#39;t know the database was deleted, it assumes that the database instance still exists and attempts to roll back to it, causing the update rollback to fail.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param continueUpdateRollbackInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTContinueUpdateRollback(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ContinueUpdateRollbackInput continueUpdateRollbackInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTContinueUpdateRollbackWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, continueUpdateRollbackInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;For a specified stack that&#39;s in the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state, continues rolling it back to the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state. Depending on the cause of the failure, you can manually &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; fix the error&lt;/a&gt; and continue the rollback. By continuing the rollback, you can return your stack to a working state (the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state), and then try to update the stack again.&lt;/p&gt; &lt;p&gt;A stack goes into the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state when CloudFormation can&#39;t roll back all changes after a failed stack update. For example, you might have a stack that&#39;s rolling back to an old database instance that was deleted outside of CloudFormation. Because CloudFormation doesn&#39;t know the database was deleted, it assumes that the database instance still exists and attempts to roll back to it, causing the update rollback to fail.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param continueUpdateRollbackInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTContinueUpdateRollbackWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ContinueUpdateRollbackInput continueUpdateRollbackInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTContinueUpdateRollbackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, continueUpdateRollbackInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;For a specified stack that&#39;s in the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state, continues rolling it back to the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state. Depending on the cause of the failure, you can manually &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-update-rollback-failed\&quot;&gt; fix the error&lt;/a&gt; and continue the rollback. By continuing the rollback, you can return your stack to a working state (the &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; state), and then try to update the stack again.&lt;/p&gt; &lt;p&gt;A stack goes into the &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt; state when CloudFormation can&#39;t roll back all changes after a failed stack update. For example, you might have a stack that&#39;s rolling back to an old database instance that was deleted outside of CloudFormation. Because CloudFormation doesn&#39;t know the database was deleted, it assumes that the database instance still exists and attempts to roll back to it, causing the update rollback to fail.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param continueUpdateRollbackInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTContinueUpdateRollbackAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ContinueUpdateRollbackInput continueUpdateRollbackInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTContinueUpdateRollbackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, continueUpdateRollbackInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateChangeSet
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createChangeSetInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateChangeSetCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateChangeSetInput createChangeSetInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChangeSetInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateChangeSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateChangeSetValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateChangeSetInput createChangeSetInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateChangeSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateChangeSet(Async)");
        }

        return pOSTCreateChangeSetCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createChangeSetInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a list of changes that will be applied to a stack so that you can review the changes before executing them. You can create a change set for a stack that doesn&#39;t exist or an existing stack. If you create a change set for a stack that doesn&#39;t exist, the change set shows all of the resources that CloudFormation will create. If you create a change set for an existing stack, CloudFormation compares the stack&#39;s information with the information that you submit in the change set and lists the differences. Use change sets to understand which resources CloudFormation will create or change, and how it will change resources in an existing stack, before you create or update a stack.&lt;/p&gt; &lt;p&gt;To create a change set for a stack that doesn&#39;t exist, for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. After the &lt;code&gt;CreateChangeSet&lt;/code&gt; call successfully completes, CloudFormation starts creating the change set. To check the status of the change set or to review it, use the &lt;a&gt;DescribeChangeSet&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;When you are satisfied with the changes the change set will make, execute the change set by using the &lt;a&gt;ExecuteChangeSet&lt;/a&gt; action. CloudFormation doesn&#39;t make changes until you execute the change set.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, set &lt;code&gt;IncludeNestedStacks&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createChangeSetInput  (optional)
     * @return CreateChangeSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateChangeSetOutput pOSTCreateChangeSet(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateChangeSetInput createChangeSetInput) throws ApiException {
        ApiResponse<CreateChangeSetOutput> localVarResp = pOSTCreateChangeSetWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createChangeSetInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a list of changes that will be applied to a stack so that you can review the changes before executing them. You can create a change set for a stack that doesn&#39;t exist or an existing stack. If you create a change set for a stack that doesn&#39;t exist, the change set shows all of the resources that CloudFormation will create. If you create a change set for an existing stack, CloudFormation compares the stack&#39;s information with the information that you submit in the change set and lists the differences. Use change sets to understand which resources CloudFormation will create or change, and how it will change resources in an existing stack, before you create or update a stack.&lt;/p&gt; &lt;p&gt;To create a change set for a stack that doesn&#39;t exist, for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. After the &lt;code&gt;CreateChangeSet&lt;/code&gt; call successfully completes, CloudFormation starts creating the change set. To check the status of the change set or to review it, use the &lt;a&gt;DescribeChangeSet&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;When you are satisfied with the changes the change set will make, execute the change set by using the &lt;a&gt;ExecuteChangeSet&lt;/a&gt; action. CloudFormation doesn&#39;t make changes until you execute the change set.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, set &lt;code&gt;IncludeNestedStacks&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createChangeSetInput  (optional)
     * @return ApiResponse&lt;CreateChangeSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateChangeSetOutput> pOSTCreateChangeSetWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateChangeSetInput createChangeSetInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateChangeSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createChangeSetInput, null);
        Type localVarReturnType = new TypeToken<CreateChangeSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a list of changes that will be applied to a stack so that you can review the changes before executing them. You can create a change set for a stack that doesn&#39;t exist or an existing stack. If you create a change set for a stack that doesn&#39;t exist, the change set shows all of the resources that CloudFormation will create. If you create a change set for an existing stack, CloudFormation compares the stack&#39;s information with the information that you submit in the change set and lists the differences. Use change sets to understand which resources CloudFormation will create or change, and how it will change resources in an existing stack, before you create or update a stack.&lt;/p&gt; &lt;p&gt;To create a change set for a stack that doesn&#39;t exist, for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter, specify &lt;code&gt;CREATE&lt;/code&gt;. To create a change set for an existing stack, specify &lt;code&gt;UPDATE&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. To create a change set for an import operation, specify &lt;code&gt;IMPORT&lt;/code&gt; for the &lt;code&gt;ChangeSetType&lt;/code&gt; parameter. After the &lt;code&gt;CreateChangeSet&lt;/code&gt; call successfully completes, CloudFormation starts creating the change set. To check the status of the change set or to review it, use the &lt;a&gt;DescribeChangeSet&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;When you are satisfied with the changes the change set will make, execute the change set by using the &lt;a&gt;ExecuteChangeSet&lt;/a&gt; action. CloudFormation doesn&#39;t make changes until you execute the change set.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, set &lt;code&gt;IncludeNestedStacks&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createChangeSetInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateChangeSetAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateChangeSetInput createChangeSetInput, final ApiCallback<CreateChangeSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateChangeSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createChangeSetInput, _callback);
        Type localVarReturnType = new TypeToken<CreateChangeSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateStack
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateStackCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInput createStackInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStackInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateStackValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInput createStackInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateStack(Async)");
        }

        return pOSTCreateStackCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackInput, _callback);

    }

    /**
     * 
     * Creates a stack as specified in the template. After the call completes successfully, the stack creation starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackInput  (optional)
     * @return CreateStackOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStackOutput pOSTCreateStack(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInput createStackInput) throws ApiException {
        ApiResponse<CreateStackOutput> localVarResp = pOSTCreateStackWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a stack as specified in the template. After the call completes successfully, the stack creation starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackInput  (optional)
     * @return ApiResponse&lt;CreateStackOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStackOutput> pOSTCreateStackWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInput createStackInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackInput, null);
        Type localVarReturnType = new TypeToken<CreateStackOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a stack as specified in the template. After the call completes successfully, the stack creation starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateStackAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInput createStackInput, final ApiCallback<CreateStackOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackInput, _callback);
        Type localVarReturnType = new TypeToken<CreateStackOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateStackInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackInstancesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateStackInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInstancesInput createStackInstancesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStackInstancesInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateStackInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateStackInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInstancesInput createStackInstancesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateStackInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateStackInstances(Async)");
        }

        return pOSTCreateStackInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackInstancesInput, _callback);

    }

    /**
     * 
     * Creates stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region. You must specify at least one value for either &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, and you must specify at least one value for &lt;code&gt;Regions&lt;/code&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackInstancesInput  (optional)
     * @return CreateStackInstancesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStackInstancesOutput pOSTCreateStackInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInstancesInput createStackInstancesInput) throws ApiException {
        ApiResponse<CreateStackInstancesOutput> localVarResp = pOSTCreateStackInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackInstancesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region. You must specify at least one value for either &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, and you must specify at least one value for &lt;code&gt;Regions&lt;/code&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackInstancesInput  (optional)
     * @return ApiResponse&lt;CreateStackInstancesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStackInstancesOutput> pOSTCreateStackInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInstancesInput createStackInstancesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateStackInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackInstancesInput, null);
        Type localVarReturnType = new TypeToken<CreateStackInstancesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region. You must specify at least one value for either &lt;code&gt;Accounts&lt;/code&gt; or &lt;code&gt;DeploymentTargets&lt;/code&gt;, and you must specify at least one value for &lt;code&gt;Regions&lt;/code&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackInstancesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateStackInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackInstancesInput createStackInstancesInput, final ApiCallback<CreateStackInstancesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateStackInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackInstancesInput, _callback);
        Type localVarReturnType = new TypeToken<CreateStackInstancesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateStackSet
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackSetInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CreatedButModifiedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateStackSetCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackSetInput createStackSetInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStackSetInput;

        // create path and map variables
        String localVarPath = "/#Action=CreateStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateStackSetValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackSetInput createStackSetInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateStackSet(Async)");
        }

        return pOSTCreateStackSetCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackSetInput, _callback);

    }

    /**
     * 
     * Creates a stack set.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackSetInput  (optional)
     * @return CreateStackSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CreatedButModifiedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public CreateStackSetOutput pOSTCreateStackSet(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackSetInput createStackSetInput) throws ApiException {
        ApiResponse<CreateStackSetOutput> localVarResp = pOSTCreateStackSetWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackSetInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a stack set.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackSetInput  (optional)
     * @return ApiResponse&lt;CreateStackSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CreatedButModifiedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStackSetOutput> pOSTCreateStackSetWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackSetInput createStackSetInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackSetInput, null);
        Type localVarReturnType = new TypeToken<CreateStackSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a stack set.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createStackSetInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NameAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CreatedButModifiedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateStackSetAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateStackSetInput createStackSetInput, final ApiCallback<CreateStackSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createStackSetInput, _callback);
        Type localVarReturnType = new TypeToken<CreateStackSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeactivateOrganizationsAccess
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeactivateOrganizationsAccessCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#Action=DeactivateOrganizationsAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeactivateOrganizationsAccessValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeactivateOrganizationsAccess(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeactivateOrganizationsAccess(Async)");
        }

        return pOSTDeactivateOrganizationsAccessCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body, _callback);

    }

    /**
     * 
     * Deactivates trusted access with Organizations. If trusted access is deactivated, the management account does not have permissions to create and manage service-managed StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeactivateOrganizationsAccess(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeactivateOrganizationsAccessWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Deactivates trusted access with Organizations. If trusted access is deactivated, the management account does not have permissions to create and manage service-managed StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeactivateOrganizationsAccessWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeactivateOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deactivates trusted access with Organizations. If trusted access is deactivated, the management account does not have permissions to create and manage service-managed StackSets for your organization.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeactivateOrganizationsAccessAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeactivateOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeactivateType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deactivateTypeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeactivateTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeactivateTypeInput deactivateTypeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deactivateTypeInput;

        // create path and map variables
        String localVarPath = "/#Action=DeactivateType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeactivateTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeactivateTypeInput deactivateTypeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeactivateType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeactivateType(Async)");
        }

        return pOSTDeactivateTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deactivateTypeInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deactivates a public extension that was previously activated in this account and Region.&lt;/p&gt; &lt;p&gt;Once deactivated, an extension can&#39;t be used in any CloudFormation operation. This includes stack update operations where the stack template includes the extension, even if no updates are being made to the extension. In addition, deactivated extensions aren&#39;t automatically updated if a new version of the extension is released.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deactivateTypeInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeactivateType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeactivateTypeInput deactivateTypeInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeactivateTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deactivateTypeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deactivates a public extension that was previously activated in this account and Region.&lt;/p&gt; &lt;p&gt;Once deactivated, an extension can&#39;t be used in any CloudFormation operation. This includes stack update operations where the stack template includes the extension, even if no updates are being made to the extension. In addition, deactivated extensions aren&#39;t automatically updated if a new version of the extension is released.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deactivateTypeInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeactivateTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeactivateTypeInput deactivateTypeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeactivateTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deactivateTypeInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deactivates a public extension that was previously activated in this account and Region.&lt;/p&gt; &lt;p&gt;Once deactivated, an extension can&#39;t be used in any CloudFormation operation. This includes stack update operations where the stack template includes the extension, even if no updates are being made to the extension. In addition, deactivated extensions aren&#39;t automatically updated if a new version of the extension is released.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deactivateTypeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeactivateTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeactivateTypeInput deactivateTypeInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeactivateTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deactivateTypeInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteChangeSet
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteChangeSetInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteChangeSetCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteChangeSetInput deleteChangeSetInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteChangeSetInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteChangeSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteChangeSetValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteChangeSetInput deleteChangeSetInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteChangeSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteChangeSet(Async)");
        }

        return pOSTDeleteChangeSetCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteChangeSetInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified change set. Deleting change sets ensures that no one executes the wrong change set.&lt;/p&gt; &lt;p&gt;If the call successfully completes, CloudFormation successfully deleted the change set.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;IncludeNestedStacks&lt;/code&gt; specifies &lt;code&gt;True&lt;/code&gt; during the creation of the nested change set, then &lt;code&gt;DeleteChangeSet&lt;/code&gt; will delete all change sets that belong to the stacks hierarchy and will also delete all change sets for nested stacks with the status of &lt;code&gt;REVIEW_IN_PROGRESS&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteChangeSetInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteChangeSet(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteChangeSetInput deleteChangeSetInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteChangeSetWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteChangeSetInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified change set. Deleting change sets ensures that no one executes the wrong change set.&lt;/p&gt; &lt;p&gt;If the call successfully completes, CloudFormation successfully deleted the change set.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;IncludeNestedStacks&lt;/code&gt; specifies &lt;code&gt;True&lt;/code&gt; during the creation of the nested change set, then &lt;code&gt;DeleteChangeSet&lt;/code&gt; will delete all change sets that belong to the stacks hierarchy and will also delete all change sets for nested stacks with the status of &lt;code&gt;REVIEW_IN_PROGRESS&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteChangeSetInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteChangeSetWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteChangeSetInput deleteChangeSetInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteChangeSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteChangeSetInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified change set. Deleting change sets ensures that no one executes the wrong change set.&lt;/p&gt; &lt;p&gt;If the call successfully completes, CloudFormation successfully deleted the change set.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;IncludeNestedStacks&lt;/code&gt; specifies &lt;code&gt;True&lt;/code&gt; during the creation of the nested change set, then &lt;code&gt;DeleteChangeSet&lt;/code&gt; will delete all change sets that belong to the stacks hierarchy and will also delete all change sets for nested stacks with the status of &lt;code&gt;REVIEW_IN_PROGRESS&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteChangeSetInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteChangeSetAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteChangeSetInput deleteChangeSetInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteChangeSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteChangeSetInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteStack
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteStackCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInput deleteStackInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteStackInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteStackValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInput deleteStackInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteStack(Async)");
        }

        return pOSTDeleteStackCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackInput, _callback);

    }

    /**
     * 
     * Deletes a specified stack. Once the call completes successfully, stack deletion starts. Deleted stacks don&#39;t show up in the &lt;a&gt;DescribeStacks&lt;/a&gt; operation if the deletion has been completed successfully.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteStack(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInput deleteStackInput) throws ApiException {
        pOSTDeleteStackWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackInput);
    }

    /**
     * 
     * Deletes a specified stack. Once the call completes successfully, stack deletion starts. Deleted stacks don&#39;t show up in the &lt;a&gt;DescribeStacks&lt;/a&gt; operation if the deletion has been completed successfully.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteStackWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInput deleteStackInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a specified stack. Once the call completes successfully, stack deletion starts. Deleted stacks don&#39;t show up in the &lt;a&gt;DescribeStacks&lt;/a&gt; operation if the deletion has been completed successfully.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteStackAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInput deleteStackInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteStackInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackInstancesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteStackInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInstancesInput deleteStackInstancesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteStackInstancesInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteStackInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteStackInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInstancesInput deleteStackInstancesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteStackInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteStackInstances(Async)");
        }

        return pOSTDeleteStackInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackInstancesInput, _callback);

    }

    /**
     * 
     * Deletes stack instances for the specified accounts, in the specified Amazon Web Services Regions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackInstancesInput  (optional)
     * @return DeleteStackInstancesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStackInstancesOutput pOSTDeleteStackInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInstancesInput deleteStackInstancesInput) throws ApiException {
        ApiResponse<DeleteStackInstancesOutput> localVarResp = pOSTDeleteStackInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackInstancesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes stack instances for the specified accounts, in the specified Amazon Web Services Regions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackInstancesInput  (optional)
     * @return ApiResponse&lt;DeleteStackInstancesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteStackInstancesOutput> pOSTDeleteStackInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInstancesInput deleteStackInstancesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteStackInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackInstancesInput, null);
        Type localVarReturnType = new TypeToken<DeleteStackInstancesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes stack instances for the specified accounts, in the specified Amazon Web Services Regions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackInstancesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteStackInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackInstancesInput deleteStackInstancesInput, final ApiCallback<DeleteStackInstancesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteStackInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackInstancesInput, _callback);
        Type localVarReturnType = new TypeToken<DeleteStackInstancesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteStackSet
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackSetInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteStackSetCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackSetInput deleteStackSetInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteStackSetInput;

        // create path and map variables
        String localVarPath = "/#Action=DeleteStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteStackSetValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackSetInput deleteStackSetInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteStackSet(Async)");
        }

        return pOSTDeleteStackSetCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackSetInput, _callback);

    }

    /**
     * 
     * Deletes a stack set. Before you can delete a stack set, all its member stack instances must be deleted. For more information about how to complete this, see &lt;a&gt;DeleteStackInstances&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackSetInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeleteStackSet(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackSetInput deleteStackSetInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeleteStackSetWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackSetInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a stack set. Before you can delete a stack set, all its member stack instances must be deleted. For more information about how to complete this, see &lt;a&gt;DeleteStackInstances&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackSetInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeleteStackSetWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackSetInput deleteStackSetInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackSetInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a stack set. Before you can delete a stack set, all its member stack instances must be deleted. For more information about how to complete this, see &lt;a&gt;DeleteStackInstances&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteStackSetInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteStackSetAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteStackSetInput deleteStackSetInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteStackSetInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeregisterType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterTypeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeregisterTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTypeInput deregisterTypeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deregisterTypeInput;

        // create path and map variables
        String localVarPath = "/#Action=DeregisterType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeregisterTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTypeInput deregisterTypeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeregisterType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeregisterType(Async)");
        }

        return pOSTDeregisterTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterTypeInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Marks an extension or extension version as &lt;code&gt;DEPRECATED&lt;/code&gt; in the CloudFormation registry, removing it from active use. Deprecated extensions or extension versions cannot be used in CloudFormation operations.&lt;/p&gt; &lt;p&gt;To deregister an entire extension, you must individually deregister all active versions of that extension. If an extension has only a single active version, deregistering that version results in the extension itself being deregistered and marked as deprecated in the registry.&lt;/p&gt; &lt;p&gt;You can&#39;t deregister the default version of an extension if there are other active version of that extension. If you do deregister the default version of an extension, the extension type itself is deregistered as well and marked as deprecated.&lt;/p&gt; &lt;p&gt;To view the deprecation status of an extension or extension version, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterTypeInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTDeregisterType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTypeInput deregisterTypeInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTDeregisterTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterTypeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Marks an extension or extension version as &lt;code&gt;DEPRECATED&lt;/code&gt; in the CloudFormation registry, removing it from active use. Deprecated extensions or extension versions cannot be used in CloudFormation operations.&lt;/p&gt; &lt;p&gt;To deregister an entire extension, you must individually deregister all active versions of that extension. If an extension has only a single active version, deregistering that version results in the extension itself being deregistered and marked as deprecated in the registry.&lt;/p&gt; &lt;p&gt;You can&#39;t deregister the default version of an extension if there are other active version of that extension. If you do deregister the default version of an extension, the extension type itself is deregistered as well and marked as deprecated.&lt;/p&gt; &lt;p&gt;To view the deprecation status of an extension or extension version, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterTypeInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTDeregisterTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTypeInput deregisterTypeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeregisterTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterTypeInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Marks an extension or extension version as &lt;code&gt;DEPRECATED&lt;/code&gt; in the CloudFormation registry, removing it from active use. Deprecated extensions or extension versions cannot be used in CloudFormation operations.&lt;/p&gt; &lt;p&gt;To deregister an entire extension, you must individually deregister all active versions of that extension. If an extension has only a single active version, deregistering that version results in the extension itself being deregistered and marked as deprecated in the registry.&lt;/p&gt; &lt;p&gt;You can&#39;t deregister the default version of an extension if there are other active version of that extension. If you do deregister the default version of an extension, the extension type itself is deregistered as well and marked as deprecated.&lt;/p&gt; &lt;p&gt;To view the deprecation status of an extension or extension version, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deregisterTypeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeregisterTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeregisterTypeInput deregisterTypeInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeregisterTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deregisterTypeInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeAccountLimits
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAccountLimitsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountLimitsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeAccountLimitsInput describeAccountLimitsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeAccountLimitsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeAccountLimits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeAccountLimitsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeAccountLimitsInput describeAccountLimitsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeAccountLimits(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeAccountLimits(Async)");
        }

        return pOSTDescribeAccountLimitsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeAccountLimitsInput, _callback);

    }

    /**
     * 
     * Retrieves your account&#39;s CloudFormation limits, such as the maximum number of stacks that you can create in your account. For more information about account limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html\&quot;&gt;CloudFormation Quotas&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAccountLimitsInput  (optional)
     * @return DescribeAccountLimitsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeAccountLimitsOutput pOSTDescribeAccountLimits(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeAccountLimitsInput describeAccountLimitsInput) throws ApiException {
        ApiResponse<DescribeAccountLimitsOutput> localVarResp = pOSTDescribeAccountLimitsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeAccountLimitsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves your account&#39;s CloudFormation limits, such as the maximum number of stacks that you can create in your account. For more information about account limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html\&quot;&gt;CloudFormation Quotas&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAccountLimitsInput  (optional)
     * @return ApiResponse&lt;DescribeAccountLimitsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeAccountLimitsOutput> pOSTDescribeAccountLimitsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeAccountLimitsInput describeAccountLimitsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeAccountLimitsInput, null);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves your account&#39;s CloudFormation limits, such as the maximum number of stacks that you can create in your account. For more information about account limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html\&quot;&gt;CloudFormation Quotas&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeAccountLimitsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeAccountLimitsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeAccountLimitsInput describeAccountLimitsInput, final ApiCallback<DescribeAccountLimitsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeAccountLimitsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeAccountLimitsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeAccountLimitsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeChangeSet
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeChangeSetInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeChangeSetCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetInput describeChangeSetInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeChangeSetInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeChangeSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeChangeSetValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetInput describeChangeSetInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeChangeSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeChangeSet(Async)");
        }

        return pOSTDescribeChangeSetCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeChangeSetInput, _callback);

    }

    /**
     * 
     * Returns the inputs for the change set and a list of changes that CloudFormation will make if you execute the change set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html\&quot;&gt;Updating Stacks Using Change Sets&lt;/a&gt; in the CloudFormation User Guide.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeChangeSetInput  (optional)
     * @return DescribeChangeSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChangeSetOutput pOSTDescribeChangeSet(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetInput describeChangeSetInput) throws ApiException {
        ApiResponse<DescribeChangeSetOutput> localVarResp = pOSTDescribeChangeSetWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeChangeSetInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the inputs for the change set and a list of changes that CloudFormation will make if you execute the change set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html\&quot;&gt;Updating Stacks Using Change Sets&lt;/a&gt; in the CloudFormation User Guide.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeChangeSetInput  (optional)
     * @return ApiResponse&lt;DescribeChangeSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChangeSetOutput> pOSTDescribeChangeSetWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetInput describeChangeSetInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeChangeSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeChangeSetInput, null);
        Type localVarReturnType = new TypeToken<DescribeChangeSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the inputs for the change set and a list of changes that CloudFormation will make if you execute the change set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html\&quot;&gt;Updating Stacks Using Change Sets&lt;/a&gt; in the CloudFormation User Guide.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeChangeSetInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeChangeSetAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetInput describeChangeSetInput, final ApiCallback<DescribeChangeSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeChangeSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeChangeSetInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeChangeSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeChangeSetHooks
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeChangeSetHooksInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeChangeSetHooksCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetHooksInput describeChangeSetHooksInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeChangeSetHooksInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeChangeSetHooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeChangeSetHooksValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetHooksInput describeChangeSetHooksInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeChangeSetHooks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeChangeSetHooks(Async)");
        }

        return pOSTDescribeChangeSetHooksCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeChangeSetHooksInput, _callback);

    }

    /**
     * 
     * Returns hook-related information for the change set and a list of changes that CloudFormation makes when you run the change set.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeChangeSetHooksInput  (optional)
     * @return DescribeChangeSetHooksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeChangeSetHooksOutput pOSTDescribeChangeSetHooks(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetHooksInput describeChangeSetHooksInput) throws ApiException {
        ApiResponse<DescribeChangeSetHooksOutput> localVarResp = pOSTDescribeChangeSetHooksWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeChangeSetHooksInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns hook-related information for the change set and a list of changes that CloudFormation makes when you run the change set.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeChangeSetHooksInput  (optional)
     * @return ApiResponse&lt;DescribeChangeSetHooksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeChangeSetHooksOutput> pOSTDescribeChangeSetHooksWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetHooksInput describeChangeSetHooksInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeChangeSetHooksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeChangeSetHooksInput, null);
        Type localVarReturnType = new TypeToken<DescribeChangeSetHooksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns hook-related information for the change set and a list of changes that CloudFormation makes when you run the change set.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeChangeSetHooksInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeChangeSetHooksAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeChangeSetHooksInput describeChangeSetHooksInput, final ApiCallback<DescribeChangeSetHooksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeChangeSetHooksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeChangeSetHooksInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeChangeSetHooksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeOrganizationsAccess
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeOrganizationsAccessInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeOrganizationsAccessCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeOrganizationsAccessInput describeOrganizationsAccessInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeOrganizationsAccessInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeOrganizationsAccess";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeOrganizationsAccessValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeOrganizationsAccessInput describeOrganizationsAccessInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeOrganizationsAccess(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeOrganizationsAccess(Async)");
        }

        return pOSTDescribeOrganizationsAccessCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeOrganizationsAccessInput, _callback);

    }

    /**
     * 
     * Retrieves information about the account&#39;s &lt;code&gt;OrganizationAccess&lt;/code&gt; status. This API can be called either by the management account or the delegated administrator by using the &lt;code&gt;CallAs&lt;/code&gt; parameter. This API can also be called without the &lt;code&gt;CallAs&lt;/code&gt; parameter by the management account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeOrganizationsAccessInput  (optional)
     * @return DescribeOrganizationsAccessOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeOrganizationsAccessOutput pOSTDescribeOrganizationsAccess(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeOrganizationsAccessInput describeOrganizationsAccessInput) throws ApiException {
        ApiResponse<DescribeOrganizationsAccessOutput> localVarResp = pOSTDescribeOrganizationsAccessWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeOrganizationsAccessInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves information about the account&#39;s &lt;code&gt;OrganizationAccess&lt;/code&gt; status. This API can be called either by the management account or the delegated administrator by using the &lt;code&gt;CallAs&lt;/code&gt; parameter. This API can also be called without the &lt;code&gt;CallAs&lt;/code&gt; parameter by the management account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeOrganizationsAccessInput  (optional)
     * @return ApiResponse&lt;DescribeOrganizationsAccessOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeOrganizationsAccessOutput> pOSTDescribeOrganizationsAccessWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeOrganizationsAccessInput describeOrganizationsAccessInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeOrganizationsAccessInput, null);
        Type localVarReturnType = new TypeToken<DescribeOrganizationsAccessOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves information about the account&#39;s &lt;code&gt;OrganizationAccess&lt;/code&gt; status. This API can be called either by the management account or the delegated administrator by using the &lt;code&gt;CallAs&lt;/code&gt; parameter. This API can also be called without the &lt;code&gt;CallAs&lt;/code&gt; parameter by the management account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeOrganizationsAccessInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeOrganizationsAccessAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeOrganizationsAccessInput describeOrganizationsAccessInput, final ApiCallback<DescribeOrganizationsAccessOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeOrganizationsAccessValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeOrganizationsAccessInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeOrganizationsAccessOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribePublisher
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describePublisherInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePublisherCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePublisherInput describePublisherInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describePublisherInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribePublisher";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribePublisherValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePublisherInput describePublisherInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribePublisher(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribePublisher(Async)");
        }

        return pOSTDescribePublisherCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describePublisherInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about a CloudFormation extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; &lt;p&gt;For more information about registering as a publisher, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describePublisherInput  (optional)
     * @return DescribePublisherOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public DescribePublisherOutput pOSTDescribePublisher(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePublisherInput describePublisherInput) throws ApiException {
        ApiResponse<DescribePublisherOutput> localVarResp = pOSTDescribePublisherWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describePublisherInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about a CloudFormation extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; &lt;p&gt;For more information about registering as a publisher, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describePublisherInput  (optional)
     * @return ApiResponse&lt;DescribePublisherOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribePublisherOutput> pOSTDescribePublisherWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePublisherInput describePublisherInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribePublisherValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describePublisherInput, null);
        Type localVarReturnType = new TypeToken<DescribePublisherOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about a CloudFormation extension publisher.&lt;/p&gt; &lt;p&gt;If you don&#39;t supply a &lt;code&gt;PublisherId&lt;/code&gt;, and you have registered as an extension publisher, &lt;code&gt;DescribePublisher&lt;/code&gt; returns information about your own publisher account.&lt;/p&gt; &lt;p&gt;For more information about registering as a publisher, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describePublisherInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribePublisherAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribePublisherInput describePublisherInput, final ApiCallback<DescribePublisherOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribePublisherValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describePublisherInput, _callback);
        Type localVarReturnType = new TypeToken<DescribePublisherOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeStackDriftDetectionStatus
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackDriftDetectionStatusInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackDriftDetectionStatusCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackDriftDetectionStatusInput describeStackDriftDetectionStatusInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStackDriftDetectionStatusInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackDriftDetectionStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeStackDriftDetectionStatusValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackDriftDetectionStatusInput describeStackDriftDetectionStatusInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeStackDriftDetectionStatus(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeStackDriftDetectionStatus(Async)");
        }

        return pOSTDescribeStackDriftDetectionStatusCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackDriftDetectionStatusInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about a stack drift detection operation. A stack drift detection operation detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackDrift&lt;/a&gt; to initiate a stack drift detection operation. &lt;code&gt;DetectStackDrift&lt;/code&gt; returns a &lt;code&gt;StackDriftDetectionId&lt;/code&gt; you can use to monitor the progress of the operation using &lt;code&gt;DescribeStackDriftDetectionStatus&lt;/code&gt;. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackDriftDetectionStatusInput  (optional)
     * @return DescribeStackDriftDetectionStatusOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackDriftDetectionStatusOutput pOSTDescribeStackDriftDetectionStatus(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackDriftDetectionStatusInput describeStackDriftDetectionStatusInput) throws ApiException {
        ApiResponse<DescribeStackDriftDetectionStatusOutput> localVarResp = pOSTDescribeStackDriftDetectionStatusWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackDriftDetectionStatusInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about a stack drift detection operation. A stack drift detection operation detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackDrift&lt;/a&gt; to initiate a stack drift detection operation. &lt;code&gt;DetectStackDrift&lt;/code&gt; returns a &lt;code&gt;StackDriftDetectionId&lt;/code&gt; you can use to monitor the progress of the operation using &lt;code&gt;DescribeStackDriftDetectionStatus&lt;/code&gt;. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackDriftDetectionStatusInput  (optional)
     * @return ApiResponse&lt;DescribeStackDriftDetectionStatusOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackDriftDetectionStatusOutput> pOSTDescribeStackDriftDetectionStatusWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackDriftDetectionStatusInput describeStackDriftDetectionStatusInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeStackDriftDetectionStatusValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackDriftDetectionStatusInput, null);
        Type localVarReturnType = new TypeToken<DescribeStackDriftDetectionStatusOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about a stack drift detection operation. A stack drift detection operation detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. A stack is considered to have drifted if one or more of its resources have drifted. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackDrift&lt;/a&gt; to initiate a stack drift detection operation. &lt;code&gt;DetectStackDrift&lt;/code&gt; returns a &lt;code&gt;StackDriftDetectionId&lt;/code&gt; you can use to monitor the progress of the operation using &lt;code&gt;DescribeStackDriftDetectionStatus&lt;/code&gt;. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackDriftDetectionStatusInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackDriftDetectionStatusAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackDriftDetectionStatusInput describeStackDriftDetectionStatusInput, final ApiCallback<DescribeStackDriftDetectionStatusOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeStackDriftDetectionStatusValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackDriftDetectionStatusInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackDriftDetectionStatusOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeStackEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStackEventsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStackEventsInput describeStackEventsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStackEventsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeStackEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStackEventsInput describeStackEventsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeStackEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeStackEvents(Async)");
        }

        return pOSTDescribeStackEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeStackEventsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns all stack related events for a specified stack in reverse chronological order. For more information about a stack&#39;s event history, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/concept-stack.html\&quot;&gt;Stacks&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can list events for stacks that have failed to create or have been deleted by specifying the unique stack identifier (stack ID).&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStackEventsInput  (optional)
     * @return DescribeStackEventsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackEventsOutput pOSTDescribeStackEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStackEventsInput describeStackEventsInput) throws ApiException {
        ApiResponse<DescribeStackEventsOutput> localVarResp = pOSTDescribeStackEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeStackEventsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns all stack related events for a specified stack in reverse chronological order. For more information about a stack&#39;s event history, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/concept-stack.html\&quot;&gt;Stacks&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can list events for stacks that have failed to create or have been deleted by specifying the unique stack identifier (stack ID).&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStackEventsInput  (optional)
     * @return ApiResponse&lt;DescribeStackEventsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackEventsOutput> pOSTDescribeStackEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStackEventsInput describeStackEventsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeStackEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeStackEventsInput, null);
        Type localVarReturnType = new TypeToken<DescribeStackEventsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns all stack related events for a specified stack in reverse chronological order. For more information about a stack&#39;s event history, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/concept-stack.html\&quot;&gt;Stacks&lt;/a&gt; in the CloudFormation User Guide.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can list events for stacks that have failed to create or have been deleted by specifying the unique stack identifier (stack ID).&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStackEventsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStackEventsInput describeStackEventsInput, final ApiCallback<DescribeStackEventsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeStackEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeStackEventsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackEventsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeStackInstance
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackInstanceInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackInstanceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackInstanceInput describeStackInstanceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStackInstanceInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackInstance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeStackInstanceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackInstanceInput describeStackInstanceInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeStackInstance(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeStackInstance(Async)");
        }

        return pOSTDescribeStackInstanceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackInstanceInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the stack instance that&#39;s associated with the specified StackSet, Amazon Web Services account, and Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;For a list of stack instances that are associated with a specific StackSet, use &lt;a&gt;ListStackInstances&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackInstanceInput  (optional)
     * @return DescribeStackInstanceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackInstanceOutput pOSTDescribeStackInstance(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackInstanceInput describeStackInstanceInput) throws ApiException {
        ApiResponse<DescribeStackInstanceOutput> localVarResp = pOSTDescribeStackInstanceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackInstanceInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the stack instance that&#39;s associated with the specified StackSet, Amazon Web Services account, and Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;For a list of stack instances that are associated with a specific StackSet, use &lt;a&gt;ListStackInstances&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackInstanceInput  (optional)
     * @return ApiResponse&lt;DescribeStackInstanceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackInstanceOutput> pOSTDescribeStackInstanceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackInstanceInput describeStackInstanceInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeStackInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackInstanceInput, null);
        Type localVarReturnType = new TypeToken<DescribeStackInstanceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the stack instance that&#39;s associated with the specified StackSet, Amazon Web Services account, and Amazon Web Services Region.&lt;/p&gt; &lt;p&gt;For a list of stack instances that are associated with a specific StackSet, use &lt;a&gt;ListStackInstances&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackInstanceInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackInstanceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackInstanceInput describeStackInstanceInput, final ApiCallback<DescribeStackInstanceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeStackInstanceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackInstanceInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackInstanceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeStackResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackResourceInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourceInput describeStackResourceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStackResourceInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeStackResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourceInput describeStackResourceInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeStackResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeStackResource(Async)");
        }

        return pOSTDescribeStackResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackResourceInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a description of the specified resource in the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, DescribeStackResource returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackResourceInput  (optional)
     * @return DescribeStackResourceOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackResourceOutput pOSTDescribeStackResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourceInput describeStackResourceInput) throws ApiException {
        ApiResponse<DescribeStackResourceOutput> localVarResp = pOSTDescribeStackResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackResourceInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a description of the specified resource in the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, DescribeStackResource returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackResourceInput  (optional)
     * @return ApiResponse&lt;DescribeStackResourceOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackResourceOutput> pOSTDescribeStackResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourceInput describeStackResourceInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeStackResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackResourceInput, null);
        Type localVarReturnType = new TypeToken<DescribeStackResourceOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a description of the specified resource in the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, DescribeStackResource returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackResourceInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourceInput describeStackResourceInput, final ApiCallback<DescribeStackResourceOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeStackResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackResourceInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackResourceOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeStackResourceDrifts
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStackResourceDriftsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackResourceDriftsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeStackResourceDriftsInput describeStackResourceDriftsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStackResourceDriftsInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackResourceDrifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeStackResourceDriftsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeStackResourceDriftsInput describeStackResourceDriftsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeStackResourceDrifts(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeStackResourceDrifts(Async)");
        }

        return pOSTDescribeStackResourceDriftsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeStackResourceDriftsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects configuration drift.&lt;/p&gt; &lt;p&gt;For a given stack, there will be one &lt;code&gt;StackResourceDrift&lt;/code&gt; for each stack resource that has been checked for drift. Resources that haven&#39;t yet been checked for drift aren&#39;t included. Resources that don&#39;t currently support drift detection aren&#39;t checked, and so not included. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all supported resources for a given stack.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStackResourceDriftsInput  (optional)
     * @return DescribeStackResourceDriftsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackResourceDriftsOutput pOSTDescribeStackResourceDrifts(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeStackResourceDriftsInput describeStackResourceDriftsInput) throws ApiException {
        ApiResponse<DescribeStackResourceDriftsOutput> localVarResp = pOSTDescribeStackResourceDriftsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeStackResourceDriftsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects configuration drift.&lt;/p&gt; &lt;p&gt;For a given stack, there will be one &lt;code&gt;StackResourceDrift&lt;/code&gt; for each stack resource that has been checked for drift. Resources that haven&#39;t yet been checked for drift aren&#39;t included. Resources that don&#39;t currently support drift detection aren&#39;t checked, and so not included. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all supported resources for a given stack.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStackResourceDriftsInput  (optional)
     * @return ApiResponse&lt;DescribeStackResourceDriftsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackResourceDriftsOutput> pOSTDescribeStackResourceDriftsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeStackResourceDriftsInput describeStackResourceDriftsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeStackResourceDriftsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeStackResourceDriftsInput, null);
        Type localVarReturnType = new TypeToken<DescribeStackResourceDriftsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns drift information for the resources that have been checked for drift in the specified stack. This includes actual and expected configuration values for resources where CloudFormation detects configuration drift.&lt;/p&gt; &lt;p&gt;For a given stack, there will be one &lt;code&gt;StackResourceDrift&lt;/code&gt; for each stack resource that has been checked for drift. Resources that haven&#39;t yet been checked for drift aren&#39;t included. Resources that don&#39;t currently support drift detection aren&#39;t checked, and so not included. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all supported resources for a given stack.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStackResourceDriftsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackResourceDriftsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, DescribeStackResourceDriftsInput describeStackResourceDriftsInput, final ApiCallback<DescribeStackResourceDriftsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeStackResourceDriftsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, describeStackResourceDriftsInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackResourceDriftsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeStackResources
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackResourcesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackResourcesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourcesInput describeStackResourcesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStackResourcesInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeStackResourcesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourcesInput describeStackResourcesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeStackResources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeStackResources(Async)");
        }

        return pOSTDescribeStackResourcesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackResourcesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns Amazon Web Services resource descriptions for running and deleted stacks. If &lt;code&gt;StackName&lt;/code&gt; is specified, all the associated resources that are part of the stack are returned. If &lt;code&gt;PhysicalResourceId&lt;/code&gt; is specified, the associated resources of the stack that the resource belongs to are returned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the first 100 resources will be returned. If your stack has more resources than this, you should use &lt;code&gt;ListStackResources&lt;/code&gt; instead.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;DescribeStackResources&lt;/code&gt; returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;p&gt;You must specify either &lt;code&gt;StackName&lt;/code&gt; or &lt;code&gt;PhysicalResourceId&lt;/code&gt;, but not both. In addition, you can specify &lt;code&gt;LogicalResourceId&lt;/code&gt; to filter the returned result. For more information about resources, the &lt;code&gt;LogicalResourceId&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt;, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/\&quot;&gt;CloudFormation User Guide&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;code&gt;ValidationError&lt;/code&gt; is returned if you specify both &lt;code&gt;StackName&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt; in the same request.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackResourcesInput  (optional)
     * @return DescribeStackResourcesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackResourcesOutput pOSTDescribeStackResources(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourcesInput describeStackResourcesInput) throws ApiException {
        ApiResponse<DescribeStackResourcesOutput> localVarResp = pOSTDescribeStackResourcesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackResourcesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns Amazon Web Services resource descriptions for running and deleted stacks. If &lt;code&gt;StackName&lt;/code&gt; is specified, all the associated resources that are part of the stack are returned. If &lt;code&gt;PhysicalResourceId&lt;/code&gt; is specified, the associated resources of the stack that the resource belongs to are returned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the first 100 resources will be returned. If your stack has more resources than this, you should use &lt;code&gt;ListStackResources&lt;/code&gt; instead.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;DescribeStackResources&lt;/code&gt; returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;p&gt;You must specify either &lt;code&gt;StackName&lt;/code&gt; or &lt;code&gt;PhysicalResourceId&lt;/code&gt;, but not both. In addition, you can specify &lt;code&gt;LogicalResourceId&lt;/code&gt; to filter the returned result. For more information about resources, the &lt;code&gt;LogicalResourceId&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt;, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/\&quot;&gt;CloudFormation User Guide&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;code&gt;ValidationError&lt;/code&gt; is returned if you specify both &lt;code&gt;StackName&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt; in the same request.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackResourcesInput  (optional)
     * @return ApiResponse&lt;DescribeStackResourcesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackResourcesOutput> pOSTDescribeStackResourcesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourcesInput describeStackResourcesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeStackResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackResourcesInput, null);
        Type localVarReturnType = new TypeToken<DescribeStackResourcesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns Amazon Web Services resource descriptions for running and deleted stacks. If &lt;code&gt;StackName&lt;/code&gt; is specified, all the associated resources that are part of the stack are returned. If &lt;code&gt;PhysicalResourceId&lt;/code&gt; is specified, the associated resources of the stack that the resource belongs to are returned.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the first 100 resources will be returned. If your stack has more resources than this, you should use &lt;code&gt;ListStackResources&lt;/code&gt; instead.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;DescribeStackResources&lt;/code&gt; returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;p&gt;You must specify either &lt;code&gt;StackName&lt;/code&gt; or &lt;code&gt;PhysicalResourceId&lt;/code&gt;, but not both. In addition, you can specify &lt;code&gt;LogicalResourceId&lt;/code&gt; to filter the returned result. For more information about resources, the &lt;code&gt;LogicalResourceId&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt;, go to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/\&quot;&gt;CloudFormation User Guide&lt;/a&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A &lt;code&gt;ValidationError&lt;/code&gt; is returned if you specify both &lt;code&gt;StackName&lt;/code&gt; and &lt;code&gt;PhysicalResourceId&lt;/code&gt; in the same request.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackResourcesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackResourcesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackResourcesInput describeStackResourcesInput, final ApiCallback<DescribeStackResourcesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeStackResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackResourcesInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackResourcesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeStackSet
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackSetInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackSetCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetInput describeStackSetInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStackSetInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeStackSetValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetInput describeStackSetInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeStackSet(Async)");
        }

        return pOSTDescribeStackSetCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackSetInput, _callback);

    }

    /**
     * 
     * Returns the description of the specified StackSet.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackSetInput  (optional)
     * @return DescribeStackSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackSetOutput pOSTDescribeStackSet(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetInput describeStackSetInput) throws ApiException {
        ApiResponse<DescribeStackSetOutput> localVarResp = pOSTDescribeStackSetWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackSetInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the description of the specified StackSet.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackSetInput  (optional)
     * @return ApiResponse&lt;DescribeStackSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackSetOutput> pOSTDescribeStackSetWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetInput describeStackSetInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackSetInput, null);
        Type localVarReturnType = new TypeToken<DescribeStackSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the description of the specified StackSet.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackSetInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackSetAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetInput describeStackSetInput, final ApiCallback<DescribeStackSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackSetInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeStackSetOperation
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackSetOperationInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackSetOperationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetOperationInput describeStackSetOperationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStackSetOperationInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStackSetOperation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeStackSetOperationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetOperationInput describeStackSetOperationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeStackSetOperation(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeStackSetOperation(Async)");
        }

        return pOSTDescribeStackSetOperationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackSetOperationInput, _callback);

    }

    /**
     * 
     * Returns the description of the specified StackSet operation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackSetOperationInput  (optional)
     * @return DescribeStackSetOperationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStackSetOperationOutput pOSTDescribeStackSetOperation(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetOperationInput describeStackSetOperationInput) throws ApiException {
        ApiResponse<DescribeStackSetOperationOutput> localVarResp = pOSTDescribeStackSetOperationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackSetOperationInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the description of the specified StackSet operation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackSetOperationInput  (optional)
     * @return ApiResponse&lt;DescribeStackSetOperationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStackSetOperationOutput> pOSTDescribeStackSetOperationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetOperationInput describeStackSetOperationInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeStackSetOperationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackSetOperationInput, null);
        Type localVarReturnType = new TypeToken<DescribeStackSetOperationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the description of the specified StackSet operation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeStackSetOperationInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStackSetOperationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeStackSetOperationInput describeStackSetOperationInput, final ApiCallback<DescribeStackSetOperationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeStackSetOperationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeStackSetOperationInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeStackSetOperationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeStacks
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStacksInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStacksCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStacksInput describeStacksInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeStacksInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeStacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeStacksValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStacksInput describeStacksInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeStacks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeStacks(Async)");
        }

        return pOSTDescribeStacksCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeStacksInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the description for the specified stack; if no stack name was specified, then it returns the description for all the stacks created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the stack doesn&#39;t exist, an &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStacksInput  (optional)
     * @return DescribeStacksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DescribeStacksOutput pOSTDescribeStacks(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStacksInput describeStacksInput) throws ApiException {
        ApiResponse<DescribeStacksOutput> localVarResp = pOSTDescribeStacksWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeStacksInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the description for the specified stack; if no stack name was specified, then it returns the description for all the stacks created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the stack doesn&#39;t exist, an &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStacksInput  (optional)
     * @return ApiResponse&lt;DescribeStacksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeStacksOutput> pOSTDescribeStacksWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStacksInput describeStacksInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeStacksInput, null);
        Type localVarReturnType = new TypeToken<DescribeStacksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the description for the specified stack; if no stack name was specified, then it returns the description for all the stacks created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the stack doesn&#39;t exist, an &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param describeStacksInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeStacksAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, DescribeStacksInput describeStacksInput, final ApiCallback<DescribeStacksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, describeStacksInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeStacksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTypeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeInput describeTypeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTypeInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeInput describeTypeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeType(Async)");
        }

        return pOSTDescribeTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTypeInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns detailed information about an extension that has been registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTypeInput  (optional)
     * @return DescribeTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTypeOutput pOSTDescribeType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeInput describeTypeInput) throws ApiException {
        ApiResponse<DescribeTypeOutput> localVarResp = pOSTDescribeTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTypeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns detailed information about an extension that has been registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTypeInput  (optional)
     * @return ApiResponse&lt;DescribeTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTypeOutput> pOSTDescribeTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeInput describeTypeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTypeInput, null);
        Type localVarReturnType = new TypeToken<DescribeTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns detailed information about an extension that has been registered.&lt;/p&gt; &lt;p&gt;If you specify a &lt;code&gt;VersionId&lt;/code&gt;, &lt;code&gt;DescribeType&lt;/code&gt; returns information about that specific extension version. Otherwise, it returns information about the default extension version.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTypeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeInput describeTypeInput, final ApiCallback<DescribeTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTypeInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeTypeRegistration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTypeRegistrationInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTypeRegistrationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeRegistrationInput describeTypeRegistrationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeTypeRegistrationInput;

        // create path and map variables
        String localVarPath = "/#Action=DescribeTypeRegistration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeTypeRegistrationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeRegistrationInput describeTypeRegistrationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeTypeRegistration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeTypeRegistration(Async)");
        }

        return pOSTDescribeTypeRegistrationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTypeRegistrationInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about an extension&#39;s registration, including its current status and type and version identifiers.&lt;/p&gt; &lt;p&gt;When you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can then use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of that registration request.&lt;/p&gt; &lt;p&gt;Once the registration request has completed, use &lt;a&gt;DescribeType&lt;/a&gt; to return detailed information about an extension.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTypeRegistrationInput  (optional)
     * @return DescribeTypeRegistrationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeTypeRegistrationOutput pOSTDescribeTypeRegistration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeRegistrationInput describeTypeRegistrationInput) throws ApiException {
        ApiResponse<DescribeTypeRegistrationOutput> localVarResp = pOSTDescribeTypeRegistrationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTypeRegistrationInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about an extension&#39;s registration, including its current status and type and version identifiers.&lt;/p&gt; &lt;p&gt;When you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can then use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of that registration request.&lt;/p&gt; &lt;p&gt;Once the registration request has completed, use &lt;a&gt;DescribeType&lt;/a&gt; to return detailed information about an extension.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTypeRegistrationInput  (optional)
     * @return ApiResponse&lt;DescribeTypeRegistrationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeTypeRegistrationOutput> pOSTDescribeTypeRegistrationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeRegistrationInput describeTypeRegistrationInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeTypeRegistrationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTypeRegistrationInput, null);
        Type localVarReturnType = new TypeToken<DescribeTypeRegistrationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about an extension&#39;s registration, including its current status and type and version identifiers.&lt;/p&gt; &lt;p&gt;When you initiate a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can then use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of that registration request.&lt;/p&gt; &lt;p&gt;Once the registration request has completed, use &lt;a&gt;DescribeType&lt;/a&gt; to return detailed information about an extension.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param describeTypeRegistrationInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeTypeRegistrationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DescribeTypeRegistrationInput describeTypeRegistrationInput, final ApiCallback<DescribeTypeRegistrationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeTypeRegistrationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeTypeRegistrationInput, _callback);
        Type localVarReturnType = new TypeToken<DescribeTypeRegistrationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDetectStackDrift
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackDriftInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetectStackDriftCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackDriftInput detectStackDriftInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detectStackDriftInput;

        // create path and map variables
        String localVarPath = "/#Action=DetectStackDrift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDetectStackDriftValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackDriftInput detectStackDriftInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDetectStackDrift(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDetectStackDrift(Async)");
        }

        return pOSTDetectStackDriftCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackDriftInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. For each resource in the stack that supports drift detection, CloudFormation compares the actual configuration of the resource with its expected template configuration. Only resource properties explicitly defined in the stack template are checked for drift. A stack is considered to have drifted if one or more of its resources differ from their expected template configurations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackDrift&lt;/code&gt; to detect drift on all supported resources for a given stack, or &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources.&lt;/p&gt; &lt;p&gt;For a list of stack resources that currently support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackDrift&lt;/code&gt; can take up to several minutes, depending on the number of resources contained within the stack. Use &lt;a&gt;DescribeStackDriftDetectionStatus&lt;/a&gt; to monitor the progress of a detect stack drift operation. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt; &lt;p&gt;When detecting drift on a stack, CloudFormation doesn&#39;t detect drift on any nested stacks belonging to that stack. Perform &lt;code&gt;DetectStackDrift&lt;/code&gt; directly on the nested stack itself.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackDriftInput  (optional)
     * @return DetectStackDriftOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DetectStackDriftOutput pOSTDetectStackDrift(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackDriftInput detectStackDriftInput) throws ApiException {
        ApiResponse<DetectStackDriftOutput> localVarResp = pOSTDetectStackDriftWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackDriftInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. For each resource in the stack that supports drift detection, CloudFormation compares the actual configuration of the resource with its expected template configuration. Only resource properties explicitly defined in the stack template are checked for drift. A stack is considered to have drifted if one or more of its resources differ from their expected template configurations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackDrift&lt;/code&gt; to detect drift on all supported resources for a given stack, or &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources.&lt;/p&gt; &lt;p&gt;For a list of stack resources that currently support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackDrift&lt;/code&gt; can take up to several minutes, depending on the number of resources contained within the stack. Use &lt;a&gt;DescribeStackDriftDetectionStatus&lt;/a&gt; to monitor the progress of a detect stack drift operation. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt; &lt;p&gt;When detecting drift on a stack, CloudFormation doesn&#39;t detect drift on any nested stacks belonging to that stack. Perform &lt;code&gt;DetectStackDrift&lt;/code&gt; directly on the nested stack itself.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackDriftInput  (optional)
     * @return ApiResponse&lt;DetectStackDriftOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectStackDriftOutput> pOSTDetectStackDriftWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackDriftInput detectStackDriftInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDetectStackDriftValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackDriftInput, null);
        Type localVarReturnType = new TypeToken<DetectStackDriftOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detects whether a stack&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. For each resource in the stack that supports drift detection, CloudFormation compares the actual configuration of the resource with its expected template configuration. Only resource properties explicitly defined in the stack template are checked for drift. A stack is considered to have drifted if one or more of its resources differ from their expected template configurations. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackDrift&lt;/code&gt; to detect drift on all supported resources for a given stack, or &lt;a&gt;DetectStackResourceDrift&lt;/a&gt; to detect drift on individual resources.&lt;/p&gt; &lt;p&gt;For a list of stack resources that currently support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackDrift&lt;/code&gt; can take up to several minutes, depending on the number of resources contained within the stack. Use &lt;a&gt;DescribeStackDriftDetectionStatus&lt;/a&gt; to monitor the progress of a detect stack drift operation. Once the drift detection operation has completed, use &lt;a&gt;DescribeStackResourceDrifts&lt;/a&gt; to return drift information about the stack and its resources.&lt;/p&gt; &lt;p&gt;When detecting drift on a stack, CloudFormation doesn&#39;t detect drift on any nested stacks belonging to that stack. Perform &lt;code&gt;DetectStackDrift&lt;/code&gt; directly on the nested stack itself.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackDriftInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetectStackDriftAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackDriftInput detectStackDriftInput, final ApiCallback<DetectStackDriftOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDetectStackDriftValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackDriftInput, _callback);
        Type localVarReturnType = new TypeToken<DetectStackDriftOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDetectStackResourceDrift
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackResourceDriftInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetectStackResourceDriftCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackResourceDriftInput detectStackResourceDriftInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detectStackResourceDriftInput;

        // create path and map variables
        String localVarPath = "/#Action=DetectStackResourceDrift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDetectStackResourceDriftValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackResourceDriftInput detectStackResourceDriftInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDetectStackResourceDrift(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDetectStackResourceDrift(Async)");
        }

        return pOSTDetectStackResourceDriftCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackResourceDriftInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about whether a resource&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. This information includes actual and expected property values for resources in which CloudFormation detects drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackResourceDrift&lt;/code&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all resources in a given stack that support drift detection.&lt;/p&gt; &lt;p&gt;Resources that don&#39;t currently support drift detection can&#39;t be checked. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackResourceDriftInput  (optional)
     * @return DetectStackResourceDriftOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DetectStackResourceDriftOutput pOSTDetectStackResourceDrift(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackResourceDriftInput detectStackResourceDriftInput) throws ApiException {
        ApiResponse<DetectStackResourceDriftOutput> localVarResp = pOSTDetectStackResourceDriftWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackResourceDriftInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about whether a resource&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. This information includes actual and expected property values for resources in which CloudFormation detects drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackResourceDrift&lt;/code&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all resources in a given stack that support drift detection.&lt;/p&gt; &lt;p&gt;Resources that don&#39;t currently support drift detection can&#39;t be checked. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackResourceDriftInput  (optional)
     * @return ApiResponse&lt;DetectStackResourceDriftOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectStackResourceDriftOutput> pOSTDetectStackResourceDriftWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackResourceDriftInput detectStackResourceDriftInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDetectStackResourceDriftValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackResourceDriftInput, null);
        Type localVarReturnType = new TypeToken<DetectStackResourceDriftOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about whether a resource&#39;s actual configuration differs, or has &lt;i&gt;drifted&lt;/i&gt;, from its expected configuration, as defined in the stack template and any values specified as template parameters. This information includes actual and expected property values for resources in which CloudFormation detects drift. Only resource properties explicitly defined in the stack template are checked for drift. For more information about stack and resource drift, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;DetectStackResourceDrift&lt;/code&gt; to detect drift on individual resources, or &lt;a&gt;DetectStackDrift&lt;/a&gt; to detect drift on all resources in a given stack that support drift detection.&lt;/p&gt; &lt;p&gt;Resources that don&#39;t currently support drift detection can&#39;t be checked. For a list of resources that support drift detection, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift-resource-list.html\&quot;&gt;Resources that Support Drift Detection&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackResourceDriftInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetectStackResourceDriftAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackResourceDriftInput detectStackResourceDriftInput, final ApiCallback<DetectStackResourceDriftOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDetectStackResourceDriftValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackResourceDriftInput, _callback);
        Type localVarReturnType = new TypeToken<DetectStackResourceDriftOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDetectStackSetDrift
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackSetDriftInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetectStackSetDriftCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackSetDriftInput detectStackSetDriftInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detectStackSetDriftInput;

        // create path and map variables
        String localVarPath = "/#Action=DetectStackSetDrift";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDetectStackSetDriftValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackSetDriftInput detectStackSetDriftInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDetectStackSetDrift(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDetectStackSetDrift(Async)");
        }

        return pOSTDetectStackSetDriftCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackSetDriftInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Detect drift on a stack set. When CloudFormation performs drift detection on a stack set, it performs drift detection on the stack associated with each stack instance in the stack set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;How CloudFormation performs drift detection on a stack set&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackSetDrift&lt;/code&gt; returns the &lt;code&gt;OperationId&lt;/code&gt; of the stack set drift detection operation. Use this operation id with &lt;a&gt;DescribeStackSetOperation&lt;/a&gt; to monitor the progress of the drift detection operation. The drift detection operation may take some time, depending on the number of stack instances included in the stack set, in addition to the number of resources included in each stack.&lt;/p&gt; &lt;p&gt;Once the operation has completed, use the following actions to return drift information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackSet&lt;/a&gt; to return detailed information about the stack set, including detailed information about the last &lt;i&gt;completed&lt;/i&gt; drift operation performed on the stack set. (Information about drift operations that are in progress isn&#39;t included.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;ListStackInstances&lt;/a&gt; to return a list of stack instances belonging to the stack set, including the drift status and last drift time checked of each instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackInstance&lt;/a&gt; to return detailed information about a specific stack instance, including its drift status and last drift time checked.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about performing a drift detection operation on a stack set, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;Detecting unmanaged changes in stack sets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can only run a single drift detection operation on a given stack set at one time.&lt;/p&gt; &lt;p&gt;To stop a drift detection stack set operation, use &lt;a&gt;StopStackSetOperation&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackSetDriftInput  (optional)
     * @return DetectStackSetDriftOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public DetectStackSetDriftOutput pOSTDetectStackSetDrift(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackSetDriftInput detectStackSetDriftInput) throws ApiException {
        ApiResponse<DetectStackSetDriftOutput> localVarResp = pOSTDetectStackSetDriftWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackSetDriftInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Detect drift on a stack set. When CloudFormation performs drift detection on a stack set, it performs drift detection on the stack associated with each stack instance in the stack set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;How CloudFormation performs drift detection on a stack set&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackSetDrift&lt;/code&gt; returns the &lt;code&gt;OperationId&lt;/code&gt; of the stack set drift detection operation. Use this operation id with &lt;a&gt;DescribeStackSetOperation&lt;/a&gt; to monitor the progress of the drift detection operation. The drift detection operation may take some time, depending on the number of stack instances included in the stack set, in addition to the number of resources included in each stack.&lt;/p&gt; &lt;p&gt;Once the operation has completed, use the following actions to return drift information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackSet&lt;/a&gt; to return detailed information about the stack set, including detailed information about the last &lt;i&gt;completed&lt;/i&gt; drift operation performed on the stack set. (Information about drift operations that are in progress isn&#39;t included.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;ListStackInstances&lt;/a&gt; to return a list of stack instances belonging to the stack set, including the drift status and last drift time checked of each instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackInstance&lt;/a&gt; to return detailed information about a specific stack instance, including its drift status and last drift time checked.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about performing a drift detection operation on a stack set, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;Detecting unmanaged changes in stack sets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can only run a single drift detection operation on a given stack set at one time.&lt;/p&gt; &lt;p&gt;To stop a drift detection stack set operation, use &lt;a&gt;StopStackSetOperation&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackSetDriftInput  (optional)
     * @return ApiResponse&lt;DetectStackSetDriftOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectStackSetDriftOutput> pOSTDetectStackSetDriftWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackSetDriftInput detectStackSetDriftInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTDetectStackSetDriftValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackSetDriftInput, null);
        Type localVarReturnType = new TypeToken<DetectStackSetDriftOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Detect drift on a stack set. When CloudFormation performs drift detection on a stack set, it performs drift detection on the stack associated with each stack instance in the stack set. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;How CloudFormation performs drift detection on a stack set&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DetectStackSetDrift&lt;/code&gt; returns the &lt;code&gt;OperationId&lt;/code&gt; of the stack set drift detection operation. Use this operation id with &lt;a&gt;DescribeStackSetOperation&lt;/a&gt; to monitor the progress of the drift detection operation. The drift detection operation may take some time, depending on the number of stack instances included in the stack set, in addition to the number of resources included in each stack.&lt;/p&gt; &lt;p&gt;Once the operation has completed, use the following actions to return drift information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackSet&lt;/a&gt; to return detailed information about the stack set, including detailed information about the last &lt;i&gt;completed&lt;/i&gt; drift operation performed on the stack set. (Information about drift operations that are in progress isn&#39;t included.)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;ListStackInstances&lt;/a&gt; to return a list of stack instances belonging to the stack set, including the drift status and last drift time checked of each instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;a&gt;DescribeStackInstance&lt;/a&gt; to return detailed information about a specific stack instance, including its drift status and last drift time checked.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about performing a drift detection operation on a stack set, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-drift.html\&quot;&gt;Detecting unmanaged changes in stack sets&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can only run a single drift detection operation on a given stack set at one time.&lt;/p&gt; &lt;p&gt;To stop a drift detection stack set operation, use &lt;a&gt;StopStackSetOperation&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param detectStackSetDriftInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDetectStackSetDriftAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DetectStackSetDriftInput detectStackSetDriftInput, final ApiCallback<DetectStackSetDriftOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDetectStackSetDriftValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, detectStackSetDriftInput, _callback);
        Type localVarReturnType = new TypeToken<DetectStackSetDriftOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTEstimateTemplateCost
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param estimateTemplateCostInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEstimateTemplateCostCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EstimateTemplateCostInput estimateTemplateCostInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = estimateTemplateCostInput;

        // create path and map variables
        String localVarPath = "/#Action=EstimateTemplateCost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTEstimateTemplateCostValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EstimateTemplateCostInput estimateTemplateCostInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTEstimateTemplateCost(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTEstimateTemplateCost(Async)");
        }

        return pOSTEstimateTemplateCostCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, estimateTemplateCostInput, _callback);

    }

    /**
     * 
     * Returns the estimated monthly cost of a template. The return value is an Amazon Web Services Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param estimateTemplateCostInput  (optional)
     * @return EstimateTemplateCostOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public EstimateTemplateCostOutput pOSTEstimateTemplateCost(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EstimateTemplateCostInput estimateTemplateCostInput) throws ApiException {
        ApiResponse<EstimateTemplateCostOutput> localVarResp = pOSTEstimateTemplateCostWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, estimateTemplateCostInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the estimated monthly cost of a template. The return value is an Amazon Web Services Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param estimateTemplateCostInput  (optional)
     * @return ApiResponse&lt;EstimateTemplateCostOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EstimateTemplateCostOutput> pOSTEstimateTemplateCostWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EstimateTemplateCostInput estimateTemplateCostInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTEstimateTemplateCostValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, estimateTemplateCostInput, null);
        Type localVarReturnType = new TypeToken<EstimateTemplateCostOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the estimated monthly cost of a template. The return value is an Amazon Web Services Simple Monthly Calculator URL with a query string that describes the resources required to run the template.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param estimateTemplateCostInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTEstimateTemplateCostAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, EstimateTemplateCostInput estimateTemplateCostInput, final ApiCallback<EstimateTemplateCostOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTEstimateTemplateCostValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, estimateTemplateCostInput, _callback);
        Type localVarReturnType = new TypeToken<EstimateTemplateCostOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTExecuteChangeSet
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param executeChangeSetInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTExecuteChangeSetCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecuteChangeSetInput executeChangeSetInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = executeChangeSetInput;

        // create path and map variables
        String localVarPath = "/#Action=ExecuteChangeSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTExecuteChangeSetValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecuteChangeSetInput executeChangeSetInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTExecuteChangeSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTExecuteChangeSet(Async)");
        }

        return pOSTExecuteChangeSetCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executeChangeSetInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a stack using the input information that was provided when the specified change set was created. After the call successfully completes, CloudFormation starts updating the stack. Use the &lt;a&gt;DescribeStacks&lt;/a&gt; action to view the status of the update.&lt;/p&gt; &lt;p&gt;When you execute a change set, CloudFormation deletes all other change sets associated with the stack because they aren&#39;t valid for the updated stack.&lt;/p&gt; &lt;p&gt;If a stack policy is associated with the stack, CloudFormation enforces the policy during the update. You can&#39;t specify a temporary stack policy that overrides the current policy.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, &lt;code&gt;IncludeNestedStacks&lt;/code&gt; must have been set to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param executeChangeSetInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTExecuteChangeSet(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecuteChangeSetInput executeChangeSetInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTExecuteChangeSetWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executeChangeSetInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a stack using the input information that was provided when the specified change set was created. After the call successfully completes, CloudFormation starts updating the stack. Use the &lt;a&gt;DescribeStacks&lt;/a&gt; action to view the status of the update.&lt;/p&gt; &lt;p&gt;When you execute a change set, CloudFormation deletes all other change sets associated with the stack because they aren&#39;t valid for the updated stack.&lt;/p&gt; &lt;p&gt;If a stack policy is associated with the stack, CloudFormation enforces the policy during the update. You can&#39;t specify a temporary stack policy that overrides the current policy.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, &lt;code&gt;IncludeNestedStacks&lt;/code&gt; must have been set to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param executeChangeSetInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTExecuteChangeSetWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecuteChangeSetInput executeChangeSetInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTExecuteChangeSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executeChangeSetInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a stack using the input information that was provided when the specified change set was created. After the call successfully completes, CloudFormation starts updating the stack. Use the &lt;a&gt;DescribeStacks&lt;/a&gt; action to view the status of the update.&lt;/p&gt; &lt;p&gt;When you execute a change set, CloudFormation deletes all other change sets associated with the stack because they aren&#39;t valid for the updated stack.&lt;/p&gt; &lt;p&gt;If a stack policy is associated with the stack, CloudFormation enforces the policy during the update. You can&#39;t specify a temporary stack policy that overrides the current policy.&lt;/p&gt; &lt;p&gt;To create a change set for the entire stack hierarchy, &lt;code&gt;IncludeNestedStacks&lt;/code&gt; must have been set to &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param executeChangeSetInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidChangeSetStatusException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTExecuteChangeSetAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ExecuteChangeSetInput executeChangeSetInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTExecuteChangeSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, executeChangeSetInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetStackPolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getStackPolicyInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetStackPolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetStackPolicyInput getStackPolicyInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getStackPolicyInput;

        // create path and map variables
        String localVarPath = "/#Action=GetStackPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetStackPolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetStackPolicyInput getStackPolicyInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetStackPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetStackPolicy(Async)");
        }

        return pOSTGetStackPolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getStackPolicyInput, _callback);

    }

    /**
     * 
     * Returns the stack policy for a specified stack. If a stack doesn&#39;t have a policy, a null value is returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getStackPolicyInput  (optional)
     * @return GetStackPolicyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetStackPolicyOutput pOSTGetStackPolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetStackPolicyInput getStackPolicyInput) throws ApiException {
        ApiResponse<GetStackPolicyOutput> localVarResp = pOSTGetStackPolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getStackPolicyInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the stack policy for a specified stack. If a stack doesn&#39;t have a policy, a null value is returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getStackPolicyInput  (optional)
     * @return ApiResponse&lt;GetStackPolicyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetStackPolicyOutput> pOSTGetStackPolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetStackPolicyInput getStackPolicyInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetStackPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getStackPolicyInput, null);
        Type localVarReturnType = new TypeToken<GetStackPolicyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the stack policy for a specified stack. If a stack doesn&#39;t have a policy, a null value is returned.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getStackPolicyInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetStackPolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetStackPolicyInput getStackPolicyInput, final ApiCallback<GetStackPolicyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetStackPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getStackPolicyInput, _callback);
        Type localVarReturnType = new TypeToken<GetStackPolicyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetTemplate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTemplateInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetTemplateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateInput getTemplateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTemplateInput;

        // create path and map variables
        String localVarPath = "/#Action=GetTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetTemplateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateInput getTemplateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetTemplate(Async)");
        }

        return pOSTGetTemplateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTemplateInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the template body for a specified stack. You can get the template for running or deleted stacks.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplate&lt;/code&gt; returns the template for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTemplateInput  (optional)
     * @return GetTemplateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetTemplateOutput pOSTGetTemplate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateInput getTemplateInput) throws ApiException {
        ApiResponse<GetTemplateOutput> localVarResp = pOSTGetTemplateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTemplateInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the template body for a specified stack. You can get the template for running or deleted stacks.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplate&lt;/code&gt; returns the template for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTemplateInput  (optional)
     * @return ApiResponse&lt;GetTemplateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTemplateOutput> pOSTGetTemplateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateInput getTemplateInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTemplateInput, null);
        Type localVarReturnType = new TypeToken<GetTemplateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the template body for a specified stack. You can get the template for running or deleted stacks.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplate&lt;/code&gt; returns the template for up to 90 days after the stack has been deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTemplateInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ChangeSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetTemplateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateInput getTemplateInput, final ApiCallback<GetTemplateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTemplateInput, _callback);
        Type localVarReturnType = new TypeToken<GetTemplateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTGetTemplateSummary
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTemplateSummaryInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetTemplateSummaryCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateSummaryInput getTemplateSummaryInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTemplateSummaryInput;

        // create path and map variables
        String localVarPath = "/#Action=GetTemplateSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTGetTemplateSummaryValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateSummaryInput getTemplateSummaryInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTGetTemplateSummary(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTGetTemplateSummary(Async)");
        }

        return pOSTGetTemplateSummaryCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTemplateSummaryInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about a new or existing template. The &lt;code&gt;GetTemplateSummary&lt;/code&gt; action is useful for viewing parameter information, such as default parameter values and parameter types, before you create or update a stack or stack set.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetTemplateSummary&lt;/code&gt; action when you submit a template, or you can get template information for a stack set, or a running or deleted stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplateSummary&lt;/code&gt; returns the template information for up to 90 days after the stack has been deleted. If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTemplateSummaryInput  (optional)
     * @return GetTemplateSummaryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetTemplateSummaryOutput pOSTGetTemplateSummary(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateSummaryInput getTemplateSummaryInput) throws ApiException {
        ApiResponse<GetTemplateSummaryOutput> localVarResp = pOSTGetTemplateSummaryWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTemplateSummaryInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about a new or existing template. The &lt;code&gt;GetTemplateSummary&lt;/code&gt; action is useful for viewing parameter information, such as default parameter values and parameter types, before you create or update a stack or stack set.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetTemplateSummary&lt;/code&gt; action when you submit a template, or you can get template information for a stack set, or a running or deleted stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplateSummary&lt;/code&gt; returns the template information for up to 90 days after the stack has been deleted. If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTemplateSummaryInput  (optional)
     * @return ApiResponse&lt;GetTemplateSummaryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTemplateSummaryOutput> pOSTGetTemplateSummaryWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateSummaryInput getTemplateSummaryInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTGetTemplateSummaryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTemplateSummaryInput, null);
        Type localVarReturnType = new TypeToken<GetTemplateSummaryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about a new or existing template. The &lt;code&gt;GetTemplateSummary&lt;/code&gt; action is useful for viewing parameter information, such as default parameter values and parameter types, before you create or update a stack or stack set.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;GetTemplateSummary&lt;/code&gt; action when you submit a template, or you can get template information for a stack set, or a running or deleted stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, &lt;code&gt;GetTemplateSummary&lt;/code&gt; returns the template information for up to 90 days after the stack has been deleted. If the template doesn&#39;t exist, a &lt;code&gt;ValidationError&lt;/code&gt; is returned.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param getTemplateSummaryInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTGetTemplateSummaryAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, GetTemplateSummaryInput getTemplateSummaryInput, final ApiCallback<GetTemplateSummaryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTGetTemplateSummaryValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getTemplateSummaryInput, _callback);
        Type localVarReturnType = new TypeToken<GetTemplateSummaryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTImportStacksToStackSet
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param importStacksToStackSetInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTImportStacksToStackSetCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ImportStacksToStackSetInput importStacksToStackSetInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importStacksToStackSetInput;

        // create path and map variables
        String localVarPath = "/#Action=ImportStacksToStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTImportStacksToStackSetValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ImportStacksToStackSetInput importStacksToStackSetInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTImportStacksToStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTImportStacksToStackSet(Async)");
        }

        return pOSTImportStacksToStackSetCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, importStacksToStackSetInput, _callback);

    }

    /**
     * 
     * Import existing stacks into a new stack sets. Use the stack import operation to import up to 10 stacks into a new stack set in the same account as the source stack or in a different administrator account and Region, by specifying the stack ID of the stack you intend to import.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param importStacksToStackSetInput  (optional)
     * @return ImportStacksToStackSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ImportStacksToStackSetOutput pOSTImportStacksToStackSet(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ImportStacksToStackSetInput importStacksToStackSetInput) throws ApiException {
        ApiResponse<ImportStacksToStackSetOutput> localVarResp = pOSTImportStacksToStackSetWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, importStacksToStackSetInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Import existing stacks into a new stack sets. Use the stack import operation to import up to 10 stacks into a new stack set in the same account as the source stack or in a different administrator account and Region, by specifying the stack ID of the stack you intend to import.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param importStacksToStackSetInput  (optional)
     * @return ApiResponse&lt;ImportStacksToStackSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImportStacksToStackSetOutput> pOSTImportStacksToStackSetWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ImportStacksToStackSetInput importStacksToStackSetInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTImportStacksToStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, importStacksToStackSetInput, null);
        Type localVarReturnType = new TypeToken<ImportStacksToStackSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Import existing stacks into a new stack sets. Use the stack import operation to import up to 10 stacks into a new stack set in the same account as the source stack or in a different administrator account and Region, by specifying the stack ID of the stack you intend to import.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param importStacksToStackSetInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> StaleRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTImportStacksToStackSetAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ImportStacksToStackSetInput importStacksToStackSetInput, final ApiCallback<ImportStacksToStackSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTImportStacksToStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, importStacksToStackSetInput, _callback);
        Type localVarReturnType = new TypeToken<ImportStacksToStackSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListChangeSets
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listChangeSetsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListChangeSetsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListChangeSetsInput listChangeSetsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listChangeSetsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListChangeSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListChangeSetsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListChangeSetsInput listChangeSetsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListChangeSets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListChangeSets(Async)");
        }

        return pOSTListChangeSetsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listChangeSetsInput, _callback);

    }

    /**
     * 
     * Returns the ID and status of each active change set for a stack. For example, CloudFormation lists change sets that are in the &lt;code&gt;CREATE_IN_PROGRESS&lt;/code&gt; or &lt;code&gt;CREATE_PENDING&lt;/code&gt; state.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listChangeSetsInput  (optional)
     * @return ListChangeSetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListChangeSetsOutput pOSTListChangeSets(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListChangeSetsInput listChangeSetsInput) throws ApiException {
        ApiResponse<ListChangeSetsOutput> localVarResp = pOSTListChangeSetsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listChangeSetsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the ID and status of each active change set for a stack. For example, CloudFormation lists change sets that are in the &lt;code&gt;CREATE_IN_PROGRESS&lt;/code&gt; or &lt;code&gt;CREATE_PENDING&lt;/code&gt; state.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listChangeSetsInput  (optional)
     * @return ApiResponse&lt;ListChangeSetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChangeSetsOutput> pOSTListChangeSetsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListChangeSetsInput listChangeSetsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListChangeSetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listChangeSetsInput, null);
        Type localVarReturnType = new TypeToken<ListChangeSetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the ID and status of each active change set for a stack. For example, CloudFormation lists change sets that are in the &lt;code&gt;CREATE_IN_PROGRESS&lt;/code&gt; or &lt;code&gt;CREATE_PENDING&lt;/code&gt; state.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listChangeSetsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListChangeSetsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListChangeSetsInput listChangeSetsInput, final ApiCallback<ListChangeSetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListChangeSetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listChangeSetsInput, _callback);
        Type localVarReturnType = new TypeToken<ListChangeSetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListExports
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listExportsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListExportsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListExportsInput listExportsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listExportsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListExports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListExportsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListExportsInput listExportsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListExports(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListExports(Async)");
        }

        return pOSTListExportsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listExportsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all exported output values in the account and Region in which you call this action. Use this action to see the exported output values that you can import into other stacks. To import values, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt; Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html\&quot;&gt; CloudFormation export stack output values&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listExportsInput  (optional)
     * @return ListExportsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListExportsOutput pOSTListExports(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListExportsInput listExportsInput) throws ApiException {
        ApiResponse<ListExportsOutput> localVarResp = pOSTListExportsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listExportsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all exported output values in the account and Region in which you call this action. Use this action to see the exported output values that you can import into other stacks. To import values, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt; Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html\&quot;&gt; CloudFormation export stack output values&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listExportsInput  (optional)
     * @return ApiResponse&lt;ListExportsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListExportsOutput> pOSTListExportsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListExportsInput listExportsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListExportsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listExportsInput, null);
        Type localVarReturnType = new TypeToken<ListExportsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all exported output values in the account and Region in which you call this action. Use this action to see the exported output values that you can import into other stacks. To import values, use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt; Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html\&quot;&gt; CloudFormation export stack output values&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listExportsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListExportsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListExportsInput listExportsInput, final ApiCallback<ListExportsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListExportsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listExportsInput, _callback);
        Type localVarReturnType = new TypeToken<ListExportsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListImports
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listImportsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListImportsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListImportsInput listImportsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listImportsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListImports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListImportsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListImportsInput listImportsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListImports(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListImports(Async)");
        }

        return pOSTListImportsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listImportsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all stacks that are importing an exported output value. To modify or remove an exported output value, first use this action to see which stacks are using it. To see the exported output values in your account, see &lt;a&gt;ListExports&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about importing an exported output value, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt;Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listImportsInput  (optional)
     * @return ListImportsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListImportsOutput pOSTListImports(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListImportsInput listImportsInput) throws ApiException {
        ApiResponse<ListImportsOutput> localVarResp = pOSTListImportsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listImportsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all stacks that are importing an exported output value. To modify or remove an exported output value, first use this action to see which stacks are using it. To see the exported output values in your account, see &lt;a&gt;ListExports&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about importing an exported output value, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt;Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listImportsInput  (optional)
     * @return ApiResponse&lt;ListImportsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListImportsOutput> pOSTListImportsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListImportsInput listImportsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListImportsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listImportsInput, null);
        Type localVarReturnType = new TypeToken<ListImportsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all stacks that are importing an exported output value. To modify or remove an exported output value, first use this action to see which stacks are using it. To see the exported output values in your account, see &lt;a&gt;ListExports&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about importing an exported output value, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\&quot;&gt;Fn::ImportValue&lt;/a&gt; function.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listImportsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListImportsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListImportsInput listImportsInput, final ApiCallback<ListImportsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListImportsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listImportsInput, _callback);
        Type localVarReturnType = new TypeToken<ListImportsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListStackInstanceResourceDrifts
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listStackInstanceResourceDriftsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackInstanceResourceDriftsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListStackInstanceResourceDriftsInput listStackInstanceResourceDriftsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStackInstanceResourceDriftsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListStackInstanceResourceDrifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListStackInstanceResourceDriftsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListStackInstanceResourceDriftsInput listStackInstanceResourceDriftsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListStackInstanceResourceDrifts(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListStackInstanceResourceDrifts(Async)");
        }

        return pOSTListStackInstanceResourceDriftsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listStackInstanceResourceDriftsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns drift information for resources in a stack instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ListStackInstanceResourceDrifts&lt;/code&gt; returns drift information for the most recent drift detection operation. If an operation is in progress, it may only return partial results.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listStackInstanceResourceDriftsInput  (optional)
     * @return ListStackInstanceResourceDriftsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListStackInstanceResourceDriftsOutput pOSTListStackInstanceResourceDrifts(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListStackInstanceResourceDriftsInput listStackInstanceResourceDriftsInput) throws ApiException {
        ApiResponse<ListStackInstanceResourceDriftsOutput> localVarResp = pOSTListStackInstanceResourceDriftsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listStackInstanceResourceDriftsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns drift information for resources in a stack instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ListStackInstanceResourceDrifts&lt;/code&gt; returns drift information for the most recent drift detection operation. If an operation is in progress, it may only return partial results.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listStackInstanceResourceDriftsInput  (optional)
     * @return ApiResponse&lt;ListStackInstanceResourceDriftsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackInstanceResourceDriftsOutput> pOSTListStackInstanceResourceDriftsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListStackInstanceResourceDriftsInput listStackInstanceResourceDriftsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListStackInstanceResourceDriftsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listStackInstanceResourceDriftsInput, null);
        Type localVarReturnType = new TypeToken<ListStackInstanceResourceDriftsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns drift information for resources in a stack instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ListStackInstanceResourceDrifts&lt;/code&gt; returns drift information for the most recent drift detection operation. If an operation is in progress, it may only return partial results.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listStackInstanceResourceDriftsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackInstanceResourceDriftsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListStackInstanceResourceDriftsInput listStackInstanceResourceDriftsInput, final ApiCallback<ListStackInstanceResourceDriftsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListStackInstanceResourceDriftsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listStackInstanceResourceDriftsInput, _callback);
        Type localVarReturnType = new TypeToken<ListStackInstanceResourceDriftsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListStackInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackInstancesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackInstancesInput listStackInstancesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStackInstancesInput;

        // create path and map variables
        String localVarPath = "/#Action=ListStackInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListStackInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackInstancesInput listStackInstancesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListStackInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListStackInstances(Async)");
        }

        return pOSTListStackInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackInstancesInput, _callback);

    }

    /**
     * 
     * Returns summary information about stack instances that are associated with the specified stack set. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region, or that have a specific status.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackInstancesInput  (optional)
     * @return ListStackInstancesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListStackInstancesOutput pOSTListStackInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackInstancesInput listStackInstancesInput) throws ApiException {
        ApiResponse<ListStackInstancesOutput> localVarResp = pOSTListStackInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackInstancesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about stack instances that are associated with the specified stack set. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region, or that have a specific status.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackInstancesInput  (optional)
     * @return ApiResponse&lt;ListStackInstancesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackInstancesOutput> pOSTListStackInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackInstancesInput listStackInstancesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListStackInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackInstancesInput, null);
        Type localVarReturnType = new TypeToken<ListStackInstancesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about stack instances that are associated with the specified stack set. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region, or that have a specific status.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackInstancesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackInstancesInput listStackInstancesInput, final ApiCallback<ListStackInstancesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListStackInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackInstancesInput, _callback);
        Type localVarReturnType = new TypeToken<ListStackInstancesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListStackResources
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackResourcesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackResourcesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStackResourcesInput listStackResourcesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStackResourcesInput;

        // create path and map variables
        String localVarPath = "/#Action=ListStackResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListStackResourcesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStackResourcesInput listStackResourcesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListStackResources(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListStackResources(Async)");
        }

        return pOSTListStackResourcesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listStackResourcesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns descriptions of all resources of the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, ListStackResources returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackResourcesInput  (optional)
     * @return ListStackResourcesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListStackResourcesOutput pOSTListStackResources(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStackResourcesInput listStackResourcesInput) throws ApiException {
        ApiResponse<ListStackResourcesOutput> localVarResp = pOSTListStackResourcesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listStackResourcesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns descriptions of all resources of the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, ListStackResources returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackResourcesInput  (optional)
     * @return ApiResponse&lt;ListStackResourcesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackResourcesOutput> pOSTListStackResourcesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStackResourcesInput listStackResourcesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListStackResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listStackResourcesInput, null);
        Type localVarReturnType = new TypeToken<ListStackResourcesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns descriptions of all resources of the specified stack.&lt;/p&gt; &lt;p&gt;For deleted stacks, ListStackResources returns resource information for up to 90 days after the stack has been deleted.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackResourcesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackResourcesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStackResourcesInput listStackResourcesInput, final ApiCallback<ListStackResourcesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListStackResourcesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listStackResourcesInput, _callback);
        Type localVarReturnType = new TypeToken<ListStackResourcesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListStackSetOperationResults
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetOperationResultsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackSetOperationResultsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationResultsInput listStackSetOperationResultsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStackSetOperationResultsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListStackSetOperationResults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListStackSetOperationResultsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationResultsInput listStackSetOperationResultsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListStackSetOperationResults(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListStackSetOperationResults(Async)");
        }

        return pOSTListStackSetOperationResultsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetOperationResultsInput, _callback);

    }

    /**
     * 
     * Returns summary information about the results of a stack set operation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetOperationResultsInput  (optional)
     * @return ListStackSetOperationResultsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListStackSetOperationResultsOutput pOSTListStackSetOperationResults(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationResultsInput listStackSetOperationResultsInput) throws ApiException {
        ApiResponse<ListStackSetOperationResultsOutput> localVarResp = pOSTListStackSetOperationResultsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetOperationResultsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about the results of a stack set operation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetOperationResultsInput  (optional)
     * @return ApiResponse&lt;ListStackSetOperationResultsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackSetOperationResultsOutput> pOSTListStackSetOperationResultsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationResultsInput listStackSetOperationResultsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListStackSetOperationResultsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetOperationResultsInput, null);
        Type localVarReturnType = new TypeToken<ListStackSetOperationResultsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about the results of a stack set operation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetOperationResultsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackSetOperationResultsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationResultsInput listStackSetOperationResultsInput, final ApiCallback<ListStackSetOperationResultsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListStackSetOperationResultsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetOperationResultsInput, _callback);
        Type localVarReturnType = new TypeToken<ListStackSetOperationResultsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListStackSetOperations
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetOperationsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackSetOperationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationsInput listStackSetOperationsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStackSetOperationsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListStackSetOperations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListStackSetOperationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationsInput listStackSetOperationsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListStackSetOperations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListStackSetOperations(Async)");
        }

        return pOSTListStackSetOperationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetOperationsInput, _callback);

    }

    /**
     * 
     * Returns summary information about operations performed on a stack set.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetOperationsInput  (optional)
     * @return ListStackSetOperationsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListStackSetOperationsOutput pOSTListStackSetOperations(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationsInput listStackSetOperationsInput) throws ApiException {
        ApiResponse<ListStackSetOperationsOutput> localVarResp = pOSTListStackSetOperationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetOperationsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about operations performed on a stack set.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetOperationsInput  (optional)
     * @return ApiResponse&lt;ListStackSetOperationsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackSetOperationsOutput> pOSTListStackSetOperationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationsInput listStackSetOperationsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListStackSetOperationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetOperationsInput, null);
        Type localVarReturnType = new TypeToken<ListStackSetOperationsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about operations performed on a stack set.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetOperationsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackSetOperationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetOperationsInput listStackSetOperationsInput, final ApiCallback<ListStackSetOperationsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListStackSetOperationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetOperationsInput, _callback);
        Type localVarReturnType = new TypeToken<ListStackSetOperationsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListStackSets
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackSetsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetsInput listStackSetsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStackSetsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListStackSets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListStackSetsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetsInput listStackSetsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListStackSets(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListStackSets(Async)");
        }

        return pOSTListStackSetsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetsInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns summary information about stack sets that are associated with the user.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[Self-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to your Amazon Web Services account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all self-managed stack sets in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to the organization&#39;s management account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets in the management account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt; while signed in to your member account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets with service-managed permissions in the management account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetsInput  (optional)
     * @return ListStackSetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListStackSetsOutput pOSTListStackSets(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetsInput listStackSetsInput) throws ApiException {
        ApiResponse<ListStackSetsOutput> localVarResp = pOSTListStackSetsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns summary information about stack sets that are associated with the user.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[Self-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to your Amazon Web Services account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all self-managed stack sets in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to the organization&#39;s management account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets in the management account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt; while signed in to your member account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets with service-managed permissions in the management account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetsInput  (optional)
     * @return ApiResponse&lt;ListStackSetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStackSetsOutput> pOSTListStackSetsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetsInput listStackSetsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListStackSetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetsInput, null);
        Type localVarReturnType = new TypeToken<ListStackSetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns summary information about stack sets that are associated with the user.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[Self-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to your Amazon Web Services account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all self-managed stack sets in your Amazon Web Services account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;SELF&lt;/code&gt; while signed in to the organization&#39;s management account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets in the management account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[Service-managed permissions] If you set the &lt;code&gt;CallAs&lt;/code&gt; parameter to &lt;code&gt;DELEGATED_ADMIN&lt;/code&gt; while signed in to your member account, &lt;code&gt;ListStackSets&lt;/code&gt; returns all stack sets with service-managed permissions in the management account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listStackSetsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStackSetsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListStackSetsInput listStackSetsInput, final ApiCallback<ListStackSetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListStackSetsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listStackSetsInput, _callback);
        Type localVarReturnType = new TypeToken<ListStackSetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListStacks
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listStacksInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStacksCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStacksInput listStacksInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listStacksInput;

        // create path and map variables
        String localVarPath = "/#Action=ListStacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListStacksValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStacksInput listStacksInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListStacks(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListStacks(Async)");
        }

        return pOSTListStacksCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listStacksInput, _callback);

    }

    /**
     * 
     * Returns the summary information for stacks whose status matches the specified StackStatusFilter. Summary information for stacks that have been deleted is kept for 90 days after the stack is deleted. If no StackStatusFilter is specified, summary information for all stacks is returned (including existing stacks and stacks that have been deleted).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listStacksInput  (optional)
     * @return ListStacksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListStacksOutput pOSTListStacks(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStacksInput listStacksInput) throws ApiException {
        ApiResponse<ListStacksOutput> localVarResp = pOSTListStacksWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listStacksInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the summary information for stacks whose status matches the specified StackStatusFilter. Summary information for stacks that have been deleted is kept for 90 days after the stack is deleted. If no StackStatusFilter is specified, summary information for all stacks is returned (including existing stacks and stacks that have been deleted).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listStacksInput  (optional)
     * @return ApiResponse&lt;ListStacksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStacksOutput> pOSTListStacksWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStacksInput listStacksInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listStacksInput, null);
        Type localVarReturnType = new TypeToken<ListStacksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the summary information for stacks whose status matches the specified StackStatusFilter. Summary information for stacks that have been deleted is kept for 90 days after the stack is deleted. If no StackStatusFilter is specified, summary information for all stacks is returned (including existing stacks and stacks that have been deleted).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken Pagination token (optional)
     * @param listStacksInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListStacksAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, ListStacksInput listStacksInput, final ApiCallback<ListStacksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListStacksValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, listStacksInput, _callback);
        Type localVarReturnType = new TypeToken<ListStacksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTypeRegistrations
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypeRegistrationsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTypeRegistrationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeRegistrationsInput listTypeRegistrationsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTypeRegistrationsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListTypeRegistrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTypeRegistrationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeRegistrationsInput listTypeRegistrationsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTypeRegistrations(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTypeRegistrations(Async)");
        }

        return pOSTListTypeRegistrationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypeRegistrationsInput, _callback);

    }

    /**
     * 
     * Returns a list of registration tokens for the specified extension(s).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypeRegistrationsInput  (optional)
     * @return ListTypeRegistrationsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ListTypeRegistrationsOutput pOSTListTypeRegistrations(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeRegistrationsInput listTypeRegistrationsInput) throws ApiException {
        ApiResponse<ListTypeRegistrationsOutput> localVarResp = pOSTListTypeRegistrationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypeRegistrationsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of registration tokens for the specified extension(s).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypeRegistrationsInput  (optional)
     * @return ApiResponse&lt;ListTypeRegistrationsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTypeRegistrationsOutput> pOSTListTypeRegistrationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeRegistrationsInput listTypeRegistrationsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTypeRegistrationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypeRegistrationsInput, null);
        Type localVarReturnType = new TypeToken<ListTypeRegistrationsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of registration tokens for the specified extension(s).
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypeRegistrationsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTypeRegistrationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeRegistrationsInput listTypeRegistrationsInput, final ApiCallback<ListTypeRegistrationsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTypeRegistrationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypeRegistrationsInput, _callback);
        Type localVarReturnType = new TypeToken<ListTypeRegistrationsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTypeVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypeVersionsInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTypeVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeVersionsInput listTypeVersionsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTypeVersionsInput;

        // create path and map variables
        String localVarPath = "/#Action=ListTypeVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTypeVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeVersionsInput listTypeVersionsInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTypeVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTypeVersions(Async)");
        }

        return pOSTListTypeVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypeVersionsInput, _callback);

    }

    /**
     * 
     * Returns summary information about the versions of an extension.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypeVersionsInput  (optional)
     * @return ListTypeVersionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ListTypeVersionsOutput pOSTListTypeVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeVersionsInput listTypeVersionsInput) throws ApiException {
        ApiResponse<ListTypeVersionsOutput> localVarResp = pOSTListTypeVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypeVersionsInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about the versions of an extension.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypeVersionsInput  (optional)
     * @return ApiResponse&lt;ListTypeVersionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTypeVersionsOutput> pOSTListTypeVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeVersionsInput listTypeVersionsInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTypeVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypeVersionsInput, null);
        Type localVarReturnType = new TypeToken<ListTypeVersionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about the versions of an extension.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypeVersionsInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTypeVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypeVersionsInput listTypeVersionsInput, final ApiCallback<ListTypeVersionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTypeVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypeVersionsInput, _callback);
        Type localVarReturnType = new TypeToken<ListTypeVersionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTypes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTypesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypesInput listTypesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTypesInput;

        // create path and map variables
        String localVarPath = "/#Action=ListTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTypesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypesInput listTypesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTypes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTypes(Async)");
        }

        return pOSTListTypesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypesInput, _callback);

    }

    /**
     * 
     * Returns summary information about extension that have been registered with CloudFormation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypesInput  (optional)
     * @return ListTypesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ListTypesOutput pOSTListTypes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypesInput listTypesInput) throws ApiException {
        ApiResponse<ListTypesOutput> localVarResp = pOSTListTypesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns summary information about extension that have been registered with CloudFormation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypesInput  (optional)
     * @return ApiResponse&lt;ListTypesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTypesOutput> pOSTListTypesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypesInput listTypesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypesInput, null);
        Type localVarReturnType = new TypeToken<ListTypesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns summary information about extension that have been registered with CloudFormation.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param listTypesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTypesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, ListTypesInput listTypesInput, final ApiCallback<ListTypesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTypesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, listTypesInput, _callback);
        Type localVarReturnType = new TypeToken<ListTypesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPublishType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishTypeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPublishTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishTypeInput publishTypeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishTypeInput;

        // create path and map variables
        String localVarPath = "/#Action=PublishType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPublishTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishTypeInput publishTypeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPublishType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPublishType(Async)");
        }

        return pOSTPublishTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishTypeInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Publishes the specified extension to the CloudFormation registry as a public extension in this Region. Public extensions are available for use by all CloudFormation users. For more information about publishing extensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To publish an extension, you must be registered as a publisher with CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishTypeInput  (optional)
     * @return PublishTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public PublishTypeOutput pOSTPublishType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishTypeInput publishTypeInput) throws ApiException {
        ApiResponse<PublishTypeOutput> localVarResp = pOSTPublishTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishTypeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Publishes the specified extension to the CloudFormation registry as a public extension in this Region. Public extensions are available for use by all CloudFormation users. For more information about publishing extensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To publish an extension, you must be registered as a publisher with CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishTypeInput  (optional)
     * @return ApiResponse&lt;PublishTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishTypeOutput> pOSTPublishTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishTypeInput publishTypeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTPublishTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishTypeInput, null);
        Type localVarReturnType = new TypeToken<PublishTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Publishes the specified extension to the CloudFormation registry as a public extension in this Region. Public extensions are available for use by all CloudFormation users. For more information about publishing extensions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To publish an extension, you must be registered as a publisher with CloudFormation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterPublisher.html\&quot;&gt;RegisterPublisher&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param publishTypeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPublishTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PublishTypeInput publishTypeInput, final ApiCallback<PublishTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPublishTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, publishTypeInput, _callback);
        Type localVarReturnType = new TypeToken<PublishTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRecordHandlerProgress
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param recordHandlerProgressInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidStateTransitionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationStatusCheckFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRecordHandlerProgressCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordHandlerProgressInput recordHandlerProgressInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recordHandlerProgressInput;

        // create path and map variables
        String localVarPath = "/#Action=RecordHandlerProgress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRecordHandlerProgressValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordHandlerProgressInput recordHandlerProgressInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRecordHandlerProgress(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRecordHandlerProgress(Async)");
        }

        return pOSTRecordHandlerProgressCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recordHandlerProgressInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Reports progress of a resource handler to CloudFormation.&lt;/p&gt; &lt;p&gt;Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. Don&#39;t use this API in your code.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param recordHandlerProgressInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidStateTransitionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationStatusCheckFailedException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTRecordHandlerProgress(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordHandlerProgressInput recordHandlerProgressInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTRecordHandlerProgressWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recordHandlerProgressInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Reports progress of a resource handler to CloudFormation.&lt;/p&gt; &lt;p&gt;Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. Don&#39;t use this API in your code.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param recordHandlerProgressInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidStateTransitionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationStatusCheckFailedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTRecordHandlerProgressWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordHandlerProgressInput recordHandlerProgressInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRecordHandlerProgressValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recordHandlerProgressInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Reports progress of a resource handler to CloudFormation.&lt;/p&gt; &lt;p&gt;Reserved for use by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/what-is-cloudformation-cli.html\&quot;&gt;CloudFormation CLI&lt;/a&gt;. Don&#39;t use this API in your code.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param recordHandlerProgressInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidStateTransitionException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationStatusCheckFailedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRecordHandlerProgressAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RecordHandlerProgressInput recordHandlerProgressInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRecordHandlerProgressValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, recordHandlerProgressInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRegisterPublisher
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerPublisherInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRegisterPublisherCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterPublisherInput registerPublisherInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerPublisherInput;

        // create path and map variables
        String localVarPath = "/#Action=RegisterPublisher";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRegisterPublisherValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterPublisherInput registerPublisherInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRegisterPublisher(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRegisterPublisher(Async)");
        }

        return pOSTRegisterPublisherCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerPublisherInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Registers your account as a publisher of public extensions in the CloudFormation registry. Public extensions are available for use by all CloudFormation users. This publisher ID applies to your account in all Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;For information about requirements for registering as a public extension publisher, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p/&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerPublisherInput  (optional)
     * @return RegisterPublisherOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public RegisterPublisherOutput pOSTRegisterPublisher(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterPublisherInput registerPublisherInput) throws ApiException {
        ApiResponse<RegisterPublisherOutput> localVarResp = pOSTRegisterPublisherWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerPublisherInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Registers your account as a publisher of public extensions in the CloudFormation registry. Public extensions are available for use by all CloudFormation users. This publisher ID applies to your account in all Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;For information about requirements for registering as a public extension publisher, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p/&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerPublisherInput  (optional)
     * @return ApiResponse&lt;RegisterPublisherOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterPublisherOutput> pOSTRegisterPublisherWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterPublisherInput registerPublisherInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRegisterPublisherValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerPublisherInput, null);
        Type localVarReturnType = new TypeToken<RegisterPublisherOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Registers your account as a publisher of public extensions in the CloudFormation registry. Public extensions are available for use by all CloudFormation users. This publisher ID applies to your account in all Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;For information about requirements for registering as a public extension publisher, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-prereqs\&quot;&gt;Registering your account to publish CloudFormation extensions&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p/&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerPublisherInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRegisterPublisherAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterPublisherInput registerPublisherInput, final ApiCallback<RegisterPublisherOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRegisterPublisherValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerPublisherInput, _callback);
        Type localVarReturnType = new TypeToken<RegisterPublisherOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRegisterType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerTypeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRegisterTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTypeInput registerTypeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerTypeInput;

        // create path and map variables
        String localVarPath = "/#Action=RegisterType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRegisterTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTypeInput registerTypeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRegisterType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRegisterType(Async)");
        }

        return pOSTRegisterTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerTypeInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Registers an extension with the CloudFormation service. Registering an extension makes it available for use in CloudFormation templates in your Amazon Web Services account, and includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Validating the extension schema.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Determining which handlers, if any, have been specified for the extension.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Making the extension available for use in your account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how to develop extensions and ready them for registration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-types.html\&quot;&gt;Creating Resource Providers&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can have a maximum of 50 resource extension versions registered at a time. This maximum is per account and per Region. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeregisterType.html\&quot;&gt;DeregisterType&lt;/a&gt; to deregister specific extension versions if necessary.&lt;/p&gt; &lt;p&gt;Once you have initiated a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of the registration request.&lt;/p&gt; &lt;p&gt;Once you have registered a private extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerTypeInput  (optional)
     * @return RegisterTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public RegisterTypeOutput pOSTRegisterType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTypeInput registerTypeInput) throws ApiException {
        ApiResponse<RegisterTypeOutput> localVarResp = pOSTRegisterTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerTypeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Registers an extension with the CloudFormation service. Registering an extension makes it available for use in CloudFormation templates in your Amazon Web Services account, and includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Validating the extension schema.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Determining which handlers, if any, have been specified for the extension.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Making the extension available for use in your account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how to develop extensions and ready them for registration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-types.html\&quot;&gt;Creating Resource Providers&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can have a maximum of 50 resource extension versions registered at a time. This maximum is per account and per Region. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeregisterType.html\&quot;&gt;DeregisterType&lt;/a&gt; to deregister specific extension versions if necessary.&lt;/p&gt; &lt;p&gt;Once you have initiated a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of the registration request.&lt;/p&gt; &lt;p&gt;Once you have registered a private extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerTypeInput  (optional)
     * @return ApiResponse&lt;RegisterTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterTypeOutput> pOSTRegisterTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTypeInput registerTypeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRegisterTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerTypeInput, null);
        Type localVarReturnType = new TypeToken<RegisterTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Registers an extension with the CloudFormation service. Registering an extension makes it available for use in CloudFormation templates in your Amazon Web Services account, and includes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Validating the extension schema.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Determining which handlers, if any, have been specified for the extension.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Making the extension available for use in your account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information about how to develop extensions and ready them for registration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-types.html\&quot;&gt;Creating Resource Providers&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can have a maximum of 50 resource extension versions registered at a time. This maximum is per account and per Region. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DeregisterType.html\&quot;&gt;DeregisterType&lt;/a&gt; to deregister specific extension versions if necessary.&lt;/p&gt; &lt;p&gt;Once you have initiated a registration request using &lt;a&gt;RegisterType&lt;/a&gt;, you can use &lt;a&gt;DescribeTypeRegistration&lt;/a&gt; to monitor the progress of the registration request.&lt;/p&gt; &lt;p&gt;Once you have registered a private extension in your account and Region, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_SetTypeConfiguration.html\&quot;&gt;SetTypeConfiguration&lt;/a&gt; to specify configuration properties for the extension. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param registerTypeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRegisterTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RegisterTypeInput registerTypeInput, final ApiCallback<RegisterTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRegisterTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registerTypeInput, _callback);
        Type localVarReturnType = new TypeToken<RegisterTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRollbackStack
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rollbackStackInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRollbackStackCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackStackInput rollbackStackInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rollbackStackInput;

        // create path and map variables
        String localVarPath = "/#Action=RollbackStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRollbackStackValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackStackInput rollbackStackInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRollbackStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRollbackStack(Async)");
        }

        return pOSTRollbackStackCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rollbackStackInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;When specifying &lt;code&gt;RollbackStack&lt;/code&gt;, you preserve the state of previously provisioned resources when an operation fails. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;Rolls back the specified stack to the last known stable state from &lt;code&gt;CREATE_FAILED&lt;/code&gt; or &lt;code&gt;UPDATE_FAILED&lt;/code&gt; stack statuses.&lt;/p&gt; &lt;p&gt;This operation will delete a stack if it doesn&#39;t contain a last known stable state. A last known stable state includes any status in a &lt;code&gt;*_COMPLETE&lt;/code&gt;. This includes the following stack statuses.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rollbackStackInput  (optional)
     * @return RollbackStackOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public RollbackStackOutput pOSTRollbackStack(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackStackInput rollbackStackInput) throws ApiException {
        ApiResponse<RollbackStackOutput> localVarResp = pOSTRollbackStackWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rollbackStackInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;When specifying &lt;code&gt;RollbackStack&lt;/code&gt;, you preserve the state of previously provisioned resources when an operation fails. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;Rolls back the specified stack to the last known stable state from &lt;code&gt;CREATE_FAILED&lt;/code&gt; or &lt;code&gt;UPDATE_FAILED&lt;/code&gt; stack statuses.&lt;/p&gt; &lt;p&gt;This operation will delete a stack if it doesn&#39;t contain a last known stable state. A last known stable state includes any status in a &lt;code&gt;*_COMPLETE&lt;/code&gt;. This includes the following stack statuses.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rollbackStackInput  (optional)
     * @return ApiResponse&lt;RollbackStackOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RollbackStackOutput> pOSTRollbackStackWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackStackInput rollbackStackInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTRollbackStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rollbackStackInput, null);
        Type localVarReturnType = new TypeToken<RollbackStackOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;When specifying &lt;code&gt;RollbackStack&lt;/code&gt;, you preserve the state of previously provisioned resources when an operation fails. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;Rolls back the specified stack to the last known stable state from &lt;code&gt;CREATE_FAILED&lt;/code&gt; or &lt;code&gt;UPDATE_FAILED&lt;/code&gt; stack statuses.&lt;/p&gt; &lt;p&gt;This operation will delete a stack if it doesn&#39;t contain a last known stable state. A last known stable state includes any status in a &lt;code&gt;*_COMPLETE&lt;/code&gt;. This includes the following stack statuses.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CREATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UPDATE_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;IMPORT_ROLLBACK_COMPLETE&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rollbackStackInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRollbackStackAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RollbackStackInput rollbackStackInput, final ApiCallback<RollbackStackOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRollbackStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rollbackStackInput, _callback);
        Type localVarReturnType = new TypeToken<RollbackStackOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetStackPolicy
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setStackPolicyInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetStackPolicyCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetStackPolicyInput setStackPolicyInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setStackPolicyInput;

        // create path and map variables
        String localVarPath = "/#Action=SetStackPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetStackPolicyValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetStackPolicyInput setStackPolicyInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetStackPolicy(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetStackPolicy(Async)");
        }

        return pOSTSetStackPolicyCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setStackPolicyInput, _callback);

    }

    /**
     * 
     * Sets a stack policy for a specified stack.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setStackPolicyInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSetStackPolicy(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetStackPolicyInput setStackPolicyInput) throws ApiException {
        pOSTSetStackPolicyWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setStackPolicyInput);
    }

    /**
     * 
     * Sets a stack policy for a specified stack.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setStackPolicyInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSetStackPolicyWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetStackPolicyInput setStackPolicyInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetStackPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setStackPolicyInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sets a stack policy for a specified stack.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setStackPolicyInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetStackPolicyAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetStackPolicyInput setStackPolicyInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetStackPolicyValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setStackPolicyInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetTypeConfiguration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTypeConfigurationInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetTypeConfigurationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeConfigurationInput setTypeConfigurationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setTypeConfigurationInput;

        // create path and map variables
        String localVarPath = "/#Action=SetTypeConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetTypeConfigurationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeConfigurationInput setTypeConfigurationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetTypeConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetTypeConfiguration(Async)");
        }

        return pOSTSetTypeConfigurationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTypeConfigurationInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Specifies the configuration data for a registered CloudFormation extension, in the given account and Region.&lt;/p&gt; &lt;p&gt;To view the current configuration data for an extension, refer to the &lt;code&gt;ConfigurationSchema&lt;/code&gt; element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;It&#39;s strongly recommended that you use dynamic references to restrict sensitive configuration definitions, such as third-party credentials. For more details on dynamic references, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/\&quot;&gt;Using dynamic references to specify template values&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTypeConfigurationInput  (optional)
     * @return SetTypeConfigurationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public SetTypeConfigurationOutput pOSTSetTypeConfiguration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeConfigurationInput setTypeConfigurationInput) throws ApiException {
        ApiResponse<SetTypeConfigurationOutput> localVarResp = pOSTSetTypeConfigurationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTypeConfigurationInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Specifies the configuration data for a registered CloudFormation extension, in the given account and Region.&lt;/p&gt; &lt;p&gt;To view the current configuration data for an extension, refer to the &lt;code&gt;ConfigurationSchema&lt;/code&gt; element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;It&#39;s strongly recommended that you use dynamic references to restrict sensitive configuration definitions, such as third-party credentials. For more details on dynamic references, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/\&quot;&gt;Using dynamic references to specify template values&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTypeConfigurationInput  (optional)
     * @return ApiResponse&lt;SetTypeConfigurationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetTypeConfigurationOutput> pOSTSetTypeConfigurationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeConfigurationInput setTypeConfigurationInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetTypeConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTypeConfigurationInput, null);
        Type localVarReturnType = new TypeToken<SetTypeConfigurationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Specifies the configuration data for a registered CloudFormation extension, in the given account and Region.&lt;/p&gt; &lt;p&gt;To view the current configuration data for an extension, refer to the &lt;code&gt;ConfigurationSchema&lt;/code&gt; element of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/registry-register.html#registry-set-configuration\&quot;&gt;Configuring extensions at the account level&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;It&#39;s strongly recommended that you use dynamic references to restrict sensitive configuration definitions, such as third-party credentials. For more details on dynamic references, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/\&quot;&gt;Using dynamic references to specify template values&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTypeConfigurationInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetTypeConfigurationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeConfigurationInput setTypeConfigurationInput, final ApiCallback<SetTypeConfigurationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetTypeConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTypeConfigurationInput, _callback);
        Type localVarReturnType = new TypeToken<SetTypeConfigurationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSetTypeDefaultVersion
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTypeDefaultVersionInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetTypeDefaultVersionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeDefaultVersionInput setTypeDefaultVersionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setTypeDefaultVersionInput;

        // create path and map variables
        String localVarPath = "/#Action=SetTypeDefaultVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSetTypeDefaultVersionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeDefaultVersionInput setTypeDefaultVersionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSetTypeDefaultVersion(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSetTypeDefaultVersion(Async)");
        }

        return pOSTSetTypeDefaultVersionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTypeDefaultVersionInput, _callback);

    }

    /**
     * 
     * Specify the default version of an extension. The default version of an extension will be used in CloudFormation operations.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTypeDefaultVersionInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTSetTypeDefaultVersion(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeDefaultVersionInput setTypeDefaultVersionInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTSetTypeDefaultVersionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTypeDefaultVersionInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Specify the default version of an extension. The default version of an extension will be used in CloudFormation operations.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTypeDefaultVersionInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTSetTypeDefaultVersionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeDefaultVersionInput setTypeDefaultVersionInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSetTypeDefaultVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTypeDefaultVersionInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Specify the default version of an extension. The default version of an extension will be used in CloudFormation operations.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param setTypeDefaultVersionInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSetTypeDefaultVersionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SetTypeDefaultVersionInput setTypeDefaultVersionInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSetTypeDefaultVersionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, setTypeDefaultVersionInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTSignalResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param signalResourceInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSignalResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SignalResourceInput signalResourceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signalResourceInput;

        // create path and map variables
        String localVarPath = "/#Action=SignalResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTSignalResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SignalResourceInput signalResourceInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTSignalResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTSignalResource(Async)");
        }

        return pOSTSignalResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, signalResourceInput, _callback);

    }

    /**
     * 
     * Sends a signal to the specified resource with a success or failure status. You can use the &lt;code&gt;SignalResource&lt;/code&gt; operation in conjunction with a creation policy or update policy. CloudFormation doesn&#39;t proceed with a stack creation or update until resources receive the required number of signals or the timeout period is exceeded. The &lt;code&gt;SignalResource&lt;/code&gt; operation is useful in cases where you want to send signals from anywhere other than an Amazon EC2 instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param signalResourceInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTSignalResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SignalResourceInput signalResourceInput) throws ApiException {
        pOSTSignalResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, signalResourceInput);
    }

    /**
     * 
     * Sends a signal to the specified resource with a success or failure status. You can use the &lt;code&gt;SignalResource&lt;/code&gt; operation in conjunction with a creation policy or update policy. CloudFormation doesn&#39;t proceed with a stack creation or update until resources receive the required number of signals or the timeout period is exceeded. The &lt;code&gt;SignalResource&lt;/code&gt; operation is useful in cases where you want to send signals from anywhere other than an Amazon EC2 instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param signalResourceInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTSignalResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SignalResourceInput signalResourceInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTSignalResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, signalResourceInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Sends a signal to the specified resource with a success or failure status. You can use the &lt;code&gt;SignalResource&lt;/code&gt; operation in conjunction with a creation policy or update policy. CloudFormation doesn&#39;t proceed with a stack creation or update until resources receive the required number of signals or the timeout period is exceeded. The &lt;code&gt;SignalResource&lt;/code&gt; operation is useful in cases where you want to send signals from anywhere other than an Amazon EC2 instance.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param signalResourceInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTSignalResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, SignalResourceInput signalResourceInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTSignalResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, signalResourceInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStopStackSetOperation
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopStackSetOperationInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStopStackSetOperationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopStackSetOperationInput stopStackSetOperationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopStackSetOperationInput;

        // create path and map variables
        String localVarPath = "/#Action=StopStackSetOperation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStopStackSetOperationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopStackSetOperationInput stopStackSetOperationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStopStackSetOperation(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStopStackSetOperation(Async)");
        }

        return pOSTStopStackSetOperationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopStackSetOperationInput, _callback);

    }

    /**
     * 
     * Stops an in-progress operation on a stack set and its associated stack instances. StackSets will cancel all the unstarted stack instance deployments and wait for those are in-progress to complete.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopStackSetOperationInput  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public Object pOSTStopStackSetOperation(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopStackSetOperationInput stopStackSetOperationInput) throws ApiException {
        ApiResponse<Object> localVarResp = pOSTStopStackSetOperationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopStackSetOperationInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Stops an in-progress operation on a stack set and its associated stack instances. StackSets will cancel all the unstarted stack instance deployments and wait for those are in-progress to complete.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopStackSetOperationInput  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> pOSTStopStackSetOperationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopStackSetOperationInput stopStackSetOperationInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTStopStackSetOperationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopStackSetOperationInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stops an in-progress operation on a stack set and its associated stack instances. StackSets will cancel all the unstarted stack instance deployments and wait for those are in-progress to complete.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param stopStackSetOperationInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStopStackSetOperationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StopStackSetOperationInput stopStackSetOperationInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStopStackSetOperationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stopStackSetOperationInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTTestType
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param testTypeInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTestTypeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestTypeInput testTypeInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testTypeInput;

        // create path and map variables
        String localVarPath = "/#Action=TestType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTTestTypeValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestTypeInput testTypeInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTTestType(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTTestType(Async)");
        }

        return pOSTTestTypeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, testTypeInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Tests a registered extension to make sure it meets all necessary requirements for being published in the CloudFormation registry.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, this includes passing all contracts tests defined for the type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, this includes determining if the module&#39;s model meets all necessary requirements.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-testing\&quot;&gt;Testing your public extension prior to publishing&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in your account and Region for testing.&lt;/p&gt; &lt;p&gt;To perform testing, CloudFormation assumes the execution role specified when the type was registered. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Once you&#39;ve initiated testing on an extension using &lt;code&gt;TestType&lt;/code&gt;, you can pass the returned &lt;code&gt;TypeVersionArn&lt;/code&gt; into &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt; to monitor the current test status and test status description for the extension.&lt;/p&gt; &lt;p&gt;An extension must have a test status of &lt;code&gt;PASSED&lt;/code&gt; before it can be published. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param testTypeInput  (optional)
     * @return TestTypeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public TestTypeOutput pOSTTestType(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestTypeInput testTypeInput) throws ApiException {
        ApiResponse<TestTypeOutput> localVarResp = pOSTTestTypeWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, testTypeInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Tests a registered extension to make sure it meets all necessary requirements for being published in the CloudFormation registry.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, this includes passing all contracts tests defined for the type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, this includes determining if the module&#39;s model meets all necessary requirements.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-testing\&quot;&gt;Testing your public extension prior to publishing&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in your account and Region for testing.&lt;/p&gt; &lt;p&gt;To perform testing, CloudFormation assumes the execution role specified when the type was registered. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Once you&#39;ve initiated testing on an extension using &lt;code&gt;TestType&lt;/code&gt;, you can pass the returned &lt;code&gt;TypeVersionArn&lt;/code&gt; into &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt; to monitor the current test status and test status description for the extension.&lt;/p&gt; &lt;p&gt;An extension must have a test status of &lt;code&gt;PASSED&lt;/code&gt; before it can be published. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param testTypeInput  (optional)
     * @return ApiResponse&lt;TestTypeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestTypeOutput> pOSTTestTypeWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestTypeInput testTypeInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTTestTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, testTypeInput, null);
        Type localVarReturnType = new TypeToken<TestTypeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Tests a registered extension to make sure it meets all necessary requirements for being published in the CloudFormation registry.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For resource types, this includes passing all contracts tests defined for the type.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For modules, this includes determining if the module&#39;s model meets all necessary requirements.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/publish-extension.html#publish-extension-testing\&quot;&gt;Testing your public extension prior to publishing&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a version, CloudFormation uses the default version of the extension in your account and Region for testing.&lt;/p&gt; &lt;p&gt;To perform testing, CloudFormation assumes the execution role specified when the type was registered. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_RegisterType.html\&quot;&gt;RegisterType&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Once you&#39;ve initiated testing on an extension using &lt;code&gt;TestType&lt;/code&gt;, you can pass the returned &lt;code&gt;TypeVersionArn&lt;/code&gt; into &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_DescribeType.html\&quot;&gt;DescribeType&lt;/a&gt; to monitor the current test status and test status description for the extension.&lt;/p&gt; &lt;p&gt;An extension must have a test status of &lt;code&gt;PASSED&lt;/code&gt; before it can be published. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-publish.html\&quot;&gt;Publishing extensions to make them available for public use&lt;/a&gt; in the &lt;i&gt;CloudFormation CLI User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param testTypeInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CFNRegistryException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TypeNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTestTypeAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestTypeInput testTypeInput, final ApiCallback<TestTypeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTTestTypeValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, testTypeInput, _callback);
        Type localVarReturnType = new TypeToken<TestTypeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateStack
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateStackCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInput updateStackInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStackInput;

        // create path and map variables
        String localVarPath = "/#Action=UpdateStack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateStackValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInput updateStackInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateStack(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateStack(Async)");
        }

        return pOSTUpdateStackCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates a stack as specified in the template. After the call completes successfully, the stack update starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To get a copy of the template for an existing stack, you can use the &lt;a&gt;GetTemplate&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about creating an update template, updating a stack, and monitoring the progress of the update, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks.html\&quot;&gt;Updating a Stack&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackInput  (optional)
     * @return UpdateStackOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStackOutput pOSTUpdateStack(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInput updateStackInput) throws ApiException {
        ApiResponse<UpdateStackOutput> localVarResp = pOSTUpdateStackWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates a stack as specified in the template. After the call completes successfully, the stack update starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To get a copy of the template for an existing stack, you can use the &lt;a&gt;GetTemplate&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about creating an update template, updating a stack, and monitoring the progress of the update, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks.html\&quot;&gt;Updating a Stack&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackInput  (optional)
     * @return ApiResponse&lt;UpdateStackOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStackOutput> pOSTUpdateStackWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInput updateStackInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackInput, null);
        Type localVarReturnType = new TypeToken<UpdateStackOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates a stack as specified in the template. After the call completes successfully, the stack update starts. You can check the status of the stack through the &lt;a&gt;DescribeStacks&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To get a copy of the template for an existing stack, you can use the &lt;a&gt;GetTemplate&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;For more information about creating an update template, updating a stack, and monitoring the progress of the update, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks.html\&quot;&gt;Updating a Stack&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InsufficientCapabilitiesException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> TokenAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateStackAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInput updateStackInput, final ApiCallback<UpdateStackOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateStackValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateStackOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateStackInstances
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackInstancesInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateStackInstancesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInstancesInput updateStackInstancesInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStackInstancesInput;

        // create path and map variables
        String localVarPath = "/#Action=UpdateStackInstances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateStackInstancesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInstancesInput updateStackInstancesInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateStackInstances(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateStackInstances(Async)");
        }

        return pOSTUpdateStackInstancesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackInstancesInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the parameter values for stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region.&lt;/p&gt; &lt;p&gt;You can only update stack instances in Amazon Web Services Regions and accounts where they already exist; to create additional stack instances, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStackInstances.html\&quot;&gt;CreateStackInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;During stack set updates, any parameters overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only update the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackInstancesInput  (optional)
     * @return UpdateStackInstancesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStackInstancesOutput pOSTUpdateStackInstances(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInstancesInput updateStackInstancesInput) throws ApiException {
        ApiResponse<UpdateStackInstancesOutput> localVarResp = pOSTUpdateStackInstancesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackInstancesInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the parameter values for stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region.&lt;/p&gt; &lt;p&gt;You can only update stack instances in Amazon Web Services Regions and accounts where they already exist; to create additional stack instances, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStackInstances.html\&quot;&gt;CreateStackInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;During stack set updates, any parameters overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only update the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackInstancesInput  (optional)
     * @return ApiResponse&lt;UpdateStackInstancesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStackInstancesOutput> pOSTUpdateStackInstancesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInstancesInput updateStackInstancesInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateStackInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackInstancesInput, null);
        Type localVarReturnType = new TypeToken<UpdateStackInstancesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the parameter values for stack instances for the specified accounts, within the specified Amazon Web Services Regions. A stack instance refers to a stack in a specific account and Region.&lt;/p&gt; &lt;p&gt;You can only update stack instances in Amazon Web Services Regions and accounts where they already exist; to create additional stack instances, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_CreateStackInstances.html\&quot;&gt;CreateStackInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;During stack set updates, any parameters overridden for a stack instance aren&#39;t updated, but retain their overridden value.&lt;/p&gt; &lt;p&gt;You can only update the parameter &lt;i&gt;values&lt;/i&gt; that are specified in the stack set; to add or delete a parameter itself, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update the stack set template. If you add a parameter to a template, before you can override the parameter value specified in the stack set you must first use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_UpdateStackSet.html\&quot;&gt;UpdateStackSet&lt;/a&gt; to update all stack instances with the updated template and parameter value specified in the stack set. Once a stack instance has been updated with the new parameter, you can then override the parameter value using &lt;code&gt;UpdateStackInstances&lt;/code&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackInstancesInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidOperationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateStackInstancesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackInstancesInput updateStackInstancesInput, final ApiCallback<UpdateStackInstancesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateStackInstancesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackInstancesInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateStackInstancesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateStackSet
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackSetInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateStackSetCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackSetInput updateStackSetInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStackSetInput;

        // create path and map variables
        String localVarPath = "/#Action=UpdateStackSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateStackSetValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackSetInput updateStackSetInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateStackSet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateStackSet(Async)");
        }

        return pOSTUpdateStackSetCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackSetInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the stack set, and associated stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;Even if the stack set operation created by updating the stack set fails (completely or partially, below or above a specified failure tolerance), the stack set is updated with your changes. Subsequent &lt;a&gt;CreateStackInstances&lt;/a&gt; calls on the specified stack set use the updated stack set.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackSetInput  (optional)
     * @return UpdateStackSetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStackSetOutput pOSTUpdateStackSet(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackSetInput updateStackSetInput) throws ApiException {
        ApiResponse<UpdateStackSetOutput> localVarResp = pOSTUpdateStackSetWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackSetInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the stack set, and associated stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;Even if the stack set operation created by updating the stack set fails (completely or partially, below or above a specified failure tolerance), the stack set is updated with your changes. Subsequent &lt;a&gt;CreateStackInstances&lt;/a&gt; calls on the specified stack set use the updated stack set.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackSetInput  (optional)
     * @return ApiResponse&lt;UpdateStackSetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateStackSetOutput> pOSTUpdateStackSetWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackSetInput updateStackSetInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackSetInput, null);
        Type localVarReturnType = new TypeToken<UpdateStackSetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the stack set, and associated stack instances in the specified accounts and Amazon Web Services Regions.&lt;/p&gt; &lt;p&gt;Even if the stack set operation created by updating the stack set fails (completely or partially, below or above a specified failure tolerance), the stack set is updated with your changes. Subsequent &lt;a&gt;CreateStackInstances&lt;/a&gt; calls on the specified stack set use the updated stack set.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateStackSetInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> StackSetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationInProgressException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationIdAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> StaleRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidOperationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> StackInstanceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateStackSetAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateStackSetInput updateStackSetInput, final ApiCallback<UpdateStackSetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateStackSetValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateStackSetInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateStackSetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTUpdateTerminationProtection
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateTerminationProtectionInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateTerminationProtectionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTerminationProtectionInput updateTerminationProtectionInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTerminationProtectionInput;

        // create path and map variables
        String localVarPath = "/#Action=UpdateTerminationProtection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTUpdateTerminationProtectionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTerminationProtectionInput updateTerminationProtectionInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTUpdateTerminationProtection(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTUpdateTerminationProtection(Async)");
        }

        return pOSTUpdateTerminationProtectionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateTerminationProtectionInput, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates termination protection for the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateTerminationProtectionInput  (optional)
     * @return UpdateTerminationProtectionOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTerminationProtectionOutput pOSTUpdateTerminationProtection(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTerminationProtectionInput updateTerminationProtectionInput) throws ApiException {
        ApiResponse<UpdateTerminationProtectionOutput> localVarResp = pOSTUpdateTerminationProtectionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateTerminationProtectionInput);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates termination protection for the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateTerminationProtectionInput  (optional)
     * @return ApiResponse&lt;UpdateTerminationProtectionOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTerminationProtectionOutput> pOSTUpdateTerminationProtectionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTerminationProtectionInput updateTerminationProtectionInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTUpdateTerminationProtectionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateTerminationProtectionInput, null);
        Type localVarReturnType = new TypeToken<UpdateTerminationProtectionOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates termination protection for the specified stack. If a user attempts to delete a stack with termination protection enabled, the operation fails and the stack remains unchanged. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-protect-stacks.html\&quot;&gt;Protecting a Stack From Being Deleted&lt;/a&gt; in the &lt;i&gt;CloudFormation User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-nested-stacks.html\&quot;&gt;nested stacks&lt;/a&gt;, termination protection is set on the root stack and can&#39;t be changed directly on the nested stack.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param updateTerminationProtectionInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTUpdateTerminationProtectionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, UpdateTerminationProtectionInput updateTerminationProtectionInput, final ApiCallback<UpdateTerminationProtectionOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTUpdateTerminationProtectionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updateTerminationProtectionInput, _callback);
        Type localVarReturnType = new TypeToken<UpdateTerminationProtectionOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTValidateTemplate
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param validateTemplateInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTValidateTemplateCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateTemplateInput validateTemplateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validateTemplateInput;

        // create path and map variables
        String localVarPath = "/#Action=ValidateTemplate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTValidateTemplateValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateTemplateInput validateTemplateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTValidateTemplate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTValidateTemplate(Async)");
        }

        return pOSTValidateTemplateCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, validateTemplateInput, _callback);

    }

    /**
     * 
     * Validates a specified template. CloudFormation first checks if the template is valid JSON. If it isn&#39;t, CloudFormation checks if the template is valid YAML. If both these checks fail, CloudFormation returns a template validation error.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param validateTemplateInput  (optional)
     * @return ValidateTemplateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ValidateTemplateOutput pOSTValidateTemplate(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateTemplateInput validateTemplateInput) throws ApiException {
        ApiResponse<ValidateTemplateOutput> localVarResp = pOSTValidateTemplateWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, validateTemplateInput);
        return localVarResp.getData();
    }

    /**
     * 
     * Validates a specified template. CloudFormation first checks if the template is valid JSON. If it isn&#39;t, CloudFormation checks if the template is valid YAML. If both these checks fail, CloudFormation returns a template validation error.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param validateTemplateInput  (optional)
     * @return ApiResponse&lt;ValidateTemplateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateTemplateOutput> pOSTValidateTemplateWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateTemplateInput validateTemplateInput) throws ApiException {
        okhttp3.Call localVarCall = pOSTValidateTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, validateTemplateInput, null);
        Type localVarReturnType = new TypeToken<ValidateTemplateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Validates a specified template. CloudFormation first checks if the template is valid JSON. If it isn&#39;t, CloudFormation checks if the template is valid YAML. If both these checks fail, CloudFormation returns a template validation error.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param validateTemplateInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTValidateTemplateAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ValidateTemplateInput validateTemplateInput, final ApiCallback<ValidateTemplateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTValidateTemplateValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, validateTemplateInput, _callback);
        Type localVarReturnType = new TypeToken<ValidateTemplateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
