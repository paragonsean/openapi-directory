/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HandlerErrorCode;
import org.openapitools.client.model.OperationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecordHandlerProgressInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecordHandlerProgressInput {
  public static final String SERIALIZED_NAME_BEARER_TOKEN = "BearerToken";
  @SerializedName(SERIALIZED_NAME_BEARER_TOKEN)
  private String bearerToken;

  public static final String SERIALIZED_NAME_OPERATION_STATUS = "OperationStatus";
  @SerializedName(SERIALIZED_NAME_OPERATION_STATUS)
  private OperationStatus operationStatus;

  public static final String SERIALIZED_NAME_CURRENT_OPERATION_STATUS = "CurrentOperationStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_OPERATION_STATUS)
  private OperationStatus currentOperationStatus;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_ERROR_CODE = "ErrorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private HandlerErrorCode errorCode;

  public static final String SERIALIZED_NAME_RESOURCE_MODEL = "ResourceModel";
  @SerializedName(SERIALIZED_NAME_RESOURCE_MODEL)
  private String resourceModel;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public RecordHandlerProgressInput() {
  }

  public RecordHandlerProgressInput bearerToken(String bearerToken) {
    this.bearerToken = bearerToken;
    return this;
  }

  /**
   * Get bearerToken
   * @return bearerToken
   */
  @javax.annotation.Nonnull
  public String getBearerToken() {
    return bearerToken;
  }

  public void setBearerToken(String bearerToken) {
    this.bearerToken = bearerToken;
  }


  public RecordHandlerProgressInput operationStatus(OperationStatus operationStatus) {
    this.operationStatus = operationStatus;
    return this;
  }

  /**
   * Get operationStatus
   * @return operationStatus
   */
  @javax.annotation.Nonnull
  public OperationStatus getOperationStatus() {
    return operationStatus;
  }

  public void setOperationStatus(OperationStatus operationStatus) {
    this.operationStatus = operationStatus;
  }


  public RecordHandlerProgressInput currentOperationStatus(OperationStatus currentOperationStatus) {
    this.currentOperationStatus = currentOperationStatus;
    return this;
  }

  /**
   * Get currentOperationStatus
   * @return currentOperationStatus
   */
  @javax.annotation.Nullable
  public OperationStatus getCurrentOperationStatus() {
    return currentOperationStatus;
  }

  public void setCurrentOperationStatus(OperationStatus currentOperationStatus) {
    this.currentOperationStatus = currentOperationStatus;
  }


  public RecordHandlerProgressInput statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public RecordHandlerProgressInput errorCode(HandlerErrorCode errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nullable
  public HandlerErrorCode getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(HandlerErrorCode errorCode) {
    this.errorCode = errorCode;
  }


  public RecordHandlerProgressInput resourceModel(String resourceModel) {
    this.resourceModel = resourceModel;
    return this;
  }

  /**
   * Get resourceModel
   * @return resourceModel
   */
  @javax.annotation.Nullable
  public String getResourceModel() {
    return resourceModel;
  }

  public void setResourceModel(String resourceModel) {
    this.resourceModel = resourceModel;
  }


  public RecordHandlerProgressInput clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * Get clientRequestToken
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordHandlerProgressInput recordHandlerProgressInput = (RecordHandlerProgressInput) o;
    return Objects.equals(this.bearerToken, recordHandlerProgressInput.bearerToken) &&
        Objects.equals(this.operationStatus, recordHandlerProgressInput.operationStatus) &&
        Objects.equals(this.currentOperationStatus, recordHandlerProgressInput.currentOperationStatus) &&
        Objects.equals(this.statusMessage, recordHandlerProgressInput.statusMessage) &&
        Objects.equals(this.errorCode, recordHandlerProgressInput.errorCode) &&
        Objects.equals(this.resourceModel, recordHandlerProgressInput.resourceModel) &&
        Objects.equals(this.clientRequestToken, recordHandlerProgressInput.clientRequestToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bearerToken, operationStatus, currentOperationStatus, statusMessage, errorCode, resourceModel, clientRequestToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordHandlerProgressInput {\n");
    sb.append("    bearerToken: ").append(toIndentedString(bearerToken)).append("\n");
    sb.append("    operationStatus: ").append(toIndentedString(operationStatus)).append("\n");
    sb.append("    currentOperationStatus: ").append(toIndentedString(currentOperationStatus)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    resourceModel: ").append(toIndentedString(resourceModel)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BearerToken");
    openapiFields.add("OperationStatus");
    openapiFields.add("CurrentOperationStatus");
    openapiFields.add("StatusMessage");
    openapiFields.add("ErrorCode");
    openapiFields.add("ResourceModel");
    openapiFields.add("ClientRequestToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BearerToken");
    openapiRequiredFields.add("OperationStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordHandlerProgressInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordHandlerProgressInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordHandlerProgressInput is not found in the empty JSON string", RecordHandlerProgressInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordHandlerProgressInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordHandlerProgressInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecordHandlerProgressInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `BearerToken`
      String.validateJsonElement(jsonObj.get("BearerToken"));
      // validate the required field `OperationStatus`
      OperationStatus.validateJsonElement(jsonObj.get("OperationStatus"));
      // validate the optional field `CurrentOperationStatus`
      if (jsonObj.get("CurrentOperationStatus") != null && !jsonObj.get("CurrentOperationStatus").isJsonNull()) {
        OperationStatus.validateJsonElement(jsonObj.get("CurrentOperationStatus"));
      }
      // validate the optional field `StatusMessage`
      if (jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusMessage"));
      }
      // validate the optional field `ErrorCode`
      if (jsonObj.get("ErrorCode") != null && !jsonObj.get("ErrorCode").isJsonNull()) {
        HandlerErrorCode.validateJsonElement(jsonObj.get("ErrorCode"));
      }
      // validate the optional field `ResourceModel`
      if (jsonObj.get("ResourceModel") != null && !jsonObj.get("ResourceModel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceModel"));
      }
      // validate the optional field `ClientRequestToken`
      if (jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientRequestToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordHandlerProgressInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordHandlerProgressInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordHandlerProgressInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordHandlerProgressInput.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordHandlerProgressInput>() {
           @Override
           public void write(JsonWriter out, RecordHandlerProgressInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordHandlerProgressInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordHandlerProgressInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordHandlerProgressInput
   * @throws IOException if the JSON string is invalid with respect to RecordHandlerProgressInput
   */
  public static RecordHandlerProgressInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordHandlerProgressInput.class);
  }

  /**
   * Convert an instance of RecordHandlerProgressInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

