/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ThirdPartyType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier {
  public static final String SERIALIZED_NAME_TYPE_ARN = "TypeArn";
  @SerializedName(SERIALIZED_NAME_TYPE_ARN)
  private String typeArn;

  public static final String SERIALIZED_NAME_TYPE_CONFIGURATION_ALIAS = "TypeConfigurationAlias";
  @SerializedName(SERIALIZED_NAME_TYPE_CONFIGURATION_ALIAS)
  private String typeConfigurationAlias;

  public static final String SERIALIZED_NAME_TYPE_CONFIGURATION_ARN = "TypeConfigurationArn";
  @SerializedName(SERIALIZED_NAME_TYPE_CONFIGURATION_ARN)
  private String typeConfigurationArn;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ThirdPartyType type;

  public static final String SERIALIZED_NAME_TYPE_NAME = "TypeName";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier() {
  }

  public BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier typeArn(String typeArn) {
    this.typeArn = typeArn;
    return this;
  }

  /**
   * Get typeArn
   * @return typeArn
   */
  @javax.annotation.Nullable
  public String getTypeArn() {
    return typeArn;
  }

  public void setTypeArn(String typeArn) {
    this.typeArn = typeArn;
  }


  public BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier typeConfigurationAlias(String typeConfigurationAlias) {
    this.typeConfigurationAlias = typeConfigurationAlias;
    return this;
  }

  /**
   * Get typeConfigurationAlias
   * @return typeConfigurationAlias
   */
  @javax.annotation.Nullable
  public String getTypeConfigurationAlias() {
    return typeConfigurationAlias;
  }

  public void setTypeConfigurationAlias(String typeConfigurationAlias) {
    this.typeConfigurationAlias = typeConfigurationAlias;
  }


  public BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier typeConfigurationArn(String typeConfigurationArn) {
    this.typeConfigurationArn = typeConfigurationArn;
    return this;
  }

  /**
   * Get typeConfigurationArn
   * @return typeConfigurationArn
   */
  @javax.annotation.Nullable
  public String getTypeConfigurationArn() {
    return typeConfigurationArn;
  }

  public void setTypeConfigurationArn(String typeConfigurationArn) {
    this.typeConfigurationArn = typeConfigurationArn;
  }


  public BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier type(ThirdPartyType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ThirdPartyType getType() {
    return type;
  }

  public void setType(ThirdPartyType type) {
    this.type = type;
  }


  public BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier batchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier = (BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier) o;
    return Objects.equals(this.typeArn, batchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.typeArn) &&
        Objects.equals(this.typeConfigurationAlias, batchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.typeConfigurationAlias) &&
        Objects.equals(this.typeConfigurationArn, batchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.typeConfigurationArn) &&
        Objects.equals(this.type, batchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.type) &&
        Objects.equals(this.typeName, batchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.typeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeArn, typeConfigurationAlias, typeConfigurationArn, type, typeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier {\n");
    sb.append("    typeArn: ").append(toIndentedString(typeArn)).append("\n");
    sb.append("    typeConfigurationAlias: ").append(toIndentedString(typeConfigurationAlias)).append("\n");
    sb.append("    typeConfigurationArn: ").append(toIndentedString(typeConfigurationArn)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TypeArn");
    openapiFields.add("TypeConfigurationAlias");
    openapiFields.add("TypeConfigurationArn");
    openapiFields.add("Type");
    openapiFields.add("TypeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier is not found in the empty JSON string", BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TypeArn`
      if (jsonObj.get("TypeArn") != null && !jsonObj.get("TypeArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeArn"));
      }
      // validate the optional field `TypeConfigurationAlias`
      if (jsonObj.get("TypeConfigurationAlias") != null && !jsonObj.get("TypeConfigurationAlias").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeConfigurationAlias"));
      }
      // validate the optional field `TypeConfigurationArn`
      if (jsonObj.get("TypeConfigurationArn") != null && !jsonObj.get("TypeConfigurationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeConfigurationArn"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ThirdPartyType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `TypeName`
      if (jsonObj.get("TypeName") != null && !jsonObj.get("TypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TypeName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier>() {
           @Override
           public void write(JsonWriter out, BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier
   * @throws IOException if the JSON string is invalid with respect to BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier
   */
  public static BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier.class);
  }

  /**
   * Convert an instance of BatchDescribeTypeConfigurationsErrorTypeConfigurationIdentifier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

