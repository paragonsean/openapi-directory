/*
 * AWS CloudFormation
 * <fullname>CloudFormation</fullname> <p>CloudFormation allows you to create and manage Amazon Web Services infrastructure deployments predictably and repeatedly. You can use CloudFormation to leverage Amazon Web Services products, such as Amazon Elastic Compute Cloud, Amazon Elastic Block Store, Amazon Simple Notification Service, Elastic Load Balancing, and Auto Scaling to build highly reliable, highly scalable, cost-effective applications without creating or configuring the underlying Amazon Web Services infrastructure.</p> <p>With CloudFormation, you declare all your resources and dependencies in a template file. The template defines a collection of resources as a single unit called a stack. CloudFormation creates and deletes all member resources of the stack together and manages all dependencies between the resources for you.</p> <p>For more information about CloudFormation, see the <a href=\"http://aws.amazon.com/cloudformation/\">CloudFormation product page</a>.</p> <p>CloudFormation makes use of other Amazon Web Services products. If you need additional technical information about a specific Amazon Web Services product, you can find the product's technical documentation at <a href=\"https://docs.aws.amazon.com/\">docs.aws.amazon.com</a>.</p>
 *
 * The version of the OpenAPI document: 2010-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DifferenceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a resource property whose actual value differs from its expected value, as defined in the stack template and any values specified as template parameters. These will be present only for resources whose &lt;code&gt;StackResourceDriftStatus&lt;/code&gt; is &lt;code&gt;MODIFIED&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html\&quot;&gt;Detecting Unregulated Configuration Changes to Stacks and Resources&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:20.021771-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PropertyDifference {
  public static final String SERIALIZED_NAME_PROPERTY_PATH = "PropertyPath";
  @SerializedName(SERIALIZED_NAME_PROPERTY_PATH)
  private String propertyPath;

  public static final String SERIALIZED_NAME_EXPECTED_VALUE = "ExpectedValue";
  @SerializedName(SERIALIZED_NAME_EXPECTED_VALUE)
  private String expectedValue;

  public static final String SERIALIZED_NAME_ACTUAL_VALUE = "ActualValue";
  @SerializedName(SERIALIZED_NAME_ACTUAL_VALUE)
  private String actualValue;

  public static final String SERIALIZED_NAME_DIFFERENCE_TYPE = "DifferenceType";
  @SerializedName(SERIALIZED_NAME_DIFFERENCE_TYPE)
  private DifferenceType differenceType;

  public PropertyDifference() {
  }

  public PropertyDifference propertyPath(String propertyPath) {
    this.propertyPath = propertyPath;
    return this;
  }

  /**
   * Get propertyPath
   * @return propertyPath
   */
  @javax.annotation.Nonnull
  public String getPropertyPath() {
    return propertyPath;
  }

  public void setPropertyPath(String propertyPath) {
    this.propertyPath = propertyPath;
  }


  public PropertyDifference expectedValue(String expectedValue) {
    this.expectedValue = expectedValue;
    return this;
  }

  /**
   * Get expectedValue
   * @return expectedValue
   */
  @javax.annotation.Nonnull
  public String getExpectedValue() {
    return expectedValue;
  }

  public void setExpectedValue(String expectedValue) {
    this.expectedValue = expectedValue;
  }


  public PropertyDifference actualValue(String actualValue) {
    this.actualValue = actualValue;
    return this;
  }

  /**
   * Get actualValue
   * @return actualValue
   */
  @javax.annotation.Nonnull
  public String getActualValue() {
    return actualValue;
  }

  public void setActualValue(String actualValue) {
    this.actualValue = actualValue;
  }


  public PropertyDifference differenceType(DifferenceType differenceType) {
    this.differenceType = differenceType;
    return this;
  }

  /**
   * Get differenceType
   * @return differenceType
   */
  @javax.annotation.Nonnull
  public DifferenceType getDifferenceType() {
    return differenceType;
  }

  public void setDifferenceType(DifferenceType differenceType) {
    this.differenceType = differenceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyDifference propertyDifference = (PropertyDifference) o;
    return Objects.equals(this.propertyPath, propertyDifference.propertyPath) &&
        Objects.equals(this.expectedValue, propertyDifference.expectedValue) &&
        Objects.equals(this.actualValue, propertyDifference.actualValue) &&
        Objects.equals(this.differenceType, propertyDifference.differenceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyPath, expectedValue, actualValue, differenceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyDifference {\n");
    sb.append("    propertyPath: ").append(toIndentedString(propertyPath)).append("\n");
    sb.append("    expectedValue: ").append(toIndentedString(expectedValue)).append("\n");
    sb.append("    actualValue: ").append(toIndentedString(actualValue)).append("\n");
    sb.append("    differenceType: ").append(toIndentedString(differenceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PropertyPath");
    openapiFields.add("ExpectedValue");
    openapiFields.add("ActualValue");
    openapiFields.add("DifferenceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PropertyPath");
    openapiRequiredFields.add("ExpectedValue");
    openapiRequiredFields.add("ActualValue");
    openapiRequiredFields.add("DifferenceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PropertyDifference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropertyDifference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropertyDifference is not found in the empty JSON string", PropertyDifference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropertyDifference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropertyDifference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PropertyDifference.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `PropertyPath`
      String.validateJsonElement(jsonObj.get("PropertyPath"));
      // validate the required field `ExpectedValue`
      String.validateJsonElement(jsonObj.get("ExpectedValue"));
      // validate the required field `ActualValue`
      String.validateJsonElement(jsonObj.get("ActualValue"));
      // validate the required field `DifferenceType`
      DifferenceType.validateJsonElement(jsonObj.get("DifferenceType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropertyDifference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropertyDifference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropertyDifference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropertyDifference.class));

       return (TypeAdapter<T>) new TypeAdapter<PropertyDifference>() {
           @Override
           public void write(JsonWriter out, PropertyDifference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropertyDifference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PropertyDifference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PropertyDifference
   * @throws IOException if the JSON string is invalid with respect to PropertyDifference
   */
  public static PropertyDifference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropertyDifference.class);
  }

  /**
   * Convert an instance of PropertyDifference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

