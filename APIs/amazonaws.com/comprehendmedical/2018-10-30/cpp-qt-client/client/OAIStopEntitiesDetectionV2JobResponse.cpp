/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopEntitiesDetectionV2JobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopEntitiesDetectionV2JobResponse::OAIStopEntitiesDetectionV2JobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopEntitiesDetectionV2JobResponse::OAIStopEntitiesDetectionV2JobResponse() {
    this->initializeModel();
}

OAIStopEntitiesDetectionV2JobResponse::~OAIStopEntitiesDetectionV2JobResponse() {}

void OAIStopEntitiesDetectionV2JobResponse::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;
}

void OAIStopEntitiesDetectionV2JobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopEntitiesDetectionV2JobResponse::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;
}

QString OAIStopEntitiesDetectionV2JobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopEntitiesDetectionV2JobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    return obj;
}

QString OAIStopEntitiesDetectionV2JobResponse::getJobId() const {
    return m_job_id;
}
void OAIStopEntitiesDetectionV2JobResponse::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIStopEntitiesDetectionV2JobResponse::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIStopEntitiesDetectionV2JobResponse::is_job_id_Valid() const{
    return m_job_id_isValid;
}

bool OAIStopEntitiesDetectionV2JobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopEntitiesDetectionV2JobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
