/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIICD10CMTraitName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIICD10CMTraitName::OAIICD10CMTraitName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIICD10CMTraitName::OAIICD10CMTraitName() {
    this->initializeModel();
}

OAIICD10CMTraitName::~OAIICD10CMTraitName() {}

void OAIICD10CMTraitName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIICD10CMTraitName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIICD10CMTraitName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NEGATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMTraitName::NEGATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIAGNOSIS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMTraitName::DIAGNOSIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SIGN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMTraitName::SIGN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYMPTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMTraitName::SYMPTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PERTAINS_TO_FAMILY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMTraitName::PERTAINS_TO_FAMILY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HYPOTHETICAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMTraitName::HYPOTHETICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOW_CONFIDENCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMTraitName::LOW_CONFIDENCE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIICD10CMTraitName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIICD10CMTraitName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIICD10CMTraitName::NEGATION:
            val = "NEGATION";
            break;
        case eOAIICD10CMTraitName::DIAGNOSIS:
            val = "DIAGNOSIS";
            break;
        case eOAIICD10CMTraitName::SIGN:
            val = "SIGN";
            break;
        case eOAIICD10CMTraitName::SYMPTOM:
            val = "SYMPTOM";
            break;
        case eOAIICD10CMTraitName::PERTAINS_TO_FAMILY:
            val = "PERTAINS_TO_FAMILY";
            break;
        case eOAIICD10CMTraitName::HYPOTHETICAL:
            val = "HYPOTHETICAL";
            break;
        case eOAIICD10CMTraitName::LOW_CONFIDENCE:
            val = "LOW_CONFIDENCE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIICD10CMTraitName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIICD10CMTraitName::eOAIICD10CMTraitName OAIICD10CMTraitName::getValue() const {
    return m_value;
}

void OAIICD10CMTraitName::setValue(const OAIICD10CMTraitName::eOAIICD10CMTraitName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIICD10CMTraitName::isSet() const {
    
    return m_value_isSet;
}

bool OAIICD10CMTraitName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
