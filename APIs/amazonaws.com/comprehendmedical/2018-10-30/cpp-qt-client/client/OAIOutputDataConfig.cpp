/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputDataConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputDataConfig::OAIOutputDataConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputDataConfig::OAIOutputDataConfig() {
    this->initializeModel();
}

OAIOutputDataConfig::~OAIOutputDataConfig() {}

void OAIOutputDataConfig::initializeModel() {

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_s3_key_isSet = false;
    m_s3_key_isValid = false;
}

void OAIOutputDataConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputDataConfig::fromJsonObject(QJsonObject json) {

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("S3Bucket")]);
    m_s3_bucket_isSet = !json[QString("S3Bucket")].isNull() && m_s3_bucket_isValid;

    m_s3_key_isValid = ::OpenAPI::fromJsonValue(m_s3_key, json[QString("S3Key")]);
    m_s3_key_isSet = !json[QString("S3Key")].isNull() && m_s3_key_isValid;
}

QString OAIOutputDataConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputDataConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_isSet) {
        obj.insert(QString("S3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_s3_key_isSet) {
        obj.insert(QString("S3Key"), ::OpenAPI::toJsonValue(m_s3_key));
    }
    return obj;
}

QString OAIOutputDataConfig::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIOutputDataConfig::setS3Bucket(const QString &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIOutputDataConfig::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIOutputDataConfig::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

QString OAIOutputDataConfig::getS3Key() const {
    return m_s3_key;
}
void OAIOutputDataConfig::setS3Key(const QString &s3_key) {
    m_s3_key = s3_key;
    m_s3_key_isSet = true;
}

bool OAIOutputDataConfig::is_s3_key_Set() const{
    return m_s3_key_isSet;
}

bool OAIOutputDataConfig::is_s3_key_Valid() const{
    return m_s3_key_isValid;
}

bool OAIOutputDataConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputDataConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_isValid && true;
}

} // namespace OpenAPI
