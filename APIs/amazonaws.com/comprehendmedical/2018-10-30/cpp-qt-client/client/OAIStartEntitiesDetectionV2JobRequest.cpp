/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartEntitiesDetectionV2JobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartEntitiesDetectionV2JobRequest::OAIStartEntitiesDetectionV2JobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartEntitiesDetectionV2JobRequest::OAIStartEntitiesDetectionV2JobRequest() {
    this->initializeModel();
}

OAIStartEntitiesDetectionV2JobRequest::~OAIStartEntitiesDetectionV2JobRequest() {}

void OAIStartEntitiesDetectionV2JobRequest::initializeModel() {

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;
}

void OAIStartEntitiesDetectionV2JobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartEntitiesDetectionV2JobRequest::fromJsonObject(QJsonObject json) {

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("KMSKey")]);
    m_kms_key_isSet = !json[QString("KMSKey")].isNull() && m_kms_key_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;
}

QString OAIStartEntitiesDetectionV2JobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartEntitiesDetectionV2JobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("KMSKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    return obj;
}

OAIStartEntitiesDetectionV2JobRequest_InputDataConfig OAIStartEntitiesDetectionV2JobRequest::getInputDataConfig() const {
    return m_input_data_config;
}
void OAIStartEntitiesDetectionV2JobRequest::setInputDataConfig(const OAIStartEntitiesDetectionV2JobRequest_InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAIStartEntitiesDetectionV2JobRequest_OutputDataConfig OAIStartEntitiesDetectionV2JobRequest::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAIStartEntitiesDetectionV2JobRequest::setOutputDataConfig(const OAIStartEntitiesDetectionV2JobRequest_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

QString OAIStartEntitiesDetectionV2JobRequest::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAIStartEntitiesDetectionV2JobRequest::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

QString OAIStartEntitiesDetectionV2JobRequest::getJobName() const {
    return m_job_name;
}
void OAIStartEntitiesDetectionV2JobRequest::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAIStartEntitiesDetectionV2JobRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIStartEntitiesDetectionV2JobRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIStartEntitiesDetectionV2JobRequest::getKmsKey() const {
    return m_kms_key;
}
void OAIStartEntitiesDetectionV2JobRequest::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

OAILanguageCode OAIStartEntitiesDetectionV2JobRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIStartEntitiesDetectionV2JobRequest::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIStartEntitiesDetectionV2JobRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAIStartEntitiesDetectionV2JobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartEntitiesDetectionV2JobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_data_config_isValid && m_output_data_config_isValid && m_data_access_role_arn_isValid && m_language_code_isValid && true;
}

} // namespace OpenAPI
