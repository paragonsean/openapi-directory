/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIICD10CMRelationshipType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIICD10CMRelationshipType::OAIICD10CMRelationshipType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIICD10CMRelationshipType::OAIICD10CMRelationshipType() {
    this->initializeModel();
}

OAIICD10CMRelationshipType::~OAIICD10CMRelationshipType() {}

void OAIICD10CMRelationshipType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIICD10CMRelationshipType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIICD10CMRelationshipType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("OVERLAP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMRelationshipType::OVERLAP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYSTEM_ORGAN_SITE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMRelationshipType::SYSTEM_ORGAN_SITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUALITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMRelationshipType::QUALITY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIICD10CMRelationshipType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIICD10CMRelationshipType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIICD10CMRelationshipType::OVERLAP:
            val = "OVERLAP";
            break;
        case eOAIICD10CMRelationshipType::SYSTEM_ORGAN_SITE:
            val = "SYSTEM_ORGAN_SITE";
            break;
        case eOAIICD10CMRelationshipType::QUALITY:
            val = "QUALITY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIICD10CMRelationshipType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIICD10CMRelationshipType::eOAIICD10CMRelationshipType OAIICD10CMRelationshipType::getValue() const {
    return m_value;
}

void OAIICD10CMRelationshipType::setValue(const OAIICD10CMRelationshipType::eOAIICD10CMRelationshipType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIICD10CMRelationshipType::isSet() const {
    
    return m_value_isSet;
}

bool OAIICD10CMRelationshipType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
