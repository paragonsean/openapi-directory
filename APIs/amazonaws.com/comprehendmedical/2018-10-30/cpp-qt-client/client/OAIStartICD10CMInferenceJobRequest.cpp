/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartICD10CMInferenceJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartICD10CMInferenceJobRequest::OAIStartICD10CMInferenceJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartICD10CMInferenceJobRequest::OAIStartICD10CMInferenceJobRequest() {
    this->initializeModel();
}

OAIStartICD10CMInferenceJobRequest::~OAIStartICD10CMInferenceJobRequest() {}

void OAIStartICD10CMInferenceJobRequest::initializeModel() {

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;
}

void OAIStartICD10CMInferenceJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartICD10CMInferenceJobRequest::fromJsonObject(QJsonObject json) {

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("KMSKey")]);
    m_kms_key_isSet = !json[QString("KMSKey")].isNull() && m_kms_key_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;
}

QString OAIStartICD10CMInferenceJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartICD10CMInferenceJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("KMSKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    return obj;
}

OAIStartICD10CMInferenceJobRequest_InputDataConfig OAIStartICD10CMInferenceJobRequest::getInputDataConfig() const {
    return m_input_data_config;
}
void OAIStartICD10CMInferenceJobRequest::setInputDataConfig(const OAIStartICD10CMInferenceJobRequest_InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAIStartICD10CMInferenceJobRequest::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAIStartICD10CMInferenceJobRequest::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAIStartICD10CMInferenceJobRequest_OutputDataConfig OAIStartICD10CMInferenceJobRequest::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAIStartICD10CMInferenceJobRequest::setOutputDataConfig(const OAIStartICD10CMInferenceJobRequest_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAIStartICD10CMInferenceJobRequest::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAIStartICD10CMInferenceJobRequest::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

QString OAIStartICD10CMInferenceJobRequest::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAIStartICD10CMInferenceJobRequest::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAIStartICD10CMInferenceJobRequest::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAIStartICD10CMInferenceJobRequest::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

QString OAIStartICD10CMInferenceJobRequest::getJobName() const {
    return m_job_name;
}
void OAIStartICD10CMInferenceJobRequest::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIStartICD10CMInferenceJobRequest::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIStartICD10CMInferenceJobRequest::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAIStartICD10CMInferenceJobRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIStartICD10CMInferenceJobRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIStartICD10CMInferenceJobRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIStartICD10CMInferenceJobRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIStartICD10CMInferenceJobRequest::getKmsKey() const {
    return m_kms_key;
}
void OAIStartICD10CMInferenceJobRequest::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIStartICD10CMInferenceJobRequest::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIStartICD10CMInferenceJobRequest::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

OAILanguageCode OAIStartICD10CMInferenceJobRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIStartICD10CMInferenceJobRequest::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIStartICD10CMInferenceJobRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIStartICD10CMInferenceJobRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

bool OAIStartICD10CMInferenceJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartICD10CMInferenceJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_data_config_isValid && m_output_data_config_isValid && m_data_access_role_arn_isValid && m_language_code_isValid && true;
}

} // namespace OpenAPI
