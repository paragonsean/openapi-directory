/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIICD10CMAttributeType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIICD10CMAttributeType::OAIICD10CMAttributeType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIICD10CMAttributeType::OAIICD10CMAttributeType() {
    this->initializeModel();
}

OAIICD10CMAttributeType::~OAIICD10CMAttributeType() {}

void OAIICD10CMAttributeType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIICD10CMAttributeType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIICD10CMAttributeType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACUITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMAttributeType::ACUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMAttributeType::DIRECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYSTEM_ORGAN_SITE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMAttributeType::SYSTEM_ORGAN_SITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUALITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMAttributeType::QUALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUANTITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMAttributeType::QUANTITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_TO_DX_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMAttributeType::TIME_TO_DX_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_EXPRESSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIICD10CMAttributeType::TIME_EXPRESSION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIICD10CMAttributeType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIICD10CMAttributeType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIICD10CMAttributeType::ACUITY:
            val = "ACUITY";
            break;
        case eOAIICD10CMAttributeType::DIRECTION:
            val = "DIRECTION";
            break;
        case eOAIICD10CMAttributeType::SYSTEM_ORGAN_SITE:
            val = "SYSTEM_ORGAN_SITE";
            break;
        case eOAIICD10CMAttributeType::QUALITY:
            val = "QUALITY";
            break;
        case eOAIICD10CMAttributeType::QUANTITY:
            val = "QUANTITY";
            break;
        case eOAIICD10CMAttributeType::TIME_TO_DX_NAME:
            val = "TIME_TO_DX_NAME";
            break;
        case eOAIICD10CMAttributeType::TIME_EXPRESSION:
            val = "TIME_EXPRESSION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIICD10CMAttributeType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIICD10CMAttributeType::eOAIICD10CMAttributeType OAIICD10CMAttributeType::getValue() const {
    return m_value;
}

void OAIICD10CMAttributeType::setValue(const OAIICD10CMAttributeType::eOAIICD10CMAttributeType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIICD10CMAttributeType::isSet() const {
    
    return m_value_isSet;
}

bool OAIICD10CMAttributeType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
