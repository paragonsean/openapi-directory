/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRxNormInferenceJobsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRxNormInferenceJobsResponse::OAIListRxNormInferenceJobsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRxNormInferenceJobsResponse::OAIListRxNormInferenceJobsResponse() {
    this->initializeModel();
}

OAIListRxNormInferenceJobsResponse::~OAIListRxNormInferenceJobsResponse() {}

void OAIListRxNormInferenceJobsResponse::initializeModel() {

    m_comprehend_medical_async_job_properties_list_isSet = false;
    m_comprehend_medical_async_job_properties_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListRxNormInferenceJobsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRxNormInferenceJobsResponse::fromJsonObject(QJsonObject json) {

    m_comprehend_medical_async_job_properties_list_isValid = ::OpenAPI::fromJsonValue(m_comprehend_medical_async_job_properties_list, json[QString("ComprehendMedicalAsyncJobPropertiesList")]);
    m_comprehend_medical_async_job_properties_list_isSet = !json[QString("ComprehendMedicalAsyncJobPropertiesList")].isNull() && m_comprehend_medical_async_job_properties_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListRxNormInferenceJobsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRxNormInferenceJobsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_comprehend_medical_async_job_properties_list.isSet()) {
        obj.insert(QString("ComprehendMedicalAsyncJobPropertiesList"), ::OpenAPI::toJsonValue(m_comprehend_medical_async_job_properties_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListRxNormInferenceJobsResponse::getComprehendMedicalAsyncJobPropertiesList() const {
    return m_comprehend_medical_async_job_properties_list;
}
void OAIListRxNormInferenceJobsResponse::setComprehendMedicalAsyncJobPropertiesList(const QList &comprehend_medical_async_job_properties_list) {
    m_comprehend_medical_async_job_properties_list = comprehend_medical_async_job_properties_list;
    m_comprehend_medical_async_job_properties_list_isSet = true;
}

bool OAIListRxNormInferenceJobsResponse::is_comprehend_medical_async_job_properties_list_Set() const{
    return m_comprehend_medical_async_job_properties_list_isSet;
}

bool OAIListRxNormInferenceJobsResponse::is_comprehend_medical_async_job_properties_list_Valid() const{
    return m_comprehend_medical_async_job_properties_list_isValid;
}

QString OAIListRxNormInferenceJobsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListRxNormInferenceJobsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListRxNormInferenceJobsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListRxNormInferenceJobsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListRxNormInferenceJobsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comprehend_medical_async_job_properties_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRxNormInferenceJobsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
