/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSNOMEDCTInferenceJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSNOMEDCTInferenceJobResponse::OAIDescribeSNOMEDCTInferenceJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSNOMEDCTInferenceJobResponse::OAIDescribeSNOMEDCTInferenceJobResponse() {
    this->initializeModel();
}

OAIDescribeSNOMEDCTInferenceJobResponse::~OAIDescribeSNOMEDCTInferenceJobResponse() {}

void OAIDescribeSNOMEDCTInferenceJobResponse::initializeModel() {

    m_comprehend_medical_async_job_properties_isSet = false;
    m_comprehend_medical_async_job_properties_isValid = false;
}

void OAIDescribeSNOMEDCTInferenceJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSNOMEDCTInferenceJobResponse::fromJsonObject(QJsonObject json) {

    m_comprehend_medical_async_job_properties_isValid = ::OpenAPI::fromJsonValue(m_comprehend_medical_async_job_properties, json[QString("ComprehendMedicalAsyncJobProperties")]);
    m_comprehend_medical_async_job_properties_isSet = !json[QString("ComprehendMedicalAsyncJobProperties")].isNull() && m_comprehend_medical_async_job_properties_isValid;
}

QString OAIDescribeSNOMEDCTInferenceJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSNOMEDCTInferenceJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_comprehend_medical_async_job_properties.isSet()) {
        obj.insert(QString("ComprehendMedicalAsyncJobProperties"), ::OpenAPI::toJsonValue(m_comprehend_medical_async_job_properties));
    }
    return obj;
}

OAIComprehendMedicalAsyncJobProperties OAIDescribeSNOMEDCTInferenceJobResponse::getComprehendMedicalAsyncJobProperties() const {
    return m_comprehend_medical_async_job_properties;
}
void OAIDescribeSNOMEDCTInferenceJobResponse::setComprehendMedicalAsyncJobProperties(const OAIComprehendMedicalAsyncJobProperties &comprehend_medical_async_job_properties) {
    m_comprehend_medical_async_job_properties = comprehend_medical_async_job_properties;
    m_comprehend_medical_async_job_properties_isSet = true;
}

bool OAIDescribeSNOMEDCTInferenceJobResponse::is_comprehend_medical_async_job_properties_Set() const{
    return m_comprehend_medical_async_job_properties_isSet;
}

bool OAIDescribeSNOMEDCTInferenceJobResponse::is_comprehend_medical_async_job_properties_Valid() const{
    return m_comprehend_medical_async_job_properties_isValid;
}

bool OAIDescribeSNOMEDCTInferenceJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comprehend_medical_async_job_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSNOMEDCTInferenceJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
