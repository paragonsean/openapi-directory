/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIICD10CMEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIICD10CMEntity::OAIICD10CMEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIICD10CMEntity::OAIICD10CMEntity() {
    this->initializeModel();
}

OAIICD10CMEntity::~OAIICD10CMEntity() {}

void OAIICD10CMEntity::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_begin_offset_isSet = false;
    m_begin_offset_isValid = false;

    m_end_offset_isSet = false;
    m_end_offset_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_traits_isSet = false;
    m_traits_isValid = false;

    m_icd10_cm_concepts_isSet = false;
    m_icd10_cm_concepts_isValid = false;
}

void OAIICD10CMEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIICD10CMEntity::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_begin_offset_isValid = ::OpenAPI::fromJsonValue(m_begin_offset, json[QString("BeginOffset")]);
    m_begin_offset_isSet = !json[QString("BeginOffset")].isNull() && m_begin_offset_isValid;

    m_end_offset_isValid = ::OpenAPI::fromJsonValue(m_end_offset, json[QString("EndOffset")]);
    m_end_offset_isSet = !json[QString("EndOffset")].isNull() && m_end_offset_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_traits_isValid = ::OpenAPI::fromJsonValue(m_traits, json[QString("Traits")]);
    m_traits_isSet = !json[QString("Traits")].isNull() && m_traits_isValid;

    m_icd10_cm_concepts_isValid = ::OpenAPI::fromJsonValue(m_icd10_cm_concepts, json[QString("ICD10CMConcepts")]);
    m_icd10_cm_concepts_isSet = !json[QString("ICD10CMConcepts")].isNull() && m_icd10_cm_concepts_isValid;
}

QString OAIICD10CMEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIICD10CMEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_begin_offset_isSet) {
        obj.insert(QString("BeginOffset"), ::OpenAPI::toJsonValue(m_begin_offset));
    }
    if (m_end_offset_isSet) {
        obj.insert(QString("EndOffset"), ::OpenAPI::toJsonValue(m_end_offset));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_traits.isSet()) {
        obj.insert(QString("Traits"), ::OpenAPI::toJsonValue(m_traits));
    }
    if (m_icd10_cm_concepts.isSet()) {
        obj.insert(QString("ICD10CMConcepts"), ::OpenAPI::toJsonValue(m_icd10_cm_concepts));
    }
    return obj;
}

qint32 OAIICD10CMEntity::getId() const {
    return m_id;
}
void OAIICD10CMEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIICD10CMEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIICD10CMEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIICD10CMEntity::getText() const {
    return m_text;
}
void OAIICD10CMEntity::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIICD10CMEntity::is_text_Set() const{
    return m_text_isSet;
}

bool OAIICD10CMEntity::is_text_Valid() const{
    return m_text_isValid;
}

OAIICD10CMEntityCategory OAIICD10CMEntity::getCategory() const {
    return m_category;
}
void OAIICD10CMEntity::setCategory(const OAIICD10CMEntityCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIICD10CMEntity::is_category_Set() const{
    return m_category_isSet;
}

bool OAIICD10CMEntity::is_category_Valid() const{
    return m_category_isValid;
}

OAIICD10CMEntityType OAIICD10CMEntity::getType() const {
    return m_type;
}
void OAIICD10CMEntity::setType(const OAIICD10CMEntityType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIICD10CMEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIICD10CMEntity::is_type_Valid() const{
    return m_type_isValid;
}

float OAIICD10CMEntity::getScore() const {
    return m_score;
}
void OAIICD10CMEntity::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIICD10CMEntity::is_score_Set() const{
    return m_score_isSet;
}

bool OAIICD10CMEntity::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAIICD10CMEntity::getBeginOffset() const {
    return m_begin_offset;
}
void OAIICD10CMEntity::setBeginOffset(const qint32 &begin_offset) {
    m_begin_offset = begin_offset;
    m_begin_offset_isSet = true;
}

bool OAIICD10CMEntity::is_begin_offset_Set() const{
    return m_begin_offset_isSet;
}

bool OAIICD10CMEntity::is_begin_offset_Valid() const{
    return m_begin_offset_isValid;
}

qint32 OAIICD10CMEntity::getEndOffset() const {
    return m_end_offset;
}
void OAIICD10CMEntity::setEndOffset(const qint32 &end_offset) {
    m_end_offset = end_offset;
    m_end_offset_isSet = true;
}

bool OAIICD10CMEntity::is_end_offset_Set() const{
    return m_end_offset_isSet;
}

bool OAIICD10CMEntity::is_end_offset_Valid() const{
    return m_end_offset_isValid;
}

QList OAIICD10CMEntity::getAttributes() const {
    return m_attributes;
}
void OAIICD10CMEntity::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIICD10CMEntity::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIICD10CMEntity::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList OAIICD10CMEntity::getTraits() const {
    return m_traits;
}
void OAIICD10CMEntity::setTraits(const QList &traits) {
    m_traits = traits;
    m_traits_isSet = true;
}

bool OAIICD10CMEntity::is_traits_Set() const{
    return m_traits_isSet;
}

bool OAIICD10CMEntity::is_traits_Valid() const{
    return m_traits_isValid;
}

QList OAIICD10CMEntity::getIcd10CmConcepts() const {
    return m_icd10_cm_concepts;
}
void OAIICD10CMEntity::setIcd10CmConcepts(const QList &icd10_cm_concepts) {
    m_icd10_cm_concepts = icd10_cm_concepts;
    m_icd10_cm_concepts_isSet = true;
}

bool OAIICD10CMEntity::is_icd10_cm_concepts_Set() const{
    return m_icd10_cm_concepts_isSet;
}

bool OAIICD10CMEntity::is_icd10_cm_concepts_Valid() const{
    return m_icd10_cm_concepts_isValid;
}

bool OAIICD10CMEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_traits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icd10_cm_concepts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIICD10CMEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
