/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListICD10CMInferenceJobsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListICD10CMInferenceJobsResponse::OAIListICD10CMInferenceJobsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListICD10CMInferenceJobsResponse::OAIListICD10CMInferenceJobsResponse() {
    this->initializeModel();
}

OAIListICD10CMInferenceJobsResponse::~OAIListICD10CMInferenceJobsResponse() {}

void OAIListICD10CMInferenceJobsResponse::initializeModel() {

    m_comprehend_medical_async_job_properties_list_isSet = false;
    m_comprehend_medical_async_job_properties_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListICD10CMInferenceJobsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListICD10CMInferenceJobsResponse::fromJsonObject(QJsonObject json) {

    m_comprehend_medical_async_job_properties_list_isValid = ::OpenAPI::fromJsonValue(m_comprehend_medical_async_job_properties_list, json[QString("ComprehendMedicalAsyncJobPropertiesList")]);
    m_comprehend_medical_async_job_properties_list_isSet = !json[QString("ComprehendMedicalAsyncJobPropertiesList")].isNull() && m_comprehend_medical_async_job_properties_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListICD10CMInferenceJobsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListICD10CMInferenceJobsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_comprehend_medical_async_job_properties_list.isSet()) {
        obj.insert(QString("ComprehendMedicalAsyncJobPropertiesList"), ::OpenAPI::toJsonValue(m_comprehend_medical_async_job_properties_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListICD10CMInferenceJobsResponse::getComprehendMedicalAsyncJobPropertiesList() const {
    return m_comprehend_medical_async_job_properties_list;
}
void OAIListICD10CMInferenceJobsResponse::setComprehendMedicalAsyncJobPropertiesList(const QList &comprehend_medical_async_job_properties_list) {
    m_comprehend_medical_async_job_properties_list = comprehend_medical_async_job_properties_list;
    m_comprehend_medical_async_job_properties_list_isSet = true;
}

bool OAIListICD10CMInferenceJobsResponse::is_comprehend_medical_async_job_properties_list_Set() const{
    return m_comprehend_medical_async_job_properties_list_isSet;
}

bool OAIListICD10CMInferenceJobsResponse::is_comprehend_medical_async_job_properties_list_Valid() const{
    return m_comprehend_medical_async_job_properties_list_isValid;
}

QString OAIListICD10CMInferenceJobsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListICD10CMInferenceJobsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListICD10CMInferenceJobsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListICD10CMInferenceJobsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListICD10CMInferenceJobsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comprehend_medical_async_job_properties_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListICD10CMInferenceJobsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
