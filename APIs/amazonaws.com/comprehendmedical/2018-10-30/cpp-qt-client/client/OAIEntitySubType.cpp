/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitySubType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitySubType::OAIEntitySubType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitySubType::OAIEntitySubType() {
    this->initializeModel();
}

OAIEntitySubType::~OAIEntitySubType() {}

void OAIEntitySubType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEntitySubType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEntitySubType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DX_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::DX_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOSAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::DOSAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ROUTE_OR_MODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::ROUTE_OR_MODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::FORM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FREQUENCY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::FREQUENCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DURATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::DURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GENERIC_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::GENERIC_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BRAND_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::BRAND_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STRENGTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::STRENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::RATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACUITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::ACUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEST_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TEST_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEST_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TEST_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEST_UNITS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TEST_UNITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEST_UNIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TEST_UNIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROCEDURE_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::PROCEDURE_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TREATMENT_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TREATMENT_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::DATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::AGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTACT_POINT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::CONTACT_POINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PHONE_OR_FAX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::PHONE_OR_FAX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EMAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::EMAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IDENTIFIER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::IDENTIFIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("URL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::URL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADDRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::ADDRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROFESSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::PROFESSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYSTEM_ORGAN_SITE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::SYSTEM_ORGAN_SITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::DIRECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUALITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::QUALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUANTITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::QUANTITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_EXPRESSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TIME_EXPRESSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_TO_MEDICATION_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TIME_TO_MEDICATION_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_TO_DX_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TIME_TO_DX_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_TO_TEST_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TIME_TO_TEST_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_TO_PROCEDURE_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TIME_TO_PROCEDURE_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TIME_TO_TREATMENT_NAME", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TIME_TO_TREATMENT_NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::AMOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GENDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::GENDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RACE_ETHNICITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::RACE_ETHNICITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALLERGIES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::ALLERGIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TOBACCO_USE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::TOBACCO_USE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALCOHOL_CONSUMPTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::ALCOHOL_CONSUMPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REC_DRUG_USE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitySubType::REC_DRUG_USE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEntitySubType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEntitySubType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEntitySubType::NAME:
            val = "NAME";
            break;
        case eOAIEntitySubType::DX_NAME:
            val = "DX_NAME";
            break;
        case eOAIEntitySubType::DOSAGE:
            val = "DOSAGE";
            break;
        case eOAIEntitySubType::ROUTE_OR_MODE:
            val = "ROUTE_OR_MODE";
            break;
        case eOAIEntitySubType::FORM:
            val = "FORM";
            break;
        case eOAIEntitySubType::FREQUENCY:
            val = "FREQUENCY";
            break;
        case eOAIEntitySubType::DURATION:
            val = "DURATION";
            break;
        case eOAIEntitySubType::GENERIC_NAME:
            val = "GENERIC_NAME";
            break;
        case eOAIEntitySubType::BRAND_NAME:
            val = "BRAND_NAME";
            break;
        case eOAIEntitySubType::STRENGTH:
            val = "STRENGTH";
            break;
        case eOAIEntitySubType::RATE:
            val = "RATE";
            break;
        case eOAIEntitySubType::ACUITY:
            val = "ACUITY";
            break;
        case eOAIEntitySubType::TEST_NAME:
            val = "TEST_NAME";
            break;
        case eOAIEntitySubType::TEST_VALUE:
            val = "TEST_VALUE";
            break;
        case eOAIEntitySubType::TEST_UNITS:
            val = "TEST_UNITS";
            break;
        case eOAIEntitySubType::TEST_UNIT:
            val = "TEST_UNIT";
            break;
        case eOAIEntitySubType::PROCEDURE_NAME:
            val = "PROCEDURE_NAME";
            break;
        case eOAIEntitySubType::TREATMENT_NAME:
            val = "TREATMENT_NAME";
            break;
        case eOAIEntitySubType::DATE:
            val = "DATE";
            break;
        case eOAIEntitySubType::AGE:
            val = "AGE";
            break;
        case eOAIEntitySubType::CONTACT_POINT:
            val = "CONTACT_POINT";
            break;
        case eOAIEntitySubType::PHONE_OR_FAX:
            val = "PHONE_OR_FAX";
            break;
        case eOAIEntitySubType::EMAIL:
            val = "EMAIL";
            break;
        case eOAIEntitySubType::IDENTIFIER:
            val = "IDENTIFIER";
            break;
        case eOAIEntitySubType::ID:
            val = "ID";
            break;
        case eOAIEntitySubType::URL:
            val = "URL";
            break;
        case eOAIEntitySubType::ADDRESS:
            val = "ADDRESS";
            break;
        case eOAIEntitySubType::PROFESSION:
            val = "PROFESSION";
            break;
        case eOAIEntitySubType::SYSTEM_ORGAN_SITE:
            val = "SYSTEM_ORGAN_SITE";
            break;
        case eOAIEntitySubType::DIRECTION:
            val = "DIRECTION";
            break;
        case eOAIEntitySubType::QUALITY:
            val = "QUALITY";
            break;
        case eOAIEntitySubType::QUANTITY:
            val = "QUANTITY";
            break;
        case eOAIEntitySubType::TIME_EXPRESSION:
            val = "TIME_EXPRESSION";
            break;
        case eOAIEntitySubType::TIME_TO_MEDICATION_NAME:
            val = "TIME_TO_MEDICATION_NAME";
            break;
        case eOAIEntitySubType::TIME_TO_DX_NAME:
            val = "TIME_TO_DX_NAME";
            break;
        case eOAIEntitySubType::TIME_TO_TEST_NAME:
            val = "TIME_TO_TEST_NAME";
            break;
        case eOAIEntitySubType::TIME_TO_PROCEDURE_NAME:
            val = "TIME_TO_PROCEDURE_NAME";
            break;
        case eOAIEntitySubType::TIME_TO_TREATMENT_NAME:
            val = "TIME_TO_TREATMENT_NAME";
            break;
        case eOAIEntitySubType::AMOUNT:
            val = "AMOUNT";
            break;
        case eOAIEntitySubType::GENDER:
            val = "GENDER";
            break;
        case eOAIEntitySubType::RACE_ETHNICITY:
            val = "RACE_ETHNICITY";
            break;
        case eOAIEntitySubType::ALLERGIES:
            val = "ALLERGIES";
            break;
        case eOAIEntitySubType::TOBACCO_USE:
            val = "TOBACCO_USE";
            break;
        case eOAIEntitySubType::ALCOHOL_CONSUMPTION:
            val = "ALCOHOL_CONSUMPTION";
            break;
        case eOAIEntitySubType::REC_DRUG_USE:
            val = "REC_DRUG_USE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEntitySubType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEntitySubType::eOAIEntitySubType OAIEntitySubType::getValue() const {
    return m_value;
}

void OAIEntitySubType::setValue(const OAIEntitySubType::eOAIEntitySubType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEntitySubType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEntitySubType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
