/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferSNOMEDCTResponse_Characters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferSNOMEDCTResponse_Characters::OAIInferSNOMEDCTResponse_Characters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferSNOMEDCTResponse_Characters::OAIInferSNOMEDCTResponse_Characters() {
    this->initializeModel();
}

OAIInferSNOMEDCTResponse_Characters::~OAIInferSNOMEDCTResponse_Characters() {}

void OAIInferSNOMEDCTResponse_Characters::initializeModel() {

    m_original_text_characters_isSet = false;
    m_original_text_characters_isValid = false;
}

void OAIInferSNOMEDCTResponse_Characters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInferSNOMEDCTResponse_Characters::fromJsonObject(QJsonObject json) {

    m_original_text_characters_isValid = ::OpenAPI::fromJsonValue(m_original_text_characters, json[QString("OriginalTextCharacters")]);
    m_original_text_characters_isSet = !json[QString("OriginalTextCharacters")].isNull() && m_original_text_characters_isValid;
}

QString OAIInferSNOMEDCTResponse_Characters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInferSNOMEDCTResponse_Characters::asJsonObject() const {
    QJsonObject obj;
    if (m_original_text_characters_isSet) {
        obj.insert(QString("OriginalTextCharacters"), ::OpenAPI::toJsonValue(m_original_text_characters));
    }
    return obj;
}

qint32 OAIInferSNOMEDCTResponse_Characters::getOriginalTextCharacters() const {
    return m_original_text_characters;
}
void OAIInferSNOMEDCTResponse_Characters::setOriginalTextCharacters(const qint32 &original_text_characters) {
    m_original_text_characters = original_text_characters;
    m_original_text_characters_isSet = true;
}

bool OAIInferSNOMEDCTResponse_Characters::is_original_text_characters_Set() const{
    return m_original_text_characters_isSet;
}

bool OAIInferSNOMEDCTResponse_Characters::is_original_text_characters_Valid() const{
    return m_original_text_characters_isValid;
}

bool OAIInferSNOMEDCTResponse_Characters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_original_text_characters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInferSNOMEDCTResponse_Characters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
