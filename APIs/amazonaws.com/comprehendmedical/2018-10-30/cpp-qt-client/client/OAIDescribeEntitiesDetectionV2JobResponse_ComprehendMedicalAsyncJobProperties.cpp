/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties() {
    this->initializeModel();
}

OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::~OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties() {}

void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_submit_time_isSet = false;
    m_submit_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_output_data_config_isSet = false;
    m_output_data_config_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_data_access_role_arn_isSet = false;
    m_data_access_role_arn_isValid = false;

    m_manifest_file_path_isSet = false;
    m_manifest_file_path_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;
}

void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_submit_time_isValid = ::OpenAPI::fromJsonValue(m_submit_time, json[QString("SubmitTime")]);
    m_submit_time_isSet = !json[QString("SubmitTime")].isNull() && m_submit_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("ExpirationTime")]);
    m_expiration_time_isSet = !json[QString("ExpirationTime")].isNull() && m_expiration_time_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_output_data_config_isValid = ::OpenAPI::fromJsonValue(m_output_data_config, json[QString("OutputDataConfig")]);
    m_output_data_config_isSet = !json[QString("OutputDataConfig")].isNull() && m_output_data_config_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_data_access_role_arn_isValid = ::OpenAPI::fromJsonValue(m_data_access_role_arn, json[QString("DataAccessRoleArn")]);
    m_data_access_role_arn_isSet = !json[QString("DataAccessRoleArn")].isNull() && m_data_access_role_arn_isValid;

    m_manifest_file_path_isValid = ::OpenAPI::fromJsonValue(m_manifest_file_path, json[QString("ManifestFilePath")]);
    m_manifest_file_path_isSet = !json[QString("ManifestFilePath")].isNull() && m_manifest_file_path_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("KMSKey")]);
    m_kms_key_isSet = !json[QString("KMSKey")].isNull() && m_kms_key_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("ModelVersion")]);
    m_model_version_isSet = !json[QString("ModelVersion")].isNull() && m_model_version_isValid;
}

QString OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_submit_time_isSet) {
        obj.insert(QString("SubmitTime"), ::OpenAPI::toJsonValue(m_submit_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("ExpirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_output_data_config.isSet()) {
        obj.insert(QString("OutputDataConfig"), ::OpenAPI::toJsonValue(m_output_data_config));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_data_access_role_arn_isSet) {
        obj.insert(QString("DataAccessRoleArn"), ::OpenAPI::toJsonValue(m_data_access_role_arn));
    }
    if (m_manifest_file_path_isSet) {
        obj.insert(QString("ManifestFilePath"), ::OpenAPI::toJsonValue(m_manifest_file_path));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("KMSKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_model_version_isSet) {
        obj.insert(QString("ModelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    return obj;
}

QString OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getJobId() const {
    return m_job_id;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getJobName() const {
    return m_job_name;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIJobStatus OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getJobStatus() const {
    return m_job_status;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setJobStatus(const OAIJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_job_status_Valid() const{
    return m_job_status_isValid;
}

QString OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getMessage() const {
    return m_message;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getSubmitTime() const {
    return m_submit_time;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setSubmitTime(const QDateTime &submit_time) {
    m_submit_time = submit_time;
    m_submit_time_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_submit_time_Set() const{
    return m_submit_time_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_submit_time_Valid() const{
    return m_submit_time_isValid;
}

QDateTime OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getEndTime() const {
    return m_end_time;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getExpirationTime() const {
    return m_expiration_time;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

OAIComprehendMedicalAsyncJobProperties_InputDataConfig OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getInputDataConfig() const {
    return m_input_data_config;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setInputDataConfig(const OAIComprehendMedicalAsyncJobProperties_InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAIComprehendMedicalAsyncJobProperties_OutputDataConfig OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getOutputDataConfig() const {
    return m_output_data_config;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setOutputDataConfig(const OAIComprehendMedicalAsyncJobProperties_OutputDataConfig &output_data_config) {
    m_output_data_config = output_data_config;
    m_output_data_config_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_output_data_config_Set() const{
    return m_output_data_config_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_output_data_config_Valid() const{
    return m_output_data_config_isValid;
}

OAILanguageCode OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getLanguageCode() const {
    return m_language_code;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getDataAccessRoleArn() const {
    return m_data_access_role_arn;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setDataAccessRoleArn(const QString &data_access_role_arn) {
    m_data_access_role_arn = data_access_role_arn;
    m_data_access_role_arn_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_data_access_role_arn_Set() const{
    return m_data_access_role_arn_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_data_access_role_arn_Valid() const{
    return m_data_access_role_arn_isValid;
}

QString OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getManifestFilePath() const {
    return m_manifest_file_path;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setManifestFilePath(const QString &manifest_file_path) {
    m_manifest_file_path = manifest_file_path;
    m_manifest_file_path_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_manifest_file_path_Set() const{
    return m_manifest_file_path_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_manifest_file_path_Valid() const{
    return m_manifest_file_path_isValid;
}

QString OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getKmsKey() const {
    return m_kms_key;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

QString OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::getModelVersion() const {
    return m_model_version;
}
void OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::is_model_version_Valid() const{
    return m_model_version_isValid;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_access_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEntitiesDetectionV2JobResponse_ComprehendMedicalAsyncJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
