/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDescribeEntitiesDetectionV2JobRequest.h"
#include "OAIDescribeEntitiesDetectionV2JobResponse.h"
#include "OAIDescribeICD10CMInferenceJobRequest.h"
#include "OAIDescribeICD10CMInferenceJobResponse.h"
#include "OAIDescribePHIDetectionJobRequest.h"
#include "OAIDescribePHIDetectionJobResponse.h"
#include "OAIDescribeRxNormInferenceJobRequest.h"
#include "OAIDescribeRxNormInferenceJobResponse.h"
#include "OAIDescribeSNOMEDCTInferenceJobRequest.h"
#include "OAIDescribeSNOMEDCTInferenceJobResponse.h"
#include "OAIDetectEntitiesRequest.h"
#include "OAIDetectEntitiesResponse.h"
#include "OAIDetectEntitiesV2Request.h"
#include "OAIDetectEntitiesV2Response.h"
#include "OAIDetectPHIRequest.h"
#include "OAIDetectPHIResponse.h"
#include "OAIInferICD10CMRequest.h"
#include "OAIInferICD10CMResponse.h"
#include "OAIInferRxNormRequest.h"
#include "OAIInferRxNormResponse.h"
#include "OAIInferSNOMEDCTRequest.h"
#include "OAIInferSNOMEDCTResponse.h"
#include "OAIListEntitiesDetectionV2JobsRequest.h"
#include "OAIListEntitiesDetectionV2JobsResponse.h"
#include "OAIListICD10CMInferenceJobsRequest.h"
#include "OAIListICD10CMInferenceJobsResponse.h"
#include "OAIListPHIDetectionJobsRequest.h"
#include "OAIListPHIDetectionJobsResponse.h"
#include "OAIListRxNormInferenceJobsRequest.h"
#include "OAIListRxNormInferenceJobsResponse.h"
#include "OAIListSNOMEDCTInferenceJobsRequest.h"
#include "OAIListSNOMEDCTInferenceJobsResponse.h"
#include "OAIStartEntitiesDetectionV2JobRequest.h"
#include "OAIStartEntitiesDetectionV2JobResponse.h"
#include "OAIStartICD10CMInferenceJobRequest.h"
#include "OAIStartICD10CMInferenceJobResponse.h"
#include "OAIStartPHIDetectionJobRequest.h"
#include "OAIStartPHIDetectionJobResponse.h"
#include "OAIStartRxNormInferenceJobRequest.h"
#include "OAIStartRxNormInferenceJobResponse.h"
#include "OAIStartSNOMEDCTInferenceJobRequest.h"
#include "OAIStartSNOMEDCTInferenceJobResponse.h"
#include "OAIStopEntitiesDetectionV2JobRequest.h"
#include "OAIStopEntitiesDetectionV2JobResponse.h"
#include "OAIStopICD10CMInferenceJobRequest.h"
#include "OAIStopICD10CMInferenceJobResponse.h"
#include "OAIStopPHIDetectionJobRequest.h"
#include "OAIStopPHIDetectionJobResponse.h"
#include "OAIStopRxNormInferenceJobRequest.h"
#include "OAIStopRxNormInferenceJobResponse.h"
#include "OAIStopSNOMEDCTInferenceJobRequest.h"
#include "OAIStopSNOMEDCTInferenceJobResponse.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_entities_detection_v2_job_request OAIDescribeEntitiesDetectionV2JobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeEntitiesDetectionV2Job(const QString &x_amz_target, const OAIDescribeEntitiesDetectionV2JobRequest &oai_describe_entities_detection_v2_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_icd10_cm_inference_job_request OAIDescribeICD10CMInferenceJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeICD10CMInferenceJob(const QString &x_amz_target, const OAIDescribeICD10CMInferenceJobRequest &oai_describe_icd10_cm_inference_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_phi_detection_job_request OAIDescribePHIDetectionJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describePHIDetectionJob(const QString &x_amz_target, const OAIDescribePHIDetectionJobRequest &oai_describe_phi_detection_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_rx_norm_inference_job_request OAIDescribeRxNormInferenceJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeRxNormInferenceJob(const QString &x_amz_target, const OAIDescribeRxNormInferenceJobRequest &oai_describe_rx_norm_inference_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_snomedct_inference_job_request OAIDescribeSNOMEDCTInferenceJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeSNOMEDCTInferenceJob(const QString &x_amz_target, const OAIDescribeSNOMEDCTInferenceJobRequest &oai_describe_snomedct_inference_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_detect_entities_request OAIDetectEntitiesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void detectEntities(const QString &x_amz_target, const OAIDetectEntitiesRequest &oai_detect_entities_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_detect_entities_v2_request OAIDetectEntitiesV2Request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void detectEntitiesV2(const QString &x_amz_target, const OAIDetectEntitiesV2Request &oai_detect_entities_v2_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_detect_phi_request OAIDetectPHIRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void detectPHI(const QString &x_amz_target, const OAIDetectPHIRequest &oai_detect_phi_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_infer_icd10_cm_request OAIInferICD10CMRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void inferICD10CM(const QString &x_amz_target, const OAIInferICD10CMRequest &oai_infer_icd10_cm_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_infer_rx_norm_request OAIInferRxNormRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void inferRxNorm(const QString &x_amz_target, const OAIInferRxNormRequest &oai_infer_rx_norm_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_infer_snomedct_request OAIInferSNOMEDCTRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void inferSNOMEDCT(const QString &x_amz_target, const OAIInferSNOMEDCTRequest &oai_infer_snomedct_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_entities_detection_v2_jobs_request OAIListEntitiesDetectionV2JobsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listEntitiesDetectionV2Jobs(const QString &x_amz_target, const OAIListEntitiesDetectionV2JobsRequest &oai_list_entities_detection_v2_jobs_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_icd10_cm_inference_jobs_request OAIListICD10CMInferenceJobsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listICD10CMInferenceJobs(const QString &x_amz_target, const OAIListICD10CMInferenceJobsRequest &oai_list_icd10_cm_inference_jobs_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_phi_detection_jobs_request OAIListPHIDetectionJobsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listPHIDetectionJobs(const QString &x_amz_target, const OAIListPHIDetectionJobsRequest &oai_list_phi_detection_jobs_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_rx_norm_inference_jobs_request OAIListRxNormInferenceJobsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listRxNormInferenceJobs(const QString &x_amz_target, const OAIListRxNormInferenceJobsRequest &oai_list_rx_norm_inference_jobs_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_snomedct_inference_jobs_request OAIListSNOMEDCTInferenceJobsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listSNOMEDCTInferenceJobs(const QString &x_amz_target, const OAIListSNOMEDCTInferenceJobsRequest &oai_list_snomedct_inference_jobs_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_entities_detection_v2_job_request OAIStartEntitiesDetectionV2JobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startEntitiesDetectionV2Job(const QString &x_amz_target, const OAIStartEntitiesDetectionV2JobRequest &oai_start_entities_detection_v2_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_icd10_cm_inference_job_request OAIStartICD10CMInferenceJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startICD10CMInferenceJob(const QString &x_amz_target, const OAIStartICD10CMInferenceJobRequest &oai_start_icd10_cm_inference_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_phi_detection_job_request OAIStartPHIDetectionJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startPHIDetectionJob(const QString &x_amz_target, const OAIStartPHIDetectionJobRequest &oai_start_phi_detection_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_rx_norm_inference_job_request OAIStartRxNormInferenceJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startRxNormInferenceJob(const QString &x_amz_target, const OAIStartRxNormInferenceJobRequest &oai_start_rx_norm_inference_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_snomedct_inference_job_request OAIStartSNOMEDCTInferenceJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startSNOMEDCTInferenceJob(const QString &x_amz_target, const OAIStartSNOMEDCTInferenceJobRequest &oai_start_snomedct_inference_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_stop_entities_detection_v2_job_request OAIStopEntitiesDetectionV2JobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void stopEntitiesDetectionV2Job(const QString &x_amz_target, const OAIStopEntitiesDetectionV2JobRequest &oai_stop_entities_detection_v2_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_stop_icd10_cm_inference_job_request OAIStopICD10CMInferenceJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void stopICD10CMInferenceJob(const QString &x_amz_target, const OAIStopICD10CMInferenceJobRequest &oai_stop_icd10_cm_inference_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_stop_phi_detection_job_request OAIStopPHIDetectionJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void stopPHIDetectionJob(const QString &x_amz_target, const OAIStopPHIDetectionJobRequest &oai_stop_phi_detection_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_stop_rx_norm_inference_job_request OAIStopRxNormInferenceJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void stopRxNormInferenceJob(const QString &x_amz_target, const OAIStopRxNormInferenceJobRequest &oai_stop_rx_norm_inference_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_stop_snomedct_inference_job_request OAIStopSNOMEDCTInferenceJobRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void stopSNOMEDCTInferenceJob(const QString &x_amz_target, const OAIStopSNOMEDCTInferenceJobRequest &oai_stop_snomedct_inference_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void describeEntitiesDetectionV2JobCallback(OAIHttpRequestWorker *worker);
    void describeICD10CMInferenceJobCallback(OAIHttpRequestWorker *worker);
    void describePHIDetectionJobCallback(OAIHttpRequestWorker *worker);
    void describeRxNormInferenceJobCallback(OAIHttpRequestWorker *worker);
    void describeSNOMEDCTInferenceJobCallback(OAIHttpRequestWorker *worker);
    void detectEntitiesCallback(OAIHttpRequestWorker *worker);
    void detectEntitiesV2Callback(OAIHttpRequestWorker *worker);
    void detectPHICallback(OAIHttpRequestWorker *worker);
    void inferICD10CMCallback(OAIHttpRequestWorker *worker);
    void inferRxNormCallback(OAIHttpRequestWorker *worker);
    void inferSNOMEDCTCallback(OAIHttpRequestWorker *worker);
    void listEntitiesDetectionV2JobsCallback(OAIHttpRequestWorker *worker);
    void listICD10CMInferenceJobsCallback(OAIHttpRequestWorker *worker);
    void listPHIDetectionJobsCallback(OAIHttpRequestWorker *worker);
    void listRxNormInferenceJobsCallback(OAIHttpRequestWorker *worker);
    void listSNOMEDCTInferenceJobsCallback(OAIHttpRequestWorker *worker);
    void startEntitiesDetectionV2JobCallback(OAIHttpRequestWorker *worker);
    void startICD10CMInferenceJobCallback(OAIHttpRequestWorker *worker);
    void startPHIDetectionJobCallback(OAIHttpRequestWorker *worker);
    void startRxNormInferenceJobCallback(OAIHttpRequestWorker *worker);
    void startSNOMEDCTInferenceJobCallback(OAIHttpRequestWorker *worker);
    void stopEntitiesDetectionV2JobCallback(OAIHttpRequestWorker *worker);
    void stopICD10CMInferenceJobCallback(OAIHttpRequestWorker *worker);
    void stopPHIDetectionJobCallback(OAIHttpRequestWorker *worker);
    void stopRxNormInferenceJobCallback(OAIHttpRequestWorker *worker);
    void stopSNOMEDCTInferenceJobCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void describeEntitiesDetectionV2JobSignal(OAIDescribeEntitiesDetectionV2JobResponse summary);
    void describeICD10CMInferenceJobSignal(OAIDescribeICD10CMInferenceJobResponse summary);
    void describePHIDetectionJobSignal(OAIDescribePHIDetectionJobResponse summary);
    void describeRxNormInferenceJobSignal(OAIDescribeRxNormInferenceJobResponse summary);
    void describeSNOMEDCTInferenceJobSignal(OAIDescribeSNOMEDCTInferenceJobResponse summary);
    void detectEntitiesSignal(OAIDetectEntitiesResponse summary);
    void detectEntitiesV2Signal(OAIDetectEntitiesV2Response summary);
    void detectPHISignal(OAIDetectPHIResponse summary);
    void inferICD10CMSignal(OAIInferICD10CMResponse summary);
    void inferRxNormSignal(OAIInferRxNormResponse summary);
    void inferSNOMEDCTSignal(OAIInferSNOMEDCTResponse summary);
    void listEntitiesDetectionV2JobsSignal(OAIListEntitiesDetectionV2JobsResponse summary);
    void listICD10CMInferenceJobsSignal(OAIListICD10CMInferenceJobsResponse summary);
    void listPHIDetectionJobsSignal(OAIListPHIDetectionJobsResponse summary);
    void listRxNormInferenceJobsSignal(OAIListRxNormInferenceJobsResponse summary);
    void listSNOMEDCTInferenceJobsSignal(OAIListSNOMEDCTInferenceJobsResponse summary);
    void startEntitiesDetectionV2JobSignal(OAIStartEntitiesDetectionV2JobResponse summary);
    void startICD10CMInferenceJobSignal(OAIStartICD10CMInferenceJobResponse summary);
    void startPHIDetectionJobSignal(OAIStartPHIDetectionJobResponse summary);
    void startRxNormInferenceJobSignal(OAIStartRxNormInferenceJobResponse summary);
    void startSNOMEDCTInferenceJobSignal(OAIStartSNOMEDCTInferenceJobResponse summary);
    void stopEntitiesDetectionV2JobSignal(OAIStopEntitiesDetectionV2JobResponse summary);
    void stopICD10CMInferenceJobSignal(OAIStopICD10CMInferenceJobResponse summary);
    void stopPHIDetectionJobSignal(OAIStopPHIDetectionJobResponse summary);
    void stopRxNormInferenceJobSignal(OAIStopRxNormInferenceJobResponse summary);
    void stopSNOMEDCTInferenceJobSignal(OAIStopSNOMEDCTInferenceJobResponse summary);


    void describeEntitiesDetectionV2JobSignalFull(OAIHttpRequestWorker *worker, OAIDescribeEntitiesDetectionV2JobResponse summary);
    void describeICD10CMInferenceJobSignalFull(OAIHttpRequestWorker *worker, OAIDescribeICD10CMInferenceJobResponse summary);
    void describePHIDetectionJobSignalFull(OAIHttpRequestWorker *worker, OAIDescribePHIDetectionJobResponse summary);
    void describeRxNormInferenceJobSignalFull(OAIHttpRequestWorker *worker, OAIDescribeRxNormInferenceJobResponse summary);
    void describeSNOMEDCTInferenceJobSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSNOMEDCTInferenceJobResponse summary);
    void detectEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIDetectEntitiesResponse summary);
    void detectEntitiesV2SignalFull(OAIHttpRequestWorker *worker, OAIDetectEntitiesV2Response summary);
    void detectPHISignalFull(OAIHttpRequestWorker *worker, OAIDetectPHIResponse summary);
    void inferICD10CMSignalFull(OAIHttpRequestWorker *worker, OAIInferICD10CMResponse summary);
    void inferRxNormSignalFull(OAIHttpRequestWorker *worker, OAIInferRxNormResponse summary);
    void inferSNOMEDCTSignalFull(OAIHttpRequestWorker *worker, OAIInferSNOMEDCTResponse summary);
    void listEntitiesDetectionV2JobsSignalFull(OAIHttpRequestWorker *worker, OAIListEntitiesDetectionV2JobsResponse summary);
    void listICD10CMInferenceJobsSignalFull(OAIHttpRequestWorker *worker, OAIListICD10CMInferenceJobsResponse summary);
    void listPHIDetectionJobsSignalFull(OAIHttpRequestWorker *worker, OAIListPHIDetectionJobsResponse summary);
    void listRxNormInferenceJobsSignalFull(OAIHttpRequestWorker *worker, OAIListRxNormInferenceJobsResponse summary);
    void listSNOMEDCTInferenceJobsSignalFull(OAIHttpRequestWorker *worker, OAIListSNOMEDCTInferenceJobsResponse summary);
    void startEntitiesDetectionV2JobSignalFull(OAIHttpRequestWorker *worker, OAIStartEntitiesDetectionV2JobResponse summary);
    void startICD10CMInferenceJobSignalFull(OAIHttpRequestWorker *worker, OAIStartICD10CMInferenceJobResponse summary);
    void startPHIDetectionJobSignalFull(OAIHttpRequestWorker *worker, OAIStartPHIDetectionJobResponse summary);
    void startRxNormInferenceJobSignalFull(OAIHttpRequestWorker *worker, OAIStartRxNormInferenceJobResponse summary);
    void startSNOMEDCTInferenceJobSignalFull(OAIHttpRequestWorker *worker, OAIStartSNOMEDCTInferenceJobResponse summary);
    void stopEntitiesDetectionV2JobSignalFull(OAIHttpRequestWorker *worker, OAIStopEntitiesDetectionV2JobResponse summary);
    void stopICD10CMInferenceJobSignalFull(OAIHttpRequestWorker *worker, OAIStopICD10CMInferenceJobResponse summary);
    void stopPHIDetectionJobSignalFull(OAIHttpRequestWorker *worker, OAIStopPHIDetectionJobResponse summary);
    void stopRxNormInferenceJobSignalFull(OAIHttpRequestWorker *worker, OAIStopRxNormInferenceJobResponse summary);
    void stopSNOMEDCTInferenceJobSignalFull(OAIHttpRequestWorker *worker, OAIStopSNOMEDCTInferenceJobResponse summary);

    Q_DECL_DEPRECATED_X("Use describeEntitiesDetectionV2JobSignalError() instead")
    void describeEntitiesDetectionV2JobSignalE(OAIDescribeEntitiesDetectionV2JobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeEntitiesDetectionV2JobSignalError(OAIDescribeEntitiesDetectionV2JobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeICD10CMInferenceJobSignalError() instead")
    void describeICD10CMInferenceJobSignalE(OAIDescribeICD10CMInferenceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeICD10CMInferenceJobSignalError(OAIDescribeICD10CMInferenceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePHIDetectionJobSignalError() instead")
    void describePHIDetectionJobSignalE(OAIDescribePHIDetectionJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describePHIDetectionJobSignalError(OAIDescribePHIDetectionJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeRxNormInferenceJobSignalError() instead")
    void describeRxNormInferenceJobSignalE(OAIDescribeRxNormInferenceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeRxNormInferenceJobSignalError(OAIDescribeRxNormInferenceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSNOMEDCTInferenceJobSignalError() instead")
    void describeSNOMEDCTInferenceJobSignalE(OAIDescribeSNOMEDCTInferenceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSNOMEDCTInferenceJobSignalError(OAIDescribeSNOMEDCTInferenceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectEntitiesSignalError() instead")
    void detectEntitiesSignalE(OAIDetectEntitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectEntitiesSignalError(OAIDetectEntitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectEntitiesV2SignalError() instead")
    void detectEntitiesV2SignalE(OAIDetectEntitiesV2Response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectEntitiesV2SignalError(OAIDetectEntitiesV2Response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectPHISignalError() instead")
    void detectPHISignalE(OAIDetectPHIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectPHISignalError(OAIDetectPHIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inferICD10CMSignalError() instead")
    void inferICD10CMSignalE(OAIInferICD10CMResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inferICD10CMSignalError(OAIInferICD10CMResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inferRxNormSignalError() instead")
    void inferRxNormSignalE(OAIInferRxNormResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inferRxNormSignalError(OAIInferRxNormResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inferSNOMEDCTSignalError() instead")
    void inferSNOMEDCTSignalE(OAIInferSNOMEDCTResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inferSNOMEDCTSignalError(OAIInferSNOMEDCTResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEntitiesDetectionV2JobsSignalError() instead")
    void listEntitiesDetectionV2JobsSignalE(OAIListEntitiesDetectionV2JobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEntitiesDetectionV2JobsSignalError(OAIListEntitiesDetectionV2JobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listICD10CMInferenceJobsSignalError() instead")
    void listICD10CMInferenceJobsSignalE(OAIListICD10CMInferenceJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listICD10CMInferenceJobsSignalError(OAIListICD10CMInferenceJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPHIDetectionJobsSignalError() instead")
    void listPHIDetectionJobsSignalE(OAIListPHIDetectionJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPHIDetectionJobsSignalError(OAIListPHIDetectionJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRxNormInferenceJobsSignalError() instead")
    void listRxNormInferenceJobsSignalE(OAIListRxNormInferenceJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRxNormInferenceJobsSignalError(OAIListRxNormInferenceJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSNOMEDCTInferenceJobsSignalError() instead")
    void listSNOMEDCTInferenceJobsSignalE(OAIListSNOMEDCTInferenceJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSNOMEDCTInferenceJobsSignalError(OAIListSNOMEDCTInferenceJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startEntitiesDetectionV2JobSignalError() instead")
    void startEntitiesDetectionV2JobSignalE(OAIStartEntitiesDetectionV2JobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startEntitiesDetectionV2JobSignalError(OAIStartEntitiesDetectionV2JobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startICD10CMInferenceJobSignalError() instead")
    void startICD10CMInferenceJobSignalE(OAIStartICD10CMInferenceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startICD10CMInferenceJobSignalError(OAIStartICD10CMInferenceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startPHIDetectionJobSignalError() instead")
    void startPHIDetectionJobSignalE(OAIStartPHIDetectionJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startPHIDetectionJobSignalError(OAIStartPHIDetectionJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startRxNormInferenceJobSignalError() instead")
    void startRxNormInferenceJobSignalE(OAIStartRxNormInferenceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startRxNormInferenceJobSignalError(OAIStartRxNormInferenceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSNOMEDCTInferenceJobSignalError() instead")
    void startSNOMEDCTInferenceJobSignalE(OAIStartSNOMEDCTInferenceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startSNOMEDCTInferenceJobSignalError(OAIStartSNOMEDCTInferenceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopEntitiesDetectionV2JobSignalError() instead")
    void stopEntitiesDetectionV2JobSignalE(OAIStopEntitiesDetectionV2JobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopEntitiesDetectionV2JobSignalError(OAIStopEntitiesDetectionV2JobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopICD10CMInferenceJobSignalError() instead")
    void stopICD10CMInferenceJobSignalE(OAIStopICD10CMInferenceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopICD10CMInferenceJobSignalError(OAIStopICD10CMInferenceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPHIDetectionJobSignalError() instead")
    void stopPHIDetectionJobSignalE(OAIStopPHIDetectionJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPHIDetectionJobSignalError(OAIStopPHIDetectionJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopRxNormInferenceJobSignalError() instead")
    void stopRxNormInferenceJobSignalE(OAIStopRxNormInferenceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopRxNormInferenceJobSignalError(OAIStopRxNormInferenceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSNOMEDCTInferenceJobSignalError() instead")
    void stopSNOMEDCTInferenceJobSignalE(OAIStopSNOMEDCTInferenceJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSNOMEDCTInferenceJobSignalError(OAIStopSNOMEDCTInferenceJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use describeEntitiesDetectionV2JobSignalErrorFull() instead")
    void describeEntitiesDetectionV2JobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeEntitiesDetectionV2JobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeICD10CMInferenceJobSignalErrorFull() instead")
    void describeICD10CMInferenceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeICD10CMInferenceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describePHIDetectionJobSignalErrorFull() instead")
    void describePHIDetectionJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describePHIDetectionJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeRxNormInferenceJobSignalErrorFull() instead")
    void describeRxNormInferenceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeRxNormInferenceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSNOMEDCTInferenceJobSignalErrorFull() instead")
    void describeSNOMEDCTInferenceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSNOMEDCTInferenceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectEntitiesSignalErrorFull() instead")
    void detectEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectEntitiesV2SignalErrorFull() instead")
    void detectEntitiesV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectEntitiesV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectPHISignalErrorFull() instead")
    void detectPHISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectPHISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inferICD10CMSignalErrorFull() instead")
    void inferICD10CMSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inferICD10CMSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inferRxNormSignalErrorFull() instead")
    void inferRxNormSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inferRxNormSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inferSNOMEDCTSignalErrorFull() instead")
    void inferSNOMEDCTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inferSNOMEDCTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEntitiesDetectionV2JobsSignalErrorFull() instead")
    void listEntitiesDetectionV2JobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEntitiesDetectionV2JobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listICD10CMInferenceJobsSignalErrorFull() instead")
    void listICD10CMInferenceJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listICD10CMInferenceJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPHIDetectionJobsSignalErrorFull() instead")
    void listPHIDetectionJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPHIDetectionJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRxNormInferenceJobsSignalErrorFull() instead")
    void listRxNormInferenceJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRxNormInferenceJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSNOMEDCTInferenceJobsSignalErrorFull() instead")
    void listSNOMEDCTInferenceJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSNOMEDCTInferenceJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startEntitiesDetectionV2JobSignalErrorFull() instead")
    void startEntitiesDetectionV2JobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startEntitiesDetectionV2JobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startICD10CMInferenceJobSignalErrorFull() instead")
    void startICD10CMInferenceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startICD10CMInferenceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startPHIDetectionJobSignalErrorFull() instead")
    void startPHIDetectionJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startPHIDetectionJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startRxNormInferenceJobSignalErrorFull() instead")
    void startRxNormInferenceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startRxNormInferenceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSNOMEDCTInferenceJobSignalErrorFull() instead")
    void startSNOMEDCTInferenceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSNOMEDCTInferenceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopEntitiesDetectionV2JobSignalErrorFull() instead")
    void stopEntitiesDetectionV2JobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopEntitiesDetectionV2JobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopICD10CMInferenceJobSignalErrorFull() instead")
    void stopICD10CMInferenceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopICD10CMInferenceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopPHIDetectionJobSignalErrorFull() instead")
    void stopPHIDetectionJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopPHIDetectionJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopRxNormInferenceJobSignalErrorFull() instead")
    void stopRxNormInferenceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopRxNormInferenceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSNOMEDCTInferenceJobSignalErrorFull() instead")
    void stopSNOMEDCTInferenceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSNOMEDCTInferenceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
