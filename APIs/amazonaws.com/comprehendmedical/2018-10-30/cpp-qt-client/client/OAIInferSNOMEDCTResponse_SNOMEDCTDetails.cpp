/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInferSNOMEDCTResponse_SNOMEDCTDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInferSNOMEDCTResponse_SNOMEDCTDetails::OAIInferSNOMEDCTResponse_SNOMEDCTDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInferSNOMEDCTResponse_SNOMEDCTDetails::OAIInferSNOMEDCTResponse_SNOMEDCTDetails() {
    this->initializeModel();
}

OAIInferSNOMEDCTResponse_SNOMEDCTDetails::~OAIInferSNOMEDCTResponse_SNOMEDCTDetails() {}

void OAIInferSNOMEDCTResponse_SNOMEDCTDetails::initializeModel() {

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_version_date_isSet = false;
    m_version_date_isValid = false;
}

void OAIInferSNOMEDCTResponse_SNOMEDCTDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInferSNOMEDCTResponse_SNOMEDCTDetails::fromJsonObject(QJsonObject json) {

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("Edition")]);
    m_edition_isSet = !json[QString("Edition")].isNull() && m_edition_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_version_date_isValid = ::OpenAPI::fromJsonValue(m_version_date, json[QString("VersionDate")]);
    m_version_date_isSet = !json[QString("VersionDate")].isNull() && m_version_date_isValid;
}

QString OAIInferSNOMEDCTResponse_SNOMEDCTDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInferSNOMEDCTResponse_SNOMEDCTDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_edition_isSet) {
        obj.insert(QString("Edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_version_date_isSet) {
        obj.insert(QString("VersionDate"), ::OpenAPI::toJsonValue(m_version_date));
    }
    return obj;
}

QString OAIInferSNOMEDCTResponse_SNOMEDCTDetails::getEdition() const {
    return m_edition;
}
void OAIInferSNOMEDCTResponse_SNOMEDCTDetails::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIInferSNOMEDCTResponse_SNOMEDCTDetails::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIInferSNOMEDCTResponse_SNOMEDCTDetails::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAIInferSNOMEDCTResponse_SNOMEDCTDetails::getLanguage() const {
    return m_language;
}
void OAIInferSNOMEDCTResponse_SNOMEDCTDetails::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIInferSNOMEDCTResponse_SNOMEDCTDetails::is_language_Set() const{
    return m_language_isSet;
}

bool OAIInferSNOMEDCTResponse_SNOMEDCTDetails::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIInferSNOMEDCTResponse_SNOMEDCTDetails::getVersionDate() const {
    return m_version_date;
}
void OAIInferSNOMEDCTResponse_SNOMEDCTDetails::setVersionDate(const QString &version_date) {
    m_version_date = version_date;
    m_version_date_isSet = true;
}

bool OAIInferSNOMEDCTResponse_SNOMEDCTDetails::is_version_date_Set() const{
    return m_version_date_isSet;
}

bool OAIInferSNOMEDCTResponse_SNOMEDCTDetails::is_version_date_Valid() const{
    return m_version_date_isValid;
}

bool OAIInferSNOMEDCTResponse_SNOMEDCTDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInferSNOMEDCTResponse_SNOMEDCTDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
