/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIICD10CMEntity.h
 *
 * The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Amazon Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned. 
 */

#ifndef OAIICD10CMEntity_H
#define OAIICD10CMEntity_H

#include <QJsonObject>

#include "OAIICD10CMEntityCategory.h"
#include "OAIICD10CMEntityType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIICD10CMEntity : public OAIObject {
public:
    OAIICD10CMEntity();
    OAIICD10CMEntity(QString json);
    ~OAIICD10CMEntity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    OAIICD10CMEntityCategory getCategory() const;
    void setCategory(const OAIICD10CMEntityCategory &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAIICD10CMEntityType getType() const;
    void setType(const OAIICD10CMEntityType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    float getScore() const;
    void setScore(const float &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    qint32 getBeginOffset() const;
    void setBeginOffset(const qint32 &begin_offset);
    bool is_begin_offset_Set() const;
    bool is_begin_offset_Valid() const;

    qint32 getEndOffset() const;
    void setEndOffset(const qint32 &end_offset);
    bool is_end_offset_Set() const;
    bool is_end_offset_Valid() const;

    QList getAttributes() const;
    void setAttributes(const QList &attributes);
    bool is_attributes_Set() const;
    bool is_attributes_Valid() const;

    QList getTraits() const;
    void setTraits(const QList &traits);
    bool is_traits_Set() const;
    bool is_traits_Valid() const;

    QList getIcd10CmConcepts() const;
    void setIcd10CmConcepts(const QList &icd10_cm_concepts);
    bool is_icd10_cm_concepts_Set() const;
    bool is_icd10_cm_concepts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    OAIICD10CMEntityCategory m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAIICD10CMEntityType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    float m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    qint32 m_begin_offset;
    bool m_begin_offset_isSet;
    bool m_begin_offset_isValid;

    qint32 m_end_offset;
    bool m_end_offset_isSet;
    bool m_end_offset_isValid;

    QList m_attributes;
    bool m_attributes_isSet;
    bool m_attributes_isValid;

    QList m_traits;
    bool m_traits_isSet;
    bool m_traits_isValid;

    QList m_icd10_cm_concepts;
    bool m_icd10_cm_concepts_isSet;
    bool m_icd10_cm_concepts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIICD10CMEntity)

#endif // OAIICD10CMEntity_H
