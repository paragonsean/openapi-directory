/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEntitiesDetectionV2JobsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEntitiesDetectionV2JobsResponse::OAIListEntitiesDetectionV2JobsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEntitiesDetectionV2JobsResponse::OAIListEntitiesDetectionV2JobsResponse() {
    this->initializeModel();
}

OAIListEntitiesDetectionV2JobsResponse::~OAIListEntitiesDetectionV2JobsResponse() {}

void OAIListEntitiesDetectionV2JobsResponse::initializeModel() {

    m_comprehend_medical_async_job_properties_list_isSet = false;
    m_comprehend_medical_async_job_properties_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListEntitiesDetectionV2JobsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEntitiesDetectionV2JobsResponse::fromJsonObject(QJsonObject json) {

    m_comprehend_medical_async_job_properties_list_isValid = ::OpenAPI::fromJsonValue(m_comprehend_medical_async_job_properties_list, json[QString("ComprehendMedicalAsyncJobPropertiesList")]);
    m_comprehend_medical_async_job_properties_list_isSet = !json[QString("ComprehendMedicalAsyncJobPropertiesList")].isNull() && m_comprehend_medical_async_job_properties_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListEntitiesDetectionV2JobsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEntitiesDetectionV2JobsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_comprehend_medical_async_job_properties_list.isSet()) {
        obj.insert(QString("ComprehendMedicalAsyncJobPropertiesList"), ::OpenAPI::toJsonValue(m_comprehend_medical_async_job_properties_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListEntitiesDetectionV2JobsResponse::getComprehendMedicalAsyncJobPropertiesList() const {
    return m_comprehend_medical_async_job_properties_list;
}
void OAIListEntitiesDetectionV2JobsResponse::setComprehendMedicalAsyncJobPropertiesList(const QList &comprehend_medical_async_job_properties_list) {
    m_comprehend_medical_async_job_properties_list = comprehend_medical_async_job_properties_list;
    m_comprehend_medical_async_job_properties_list_isSet = true;
}

bool OAIListEntitiesDetectionV2JobsResponse::is_comprehend_medical_async_job_properties_list_Set() const{
    return m_comprehend_medical_async_job_properties_list_isSet;
}

bool OAIListEntitiesDetectionV2JobsResponse::is_comprehend_medical_async_job_properties_list_Valid() const{
    return m_comprehend_medical_async_job_properties_list_isValid;
}

QString OAIListEntitiesDetectionV2JobsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListEntitiesDetectionV2JobsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListEntitiesDetectionV2JobsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListEntitiesDetectionV2JobsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListEntitiesDetectionV2JobsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comprehend_medical_async_job_properties_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEntitiesDetectionV2JobsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
