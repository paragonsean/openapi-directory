/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIICD10CMConcept.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIICD10CMConcept::OAIICD10CMConcept(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIICD10CMConcept::OAIICD10CMConcept() {
    this->initializeModel();
}

OAIICD10CMConcept::~OAIICD10CMConcept() {}

void OAIICD10CMConcept::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIICD10CMConcept::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIICD10CMConcept::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;
}

QString OAIICD10CMConcept::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIICD10CMConcept::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAIICD10CMConcept::getDescription() const {
    return m_description;
}
void OAIICD10CMConcept::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIICD10CMConcept::is_description_Set() const{
    return m_description_isSet;
}

bool OAIICD10CMConcept::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIICD10CMConcept::getCode() const {
    return m_code;
}
void OAIICD10CMConcept::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIICD10CMConcept::is_code_Set() const{
    return m_code_isSet;
}

bool OAIICD10CMConcept::is_code_Valid() const{
    return m_code_isValid;
}

float OAIICD10CMConcept::getScore() const {
    return m_score;
}
void OAIICD10CMConcept::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIICD10CMConcept::is_score_Set() const{
    return m_score_isSet;
}

bool OAIICD10CMConcept::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIICD10CMConcept::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIICD10CMConcept::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
