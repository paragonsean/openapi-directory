/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEntitiesDetectionV2JobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEntitiesDetectionV2JobRequest::OAIDescribeEntitiesDetectionV2JobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEntitiesDetectionV2JobRequest::OAIDescribeEntitiesDetectionV2JobRequest() {
    this->initializeModel();
}

OAIDescribeEntitiesDetectionV2JobRequest::~OAIDescribeEntitiesDetectionV2JobRequest() {}

void OAIDescribeEntitiesDetectionV2JobRequest::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;
}

void OAIDescribeEntitiesDetectionV2JobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEntitiesDetectionV2JobRequest::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;
}

QString OAIDescribeEntitiesDetectionV2JobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEntitiesDetectionV2JobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    return obj;
}

QString OAIDescribeEntitiesDetectionV2JobRequest::getJobId() const {
    return m_job_id;
}
void OAIDescribeEntitiesDetectionV2JobRequest::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIDescribeEntitiesDetectionV2JobRequest::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIDescribeEntitiesDetectionV2JobRequest::is_job_id_Valid() const{
    return m_job_id_isValid;
}

bool OAIDescribeEntitiesDetectionV2JobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEntitiesDetectionV2JobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_id_isValid && true;
}

} // namespace OpenAPI
