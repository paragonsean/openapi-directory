/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartICD10CMInferenceJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartICD10CMInferenceJobResponse::OAIStartICD10CMInferenceJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartICD10CMInferenceJobResponse::OAIStartICD10CMInferenceJobResponse() {
    this->initializeModel();
}

OAIStartICD10CMInferenceJobResponse::~OAIStartICD10CMInferenceJobResponse() {}

void OAIStartICD10CMInferenceJobResponse::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;
}

void OAIStartICD10CMInferenceJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartICD10CMInferenceJobResponse::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;
}

QString OAIStartICD10CMInferenceJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartICD10CMInferenceJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    return obj;
}

QString OAIStartICD10CMInferenceJobResponse::getJobId() const {
    return m_job_id;
}
void OAIStartICD10CMInferenceJobResponse::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIStartICD10CMInferenceJobResponse::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIStartICD10CMInferenceJobResponse::is_job_id_Valid() const{
    return m_job_id_isValid;
}

bool OAIStartICD10CMInferenceJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartICD10CMInferenceJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
