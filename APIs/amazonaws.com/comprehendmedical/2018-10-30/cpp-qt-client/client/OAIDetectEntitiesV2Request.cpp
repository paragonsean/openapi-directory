/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectEntitiesV2Request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectEntitiesV2Request::OAIDetectEntitiesV2Request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectEntitiesV2Request::OAIDetectEntitiesV2Request() {
    this->initializeModel();
}

OAIDetectEntitiesV2Request::~OAIDetectEntitiesV2Request() {}

void OAIDetectEntitiesV2Request::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIDetectEntitiesV2Request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectEntitiesV2Request::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAIDetectEntitiesV2Request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectEntitiesV2Request::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIDetectEntitiesV2Request::getText() const {
    return m_text;
}
void OAIDetectEntitiesV2Request::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDetectEntitiesV2Request::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDetectEntitiesV2Request::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIDetectEntitiesV2Request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectEntitiesV2Request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
