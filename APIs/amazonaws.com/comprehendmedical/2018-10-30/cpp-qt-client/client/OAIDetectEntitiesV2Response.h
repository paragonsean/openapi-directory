/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDetectEntitiesV2Response.h
 *
 * 
 */

#ifndef OAIDetectEntitiesV2Response_H
#define OAIDetectEntitiesV2Response_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDetectEntitiesV2Response : public OAIObject {
public:
    OAIDetectEntitiesV2Response();
    OAIDetectEntitiesV2Response(QString json);
    ~OAIDetectEntitiesV2Response() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getEntities() const;
    void setEntities(const QList &entities);
    bool is_entities_Set() const;
    bool is_entities_Valid() const;

    QList getUnmappedAttributes() const;
    void setUnmappedAttributes(const QList &unmapped_attributes);
    bool is_unmapped_attributes_Set() const;
    bool is_unmapped_attributes_Valid() const;

    QString getPaginationToken() const;
    void setPaginationToken(const QString &pagination_token);
    bool is_pagination_token_Set() const;
    bool is_pagination_token_Valid() const;

    QString getModelVersion() const;
    void setModelVersion(const QString &model_version);
    bool is_model_version_Set() const;
    bool is_model_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_entities;
    bool m_entities_isSet;
    bool m_entities_isValid;

    QList m_unmapped_attributes;
    bool m_unmapped_attributes_isSet;
    bool m_unmapped_attributes_isValid;

    QString m_pagination_token;
    bool m_pagination_token_isSet;
    bool m_pagination_token_isValid;

    QString m_model_version;
    bool m_model_version_isSet;
    bool m_model_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDetectEntitiesV2Response)

#endif // OAIDetectEntitiesV2Response_H
