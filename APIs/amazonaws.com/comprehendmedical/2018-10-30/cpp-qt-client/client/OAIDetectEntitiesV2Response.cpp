/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectEntitiesV2Response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectEntitiesV2Response::OAIDetectEntitiesV2Response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectEntitiesV2Response::OAIDetectEntitiesV2Response() {
    this->initializeModel();
}

OAIDetectEntitiesV2Response::~OAIDetectEntitiesV2Response() {}

void OAIDetectEntitiesV2Response::initializeModel() {

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_unmapped_attributes_isSet = false;
    m_unmapped_attributes_isValid = false;

    m_pagination_token_isSet = false;
    m_pagination_token_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;
}

void OAIDetectEntitiesV2Response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectEntitiesV2Response::fromJsonObject(QJsonObject json) {

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("Entities")]);
    m_entities_isSet = !json[QString("Entities")].isNull() && m_entities_isValid;

    m_unmapped_attributes_isValid = ::OpenAPI::fromJsonValue(m_unmapped_attributes, json[QString("UnmappedAttributes")]);
    m_unmapped_attributes_isSet = !json[QString("UnmappedAttributes")].isNull() && m_unmapped_attributes_isValid;

    m_pagination_token_isValid = ::OpenAPI::fromJsonValue(m_pagination_token, json[QString("PaginationToken")]);
    m_pagination_token_isSet = !json[QString("PaginationToken")].isNull() && m_pagination_token_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("ModelVersion")]);
    m_model_version_isSet = !json[QString("ModelVersion")].isNull() && m_model_version_isValid;
}

QString OAIDetectEntitiesV2Response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectEntitiesV2Response::asJsonObject() const {
    QJsonObject obj;
    if (m_entities.isSet()) {
        obj.insert(QString("Entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_unmapped_attributes.isSet()) {
        obj.insert(QString("UnmappedAttributes"), ::OpenAPI::toJsonValue(m_unmapped_attributes));
    }
    if (m_pagination_token_isSet) {
        obj.insert(QString("PaginationToken"), ::OpenAPI::toJsonValue(m_pagination_token));
    }
    if (m_model_version_isSet) {
        obj.insert(QString("ModelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    return obj;
}

QList OAIDetectEntitiesV2Response::getEntities() const {
    return m_entities;
}
void OAIDetectEntitiesV2Response::setEntities(const QList &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIDetectEntitiesV2Response::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIDetectEntitiesV2Response::is_entities_Valid() const{
    return m_entities_isValid;
}

QList OAIDetectEntitiesV2Response::getUnmappedAttributes() const {
    return m_unmapped_attributes;
}
void OAIDetectEntitiesV2Response::setUnmappedAttributes(const QList &unmapped_attributes) {
    m_unmapped_attributes = unmapped_attributes;
    m_unmapped_attributes_isSet = true;
}

bool OAIDetectEntitiesV2Response::is_unmapped_attributes_Set() const{
    return m_unmapped_attributes_isSet;
}

bool OAIDetectEntitiesV2Response::is_unmapped_attributes_Valid() const{
    return m_unmapped_attributes_isValid;
}

QString OAIDetectEntitiesV2Response::getPaginationToken() const {
    return m_pagination_token;
}
void OAIDetectEntitiesV2Response::setPaginationToken(const QString &pagination_token) {
    m_pagination_token = pagination_token;
    m_pagination_token_isSet = true;
}

bool OAIDetectEntitiesV2Response::is_pagination_token_Set() const{
    return m_pagination_token_isSet;
}

bool OAIDetectEntitiesV2Response::is_pagination_token_Valid() const{
    return m_pagination_token_isValid;
}

QString OAIDetectEntitiesV2Response::getModelVersion() const {
    return m_model_version;
}
void OAIDetectEntitiesV2Response::setModelVersion(const QString &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIDetectEntitiesV2Response::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIDetectEntitiesV2Response::is_model_version_Valid() const{
    return m_model_version_isValid;
}

bool OAIDetectEntitiesV2Response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unmapped_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pagination_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectEntitiesV2Response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entities_isValid && m_model_version_isValid && true;
}

} // namespace OpenAPI
