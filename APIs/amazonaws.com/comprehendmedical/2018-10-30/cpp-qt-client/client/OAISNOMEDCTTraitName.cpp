/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISNOMEDCTTraitName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISNOMEDCTTraitName::OAISNOMEDCTTraitName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISNOMEDCTTraitName::OAISNOMEDCTTraitName() {
    this->initializeModel();
}

OAISNOMEDCTTraitName::~OAISNOMEDCTTraitName() {}

void OAISNOMEDCTTraitName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISNOMEDCTTraitName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISNOMEDCTTraitName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NEGATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAISNOMEDCTTraitName::NEGATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIAGNOSIS", Qt::CaseInsensitive) == 0) {
        m_value = eOAISNOMEDCTTraitName::DIAGNOSIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SIGN", Qt::CaseInsensitive) == 0) {
        m_value = eOAISNOMEDCTTraitName::SIGN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYMPTOM", Qt::CaseInsensitive) == 0) {
        m_value = eOAISNOMEDCTTraitName::SYMPTOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PERTAINS_TO_FAMILY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISNOMEDCTTraitName::PERTAINS_TO_FAMILY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HYPOTHETICAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAISNOMEDCTTraitName::HYPOTHETICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LOW_CONFIDENCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISNOMEDCTTraitName::LOW_CONFIDENCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAST_HISTORY", Qt::CaseInsensitive) == 0) {
        m_value = eOAISNOMEDCTTraitName::PAST_HISTORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FUTURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAISNOMEDCTTraitName::FUTURE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISNOMEDCTTraitName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISNOMEDCTTraitName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISNOMEDCTTraitName::NEGATION:
            val = "NEGATION";
            break;
        case eOAISNOMEDCTTraitName::DIAGNOSIS:
            val = "DIAGNOSIS";
            break;
        case eOAISNOMEDCTTraitName::SIGN:
            val = "SIGN";
            break;
        case eOAISNOMEDCTTraitName::SYMPTOM:
            val = "SYMPTOM";
            break;
        case eOAISNOMEDCTTraitName::PERTAINS_TO_FAMILY:
            val = "PERTAINS_TO_FAMILY";
            break;
        case eOAISNOMEDCTTraitName::HYPOTHETICAL:
            val = "HYPOTHETICAL";
            break;
        case eOAISNOMEDCTTraitName::LOW_CONFIDENCE:
            val = "LOW_CONFIDENCE";
            break;
        case eOAISNOMEDCTTraitName::PAST_HISTORY:
            val = "PAST_HISTORY";
            break;
        case eOAISNOMEDCTTraitName::FUTURE:
            val = "FUTURE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISNOMEDCTTraitName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISNOMEDCTTraitName::eOAISNOMEDCTTraitName OAISNOMEDCTTraitName::getValue() const {
    return m_value;
}

void OAISNOMEDCTTraitName::setValue(const OAISNOMEDCTTraitName::eOAISNOMEDCTTraitName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISNOMEDCTTraitName::isSet() const {
    
    return m_value_isSet;
}

bool OAISNOMEDCTTraitName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
