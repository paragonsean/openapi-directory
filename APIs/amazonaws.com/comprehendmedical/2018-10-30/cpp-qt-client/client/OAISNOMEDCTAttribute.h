/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISNOMEDCTAttribute.h
 *
 *  The extracted attributes that relate to an entity. An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken. 
 */

#ifndef OAISNOMEDCTAttribute_H
#define OAISNOMEDCTAttribute_H

#include <QJsonObject>

#include "OAISNOMEDCTAttributeType.h"
#include "OAISNOMEDCTEntityCategory.h"
#include "OAISNOMEDCTRelationshipType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISNOMEDCTAttribute : public OAIObject {
public:
    OAISNOMEDCTAttribute();
    OAISNOMEDCTAttribute(QString json);
    ~OAISNOMEDCTAttribute() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISNOMEDCTEntityCategory getCategory() const;
    void setCategory(const OAISNOMEDCTEntityCategory &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAISNOMEDCTAttributeType getType() const;
    void setType(const OAISNOMEDCTAttributeType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    float getScore() const;
    void setScore(const float &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    float getRelationshipScore() const;
    void setRelationshipScore(const float &relationship_score);
    bool is_relationship_score_Set() const;
    bool is_relationship_score_Valid() const;

    OAISNOMEDCTRelationshipType getRelationshipType() const;
    void setRelationshipType(const OAISNOMEDCTRelationshipType &relationship_type);
    bool is_relationship_type_Set() const;
    bool is_relationship_type_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getBeginOffset() const;
    void setBeginOffset(const qint32 &begin_offset);
    bool is_begin_offset_Set() const;
    bool is_begin_offset_Valid() const;

    qint32 getEndOffset() const;
    void setEndOffset(const qint32 &end_offset);
    bool is_end_offset_Set() const;
    bool is_end_offset_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QList getTraits() const;
    void setTraits(const QList &traits);
    bool is_traits_Set() const;
    bool is_traits_Valid() const;

    QList getSnomedctConcepts() const;
    void setSnomedctConcepts(const QList &snomedct_concepts);
    bool is_snomedct_concepts_Set() const;
    bool is_snomedct_concepts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISNOMEDCTEntityCategory m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAISNOMEDCTAttributeType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    float m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    float m_relationship_score;
    bool m_relationship_score_isSet;
    bool m_relationship_score_isValid;

    OAISNOMEDCTRelationshipType m_relationship_type;
    bool m_relationship_type_isSet;
    bool m_relationship_type_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_begin_offset;
    bool m_begin_offset_isSet;
    bool m_begin_offset_isValid;

    qint32 m_end_offset;
    bool m_end_offset_isSet;
    bool m_end_offset_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QList m_traits;
    bool m_traits_isSet;
    bool m_traits_isValid;

    QList m_snomedct_concepts;
    bool m_snomedct_concepts_isSet;
    bool m_snomedct_concepts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISNOMEDCTAttribute)

#endif // OAISNOMEDCTAttribute_H
