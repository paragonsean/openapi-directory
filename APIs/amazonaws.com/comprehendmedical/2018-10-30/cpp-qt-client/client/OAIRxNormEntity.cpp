/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRxNormEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRxNormEntity::OAIRxNormEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRxNormEntity::OAIRxNormEntity() {
    this->initializeModel();
}

OAIRxNormEntity::~OAIRxNormEntity() {}

void OAIRxNormEntity::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_begin_offset_isSet = false;
    m_begin_offset_isValid = false;

    m_end_offset_isSet = false;
    m_end_offset_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_traits_isSet = false;
    m_traits_isValid = false;

    m_rx_norm_concepts_isSet = false;
    m_rx_norm_concepts_isValid = false;
}

void OAIRxNormEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRxNormEntity::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_begin_offset_isValid = ::OpenAPI::fromJsonValue(m_begin_offset, json[QString("BeginOffset")]);
    m_begin_offset_isSet = !json[QString("BeginOffset")].isNull() && m_begin_offset_isValid;

    m_end_offset_isValid = ::OpenAPI::fromJsonValue(m_end_offset, json[QString("EndOffset")]);
    m_end_offset_isSet = !json[QString("EndOffset")].isNull() && m_end_offset_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_traits_isValid = ::OpenAPI::fromJsonValue(m_traits, json[QString("Traits")]);
    m_traits_isSet = !json[QString("Traits")].isNull() && m_traits_isValid;

    m_rx_norm_concepts_isValid = ::OpenAPI::fromJsonValue(m_rx_norm_concepts, json[QString("RxNormConcepts")]);
    m_rx_norm_concepts_isSet = !json[QString("RxNormConcepts")].isNull() && m_rx_norm_concepts_isValid;
}

QString OAIRxNormEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRxNormEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_begin_offset_isSet) {
        obj.insert(QString("BeginOffset"), ::OpenAPI::toJsonValue(m_begin_offset));
    }
    if (m_end_offset_isSet) {
        obj.insert(QString("EndOffset"), ::OpenAPI::toJsonValue(m_end_offset));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_traits.isSet()) {
        obj.insert(QString("Traits"), ::OpenAPI::toJsonValue(m_traits));
    }
    if (m_rx_norm_concepts.isSet()) {
        obj.insert(QString("RxNormConcepts"), ::OpenAPI::toJsonValue(m_rx_norm_concepts));
    }
    return obj;
}

qint32 OAIRxNormEntity::getId() const {
    return m_id;
}
void OAIRxNormEntity::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRxNormEntity::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRxNormEntity::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRxNormEntity::getText() const {
    return m_text;
}
void OAIRxNormEntity::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIRxNormEntity::is_text_Set() const{
    return m_text_isSet;
}

bool OAIRxNormEntity::is_text_Valid() const{
    return m_text_isValid;
}

OAIRxNormEntityCategory OAIRxNormEntity::getCategory() const {
    return m_category;
}
void OAIRxNormEntity::setCategory(const OAIRxNormEntityCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIRxNormEntity::is_category_Set() const{
    return m_category_isSet;
}

bool OAIRxNormEntity::is_category_Valid() const{
    return m_category_isValid;
}

OAIRxNormEntityType OAIRxNormEntity::getType() const {
    return m_type;
}
void OAIRxNormEntity::setType(const OAIRxNormEntityType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRxNormEntity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRxNormEntity::is_type_Valid() const{
    return m_type_isValid;
}

float OAIRxNormEntity::getScore() const {
    return m_score;
}
void OAIRxNormEntity::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIRxNormEntity::is_score_Set() const{
    return m_score_isSet;
}

bool OAIRxNormEntity::is_score_Valid() const{
    return m_score_isValid;
}

qint32 OAIRxNormEntity::getBeginOffset() const {
    return m_begin_offset;
}
void OAIRxNormEntity::setBeginOffset(const qint32 &begin_offset) {
    m_begin_offset = begin_offset;
    m_begin_offset_isSet = true;
}

bool OAIRxNormEntity::is_begin_offset_Set() const{
    return m_begin_offset_isSet;
}

bool OAIRxNormEntity::is_begin_offset_Valid() const{
    return m_begin_offset_isValid;
}

qint32 OAIRxNormEntity::getEndOffset() const {
    return m_end_offset;
}
void OAIRxNormEntity::setEndOffset(const qint32 &end_offset) {
    m_end_offset = end_offset;
    m_end_offset_isSet = true;
}

bool OAIRxNormEntity::is_end_offset_Set() const{
    return m_end_offset_isSet;
}

bool OAIRxNormEntity::is_end_offset_Valid() const{
    return m_end_offset_isValid;
}

QList OAIRxNormEntity::getAttributes() const {
    return m_attributes;
}
void OAIRxNormEntity::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIRxNormEntity::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIRxNormEntity::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList OAIRxNormEntity::getTraits() const {
    return m_traits;
}
void OAIRxNormEntity::setTraits(const QList &traits) {
    m_traits = traits;
    m_traits_isSet = true;
}

bool OAIRxNormEntity::is_traits_Set() const{
    return m_traits_isSet;
}

bool OAIRxNormEntity::is_traits_Valid() const{
    return m_traits_isValid;
}

QList OAIRxNormEntity::getRxNormConcepts() const {
    return m_rx_norm_concepts;
}
void OAIRxNormEntity::setRxNormConcepts(const QList &rx_norm_concepts) {
    m_rx_norm_concepts = rx_norm_concepts;
    m_rx_norm_concepts_isSet = true;
}

bool OAIRxNormEntity::is_rx_norm_concepts_Set() const{
    return m_rx_norm_concepts_isSet;
}

bool OAIRxNormEntity::is_rx_norm_concepts_Valid() const{
    return m_rx_norm_concepts_isValid;
}

bool OAIRxNormEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_begin_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_traits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rx_norm_concepts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRxNormEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
