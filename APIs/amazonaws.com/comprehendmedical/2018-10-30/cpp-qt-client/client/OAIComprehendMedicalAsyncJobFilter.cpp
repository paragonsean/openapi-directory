/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComprehendMedicalAsyncJobFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComprehendMedicalAsyncJobFilter::OAIComprehendMedicalAsyncJobFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComprehendMedicalAsyncJobFilter::OAIComprehendMedicalAsyncJobFilter() {
    this->initializeModel();
}

OAIComprehendMedicalAsyncJobFilter::~OAIComprehendMedicalAsyncJobFilter() {}

void OAIComprehendMedicalAsyncJobFilter::initializeModel() {

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_submit_time_before_isSet = false;
    m_submit_time_before_isValid = false;

    m_submit_time_after_isSet = false;
    m_submit_time_after_isValid = false;
}

void OAIComprehendMedicalAsyncJobFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComprehendMedicalAsyncJobFilter::fromJsonObject(QJsonObject json) {

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("JobName")]);
    m_job_name_isSet = !json[QString("JobName")].isNull() && m_job_name_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_submit_time_before_isValid = ::OpenAPI::fromJsonValue(m_submit_time_before, json[QString("SubmitTimeBefore")]);
    m_submit_time_before_isSet = !json[QString("SubmitTimeBefore")].isNull() && m_submit_time_before_isValid;

    m_submit_time_after_isValid = ::OpenAPI::fromJsonValue(m_submit_time_after, json[QString("SubmitTimeAfter")]);
    m_submit_time_after_isSet = !json[QString("SubmitTimeAfter")].isNull() && m_submit_time_after_isValid;
}

QString OAIComprehendMedicalAsyncJobFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComprehendMedicalAsyncJobFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_job_name_isSet) {
        obj.insert(QString("JobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_submit_time_before_isSet) {
        obj.insert(QString("SubmitTimeBefore"), ::OpenAPI::toJsonValue(m_submit_time_before));
    }
    if (m_submit_time_after_isSet) {
        obj.insert(QString("SubmitTimeAfter"), ::OpenAPI::toJsonValue(m_submit_time_after));
    }
    return obj;
}

QString OAIComprehendMedicalAsyncJobFilter::getJobName() const {
    return m_job_name;
}
void OAIComprehendMedicalAsyncJobFilter::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIComprehendMedicalAsyncJobFilter::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIComprehendMedicalAsyncJobFilter::is_job_name_Valid() const{
    return m_job_name_isValid;
}

OAIJobStatus OAIComprehendMedicalAsyncJobFilter::getJobStatus() const {
    return m_job_status;
}
void OAIComprehendMedicalAsyncJobFilter::setJobStatus(const OAIJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIComprehendMedicalAsyncJobFilter::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIComprehendMedicalAsyncJobFilter::is_job_status_Valid() const{
    return m_job_status_isValid;
}

QDateTime OAIComprehendMedicalAsyncJobFilter::getSubmitTimeBefore() const {
    return m_submit_time_before;
}
void OAIComprehendMedicalAsyncJobFilter::setSubmitTimeBefore(const QDateTime &submit_time_before) {
    m_submit_time_before = submit_time_before;
    m_submit_time_before_isSet = true;
}

bool OAIComprehendMedicalAsyncJobFilter::is_submit_time_before_Set() const{
    return m_submit_time_before_isSet;
}

bool OAIComprehendMedicalAsyncJobFilter::is_submit_time_before_Valid() const{
    return m_submit_time_before_isValid;
}

QDateTime OAIComprehendMedicalAsyncJobFilter::getSubmitTimeAfter() const {
    return m_submit_time_after;
}
void OAIComprehendMedicalAsyncJobFilter::setSubmitTimeAfter(const QDateTime &submit_time_after) {
    m_submit_time_after = submit_time_after;
    m_submit_time_after_isSet = true;
}

bool OAIComprehendMedicalAsyncJobFilter::is_submit_time_after_Set() const{
    return m_submit_time_after_isSet;
}

bool OAIComprehendMedicalAsyncJobFilter::is_submit_time_after_Valid() const{
    return m_submit_time_after_isValid;
}

bool OAIComprehendMedicalAsyncJobFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_time_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_time_after_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComprehendMedicalAsyncJobFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
