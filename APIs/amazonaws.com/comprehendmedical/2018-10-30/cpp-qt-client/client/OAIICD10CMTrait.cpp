/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIICD10CMTrait.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIICD10CMTrait::OAIICD10CMTrait(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIICD10CMTrait::OAIICD10CMTrait() {
    this->initializeModel();
}

OAIICD10CMTrait::~OAIICD10CMTrait() {}

void OAIICD10CMTrait::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIICD10CMTrait::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIICD10CMTrait::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;
}

QString OAIICD10CMTrait::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIICD10CMTrait::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

OAIICD10CMTraitName OAIICD10CMTrait::getName() const {
    return m_name;
}
void OAIICD10CMTrait::setName(const OAIICD10CMTraitName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIICD10CMTrait::is_name_Set() const{
    return m_name_isSet;
}

bool OAIICD10CMTrait::is_name_Valid() const{
    return m_name_isValid;
}

float OAIICD10CMTrait::getScore() const {
    return m_score;
}
void OAIICD10CMTrait::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIICD10CMTrait::is_score_Set() const{
    return m_score_isSet;
}

bool OAIICD10CMTrait::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIICD10CMTrait::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIICD10CMTrait::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
