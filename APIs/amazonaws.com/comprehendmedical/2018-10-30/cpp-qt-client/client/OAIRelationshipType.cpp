/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelationshipType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelationshipType::OAIRelationshipType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelationshipType::OAIRelationshipType() {
    this->initializeModel();
}

OAIRelationshipType::~OAIRelationshipType() {}

void OAIRelationshipType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIRelationshipType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIRelationshipType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("EVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::EVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WITH_DOSAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::WITH_DOSAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADMINISTERED_VIA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::ADMINISTERED_VIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FOR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::FOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NEGATIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::NEGATIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OVERLAP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::OVERLAP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOSAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::DOSAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ROUTE_OR_MODE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::ROUTE_OR_MODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FORM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::FORM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FREQUENCY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::FREQUENCY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DURATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::DURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STRENGTH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::STRENGTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::RATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACUITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::ACUITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEST_VALUE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::TEST_VALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEST_UNITS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::TEST_UNITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TEST_UNIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::TEST_UNIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIRECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::DIRECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SYSTEM_ORGAN_SITE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::SYSTEM_ORGAN_SITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AMOUNT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::AMOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::USAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("QUALITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIRelationshipType::QUALITY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIRelationshipType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIRelationshipType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIRelationshipType::EVERY:
            val = "EVERY";
            break;
        case eOAIRelationshipType::WITH_DOSAGE:
            val = "WITH_DOSAGE";
            break;
        case eOAIRelationshipType::ADMINISTERED_VIA:
            val = "ADMINISTERED_VIA";
            break;
        case eOAIRelationshipType::FOR:
            val = "FOR";
            break;
        case eOAIRelationshipType::NEGATIVE:
            val = "NEGATIVE";
            break;
        case eOAIRelationshipType::OVERLAP:
            val = "OVERLAP";
            break;
        case eOAIRelationshipType::DOSAGE:
            val = "DOSAGE";
            break;
        case eOAIRelationshipType::ROUTE_OR_MODE:
            val = "ROUTE_OR_MODE";
            break;
        case eOAIRelationshipType::FORM:
            val = "FORM";
            break;
        case eOAIRelationshipType::FREQUENCY:
            val = "FREQUENCY";
            break;
        case eOAIRelationshipType::DURATION:
            val = "DURATION";
            break;
        case eOAIRelationshipType::STRENGTH:
            val = "STRENGTH";
            break;
        case eOAIRelationshipType::RATE:
            val = "RATE";
            break;
        case eOAIRelationshipType::ACUITY:
            val = "ACUITY";
            break;
        case eOAIRelationshipType::TEST_VALUE:
            val = "TEST_VALUE";
            break;
        case eOAIRelationshipType::TEST_UNITS:
            val = "TEST_UNITS";
            break;
        case eOAIRelationshipType::TEST_UNIT:
            val = "TEST_UNIT";
            break;
        case eOAIRelationshipType::DIRECTION:
            val = "DIRECTION";
            break;
        case eOAIRelationshipType::SYSTEM_ORGAN_SITE:
            val = "SYSTEM_ORGAN_SITE";
            break;
        case eOAIRelationshipType::AMOUNT:
            val = "AMOUNT";
            break;
        case eOAIRelationshipType::USAGE:
            val = "USAGE";
            break;
        case eOAIRelationshipType::QUALITY:
            val = "QUALITY";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIRelationshipType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIRelationshipType::eOAIRelationshipType OAIRelationshipType::getValue() const {
    return m_value;
}

void OAIRelationshipType::setValue(const OAIRelationshipType::eOAIRelationshipType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIRelationshipType::isSet() const {
    
    return m_value_isSet;
}

bool OAIRelationshipType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
