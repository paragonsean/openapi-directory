/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEntitiesDetectionV2JobsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEntitiesDetectionV2JobsRequest::OAIListEntitiesDetectionV2JobsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEntitiesDetectionV2JobsRequest::OAIListEntitiesDetectionV2JobsRequest() {
    this->initializeModel();
}

OAIListEntitiesDetectionV2JobsRequest::~OAIListEntitiesDetectionV2JobsRequest() {}

void OAIListEntitiesDetectionV2JobsRequest::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListEntitiesDetectionV2JobsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEntitiesDetectionV2JobsRequest::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListEntitiesDetectionV2JobsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEntitiesDetectionV2JobsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAIListEntitiesDetectionV2JobsRequest_Filter OAIListEntitiesDetectionV2JobsRequest::getFilter() const {
    return m_filter;
}
void OAIListEntitiesDetectionV2JobsRequest::setFilter(const OAIListEntitiesDetectionV2JobsRequest_Filter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIListEntitiesDetectionV2JobsRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIListEntitiesDetectionV2JobsRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIListEntitiesDetectionV2JobsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListEntitiesDetectionV2JobsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListEntitiesDetectionV2JobsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListEntitiesDetectionV2JobsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListEntitiesDetectionV2JobsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListEntitiesDetectionV2JobsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListEntitiesDetectionV2JobsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListEntitiesDetectionV2JobsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListEntitiesDetectionV2JobsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEntitiesDetectionV2JobsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
