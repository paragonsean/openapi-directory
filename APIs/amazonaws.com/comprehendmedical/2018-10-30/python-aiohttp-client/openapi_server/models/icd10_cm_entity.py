# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.icd10_cm_entity_category import ICD10CMEntityCategory
from openapi_server.models.icd10_cm_entity_type import ICD10CMEntityType
from openapi_server import util


class ICD10CMEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, text: str=None, category: ICD10CMEntityCategory=None, type: ICD10CMEntityType=None, score: float=None, begin_offset: int=None, end_offset: int=None, attributes: List=None, traits: List=None, icd10_cm_concepts: List=None):
        """ICD10CMEntity - a model defined in OpenAPI

        :param id: The id of this ICD10CMEntity.
        :param text: The text of this ICD10CMEntity.
        :param category: The category of this ICD10CMEntity.
        :param type: The type of this ICD10CMEntity.
        :param score: The score of this ICD10CMEntity.
        :param begin_offset: The begin_offset of this ICD10CMEntity.
        :param end_offset: The end_offset of this ICD10CMEntity.
        :param attributes: The attributes of this ICD10CMEntity.
        :param traits: The traits of this ICD10CMEntity.
        :param icd10_cm_concepts: The icd10_cm_concepts of this ICD10CMEntity.
        """
        self.openapi_types = {
            'id': int,
            'text': str,
            'category': ICD10CMEntityCategory,
            'type': ICD10CMEntityType,
            'score': float,
            'begin_offset': int,
            'end_offset': int,
            'attributes': List,
            'traits': List,
            'icd10_cm_concepts': List
        }

        self.attribute_map = {
            'id': 'Id',
            'text': 'Text',
            'category': 'Category',
            'type': 'Type',
            'score': 'Score',
            'begin_offset': 'BeginOffset',
            'end_offset': 'EndOffset',
            'attributes': 'Attributes',
            'traits': 'Traits',
            'icd10_cm_concepts': 'ICD10CMConcepts'
        }

        self._id = id
        self._text = text
        self._category = category
        self._type = type
        self._score = score
        self._begin_offset = begin_offset
        self._end_offset = end_offset
        self._attributes = attributes
        self._traits = traits
        self._icd10_cm_concepts = icd10_cm_concepts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ICD10CMEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ICD10CMEntity of this ICD10CMEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ICD10CMEntity.


        :return: The id of this ICD10CMEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ICD10CMEntity.


        :param id: The id of this ICD10CMEntity.
        :type id: int
        """

        self._id = id

    @property
    def text(self):
        """Gets the text of this ICD10CMEntity.


        :return: The text of this ICD10CMEntity.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ICD10CMEntity.


        :param text: The text of this ICD10CMEntity.
        :type text: str
        """

        self._text = text

    @property
    def category(self):
        """Gets the category of this ICD10CMEntity.


        :return: The category of this ICD10CMEntity.
        :rtype: ICD10CMEntityCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ICD10CMEntity.


        :param category: The category of this ICD10CMEntity.
        :type category: ICD10CMEntityCategory
        """

        self._category = category

    @property
    def type(self):
        """Gets the type of this ICD10CMEntity.


        :return: The type of this ICD10CMEntity.
        :rtype: ICD10CMEntityType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ICD10CMEntity.


        :param type: The type of this ICD10CMEntity.
        :type type: ICD10CMEntityType
        """

        self._type = type

    @property
    def score(self):
        """Gets the score of this ICD10CMEntity.


        :return: The score of this ICD10CMEntity.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ICD10CMEntity.


        :param score: The score of this ICD10CMEntity.
        :type score: float
        """

        self._score = score

    @property
    def begin_offset(self):
        """Gets the begin_offset of this ICD10CMEntity.


        :return: The begin_offset of this ICD10CMEntity.
        :rtype: int
        """
        return self._begin_offset

    @begin_offset.setter
    def begin_offset(self, begin_offset):
        """Sets the begin_offset of this ICD10CMEntity.


        :param begin_offset: The begin_offset of this ICD10CMEntity.
        :type begin_offset: int
        """

        self._begin_offset = begin_offset

    @property
    def end_offset(self):
        """Gets the end_offset of this ICD10CMEntity.


        :return: The end_offset of this ICD10CMEntity.
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this ICD10CMEntity.


        :param end_offset: The end_offset of this ICD10CMEntity.
        :type end_offset: int
        """

        self._end_offset = end_offset

    @property
    def attributes(self):
        """Gets the attributes of this ICD10CMEntity.


        :return: The attributes of this ICD10CMEntity.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ICD10CMEntity.


        :param attributes: The attributes of this ICD10CMEntity.
        :type attributes: List
        """

        self._attributes = attributes

    @property
    def traits(self):
        """Gets the traits of this ICD10CMEntity.


        :return: The traits of this ICD10CMEntity.
        :rtype: List
        """
        return self._traits

    @traits.setter
    def traits(self, traits):
        """Sets the traits of this ICD10CMEntity.


        :param traits: The traits of this ICD10CMEntity.
        :type traits: List
        """

        self._traits = traits

    @property
    def icd10_cm_concepts(self):
        """Gets the icd10_cm_concepts of this ICD10CMEntity.


        :return: The icd10_cm_concepts of this ICD10CMEntity.
        :rtype: List
        """
        return self._icd10_cm_concepts

    @icd10_cm_concepts.setter
    def icd10_cm_concepts(self, icd10_cm_concepts):
        """Sets the icd10_cm_concepts of this ICD10CMEntity.


        :param icd10_cm_concepts: The icd10_cm_concepts of this ICD10CMEntity.
        :type icd10_cm_concepts: List
        """

        self._icd10_cm_concepts = icd10_cm_concepts
