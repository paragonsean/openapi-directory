# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snomedct_trait_name import SNOMEDCTTraitName
from openapi_server import util


class SNOMEDCTTrait(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: SNOMEDCTTraitName=None, score: float=None):
        """SNOMEDCTTrait - a model defined in OpenAPI

        :param name: The name of this SNOMEDCTTrait.
        :param score: The score of this SNOMEDCTTrait.
        """
        self.openapi_types = {
            'name': SNOMEDCTTraitName,
            'score': float
        }

        self.attribute_map = {
            'name': 'Name',
            'score': 'Score'
        }

        self._name = name
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SNOMEDCTTrait':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SNOMEDCTTrait of this SNOMEDCTTrait.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SNOMEDCTTrait.


        :return: The name of this SNOMEDCTTrait.
        :rtype: SNOMEDCTTraitName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SNOMEDCTTrait.


        :param name: The name of this SNOMEDCTTrait.
        :type name: SNOMEDCTTraitName
        """

        self._name = name

    @property
    def score(self):
        """Gets the score of this SNOMEDCTTrait.


        :return: The score of this SNOMEDCTTrait.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SNOMEDCTTrait.


        :param score: The score of this SNOMEDCTTrait.
        :type score: float
        """

        self._score = score
