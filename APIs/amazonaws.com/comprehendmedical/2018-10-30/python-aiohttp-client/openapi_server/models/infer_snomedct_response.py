# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.infer_snomedct_response_characters import InferSNOMEDCTResponseCharacters
from openapi_server.models.infer_snomedct_response_snomedct_details import InferSNOMEDCTResponseSNOMEDCTDetails
from openapi_server import util


class InferSNOMEDCTResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entities: List=None, pagination_token: str=None, model_version: str=None, snomedct_details: InferSNOMEDCTResponseSNOMEDCTDetails=None, characters: InferSNOMEDCTResponseCharacters=None):
        """InferSNOMEDCTResponse - a model defined in OpenAPI

        :param entities: The entities of this InferSNOMEDCTResponse.
        :param pagination_token: The pagination_token of this InferSNOMEDCTResponse.
        :param model_version: The model_version of this InferSNOMEDCTResponse.
        :param snomedct_details: The snomedct_details of this InferSNOMEDCTResponse.
        :param characters: The characters of this InferSNOMEDCTResponse.
        """
        self.openapi_types = {
            'entities': List,
            'pagination_token': str,
            'model_version': str,
            'snomedct_details': InferSNOMEDCTResponseSNOMEDCTDetails,
            'characters': InferSNOMEDCTResponseCharacters
        }

        self.attribute_map = {
            'entities': 'Entities',
            'pagination_token': 'PaginationToken',
            'model_version': 'ModelVersion',
            'snomedct_details': 'SNOMEDCTDetails',
            'characters': 'Characters'
        }

        self._entities = entities
        self._pagination_token = pagination_token
        self._model_version = model_version
        self._snomedct_details = snomedct_details
        self._characters = characters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InferSNOMEDCTResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InferSNOMEDCTResponse of this InferSNOMEDCTResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entities(self):
        """Gets the entities of this InferSNOMEDCTResponse.


        :return: The entities of this InferSNOMEDCTResponse.
        :rtype: List
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this InferSNOMEDCTResponse.


        :param entities: The entities of this InferSNOMEDCTResponse.
        :type entities: List
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")

        self._entities = entities

    @property
    def pagination_token(self):
        """Gets the pagination_token of this InferSNOMEDCTResponse.


        :return: The pagination_token of this InferSNOMEDCTResponse.
        :rtype: str
        """
        return self._pagination_token

    @pagination_token.setter
    def pagination_token(self, pagination_token):
        """Sets the pagination_token of this InferSNOMEDCTResponse.


        :param pagination_token: The pagination_token of this InferSNOMEDCTResponse.
        :type pagination_token: str
        """

        self._pagination_token = pagination_token

    @property
    def model_version(self):
        """Gets the model_version of this InferSNOMEDCTResponse.


        :return: The model_version of this InferSNOMEDCTResponse.
        :rtype: str
        """
        return self._model_version

    @model_version.setter
    def model_version(self, model_version):
        """Sets the model_version of this InferSNOMEDCTResponse.


        :param model_version: The model_version of this InferSNOMEDCTResponse.
        :type model_version: str
        """

        self._model_version = model_version

    @property
    def snomedct_details(self):
        """Gets the snomedct_details of this InferSNOMEDCTResponse.


        :return: The snomedct_details of this InferSNOMEDCTResponse.
        :rtype: InferSNOMEDCTResponseSNOMEDCTDetails
        """
        return self._snomedct_details

    @snomedct_details.setter
    def snomedct_details(self, snomedct_details):
        """Sets the snomedct_details of this InferSNOMEDCTResponse.


        :param snomedct_details: The snomedct_details of this InferSNOMEDCTResponse.
        :type snomedct_details: InferSNOMEDCTResponseSNOMEDCTDetails
        """

        self._snomedct_details = snomedct_details

    @property
    def characters(self):
        """Gets the characters of this InferSNOMEDCTResponse.


        :return: The characters of this InferSNOMEDCTResponse.
        :rtype: InferSNOMEDCTResponseCharacters
        """
        return self._characters

    @characters.setter
    def characters(self, characters):
        """Sets the characters of this InferSNOMEDCTResponse.


        :param characters: The characters of this InferSNOMEDCTResponse.
        :type characters: InferSNOMEDCTResponseCharacters
        """

        self._characters = characters
