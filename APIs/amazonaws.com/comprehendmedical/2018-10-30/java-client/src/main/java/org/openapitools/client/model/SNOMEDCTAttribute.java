/*
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SNOMEDCTAttributeType;
import org.openapitools.client.model.SNOMEDCTEntityCategory;
import org.openapitools.client.model.SNOMEDCTRelationshipType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The extracted attributes that relate to an entity. An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:31.822751-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SNOMEDCTAttribute {
  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private SNOMEDCTEntityCategory category;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private SNOMEDCTAttributeType type;

  public static final String SERIALIZED_NAME_SCORE = "Score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_RELATIONSHIP_SCORE = "RelationshipScore";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_SCORE)
  private Float relationshipScore;

  public static final String SERIALIZED_NAME_RELATIONSHIP_TYPE = "RelationshipType";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_TYPE)
  private SNOMEDCTRelationshipType relationshipType;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_BEGIN_OFFSET = "BeginOffset";
  @SerializedName(SERIALIZED_NAME_BEGIN_OFFSET)
  private Integer beginOffset;

  public static final String SERIALIZED_NAME_END_OFFSET = "EndOffset";
  @SerializedName(SERIALIZED_NAME_END_OFFSET)
  private Integer endOffset;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TRAITS = "Traits";
  @SerializedName(SERIALIZED_NAME_TRAITS)
  private List traits;

  public static final String SERIALIZED_NAME_SN_O_M_E_D_C_T_CONCEPTS = "SNOMEDCTConcepts";
  @SerializedName(SERIALIZED_NAME_SN_O_M_E_D_C_T_CONCEPTS)
  private List snOMEDCTConcepts;

  public SNOMEDCTAttribute() {
  }

  public SNOMEDCTAttribute category(SNOMEDCTEntityCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public SNOMEDCTEntityCategory getCategory() {
    return category;
  }

  public void setCategory(SNOMEDCTEntityCategory category) {
    this.category = category;
  }


  public SNOMEDCTAttribute type(SNOMEDCTAttributeType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public SNOMEDCTAttributeType getType() {
    return type;
  }

  public void setType(SNOMEDCTAttributeType type) {
    this.type = type;
  }


  public SNOMEDCTAttribute score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public SNOMEDCTAttribute relationshipScore(Float relationshipScore) {
    this.relationshipScore = relationshipScore;
    return this;
  }

  /**
   * Get relationshipScore
   * @return relationshipScore
   */
  @javax.annotation.Nullable
  public Float getRelationshipScore() {
    return relationshipScore;
  }

  public void setRelationshipScore(Float relationshipScore) {
    this.relationshipScore = relationshipScore;
  }


  public SNOMEDCTAttribute relationshipType(SNOMEDCTRelationshipType relationshipType) {
    this.relationshipType = relationshipType;
    return this;
  }

  /**
   * Get relationshipType
   * @return relationshipType
   */
  @javax.annotation.Nullable
  public SNOMEDCTRelationshipType getRelationshipType() {
    return relationshipType;
  }

  public void setRelationshipType(SNOMEDCTRelationshipType relationshipType) {
    this.relationshipType = relationshipType;
  }


  public SNOMEDCTAttribute id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public SNOMEDCTAttribute beginOffset(Integer beginOffset) {
    this.beginOffset = beginOffset;
    return this;
  }

  /**
   * Get beginOffset
   * @return beginOffset
   */
  @javax.annotation.Nullable
  public Integer getBeginOffset() {
    return beginOffset;
  }

  public void setBeginOffset(Integer beginOffset) {
    this.beginOffset = beginOffset;
  }


  public SNOMEDCTAttribute endOffset(Integer endOffset) {
    this.endOffset = endOffset;
    return this;
  }

  /**
   * Get endOffset
   * @return endOffset
   */
  @javax.annotation.Nullable
  public Integer getEndOffset() {
    return endOffset;
  }

  public void setEndOffset(Integer endOffset) {
    this.endOffset = endOffset;
  }


  public SNOMEDCTAttribute text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public SNOMEDCTAttribute traits(List traits) {
    this.traits = traits;
    return this;
  }

  /**
   * Get traits
   * @return traits
   */
  @javax.annotation.Nullable
  public List getTraits() {
    return traits;
  }

  public void setTraits(List traits) {
    this.traits = traits;
  }


  public SNOMEDCTAttribute snOMEDCTConcepts(List snOMEDCTConcepts) {
    this.snOMEDCTConcepts = snOMEDCTConcepts;
    return this;
  }

  /**
   * Get snOMEDCTConcepts
   * @return snOMEDCTConcepts
   */
  @javax.annotation.Nullable
  public List getSnOMEDCTConcepts() {
    return snOMEDCTConcepts;
  }

  public void setSnOMEDCTConcepts(List snOMEDCTConcepts) {
    this.snOMEDCTConcepts = snOMEDCTConcepts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SNOMEDCTAttribute snOMEDCTAttribute = (SNOMEDCTAttribute) o;
    return Objects.equals(this.category, snOMEDCTAttribute.category) &&
        Objects.equals(this.type, snOMEDCTAttribute.type) &&
        Objects.equals(this.score, snOMEDCTAttribute.score) &&
        Objects.equals(this.relationshipScore, snOMEDCTAttribute.relationshipScore) &&
        Objects.equals(this.relationshipType, snOMEDCTAttribute.relationshipType) &&
        Objects.equals(this.id, snOMEDCTAttribute.id) &&
        Objects.equals(this.beginOffset, snOMEDCTAttribute.beginOffset) &&
        Objects.equals(this.endOffset, snOMEDCTAttribute.endOffset) &&
        Objects.equals(this.text, snOMEDCTAttribute.text) &&
        Objects.equals(this.traits, snOMEDCTAttribute.traits) &&
        Objects.equals(this.snOMEDCTConcepts, snOMEDCTAttribute.snOMEDCTConcepts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, type, score, relationshipScore, relationshipType, id, beginOffset, endOffset, text, traits, snOMEDCTConcepts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SNOMEDCTAttribute {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    relationshipScore: ").append(toIndentedString(relationshipScore)).append("\n");
    sb.append("    relationshipType: ").append(toIndentedString(relationshipType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    beginOffset: ").append(toIndentedString(beginOffset)).append("\n");
    sb.append("    endOffset: ").append(toIndentedString(endOffset)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    traits: ").append(toIndentedString(traits)).append("\n");
    sb.append("    snOMEDCTConcepts: ").append(toIndentedString(snOMEDCTConcepts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Category");
    openapiFields.add("Type");
    openapiFields.add("Score");
    openapiFields.add("RelationshipScore");
    openapiFields.add("RelationshipType");
    openapiFields.add("Id");
    openapiFields.add("BeginOffset");
    openapiFields.add("EndOffset");
    openapiFields.add("Text");
    openapiFields.add("Traits");
    openapiFields.add("SNOMEDCTConcepts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SNOMEDCTAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SNOMEDCTAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SNOMEDCTAttribute is not found in the empty JSON string", SNOMEDCTAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SNOMEDCTAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SNOMEDCTAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Category`
      if (jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) {
        SNOMEDCTEntityCategory.validateJsonElement(jsonObj.get("Category"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        SNOMEDCTAttributeType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Score`
      if (jsonObj.get("Score") != null && !jsonObj.get("Score").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("Score"));
      }
      // validate the optional field `RelationshipScore`
      if (jsonObj.get("RelationshipScore") != null && !jsonObj.get("RelationshipScore").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("RelationshipScore"));
      }
      // validate the optional field `RelationshipType`
      if (jsonObj.get("RelationshipType") != null && !jsonObj.get("RelationshipType").isJsonNull()) {
        SNOMEDCTRelationshipType.validateJsonElement(jsonObj.get("RelationshipType"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `BeginOffset`
      if (jsonObj.get("BeginOffset") != null && !jsonObj.get("BeginOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BeginOffset"));
      }
      // validate the optional field `EndOffset`
      if (jsonObj.get("EndOffset") != null && !jsonObj.get("EndOffset").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EndOffset"));
      }
      // validate the optional field `Text`
      if (jsonObj.get("Text") != null && !jsonObj.get("Text").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Text"));
      }
      // validate the optional field `Traits`
      if (jsonObj.get("Traits") != null && !jsonObj.get("Traits").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Traits"));
      }
      // validate the optional field `SNOMEDCTConcepts`
      if (jsonObj.get("SNOMEDCTConcepts") != null && !jsonObj.get("SNOMEDCTConcepts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SNOMEDCTConcepts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SNOMEDCTAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SNOMEDCTAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SNOMEDCTAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SNOMEDCTAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<SNOMEDCTAttribute>() {
           @Override
           public void write(JsonWriter out, SNOMEDCTAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SNOMEDCTAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SNOMEDCTAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SNOMEDCTAttribute
   * @throws IOException if the JSON string is invalid with respect to SNOMEDCTAttribute
   */
  public static SNOMEDCTAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SNOMEDCTAttribute.class);
  }

  /**
   * Convert an instance of SNOMEDCTAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

