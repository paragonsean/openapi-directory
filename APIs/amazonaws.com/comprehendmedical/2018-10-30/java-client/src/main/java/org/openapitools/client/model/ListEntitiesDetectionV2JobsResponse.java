/*
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListEntitiesDetectionV2JobsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:31.822751-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListEntitiesDetectionV2JobsResponse {
  public static final String SERIALIZED_NAME_COMPREHEND_MEDICAL_ASYNC_JOB_PROPERTIES_LIST = "ComprehendMedicalAsyncJobPropertiesList";
  @SerializedName(SERIALIZED_NAME_COMPREHEND_MEDICAL_ASYNC_JOB_PROPERTIES_LIST)
  private List comprehendMedicalAsyncJobPropertiesList;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListEntitiesDetectionV2JobsResponse() {
  }

  public ListEntitiesDetectionV2JobsResponse comprehendMedicalAsyncJobPropertiesList(List comprehendMedicalAsyncJobPropertiesList) {
    this.comprehendMedicalAsyncJobPropertiesList = comprehendMedicalAsyncJobPropertiesList;
    return this;
  }

  /**
   * Get comprehendMedicalAsyncJobPropertiesList
   * @return comprehendMedicalAsyncJobPropertiesList
   */
  @javax.annotation.Nullable
  public List getComprehendMedicalAsyncJobPropertiesList() {
    return comprehendMedicalAsyncJobPropertiesList;
  }

  public void setComprehendMedicalAsyncJobPropertiesList(List comprehendMedicalAsyncJobPropertiesList) {
    this.comprehendMedicalAsyncJobPropertiesList = comprehendMedicalAsyncJobPropertiesList;
  }


  public ListEntitiesDetectionV2JobsResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListEntitiesDetectionV2JobsResponse listEntitiesDetectionV2JobsResponse = (ListEntitiesDetectionV2JobsResponse) o;
    return Objects.equals(this.comprehendMedicalAsyncJobPropertiesList, listEntitiesDetectionV2JobsResponse.comprehendMedicalAsyncJobPropertiesList) &&
        Objects.equals(this.nextToken, listEntitiesDetectionV2JobsResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comprehendMedicalAsyncJobPropertiesList, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListEntitiesDetectionV2JobsResponse {\n");
    sb.append("    comprehendMedicalAsyncJobPropertiesList: ").append(toIndentedString(comprehendMedicalAsyncJobPropertiesList)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ComprehendMedicalAsyncJobPropertiesList");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListEntitiesDetectionV2JobsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListEntitiesDetectionV2JobsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListEntitiesDetectionV2JobsResponse is not found in the empty JSON string", ListEntitiesDetectionV2JobsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListEntitiesDetectionV2JobsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListEntitiesDetectionV2JobsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ComprehendMedicalAsyncJobPropertiesList`
      if (jsonObj.get("ComprehendMedicalAsyncJobPropertiesList") != null && !jsonObj.get("ComprehendMedicalAsyncJobPropertiesList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ComprehendMedicalAsyncJobPropertiesList"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListEntitiesDetectionV2JobsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListEntitiesDetectionV2JobsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListEntitiesDetectionV2JobsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListEntitiesDetectionV2JobsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListEntitiesDetectionV2JobsResponse>() {
           @Override
           public void write(JsonWriter out, ListEntitiesDetectionV2JobsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListEntitiesDetectionV2JobsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListEntitiesDetectionV2JobsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListEntitiesDetectionV2JobsResponse
   * @throws IOException if the JSON string is invalid with respect to ListEntitiesDetectionV2JobsResponse
   */
  public static ListEntitiesDetectionV2JobsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListEntitiesDetectionV2JobsResponse.class);
  }

  /**
   * Convert an instance of ListEntitiesDetectionV2JobsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

