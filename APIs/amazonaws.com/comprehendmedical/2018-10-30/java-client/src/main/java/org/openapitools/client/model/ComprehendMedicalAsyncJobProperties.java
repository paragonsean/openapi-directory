/*
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ComprehendMedicalAsyncJobPropertiesInputDataConfig;
import org.openapitools.client.model.ComprehendMedicalAsyncJobPropertiesOutputDataConfig;
import org.openapitools.client.model.JobStatus;
import org.openapitools.client.model.LanguageCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about a detection job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:31.822751-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComprehendMedicalAsyncJobProperties {
  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_SUBMIT_TIME = "SubmitTime";
  @SerializedName(SERIALIZED_NAME_SUBMIT_TIME)
  private OffsetDateTime submitTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "ExpirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private OffsetDateTime expirationTime;

  public static final String SERIALIZED_NAME_INPUT_DATA_CONFIG = "InputDataConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_DATA_CONFIG)
  private ComprehendMedicalAsyncJobPropertiesInputDataConfig inputDataConfig;

  public static final String SERIALIZED_NAME_OUTPUT_DATA_CONFIG = "OutputDataConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DATA_CONFIG)
  private ComprehendMedicalAsyncJobPropertiesOutputDataConfig outputDataConfig;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCode languageCode;

  public static final String SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN = "DataAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_DATA_ACCESS_ROLE_ARN)
  private String dataAccessRoleArn;

  public static final String SERIALIZED_NAME_MANIFEST_FILE_PATH = "ManifestFilePath";
  @SerializedName(SERIALIZED_NAME_MANIFEST_FILE_PATH)
  private String manifestFilePath;

  public static final String SERIALIZED_NAME_KM_S_KEY = "KMSKey";
  @SerializedName(SERIALIZED_NAME_KM_S_KEY)
  private String kmSKey;

  public static final String SERIALIZED_NAME_MODEL_VERSION = "ModelVersion";
  @SerializedName(SERIALIZED_NAME_MODEL_VERSION)
  private String modelVersion;

  public ComprehendMedicalAsyncJobProperties() {
  }

  public ComprehendMedicalAsyncJobProperties jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public ComprehendMedicalAsyncJobProperties jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public ComprehendMedicalAsyncJobProperties jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public ComprehendMedicalAsyncJobProperties message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ComprehendMedicalAsyncJobProperties submitTime(OffsetDateTime submitTime) {
    this.submitTime = submitTime;
    return this;
  }

  /**
   * Get submitTime
   * @return submitTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmitTime() {
    return submitTime;
  }

  public void setSubmitTime(OffsetDateTime submitTime) {
    this.submitTime = submitTime;
  }


  public ComprehendMedicalAsyncJobProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ComprehendMedicalAsyncJobProperties expirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

  /**
   * Get expirationTime
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
  }


  public ComprehendMedicalAsyncJobProperties inputDataConfig(ComprehendMedicalAsyncJobPropertiesInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
    return this;
  }

  /**
   * Get inputDataConfig
   * @return inputDataConfig
   */
  @javax.annotation.Nullable
  public ComprehendMedicalAsyncJobPropertiesInputDataConfig getInputDataConfig() {
    return inputDataConfig;
  }

  public void setInputDataConfig(ComprehendMedicalAsyncJobPropertiesInputDataConfig inputDataConfig) {
    this.inputDataConfig = inputDataConfig;
  }


  public ComprehendMedicalAsyncJobProperties outputDataConfig(ComprehendMedicalAsyncJobPropertiesOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
    return this;
  }

  /**
   * Get outputDataConfig
   * @return outputDataConfig
   */
  @javax.annotation.Nullable
  public ComprehendMedicalAsyncJobPropertiesOutputDataConfig getOutputDataConfig() {
    return outputDataConfig;
  }

  public void setOutputDataConfig(ComprehendMedicalAsyncJobPropertiesOutputDataConfig outputDataConfig) {
    this.outputDataConfig = outputDataConfig;
  }


  public ComprehendMedicalAsyncJobProperties languageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public LanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public ComprehendMedicalAsyncJobProperties dataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
    return this;
  }

  /**
   * Get dataAccessRoleArn
   * @return dataAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getDataAccessRoleArn() {
    return dataAccessRoleArn;
  }

  public void setDataAccessRoleArn(String dataAccessRoleArn) {
    this.dataAccessRoleArn = dataAccessRoleArn;
  }


  public ComprehendMedicalAsyncJobProperties manifestFilePath(String manifestFilePath) {
    this.manifestFilePath = manifestFilePath;
    return this;
  }

  /**
   * Get manifestFilePath
   * @return manifestFilePath
   */
  @javax.annotation.Nullable
  public String getManifestFilePath() {
    return manifestFilePath;
  }

  public void setManifestFilePath(String manifestFilePath) {
    this.manifestFilePath = manifestFilePath;
  }


  public ComprehendMedicalAsyncJobProperties kmSKey(String kmSKey) {
    this.kmSKey = kmSKey;
    return this;
  }

  /**
   * Get kmSKey
   * @return kmSKey
   */
  @javax.annotation.Nullable
  public String getKmSKey() {
    return kmSKey;
  }

  public void setKmSKey(String kmSKey) {
    this.kmSKey = kmSKey;
  }


  public ComprehendMedicalAsyncJobProperties modelVersion(String modelVersion) {
    this.modelVersion = modelVersion;
    return this;
  }

  /**
   * Get modelVersion
   * @return modelVersion
   */
  @javax.annotation.Nullable
  public String getModelVersion() {
    return modelVersion;
  }

  public void setModelVersion(String modelVersion) {
    this.modelVersion = modelVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComprehendMedicalAsyncJobProperties comprehendMedicalAsyncJobProperties = (ComprehendMedicalAsyncJobProperties) o;
    return Objects.equals(this.jobId, comprehendMedicalAsyncJobProperties.jobId) &&
        Objects.equals(this.jobName, comprehendMedicalAsyncJobProperties.jobName) &&
        Objects.equals(this.jobStatus, comprehendMedicalAsyncJobProperties.jobStatus) &&
        Objects.equals(this.message, comprehendMedicalAsyncJobProperties.message) &&
        Objects.equals(this.submitTime, comprehendMedicalAsyncJobProperties.submitTime) &&
        Objects.equals(this.endTime, comprehendMedicalAsyncJobProperties.endTime) &&
        Objects.equals(this.expirationTime, comprehendMedicalAsyncJobProperties.expirationTime) &&
        Objects.equals(this.inputDataConfig, comprehendMedicalAsyncJobProperties.inputDataConfig) &&
        Objects.equals(this.outputDataConfig, comprehendMedicalAsyncJobProperties.outputDataConfig) &&
        Objects.equals(this.languageCode, comprehendMedicalAsyncJobProperties.languageCode) &&
        Objects.equals(this.dataAccessRoleArn, comprehendMedicalAsyncJobProperties.dataAccessRoleArn) &&
        Objects.equals(this.manifestFilePath, comprehendMedicalAsyncJobProperties.manifestFilePath) &&
        Objects.equals(this.kmSKey, comprehendMedicalAsyncJobProperties.kmSKey) &&
        Objects.equals(this.modelVersion, comprehendMedicalAsyncJobProperties.modelVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, jobName, jobStatus, message, submitTime, endTime, expirationTime, inputDataConfig, outputDataConfig, languageCode, dataAccessRoleArn, manifestFilePath, kmSKey, modelVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComprehendMedicalAsyncJobProperties {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    submitTime: ").append(toIndentedString(submitTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    inputDataConfig: ").append(toIndentedString(inputDataConfig)).append("\n");
    sb.append("    outputDataConfig: ").append(toIndentedString(outputDataConfig)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    dataAccessRoleArn: ").append(toIndentedString(dataAccessRoleArn)).append("\n");
    sb.append("    manifestFilePath: ").append(toIndentedString(manifestFilePath)).append("\n");
    sb.append("    kmSKey: ").append(toIndentedString(kmSKey)).append("\n");
    sb.append("    modelVersion: ").append(toIndentedString(modelVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobId");
    openapiFields.add("JobName");
    openapiFields.add("JobStatus");
    openapiFields.add("Message");
    openapiFields.add("SubmitTime");
    openapiFields.add("EndTime");
    openapiFields.add("ExpirationTime");
    openapiFields.add("InputDataConfig");
    openapiFields.add("OutputDataConfig");
    openapiFields.add("LanguageCode");
    openapiFields.add("DataAccessRoleArn");
    openapiFields.add("ManifestFilePath");
    openapiFields.add("KMSKey");
    openapiFields.add("ModelVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComprehendMedicalAsyncJobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComprehendMedicalAsyncJobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComprehendMedicalAsyncJobProperties is not found in the empty JSON string", ComprehendMedicalAsyncJobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComprehendMedicalAsyncJobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComprehendMedicalAsyncJobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobId`
      if (jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobId"));
      }
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `JobStatus`
      if (jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("JobStatus"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
      // validate the optional field `SubmitTime`
      if (jsonObj.get("SubmitTime") != null && !jsonObj.get("SubmitTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmitTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `ExpirationTime`
      if (jsonObj.get("ExpirationTime") != null && !jsonObj.get("ExpirationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ExpirationTime"));
      }
      // validate the optional field `InputDataConfig`
      if (jsonObj.get("InputDataConfig") != null && !jsonObj.get("InputDataConfig").isJsonNull()) {
        ComprehendMedicalAsyncJobPropertiesInputDataConfig.validateJsonElement(jsonObj.get("InputDataConfig"));
      }
      // validate the optional field `OutputDataConfig`
      if (jsonObj.get("OutputDataConfig") != null && !jsonObj.get("OutputDataConfig").isJsonNull()) {
        ComprehendMedicalAsyncJobPropertiesOutputDataConfig.validateJsonElement(jsonObj.get("OutputDataConfig"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        LanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `DataAccessRoleArn`
      if (jsonObj.get("DataAccessRoleArn") != null && !jsonObj.get("DataAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataAccessRoleArn"));
      }
      // validate the optional field `ManifestFilePath`
      if (jsonObj.get("ManifestFilePath") != null && !jsonObj.get("ManifestFilePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ManifestFilePath"));
      }
      // validate the optional field `KMSKey`
      if (jsonObj.get("KMSKey") != null && !jsonObj.get("KMSKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KMSKey"));
      }
      // validate the optional field `ModelVersion`
      if (jsonObj.get("ModelVersion") != null && !jsonObj.get("ModelVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModelVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComprehendMedicalAsyncJobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComprehendMedicalAsyncJobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComprehendMedicalAsyncJobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComprehendMedicalAsyncJobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ComprehendMedicalAsyncJobProperties>() {
           @Override
           public void write(JsonWriter out, ComprehendMedicalAsyncJobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComprehendMedicalAsyncJobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComprehendMedicalAsyncJobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComprehendMedicalAsyncJobProperties
   * @throws IOException if the JSON string is invalid with respect to ComprehendMedicalAsyncJobProperties
   */
  public static ComprehendMedicalAsyncJobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComprehendMedicalAsyncJobProperties.class);
  }

  /**
   * Convert an instance of ComprehendMedicalAsyncJobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

