/*
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information for filtering a list of detection jobs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:31.822751-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ComprehendMedicalAsyncJobFilter {
  public static final String SERIALIZED_NAME_JOB_NAME = "JobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_SUBMIT_TIME_BEFORE = "SubmitTimeBefore";
  @SerializedName(SERIALIZED_NAME_SUBMIT_TIME_BEFORE)
  private OffsetDateTime submitTimeBefore;

  public static final String SERIALIZED_NAME_SUBMIT_TIME_AFTER = "SubmitTimeAfter";
  @SerializedName(SERIALIZED_NAME_SUBMIT_TIME_AFTER)
  private OffsetDateTime submitTimeAfter;

  public ComprehendMedicalAsyncJobFilter() {
  }

  public ComprehendMedicalAsyncJobFilter jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * Get jobName
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public ComprehendMedicalAsyncJobFilter jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public ComprehendMedicalAsyncJobFilter submitTimeBefore(OffsetDateTime submitTimeBefore) {
    this.submitTimeBefore = submitTimeBefore;
    return this;
  }

  /**
   * Get submitTimeBefore
   * @return submitTimeBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmitTimeBefore() {
    return submitTimeBefore;
  }

  public void setSubmitTimeBefore(OffsetDateTime submitTimeBefore) {
    this.submitTimeBefore = submitTimeBefore;
  }


  public ComprehendMedicalAsyncJobFilter submitTimeAfter(OffsetDateTime submitTimeAfter) {
    this.submitTimeAfter = submitTimeAfter;
    return this;
  }

  /**
   * Get submitTimeAfter
   * @return submitTimeAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmitTimeAfter() {
    return submitTimeAfter;
  }

  public void setSubmitTimeAfter(OffsetDateTime submitTimeAfter) {
    this.submitTimeAfter = submitTimeAfter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComprehendMedicalAsyncJobFilter comprehendMedicalAsyncJobFilter = (ComprehendMedicalAsyncJobFilter) o;
    return Objects.equals(this.jobName, comprehendMedicalAsyncJobFilter.jobName) &&
        Objects.equals(this.jobStatus, comprehendMedicalAsyncJobFilter.jobStatus) &&
        Objects.equals(this.submitTimeBefore, comprehendMedicalAsyncJobFilter.submitTimeBefore) &&
        Objects.equals(this.submitTimeAfter, comprehendMedicalAsyncJobFilter.submitTimeAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobName, jobStatus, submitTimeBefore, submitTimeAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComprehendMedicalAsyncJobFilter {\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    submitTimeBefore: ").append(toIndentedString(submitTimeBefore)).append("\n");
    sb.append("    submitTimeAfter: ").append(toIndentedString(submitTimeAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobName");
    openapiFields.add("JobStatus");
    openapiFields.add("SubmitTimeBefore");
    openapiFields.add("SubmitTimeAfter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ComprehendMedicalAsyncJobFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ComprehendMedicalAsyncJobFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ComprehendMedicalAsyncJobFilter is not found in the empty JSON string", ComprehendMedicalAsyncJobFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ComprehendMedicalAsyncJobFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ComprehendMedicalAsyncJobFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobName`
      if (jsonObj.get("JobName") != null && !jsonObj.get("JobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobName"));
      }
      // validate the optional field `JobStatus`
      if (jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) {
        JobStatus.validateJsonElement(jsonObj.get("JobStatus"));
      }
      // validate the optional field `SubmitTimeBefore`
      if (jsonObj.get("SubmitTimeBefore") != null && !jsonObj.get("SubmitTimeBefore").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmitTimeBefore"));
      }
      // validate the optional field `SubmitTimeAfter`
      if (jsonObj.get("SubmitTimeAfter") != null && !jsonObj.get("SubmitTimeAfter").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmitTimeAfter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ComprehendMedicalAsyncJobFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ComprehendMedicalAsyncJobFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ComprehendMedicalAsyncJobFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ComprehendMedicalAsyncJobFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ComprehendMedicalAsyncJobFilter>() {
           @Override
           public void write(JsonWriter out, ComprehendMedicalAsyncJobFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ComprehendMedicalAsyncJobFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ComprehendMedicalAsyncJobFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ComprehendMedicalAsyncJobFilter
   * @throws IOException if the JSON string is invalid with respect to ComprehendMedicalAsyncJobFilter
   */
  public static ComprehendMedicalAsyncJobFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ComprehendMedicalAsyncJobFilter.class);
  }

  /**
   * Convert an instance of ComprehendMedicalAsyncJobFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

