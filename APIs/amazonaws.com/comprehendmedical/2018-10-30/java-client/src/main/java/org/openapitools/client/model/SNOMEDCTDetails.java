/*
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The information about the revision of the SNOMED-CT ontology in the response. Specifically, the details include the SNOMED-CT edition, language, and version date. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:31.822751-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SNOMEDCTDetails {
  public static final String SERIALIZED_NAME_EDITION = "Edition";
  @SerializedName(SERIALIZED_NAME_EDITION)
  private String edition;

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_VERSION_DATE = "VersionDate";
  @SerializedName(SERIALIZED_NAME_VERSION_DATE)
  private String versionDate;

  public SNOMEDCTDetails() {
  }

  public SNOMEDCTDetails edition(String edition) {
    this.edition = edition;
    return this;
  }

  /**
   * Get edition
   * @return edition
   */
  @javax.annotation.Nullable
  public String getEdition() {
    return edition;
  }

  public void setEdition(String edition) {
    this.edition = edition;
  }


  public SNOMEDCTDetails language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public SNOMEDCTDetails versionDate(String versionDate) {
    this.versionDate = versionDate;
    return this;
  }

  /**
   * Get versionDate
   * @return versionDate
   */
  @javax.annotation.Nullable
  public String getVersionDate() {
    return versionDate;
  }

  public void setVersionDate(String versionDate) {
    this.versionDate = versionDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SNOMEDCTDetails snOMEDCTDetails = (SNOMEDCTDetails) o;
    return Objects.equals(this.edition, snOMEDCTDetails.edition) &&
        Objects.equals(this.language, snOMEDCTDetails.language) &&
        Objects.equals(this.versionDate, snOMEDCTDetails.versionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(edition, language, versionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SNOMEDCTDetails {\n");
    sb.append("    edition: ").append(toIndentedString(edition)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    versionDate: ").append(toIndentedString(versionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Edition");
    openapiFields.add("Language");
    openapiFields.add("VersionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SNOMEDCTDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SNOMEDCTDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SNOMEDCTDetails is not found in the empty JSON string", SNOMEDCTDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SNOMEDCTDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SNOMEDCTDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Edition`
      if (jsonObj.get("Edition") != null && !jsonObj.get("Edition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Edition"));
      }
      // validate the optional field `Language`
      if (jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Language"));
      }
      // validate the optional field `VersionDate`
      if (jsonObj.get("VersionDate") != null && !jsonObj.get("VersionDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VersionDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SNOMEDCTDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SNOMEDCTDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SNOMEDCTDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SNOMEDCTDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SNOMEDCTDetails>() {
           @Override
           public void write(JsonWriter out, SNOMEDCTDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SNOMEDCTDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SNOMEDCTDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SNOMEDCTDetails
   * @throws IOException if the JSON string is invalid with respect to SNOMEDCTDetails
   */
  public static SNOMEDCTDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SNOMEDCTDetails.class);
  }

  /**
   * Convert an instance of SNOMEDCTDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

