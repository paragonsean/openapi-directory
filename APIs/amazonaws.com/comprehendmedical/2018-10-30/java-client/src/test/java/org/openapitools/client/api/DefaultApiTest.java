/*
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DescribeEntitiesDetectionV2JobRequest;
import org.openapitools.client.model.DescribeEntitiesDetectionV2JobResponse;
import org.openapitools.client.model.DescribeICD10CMInferenceJobRequest;
import org.openapitools.client.model.DescribeICD10CMInferenceJobResponse;
import org.openapitools.client.model.DescribePHIDetectionJobRequest;
import org.openapitools.client.model.DescribePHIDetectionJobResponse;
import org.openapitools.client.model.DescribeRxNormInferenceJobRequest;
import org.openapitools.client.model.DescribeRxNormInferenceJobResponse;
import org.openapitools.client.model.DescribeSNOMEDCTInferenceJobRequest;
import org.openapitools.client.model.DescribeSNOMEDCTInferenceJobResponse;
import org.openapitools.client.model.DetectEntitiesRequest;
import org.openapitools.client.model.DetectEntitiesResponse;
import org.openapitools.client.model.DetectEntitiesV2Request;
import org.openapitools.client.model.DetectEntitiesV2Response;
import org.openapitools.client.model.DetectPHIRequest;
import org.openapitools.client.model.DetectPHIResponse;
import org.openapitools.client.model.InferICD10CMRequest;
import org.openapitools.client.model.InferICD10CMResponse;
import org.openapitools.client.model.InferRxNormRequest;
import org.openapitools.client.model.InferRxNormResponse;
import org.openapitools.client.model.InferSNOMEDCTRequest;
import org.openapitools.client.model.InferSNOMEDCTResponse;
import org.openapitools.client.model.ListEntitiesDetectionV2JobsRequest;
import org.openapitools.client.model.ListEntitiesDetectionV2JobsResponse;
import org.openapitools.client.model.ListICD10CMInferenceJobsRequest;
import org.openapitools.client.model.ListICD10CMInferenceJobsResponse;
import org.openapitools.client.model.ListPHIDetectionJobsRequest;
import org.openapitools.client.model.ListPHIDetectionJobsResponse;
import org.openapitools.client.model.ListRxNormInferenceJobsRequest;
import org.openapitools.client.model.ListRxNormInferenceJobsResponse;
import org.openapitools.client.model.ListSNOMEDCTInferenceJobsRequest;
import org.openapitools.client.model.ListSNOMEDCTInferenceJobsResponse;
import org.openapitools.client.model.StartEntitiesDetectionV2JobRequest;
import org.openapitools.client.model.StartEntitiesDetectionV2JobResponse;
import org.openapitools.client.model.StartICD10CMInferenceJobRequest;
import org.openapitools.client.model.StartICD10CMInferenceJobResponse;
import org.openapitools.client.model.StartPHIDetectionJobRequest;
import org.openapitools.client.model.StartPHIDetectionJobResponse;
import org.openapitools.client.model.StartRxNormInferenceJobRequest;
import org.openapitools.client.model.StartRxNormInferenceJobResponse;
import org.openapitools.client.model.StartSNOMEDCTInferenceJobRequest;
import org.openapitools.client.model.StartSNOMEDCTInferenceJobResponse;
import org.openapitools.client.model.StopEntitiesDetectionV2JobRequest;
import org.openapitools.client.model.StopEntitiesDetectionV2JobResponse;
import org.openapitools.client.model.StopICD10CMInferenceJobRequest;
import org.openapitools.client.model.StopICD10CMInferenceJobResponse;
import org.openapitools.client.model.StopPHIDetectionJobRequest;
import org.openapitools.client.model.StopPHIDetectionJobResponse;
import org.openapitools.client.model.StopRxNormInferenceJobRequest;
import org.openapitools.client.model.StopRxNormInferenceJobResponse;
import org.openapitools.client.model.StopSNOMEDCTInferenceJobRequest;
import org.openapitools.client.model.StopSNOMEDCTInferenceJobResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Gets the properties associated with a medical entities detection job. Use this operation to get the status of a detection job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEntitiesDetectionV2JobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEntitiesDetectionV2JobRequest describeEntitiesDetectionV2JobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEntitiesDetectionV2JobResponse response = api.describeEntitiesDetectionV2Job(xAmzTarget, describeEntitiesDetectionV2JobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the properties associated with an InferICD10CM job. Use this operation to get the status of an inference job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeICD10CMInferenceJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeICD10CMInferenceJobRequest describeICD10CMInferenceJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeICD10CMInferenceJobResponse response = api.describeICD10CMInferenceJob(xAmzTarget, describeICD10CMInferenceJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the properties associated with a protected health information (PHI) detection job. Use this operation to get the status of a detection job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePHIDetectionJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribePHIDetectionJobRequest describePHIDetectionJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePHIDetectionJobResponse response = api.describePHIDetectionJob(xAmzTarget, describePHIDetectionJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the properties associated with an InferRxNorm job. Use this operation to get the status of an inference job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRxNormInferenceJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRxNormInferenceJobRequest describeRxNormInferenceJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRxNormInferenceJobResponse response = api.describeRxNormInferenceJob(xAmzTarget, describeRxNormInferenceJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets the properties associated with an InferSNOMEDCT job. Use this operation to get the status of an inference job. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSNOMEDCTInferenceJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSNOMEDCTInferenceJobRequest describeSNOMEDCTInferenceJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeSNOMEDCTInferenceJobResponse response = api.describeSNOMEDCTInferenceJob(xAmzTarget, describeSNOMEDCTInferenceJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The &lt;code&gt;DetectEntities&lt;/code&gt; operation is deprecated. You should use the &lt;a&gt;DetectEntitiesV2&lt;/a&gt; operation instead.&lt;/p&gt; &lt;p&gt;Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detectEntitiesTest() throws ApiException {
        String xAmzTarget = null;
        DetectEntitiesRequest detectEntitiesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetectEntitiesResponse response = api.detectEntities(xAmzTarget, detectEntitiesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information. Amazon Comprehend Medical only detects medical entities in English language texts.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DetectEntitiesV2&lt;/code&gt; operation replaces the &lt;a&gt;DetectEntities&lt;/a&gt; operation. This new action uses a different model for determining the entities in your medical text and changes the way that some entities are returned in the output. You should use the &lt;code&gt;DetectEntitiesV2&lt;/code&gt; operation in all new applications.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DetectEntitiesV2&lt;/code&gt; operation returns the &lt;code&gt;Acuity&lt;/code&gt; and &lt;code&gt;Direction&lt;/code&gt; entities as attributes instead of types. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detectEntitiesV2Test() throws ApiException {
        String xAmzTarget = null;
        DetectEntitiesV2Request detectEntitiesV2Request = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetectEntitiesV2Response response = api.detectEntitiesV2(xAmzTarget, detectEntitiesV2Request, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Inspects the clinical text for protected health information (PHI) entities and returns the entity category, location, and confidence score for each entity. Amazon Comprehend Medical only detects entities in English language texts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detectPHITest() throws ApiException {
        String xAmzTarget = null;
        DetectPHIRequest detectPHIRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetectPHIResponse response = api.detectPHI(xAmzTarget, detectPHIRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * InferICD10CM detects medical conditions as entities listed in a patient record and links those entities to normalized concept identifiers in the ICD-10-CM knowledge base from the Centers for Disease Control. Amazon Comprehend Medical only detects medical entities in English language texts. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inferICD10CMTest() throws ApiException {
        String xAmzTarget = null;
        InferICD10CMRequest inferICD10CMRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InferICD10CMResponse response = api.inferICD10CM(xAmzTarget, inferICD10CMRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * InferRxNorm detects medications as entities listed in a patient record and links to the normalized concept identifiers in the RxNorm database from the National Library of Medicine. Amazon Comprehend Medical only detects medical entities in English language texts. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inferRxNormTest() throws ApiException {
        String xAmzTarget = null;
        InferRxNormRequest inferRxNormRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InferRxNormResponse response = api.inferRxNorm(xAmzTarget, inferRxNormRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  InferSNOMEDCT detects possible medical concepts as entities and links them to codes from the Systematized Nomenclature of Medicine, Clinical Terms (SNOMED-CT) ontology
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inferSNOMEDCTTest() throws ApiException {
        String xAmzTarget = null;
        InferSNOMEDCTRequest inferSNOMEDCTRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InferSNOMEDCTResponse response = api.inferSNOMEDCT(xAmzTarget, inferSNOMEDCTRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a list of medical entity detection jobs that you have submitted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEntitiesDetectionV2JobsTest() throws ApiException {
        String xAmzTarget = null;
        ListEntitiesDetectionV2JobsRequest listEntitiesDetectionV2JobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListEntitiesDetectionV2JobsResponse response = api.listEntitiesDetectionV2Jobs(xAmzTarget, listEntitiesDetectionV2JobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a list of InferICD10CM jobs that you have submitted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listICD10CMInferenceJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListICD10CMInferenceJobsRequest listICD10CMInferenceJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListICD10CMInferenceJobsResponse response = api.listICD10CMInferenceJobs(xAmzTarget, listICD10CMInferenceJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a list of protected health information (PHI) detection jobs you have submitted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPHIDetectionJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListPHIDetectionJobsRequest listPHIDetectionJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListPHIDetectionJobsResponse response = api.listPHIDetectionJobs(xAmzTarget, listPHIDetectionJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a list of InferRxNorm jobs that you have submitted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRxNormInferenceJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListRxNormInferenceJobsRequest listRxNormInferenceJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListRxNormInferenceJobsResponse response = api.listRxNormInferenceJobs(xAmzTarget, listRxNormInferenceJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Gets a list of InferSNOMEDCT jobs a user has submitted. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSNOMEDCTInferenceJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListSNOMEDCTInferenceJobsRequest listSNOMEDCTInferenceJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListSNOMEDCTInferenceJobsResponse response = api.listSNOMEDCTInferenceJobs(xAmzTarget, listSNOMEDCTInferenceJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an asynchronous medical entity detection job for a collection of documents. Use the &lt;code&gt;DescribeEntitiesDetectionV2Job&lt;/code&gt; operation to track the status of a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startEntitiesDetectionV2JobTest() throws ApiException {
        String xAmzTarget = null;
        StartEntitiesDetectionV2JobRequest startEntitiesDetectionV2JobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartEntitiesDetectionV2JobResponse response = api.startEntitiesDetectionV2Job(xAmzTarget, startEntitiesDetectionV2JobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an asynchronous job to detect medical conditions and link them to the ICD-10-CM ontology. Use the &lt;code&gt;DescribeICD10CMInferenceJob&lt;/code&gt; operation to track the status of a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startICD10CMInferenceJobTest() throws ApiException {
        String xAmzTarget = null;
        StartICD10CMInferenceJobRequest startICD10CMInferenceJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartICD10CMInferenceJobResponse response = api.startICD10CMInferenceJob(xAmzTarget, startICD10CMInferenceJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an asynchronous job to detect protected health information (PHI). Use the &lt;code&gt;DescribePHIDetectionJob&lt;/code&gt; operation to track the status of a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startPHIDetectionJobTest() throws ApiException {
        String xAmzTarget = null;
        StartPHIDetectionJobRequest startPHIDetectionJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartPHIDetectionJobResponse response = api.startPHIDetectionJob(xAmzTarget, startPHIDetectionJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an asynchronous job to detect medication entities and link them to the RxNorm ontology. Use the &lt;code&gt;DescribeRxNormInferenceJob&lt;/code&gt; operation to track the status of a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startRxNormInferenceJobTest() throws ApiException {
        String xAmzTarget = null;
        StartRxNormInferenceJobRequest startRxNormInferenceJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartRxNormInferenceJobResponse response = api.startRxNormInferenceJob(xAmzTarget, startRxNormInferenceJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Starts an asynchronous job to detect medical concepts and link them to the SNOMED-CT ontology. Use the DescribeSNOMEDCTInferenceJob operation to track the status of a job. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startSNOMEDCTInferenceJobTest() throws ApiException {
        String xAmzTarget = null;
        StartSNOMEDCTInferenceJobRequest startSNOMEDCTInferenceJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartSNOMEDCTInferenceJobResponse response = api.startSNOMEDCTInferenceJob(xAmzTarget, startSNOMEDCTInferenceJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a medical entities detection job in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopEntitiesDetectionV2JobTest() throws ApiException {
        String xAmzTarget = null;
        StopEntitiesDetectionV2JobRequest stopEntitiesDetectionV2JobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopEntitiesDetectionV2JobResponse response = api.stopEntitiesDetectionV2Job(xAmzTarget, stopEntitiesDetectionV2JobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops an InferICD10CM inference job in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopICD10CMInferenceJobTest() throws ApiException {
        String xAmzTarget = null;
        StopICD10CMInferenceJobRequest stopICD10CMInferenceJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopICD10CMInferenceJobResponse response = api.stopICD10CMInferenceJob(xAmzTarget, stopICD10CMInferenceJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a protected health information (PHI) detection job in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopPHIDetectionJobTest() throws ApiException {
        String xAmzTarget = null;
        StopPHIDetectionJobRequest stopPHIDetectionJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopPHIDetectionJobResponse response = api.stopPHIDetectionJob(xAmzTarget, stopPHIDetectionJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops an InferRxNorm inference job in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopRxNormInferenceJobTest() throws ApiException {
        String xAmzTarget = null;
        StopRxNormInferenceJobRequest stopRxNormInferenceJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopRxNormInferenceJobResponse response = api.stopRxNormInferenceJob(xAmzTarget, stopRxNormInferenceJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Stops an InferSNOMEDCT inference job in progress. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopSNOMEDCTInferenceJobTest() throws ApiException {
        String xAmzTarget = null;
        StopSNOMEDCTInferenceJobRequest stopSNOMEDCTInferenceJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopSNOMEDCTInferenceJobResponse response = api.stopSNOMEDCTInferenceJob(xAmzTarget, stopSNOMEDCTInferenceJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
