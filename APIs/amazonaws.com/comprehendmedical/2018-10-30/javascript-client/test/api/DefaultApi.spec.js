/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsComprehendMedical);
  }
}(this, function(expect, AwsComprehendMedical) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsComprehendMedical.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('describeEntitiesDetectionV2Job', function() {
      it('should call describeEntitiesDetectionV2Job successfully', function(done) {
        //uncomment below and update the code to test describeEntitiesDetectionV2Job
        //instance.describeEntitiesDetectionV2Job(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeICD10CMInferenceJob', function() {
      it('should call describeICD10CMInferenceJob successfully', function(done) {
        //uncomment below and update the code to test describeICD10CMInferenceJob
        //instance.describeICD10CMInferenceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePHIDetectionJob', function() {
      it('should call describePHIDetectionJob successfully', function(done) {
        //uncomment below and update the code to test describePHIDetectionJob
        //instance.describePHIDetectionJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRxNormInferenceJob', function() {
      it('should call describeRxNormInferenceJob successfully', function(done) {
        //uncomment below and update the code to test describeRxNormInferenceJob
        //instance.describeRxNormInferenceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSNOMEDCTInferenceJob', function() {
      it('should call describeSNOMEDCTInferenceJob successfully', function(done) {
        //uncomment below and update the code to test describeSNOMEDCTInferenceJob
        //instance.describeSNOMEDCTInferenceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectEntities', function() {
      it('should call detectEntities successfully', function(done) {
        //uncomment below and update the code to test detectEntities
        //instance.detectEntities(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectEntitiesV2', function() {
      it('should call detectEntitiesV2 successfully', function(done) {
        //uncomment below and update the code to test detectEntitiesV2
        //instance.detectEntitiesV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detectPHI', function() {
      it('should call detectPHI successfully', function(done) {
        //uncomment below and update the code to test detectPHI
        //instance.detectPHI(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inferICD10CM', function() {
      it('should call inferICD10CM successfully', function(done) {
        //uncomment below and update the code to test inferICD10CM
        //instance.inferICD10CM(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inferRxNorm', function() {
      it('should call inferRxNorm successfully', function(done) {
        //uncomment below and update the code to test inferRxNorm
        //instance.inferRxNorm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inferSNOMEDCT', function() {
      it('should call inferSNOMEDCT successfully', function(done) {
        //uncomment below and update the code to test inferSNOMEDCT
        //instance.inferSNOMEDCT(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEntitiesDetectionV2Jobs', function() {
      it('should call listEntitiesDetectionV2Jobs successfully', function(done) {
        //uncomment below and update the code to test listEntitiesDetectionV2Jobs
        //instance.listEntitiesDetectionV2Jobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listICD10CMInferenceJobs', function() {
      it('should call listICD10CMInferenceJobs successfully', function(done) {
        //uncomment below and update the code to test listICD10CMInferenceJobs
        //instance.listICD10CMInferenceJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPHIDetectionJobs', function() {
      it('should call listPHIDetectionJobs successfully', function(done) {
        //uncomment below and update the code to test listPHIDetectionJobs
        //instance.listPHIDetectionJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRxNormInferenceJobs', function() {
      it('should call listRxNormInferenceJobs successfully', function(done) {
        //uncomment below and update the code to test listRxNormInferenceJobs
        //instance.listRxNormInferenceJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSNOMEDCTInferenceJobs', function() {
      it('should call listSNOMEDCTInferenceJobs successfully', function(done) {
        //uncomment below and update the code to test listSNOMEDCTInferenceJobs
        //instance.listSNOMEDCTInferenceJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startEntitiesDetectionV2Job', function() {
      it('should call startEntitiesDetectionV2Job successfully', function(done) {
        //uncomment below and update the code to test startEntitiesDetectionV2Job
        //instance.startEntitiesDetectionV2Job(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startICD10CMInferenceJob', function() {
      it('should call startICD10CMInferenceJob successfully', function(done) {
        //uncomment below and update the code to test startICD10CMInferenceJob
        //instance.startICD10CMInferenceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startPHIDetectionJob', function() {
      it('should call startPHIDetectionJob successfully', function(done) {
        //uncomment below and update the code to test startPHIDetectionJob
        //instance.startPHIDetectionJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startRxNormInferenceJob', function() {
      it('should call startRxNormInferenceJob successfully', function(done) {
        //uncomment below and update the code to test startRxNormInferenceJob
        //instance.startRxNormInferenceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startSNOMEDCTInferenceJob', function() {
      it('should call startSNOMEDCTInferenceJob successfully', function(done) {
        //uncomment below and update the code to test startSNOMEDCTInferenceJob
        //instance.startSNOMEDCTInferenceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopEntitiesDetectionV2Job', function() {
      it('should call stopEntitiesDetectionV2Job successfully', function(done) {
        //uncomment below and update the code to test stopEntitiesDetectionV2Job
        //instance.stopEntitiesDetectionV2Job(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopICD10CMInferenceJob', function() {
      it('should call stopICD10CMInferenceJob successfully', function(done) {
        //uncomment below and update the code to test stopICD10CMInferenceJob
        //instance.stopICD10CMInferenceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopPHIDetectionJob', function() {
      it('should call stopPHIDetectionJob successfully', function(done) {
        //uncomment below and update the code to test stopPHIDetectionJob
        //instance.stopPHIDetectionJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopRxNormInferenceJob', function() {
      it('should call stopRxNormInferenceJob successfully', function(done) {
        //uncomment below and update the code to test stopRxNormInferenceJob
        //instance.stopRxNormInferenceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopSNOMEDCTInferenceJob', function() {
      it('should call stopSNOMEDCTInferenceJob successfully', function(done) {
        //uncomment below and update the code to test stopSNOMEDCTInferenceJob
        //instance.stopSNOMEDCTInferenceJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
