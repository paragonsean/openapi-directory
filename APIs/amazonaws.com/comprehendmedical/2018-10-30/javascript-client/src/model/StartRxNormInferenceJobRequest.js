/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LanguageCode from './LanguageCode';
import StartICD10CMInferenceJobRequestInputDataConfig from './StartICD10CMInferenceJobRequestInputDataConfig';
import StartICD10CMInferenceJobRequestOutputDataConfig from './StartICD10CMInferenceJobRequestOutputDataConfig';

/**
 * The StartRxNormInferenceJobRequest model module.
 * @module model/StartRxNormInferenceJobRequest
 * @version 2018-10-30
 */
class StartRxNormInferenceJobRequest {
    /**
     * Constructs a new <code>StartRxNormInferenceJobRequest</code>.
     * @alias module:model/StartRxNormInferenceJobRequest
     * @param inputDataConfig {module:model/StartICD10CMInferenceJobRequestInputDataConfig} 
     * @param outputDataConfig {module:model/StartICD10CMInferenceJobRequestOutputDataConfig} 
     * @param dataAccessRoleArn {String} 
     * @param languageCode {module:model/LanguageCode} 
     */
    constructor(inputDataConfig, outputDataConfig, dataAccessRoleArn, languageCode) { 
        
        StartRxNormInferenceJobRequest.initialize(this, inputDataConfig, outputDataConfig, dataAccessRoleArn, languageCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inputDataConfig, outputDataConfig, dataAccessRoleArn, languageCode) { 
        obj['InputDataConfig'] = inputDataConfig;
        obj['OutputDataConfig'] = outputDataConfig;
        obj['DataAccessRoleArn'] = dataAccessRoleArn;
        obj['LanguageCode'] = languageCode;
    }

    /**
     * Constructs a <code>StartRxNormInferenceJobRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartRxNormInferenceJobRequest} obj Optional instance to populate.
     * @return {module:model/StartRxNormInferenceJobRequest} The populated <code>StartRxNormInferenceJobRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartRxNormInferenceJobRequest();

            if (data.hasOwnProperty('InputDataConfig')) {
                obj['InputDataConfig'] = StartICD10CMInferenceJobRequestInputDataConfig.constructFromObject(data['InputDataConfig']);
            }
            if (data.hasOwnProperty('OutputDataConfig')) {
                obj['OutputDataConfig'] = StartICD10CMInferenceJobRequestOutputDataConfig.constructFromObject(data['OutputDataConfig']);
            }
            if (data.hasOwnProperty('DataAccessRoleArn')) {
                obj['DataAccessRoleArn'] = ApiClient.convertToType(data['DataAccessRoleArn'], 'String');
            }
            if (data.hasOwnProperty('JobName')) {
                obj['JobName'] = ApiClient.convertToType(data['JobName'], 'String');
            }
            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('KMSKey')) {
                obj['KMSKey'] = ApiClient.convertToType(data['KMSKey'], 'String');
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], LanguageCode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartRxNormInferenceJobRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartRxNormInferenceJobRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartRxNormInferenceJobRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `InputDataConfig`
        if (data['InputDataConfig']) { // data not null
          StartICD10CMInferenceJobRequestInputDataConfig.validateJSON(data['InputDataConfig']);
        }
        // validate the optional field `OutputDataConfig`
        if (data['OutputDataConfig']) { // data not null
          StartICD10CMInferenceJobRequestOutputDataConfig.validateJSON(data['OutputDataConfig']);
        }
        // validate the optional field `DataAccessRoleArn`
        if (data['DataAccessRoleArn']) { // data not null
          String.validateJSON(data['DataAccessRoleArn']);
        }
        // validate the optional field `JobName`
        if (data['JobName']) { // data not null
          String.validateJSON(data['JobName']);
        }
        // validate the optional field `ClientRequestToken`
        if (data['ClientRequestToken']) { // data not null
          String.validateJSON(data['ClientRequestToken']);
        }
        // validate the optional field `KMSKey`
        if (data['KMSKey']) { // data not null
          String.validateJSON(data['KMSKey']);
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          LanguageCode.validateJSON(data['LanguageCode']);
        }

        return true;
    }


}

StartRxNormInferenceJobRequest.RequiredProperties = ["InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode"];

/**
 * @member {module:model/StartICD10CMInferenceJobRequestInputDataConfig} InputDataConfig
 */
StartRxNormInferenceJobRequest.prototype['InputDataConfig'] = undefined;

/**
 * @member {module:model/StartICD10CMInferenceJobRequestOutputDataConfig} OutputDataConfig
 */
StartRxNormInferenceJobRequest.prototype['OutputDataConfig'] = undefined;

/**
 * @member {String} DataAccessRoleArn
 */
StartRxNormInferenceJobRequest.prototype['DataAccessRoleArn'] = undefined;

/**
 * @member {String} JobName
 */
StartRxNormInferenceJobRequest.prototype['JobName'] = undefined;

/**
 * @member {String} ClientRequestToken
 */
StartRxNormInferenceJobRequest.prototype['ClientRequestToken'] = undefined;

/**
 * @member {String} KMSKey
 */
StartRxNormInferenceJobRequest.prototype['KMSKey'] = undefined;

/**
 * @member {module:model/LanguageCode} LanguageCode
 */
StartRxNormInferenceJobRequest.prototype['LanguageCode'] = undefined;






export default StartRxNormInferenceJobRequest;

