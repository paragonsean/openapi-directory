/**
 * AWS Comprehend Medical
 * Amazon Comprehend Medical extracts structured information from unstructured clinical text. Use these actions to gain insight in your documents. Amazon Comprehend Medical only detects entities in English language texts. Amazon Comprehend Medical places limits on the sizes of files allowed for different API operations. To learn more, see <a href=\"https://docs.aws.amazon.com/comprehend-medical/latest/dev/comprehendmedical-quotas.html\">Guidelines and quotas</a> in the <i>Amazon Comprehend Medical Developer Guide</i>.
 *
 * The version of the OpenAPI document: 2018-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DescribeEntitiesDetectionV2JobRequest from '../model/DescribeEntitiesDetectionV2JobRequest';
import DescribeEntitiesDetectionV2JobResponse from '../model/DescribeEntitiesDetectionV2JobResponse';
import DescribeICD10CMInferenceJobRequest from '../model/DescribeICD10CMInferenceJobRequest';
import DescribeICD10CMInferenceJobResponse from '../model/DescribeICD10CMInferenceJobResponse';
import DescribePHIDetectionJobRequest from '../model/DescribePHIDetectionJobRequest';
import DescribePHIDetectionJobResponse from '../model/DescribePHIDetectionJobResponse';
import DescribeRxNormInferenceJobRequest from '../model/DescribeRxNormInferenceJobRequest';
import DescribeRxNormInferenceJobResponse from '../model/DescribeRxNormInferenceJobResponse';
import DescribeSNOMEDCTInferenceJobRequest from '../model/DescribeSNOMEDCTInferenceJobRequest';
import DescribeSNOMEDCTInferenceJobResponse from '../model/DescribeSNOMEDCTInferenceJobResponse';
import DetectEntitiesRequest from '../model/DetectEntitiesRequest';
import DetectEntitiesResponse from '../model/DetectEntitiesResponse';
import DetectEntitiesV2Request from '../model/DetectEntitiesV2Request';
import DetectEntitiesV2Response from '../model/DetectEntitiesV2Response';
import DetectPHIRequest from '../model/DetectPHIRequest';
import DetectPHIResponse from '../model/DetectPHIResponse';
import InferICD10CMRequest from '../model/InferICD10CMRequest';
import InferICD10CMResponse from '../model/InferICD10CMResponse';
import InferRxNormRequest from '../model/InferRxNormRequest';
import InferRxNormResponse from '../model/InferRxNormResponse';
import InferSNOMEDCTRequest from '../model/InferSNOMEDCTRequest';
import InferSNOMEDCTResponse from '../model/InferSNOMEDCTResponse';
import ListEntitiesDetectionV2JobsRequest from '../model/ListEntitiesDetectionV2JobsRequest';
import ListEntitiesDetectionV2JobsResponse from '../model/ListEntitiesDetectionV2JobsResponse';
import ListICD10CMInferenceJobsRequest from '../model/ListICD10CMInferenceJobsRequest';
import ListICD10CMInferenceJobsResponse from '../model/ListICD10CMInferenceJobsResponse';
import ListPHIDetectionJobsRequest from '../model/ListPHIDetectionJobsRequest';
import ListPHIDetectionJobsResponse from '../model/ListPHIDetectionJobsResponse';
import ListRxNormInferenceJobsRequest from '../model/ListRxNormInferenceJobsRequest';
import ListRxNormInferenceJobsResponse from '../model/ListRxNormInferenceJobsResponse';
import ListSNOMEDCTInferenceJobsRequest from '../model/ListSNOMEDCTInferenceJobsRequest';
import ListSNOMEDCTInferenceJobsResponse from '../model/ListSNOMEDCTInferenceJobsResponse';
import StartEntitiesDetectionV2JobRequest from '../model/StartEntitiesDetectionV2JobRequest';
import StartEntitiesDetectionV2JobResponse from '../model/StartEntitiesDetectionV2JobResponse';
import StartICD10CMInferenceJobRequest from '../model/StartICD10CMInferenceJobRequest';
import StartICD10CMInferenceJobResponse from '../model/StartICD10CMInferenceJobResponse';
import StartPHIDetectionJobRequest from '../model/StartPHIDetectionJobRequest';
import StartPHIDetectionJobResponse from '../model/StartPHIDetectionJobResponse';
import StartRxNormInferenceJobRequest from '../model/StartRxNormInferenceJobRequest';
import StartRxNormInferenceJobResponse from '../model/StartRxNormInferenceJobResponse';
import StartSNOMEDCTInferenceJobRequest from '../model/StartSNOMEDCTInferenceJobRequest';
import StartSNOMEDCTInferenceJobResponse from '../model/StartSNOMEDCTInferenceJobResponse';
import StopEntitiesDetectionV2JobRequest from '../model/StopEntitiesDetectionV2JobRequest';
import StopEntitiesDetectionV2JobResponse from '../model/StopEntitiesDetectionV2JobResponse';
import StopICD10CMInferenceJobRequest from '../model/StopICD10CMInferenceJobRequest';
import StopICD10CMInferenceJobResponse from '../model/StopICD10CMInferenceJobResponse';
import StopPHIDetectionJobRequest from '../model/StopPHIDetectionJobRequest';
import StopPHIDetectionJobResponse from '../model/StopPHIDetectionJobResponse';
import StopRxNormInferenceJobRequest from '../model/StopRxNormInferenceJobRequest';
import StopRxNormInferenceJobResponse from '../model/StopRxNormInferenceJobResponse';
import StopSNOMEDCTInferenceJobRequest from '../model/StopSNOMEDCTInferenceJobRequest';
import StopSNOMEDCTInferenceJobResponse from '../model/StopSNOMEDCTInferenceJobResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-10-30
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the describeEntitiesDetectionV2Job operation.
     * @callback module:api/DefaultApi~describeEntitiesDetectionV2JobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeEntitiesDetectionV2JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties associated with a medical entities detection job. Use this operation to get the status of a detection job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeEntitiesDetectionV2JobRequest} describeEntitiesDetectionV2JobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeEntitiesDetectionV2JobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeEntitiesDetectionV2JobResponse}
     */
    describeEntitiesDetectionV2Job(xAmzTarget, describeEntitiesDetectionV2JobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeEntitiesDetectionV2JobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeEntitiesDetectionV2Job");
      }
      // verify the required parameter 'describeEntitiesDetectionV2JobRequest' is set
      if (describeEntitiesDetectionV2JobRequest === undefined || describeEntitiesDetectionV2JobRequest === null) {
        throw new Error("Missing the required parameter 'describeEntitiesDetectionV2JobRequest' when calling describeEntitiesDetectionV2Job");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeEntitiesDetectionV2JobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.DescribeEntitiesDetectionV2Job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeICD10CMInferenceJob operation.
     * @callback module:api/DefaultApi~describeICD10CMInferenceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeICD10CMInferenceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties associated with an InferICD10CM job. Use this operation to get the status of an inference job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeICD10CMInferenceJobRequest} describeICD10CMInferenceJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeICD10CMInferenceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeICD10CMInferenceJobResponse}
     */
    describeICD10CMInferenceJob(xAmzTarget, describeICD10CMInferenceJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeICD10CMInferenceJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeICD10CMInferenceJob");
      }
      // verify the required parameter 'describeICD10CMInferenceJobRequest' is set
      if (describeICD10CMInferenceJobRequest === undefined || describeICD10CMInferenceJobRequest === null) {
        throw new Error("Missing the required parameter 'describeICD10CMInferenceJobRequest' when calling describeICD10CMInferenceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeICD10CMInferenceJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.DescribeICD10CMInferenceJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePHIDetectionJob operation.
     * @callback module:api/DefaultApi~describePHIDetectionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePHIDetectionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties associated with a protected health information (PHI) detection job. Use this operation to get the status of a detection job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePHIDetectionJobRequest} describePHIDetectionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePHIDetectionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePHIDetectionJobResponse}
     */
    describePHIDetectionJob(xAmzTarget, describePHIDetectionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePHIDetectionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePHIDetectionJob");
      }
      // verify the required parameter 'describePHIDetectionJobRequest' is set
      if (describePHIDetectionJobRequest === undefined || describePHIDetectionJobRequest === null) {
        throw new Error("Missing the required parameter 'describePHIDetectionJobRequest' when calling describePHIDetectionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePHIDetectionJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.DescribePHIDetectionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRxNormInferenceJob operation.
     * @callback module:api/DefaultApi~describeRxNormInferenceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRxNormInferenceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties associated with an InferRxNorm job. Use this operation to get the status of an inference job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeRxNormInferenceJobRequest} describeRxNormInferenceJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRxNormInferenceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRxNormInferenceJobResponse}
     */
    describeRxNormInferenceJob(xAmzTarget, describeRxNormInferenceJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeRxNormInferenceJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeRxNormInferenceJob");
      }
      // verify the required parameter 'describeRxNormInferenceJobRequest' is set
      if (describeRxNormInferenceJobRequest === undefined || describeRxNormInferenceJobRequest === null) {
        throw new Error("Missing the required parameter 'describeRxNormInferenceJobRequest' when calling describeRxNormInferenceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRxNormInferenceJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.DescribeRxNormInferenceJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSNOMEDCTInferenceJob operation.
     * @callback module:api/DefaultApi~describeSNOMEDCTInferenceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSNOMEDCTInferenceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets the properties associated with an InferSNOMEDCT job. Use this operation to get the status of an inference job. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeSNOMEDCTInferenceJobRequest} describeSNOMEDCTInferenceJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSNOMEDCTInferenceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSNOMEDCTInferenceJobResponse}
     */
    describeSNOMEDCTInferenceJob(xAmzTarget, describeSNOMEDCTInferenceJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSNOMEDCTInferenceJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeSNOMEDCTInferenceJob");
      }
      // verify the required parameter 'describeSNOMEDCTInferenceJobRequest' is set
      if (describeSNOMEDCTInferenceJobRequest === undefined || describeSNOMEDCTInferenceJobRequest === null) {
        throw new Error("Missing the required parameter 'describeSNOMEDCTInferenceJobRequest' when calling describeSNOMEDCTInferenceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSNOMEDCTInferenceJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.DescribeSNOMEDCTInferenceJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectEntities operation.
     * @callback module:api/DefaultApi~detectEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectEntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>The <code>DetectEntities</code> operation is deprecated. You should use the <a>DetectEntitiesV2</a> operation instead.</p> <p>Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DetectEntitiesRequest} detectEntitiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~detectEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectEntitiesResponse}
     */
    detectEntities(xAmzTarget, detectEntitiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = detectEntitiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling detectEntities");
      }
      // verify the required parameter 'detectEntitiesRequest' is set
      if (detectEntitiesRequest === undefined || detectEntitiesRequest === null) {
        throw new Error("Missing the required parameter 'detectEntitiesRequest' when calling detectEntities");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DetectEntitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.DetectEntities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectEntitiesV2 operation.
     * @callback module:api/DefaultApi~detectEntitiesV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectEntitiesV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Inspects the clinical text for a variety of medical entities and returns specific information about them such as entity category, location, and confidence score on that information. Amazon Comprehend Medical only detects medical entities in English language texts.</p> <p>The <code>DetectEntitiesV2</code> operation replaces the <a>DetectEntities</a> operation. This new action uses a different model for determining the entities in your medical text and changes the way that some entities are returned in the output. You should use the <code>DetectEntitiesV2</code> operation in all new applications.</p> <p>The <code>DetectEntitiesV2</code> operation returns the <code>Acuity</code> and <code>Direction</code> entities as attributes instead of types. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DetectEntitiesV2Request} detectEntitiesV2Request 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~detectEntitiesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectEntitiesV2Response}
     */
    detectEntitiesV2(xAmzTarget, detectEntitiesV2Request, opts, callback) {
      opts = opts || {};
      let postBody = detectEntitiesV2Request;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling detectEntitiesV2");
      }
      // verify the required parameter 'detectEntitiesV2Request' is set
      if (detectEntitiesV2Request === undefined || detectEntitiesV2Request === null) {
        throw new Error("Missing the required parameter 'detectEntitiesV2Request' when calling detectEntitiesV2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DetectEntitiesV2Response;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.DetectEntitiesV2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectPHI operation.
     * @callback module:api/DefaultApi~detectPHICallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectPHIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inspects the clinical text for protected health information (PHI) entities and returns the entity category, location, and confidence score for each entity. Amazon Comprehend Medical only detects entities in English language texts.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DetectPHIRequest} detectPHIRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~detectPHICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectPHIResponse}
     */
    detectPHI(xAmzTarget, detectPHIRequest, opts, callback) {
      opts = opts || {};
      let postBody = detectPHIRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling detectPHI");
      }
      // verify the required parameter 'detectPHIRequest' is set
      if (detectPHIRequest === undefined || detectPHIRequest === null) {
        throw new Error("Missing the required parameter 'detectPHIRequest' when calling detectPHI");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DetectPHIResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.DetectPHI', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inferICD10CM operation.
     * @callback module:api/DefaultApi~inferICD10CMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InferICD10CMResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InferICD10CM detects medical conditions as entities listed in a patient record and links those entities to normalized concept identifiers in the ICD-10-CM knowledge base from the Centers for Disease Control. Amazon Comprehend Medical only detects medical entities in English language texts. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/InferICD10CMRequest} inferICD10CMRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~inferICD10CMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InferICD10CMResponse}
     */
    inferICD10CM(xAmzTarget, inferICD10CMRequest, opts, callback) {
      opts = opts || {};
      let postBody = inferICD10CMRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling inferICD10CM");
      }
      // verify the required parameter 'inferICD10CMRequest' is set
      if (inferICD10CMRequest === undefined || inferICD10CMRequest === null) {
        throw new Error("Missing the required parameter 'inferICD10CMRequest' when calling inferICD10CM");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InferICD10CMResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.InferICD10CM', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inferRxNorm operation.
     * @callback module:api/DefaultApi~inferRxNormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InferRxNormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * InferRxNorm detects medications as entities listed in a patient record and links to the normalized concept identifiers in the RxNorm database from the National Library of Medicine. Amazon Comprehend Medical only detects medical entities in English language texts. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/InferRxNormRequest} inferRxNormRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~inferRxNormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InferRxNormResponse}
     */
    inferRxNorm(xAmzTarget, inferRxNormRequest, opts, callback) {
      opts = opts || {};
      let postBody = inferRxNormRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling inferRxNorm");
      }
      // verify the required parameter 'inferRxNormRequest' is set
      if (inferRxNormRequest === undefined || inferRxNormRequest === null) {
        throw new Error("Missing the required parameter 'inferRxNormRequest' when calling inferRxNorm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InferRxNormResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.InferRxNorm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inferSNOMEDCT operation.
     * @callback module:api/DefaultApi~inferSNOMEDCTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InferSNOMEDCTResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  InferSNOMEDCT detects possible medical concepts as entities and links them to codes from the Systematized Nomenclature of Medicine, Clinical Terms (SNOMED-CT) ontology
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/InferSNOMEDCTRequest} inferSNOMEDCTRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~inferSNOMEDCTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InferSNOMEDCTResponse}
     */
    inferSNOMEDCT(xAmzTarget, inferSNOMEDCTRequest, opts, callback) {
      opts = opts || {};
      let postBody = inferSNOMEDCTRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling inferSNOMEDCT");
      }
      // verify the required parameter 'inferSNOMEDCTRequest' is set
      if (inferSNOMEDCTRequest === undefined || inferSNOMEDCTRequest === null) {
        throw new Error("Missing the required parameter 'inferSNOMEDCTRequest' when calling inferSNOMEDCT");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InferSNOMEDCTResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.InferSNOMEDCT', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEntitiesDetectionV2Jobs operation.
     * @callback module:api/DefaultApi~listEntitiesDetectionV2JobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEntitiesDetectionV2JobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of medical entity detection jobs that you have submitted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListEntitiesDetectionV2JobsRequest} listEntitiesDetectionV2JobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listEntitiesDetectionV2JobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEntitiesDetectionV2JobsResponse}
     */
    listEntitiesDetectionV2Jobs(xAmzTarget, listEntitiesDetectionV2JobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listEntitiesDetectionV2JobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listEntitiesDetectionV2Jobs");
      }
      // verify the required parameter 'listEntitiesDetectionV2JobsRequest' is set
      if (listEntitiesDetectionV2JobsRequest === undefined || listEntitiesDetectionV2JobsRequest === null) {
        throw new Error("Missing the required parameter 'listEntitiesDetectionV2JobsRequest' when calling listEntitiesDetectionV2Jobs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEntitiesDetectionV2JobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.ListEntitiesDetectionV2Jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listICD10CMInferenceJobs operation.
     * @callback module:api/DefaultApi~listICD10CMInferenceJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListICD10CMInferenceJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of InferICD10CM jobs that you have submitted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListICD10CMInferenceJobsRequest} listICD10CMInferenceJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listICD10CMInferenceJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListICD10CMInferenceJobsResponse}
     */
    listICD10CMInferenceJobs(xAmzTarget, listICD10CMInferenceJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listICD10CMInferenceJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listICD10CMInferenceJobs");
      }
      // verify the required parameter 'listICD10CMInferenceJobsRequest' is set
      if (listICD10CMInferenceJobsRequest === undefined || listICD10CMInferenceJobsRequest === null) {
        throw new Error("Missing the required parameter 'listICD10CMInferenceJobsRequest' when calling listICD10CMInferenceJobs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListICD10CMInferenceJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.ListICD10CMInferenceJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPHIDetectionJobs operation.
     * @callback module:api/DefaultApi~listPHIDetectionJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPHIDetectionJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of protected health information (PHI) detection jobs you have submitted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPHIDetectionJobsRequest} listPHIDetectionJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listPHIDetectionJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPHIDetectionJobsResponse}
     */
    listPHIDetectionJobs(xAmzTarget, listPHIDetectionJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPHIDetectionJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPHIDetectionJobs");
      }
      // verify the required parameter 'listPHIDetectionJobsRequest' is set
      if (listPHIDetectionJobsRequest === undefined || listPHIDetectionJobsRequest === null) {
        throw new Error("Missing the required parameter 'listPHIDetectionJobsRequest' when calling listPHIDetectionJobs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPHIDetectionJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.ListPHIDetectionJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRxNormInferenceJobs operation.
     * @callback module:api/DefaultApi~listRxNormInferenceJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRxNormInferenceJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of InferRxNorm jobs that you have submitted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListRxNormInferenceJobsRequest} listRxNormInferenceJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listRxNormInferenceJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRxNormInferenceJobsResponse}
     */
    listRxNormInferenceJobs(xAmzTarget, listRxNormInferenceJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRxNormInferenceJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listRxNormInferenceJobs");
      }
      // verify the required parameter 'listRxNormInferenceJobsRequest' is set
      if (listRxNormInferenceJobsRequest === undefined || listRxNormInferenceJobsRequest === null) {
        throw new Error("Missing the required parameter 'listRxNormInferenceJobsRequest' when calling listRxNormInferenceJobs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRxNormInferenceJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.ListRxNormInferenceJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSNOMEDCTInferenceJobs operation.
     * @callback module:api/DefaultApi~listSNOMEDCTInferenceJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSNOMEDCTInferenceJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets a list of InferSNOMEDCT jobs a user has submitted. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSNOMEDCTInferenceJobsRequest} listSNOMEDCTInferenceJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listSNOMEDCTInferenceJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSNOMEDCTInferenceJobsResponse}
     */
    listSNOMEDCTInferenceJobs(xAmzTarget, listSNOMEDCTInferenceJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSNOMEDCTInferenceJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSNOMEDCTInferenceJobs");
      }
      // verify the required parameter 'listSNOMEDCTInferenceJobsRequest' is set
      if (listSNOMEDCTInferenceJobsRequest === undefined || listSNOMEDCTInferenceJobsRequest === null) {
        throw new Error("Missing the required parameter 'listSNOMEDCTInferenceJobsRequest' when calling listSNOMEDCTInferenceJobs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSNOMEDCTInferenceJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.ListSNOMEDCTInferenceJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startEntitiesDetectionV2Job operation.
     * @callback module:api/DefaultApi~startEntitiesDetectionV2JobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartEntitiesDetectionV2JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an asynchronous medical entity detection job for a collection of documents. Use the <code>DescribeEntitiesDetectionV2Job</code> operation to track the status of a job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartEntitiesDetectionV2JobRequest} startEntitiesDetectionV2JobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startEntitiesDetectionV2JobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartEntitiesDetectionV2JobResponse}
     */
    startEntitiesDetectionV2Job(xAmzTarget, startEntitiesDetectionV2JobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startEntitiesDetectionV2JobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startEntitiesDetectionV2Job");
      }
      // verify the required parameter 'startEntitiesDetectionV2JobRequest' is set
      if (startEntitiesDetectionV2JobRequest === undefined || startEntitiesDetectionV2JobRequest === null) {
        throw new Error("Missing the required parameter 'startEntitiesDetectionV2JobRequest' when calling startEntitiesDetectionV2Job");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartEntitiesDetectionV2JobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StartEntitiesDetectionV2Job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startICD10CMInferenceJob operation.
     * @callback module:api/DefaultApi~startICD10CMInferenceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartICD10CMInferenceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an asynchronous job to detect medical conditions and link them to the ICD-10-CM ontology. Use the <code>DescribeICD10CMInferenceJob</code> operation to track the status of a job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartICD10CMInferenceJobRequest} startICD10CMInferenceJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startICD10CMInferenceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartICD10CMInferenceJobResponse}
     */
    startICD10CMInferenceJob(xAmzTarget, startICD10CMInferenceJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startICD10CMInferenceJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startICD10CMInferenceJob");
      }
      // verify the required parameter 'startICD10CMInferenceJobRequest' is set
      if (startICD10CMInferenceJobRequest === undefined || startICD10CMInferenceJobRequest === null) {
        throw new Error("Missing the required parameter 'startICD10CMInferenceJobRequest' when calling startICD10CMInferenceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartICD10CMInferenceJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StartICD10CMInferenceJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startPHIDetectionJob operation.
     * @callback module:api/DefaultApi~startPHIDetectionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartPHIDetectionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an asynchronous job to detect protected health information (PHI). Use the <code>DescribePHIDetectionJob</code> operation to track the status of a job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartPHIDetectionJobRequest} startPHIDetectionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startPHIDetectionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartPHIDetectionJobResponse}
     */
    startPHIDetectionJob(xAmzTarget, startPHIDetectionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startPHIDetectionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startPHIDetectionJob");
      }
      // verify the required parameter 'startPHIDetectionJobRequest' is set
      if (startPHIDetectionJobRequest === undefined || startPHIDetectionJobRequest === null) {
        throw new Error("Missing the required parameter 'startPHIDetectionJobRequest' when calling startPHIDetectionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartPHIDetectionJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StartPHIDetectionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startRxNormInferenceJob operation.
     * @callback module:api/DefaultApi~startRxNormInferenceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartRxNormInferenceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an asynchronous job to detect medication entities and link them to the RxNorm ontology. Use the <code>DescribeRxNormInferenceJob</code> operation to track the status of a job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartRxNormInferenceJobRequest} startRxNormInferenceJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startRxNormInferenceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartRxNormInferenceJobResponse}
     */
    startRxNormInferenceJob(xAmzTarget, startRxNormInferenceJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startRxNormInferenceJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startRxNormInferenceJob");
      }
      // verify the required parameter 'startRxNormInferenceJobRequest' is set
      if (startRxNormInferenceJobRequest === undefined || startRxNormInferenceJobRequest === null) {
        throw new Error("Missing the required parameter 'startRxNormInferenceJobRequest' when calling startRxNormInferenceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartRxNormInferenceJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StartRxNormInferenceJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSNOMEDCTInferenceJob operation.
     * @callback module:api/DefaultApi~startSNOMEDCTInferenceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartSNOMEDCTInferenceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Starts an asynchronous job to detect medical concepts and link them to the SNOMED-CT ontology. Use the DescribeSNOMEDCTInferenceJob operation to track the status of a job. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartSNOMEDCTInferenceJobRequest} startSNOMEDCTInferenceJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startSNOMEDCTInferenceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartSNOMEDCTInferenceJobResponse}
     */
    startSNOMEDCTInferenceJob(xAmzTarget, startSNOMEDCTInferenceJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = startSNOMEDCTInferenceJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startSNOMEDCTInferenceJob");
      }
      // verify the required parameter 'startSNOMEDCTInferenceJobRequest' is set
      if (startSNOMEDCTInferenceJobRequest === undefined || startSNOMEDCTInferenceJobRequest === null) {
        throw new Error("Missing the required parameter 'startSNOMEDCTInferenceJobRequest' when calling startSNOMEDCTInferenceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartSNOMEDCTInferenceJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StartSNOMEDCTInferenceJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopEntitiesDetectionV2Job operation.
     * @callback module:api/DefaultApi~stopEntitiesDetectionV2JobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopEntitiesDetectionV2JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a medical entities detection job in progress.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopEntitiesDetectionV2JobRequest} stopEntitiesDetectionV2JobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopEntitiesDetectionV2JobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopEntitiesDetectionV2JobResponse}
     */
    stopEntitiesDetectionV2Job(xAmzTarget, stopEntitiesDetectionV2JobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopEntitiesDetectionV2JobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopEntitiesDetectionV2Job");
      }
      // verify the required parameter 'stopEntitiesDetectionV2JobRequest' is set
      if (stopEntitiesDetectionV2JobRequest === undefined || stopEntitiesDetectionV2JobRequest === null) {
        throw new Error("Missing the required parameter 'stopEntitiesDetectionV2JobRequest' when calling stopEntitiesDetectionV2Job");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopEntitiesDetectionV2JobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StopEntitiesDetectionV2Job', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopICD10CMInferenceJob operation.
     * @callback module:api/DefaultApi~stopICD10CMInferenceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopICD10CMInferenceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an InferICD10CM inference job in progress.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopICD10CMInferenceJobRequest} stopICD10CMInferenceJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopICD10CMInferenceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopICD10CMInferenceJobResponse}
     */
    stopICD10CMInferenceJob(xAmzTarget, stopICD10CMInferenceJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopICD10CMInferenceJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopICD10CMInferenceJob");
      }
      // verify the required parameter 'stopICD10CMInferenceJobRequest' is set
      if (stopICD10CMInferenceJobRequest === undefined || stopICD10CMInferenceJobRequest === null) {
        throw new Error("Missing the required parameter 'stopICD10CMInferenceJobRequest' when calling stopICD10CMInferenceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopICD10CMInferenceJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StopICD10CMInferenceJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPHIDetectionJob operation.
     * @callback module:api/DefaultApi~stopPHIDetectionJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopPHIDetectionJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a protected health information (PHI) detection job in progress.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopPHIDetectionJobRequest} stopPHIDetectionJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopPHIDetectionJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopPHIDetectionJobResponse}
     */
    stopPHIDetectionJob(xAmzTarget, stopPHIDetectionJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopPHIDetectionJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopPHIDetectionJob");
      }
      // verify the required parameter 'stopPHIDetectionJobRequest' is set
      if (stopPHIDetectionJobRequest === undefined || stopPHIDetectionJobRequest === null) {
        throw new Error("Missing the required parameter 'stopPHIDetectionJobRequest' when calling stopPHIDetectionJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopPHIDetectionJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StopPHIDetectionJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopRxNormInferenceJob operation.
     * @callback module:api/DefaultApi~stopRxNormInferenceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopRxNormInferenceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an InferRxNorm inference job in progress.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopRxNormInferenceJobRequest} stopRxNormInferenceJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopRxNormInferenceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopRxNormInferenceJobResponse}
     */
    stopRxNormInferenceJob(xAmzTarget, stopRxNormInferenceJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopRxNormInferenceJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopRxNormInferenceJob");
      }
      // verify the required parameter 'stopRxNormInferenceJobRequest' is set
      if (stopRxNormInferenceJobRequest === undefined || stopRxNormInferenceJobRequest === null) {
        throw new Error("Missing the required parameter 'stopRxNormInferenceJobRequest' when calling stopRxNormInferenceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopRxNormInferenceJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StopRxNormInferenceJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopSNOMEDCTInferenceJob operation.
     * @callback module:api/DefaultApi~stopSNOMEDCTInferenceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopSNOMEDCTInferenceJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Stops an InferSNOMEDCT inference job in progress. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopSNOMEDCTInferenceJobRequest} stopSNOMEDCTInferenceJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopSNOMEDCTInferenceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopSNOMEDCTInferenceJobResponse}
     */
    stopSNOMEDCTInferenceJob(xAmzTarget, stopSNOMEDCTInferenceJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopSNOMEDCTInferenceJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopSNOMEDCTInferenceJob");
      }
      // verify the required parameter 'stopSNOMEDCTInferenceJobRequest' is set
      if (stopSNOMEDCTInferenceJobRequest === undefined || stopSNOMEDCTInferenceJobRequest === null) {
        throw new Error("Missing the required parameter 'stopSNOMEDCTInferenceJobRequest' when calling stopSNOMEDCTInferenceJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopSNOMEDCTInferenceJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=ComprehendMedical_20181030.StopSNOMEDCTInferenceJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
