/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceResponse_Service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceResponse_Service::OAICreateServiceResponse_Service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceResponse_Service::OAICreateServiceResponse_Service() {
    this->initializeModel();
}

OAICreateServiceResponse_Service::~OAICreateServiceResponse_Service() {}

void OAICreateServiceResponse_Service::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_namespace_id_isSet = false;
    m_namespace_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_dns_config_isSet = false;
    m_dns_config_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_health_check_config_isSet = false;
    m_health_check_config_isValid = false;

    m_health_check_custom_config_isSet = false;
    m_health_check_custom_config_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;
}

void OAICreateServiceResponse_Service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceResponse_Service::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_namespace_id_isValid = ::OpenAPI::fromJsonValue(m_namespace_id, json[QString("NamespaceId")]);
    m_namespace_id_isSet = !json[QString("NamespaceId")].isNull() && m_namespace_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("InstanceCount")]);
    m_instance_count_isSet = !json[QString("InstanceCount")].isNull() && m_instance_count_isValid;

    m_dns_config_isValid = ::OpenAPI::fromJsonValue(m_dns_config, json[QString("DnsConfig")]);
    m_dns_config_isSet = !json[QString("DnsConfig")].isNull() && m_dns_config_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_health_check_config_isValid = ::OpenAPI::fromJsonValue(m_health_check_config, json[QString("HealthCheckConfig")]);
    m_health_check_config_isSet = !json[QString("HealthCheckConfig")].isNull() && m_health_check_config_isValid;

    m_health_check_custom_config_isValid = ::OpenAPI::fromJsonValue(m_health_check_custom_config, json[QString("HealthCheckCustomConfig")]);
    m_health_check_custom_config_isSet = !json[QString("HealthCheckCustomConfig")].isNull() && m_health_check_custom_config_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("CreateDate")]);
    m_create_date_isSet = !json[QString("CreateDate")].isNull() && m_create_date_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;
}

QString OAICreateServiceResponse_Service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceResponse_Service::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_namespace_id_isSet) {
        obj.insert(QString("NamespaceId"), ::OpenAPI::toJsonValue(m_namespace_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_instance_count_isSet) {
        obj.insert(QString("InstanceCount"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_dns_config.isSet()) {
        obj.insert(QString("DnsConfig"), ::OpenAPI::toJsonValue(m_dns_config));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_health_check_config.isSet()) {
        obj.insert(QString("HealthCheckConfig"), ::OpenAPI::toJsonValue(m_health_check_config));
    }
    if (m_health_check_custom_config.isSet()) {
        obj.insert(QString("HealthCheckCustomConfig"), ::OpenAPI::toJsonValue(m_health_check_custom_config));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("CreateDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    return obj;
}

QString OAICreateServiceResponse_Service::getId() const {
    return m_id;
}
void OAICreateServiceResponse_Service::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateServiceResponse_Service::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateServiceResponse_Service::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateServiceResponse_Service::getArn() const {
    return m_arn;
}
void OAICreateServiceResponse_Service::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateServiceResponse_Service::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateServiceResponse_Service::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateServiceResponse_Service::getName() const {
    return m_name;
}
void OAICreateServiceResponse_Service::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateServiceResponse_Service::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateServiceResponse_Service::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateServiceResponse_Service::getNamespaceId() const {
    return m_namespace_id;
}
void OAICreateServiceResponse_Service::setNamespaceId(const QString &namespace_id) {
    m_namespace_id = namespace_id;
    m_namespace_id_isSet = true;
}

bool OAICreateServiceResponse_Service::is_namespace_id_Set() const{
    return m_namespace_id_isSet;
}

bool OAICreateServiceResponse_Service::is_namespace_id_Valid() const{
    return m_namespace_id_isValid;
}

QString OAICreateServiceResponse_Service::getDescription() const {
    return m_description;
}
void OAICreateServiceResponse_Service::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateServiceResponse_Service::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateServiceResponse_Service::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICreateServiceResponse_Service::getInstanceCount() const {
    return m_instance_count;
}
void OAICreateServiceResponse_Service::setInstanceCount(const qint32 &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAICreateServiceResponse_Service::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAICreateServiceResponse_Service::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

OAIService_DnsConfig OAICreateServiceResponse_Service::getDnsConfig() const {
    return m_dns_config;
}
void OAICreateServiceResponse_Service::setDnsConfig(const OAIService_DnsConfig &dns_config) {
    m_dns_config = dns_config;
    m_dns_config_isSet = true;
}

bool OAICreateServiceResponse_Service::is_dns_config_Set() const{
    return m_dns_config_isSet;
}

bool OAICreateServiceResponse_Service::is_dns_config_Valid() const{
    return m_dns_config_isValid;
}

OAIServiceType OAICreateServiceResponse_Service::getType() const {
    return m_type;
}
void OAICreateServiceResponse_Service::setType(const OAIServiceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateServiceResponse_Service::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateServiceResponse_Service::is_type_Valid() const{
    return m_type_isValid;
}

OAIService_HealthCheckConfig OAICreateServiceResponse_Service::getHealthCheckConfig() const {
    return m_health_check_config;
}
void OAICreateServiceResponse_Service::setHealthCheckConfig(const OAIService_HealthCheckConfig &health_check_config) {
    m_health_check_config = health_check_config;
    m_health_check_config_isSet = true;
}

bool OAICreateServiceResponse_Service::is_health_check_config_Set() const{
    return m_health_check_config_isSet;
}

bool OAICreateServiceResponse_Service::is_health_check_config_Valid() const{
    return m_health_check_config_isValid;
}

OAIService_HealthCheckCustomConfig OAICreateServiceResponse_Service::getHealthCheckCustomConfig() const {
    return m_health_check_custom_config;
}
void OAICreateServiceResponse_Service::setHealthCheckCustomConfig(const OAIService_HealthCheckCustomConfig &health_check_custom_config) {
    m_health_check_custom_config = health_check_custom_config;
    m_health_check_custom_config_isSet = true;
}

bool OAICreateServiceResponse_Service::is_health_check_custom_config_Set() const{
    return m_health_check_custom_config_isSet;
}

bool OAICreateServiceResponse_Service::is_health_check_custom_config_Valid() const{
    return m_health_check_custom_config_isValid;
}

QDateTime OAICreateServiceResponse_Service::getCreateDate() const {
    return m_create_date;
}
void OAICreateServiceResponse_Service::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAICreateServiceResponse_Service::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAICreateServiceResponse_Service::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAICreateServiceResponse_Service::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAICreateServiceResponse_Service::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAICreateServiceResponse_Service::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAICreateServiceResponse_Service::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

bool OAICreateServiceResponse_Service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_custom_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceResponse_Service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
