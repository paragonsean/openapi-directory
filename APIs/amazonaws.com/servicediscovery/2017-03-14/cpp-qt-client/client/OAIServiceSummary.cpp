/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceSummary::OAIServiceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceSummary::OAIServiceSummary() {
    this->initializeModel();
}

OAIServiceSummary::~OAIServiceSummary() {}

void OAIServiceSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_dns_config_isSet = false;
    m_dns_config_isValid = false;

    m_health_check_config_isSet = false;
    m_health_check_config_isValid = false;

    m_health_check_custom_config_isSet = false;
    m_health_check_custom_config_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;
}

void OAIServiceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("InstanceCount")]);
    m_instance_count_isSet = !json[QString("InstanceCount")].isNull() && m_instance_count_isValid;

    m_dns_config_isValid = ::OpenAPI::fromJsonValue(m_dns_config, json[QString("DnsConfig")]);
    m_dns_config_isSet = !json[QString("DnsConfig")].isNull() && m_dns_config_isValid;

    m_health_check_config_isValid = ::OpenAPI::fromJsonValue(m_health_check_config, json[QString("HealthCheckConfig")]);
    m_health_check_config_isSet = !json[QString("HealthCheckConfig")].isNull() && m_health_check_config_isValid;

    m_health_check_custom_config_isValid = ::OpenAPI::fromJsonValue(m_health_check_custom_config, json[QString("HealthCheckCustomConfig")]);
    m_health_check_custom_config_isSet = !json[QString("HealthCheckCustomConfig")].isNull() && m_health_check_custom_config_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("CreateDate")]);
    m_create_date_isSet = !json[QString("CreateDate")].isNull() && m_create_date_isValid;
}

QString OAIServiceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_instance_count_isSet) {
        obj.insert(QString("InstanceCount"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_dns_config.isSet()) {
        obj.insert(QString("DnsConfig"), ::OpenAPI::toJsonValue(m_dns_config));
    }
    if (m_health_check_config.isSet()) {
        obj.insert(QString("HealthCheckConfig"), ::OpenAPI::toJsonValue(m_health_check_config));
    }
    if (m_health_check_custom_config.isSet()) {
        obj.insert(QString("HealthCheckCustomConfig"), ::OpenAPI::toJsonValue(m_health_check_custom_config));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("CreateDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    return obj;
}

QString OAIServiceSummary::getId() const {
    return m_id;
}
void OAIServiceSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServiceSummary::getArn() const {
    return m_arn;
}
void OAIServiceSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIServiceSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIServiceSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIServiceSummary::getName() const {
    return m_name;
}
void OAIServiceSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIServiceType OAIServiceSummary::getType() const {
    return m_type;
}
void OAIServiceSummary::setType(const OAIServiceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServiceSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServiceSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIServiceSummary::getDescription() const {
    return m_description;
}
void OAIServiceSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceSummary::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIServiceSummary::getInstanceCount() const {
    return m_instance_count;
}
void OAIServiceSummary::setInstanceCount(const qint32 &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAIServiceSummary::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAIServiceSummary::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

OAIServiceSummary_DnsConfig OAIServiceSummary::getDnsConfig() const {
    return m_dns_config;
}
void OAIServiceSummary::setDnsConfig(const OAIServiceSummary_DnsConfig &dns_config) {
    m_dns_config = dns_config;
    m_dns_config_isSet = true;
}

bool OAIServiceSummary::is_dns_config_Set() const{
    return m_dns_config_isSet;
}

bool OAIServiceSummary::is_dns_config_Valid() const{
    return m_dns_config_isValid;
}

OAIServiceChange_HealthCheckConfig OAIServiceSummary::getHealthCheckConfig() const {
    return m_health_check_config;
}
void OAIServiceSummary::setHealthCheckConfig(const OAIServiceChange_HealthCheckConfig &health_check_config) {
    m_health_check_config = health_check_config;
    m_health_check_config_isSet = true;
}

bool OAIServiceSummary::is_health_check_config_Set() const{
    return m_health_check_config_isSet;
}

bool OAIServiceSummary::is_health_check_config_Valid() const{
    return m_health_check_config_isValid;
}

OAIServiceSummary_HealthCheckCustomConfig OAIServiceSummary::getHealthCheckCustomConfig() const {
    return m_health_check_custom_config;
}
void OAIServiceSummary::setHealthCheckCustomConfig(const OAIServiceSummary_HealthCheckCustomConfig &health_check_custom_config) {
    m_health_check_custom_config = health_check_custom_config;
    m_health_check_custom_config_isSet = true;
}

bool OAIServiceSummary::is_health_check_custom_config_Set() const{
    return m_health_check_custom_config_isSet;
}

bool OAIServiceSummary::is_health_check_custom_config_Valid() const{
    return m_health_check_custom_config_isValid;
}

QDateTime OAIServiceSummary::getCreateDate() const {
    return m_create_date;
}
void OAIServiceSummary::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIServiceSummary::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIServiceSummary::is_create_date_Valid() const{
    return m_create_date_isValid;
}

bool OAIServiceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_custom_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
