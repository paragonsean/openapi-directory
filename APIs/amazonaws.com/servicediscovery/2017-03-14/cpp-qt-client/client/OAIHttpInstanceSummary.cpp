/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpInstanceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpInstanceSummary::OAIHttpInstanceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpInstanceSummary::OAIHttpInstanceSummary() {
    this->initializeModel();
}

OAIHttpInstanceSummary::~OAIHttpInstanceSummary() {}

void OAIHttpInstanceSummary::initializeModel() {

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_namespace_name_isSet = false;
    m_namespace_name_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIHttpInstanceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpInstanceSummary::fromJsonObject(QJsonObject json) {

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_namespace_name_isValid = ::OpenAPI::fromJsonValue(m_namespace_name, json[QString("NamespaceName")]);
    m_namespace_name_isSet = !json[QString("NamespaceName")].isNull() && m_namespace_name_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("HealthStatus")]);
    m_health_status_isSet = !json[QString("HealthStatus")].isNull() && m_health_status_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;
}

QString OAIHttpInstanceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpInstanceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_namespace_name_isSet) {
        obj.insert(QString("NamespaceName"), ::OpenAPI::toJsonValue(m_namespace_name));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_health_status.isSet()) {
        obj.insert(QString("HealthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAIHttpInstanceSummary::getInstanceId() const {
    return m_instance_id;
}
void OAIHttpInstanceSummary::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIHttpInstanceSummary::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIHttpInstanceSummary::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIHttpInstanceSummary::getNamespaceName() const {
    return m_namespace_name;
}
void OAIHttpInstanceSummary::setNamespaceName(const QString &namespace_name) {
    m_namespace_name = namespace_name;
    m_namespace_name_isSet = true;
}

bool OAIHttpInstanceSummary::is_namespace_name_Set() const{
    return m_namespace_name_isSet;
}

bool OAIHttpInstanceSummary::is_namespace_name_Valid() const{
    return m_namespace_name_isValid;
}

QString OAIHttpInstanceSummary::getServiceName() const {
    return m_service_name;
}
void OAIHttpInstanceSummary::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIHttpInstanceSummary::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIHttpInstanceSummary::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIHealthStatus OAIHttpInstanceSummary::getHealthStatus() const {
    return m_health_status;
}
void OAIHttpInstanceSummary::setHealthStatus(const OAIHealthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIHttpInstanceSummary::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIHttpInstanceSummary::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QMap OAIHttpInstanceSummary::getAttributes() const {
    return m_attributes;
}
void OAIHttpInstanceSummary::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIHttpInstanceSummary::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIHttpInstanceSummary::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIHttpInstanceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpInstanceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
