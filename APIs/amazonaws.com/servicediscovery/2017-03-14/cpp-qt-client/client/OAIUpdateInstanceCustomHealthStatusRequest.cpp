/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInstanceCustomHealthStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInstanceCustomHealthStatusRequest::OAIUpdateInstanceCustomHealthStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInstanceCustomHealthStatusRequest::OAIUpdateInstanceCustomHealthStatusRequest() {
    this->initializeModel();
}

OAIUpdateInstanceCustomHealthStatusRequest::~OAIUpdateInstanceCustomHealthStatusRequest() {}

void OAIUpdateInstanceCustomHealthStatusRequest::initializeModel() {

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUpdateInstanceCustomHealthStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInstanceCustomHealthStatusRequest::fromJsonObject(QJsonObject json) {

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIUpdateInstanceCustomHealthStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInstanceCustomHealthStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUpdateInstanceCustomHealthStatusRequest::getServiceId() const {
    return m_service_id;
}
void OAIUpdateInstanceCustomHealthStatusRequest::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIUpdateInstanceCustomHealthStatusRequest::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIUpdateInstanceCustomHealthStatusRequest::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIUpdateInstanceCustomHealthStatusRequest::getInstanceId() const {
    return m_instance_id;
}
void OAIUpdateInstanceCustomHealthStatusRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIUpdateInstanceCustomHealthStatusRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIUpdateInstanceCustomHealthStatusRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

OAICustomHealthStatus OAIUpdateInstanceCustomHealthStatusRequest::getStatus() const {
    return m_status;
}
void OAIUpdateInstanceCustomHealthStatusRequest::setStatus(const OAICustomHealthStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateInstanceCustomHealthStatusRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateInstanceCustomHealthStatusRequest::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateInstanceCustomHealthStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInstanceCustomHealthStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_id_isValid && m_instance_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
