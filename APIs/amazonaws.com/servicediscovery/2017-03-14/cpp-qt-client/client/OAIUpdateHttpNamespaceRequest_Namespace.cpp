/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateHttpNamespaceRequest_Namespace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateHttpNamespaceRequest_Namespace::OAIUpdateHttpNamespaceRequest_Namespace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateHttpNamespaceRequest_Namespace::OAIUpdateHttpNamespaceRequest_Namespace() {
    this->initializeModel();
}

OAIUpdateHttpNamespaceRequest_Namespace::~OAIUpdateHttpNamespaceRequest_Namespace() {}

void OAIUpdateHttpNamespaceRequest_Namespace::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIUpdateHttpNamespaceRequest_Namespace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateHttpNamespaceRequest_Namespace::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIUpdateHttpNamespaceRequest_Namespace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateHttpNamespaceRequest_Namespace::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIUpdateHttpNamespaceRequest_Namespace::getDescription() const {
    return m_description;
}
void OAIUpdateHttpNamespaceRequest_Namespace::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateHttpNamespaceRequest_Namespace::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateHttpNamespaceRequest_Namespace::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUpdateHttpNamespaceRequest_Namespace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateHttpNamespaceRequest_Namespace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && true;
}

} // namespace OpenAPI
