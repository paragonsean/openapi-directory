/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateHttpNamespaceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateHttpNamespaceResponse::OAIUpdateHttpNamespaceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateHttpNamespaceResponse::OAIUpdateHttpNamespaceResponse() {
    this->initializeModel();
}

OAIUpdateHttpNamespaceResponse::~OAIUpdateHttpNamespaceResponse() {}

void OAIUpdateHttpNamespaceResponse::initializeModel() {

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;
}

void OAIUpdateHttpNamespaceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateHttpNamespaceResponse::fromJsonObject(QJsonObject json) {

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;
}

QString OAIUpdateHttpNamespaceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateHttpNamespaceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    return obj;
}

QString OAIUpdateHttpNamespaceResponse::getOperationId() const {
    return m_operation_id;
}
void OAIUpdateHttpNamespaceResponse::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIUpdateHttpNamespaceResponse::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIUpdateHttpNamespaceResponse::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

bool OAIUpdateHttpNamespaceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateHttpNamespaceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
