/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceRequest::OAIUpdateServiceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceRequest::OAIUpdateServiceRequest() {
    this->initializeModel();
}

OAIUpdateServiceRequest::~OAIUpdateServiceRequest() {}

void OAIUpdateServiceRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIUpdateServiceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("Service")]);
    m_service_isSet = !json[QString("Service")].isNull() && m_service_isValid;
}

QString OAIUpdateServiceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_service.isSet()) {
        obj.insert(QString("Service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

QString OAIUpdateServiceRequest::getId() const {
    return m_id;
}
void OAIUpdateServiceRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateServiceRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateServiceRequest::is_id_Valid() const{
    return m_id_isValid;
}

OAIUpdateServiceRequest_Service OAIUpdateServiceRequest::getService() const {
    return m_service;
}
void OAIUpdateServiceRequest::setService(const OAIUpdateServiceRequest_Service &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIUpdateServiceRequest::is_service_Set() const{
    return m_service_isSet;
}

bool OAIUpdateServiceRequest::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIUpdateServiceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_service_isValid && true;
}

} // namespace OpenAPI
