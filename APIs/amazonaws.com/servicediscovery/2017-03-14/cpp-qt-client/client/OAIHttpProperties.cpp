/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpProperties::OAIHttpProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpProperties::OAIHttpProperties() {
    this->initializeModel();
}

OAIHttpProperties::~OAIHttpProperties() {}

void OAIHttpProperties::initializeModel() {

    m_http_name_isSet = false;
    m_http_name_isValid = false;
}

void OAIHttpProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpProperties::fromJsonObject(QJsonObject json) {

    m_http_name_isValid = ::OpenAPI::fromJsonValue(m_http_name, json[QString("HttpName")]);
    m_http_name_isSet = !json[QString("HttpName")].isNull() && m_http_name_isValid;
}

QString OAIHttpProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_http_name_isSet) {
        obj.insert(QString("HttpName"), ::OpenAPI::toJsonValue(m_http_name));
    }
    return obj;
}

QString OAIHttpProperties::getHttpName() const {
    return m_http_name;
}
void OAIHttpProperties::setHttpName(const QString &http_name) {
    m_http_name = http_name;
    m_http_name_isSet = true;
}

bool OAIHttpProperties::is_http_name_Set() const{
    return m_http_name_isSet;
}

bool OAIHttpProperties::is_http_name_Valid() const{
    return m_http_name_isValid;
}

bool OAIHttpProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
