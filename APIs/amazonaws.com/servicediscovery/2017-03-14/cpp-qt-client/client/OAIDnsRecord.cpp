/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsRecord::OAIDnsRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsRecord::OAIDnsRecord() {
    this->initializeModel();
}

OAIDnsRecord::~OAIDnsRecord() {}

void OAIDnsRecord::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIDnsRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsRecord::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("TTL")]);
    m_ttl_isSet = !json[QString("TTL")].isNull() && m_ttl_isValid;
}

QString OAIDnsRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("TTL"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

OAIRecordType OAIDnsRecord::getType() const {
    return m_type;
}
void OAIDnsRecord::setType(const OAIRecordType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDnsRecord::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDnsRecord::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIDnsRecord::getTtl() const {
    return m_ttl;
}
void OAIDnsRecord::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIDnsRecord::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIDnsRecord::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIDnsRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_ttl_isValid && true;
}

} // namespace OpenAPI
