/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterInstanceRequest::OAIRegisterInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterInstanceRequest::OAIRegisterInstanceRequest() {
    this->initializeModel();
}

OAIRegisterInstanceRequest::~OAIRegisterInstanceRequest() {}

void OAIRegisterInstanceRequest::initializeModel() {

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIRegisterInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterInstanceRequest::fromJsonObject(QJsonObject json) {

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;
}

QString OAIRegisterInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAIRegisterInstanceRequest::getServiceId() const {
    return m_service_id;
}
void OAIRegisterInstanceRequest::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIRegisterInstanceRequest::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIRegisterInstanceRequest::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIRegisterInstanceRequest::getInstanceId() const {
    return m_instance_id;
}
void OAIRegisterInstanceRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIRegisterInstanceRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIRegisterInstanceRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIRegisterInstanceRequest::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAIRegisterInstanceRequest::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAIRegisterInstanceRequest::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAIRegisterInstanceRequest::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

QMap OAIRegisterInstanceRequest::getAttributes() const {
    return m_attributes;
}
void OAIRegisterInstanceRequest::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIRegisterInstanceRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIRegisterInstanceRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIRegisterInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_id_isValid && m_instance_id_isValid && m_attributes_isValid && true;
}

} // namespace OpenAPI
