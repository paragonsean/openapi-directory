/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationStatus::OAIOperationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationStatus::OAIOperationStatus() {
    this->initializeModel();
}

OAIOperationStatus::~OAIOperationStatus() {}

void OAIOperationStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperationStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperationStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("SUBMITTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationStatus::SUBMITTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUCCESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationStatus::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationStatus::FAIL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperationStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperationStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperationStatus::SUBMITTED:
            val = "SUBMITTED";
            break;
        case eOAIOperationStatus::PENDING:
            val = "PENDING";
            break;
        case eOAIOperationStatus::SUCCESS:
            val = "SUCCESS";
            break;
        case eOAIOperationStatus::FAIL:
            val = "FAIL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperationStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperationStatus::eOAIOperationStatus OAIOperationStatus::getValue() const {
    return m_value;
}

void OAIOperationStatus::setValue(const OAIOperationStatus::eOAIOperationStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperationStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
