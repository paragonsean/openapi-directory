/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListServicesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListServicesResponse::OAIListServicesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListServicesResponse::OAIListServicesResponse() {
    this->initializeModel();
}

OAIListServicesResponse::~OAIListServicesResponse() {}

void OAIListServicesResponse::initializeModel() {

    m_services_isSet = false;
    m_services_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListServicesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListServicesResponse::fromJsonObject(QJsonObject json) {

    m_services_isValid = ::OpenAPI::fromJsonValue(m_services, json[QString("Services")]);
    m_services_isSet = !json[QString("Services")].isNull() && m_services_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListServicesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListServicesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_services.isSet()) {
        obj.insert(QString("Services"), ::OpenAPI::toJsonValue(m_services));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListServicesResponse::getServices() const {
    return m_services;
}
void OAIListServicesResponse::setServices(const QList &services) {
    m_services = services;
    m_services_isSet = true;
}

bool OAIListServicesResponse::is_services_Set() const{
    return m_services_isSet;
}

bool OAIListServicesResponse::is_services_Valid() const{
    return m_services_isValid;
}

QString OAIListServicesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListServicesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListServicesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListServicesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListServicesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListServicesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
