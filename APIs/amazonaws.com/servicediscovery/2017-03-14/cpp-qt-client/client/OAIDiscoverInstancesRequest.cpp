/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscoverInstancesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscoverInstancesRequest::OAIDiscoverInstancesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscoverInstancesRequest::OAIDiscoverInstancesRequest() {
    this->initializeModel();
}

OAIDiscoverInstancesRequest::~OAIDiscoverInstancesRequest() {}

void OAIDiscoverInstancesRequest::initializeModel() {

    m_namespace_name_isSet = false;
    m_namespace_name_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_query_parameters_isSet = false;
    m_query_parameters_isValid = false;

    m_optional_parameters_isSet = false;
    m_optional_parameters_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;
}

void OAIDiscoverInstancesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscoverInstancesRequest::fromJsonObject(QJsonObject json) {

    m_namespace_name_isValid = ::OpenAPI::fromJsonValue(m_namespace_name, json[QString("NamespaceName")]);
    m_namespace_name_isSet = !json[QString("NamespaceName")].isNull() && m_namespace_name_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_parameters, json[QString("QueryParameters")]);
    m_query_parameters_isSet = !json[QString("QueryParameters")].isNull() && m_query_parameters_isValid;

    m_optional_parameters_isValid = ::OpenAPI::fromJsonValue(m_optional_parameters, json[QString("OptionalParameters")]);
    m_optional_parameters_isSet = !json[QString("OptionalParameters")].isNull() && m_optional_parameters_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("HealthStatus")]);
    m_health_status_isSet = !json[QString("HealthStatus")].isNull() && m_health_status_isValid;
}

QString OAIDiscoverInstancesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscoverInstancesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_namespace_name_isSet) {
        obj.insert(QString("NamespaceName"), ::OpenAPI::toJsonValue(m_namespace_name));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_query_parameters.isSet()) {
        obj.insert(QString("QueryParameters"), ::OpenAPI::toJsonValue(m_query_parameters));
    }
    if (m_optional_parameters.isSet()) {
        obj.insert(QString("OptionalParameters"), ::OpenAPI::toJsonValue(m_optional_parameters));
    }
    if (m_health_status.isSet()) {
        obj.insert(QString("HealthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    return obj;
}

QString OAIDiscoverInstancesRequest::getNamespaceName() const {
    return m_namespace_name;
}
void OAIDiscoverInstancesRequest::setNamespaceName(const QString &namespace_name) {
    m_namespace_name = namespace_name;
    m_namespace_name_isSet = true;
}

bool OAIDiscoverInstancesRequest::is_namespace_name_Set() const{
    return m_namespace_name_isSet;
}

bool OAIDiscoverInstancesRequest::is_namespace_name_Valid() const{
    return m_namespace_name_isValid;
}

QString OAIDiscoverInstancesRequest::getServiceName() const {
    return m_service_name;
}
void OAIDiscoverInstancesRequest::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIDiscoverInstancesRequest::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIDiscoverInstancesRequest::is_service_name_Valid() const{
    return m_service_name_isValid;
}

qint32 OAIDiscoverInstancesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDiscoverInstancesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDiscoverInstancesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDiscoverInstancesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QMap OAIDiscoverInstancesRequest::getQueryParameters() const {
    return m_query_parameters;
}
void OAIDiscoverInstancesRequest::setQueryParameters(const QMap &query_parameters) {
    m_query_parameters = query_parameters;
    m_query_parameters_isSet = true;
}

bool OAIDiscoverInstancesRequest::is_query_parameters_Set() const{
    return m_query_parameters_isSet;
}

bool OAIDiscoverInstancesRequest::is_query_parameters_Valid() const{
    return m_query_parameters_isValid;
}

QMap OAIDiscoverInstancesRequest::getOptionalParameters() const {
    return m_optional_parameters;
}
void OAIDiscoverInstancesRequest::setOptionalParameters(const QMap &optional_parameters) {
    m_optional_parameters = optional_parameters;
    m_optional_parameters_isSet = true;
}

bool OAIDiscoverInstancesRequest::is_optional_parameters_Set() const{
    return m_optional_parameters_isSet;
}

bool OAIDiscoverInstancesRequest::is_optional_parameters_Valid() const{
    return m_optional_parameters_isValid;
}

OAIHealthStatusFilter OAIDiscoverInstancesRequest::getHealthStatus() const {
    return m_health_status;
}
void OAIDiscoverInstancesRequest::setHealthStatus(const OAIHealthStatusFilter &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIDiscoverInstancesRequest::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIDiscoverInstancesRequest::is_health_status_Valid() const{
    return m_health_status_isValid;
}

bool OAIDiscoverInstancesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_namespace_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscoverInstancesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_namespace_name_isValid && m_service_name_isValid && true;
}

} // namespace OpenAPI
