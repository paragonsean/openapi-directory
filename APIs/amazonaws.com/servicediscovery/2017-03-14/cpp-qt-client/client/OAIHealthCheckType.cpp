/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthCheckType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthCheckType::OAIHealthCheckType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthCheckType::OAIHealthCheckType() {
    this->initializeModel();
}

OAIHealthCheckType::~OAIHealthCheckType() {}

void OAIHealthCheckType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIHealthCheckType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIHealthCheckType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("HTTP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthCheckType::HTTP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HTTPS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthCheckType::HTTPS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TCP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIHealthCheckType::TCP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIHealthCheckType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIHealthCheckType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIHealthCheckType::HTTP:
            val = "HTTP";
            break;
        case eOAIHealthCheckType::HTTPS:
            val = "HTTPS";
            break;
        case eOAIHealthCheckType::TCP:
            val = "TCP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIHealthCheckType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIHealthCheckType::eOAIHealthCheckType OAIHealthCheckType::getValue() const {
    return m_value;
}

void OAIHealthCheckType::setValue(const OAIHealthCheckType::eOAIHealthCheckType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIHealthCheckType::isSet() const {
    
    return m_value_isSet;
}

bool OAIHealthCheckType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
