/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateDnsPropertiesMutable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateDnsPropertiesMutable::OAIPrivateDnsPropertiesMutable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateDnsPropertiesMutable::OAIPrivateDnsPropertiesMutable() {
    this->initializeModel();
}

OAIPrivateDnsPropertiesMutable::~OAIPrivateDnsPropertiesMutable() {}

void OAIPrivateDnsPropertiesMutable::initializeModel() {

    m_soa_isSet = false;
    m_soa_isValid = false;
}

void OAIPrivateDnsPropertiesMutable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateDnsPropertiesMutable::fromJsonObject(QJsonObject json) {

    m_soa_isValid = ::OpenAPI::fromJsonValue(m_soa, json[QString("SOA")]);
    m_soa_isSet = !json[QString("SOA")].isNull() && m_soa_isValid;
}

QString OAIPrivateDnsPropertiesMutable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateDnsPropertiesMutable::asJsonObject() const {
    QJsonObject obj;
    if (m_soa.isSet()) {
        obj.insert(QString("SOA"), ::OpenAPI::toJsonValue(m_soa));
    }
    return obj;
}

OAIPrivateDnsPropertiesMutable_SOA OAIPrivateDnsPropertiesMutable::getSoa() const {
    return m_soa;
}
void OAIPrivateDnsPropertiesMutable::setSoa(const OAIPrivateDnsPropertiesMutable_SOA &soa) {
    m_soa = soa;
    m_soa_isSet = true;
}

bool OAIPrivateDnsPropertiesMutable::is_soa_Set() const{
    return m_soa_isSet;
}

bool OAIPrivateDnsPropertiesMutable::is_soa_Valid() const{
    return m_soa_isValid;
}

bool OAIPrivateDnsPropertiesMutable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_soa.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateDnsPropertiesMutable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_soa_isValid && true;
}

} // namespace OpenAPI
