/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePrivateDnsNamespaceRequest_Namespace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePrivateDnsNamespaceRequest_Namespace::OAIUpdatePrivateDnsNamespaceRequest_Namespace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePrivateDnsNamespaceRequest_Namespace::OAIUpdatePrivateDnsNamespaceRequest_Namespace() {
    this->initializeModel();
}

OAIUpdatePrivateDnsNamespaceRequest_Namespace::~OAIUpdatePrivateDnsNamespaceRequest_Namespace() {}

void OAIUpdatePrivateDnsNamespaceRequest_Namespace::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIUpdatePrivateDnsNamespaceRequest_Namespace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePrivateDnsNamespaceRequest_Namespace::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;
}

QString OAIUpdatePrivateDnsNamespaceRequest_Namespace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePrivateDnsNamespaceRequest_Namespace::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAIUpdatePrivateDnsNamespaceRequest_Namespace::getDescription() const {
    return m_description;
}
void OAIUpdatePrivateDnsNamespaceRequest_Namespace::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdatePrivateDnsNamespaceRequest_Namespace::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdatePrivateDnsNamespaceRequest_Namespace::is_description_Valid() const{
    return m_description_isValid;
}

OAIPrivateDnsNamespaceChange_Properties OAIUpdatePrivateDnsNamespaceRequest_Namespace::getProperties() const {
    return m_properties;
}
void OAIUpdatePrivateDnsNamespaceRequest_Namespace::setProperties(const OAIPrivateDnsNamespaceChange_Properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIUpdatePrivateDnsNamespaceRequest_Namespace::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIUpdatePrivateDnsNamespaceRequest_Namespace::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIUpdatePrivateDnsNamespaceRequest_Namespace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePrivateDnsNamespaceRequest_Namespace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
