/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespace::OAINamespace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespace::OAINamespace() {
    this->initializeModel();
}

OAINamespace::~OAINamespace() {}

void OAINamespace::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_service_count_isSet = false;
    m_service_count_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;
}

void OAINamespace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespace::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_service_count_isValid = ::OpenAPI::fromJsonValue(m_service_count, json[QString("ServiceCount")]);
    m_service_count_isSet = !json[QString("ServiceCount")].isNull() && m_service_count_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("CreateDate")]);
    m_create_date_isSet = !json[QString("CreateDate")].isNull() && m_create_date_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;
}

QString OAINamespace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespace::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_service_count_isSet) {
        obj.insert(QString("ServiceCount"), ::OpenAPI::toJsonValue(m_service_count));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("CreateDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    return obj;
}

QString OAINamespace::getId() const {
    return m_id;
}
void OAINamespace::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINamespace::is_id_Set() const{
    return m_id_isSet;
}

bool OAINamespace::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINamespace::getArn() const {
    return m_arn;
}
void OAINamespace::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAINamespace::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAINamespace::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAINamespace::getName() const {
    return m_name;
}
void OAINamespace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINamespace::is_name_Set() const{
    return m_name_isSet;
}

bool OAINamespace::is_name_Valid() const{
    return m_name_isValid;
}

OAINamespaceType OAINamespace::getType() const {
    return m_type;
}
void OAINamespace::setType(const OAINamespaceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINamespace::is_type_Set() const{
    return m_type_isSet;
}

bool OAINamespace::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINamespace::getDescription() const {
    return m_description;
}
void OAINamespace::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAINamespace::is_description_Set() const{
    return m_description_isSet;
}

bool OAINamespace::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAINamespace::getServiceCount() const {
    return m_service_count;
}
void OAINamespace::setServiceCount(const qint32 &service_count) {
    m_service_count = service_count;
    m_service_count_isSet = true;
}

bool OAINamespace::is_service_count_Set() const{
    return m_service_count_isSet;
}

bool OAINamespace::is_service_count_Valid() const{
    return m_service_count_isValid;
}

OAINamespace_Properties OAINamespace::getProperties() const {
    return m_properties;
}
void OAINamespace::setProperties(const OAINamespace_Properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAINamespace::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAINamespace::is_properties_Valid() const{
    return m_properties_isValid;
}

QDateTime OAINamespace::getCreateDate() const {
    return m_create_date;
}
void OAINamespace::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAINamespace::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAINamespace::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAINamespace::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAINamespace::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAINamespace::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAINamespace::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

bool OAINamespace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
