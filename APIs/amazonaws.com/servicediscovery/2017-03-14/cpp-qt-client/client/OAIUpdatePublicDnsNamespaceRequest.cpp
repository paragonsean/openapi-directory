/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePublicDnsNamespaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePublicDnsNamespaceRequest::OAIUpdatePublicDnsNamespaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePublicDnsNamespaceRequest::OAIUpdatePublicDnsNamespaceRequest() {
    this->initializeModel();
}

OAIUpdatePublicDnsNamespaceRequest::~OAIUpdatePublicDnsNamespaceRequest() {}

void OAIUpdatePublicDnsNamespaceRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_updater_request_id_isSet = false;
    m_updater_request_id_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;
}

void OAIUpdatePublicDnsNamespaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePublicDnsNamespaceRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_updater_request_id_isValid = ::OpenAPI::fromJsonValue(m_updater_request_id, json[QString("UpdaterRequestId")]);
    m_updater_request_id_isSet = !json[QString("UpdaterRequestId")].isNull() && m_updater_request_id_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;
}

QString OAIUpdatePublicDnsNamespaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePublicDnsNamespaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updater_request_id_isSet) {
        obj.insert(QString("UpdaterRequestId"), ::OpenAPI::toJsonValue(m_updater_request_id));
    }
    if (m_r_namespace.isSet()) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    return obj;
}

QString OAIUpdatePublicDnsNamespaceRequest::getId() const {
    return m_id;
}
void OAIUpdatePublicDnsNamespaceRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdatePublicDnsNamespaceRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdatePublicDnsNamespaceRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUpdatePublicDnsNamespaceRequest::getUpdaterRequestId() const {
    return m_updater_request_id;
}
void OAIUpdatePublicDnsNamespaceRequest::setUpdaterRequestId(const QString &updater_request_id) {
    m_updater_request_id = updater_request_id;
    m_updater_request_id_isSet = true;
}

bool OAIUpdatePublicDnsNamespaceRequest::is_updater_request_id_Set() const{
    return m_updater_request_id_isSet;
}

bool OAIUpdatePublicDnsNamespaceRequest::is_updater_request_id_Valid() const{
    return m_updater_request_id_isValid;
}

OAIUpdatePublicDnsNamespaceRequest_Namespace OAIUpdatePublicDnsNamespaceRequest::getRNamespace() const {
    return m_r_namespace;
}
void OAIUpdatePublicDnsNamespaceRequest::setRNamespace(const OAIUpdatePublicDnsNamespaceRequest_Namespace &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIUpdatePublicDnsNamespaceRequest::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIUpdatePublicDnsNamespaceRequest::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

bool OAIUpdatePublicDnsNamespaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updater_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePublicDnsNamespaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_r_namespace_isValid && true;
}

} // namespace OpenAPI
