/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateServiceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateServiceRequest::OAICreateServiceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateServiceRequest::OAICreateServiceRequest() {
    this->initializeModel();
}

OAICreateServiceRequest::~OAICreateServiceRequest() {}

void OAICreateServiceRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_namespace_id_isSet = false;
    m_namespace_id_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_dns_config_isSet = false;
    m_dns_config_isValid = false;

    m_health_check_config_isSet = false;
    m_health_check_config_isValid = false;

    m_health_check_custom_config_isSet = false;
    m_health_check_custom_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateServiceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateServiceRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_namespace_id_isValid = ::OpenAPI::fromJsonValue(m_namespace_id, json[QString("NamespaceId")]);
    m_namespace_id_isSet = !json[QString("NamespaceId")].isNull() && m_namespace_id_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_dns_config_isValid = ::OpenAPI::fromJsonValue(m_dns_config, json[QString("DnsConfig")]);
    m_dns_config_isSet = !json[QString("DnsConfig")].isNull() && m_dns_config_isValid;

    m_health_check_config_isValid = ::OpenAPI::fromJsonValue(m_health_check_config, json[QString("HealthCheckConfig")]);
    m_health_check_config_isSet = !json[QString("HealthCheckConfig")].isNull() && m_health_check_config_isValid;

    m_health_check_custom_config_isValid = ::OpenAPI::fromJsonValue(m_health_check_custom_config, json[QString("HealthCheckCustomConfig")]);
    m_health_check_custom_config_isSet = !json[QString("HealthCheckCustomConfig")].isNull() && m_health_check_custom_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAICreateServiceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateServiceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_namespace_id_isSet) {
        obj.insert(QString("NamespaceId"), ::OpenAPI::toJsonValue(m_namespace_id));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dns_config.isSet()) {
        obj.insert(QString("DnsConfig"), ::OpenAPI::toJsonValue(m_dns_config));
    }
    if (m_health_check_config.isSet()) {
        obj.insert(QString("HealthCheckConfig"), ::OpenAPI::toJsonValue(m_health_check_config));
    }
    if (m_health_check_custom_config.isSet()) {
        obj.insert(QString("HealthCheckCustomConfig"), ::OpenAPI::toJsonValue(m_health_check_custom_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreateServiceRequest::getName() const {
    return m_name;
}
void OAICreateServiceRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateServiceRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateServiceRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateServiceRequest::getNamespaceId() const {
    return m_namespace_id;
}
void OAICreateServiceRequest::setNamespaceId(const QString &namespace_id) {
    m_namespace_id = namespace_id;
    m_namespace_id_isSet = true;
}

bool OAICreateServiceRequest::is_namespace_id_Set() const{
    return m_namespace_id_isSet;
}

bool OAICreateServiceRequest::is_namespace_id_Valid() const{
    return m_namespace_id_isValid;
}

QString OAICreateServiceRequest::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAICreateServiceRequest::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAICreateServiceRequest::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAICreateServiceRequest::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

QString OAICreateServiceRequest::getDescription() const {
    return m_description;
}
void OAICreateServiceRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateServiceRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateServiceRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateServiceRequest_DnsConfig OAICreateServiceRequest::getDnsConfig() const {
    return m_dns_config;
}
void OAICreateServiceRequest::setDnsConfig(const OAICreateServiceRequest_DnsConfig &dns_config) {
    m_dns_config = dns_config;
    m_dns_config_isSet = true;
}

bool OAICreateServiceRequest::is_dns_config_Set() const{
    return m_dns_config_isSet;
}

bool OAICreateServiceRequest::is_dns_config_Valid() const{
    return m_dns_config_isValid;
}

OAICreateServiceRequest_HealthCheckConfig OAICreateServiceRequest::getHealthCheckConfig() const {
    return m_health_check_config;
}
void OAICreateServiceRequest::setHealthCheckConfig(const OAICreateServiceRequest_HealthCheckConfig &health_check_config) {
    m_health_check_config = health_check_config;
    m_health_check_config_isSet = true;
}

bool OAICreateServiceRequest::is_health_check_config_Set() const{
    return m_health_check_config_isSet;
}

bool OAICreateServiceRequest::is_health_check_config_Valid() const{
    return m_health_check_config_isValid;
}

OAICreateServiceRequest_HealthCheckCustomConfig OAICreateServiceRequest::getHealthCheckCustomConfig() const {
    return m_health_check_custom_config;
}
void OAICreateServiceRequest::setHealthCheckCustomConfig(const OAICreateServiceRequest_HealthCheckCustomConfig &health_check_custom_config) {
    m_health_check_custom_config = health_check_custom_config;
    m_health_check_custom_config_isSet = true;
}

bool OAICreateServiceRequest::is_health_check_custom_config_Set() const{
    return m_health_check_custom_config_isSet;
}

bool OAICreateServiceRequest::is_health_check_custom_config_Valid() const{
    return m_health_check_custom_config_isValid;
}

QList OAICreateServiceRequest::getTags() const {
    return m_tags;
}
void OAICreateServiceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateServiceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateServiceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIServiceTypeOption OAICreateServiceRequest::getType() const {
    return m_type;
}
void OAICreateServiceRequest::setType(const OAIServiceTypeOption &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateServiceRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateServiceRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateServiceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_custom_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateServiceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
