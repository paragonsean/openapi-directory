/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInstancesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInstancesRequest::OAIListInstancesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInstancesRequest::OAIListInstancesRequest() {
    this->initializeModel();
}

OAIListInstancesRequest::~OAIListInstancesRequest() {}

void OAIListInstancesRequest::initializeModel() {

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListInstancesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInstancesRequest::fromJsonObject(QJsonObject json) {

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListInstancesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInstancesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListInstancesRequest::getServiceId() const {
    return m_service_id;
}
void OAIListInstancesRequest::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIListInstancesRequest::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIListInstancesRequest::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIListInstancesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListInstancesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListInstancesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListInstancesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListInstancesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListInstancesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListInstancesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListInstancesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListInstancesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInstancesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_id_isValid && true;
}

} // namespace OpenAPI
