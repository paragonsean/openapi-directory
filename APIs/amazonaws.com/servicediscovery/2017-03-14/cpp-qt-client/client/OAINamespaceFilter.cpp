/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespaceFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespaceFilter::OAINamespaceFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespaceFilter::OAINamespaceFilter() {
    this->initializeModel();
}

OAINamespaceFilter::~OAINamespaceFilter() {}

void OAINamespaceFilter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;
}

void OAINamespaceFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespaceFilter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("Values")]);
    m_values_isSet = !json[QString("Values")].isNull() && m_values_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("Condition")]);
    m_condition_isSet = !json[QString("Condition")].isNull() && m_condition_isValid;
}

QString OAINamespaceFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespaceFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_name.isSet()) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("Values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("Condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    return obj;
}

OAINamespaceFilterName OAINamespaceFilter::getName() const {
    return m_name;
}
void OAINamespaceFilter::setName(const OAINamespaceFilterName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINamespaceFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAINamespaceFilter::is_name_Valid() const{
    return m_name_isValid;
}

QList OAINamespaceFilter::getValues() const {
    return m_values;
}
void OAINamespaceFilter::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAINamespaceFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAINamespaceFilter::is_values_Valid() const{
    return m_values_isValid;
}

OAIFilterCondition OAINamespaceFilter::getCondition() const {
    return m_condition;
}
void OAINamespaceFilter::setCondition(const OAIFilterCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAINamespaceFilter::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAINamespaceFilter::is_condition_Valid() const{
    return m_condition_isValid;
}

bool OAINamespaceFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespaceFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
