/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicDnsNamespaceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicDnsNamespaceProperties::OAIPublicDnsNamespaceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicDnsNamespaceProperties::OAIPublicDnsNamespaceProperties() {
    this->initializeModel();
}

OAIPublicDnsNamespaceProperties::~OAIPublicDnsNamespaceProperties() {}

void OAIPublicDnsNamespaceProperties::initializeModel() {

    m_dns_properties_isSet = false;
    m_dns_properties_isValid = false;
}

void OAIPublicDnsNamespaceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicDnsNamespaceProperties::fromJsonObject(QJsonObject json) {

    m_dns_properties_isValid = ::OpenAPI::fromJsonValue(m_dns_properties, json[QString("DnsProperties")]);
    m_dns_properties_isSet = !json[QString("DnsProperties")].isNull() && m_dns_properties_isValid;
}

QString OAIPublicDnsNamespaceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicDnsNamespaceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_properties.isSet()) {
        obj.insert(QString("DnsProperties"), ::OpenAPI::toJsonValue(m_dns_properties));
    }
    return obj;
}

OAIPublicDnsNamespaceProperties_DnsProperties OAIPublicDnsNamespaceProperties::getDnsProperties() const {
    return m_dns_properties;
}
void OAIPublicDnsNamespaceProperties::setDnsProperties(const OAIPublicDnsNamespaceProperties_DnsProperties &dns_properties) {
    m_dns_properties = dns_properties;
    m_dns_properties_isSet = true;
}

bool OAIPublicDnsNamespaceProperties::is_dns_properties_Set() const{
    return m_dns_properties_isSet;
}

bool OAIPublicDnsNamespaceProperties::is_dns_properties_Valid() const{
    return m_dns_properties_isValid;
}

bool OAIPublicDnsNamespaceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicDnsNamespaceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dns_properties_isValid && true;
}

} // namespace OpenAPI
