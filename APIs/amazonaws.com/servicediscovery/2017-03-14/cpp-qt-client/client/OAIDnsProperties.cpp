/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsProperties::OAIDnsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsProperties::OAIDnsProperties() {
    this->initializeModel();
}

OAIDnsProperties::~OAIDnsProperties() {}

void OAIDnsProperties::initializeModel() {

    m_hosted_zone_id_isSet = false;
    m_hosted_zone_id_isValid = false;

    m_soa_isSet = false;
    m_soa_isValid = false;
}

void OAIDnsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsProperties::fromJsonObject(QJsonObject json) {

    m_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_id, json[QString("HostedZoneId")]);
    m_hosted_zone_id_isSet = !json[QString("HostedZoneId")].isNull() && m_hosted_zone_id_isValid;

    m_soa_isValid = ::OpenAPI::fromJsonValue(m_soa, json[QString("SOA")]);
    m_soa_isSet = !json[QString("SOA")].isNull() && m_soa_isValid;
}

QString OAIDnsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_hosted_zone_id_isSet) {
        obj.insert(QString("HostedZoneId"), ::OpenAPI::toJsonValue(m_hosted_zone_id));
    }
    if (m_soa.isSet()) {
        obj.insert(QString("SOA"), ::OpenAPI::toJsonValue(m_soa));
    }
    return obj;
}

QString OAIDnsProperties::getHostedZoneId() const {
    return m_hosted_zone_id;
}
void OAIDnsProperties::setHostedZoneId(const QString &hosted_zone_id) {
    m_hosted_zone_id = hosted_zone_id;
    m_hosted_zone_id_isSet = true;
}

bool OAIDnsProperties::is_hosted_zone_id_Set() const{
    return m_hosted_zone_id_isSet;
}

bool OAIDnsProperties::is_hosted_zone_id_Valid() const{
    return m_hosted_zone_id_isValid;
}

OAIDnsProperties_SOA OAIDnsProperties::getSoa() const {
    return m_soa;
}
void OAIDnsProperties::setSoa(const OAIDnsProperties_SOA &soa) {
    m_soa = soa;
    m_soa_isSet = true;
}

bool OAIDnsProperties::is_soa_Set() const{
    return m_soa_isSet;
}

bool OAIDnsProperties::is_soa_Valid() const{
    return m_soa_isValid;
}

bool OAIDnsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_soa.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
