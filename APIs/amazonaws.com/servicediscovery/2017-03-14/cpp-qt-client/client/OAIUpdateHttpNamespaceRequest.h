/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateHttpNamespaceRequest.h
 *
 * 
 */

#ifndef OAIUpdateHttpNamespaceRequest_H
#define OAIUpdateHttpNamespaceRequest_H

#include <QJsonObject>

#include "OAIUpdateHttpNamespaceRequest_Namespace.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateHttpNamespaceRequest_Namespace;

class OAIUpdateHttpNamespaceRequest : public OAIObject {
public:
    OAIUpdateHttpNamespaceRequest();
    OAIUpdateHttpNamespaceRequest(QString json);
    ~OAIUpdateHttpNamespaceRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getUpdaterRequestId() const;
    void setUpdaterRequestId(const QString &updater_request_id);
    bool is_updater_request_id_Set() const;
    bool is_updater_request_id_Valid() const;

    OAIUpdateHttpNamespaceRequest_Namespace getRNamespace() const;
    void setRNamespace(const OAIUpdateHttpNamespaceRequest_Namespace &r_namespace);
    bool is_r_namespace_Set() const;
    bool is_r_namespace_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_updater_request_id;
    bool m_updater_request_id_isSet;
    bool m_updater_request_id_isValid;

    OAIUpdateHttpNamespaceRequest_Namespace m_r_namespace;
    bool m_r_namespace_isSet;
    bool m_r_namespace_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateHttpNamespaceRequest)

#endif // OAIUpdateHttpNamespaceRequest_H
