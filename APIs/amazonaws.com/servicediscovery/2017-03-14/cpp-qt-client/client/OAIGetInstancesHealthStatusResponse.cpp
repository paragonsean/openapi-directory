/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetInstancesHealthStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetInstancesHealthStatusResponse::OAIGetInstancesHealthStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetInstancesHealthStatusResponse::OAIGetInstancesHealthStatusResponse() {
    this->initializeModel();
}

OAIGetInstancesHealthStatusResponse::~OAIGetInstancesHealthStatusResponse() {}

void OAIGetInstancesHealthStatusResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetInstancesHealthStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetInstancesHealthStatusResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetInstancesHealthStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetInstancesHealthStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QMap OAIGetInstancesHealthStatusResponse::getStatus() const {
    return m_status;
}
void OAIGetInstancesHealthStatusResponse::setStatus(const QMap &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetInstancesHealthStatusResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetInstancesHealthStatusResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetInstancesHealthStatusResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetInstancesHealthStatusResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetInstancesHealthStatusResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetInstancesHealthStatusResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetInstancesHealthStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetInstancesHealthStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
