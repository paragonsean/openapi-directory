/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetInstanceResponse_Instance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetInstanceResponse_Instance::OAIGetInstanceResponse_Instance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetInstanceResponse_Instance::OAIGetInstanceResponse_Instance() {
    this->initializeModel();
}

OAIGetInstanceResponse_Instance::~OAIGetInstanceResponse_Instance() {}

void OAIGetInstanceResponse_Instance::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIGetInstanceResponse_Instance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetInstanceResponse_Instance::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;
}

QString OAIGetInstanceResponse_Instance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetInstanceResponse_Instance::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAIGetInstanceResponse_Instance::getId() const {
    return m_id;
}
void OAIGetInstanceResponse_Instance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetInstanceResponse_Instance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetInstanceResponse_Instance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetInstanceResponse_Instance::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAIGetInstanceResponse_Instance::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAIGetInstanceResponse_Instance::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAIGetInstanceResponse_Instance::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

QMap OAIGetInstanceResponse_Instance::getAttributes() const {
    return m_attributes;
}
void OAIGetInstanceResponse_Instance::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIGetInstanceResponse_Instance::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIGetInstanceResponse_Instance::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIGetInstanceResponse_Instance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetInstanceResponse_Instance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
