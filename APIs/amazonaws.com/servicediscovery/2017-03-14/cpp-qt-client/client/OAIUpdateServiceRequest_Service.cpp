/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceRequest_Service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceRequest_Service::OAIUpdateServiceRequest_Service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceRequest_Service::OAIUpdateServiceRequest_Service() {
    this->initializeModel();
}

OAIUpdateServiceRequest_Service::~OAIUpdateServiceRequest_Service() {}

void OAIUpdateServiceRequest_Service::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_dns_config_isSet = false;
    m_dns_config_isValid = false;

    m_health_check_config_isSet = false;
    m_health_check_config_isValid = false;
}

void OAIUpdateServiceRequest_Service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceRequest_Service::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_dns_config_isValid = ::OpenAPI::fromJsonValue(m_dns_config, json[QString("DnsConfig")]);
    m_dns_config_isSet = !json[QString("DnsConfig")].isNull() && m_dns_config_isValid;

    m_health_check_config_isValid = ::OpenAPI::fromJsonValue(m_health_check_config, json[QString("HealthCheckConfig")]);
    m_health_check_config_isSet = !json[QString("HealthCheckConfig")].isNull() && m_health_check_config_isValid;
}

QString OAIUpdateServiceRequest_Service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceRequest_Service::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_dns_config.isSet()) {
        obj.insert(QString("DnsConfig"), ::OpenAPI::toJsonValue(m_dns_config));
    }
    if (m_health_check_config.isSet()) {
        obj.insert(QString("HealthCheckConfig"), ::OpenAPI::toJsonValue(m_health_check_config));
    }
    return obj;
}

QString OAIUpdateServiceRequest_Service::getDescription() const {
    return m_description;
}
void OAIUpdateServiceRequest_Service::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateServiceRequest_Service::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateServiceRequest_Service::is_description_Valid() const{
    return m_description_isValid;
}

OAIServiceChange_DnsConfig OAIUpdateServiceRequest_Service::getDnsConfig() const {
    return m_dns_config;
}
void OAIUpdateServiceRequest_Service::setDnsConfig(const OAIServiceChange_DnsConfig &dns_config) {
    m_dns_config = dns_config;
    m_dns_config_isSet = true;
}

bool OAIUpdateServiceRequest_Service::is_dns_config_Set() const{
    return m_dns_config_isSet;
}

bool OAIUpdateServiceRequest_Service::is_dns_config_Valid() const{
    return m_dns_config_isValid;
}

OAIServiceChange_HealthCheckConfig OAIUpdateServiceRequest_Service::getHealthCheckConfig() const {
    return m_health_check_config;
}
void OAIUpdateServiceRequest_Service::setHealthCheckConfig(const OAIServiceChange_HealthCheckConfig &health_check_config) {
    m_health_check_config = health_check_config;
    m_health_check_config_isSet = true;
}

bool OAIUpdateServiceRequest_Service::is_health_check_config_Set() const{
    return m_health_check_config_isSet;
}

bool OAIUpdateServiceRequest_Service::is_health_check_config_Valid() const{
    return m_health_check_config_isValid;
}

bool OAIUpdateServiceRequest_Service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceRequest_Service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
