/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOperationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOperationResponse::OAIGetOperationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOperationResponse::OAIGetOperationResponse() {
    this->initializeModel();
}

OAIGetOperationResponse::~OAIGetOperationResponse() {}

void OAIGetOperationResponse::initializeModel() {

    m_operation_isSet = false;
    m_operation_isValid = false;
}

void OAIGetOperationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOperationResponse::fromJsonObject(QJsonObject json) {

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("Operation")]);
    m_operation_isSet = !json[QString("Operation")].isNull() && m_operation_isValid;
}

QString OAIGetOperationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOperationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_operation.isSet()) {
        obj.insert(QString("Operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    return obj;
}

OAIGetOperationResponse_Operation OAIGetOperationResponse::getOperation() const {
    return m_operation;
}
void OAIGetOperationResponse::setOperation(const OAIGetOperationResponse_Operation &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIGetOperationResponse::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIGetOperationResponse::is_operation_Valid() const{
    return m_operation_isValid;
}

bool OAIGetOperationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOperationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
