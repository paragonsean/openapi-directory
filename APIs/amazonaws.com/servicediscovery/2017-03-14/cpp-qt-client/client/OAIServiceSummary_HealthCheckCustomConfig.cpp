/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceSummary_HealthCheckCustomConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceSummary_HealthCheckCustomConfig::OAIServiceSummary_HealthCheckCustomConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceSummary_HealthCheckCustomConfig::OAIServiceSummary_HealthCheckCustomConfig() {
    this->initializeModel();
}

OAIServiceSummary_HealthCheckCustomConfig::~OAIServiceSummary_HealthCheckCustomConfig() {}

void OAIServiceSummary_HealthCheckCustomConfig::initializeModel() {

    m_failure_threshold_isSet = false;
    m_failure_threshold_isValid = false;
}

void OAIServiceSummary_HealthCheckCustomConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceSummary_HealthCheckCustomConfig::fromJsonObject(QJsonObject json) {

    m_failure_threshold_isValid = ::OpenAPI::fromJsonValue(m_failure_threshold, json[QString("FailureThreshold")]);
    m_failure_threshold_isSet = !json[QString("FailureThreshold")].isNull() && m_failure_threshold_isValid;
}

QString OAIServiceSummary_HealthCheckCustomConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceSummary_HealthCheckCustomConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_threshold_isSet) {
        obj.insert(QString("FailureThreshold"), ::OpenAPI::toJsonValue(m_failure_threshold));
    }
    return obj;
}

qint32 OAIServiceSummary_HealthCheckCustomConfig::getFailureThreshold() const {
    return m_failure_threshold;
}
void OAIServiceSummary_HealthCheckCustomConfig::setFailureThreshold(const qint32 &failure_threshold) {
    m_failure_threshold = failure_threshold;
    m_failure_threshold_isSet = true;
}

bool OAIServiceSummary_HealthCheckCustomConfig::is_failure_threshold_Set() const{
    return m_failure_threshold_isSet;
}

bool OAIServiceSummary_HealthCheckCustomConfig::is_failure_threshold_Valid() const{
    return m_failure_threshold_isValid;
}

bool OAIServiceSummary_HealthCheckCustomConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceSummary_HealthCheckCustomConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
