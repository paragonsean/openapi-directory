/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthCheckConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthCheckConfig::OAIHealthCheckConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthCheckConfig::OAIHealthCheckConfig() {
    this->initializeModel();
}

OAIHealthCheckConfig::~OAIHealthCheckConfig() {}

void OAIHealthCheckConfig::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_resource_path_isSet = false;
    m_resource_path_isValid = false;

    m_failure_threshold_isSet = false;
    m_failure_threshold_isValid = false;
}

void OAIHealthCheckConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthCheckConfig::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_resource_path_isValid = ::OpenAPI::fromJsonValue(m_resource_path, json[QString("ResourcePath")]);
    m_resource_path_isSet = !json[QString("ResourcePath")].isNull() && m_resource_path_isValid;

    m_failure_threshold_isValid = ::OpenAPI::fromJsonValue(m_failure_threshold, json[QString("FailureThreshold")]);
    m_failure_threshold_isSet = !json[QString("FailureThreshold")].isNull() && m_failure_threshold_isValid;
}

QString OAIHealthCheckConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthCheckConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_resource_path_isSet) {
        obj.insert(QString("ResourcePath"), ::OpenAPI::toJsonValue(m_resource_path));
    }
    if (m_failure_threshold_isSet) {
        obj.insert(QString("FailureThreshold"), ::OpenAPI::toJsonValue(m_failure_threshold));
    }
    return obj;
}

OAIHealthCheckType OAIHealthCheckConfig::getType() const {
    return m_type;
}
void OAIHealthCheckConfig::setType(const OAIHealthCheckType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHealthCheckConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHealthCheckConfig::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIHealthCheckConfig::getResourcePath() const {
    return m_resource_path;
}
void OAIHealthCheckConfig::setResourcePath(const QString &resource_path) {
    m_resource_path = resource_path;
    m_resource_path_isSet = true;
}

bool OAIHealthCheckConfig::is_resource_path_Set() const{
    return m_resource_path_isSet;
}

bool OAIHealthCheckConfig::is_resource_path_Valid() const{
    return m_resource_path_isValid;
}

qint32 OAIHealthCheckConfig::getFailureThreshold() const {
    return m_failure_threshold;
}
void OAIHealthCheckConfig::setFailureThreshold(const qint32 &failure_threshold) {
    m_failure_threshold = failure_threshold;
    m_failure_threshold_isSet = true;
}

bool OAIHealthCheckConfig::is_failure_threshold_Set() const{
    return m_failure_threshold_isSet;
}

bool OAIHealthCheckConfig::is_failure_threshold_Valid() const{
    return m_failure_threshold_isValid;
}

bool OAIHealthCheckConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthCheckConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
