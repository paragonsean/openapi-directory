/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetInstancesHealthStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetInstancesHealthStatusRequest::OAIGetInstancesHealthStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetInstancesHealthStatusRequest::OAIGetInstancesHealthStatusRequest() {
    this->initializeModel();
}

OAIGetInstancesHealthStatusRequest::~OAIGetInstancesHealthStatusRequest() {}

void OAIGetInstancesHealthStatusRequest::initializeModel() {

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetInstancesHealthStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetInstancesHealthStatusRequest::fromJsonObject(QJsonObject json) {

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceId")]);
    m_service_id_isSet = !json[QString("ServiceId")].isNull() && m_service_id_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("Instances")]);
    m_instances_isSet = !json[QString("Instances")].isNull() && m_instances_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetInstancesHealthStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetInstancesHealthStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_instances.isSet()) {
        obj.insert(QString("Instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIGetInstancesHealthStatusRequest::getServiceId() const {
    return m_service_id;
}
void OAIGetInstancesHealthStatusRequest::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIGetInstancesHealthStatusRequest::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIGetInstancesHealthStatusRequest::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QList OAIGetInstancesHealthStatusRequest::getInstances() const {
    return m_instances;
}
void OAIGetInstancesHealthStatusRequest::setInstances(const QList &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIGetInstancesHealthStatusRequest::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIGetInstancesHealthStatusRequest::is_instances_Valid() const{
    return m_instances_isValid;
}

qint32 OAIGetInstancesHealthStatusRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetInstancesHealthStatusRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetInstancesHealthStatusRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetInstancesHealthStatusRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetInstancesHealthStatusRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetInstancesHealthStatusRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetInstancesHealthStatusRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetInstancesHealthStatusRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetInstancesHealthStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetInstancesHealthStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_id_isValid && true;
}

} // namespace OpenAPI
