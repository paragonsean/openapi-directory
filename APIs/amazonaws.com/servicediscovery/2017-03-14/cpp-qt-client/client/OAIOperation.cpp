/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    this->initializeModel();
}

OAIOperation::~OAIOperation() {}

void OAIOperation::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAIOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperation::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("ErrorCode")]);
    m_error_code_isSet = !json[QString("ErrorCode")].isNull() && m_error_code_isValid;

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("CreateDate")]);
    m_create_date_isSet = !json[QString("CreateDate")].isNull() && m_create_date_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("UpdateDate")]);
    m_update_date_isSet = !json[QString("UpdateDate")].isNull() && m_update_date_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("Targets")]);
    m_targets_isSet = !json[QString("Targets")].isNull() && m_targets_isValid;
}

QString OAIOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("ErrorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_create_date_isSet) {
        obj.insert(QString("CreateDate"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("UpdateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("Targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

QString OAIOperation::getId() const {
    return m_id;
}
void OAIOperation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOperation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOperation::is_id_Valid() const{
    return m_id_isValid;
}

OAIOperationType OAIOperation::getType() const {
    return m_type;
}
void OAIOperation::setType(const OAIOperationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOperation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOperation::is_type_Valid() const{
    return m_type_isValid;
}

OAIOperationStatus OAIOperation::getStatus() const {
    return m_status;
}
void OAIOperation::setStatus(const OAIOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOperation::getErrorMessage() const {
    return m_error_message;
}
void OAIOperation::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIOperation::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIOperation::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIOperation::getErrorCode() const {
    return m_error_code;
}
void OAIOperation::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIOperation::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIOperation::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QDateTime OAIOperation::getCreateDate() const {
    return m_create_date;
}
void OAIOperation::setCreateDate(const QDateTime &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIOperation::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIOperation::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QDateTime OAIOperation::getUpdateDate() const {
    return m_update_date;
}
void OAIOperation::setUpdateDate(const QDateTime &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIOperation::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIOperation::is_update_date_Valid() const{
    return m_update_date_isValid;
}

QMap OAIOperation::getTargets() const {
    return m_targets;
}
void OAIOperation::setTargets(const QMap &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIOperation::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIOperation::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAIOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
