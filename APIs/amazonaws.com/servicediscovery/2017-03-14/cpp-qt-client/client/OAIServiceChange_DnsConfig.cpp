/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceChange_DnsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceChange_DnsConfig::OAIServiceChange_DnsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceChange_DnsConfig::OAIServiceChange_DnsConfig() {
    this->initializeModel();
}

OAIServiceChange_DnsConfig::~OAIServiceChange_DnsConfig() {}

void OAIServiceChange_DnsConfig::initializeModel() {

    m_dns_records_isSet = false;
    m_dns_records_isValid = false;
}

void OAIServiceChange_DnsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceChange_DnsConfig::fromJsonObject(QJsonObject json) {

    m_dns_records_isValid = ::OpenAPI::fromJsonValue(m_dns_records, json[QString("DnsRecords")]);
    m_dns_records_isSet = !json[QString("DnsRecords")].isNull() && m_dns_records_isValid;
}

QString OAIServiceChange_DnsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceChange_DnsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_records.isSet()) {
        obj.insert(QString("DnsRecords"), ::OpenAPI::toJsonValue(m_dns_records));
    }
    return obj;
}

QList OAIServiceChange_DnsConfig::getDnsRecords() const {
    return m_dns_records;
}
void OAIServiceChange_DnsConfig::setDnsRecords(const QList &dns_records) {
    m_dns_records = dns_records;
    m_dns_records_isSet = true;
}

bool OAIServiceChange_DnsConfig::is_dns_records_Set() const{
    return m_dns_records_isSet;
}

bool OAIServiceChange_DnsConfig::is_dns_records_Valid() const{
    return m_dns_records_isValid;
}

bool OAIServiceChange_DnsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_records.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceChange_DnsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dns_records_isValid && true;
}

} // namespace OpenAPI
