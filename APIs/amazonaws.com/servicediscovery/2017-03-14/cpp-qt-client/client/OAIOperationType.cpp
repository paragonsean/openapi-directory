/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationType::OAIOperationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationType::OAIOperationType() {
    this->initializeModel();
}

OAIOperationType::~OAIOperationType() {}

void OAIOperationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATE_NAMESPACE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::CREATE_NAMESPACE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE_NAMESPACE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::DELETE_NAMESPACE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_NAMESPACE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::UPDATE_NAMESPACE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::UPDATE_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REGISTER_INSTANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::REGISTER_INSTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEREGISTER_INSTANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::DEREGISTER_INSTANCE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperationType::CREATE_NAMESPACE:
            val = "CREATE_NAMESPACE";
            break;
        case eOAIOperationType::DELETE_NAMESPACE:
            val = "DELETE_NAMESPACE";
            break;
        case eOAIOperationType::UPDATE_NAMESPACE:
            val = "UPDATE_NAMESPACE";
            break;
        case eOAIOperationType::UPDATE_SERVICE:
            val = "UPDATE_SERVICE";
            break;
        case eOAIOperationType::REGISTER_INSTANCE:
            val = "REGISTER_INSTANCE";
            break;
        case eOAIOperationType::DEREGISTER_INSTANCE:
            val = "DEREGISTER_INSTANCE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperationType::eOAIOperationType OAIOperationType::getValue() const {
    return m_value;
}

void OAIOperationType::setValue(const OAIOperationType::eOAIOperationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
