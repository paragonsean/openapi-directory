/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetInstanceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetInstanceResponse::OAIGetInstanceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetInstanceResponse::OAIGetInstanceResponse() {
    this->initializeModel();
}

OAIGetInstanceResponse::~OAIGetInstanceResponse() {}

void OAIGetInstanceResponse::initializeModel() {

    m_instance_isSet = false;
    m_instance_isValid = false;
}

void OAIGetInstanceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetInstanceResponse::fromJsonObject(QJsonObject json) {

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("Instance")]);
    m_instance_isSet = !json[QString("Instance")].isNull() && m_instance_isValid;
}

QString OAIGetInstanceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetInstanceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_instance.isSet()) {
        obj.insert(QString("Instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    return obj;
}

OAIGetInstanceResponse_Instance OAIGetInstanceResponse::getInstance() const {
    return m_instance;
}
void OAIGetInstanceResponse::setInstance(const OAIGetInstanceResponse_Instance &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIGetInstanceResponse::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIGetInstanceResponse::is_instance_Valid() const{
    return m_instance_isValid;
}

bool OAIGetInstanceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetInstanceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
