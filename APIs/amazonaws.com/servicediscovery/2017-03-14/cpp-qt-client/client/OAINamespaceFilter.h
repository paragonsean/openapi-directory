/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINamespaceFilter.h
 *
 * A complex type that identifies the namespaces that you want to list. You can choose to list public or private namespaces.
 */

#ifndef OAINamespaceFilter_H
#define OAINamespaceFilter_H

#include <QJsonObject>

#include "OAIFilterCondition.h"
#include "OAINamespaceFilterName.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINamespaceFilter : public OAIObject {
public:
    OAINamespaceFilter();
    OAINamespaceFilter(QString json);
    ~OAINamespaceFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINamespaceFilterName getName() const;
    void setName(const OAINamespaceFilterName &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getValues() const;
    void setValues(const QList &values);
    bool is_values_Set() const;
    bool is_values_Valid() const;

    OAIFilterCondition getCondition() const;
    void setCondition(const OAIFilterCondition &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINamespaceFilterName m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_values;
    bool m_values_isSet;
    bool m_values_isValid;

    OAIFilterCondition m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINamespaceFilter)

#endif // OAINamespaceFilter_H
