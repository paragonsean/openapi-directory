/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServiceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServiceResponse::OAIGetServiceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServiceResponse::OAIGetServiceResponse() {
    this->initializeModel();
}

OAIGetServiceResponse::~OAIGetServiceResponse() {}

void OAIGetServiceResponse::initializeModel() {

    m_service_isSet = false;
    m_service_isValid = false;
}

void OAIGetServiceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServiceResponse::fromJsonObject(QJsonObject json) {

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("Service")]);
    m_service_isSet = !json[QString("Service")].isNull() && m_service_isValid;
}

QString OAIGetServiceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServiceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_service.isSet()) {
        obj.insert(QString("Service"), ::OpenAPI::toJsonValue(m_service));
    }
    return obj;
}

OAIGetServiceResponse_Service OAIGetServiceResponse::getService() const {
    return m_service;
}
void OAIGetServiceResponse::setService(const OAIGetServiceResponse_Service &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIGetServiceResponse::is_service_Set() const{
    return m_service_isSet;
}

bool OAIGetServiceResponse::is_service_Valid() const{
    return m_service_isValid;
}

bool OAIGetServiceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServiceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
