/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHealthCheckConfig.h
 *
 * &lt;p&gt; &lt;i&gt;Public DNS and HTTP namespaces only.&lt;/i&gt; A complex type that contains settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in &lt;code&gt;DnsConfig&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you specify a health check configuration, you can specify either &lt;code&gt;HealthCheckCustomConfig&lt;/code&gt; or &lt;code&gt;HealthCheckConfig&lt;/code&gt; but not both.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Health checks are basic Route 53 health checks that monitor an Amazon Web Services endpoint. For information about pricing for health checks, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note the following about configuring health checks.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;A and AAAA records&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;If &lt;code&gt;DnsConfig&lt;/code&gt; includes configurations for both &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;AAAA&lt;/code&gt; records, Cloud Map creates a health check that uses the IPv4 address to check the health of the resource. If the endpoint tthat&#39;s specified by the IPv4 address is unhealthy, Route 53 considers both the &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;AAAA&lt;/code&gt; records to be unhealthy. &lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CNAME records&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;You can&#39;t specify settings for &lt;code&gt;HealthCheckConfig&lt;/code&gt; when the &lt;code&gt;DNSConfig&lt;/code&gt; includes &lt;code&gt;CNAME&lt;/code&gt; for the value of &lt;code&gt;Type&lt;/code&gt;. If you do, the &lt;code&gt;CreateService&lt;/code&gt; request will fail with an &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Request interval&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;A Route 53 health checker in each health-checking Amazon Web Services Region sends a health check request to an endpoint every 30 seconds. On average, your endpoint receives a health check request about every two seconds. However, health checkers don&#39;t coordinate with one another. Therefore, you might sometimes see several requests in one second that&#39;s followed by a few seconds with no health checks at all.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Health checking regions&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Health checkers perform checks from all Route 53 health-checking Regions. For a list of the current Regions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-Regions\&quot;&gt;Regions&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Alias records&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;When you register an instance, if you include the &lt;code&gt;AWS_ALIAS_DNS_NAME&lt;/code&gt; attribute, Cloud Map creates a Route 53 alias record. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Route 53 automatically sets &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; to true for alias records. When &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; is true, the alias record inherits the health of the referenced Amazon Web Services resource. such as an ELB load balancer. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-EvaluateTargetHealth\&quot;&gt;EvaluateTargetHealth&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you include &lt;code&gt;HealthCheckConfig&lt;/code&gt; and then use the service to register an instance that creates an alias record, Route 53 doesn&#39;t create the health check.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/dd&gt; &lt;dt&gt;Charges for health checks&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Health checks are basic Route 53 health checks that monitor an Amazon Web Services endpoint. For information about pricing for health checks, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
 */

#ifndef OAIHealthCheckConfig_H
#define OAIHealthCheckConfig_H

#include <QJsonObject>

#include "OAIHealthCheckType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHealthCheckConfig : public OAIObject {
public:
    OAIHealthCheckConfig();
    OAIHealthCheckConfig(QString json);
    ~OAIHealthCheckConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIHealthCheckType getType() const;
    void setType(const OAIHealthCheckType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getResourcePath() const;
    void setResourcePath(const QString &resource_path);
    bool is_resource_path_Set() const;
    bool is_resource_path_Valid() const;

    qint32 getFailureThreshold() const;
    void setFailureThreshold(const qint32 &failure_threshold);
    bool is_failure_threshold_Set() const;
    bool is_failure_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIHealthCheckType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_resource_path;
    bool m_resource_path_isSet;
    bool m_resource_path_isValid;

    qint32 m_failure_threshold;
    bool m_failure_threshold_isSet;
    bool m_failure_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHealthCheckConfig)

#endif // OAIHealthCheckConfig_H
