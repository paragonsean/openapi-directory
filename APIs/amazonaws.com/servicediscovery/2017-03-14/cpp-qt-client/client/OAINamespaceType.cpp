/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespaceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespaceType::OAINamespaceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespaceType::OAINamespaceType() {
    this->initializeModel();
}

OAINamespaceType::~OAINamespaceType() {}

void OAINamespaceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINamespaceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINamespaceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DNS_PUBLIC", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamespaceType::DNS_PUBLIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DNS_PRIVATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamespaceType::DNS_PRIVATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HTTP", Qt::CaseInsensitive) == 0) {
        m_value = eOAINamespaceType::HTTP;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINamespaceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINamespaceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINamespaceType::DNS_PUBLIC:
            val = "DNS_PUBLIC";
            break;
        case eOAINamespaceType::DNS_PRIVATE:
            val = "DNS_PRIVATE";
            break;
        case eOAINamespaceType::HTTP:
            val = "HTTP";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINamespaceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINamespaceType::eOAINamespaceType OAINamespaceType::getValue() const {
    return m_value;
}

void OAINamespaceType::setValue(const OAINamespaceType::eOAINamespaceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINamespaceType::isSet() const {
    
    return m_value_isSet;
}

bool OAINamespaceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
