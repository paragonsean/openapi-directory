/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListOperationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListOperationsResponse::OAIListOperationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListOperationsResponse::OAIListOperationsResponse() {
    this->initializeModel();
}

OAIListOperationsResponse::~OAIListOperationsResponse() {}

void OAIListOperationsResponse::initializeModel() {

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListOperationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListOperationsResponse::fromJsonObject(QJsonObject json) {

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("Operations")]);
    m_operations_isSet = !json[QString("Operations")].isNull() && m_operations_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListOperationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListOperationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_operations.isSet()) {
        obj.insert(QString("Operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListOperationsResponse::getOperations() const {
    return m_operations;
}
void OAIListOperationsResponse::setOperations(const QList &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIListOperationsResponse::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIListOperationsResponse::is_operations_Valid() const{
    return m_operations_isValid;
}

QString OAIListOperationsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListOperationsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListOperationsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListOperationsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListOperationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListOperationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
