/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterCondition::OAIFilterCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterCondition::OAIFilterCondition() {
    this->initializeModel();
}

OAIFilterCondition::~OAIFilterCondition() {}

void OAIFilterCondition::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIFilterCondition::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIFilterCondition::fromJson(QString jsonString) {
    
    if ( jsonString.compare("EQ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterCondition::EQ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterCondition::IN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BETWEEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterCondition::BETWEEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BEGINS_WITH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIFilterCondition::BEGINS_WITH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIFilterCondition::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIFilterCondition::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIFilterCondition::EQ:
            val = "EQ";
            break;
        case eOAIFilterCondition::IN:
            val = "IN";
            break;
        case eOAIFilterCondition::BETWEEN:
            val = "BETWEEN";
            break;
        case eOAIFilterCondition::BEGINS_WITH:
            val = "BEGINS_WITH";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIFilterCondition::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIFilterCondition::eOAIFilterCondition OAIFilterCondition::getValue() const {
    return m_value;
}

void OAIFilterCondition::setValue(const OAIFilterCondition::eOAIFilterCondition& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIFilterCondition::isSet() const {
    
    return m_value_isSet;
}

bool OAIFilterCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
