/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetNamespaceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetNamespaceResponse::OAIGetNamespaceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetNamespaceResponse::OAIGetNamespaceResponse() {
    this->initializeModel();
}

OAIGetNamespaceResponse::~OAIGetNamespaceResponse() {}

void OAIGetNamespaceResponse::initializeModel() {

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;
}

void OAIGetNamespaceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetNamespaceResponse::fromJsonObject(QJsonObject json) {

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("Namespace")]);
    m_r_namespace_isSet = !json[QString("Namespace")].isNull() && m_r_namespace_isValid;
}

QString OAIGetNamespaceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetNamespaceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_r_namespace.isSet()) {
        obj.insert(QString("Namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    return obj;
}

OAIGetNamespaceResponse_Namespace OAIGetNamespaceResponse::getRNamespace() const {
    return m_r_namespace;
}
void OAIGetNamespaceResponse::setRNamespace(const OAIGetNamespaceResponse_Namespace &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIGetNamespaceResponse::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIGetNamespaceResponse::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

bool OAIGetNamespaceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_namespace.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetNamespaceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
