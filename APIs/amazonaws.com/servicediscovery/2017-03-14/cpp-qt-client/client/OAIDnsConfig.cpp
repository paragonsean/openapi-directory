/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsConfig::OAIDnsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsConfig::OAIDnsConfig() {
    this->initializeModel();
}

OAIDnsConfig::~OAIDnsConfig() {}

void OAIDnsConfig::initializeModel() {

    m_namespace_id_isSet = false;
    m_namespace_id_isValid = false;

    m_routing_policy_isSet = false;
    m_routing_policy_isValid = false;

    m_dns_records_isSet = false;
    m_dns_records_isValid = false;
}

void OAIDnsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsConfig::fromJsonObject(QJsonObject json) {

    m_namespace_id_isValid = ::OpenAPI::fromJsonValue(m_namespace_id, json[QString("NamespaceId")]);
    m_namespace_id_isSet = !json[QString("NamespaceId")].isNull() && m_namespace_id_isValid;

    m_routing_policy_isValid = ::OpenAPI::fromJsonValue(m_routing_policy, json[QString("RoutingPolicy")]);
    m_routing_policy_isSet = !json[QString("RoutingPolicy")].isNull() && m_routing_policy_isValid;

    m_dns_records_isValid = ::OpenAPI::fromJsonValue(m_dns_records, json[QString("DnsRecords")]);
    m_dns_records_isSet = !json[QString("DnsRecords")].isNull() && m_dns_records_isValid;
}

QString OAIDnsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_namespace_id_isSet) {
        obj.insert(QString("NamespaceId"), ::OpenAPI::toJsonValue(m_namespace_id));
    }
    if (m_routing_policy.isSet()) {
        obj.insert(QString("RoutingPolicy"), ::OpenAPI::toJsonValue(m_routing_policy));
    }
    if (m_dns_records.isSet()) {
        obj.insert(QString("DnsRecords"), ::OpenAPI::toJsonValue(m_dns_records));
    }
    return obj;
}

QString OAIDnsConfig::getNamespaceId() const {
    return m_namespace_id;
}
void OAIDnsConfig::setNamespaceId(const QString &namespace_id) {
    m_namespace_id = namespace_id;
    m_namespace_id_isSet = true;
}

bool OAIDnsConfig::is_namespace_id_Set() const{
    return m_namespace_id_isSet;
}

bool OAIDnsConfig::is_namespace_id_Valid() const{
    return m_namespace_id_isValid;
}

OAIRoutingPolicy OAIDnsConfig::getRoutingPolicy() const {
    return m_routing_policy;
}
void OAIDnsConfig::setRoutingPolicy(const OAIRoutingPolicy &routing_policy) {
    m_routing_policy = routing_policy;
    m_routing_policy_isSet = true;
}

bool OAIDnsConfig::is_routing_policy_Set() const{
    return m_routing_policy_isSet;
}

bool OAIDnsConfig::is_routing_policy_Valid() const{
    return m_routing_policy_isValid;
}

QList OAIDnsConfig::getDnsRecords() const {
    return m_dns_records;
}
void OAIDnsConfig::setDnsRecords(const QList &dns_records) {
    m_dns_records = dns_records;
    m_dns_records_isSet = true;
}

bool OAIDnsConfig::is_dns_records_Set() const{
    return m_dns_records_isSet;
}

bool OAIDnsConfig::is_dns_records_Valid() const{
    return m_dns_records_isValid;
}

bool OAIDnsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_namespace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_records.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dns_records_isValid && true;
}

} // namespace OpenAPI
