/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInstancesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInstancesResponse::OAIListInstancesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInstancesResponse::OAIListInstancesResponse() {
    this->initializeModel();
}

OAIListInstancesResponse::~OAIListInstancesResponse() {}

void OAIListInstancesResponse::initializeModel() {

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListInstancesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInstancesResponse::fromJsonObject(QJsonObject json) {

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("Instances")]);
    m_instances_isSet = !json[QString("Instances")].isNull() && m_instances_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListInstancesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInstancesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_instances.isSet()) {
        obj.insert(QString("Instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListInstancesResponse::getInstances() const {
    return m_instances;
}
void OAIListInstancesResponse::setInstances(const QList &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIListInstancesResponse::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIListInstancesResponse::is_instances_Valid() const{
    return m_instances_isValid;
}

QString OAIListInstancesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListInstancesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListInstancesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListInstancesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListInstancesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInstancesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
