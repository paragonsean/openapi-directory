/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDiscoverInstancesRequest.h
 *
 * 
 */

#ifndef OAIDiscoverInstancesRequest_H
#define OAIDiscoverInstancesRequest_H

#include <QJsonObject>

#include "OAIHealthStatusFilter.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDiscoverInstancesRequest : public OAIObject {
public:
    OAIDiscoverInstancesRequest();
    OAIDiscoverInstancesRequest(QString json);
    ~OAIDiscoverInstancesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNamespaceName() const;
    void setNamespaceName(const QString &namespace_name);
    bool is_namespace_name_Set() const;
    bool is_namespace_name_Valid() const;

    QString getServiceName() const;
    void setServiceName(const QString &service_name);
    bool is_service_name_Set() const;
    bool is_service_name_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QMap getQueryParameters() const;
    void setQueryParameters(const QMap &query_parameters);
    bool is_query_parameters_Set() const;
    bool is_query_parameters_Valid() const;

    QMap getOptionalParameters() const;
    void setOptionalParameters(const QMap &optional_parameters);
    bool is_optional_parameters_Set() const;
    bool is_optional_parameters_Valid() const;

    OAIHealthStatusFilter getHealthStatus() const;
    void setHealthStatus(const OAIHealthStatusFilter &health_status);
    bool is_health_status_Set() const;
    bool is_health_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_namespace_name;
    bool m_namespace_name_isSet;
    bool m_namespace_name_isValid;

    QString m_service_name;
    bool m_service_name_isSet;
    bool m_service_name_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QMap m_query_parameters;
    bool m_query_parameters_isSet;
    bool m_query_parameters_isValid;

    QMap m_optional_parameters;
    bool m_optional_parameters_isSet;
    bool m_optional_parameters_isValid;

    OAIHealthStatusFilter m_health_status;
    bool m_health_status_isSet;
    bool m_health_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDiscoverInstancesRequest)

#endif // OAIDiscoverInstancesRequest_H
