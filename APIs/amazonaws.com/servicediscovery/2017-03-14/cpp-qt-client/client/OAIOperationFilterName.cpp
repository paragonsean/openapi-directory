/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationFilterName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationFilterName::OAIOperationFilterName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationFilterName::OAIOperationFilterName() {
    this->initializeModel();
}

OAIOperationFilterName::~OAIOperationFilterName() {}

void OAIOperationFilterName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperationFilterName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperationFilterName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NAMESPACE_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationFilterName::NAMESPACE_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVICE_ID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationFilterName::SERVICE_ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STATUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationFilterName::STATUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationFilterName::TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_DATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationFilterName::UPDATE_DATE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperationFilterName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperationFilterName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperationFilterName::NAMESPACE_ID:
            val = "NAMESPACE_ID";
            break;
        case eOAIOperationFilterName::SERVICE_ID:
            val = "SERVICE_ID";
            break;
        case eOAIOperationFilterName::STATUS:
            val = "STATUS";
            break;
        case eOAIOperationFilterName::TYPE:
            val = "TYPE";
            break;
        case eOAIOperationFilterName::UPDATE_DATE:
            val = "UPDATE_DATE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperationFilterName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperationFilterName::eOAIOperationFilterName OAIOperationFilterName::getValue() const {
    return m_value;
}

void OAIOperationFilterName::setValue(const OAIOperationFilterName::eOAIOperationFilterName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperationFilterName::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperationFilterName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
