/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePrivateDnsNamespaceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePrivateDnsNamespaceRequest::OAICreatePrivateDnsNamespaceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePrivateDnsNamespaceRequest::OAICreatePrivateDnsNamespaceRequest() {
    this->initializeModel();
}

OAICreatePrivateDnsNamespaceRequest::~OAICreatePrivateDnsNamespaceRequest() {}

void OAICreatePrivateDnsNamespaceRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_creator_request_id_isSet = false;
    m_creator_request_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAICreatePrivateDnsNamespaceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePrivateDnsNamespaceRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_creator_request_id_isValid = ::OpenAPI::fromJsonValue(m_creator_request_id, json[QString("CreatorRequestId")]);
    m_creator_request_id_isSet = !json[QString("CreatorRequestId")].isNull() && m_creator_request_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("Vpc")]);
    m_vpc_isSet = !json[QString("Vpc")].isNull() && m_vpc_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("Properties")]);
    m_properties_isSet = !json[QString("Properties")].isNull() && m_properties_isValid;
}

QString OAICreatePrivateDnsNamespaceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePrivateDnsNamespaceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_creator_request_id_isSet) {
        obj.insert(QString("CreatorRequestId"), ::OpenAPI::toJsonValue(m_creator_request_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_vpc_isSet) {
        obj.insert(QString("Vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("Properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAICreatePrivateDnsNamespaceRequest::getName() const {
    return m_name;
}
void OAICreatePrivateDnsNamespaceRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreatePrivateDnsNamespaceRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreatePrivateDnsNamespaceRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreatePrivateDnsNamespaceRequest::getCreatorRequestId() const {
    return m_creator_request_id;
}
void OAICreatePrivateDnsNamespaceRequest::setCreatorRequestId(const QString &creator_request_id) {
    m_creator_request_id = creator_request_id;
    m_creator_request_id_isSet = true;
}

bool OAICreatePrivateDnsNamespaceRequest::is_creator_request_id_Set() const{
    return m_creator_request_id_isSet;
}

bool OAICreatePrivateDnsNamespaceRequest::is_creator_request_id_Valid() const{
    return m_creator_request_id_isValid;
}

QString OAICreatePrivateDnsNamespaceRequest::getDescription() const {
    return m_description;
}
void OAICreatePrivateDnsNamespaceRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreatePrivateDnsNamespaceRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreatePrivateDnsNamespaceRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreatePrivateDnsNamespaceRequest::getVpc() const {
    return m_vpc;
}
void OAICreatePrivateDnsNamespaceRequest::setVpc(const QString &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAICreatePrivateDnsNamespaceRequest::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAICreatePrivateDnsNamespaceRequest::is_vpc_Valid() const{
    return m_vpc_isValid;
}

QList OAICreatePrivateDnsNamespaceRequest::getTags() const {
    return m_tags;
}
void OAICreatePrivateDnsNamespaceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePrivateDnsNamespaceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePrivateDnsNamespaceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreatePrivateDnsNamespaceRequest_Properties OAICreatePrivateDnsNamespaceRequest::getProperties() const {
    return m_properties;
}
void OAICreatePrivateDnsNamespaceRequest::setProperties(const OAICreatePrivateDnsNamespaceRequest_Properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICreatePrivateDnsNamespaceRequest::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICreatePrivateDnsNamespaceRequest::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAICreatePrivateDnsNamespaceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePrivateDnsNamespaceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_vpc_isValid && true;
}

} // namespace OpenAPI
