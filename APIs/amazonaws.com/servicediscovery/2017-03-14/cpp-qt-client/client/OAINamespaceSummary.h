/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINamespaceSummary.h
 *
 * A complex type that contains information about a namespace.
 */

#ifndef OAINamespaceSummary_H
#define OAINamespaceSummary_H

#include <QJsonObject>

#include "OAINamespaceSummary_Properties.h"
#include "OAINamespaceType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINamespaceSummary_Properties;

class OAINamespaceSummary : public OAIObject {
public:
    OAINamespaceSummary();
    OAINamespaceSummary(QString json);
    ~OAINamespaceSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAINamespaceType getType() const;
    void setType(const OAINamespaceType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getServiceCount() const;
    void setServiceCount(const qint32 &service_count);
    bool is_service_count_Set() const;
    bool is_service_count_Valid() const;

    OAINamespaceSummary_Properties getProperties() const;
    void setProperties(const OAINamespaceSummary_Properties &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    QDateTime getCreateDate() const;
    void setCreateDate(const QDateTime &create_date);
    bool is_create_date_Set() const;
    bool is_create_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAINamespaceType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_service_count;
    bool m_service_count_isSet;
    bool m_service_count_isValid;

    OAINamespaceSummary_Properties m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    QDateTime m_create_date;
    bool m_create_date_isSet;
    bool m_create_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINamespaceSummary)

#endif // OAINamespaceSummary_H
