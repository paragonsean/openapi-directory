/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListNamespacesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListNamespacesResponse::OAIListNamespacesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListNamespacesResponse::OAIListNamespacesResponse() {
    this->initializeModel();
}

OAIListNamespacesResponse::~OAIListNamespacesResponse() {}

void OAIListNamespacesResponse::initializeModel() {

    m_namespaces_isSet = false;
    m_namespaces_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListNamespacesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListNamespacesResponse::fromJsonObject(QJsonObject json) {

    m_namespaces_isValid = ::OpenAPI::fromJsonValue(m_namespaces, json[QString("Namespaces")]);
    m_namespaces_isSet = !json[QString("Namespaces")].isNull() && m_namespaces_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListNamespacesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListNamespacesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_namespaces.isSet()) {
        obj.insert(QString("Namespaces"), ::OpenAPI::toJsonValue(m_namespaces));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListNamespacesResponse::getNamespaces() const {
    return m_namespaces;
}
void OAIListNamespacesResponse::setNamespaces(const QList &namespaces) {
    m_namespaces = namespaces;
    m_namespaces_isSet = true;
}

bool OAIListNamespacesResponse::is_namespaces_Set() const{
    return m_namespaces_isSet;
}

bool OAIListNamespacesResponse::is_namespaces_Valid() const{
    return m_namespaces_isValid;
}

QString OAIListNamespacesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListNamespacesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListNamespacesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListNamespacesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListNamespacesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_namespaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListNamespacesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
