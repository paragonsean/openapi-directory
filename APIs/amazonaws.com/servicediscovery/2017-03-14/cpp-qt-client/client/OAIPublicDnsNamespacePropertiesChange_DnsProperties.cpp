/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicDnsNamespacePropertiesChange_DnsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicDnsNamespacePropertiesChange_DnsProperties::OAIPublicDnsNamespacePropertiesChange_DnsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicDnsNamespacePropertiesChange_DnsProperties::OAIPublicDnsNamespacePropertiesChange_DnsProperties() {
    this->initializeModel();
}

OAIPublicDnsNamespacePropertiesChange_DnsProperties::~OAIPublicDnsNamespacePropertiesChange_DnsProperties() {}

void OAIPublicDnsNamespacePropertiesChange_DnsProperties::initializeModel() {

    m_soa_isSet = false;
    m_soa_isValid = false;
}

void OAIPublicDnsNamespacePropertiesChange_DnsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicDnsNamespacePropertiesChange_DnsProperties::fromJsonObject(QJsonObject json) {

    m_soa_isValid = ::OpenAPI::fromJsonValue(m_soa, json[QString("SOA")]);
    m_soa_isSet = !json[QString("SOA")].isNull() && m_soa_isValid;
}

QString OAIPublicDnsNamespacePropertiesChange_DnsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicDnsNamespacePropertiesChange_DnsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_soa.isSet()) {
        obj.insert(QString("SOA"), ::OpenAPI::toJsonValue(m_soa));
    }
    return obj;
}

OAIPublicDnsPropertiesMutableChange_SOA OAIPublicDnsNamespacePropertiesChange_DnsProperties::getSoa() const {
    return m_soa;
}
void OAIPublicDnsNamespacePropertiesChange_DnsProperties::setSoa(const OAIPublicDnsPropertiesMutableChange_SOA &soa) {
    m_soa = soa;
    m_soa_isSet = true;
}

bool OAIPublicDnsNamespacePropertiesChange_DnsProperties::is_soa_Set() const{
    return m_soa_isSet;
}

bool OAIPublicDnsNamespacePropertiesChange_DnsProperties::is_soa_Valid() const{
    return m_soa_isValid;
}

bool OAIPublicDnsNamespacePropertiesChange_DnsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_soa.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicDnsNamespacePropertiesChange_DnsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_soa_isValid && true;
}

} // namespace OpenAPI
