/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePublicDnsNamespaceRequest_Properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePublicDnsNamespaceRequest_Properties::OAICreatePublicDnsNamespaceRequest_Properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePublicDnsNamespaceRequest_Properties::OAICreatePublicDnsNamespaceRequest_Properties() {
    this->initializeModel();
}

OAICreatePublicDnsNamespaceRequest_Properties::~OAICreatePublicDnsNamespaceRequest_Properties() {}

void OAICreatePublicDnsNamespaceRequest_Properties::initializeModel() {

    m_dns_properties_isSet = false;
    m_dns_properties_isValid = false;
}

void OAICreatePublicDnsNamespaceRequest_Properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePublicDnsNamespaceRequest_Properties::fromJsonObject(QJsonObject json) {

    m_dns_properties_isValid = ::OpenAPI::fromJsonValue(m_dns_properties, json[QString("DnsProperties")]);
    m_dns_properties_isSet = !json[QString("DnsProperties")].isNull() && m_dns_properties_isValid;
}

QString OAICreatePublicDnsNamespaceRequest_Properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePublicDnsNamespaceRequest_Properties::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_properties.isSet()) {
        obj.insert(QString("DnsProperties"), ::OpenAPI::toJsonValue(m_dns_properties));
    }
    return obj;
}

OAIPublicDnsNamespaceProperties_DnsProperties OAICreatePublicDnsNamespaceRequest_Properties::getDnsProperties() const {
    return m_dns_properties;
}
void OAICreatePublicDnsNamespaceRequest_Properties::setDnsProperties(const OAIPublicDnsNamespaceProperties_DnsProperties &dns_properties) {
    m_dns_properties = dns_properties;
    m_dns_properties_isSet = true;
}

bool OAICreatePublicDnsNamespaceRequest_Properties::is_dns_properties_Set() const{
    return m_dns_properties_isSet;
}

bool OAICreatePublicDnsNamespaceRequest_Properties::is_dns_properties_Valid() const{
    return m_dns_properties_isValid;
}

bool OAICreatePublicDnsNamespaceRequest_Properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePublicDnsNamespaceRequest_Properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dns_properties_isValid && true;
}

} // namespace OpenAPI
