/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateDnsPropertiesMutable_SOA.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateDnsPropertiesMutable_SOA::OAIPrivateDnsPropertiesMutable_SOA(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateDnsPropertiesMutable_SOA::OAIPrivateDnsPropertiesMutable_SOA() {
    this->initializeModel();
}

OAIPrivateDnsPropertiesMutable_SOA::~OAIPrivateDnsPropertiesMutable_SOA() {}

void OAIPrivateDnsPropertiesMutable_SOA::initializeModel() {

    m_ttl_isSet = false;
    m_ttl_isValid = false;
}

void OAIPrivateDnsPropertiesMutable_SOA::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateDnsPropertiesMutable_SOA::fromJsonObject(QJsonObject json) {

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("TTL")]);
    m_ttl_isSet = !json[QString("TTL")].isNull() && m_ttl_isValid;
}

QString OAIPrivateDnsPropertiesMutable_SOA::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateDnsPropertiesMutable_SOA::asJsonObject() const {
    QJsonObject obj;
    if (m_ttl_isSet) {
        obj.insert(QString("TTL"), ::OpenAPI::toJsonValue(m_ttl));
    }
    return obj;
}

qint32 OAIPrivateDnsPropertiesMutable_SOA::getTtl() const {
    return m_ttl;
}
void OAIPrivateDnsPropertiesMutable_SOA::setTtl(const qint32 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIPrivateDnsPropertiesMutable_SOA::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIPrivateDnsPropertiesMutable_SOA::is_ttl_Valid() const{
    return m_ttl_isValid;
}

bool OAIPrivateDnsPropertiesMutable_SOA::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateDnsPropertiesMutable_SOA::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ttl_isValid && true;
}

} // namespace OpenAPI
