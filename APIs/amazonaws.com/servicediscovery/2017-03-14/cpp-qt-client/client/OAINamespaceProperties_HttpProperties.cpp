/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespaceProperties_HttpProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespaceProperties_HttpProperties::OAINamespaceProperties_HttpProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespaceProperties_HttpProperties::OAINamespaceProperties_HttpProperties() {
    this->initializeModel();
}

OAINamespaceProperties_HttpProperties::~OAINamespaceProperties_HttpProperties() {}

void OAINamespaceProperties_HttpProperties::initializeModel() {

    m_http_name_isSet = false;
    m_http_name_isValid = false;
}

void OAINamespaceProperties_HttpProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespaceProperties_HttpProperties::fromJsonObject(QJsonObject json) {

    m_http_name_isValid = ::OpenAPI::fromJsonValue(m_http_name, json[QString("HttpName")]);
    m_http_name_isSet = !json[QString("HttpName")].isNull() && m_http_name_isValid;
}

QString OAINamespaceProperties_HttpProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespaceProperties_HttpProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_http_name_isSet) {
        obj.insert(QString("HttpName"), ::OpenAPI::toJsonValue(m_http_name));
    }
    return obj;
}

QString OAINamespaceProperties_HttpProperties::getHttpName() const {
    return m_http_name;
}
void OAINamespaceProperties_HttpProperties::setHttpName(const QString &http_name) {
    m_http_name = http_name;
    m_http_name_isSet = true;
}

bool OAINamespaceProperties_HttpProperties::is_http_name_Set() const{
    return m_http_name_isSet;
}

bool OAINamespaceProperties_HttpProperties::is_http_name_Valid() const{
    return m_http_name_isValid;
}

bool OAINamespaceProperties_HttpProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespaceProperties_HttpProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
