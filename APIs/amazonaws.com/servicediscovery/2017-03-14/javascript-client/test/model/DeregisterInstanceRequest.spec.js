/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCloudMap);
  }
}(this, function(expect, AwsCloudMap) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCloudMap.DeregisterInstanceRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeregisterInstanceRequest', function() {
    it('should create an instance of DeregisterInstanceRequest', function() {
      // uncomment below and update the code to test DeregisterInstanceRequest
      //var instance = new AwsCloudMap.DeregisterInstanceRequest();
      //expect(instance).to.be.a(AwsCloudMap.DeregisterInstanceRequest);
    });

    it('should have the property serviceId (base name: "ServiceId")', function() {
      // uncomment below and update the code to test the property serviceId
      //var instance = new AwsCloudMap.DeregisterInstanceRequest();
      //expect(instance).to.be();
    });

    it('should have the property instanceId (base name: "InstanceId")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instance = new AwsCloudMap.DeregisterInstanceRequest();
      //expect(instance).to.be();
    });

  });

}));
