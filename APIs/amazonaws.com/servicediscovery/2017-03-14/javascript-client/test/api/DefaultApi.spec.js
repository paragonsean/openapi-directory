/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsCloudMap);
  }
}(this, function(expect, AwsCloudMap) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsCloudMap.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createHttpNamespace', function() {
      it('should call createHttpNamespace successfully', function(done) {
        //uncomment below and update the code to test createHttpNamespace
        //instance.createHttpNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPrivateDnsNamespace', function() {
      it('should call createPrivateDnsNamespace successfully', function(done) {
        //uncomment below and update the code to test createPrivateDnsNamespace
        //instance.createPrivateDnsNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPublicDnsNamespace', function() {
      it('should call createPublicDnsNamespace successfully', function(done) {
        //uncomment below and update the code to test createPublicDnsNamespace
        //instance.createPublicDnsNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createService', function() {
      it('should call createService successfully', function(done) {
        //uncomment below and update the code to test createService
        //instance.createService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteNamespace', function() {
      it('should call deleteNamespace successfully', function(done) {
        //uncomment below and update the code to test deleteNamespace
        //instance.deleteNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteService', function() {
      it('should call deleteService successfully', function(done) {
        //uncomment below and update the code to test deleteService
        //instance.deleteService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterInstance', function() {
      it('should call deregisterInstance successfully', function(done) {
        //uncomment below and update the code to test deregisterInstance
        //instance.deregisterInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('discoverInstances', function() {
      it('should call discoverInstances successfully', function(done) {
        //uncomment below and update the code to test discoverInstances
        //instance.discoverInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstance', function() {
      it('should call getInstance successfully', function(done) {
        //uncomment below and update the code to test getInstance
        //instance.getInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInstancesHealthStatus', function() {
      it('should call getInstancesHealthStatus successfully', function(done) {
        //uncomment below and update the code to test getInstancesHealthStatus
        //instance.getInstancesHealthStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getNamespace', function() {
      it('should call getNamespace successfully', function(done) {
        //uncomment below and update the code to test getNamespace
        //instance.getNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOperation', function() {
      it('should call getOperation successfully', function(done) {
        //uncomment below and update the code to test getOperation
        //instance.getOperation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getService', function() {
      it('should call getService successfully', function(done) {
        //uncomment below and update the code to test getService
        //instance.getService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInstances', function() {
      it('should call listInstances successfully', function(done) {
        //uncomment below and update the code to test listInstances
        //instance.listInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNamespaces', function() {
      it('should call listNamespaces successfully', function(done) {
        //uncomment below and update the code to test listNamespaces
        //instance.listNamespaces(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOperations', function() {
      it('should call listOperations successfully', function(done) {
        //uncomment below and update the code to test listOperations
        //instance.listOperations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listServices', function() {
      it('should call listServices successfully', function(done) {
        //uncomment below and update the code to test listServices
        //instance.listServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerInstance', function() {
      it('should call registerInstance successfully', function(done) {
        //uncomment below and update the code to test registerInstance
        //instance.registerInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHttpNamespace', function() {
      it('should call updateHttpNamespace successfully', function(done) {
        //uncomment below and update the code to test updateHttpNamespace
        //instance.updateHttpNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstanceCustomHealthStatus', function() {
      it('should call updateInstanceCustomHealthStatus successfully', function(done) {
        //uncomment below and update the code to test updateInstanceCustomHealthStatus
        //instance.updateInstanceCustomHealthStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePrivateDnsNamespace', function() {
      it('should call updatePrivateDnsNamespace successfully', function(done) {
        //uncomment below and update the code to test updatePrivateDnsNamespace
        //instance.updatePrivateDnsNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePublicDnsNamespace', function() {
      it('should call updatePublicDnsNamespace successfully', function(done) {
        //uncomment below and update the code to test updatePublicDnsNamespace
        //instance.updatePublicDnsNamespace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateService', function() {
      it('should call updateService successfully', function(done) {
        //uncomment below and update the code to test updateService
        //instance.updateService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
