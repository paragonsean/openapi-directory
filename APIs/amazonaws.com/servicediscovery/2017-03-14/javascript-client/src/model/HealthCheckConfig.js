/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthCheckType from './HealthCheckType';

/**
 * The HealthCheckConfig model module.
 * @module model/HealthCheckConfig
 * @version 2017-03-14
 */
class HealthCheckConfig {
    /**
     * Constructs a new <code>HealthCheckConfig</code>.
     * &lt;p&gt; &lt;i&gt;Public DNS and HTTP namespaces only.&lt;/i&gt; A complex type that contains settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in &lt;code&gt;DnsConfig&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you specify a health check configuration, you can specify either &lt;code&gt;HealthCheckCustomConfig&lt;/code&gt; or &lt;code&gt;HealthCheckConfig&lt;/code&gt; but not both.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Health checks are basic Route 53 health checks that monitor an Amazon Web Services endpoint. For information about pricing for health checks, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note the following about configuring health checks.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;A and AAAA records&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;If &lt;code&gt;DnsConfig&lt;/code&gt; includes configurations for both &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;AAAA&lt;/code&gt; records, Cloud Map creates a health check that uses the IPv4 address to check the health of the resource. If the endpoint tthat&#39;s specified by the IPv4 address is unhealthy, Route 53 considers both the &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;AAAA&lt;/code&gt; records to be unhealthy. &lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CNAME records&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;You can&#39;t specify settings for &lt;code&gt;HealthCheckConfig&lt;/code&gt; when the &lt;code&gt;DNSConfig&lt;/code&gt; includes &lt;code&gt;CNAME&lt;/code&gt; for the value of &lt;code&gt;Type&lt;/code&gt;. If you do, the &lt;code&gt;CreateService&lt;/code&gt; request will fail with an &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Request interval&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;A Route 53 health checker in each health-checking Amazon Web Services Region sends a health check request to an endpoint every 30 seconds. On average, your endpoint receives a health check request about every two seconds. However, health checkers don&#39;t coordinate with one another. Therefore, you might sometimes see several requests in one second that&#39;s followed by a few seconds with no health checks at all.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Health checking regions&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Health checkers perform checks from all Route 53 health-checking Regions. For a list of the current Regions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-Regions\&quot;&gt;Regions&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Alias records&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;When you register an instance, if you include the &lt;code&gt;AWS_ALIAS_DNS_NAME&lt;/code&gt; attribute, Cloud Map creates a Route 53 alias record. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Route 53 automatically sets &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; to true for alias records. When &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; is true, the alias record inherits the health of the referenced Amazon Web Services resource. such as an ELB load balancer. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-EvaluateTargetHealth\&quot;&gt;EvaluateTargetHealth&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you include &lt;code&gt;HealthCheckConfig&lt;/code&gt; and then use the service to register an instance that creates an alias record, Route 53 doesn&#39;t create the health check.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/dd&gt; &lt;dt&gt;Charges for health checks&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Health checks are basic Route 53 health checks that monitor an Amazon Web Services endpoint. For information about pricing for health checks, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
     * @alias module:model/HealthCheckConfig
     * @param type {module:model/HealthCheckType} 
     */
    constructor(type) { 
        
        HealthCheckConfig.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>HealthCheckConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HealthCheckConfig} obj Optional instance to populate.
     * @return {module:model/HealthCheckConfig} The populated <code>HealthCheckConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HealthCheckConfig();

            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], HealthCheckType);
            }
            if (data.hasOwnProperty('ResourcePath')) {
                obj['ResourcePath'] = ApiClient.convertToType(data['ResourcePath'], 'String');
            }
            if (data.hasOwnProperty('FailureThreshold')) {
                obj['FailureThreshold'] = ApiClient.convertToType(data['FailureThreshold'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HealthCheckConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HealthCheckConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HealthCheckConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          HealthCheckType.validateJSON(data['Type']);
        }
        // validate the optional field `ResourcePath`
        if (data['ResourcePath']) { // data not null
          String.validateJSON(data['ResourcePath']);
        }
        // validate the optional field `FailureThreshold`
        if (data['FailureThreshold']) { // data not null
          Number.validateJSON(data['FailureThreshold']);
        }

        return true;
    }


}

HealthCheckConfig.RequiredProperties = ["Type"];

/**
 * @member {module:model/HealthCheckType} Type
 */
HealthCheckConfig.prototype['Type'] = undefined;

/**
 * @member {String} ResourcePath
 */
HealthCheckConfig.prototype['ResourcePath'] = undefined;

/**
 * @member {Number} FailureThreshold
 */
HealthCheckConfig.prototype['FailureThreshold'] = undefined;






export default HealthCheckConfig;

