/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceChangeDnsConfig from './ServiceChangeDnsConfig';
import ServiceChangeHealthCheckConfig from './ServiceChangeHealthCheckConfig';

/**
 * The ServiceChange model module.
 * @module model/ServiceChange
 * @version 2017-03-14
 */
class ServiceChange {
    /**
     * Constructs a new <code>ServiceChange</code>.
     * A complex type that contains changes to an existing service.
     * @alias module:model/ServiceChange
     */
    constructor() { 
        
        ServiceChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceChange} obj Optional instance to populate.
     * @return {module:model/ServiceChange} The populated <code>ServiceChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceChange();

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DnsConfig')) {
                obj['DnsConfig'] = ServiceChangeDnsConfig.constructFromObject(data['DnsConfig']);
            }
            if (data.hasOwnProperty('HealthCheckConfig')) {
                obj['HealthCheckConfig'] = ServiceChangeHealthCheckConfig.constructFromObject(data['HealthCheckConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceChange</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `DnsConfig`
        if (data['DnsConfig']) { // data not null
          ServiceChangeDnsConfig.validateJSON(data['DnsConfig']);
        }
        // validate the optional field `HealthCheckConfig`
        if (data['HealthCheckConfig']) { // data not null
          ServiceChangeHealthCheckConfig.validateJSON(data['HealthCheckConfig']);
        }

        return true;
    }


}



/**
 * @member {String} Description
 */
ServiceChange.prototype['Description'] = undefined;

/**
 * @member {module:model/ServiceChangeDnsConfig} DnsConfig
 */
ServiceChange.prototype['DnsConfig'] = undefined;

/**
 * @member {module:model/ServiceChangeHealthCheckConfig} HealthCheckConfig
 */
ServiceChange.prototype['HealthCheckConfig'] = undefined;






export default ServiceChange;

