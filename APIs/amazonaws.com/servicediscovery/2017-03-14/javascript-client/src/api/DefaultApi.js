/**
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateHttpNamespaceRequest from '../model/CreateHttpNamespaceRequest';
import CreateHttpNamespaceResponse from '../model/CreateHttpNamespaceResponse';
import CreatePrivateDnsNamespaceRequest from '../model/CreatePrivateDnsNamespaceRequest';
import CreatePrivateDnsNamespaceResponse from '../model/CreatePrivateDnsNamespaceResponse';
import CreatePublicDnsNamespaceRequest from '../model/CreatePublicDnsNamespaceRequest';
import CreatePublicDnsNamespaceResponse from '../model/CreatePublicDnsNamespaceResponse';
import CreateServiceRequest from '../model/CreateServiceRequest';
import CreateServiceResponse from '../model/CreateServiceResponse';
import DeleteNamespaceRequest from '../model/DeleteNamespaceRequest';
import DeleteNamespaceResponse from '../model/DeleteNamespaceResponse';
import DeleteServiceRequest from '../model/DeleteServiceRequest';
import DeregisterInstanceRequest from '../model/DeregisterInstanceRequest';
import DeregisterInstanceResponse from '../model/DeregisterInstanceResponse';
import DiscoverInstancesRequest from '../model/DiscoverInstancesRequest';
import DiscoverInstancesResponse from '../model/DiscoverInstancesResponse';
import GetInstanceRequest from '../model/GetInstanceRequest';
import GetInstanceResponse from '../model/GetInstanceResponse';
import GetInstancesHealthStatusRequest from '../model/GetInstancesHealthStatusRequest';
import GetInstancesHealthStatusResponse from '../model/GetInstancesHealthStatusResponse';
import GetNamespaceRequest from '../model/GetNamespaceRequest';
import GetNamespaceResponse from '../model/GetNamespaceResponse';
import GetOperationRequest from '../model/GetOperationRequest';
import GetOperationResponse from '../model/GetOperationResponse';
import GetServiceRequest from '../model/GetServiceRequest';
import GetServiceResponse from '../model/GetServiceResponse';
import ListInstancesRequest from '../model/ListInstancesRequest';
import ListInstancesResponse from '../model/ListInstancesResponse';
import ListNamespacesRequest from '../model/ListNamespacesRequest';
import ListNamespacesResponse from '../model/ListNamespacesResponse';
import ListOperationsRequest from '../model/ListOperationsRequest';
import ListOperationsResponse from '../model/ListOperationsResponse';
import ListServicesRequest from '../model/ListServicesRequest';
import ListServicesResponse from '../model/ListServicesResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import RegisterInstanceRequest from '../model/RegisterInstanceRequest';
import RegisterInstanceResponse from '../model/RegisterInstanceResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateHttpNamespaceRequest from '../model/UpdateHttpNamespaceRequest';
import UpdateHttpNamespaceResponse from '../model/UpdateHttpNamespaceResponse';
import UpdateInstanceCustomHealthStatusRequest from '../model/UpdateInstanceCustomHealthStatusRequest';
import UpdatePrivateDnsNamespaceRequest from '../model/UpdatePrivateDnsNamespaceRequest';
import UpdatePrivateDnsNamespaceResponse from '../model/UpdatePrivateDnsNamespaceResponse';
import UpdatePublicDnsNamespaceRequest from '../model/UpdatePublicDnsNamespaceRequest';
import UpdatePublicDnsNamespaceResponse from '../model/UpdatePublicDnsNamespaceResponse';
import UpdateServiceRequest from '../model/UpdateServiceRequest';
import UpdateServiceResponse from '../model/UpdateServiceResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-03-14
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createHttpNamespace operation.
     * @callback module:api/DefaultApi~createHttpNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHttpNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an HTTP namespace. Service instances registered using an HTTP namespace can be discovered using a <code>DiscoverInstances</code> request but can't be discovered using DNS.</p> <p>For the current quota on the number of namespaces that you can create using the same Amazon Web Services account, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">Cloud Map quotas</a> in the <i>Cloud Map Developer Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateHttpNamespaceRequest} createHttpNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createHttpNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHttpNamespaceResponse}
     */
    createHttpNamespace(xAmzTarget, createHttpNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createHttpNamespaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createHttpNamespace");
      }
      // verify the required parameter 'createHttpNamespaceRequest' is set
      if (createHttpNamespaceRequest === undefined || createHttpNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'createHttpNamespaceRequest' when calling createHttpNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateHttpNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.CreateHttpNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPrivateDnsNamespace operation.
     * @callback module:api/DefaultApi~createPrivateDnsNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePrivateDnsNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a private namespace based on DNS, which is visible only inside a specified Amazon VPC. The namespace defines your service naming scheme. For example, if you name your namespace <code>example.com</code> and name your service <code>backend</code>, the resulting DNS name for the service is <code>backend.example.com</code>. Service instances that are registered using a private DNS namespace can be discovered using either a <code>DiscoverInstances</code> request or using DNS. For the current quota on the number of namespaces that you can create using the same Amazon Web Services account, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">Cloud Map quotas</a> in the <i>Cloud Map Developer Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePrivateDnsNamespaceRequest} createPrivateDnsNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPrivateDnsNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePrivateDnsNamespaceResponse}
     */
    createPrivateDnsNamespace(xAmzTarget, createPrivateDnsNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPrivateDnsNamespaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPrivateDnsNamespace");
      }
      // verify the required parameter 'createPrivateDnsNamespaceRequest' is set
      if (createPrivateDnsNamespaceRequest === undefined || createPrivateDnsNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'createPrivateDnsNamespaceRequest' when calling createPrivateDnsNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePrivateDnsNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.CreatePrivateDnsNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPublicDnsNamespace operation.
     * @callback module:api/DefaultApi~createPublicDnsNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePublicDnsNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a public namespace based on DNS, which is visible on the internet. The namespace defines your service naming scheme. For example, if you name your namespace <code>example.com</code> and name your service <code>backend</code>, the resulting DNS name for the service is <code>backend.example.com</code>. You can discover instances that were registered with a public DNS namespace by using either a <code>DiscoverInstances</code> request or using DNS. For the current quota on the number of namespaces that you can create using the same Amazon Web Services account, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">Cloud Map quotas</a> in the <i>Cloud Map Developer Guide</i>.</p> <important> <p>The <code>CreatePublicDnsNamespace</code> API operation is not supported in the Amazon Web Services GovCloud (US) Regions.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePublicDnsNamespaceRequest} createPublicDnsNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPublicDnsNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePublicDnsNamespaceResponse}
     */
    createPublicDnsNamespace(xAmzTarget, createPublicDnsNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPublicDnsNamespaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPublicDnsNamespace");
      }
      // verify the required parameter 'createPublicDnsNamespaceRequest' is set
      if (createPublicDnsNamespaceRequest === undefined || createPublicDnsNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'createPublicDnsNamespaceRequest' when calling createPublicDnsNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePublicDnsNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.CreatePublicDnsNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createService operation.
     * @callback module:api/DefaultApi~createServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a service. This action defines the configuration for the following entities:</p> <ul> <li> <p>For public and private DNS namespaces, one of the following combinations of DNS records in Amazon Route 53:</p> <ul> <li> <p> <code>A</code> </p> </li> <li> <p> <code>AAAA</code> </p> </li> <li> <p> <code>A</code> and <code>AAAA</code> </p> </li> <li> <p> <code>SRV</code> </p> </li> <li> <p> <code>CNAME</code> </p> </li> </ul> </li> <li> <p>Optionally, a health check</p> </li> </ul> <p>After you create the service, you can submit a <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html\">RegisterInstance</a> request, and Cloud Map uses the values in the configuration to create the specified entities.</p> <p>For the current quota on the number of instances that you can register using the same namespace and using the same service, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">Cloud Map quotas</a> in the <i>Cloud Map Developer Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateServiceRequest} createServiceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateServiceResponse}
     */
    createService(xAmzTarget, createServiceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createServiceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createService");
      }
      // verify the required parameter 'createServiceRequest' is set
      if (createServiceRequest === undefined || createServiceRequest === null) {
        throw new Error("Missing the required parameter 'createServiceRequest' when calling createService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateServiceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.CreateService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNamespace operation.
     * @callback module:api/DefaultApi~deleteNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a namespace from the current account. If the namespace still contains one or more services, the request fails.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteNamespaceRequest} deleteNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteNamespaceResponse}
     */
    deleteNamespace(xAmzTarget, deleteNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteNamespaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteNamespace");
      }
      // verify the required parameter 'deleteNamespaceRequest' is set
      if (deleteNamespaceRequest === undefined || deleteNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'deleteNamespaceRequest' when calling deleteNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.DeleteNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteService operation.
     * @callback module:api/DefaultApi~deleteServiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specified service. If the service still contains one or more registered instances, the request fails.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteServiceRequest} deleteServiceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteService(xAmzTarget, deleteServiceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteServiceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteService");
      }
      // verify the required parameter 'deleteServiceRequest' is set
      if (deleteServiceRequest === undefined || deleteServiceRequest === null) {
        throw new Error("Missing the required parameter 'deleteServiceRequest' when calling deleteService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.DeleteService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterInstance operation.
     * @callback module:api/DefaultApi~deregisterInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeregisterInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the Amazon Route 53 DNS records and health check, if any, that Cloud Map created for the specified instance.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeregisterInstanceRequest} deregisterInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeregisterInstanceResponse}
     */
    deregisterInstance(xAmzTarget, deregisterInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deregisterInstance");
      }
      // verify the required parameter 'deregisterInstanceRequest' is set
      if (deregisterInstanceRequest === undefined || deregisterInstanceRequest === null) {
        throw new Error("Missing the required parameter 'deregisterInstanceRequest' when calling deregisterInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeregisterInstanceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.DeregisterInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the discoverInstances operation.
     * @callback module:api/DefaultApi~discoverInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscoverInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers registered instances for a specified namespace and service. You can use <code>DiscoverInstances</code> to discover instances for any type of namespace. For public and private DNS namespaces, you can also use DNS queries to discover instances.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DiscoverInstancesRequest} discoverInstancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~discoverInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscoverInstancesResponse}
     */
    discoverInstances(xAmzTarget, discoverInstancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = discoverInstancesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling discoverInstances");
      }
      // verify the required parameter 'discoverInstancesRequest' is set
      if (discoverInstancesRequest === undefined || discoverInstancesRequest === null) {
        throw new Error("Missing the required parameter 'discoverInstancesRequest' when calling discoverInstances");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DiscoverInstancesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.DiscoverInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstance operation.
     * @callback module:api/DefaultApi~getInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specified instance.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetInstanceRequest} getInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInstanceResponse}
     */
    getInstance(xAmzTarget, getInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = getInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getInstance");
      }
      // verify the required parameter 'getInstanceRequest' is set
      if (getInstanceRequest === undefined || getInstanceRequest === null) {
        throw new Error("Missing the required parameter 'getInstanceRequest' when calling getInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetInstanceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.GetInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstancesHealthStatus operation.
     * @callback module:api/DefaultApi~getInstancesHealthStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInstancesHealthStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets the current health status (<code>Healthy</code>, <code>Unhealthy</code>, or <code>Unknown</code>) of one or more instances that are associated with a specified service.</p> <note> <p>There's a brief delay between when you register an instance and when the health status for the instance is available. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetInstancesHealthStatusRequest} getInstancesHealthStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getInstancesHealthStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInstancesHealthStatusResponse}
     */
    getInstancesHealthStatus(xAmzTarget, getInstancesHealthStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = getInstancesHealthStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getInstancesHealthStatus");
      }
      // verify the required parameter 'getInstancesHealthStatusRequest' is set
      if (getInstancesHealthStatusRequest === undefined || getInstancesHealthStatusRequest === null) {
        throw new Error("Missing the required parameter 'getInstancesHealthStatusRequest' when calling getInstancesHealthStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetInstancesHealthStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.GetInstancesHealthStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNamespace operation.
     * @callback module:api/DefaultApi~getNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a namespace.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetNamespaceRequest} getNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNamespaceResponse}
     */
    getNamespace(xAmzTarget, getNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = getNamespaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getNamespace");
      }
      // verify the required parameter 'getNamespaceRequest' is set
      if (getNamespaceRequest === undefined || getNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'getNamespaceRequest' when calling getNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.GetNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperation operation.
     * @callback module:api/DefaultApi~getOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gets information about any operation that returns an operation ID in the response, such as a <code>CreateService</code> request.</p> <note> <p>To get a list of operations that match specified criteria, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_ListOperations.html\">ListOperations</a>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetOperationRequest} getOperationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOperationResponse}
     */
    getOperation(xAmzTarget, getOperationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getOperationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getOperation");
      }
      // verify the required parameter 'getOperationRequest' is set
      if (getOperationRequest === undefined || getOperationRequest === null) {
        throw new Error("Missing the required parameter 'getOperationRequest' when calling getOperation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOperationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.GetOperation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getService operation.
     * @callback module:api/DefaultApi~getServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the settings for a specified service.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetServiceRequest} getServiceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceResponse}
     */
    getService(xAmzTarget, getServiceRequest, opts, callback) {
      opts = opts || {};
      let postBody = getServiceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getService");
      }
      // verify the required parameter 'getServiceRequest' is set
      if (getServiceRequest === undefined || getServiceRequest === null) {
        throw new Error("Missing the required parameter 'getServiceRequest' when calling getService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetServiceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.GetService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstances operation.
     * @callback module:api/DefaultApi~listInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists summary information about the instances that you registered by using a specified service.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListInstancesRequest} listInstancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInstancesResponse}
     */
    listInstances(xAmzTarget, listInstancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInstancesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listInstances");
      }
      // verify the required parameter 'listInstancesRequest' is set
      if (listInstancesRequest === undefined || listInstancesRequest === null) {
        throw new Error("Missing the required parameter 'listInstancesRequest' when calling listInstances");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInstancesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.ListInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNamespaces operation.
     * @callback module:api/DefaultApi~listNamespacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNamespacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists summary information about the namespaces that were created by the current Amazon Web Services account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListNamespacesRequest} listNamespacesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listNamespacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNamespacesResponse}
     */
    listNamespaces(xAmzTarget, listNamespacesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listNamespacesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listNamespaces");
      }
      // verify the required parameter 'listNamespacesRequest' is set
      if (listNamespacesRequest === undefined || listNamespacesRequest === null) {
        throw new Error("Missing the required parameter 'listNamespacesRequest' when calling listNamespaces");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListNamespacesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.ListNamespaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOperations operation.
     * @callback module:api/DefaultApi~listOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOperationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists operations that match the criteria that you specify.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListOperationsRequest} listOperationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOperationsResponse}
     */
    listOperations(xAmzTarget, listOperationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listOperationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listOperations");
      }
      // verify the required parameter 'listOperationsRequest' is set
      if (listOperationsRequest === undefined || listOperationsRequest === null) {
        throw new Error("Missing the required parameter 'listOperationsRequest' when calling listOperations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOperationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.ListOperations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServices operation.
     * @callback module:api/DefaultApi~listServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists summary information for all the services that are associated with one or more specified namespaces.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListServicesRequest} listServicesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServicesResponse}
     */
    listServices(xAmzTarget, listServicesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listServicesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listServices");
      }
      // verify the required parameter 'listServicesRequest' is set
      if (listServicesRequest === undefined || listServicesRequest === null) {
        throw new Error("Missing the required parameter 'listServicesRequest' when calling listServices");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListServicesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.ListServices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists tags for the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerInstance operation.
     * @callback module:api/DefaultApi~registerInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates or updates one or more records and, optionally, creates a health check based on the settings in a specified service. When you submit a <code>RegisterInstance</code> request, the following occurs:</p> <ul> <li> <p>For each DNS record that you define in the service that's specified by <code>ServiceId</code>, a record is created or updated in the hosted zone that's associated with the corresponding namespace.</p> </li> <li> <p>If the service includes <code>HealthCheckConfig</code>, a health check is created based on the settings in the health check configuration.</p> </li> <li> <p>The health check, if any, is associated with each of the new or updated records.</p> </li> </ul> <important> <p>One <code>RegisterInstance</code> request must complete before you can submit another request and specify the same service ID and instance ID.</p> </important> <p>For more information, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html\">CreateService</a>.</p> <p>When Cloud Map receives a DNS query for the specified DNS name, it returns the applicable value:</p> <ul> <li> <p> <b>If the health check is healthy</b>: returns all the records</p> </li> <li> <p> <b>If the health check is unhealthy</b>: returns the applicable value for the last healthy instance</p> </li> <li> <p> <b>If you didn't specify a health check configuration</b>: returns all the records</p> </li> </ul> <p>For the current quota on the number of instances that you can register using the same namespace and using the same service, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\">Cloud Map quotas</a> in the <i>Cloud Map Developer Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RegisterInstanceRequest} registerInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterInstanceResponse}
     */
    registerInstance(xAmzTarget, registerInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerInstanceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling registerInstance");
      }
      // verify the required parameter 'registerInstanceRequest' is set
      if (registerInstanceRequest === undefined || registerInstanceRequest === null) {
        throw new Error("Missing the required parameter 'registerInstanceRequest' when calling registerInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterInstanceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.RegisterInstance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds one or more tags to the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateHttpNamespace operation.
     * @callback module:api/DefaultApi~updateHttpNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateHttpNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an HTTP namespace.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateHttpNamespaceRequest} updateHttpNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateHttpNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateHttpNamespaceResponse}
     */
    updateHttpNamespace(xAmzTarget, updateHttpNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateHttpNamespaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateHttpNamespace");
      }
      // verify the required parameter 'updateHttpNamespaceRequest' is set
      if (updateHttpNamespaceRequest === undefined || updateHttpNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'updateHttpNamespaceRequest' when calling updateHttpNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateHttpNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.UpdateHttpNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceCustomHealthStatus operation.
     * @callback module:api/DefaultApi~updateInstanceCustomHealthStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Submits a request to change the health status of a custom health check to healthy or unhealthy.</p> <p>You can use <code>UpdateInstanceCustomHealthStatus</code> to change the status only for custom health checks, which you define using <code>HealthCheckCustomConfig</code> when you create a service. You can't use it to change the status for Route 53 health checks, which you define using <code>HealthCheckConfig</code>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/cloud-map/latest/api/API_HealthCheckCustomConfig.html\">HealthCheckCustomConfig</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateInstanceCustomHealthStatusRequest} updateInstanceCustomHealthStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInstanceCustomHealthStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInstanceCustomHealthStatus(xAmzTarget, updateInstanceCustomHealthStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInstanceCustomHealthStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateInstanceCustomHealthStatus");
      }
      // verify the required parameter 'updateInstanceCustomHealthStatusRequest' is set
      if (updateInstanceCustomHealthStatusRequest === undefined || updateInstanceCustomHealthStatusRequest === null) {
        throw new Error("Missing the required parameter 'updateInstanceCustomHealthStatusRequest' when calling updateInstanceCustomHealthStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.UpdateInstanceCustomHealthStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePrivateDnsNamespace operation.
     * @callback module:api/DefaultApi~updatePrivateDnsNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePrivateDnsNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a private DNS namespace.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePrivateDnsNamespaceRequest} updatePrivateDnsNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePrivateDnsNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePrivateDnsNamespaceResponse}
     */
    updatePrivateDnsNamespace(xAmzTarget, updatePrivateDnsNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePrivateDnsNamespaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePrivateDnsNamespace");
      }
      // verify the required parameter 'updatePrivateDnsNamespaceRequest' is set
      if (updatePrivateDnsNamespaceRequest === undefined || updatePrivateDnsNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'updatePrivateDnsNamespaceRequest' when calling updatePrivateDnsNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePrivateDnsNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.UpdatePrivateDnsNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePublicDnsNamespace operation.
     * @callback module:api/DefaultApi~updatePublicDnsNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePublicDnsNamespaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a public DNS namespace.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePublicDnsNamespaceRequest} updatePublicDnsNamespaceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePublicDnsNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePublicDnsNamespaceResponse}
     */
    updatePublicDnsNamespace(xAmzTarget, updatePublicDnsNamespaceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePublicDnsNamespaceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePublicDnsNamespace");
      }
      // verify the required parameter 'updatePublicDnsNamespaceRequest' is set
      if (updatePublicDnsNamespaceRequest === undefined || updatePublicDnsNamespaceRequest === null) {
        throw new Error("Missing the required parameter 'updatePublicDnsNamespaceRequest' when calling updatePublicDnsNamespace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePublicDnsNamespaceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.UpdatePublicDnsNamespace', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateService operation.
     * @callback module:api/DefaultApi~updateServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Submits a request to perform the following operations:</p> <ul> <li> <p>Update the TTL setting for existing <code>DnsRecords</code> configurations</p> </li> <li> <p>Add, update, or delete <code>HealthCheckConfig</code> for a specified service</p> <note> <p>You can't add, update, or delete a <code>HealthCheckCustomConfig</code> configuration.</p> </note> </li> </ul> <p>For public and private DNS namespaces, note the following:</p> <ul> <li> <p>If you omit any existing <code>DnsRecords</code> or <code>HealthCheckConfig</code> configurations from an <code>UpdateService</code> request, the configurations are deleted from the service.</p> </li> <li> <p>If you omit an existing <code>HealthCheckCustomConfig</code> configuration from an <code>UpdateService</code> request, the configuration isn't deleted from the service.</p> </li> </ul> <p>When you update settings for a service, Cloud Map also updates the corresponding settings in all the records and health checks that were created by using the specified service.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateServiceRequest} updateServiceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateServiceResponse}
     */
    updateService(xAmzTarget, updateServiceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateService");
      }
      // verify the required parameter 'updateServiceRequest' is set
      if (updateServiceRequest === undefined || updateServiceRequest === null) {
        throw new Error("Missing the required parameter 'updateServiceRequest' when calling updateService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateServiceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53AutoNaming_v20170314.UpdateService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
