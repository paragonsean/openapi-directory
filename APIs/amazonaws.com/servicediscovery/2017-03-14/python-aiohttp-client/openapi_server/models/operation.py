# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_status import OperationStatus
from openapi_server.models.operation_type import OperationType
from openapi_server import util


class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, type: OperationType=None, status: OperationStatus=None, error_message: str=None, error_code: str=None, create_date: datetime=None, update_date: datetime=None, targets: Dict=None):
        """Operation - a model defined in OpenAPI

        :param id: The id of this Operation.
        :param type: The type of this Operation.
        :param status: The status of this Operation.
        :param error_message: The error_message of this Operation.
        :param error_code: The error_code of this Operation.
        :param create_date: The create_date of this Operation.
        :param update_date: The update_date of this Operation.
        :param targets: The targets of this Operation.
        """
        self.openapi_types = {
            'id': str,
            'type': OperationType,
            'status': OperationStatus,
            'error_message': str,
            'error_code': str,
            'create_date': datetime,
            'update_date': datetime,
            'targets': Dict
        }

        self.attribute_map = {
            'id': 'Id',
            'type': 'Type',
            'status': 'Status',
            'error_message': 'ErrorMessage',
            'error_code': 'ErrorCode',
            'create_date': 'CreateDate',
            'update_date': 'UpdateDate',
            'targets': 'Targets'
        }

        self._id = id
        self._type = type
        self._status = status
        self._error_message = error_message
        self._error_code = error_code
        self._create_date = create_date
        self._update_date = update_date
        self._targets = targets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operation of this Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Operation.


        :return: The id of this Operation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Operation.


        :param id: The id of this Operation.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Operation.


        :return: The type of this Operation.
        :rtype: OperationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Operation.


        :param type: The type of this Operation.
        :type type: OperationType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Operation.


        :return: The status of this Operation.
        :rtype: OperationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Operation.


        :param status: The status of this Operation.
        :type status: OperationStatus
        """

        self._status = status

    @property
    def error_message(self):
        """Gets the error_message of this Operation.


        :return: The error_message of this Operation.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Operation.


        :param error_message: The error_message of this Operation.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def error_code(self):
        """Gets the error_code of this Operation.


        :return: The error_code of this Operation.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Operation.


        :param error_code: The error_code of this Operation.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def create_date(self):
        """Gets the create_date of this Operation.


        :return: The create_date of this Operation.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this Operation.


        :param create_date: The create_date of this Operation.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def update_date(self):
        """Gets the update_date of this Operation.


        :return: The update_date of this Operation.
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this Operation.


        :param update_date: The update_date of this Operation.
        :type update_date: datetime
        """

        self._update_date = update_date

    @property
    def targets(self):
        """Gets the targets of this Operation.


        :return: The targets of this Operation.
        :rtype: Dict
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this Operation.


        :param targets: The targets of this Operation.
        :type targets: Dict
        """

        self._targets = targets
