# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.record_type import RecordType
from openapi_server import util


class DnsRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: RecordType=None, ttl: int=None):
        """DnsRecord - a model defined in OpenAPI

        :param type: The type of this DnsRecord.
        :param ttl: The ttl of this DnsRecord.
        """
        self.openapi_types = {
            'type': RecordType,
            'ttl': int
        }

        self.attribute_map = {
            'type': 'Type',
            'ttl': 'TTL'
        }

        self._type = type
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsRecord of this DnsRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this DnsRecord.


        :return: The type of this DnsRecord.
        :rtype: RecordType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DnsRecord.


        :param type: The type of this DnsRecord.
        :type type: RecordType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def ttl(self):
        """Gets the ttl of this DnsRecord.


        :return: The ttl of this DnsRecord.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this DnsRecord.


        :param ttl: The ttl of this DnsRecord.
        :type ttl: int
        """
        if ttl is None:
            raise ValueError("Invalid value for `ttl`, must not be `None`")

        self._ttl = ttl
