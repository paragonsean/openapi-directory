# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeregisterInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_id: str=None, instance_id: str=None):
        """DeregisterInstanceRequest - a model defined in OpenAPI

        :param service_id: The service_id of this DeregisterInstanceRequest.
        :param instance_id: The instance_id of this DeregisterInstanceRequest.
        """
        self.openapi_types = {
            'service_id': str,
            'instance_id': str
        }

        self.attribute_map = {
            'service_id': 'ServiceId',
            'instance_id': 'InstanceId'
        }

        self._service_id = service_id
        self._instance_id = instance_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeregisterInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeregisterInstanceRequest of this DeregisterInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_id(self):
        """Gets the service_id of this DeregisterInstanceRequest.


        :return: The service_id of this DeregisterInstanceRequest.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this DeregisterInstanceRequest.


        :param service_id: The service_id of this DeregisterInstanceRequest.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def instance_id(self):
        """Gets the instance_id of this DeregisterInstanceRequest.


        :return: The instance_id of this DeregisterInstanceRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DeregisterInstanceRequest.


        :param instance_id: The instance_id of this DeregisterInstanceRequest.
        :type instance_id: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")

        self._instance_id = instance_id
