# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_public_dns_namespace_request_namespace import UpdatePublicDnsNamespaceRequestNamespace
from openapi_server import util


class UpdatePublicDnsNamespaceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, updater_request_id: str=None, namespace: UpdatePublicDnsNamespaceRequestNamespace=None):
        """UpdatePublicDnsNamespaceRequest - a model defined in OpenAPI

        :param id: The id of this UpdatePublicDnsNamespaceRequest.
        :param updater_request_id: The updater_request_id of this UpdatePublicDnsNamespaceRequest.
        :param namespace: The namespace of this UpdatePublicDnsNamespaceRequest.
        """
        self.openapi_types = {
            'id': str,
            'updater_request_id': str,
            'namespace': UpdatePublicDnsNamespaceRequestNamespace
        }

        self.attribute_map = {
            'id': 'Id',
            'updater_request_id': 'UpdaterRequestId',
            'namespace': 'Namespace'
        }

        self._id = id
        self._updater_request_id = updater_request_id
        self._namespace = namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePublicDnsNamespaceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePublicDnsNamespaceRequest of this UpdatePublicDnsNamespaceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpdatePublicDnsNamespaceRequest.


        :return: The id of this UpdatePublicDnsNamespaceRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdatePublicDnsNamespaceRequest.


        :param id: The id of this UpdatePublicDnsNamespaceRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def updater_request_id(self):
        """Gets the updater_request_id of this UpdatePublicDnsNamespaceRequest.


        :return: The updater_request_id of this UpdatePublicDnsNamespaceRequest.
        :rtype: str
        """
        return self._updater_request_id

    @updater_request_id.setter
    def updater_request_id(self, updater_request_id):
        """Sets the updater_request_id of this UpdatePublicDnsNamespaceRequest.


        :param updater_request_id: The updater_request_id of this UpdatePublicDnsNamespaceRequest.
        :type updater_request_id: str
        """

        self._updater_request_id = updater_request_id

    @property
    def namespace(self):
        """Gets the namespace of this UpdatePublicDnsNamespaceRequest.


        :return: The namespace of this UpdatePublicDnsNamespaceRequest.
        :rtype: UpdatePublicDnsNamespaceRequestNamespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this UpdatePublicDnsNamespaceRequest.


        :param namespace: The namespace of this UpdatePublicDnsNamespaceRequest.
        :type namespace: UpdatePublicDnsNamespaceRequestNamespace
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace
