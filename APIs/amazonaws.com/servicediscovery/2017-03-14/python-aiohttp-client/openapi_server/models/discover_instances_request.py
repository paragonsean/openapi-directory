# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_status_filter import HealthStatusFilter
from openapi_server import util


class DiscoverInstancesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace_name: str=None, service_name: str=None, max_results: int=None, query_parameters: Dict=None, optional_parameters: Dict=None, health_status: HealthStatusFilter=None):
        """DiscoverInstancesRequest - a model defined in OpenAPI

        :param namespace_name: The namespace_name of this DiscoverInstancesRequest.
        :param service_name: The service_name of this DiscoverInstancesRequest.
        :param max_results: The max_results of this DiscoverInstancesRequest.
        :param query_parameters: The query_parameters of this DiscoverInstancesRequest.
        :param optional_parameters: The optional_parameters of this DiscoverInstancesRequest.
        :param health_status: The health_status of this DiscoverInstancesRequest.
        """
        self.openapi_types = {
            'namespace_name': str,
            'service_name': str,
            'max_results': int,
            'query_parameters': Dict,
            'optional_parameters': Dict,
            'health_status': HealthStatusFilter
        }

        self.attribute_map = {
            'namespace_name': 'NamespaceName',
            'service_name': 'ServiceName',
            'max_results': 'MaxResults',
            'query_parameters': 'QueryParameters',
            'optional_parameters': 'OptionalParameters',
            'health_status': 'HealthStatus'
        }

        self._namespace_name = namespace_name
        self._service_name = service_name
        self._max_results = max_results
        self._query_parameters = query_parameters
        self._optional_parameters = optional_parameters
        self._health_status = health_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiscoverInstancesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiscoverInstancesRequest of this DiscoverInstancesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace_name(self):
        """Gets the namespace_name of this DiscoverInstancesRequest.


        :return: The namespace_name of this DiscoverInstancesRequest.
        :rtype: str
        """
        return self._namespace_name

    @namespace_name.setter
    def namespace_name(self, namespace_name):
        """Sets the namespace_name of this DiscoverInstancesRequest.


        :param namespace_name: The namespace_name of this DiscoverInstancesRequest.
        :type namespace_name: str
        """
        if namespace_name is None:
            raise ValueError("Invalid value for `namespace_name`, must not be `None`")

        self._namespace_name = namespace_name

    @property
    def service_name(self):
        """Gets the service_name of this DiscoverInstancesRequest.


        :return: The service_name of this DiscoverInstancesRequest.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this DiscoverInstancesRequest.


        :param service_name: The service_name of this DiscoverInstancesRequest.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def max_results(self):
        """Gets the max_results of this DiscoverInstancesRequest.


        :return: The max_results of this DiscoverInstancesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DiscoverInstancesRequest.


        :param max_results: The max_results of this DiscoverInstancesRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def query_parameters(self):
        """Gets the query_parameters of this DiscoverInstancesRequest.


        :return: The query_parameters of this DiscoverInstancesRequest.
        :rtype: Dict
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this DiscoverInstancesRequest.


        :param query_parameters: The query_parameters of this DiscoverInstancesRequest.
        :type query_parameters: Dict
        """

        self._query_parameters = query_parameters

    @property
    def optional_parameters(self):
        """Gets the optional_parameters of this DiscoverInstancesRequest.


        :return: The optional_parameters of this DiscoverInstancesRequest.
        :rtype: Dict
        """
        return self._optional_parameters

    @optional_parameters.setter
    def optional_parameters(self, optional_parameters):
        """Sets the optional_parameters of this DiscoverInstancesRequest.


        :param optional_parameters: The optional_parameters of this DiscoverInstancesRequest.
        :type optional_parameters: Dict
        """

        self._optional_parameters = optional_parameters

    @property
    def health_status(self):
        """Gets the health_status of this DiscoverInstancesRequest.


        :return: The health_status of this DiscoverInstancesRequest.
        :rtype: HealthStatusFilter
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this DiscoverInstancesRequest.


        :param health_status: The health_status of this DiscoverInstancesRequest.
        :type health_status: HealthStatusFilter
        """

        self._health_status = health_status
