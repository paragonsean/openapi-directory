# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.routing_policy import RoutingPolicy
from openapi_server import util


class ServiceDnsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace_id: str=None, routing_policy: RoutingPolicy=None, dns_records: List=None):
        """ServiceDnsConfig - a model defined in OpenAPI

        :param namespace_id: The namespace_id of this ServiceDnsConfig.
        :param routing_policy: The routing_policy of this ServiceDnsConfig.
        :param dns_records: The dns_records of this ServiceDnsConfig.
        """
        self.openapi_types = {
            'namespace_id': str,
            'routing_policy': RoutingPolicy,
            'dns_records': List
        }

        self.attribute_map = {
            'namespace_id': 'NamespaceId',
            'routing_policy': 'RoutingPolicy',
            'dns_records': 'DnsRecords'
        }

        self._namespace_id = namespace_id
        self._routing_policy = routing_policy
        self._dns_records = dns_records

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceDnsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service_DnsConfig of this ServiceDnsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace_id(self):
        """Gets the namespace_id of this ServiceDnsConfig.


        :return: The namespace_id of this ServiceDnsConfig.
        :rtype: str
        """
        return self._namespace_id

    @namespace_id.setter
    def namespace_id(self, namespace_id):
        """Sets the namespace_id of this ServiceDnsConfig.


        :param namespace_id: The namespace_id of this ServiceDnsConfig.
        :type namespace_id: str
        """

        self._namespace_id = namespace_id

    @property
    def routing_policy(self):
        """Gets the routing_policy of this ServiceDnsConfig.


        :return: The routing_policy of this ServiceDnsConfig.
        :rtype: RoutingPolicy
        """
        return self._routing_policy

    @routing_policy.setter
    def routing_policy(self, routing_policy):
        """Sets the routing_policy of this ServiceDnsConfig.


        :param routing_policy: The routing_policy of this ServiceDnsConfig.
        :type routing_policy: RoutingPolicy
        """

        self._routing_policy = routing_policy

    @property
    def dns_records(self):
        """Gets the dns_records of this ServiceDnsConfig.


        :return: The dns_records of this ServiceDnsConfig.
        :rtype: List
        """
        return self._dns_records

    @dns_records.setter
    def dns_records(self, dns_records):
        """Sets the dns_records of this ServiceDnsConfig.


        :param dns_records: The dns_records of this ServiceDnsConfig.
        :type dns_records: List
        """
        if dns_records is None:
            raise ValueError("Invalid value for `dns_records`, must not be `None`")

        self._dns_records = dns_records
