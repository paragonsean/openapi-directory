/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateServiceRequestDnsConfig;
import org.openapitools.client.model.CreateServiceRequestHealthCheckConfig;
import org.openapitools.client.model.CreateServiceRequestHealthCheckCustomConfig;
import org.openapitools.client.model.ServiceTypeOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateServiceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:11.953926-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateServiceRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE_ID = "NamespaceId";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_ID)
  private String namespaceId;

  public static final String SERIALIZED_NAME_CREATOR_REQUEST_ID = "CreatorRequestId";
  @SerializedName(SERIALIZED_NAME_CREATOR_REQUEST_ID)
  private String creatorRequestId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DNS_CONFIG = "DnsConfig";
  @SerializedName(SERIALIZED_NAME_DNS_CONFIG)
  private CreateServiceRequestDnsConfig dnsConfig;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_CONFIG = "HealthCheckConfig";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_CONFIG)
  private CreateServiceRequestHealthCheckConfig healthCheckConfig;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_CUSTOM_CONFIG = "HealthCheckCustomConfig";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_CUSTOM_CONFIG)
  private CreateServiceRequestHealthCheckCustomConfig healthCheckCustomConfig;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ServiceTypeOption type;

  public CreateServiceRequest() {
  }

  public CreateServiceRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateServiceRequest namespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
    return this;
  }

  /**
   * Get namespaceId
   * @return namespaceId
   */
  @javax.annotation.Nullable
  public String getNamespaceId() {
    return namespaceId;
  }

  public void setNamespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
  }


  public CreateServiceRequest creatorRequestId(String creatorRequestId) {
    this.creatorRequestId = creatorRequestId;
    return this;
  }

  /**
   * Get creatorRequestId
   * @return creatorRequestId
   */
  @javax.annotation.Nullable
  public String getCreatorRequestId() {
    return creatorRequestId;
  }

  public void setCreatorRequestId(String creatorRequestId) {
    this.creatorRequestId = creatorRequestId;
  }


  public CreateServiceRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateServiceRequest dnsConfig(CreateServiceRequestDnsConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
    return this;
  }

  /**
   * Get dnsConfig
   * @return dnsConfig
   */
  @javax.annotation.Nullable
  public CreateServiceRequestDnsConfig getDnsConfig() {
    return dnsConfig;
  }

  public void setDnsConfig(CreateServiceRequestDnsConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
  }


  public CreateServiceRequest healthCheckConfig(CreateServiceRequestHealthCheckConfig healthCheckConfig) {
    this.healthCheckConfig = healthCheckConfig;
    return this;
  }

  /**
   * Get healthCheckConfig
   * @return healthCheckConfig
   */
  @javax.annotation.Nullable
  public CreateServiceRequestHealthCheckConfig getHealthCheckConfig() {
    return healthCheckConfig;
  }

  public void setHealthCheckConfig(CreateServiceRequestHealthCheckConfig healthCheckConfig) {
    this.healthCheckConfig = healthCheckConfig;
  }


  public CreateServiceRequest healthCheckCustomConfig(CreateServiceRequestHealthCheckCustomConfig healthCheckCustomConfig) {
    this.healthCheckCustomConfig = healthCheckCustomConfig;
    return this;
  }

  /**
   * Get healthCheckCustomConfig
   * @return healthCheckCustomConfig
   */
  @javax.annotation.Nullable
  public CreateServiceRequestHealthCheckCustomConfig getHealthCheckCustomConfig() {
    return healthCheckCustomConfig;
  }

  public void setHealthCheckCustomConfig(CreateServiceRequestHealthCheckCustomConfig healthCheckCustomConfig) {
    this.healthCheckCustomConfig = healthCheckCustomConfig;
  }


  public CreateServiceRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateServiceRequest type(ServiceTypeOption type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ServiceTypeOption getType() {
    return type;
  }

  public void setType(ServiceTypeOption type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateServiceRequest createServiceRequest = (CreateServiceRequest) o;
    return Objects.equals(this.name, createServiceRequest.name) &&
        Objects.equals(this.namespaceId, createServiceRequest.namespaceId) &&
        Objects.equals(this.creatorRequestId, createServiceRequest.creatorRequestId) &&
        Objects.equals(this.description, createServiceRequest.description) &&
        Objects.equals(this.dnsConfig, createServiceRequest.dnsConfig) &&
        Objects.equals(this.healthCheckConfig, createServiceRequest.healthCheckConfig) &&
        Objects.equals(this.healthCheckCustomConfig, createServiceRequest.healthCheckCustomConfig) &&
        Objects.equals(this.tags, createServiceRequest.tags) &&
        Objects.equals(this.type, createServiceRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, namespaceId, creatorRequestId, description, dnsConfig, healthCheckConfig, healthCheckCustomConfig, tags, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateServiceRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespaceId: ").append(toIndentedString(namespaceId)).append("\n");
    sb.append("    creatorRequestId: ").append(toIndentedString(creatorRequestId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dnsConfig: ").append(toIndentedString(dnsConfig)).append("\n");
    sb.append("    healthCheckConfig: ").append(toIndentedString(healthCheckConfig)).append("\n");
    sb.append("    healthCheckCustomConfig: ").append(toIndentedString(healthCheckCustomConfig)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("NamespaceId");
    openapiFields.add("CreatorRequestId");
    openapiFields.add("Description");
    openapiFields.add("DnsConfig");
    openapiFields.add("HealthCheckConfig");
    openapiFields.add("HealthCheckCustomConfig");
    openapiFields.add("Tags");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateServiceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateServiceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateServiceRequest is not found in the empty JSON string", CreateServiceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateServiceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateServiceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateServiceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `NamespaceId`
      if (jsonObj.get("NamespaceId") != null && !jsonObj.get("NamespaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NamespaceId"));
      }
      // validate the optional field `CreatorRequestId`
      if (jsonObj.get("CreatorRequestId") != null && !jsonObj.get("CreatorRequestId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatorRequestId"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DnsConfig`
      if (jsonObj.get("DnsConfig") != null && !jsonObj.get("DnsConfig").isJsonNull()) {
        CreateServiceRequestDnsConfig.validateJsonElement(jsonObj.get("DnsConfig"));
      }
      // validate the optional field `HealthCheckConfig`
      if (jsonObj.get("HealthCheckConfig") != null && !jsonObj.get("HealthCheckConfig").isJsonNull()) {
        CreateServiceRequestHealthCheckConfig.validateJsonElement(jsonObj.get("HealthCheckConfig"));
      }
      // validate the optional field `HealthCheckCustomConfig`
      if (jsonObj.get("HealthCheckCustomConfig") != null && !jsonObj.get("HealthCheckCustomConfig").isJsonNull()) {
        CreateServiceRequestHealthCheckCustomConfig.validateJsonElement(jsonObj.get("HealthCheckCustomConfig"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ServiceTypeOption.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateServiceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateServiceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateServiceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateServiceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateServiceRequest>() {
           @Override
           public void write(JsonWriter out, CreateServiceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateServiceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateServiceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateServiceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateServiceRequest
   */
  public static CreateServiceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateServiceRequest.class);
  }

  /**
   * Convert an instance of CreateServiceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

