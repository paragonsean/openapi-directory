/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.HealthStatusFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DiscoverInstancesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:11.953926-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiscoverInstancesRequest {
  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "NamespaceName";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  private String namespaceName;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_QUERY_PARAMETERS = "QueryParameters";
  @SerializedName(SERIALIZED_NAME_QUERY_PARAMETERS)
  private Map queryParameters;

  public static final String SERIALIZED_NAME_OPTIONAL_PARAMETERS = "OptionalParameters";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_PARAMETERS)
  private Map optionalParameters;

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "HealthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private HealthStatusFilter healthStatus;

  public DiscoverInstancesRequest() {
  }

  public DiscoverInstancesRequest namespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

  /**
   * Get namespaceName
   * @return namespaceName
   */
  @javax.annotation.Nonnull
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public DiscoverInstancesRequest serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nonnull
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public DiscoverInstancesRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public DiscoverInstancesRequest queryParameters(Map queryParameters) {
    this.queryParameters = queryParameters;
    return this;
  }

  /**
   * Get queryParameters
   * @return queryParameters
   */
  @javax.annotation.Nullable
  public Map getQueryParameters() {
    return queryParameters;
  }

  public void setQueryParameters(Map queryParameters) {
    this.queryParameters = queryParameters;
  }


  public DiscoverInstancesRequest optionalParameters(Map optionalParameters) {
    this.optionalParameters = optionalParameters;
    return this;
  }

  /**
   * Get optionalParameters
   * @return optionalParameters
   */
  @javax.annotation.Nullable
  public Map getOptionalParameters() {
    return optionalParameters;
  }

  public void setOptionalParameters(Map optionalParameters) {
    this.optionalParameters = optionalParameters;
  }


  public DiscoverInstancesRequest healthStatus(HealthStatusFilter healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Get healthStatus
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public HealthStatusFilter getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(HealthStatusFilter healthStatus) {
    this.healthStatus = healthStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiscoverInstancesRequest discoverInstancesRequest = (DiscoverInstancesRequest) o;
    return Objects.equals(this.namespaceName, discoverInstancesRequest.namespaceName) &&
        Objects.equals(this.serviceName, discoverInstancesRequest.serviceName) &&
        Objects.equals(this.maxResults, discoverInstancesRequest.maxResults) &&
        Objects.equals(this.queryParameters, discoverInstancesRequest.queryParameters) &&
        Objects.equals(this.optionalParameters, discoverInstancesRequest.optionalParameters) &&
        Objects.equals(this.healthStatus, discoverInstancesRequest.healthStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespaceName, serviceName, maxResults, queryParameters, optionalParameters, healthStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiscoverInstancesRequest {\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    queryParameters: ").append(toIndentedString(queryParameters)).append("\n");
    sb.append("    optionalParameters: ").append(toIndentedString(optionalParameters)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NamespaceName");
    openapiFields.add("ServiceName");
    openapiFields.add("MaxResults");
    openapiFields.add("QueryParameters");
    openapiFields.add("OptionalParameters");
    openapiFields.add("HealthStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("NamespaceName");
    openapiRequiredFields.add("ServiceName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiscoverInstancesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiscoverInstancesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiscoverInstancesRequest is not found in the empty JSON string", DiscoverInstancesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiscoverInstancesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiscoverInstancesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiscoverInstancesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `NamespaceName`
      String.validateJsonElement(jsonObj.get("NamespaceName"));
      // validate the required field `ServiceName`
      String.validateJsonElement(jsonObj.get("ServiceName"));
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
      // validate the optional field `QueryParameters`
      if (jsonObj.get("QueryParameters") != null && !jsonObj.get("QueryParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("QueryParameters"));
      }
      // validate the optional field `OptionalParameters`
      if (jsonObj.get("OptionalParameters") != null && !jsonObj.get("OptionalParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("OptionalParameters"));
      }
      // validate the optional field `HealthStatus`
      if (jsonObj.get("HealthStatus") != null && !jsonObj.get("HealthStatus").isJsonNull()) {
        HealthStatusFilter.validateJsonElement(jsonObj.get("HealthStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiscoverInstancesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiscoverInstancesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiscoverInstancesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiscoverInstancesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DiscoverInstancesRequest>() {
           @Override
           public void write(JsonWriter out, DiscoverInstancesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiscoverInstancesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiscoverInstancesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiscoverInstancesRequest
   * @throws IOException if the JSON string is invalid with respect to DiscoverInstancesRequest
   */
  public static DiscoverInstancesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiscoverInstancesRequest.class);
  }

  /**
   * Convert an instance of DiscoverInstancesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

