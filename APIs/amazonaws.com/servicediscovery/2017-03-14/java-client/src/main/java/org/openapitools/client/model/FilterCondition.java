/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets FilterCondition
 */
@JsonAdapter(FilterCondition.Adapter.class)
public enum FilterCondition {
  
  EQ("EQ"),
  
  IN("IN"),
  
  BETWEEN("BETWEEN"),
  
  BEGINS_WITH("BEGINS_WITH");

  private String value;

  FilterCondition(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FilterCondition fromValue(String value) {
    for (FilterCondition b : FilterCondition.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FilterCondition> {
    @Override
    public void write(final JsonWriter jsonWriter, final FilterCondition enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FilterCondition read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FilterCondition.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    FilterCondition.fromValue(value);
  }
}

