/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ServiceDnsConfig;
import org.openapitools.client.model.ServiceHealthCheckConfig;
import org.openapitools.client.model.ServiceHealthCheckCustomConfig;
import org.openapitools.client.model.ServiceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateServiceResponseService
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:11.953926-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateServiceResponseService {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAMESPACE_ID = "NamespaceId";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_ID)
  private String namespaceId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INSTANCE_COUNT = "InstanceCount";
  @SerializedName(SERIALIZED_NAME_INSTANCE_COUNT)
  private Integer instanceCount;

  public static final String SERIALIZED_NAME_DNS_CONFIG = "DnsConfig";
  @SerializedName(SERIALIZED_NAME_DNS_CONFIG)
  private ServiceDnsConfig dnsConfig;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ServiceType type;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_CONFIG = "HealthCheckConfig";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_CONFIG)
  private ServiceHealthCheckConfig healthCheckConfig;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_CUSTOM_CONFIG = "HealthCheckCustomConfig";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_CUSTOM_CONFIG)
  private ServiceHealthCheckCustomConfig healthCheckCustomConfig;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public static final String SERIALIZED_NAME_CREATOR_REQUEST_ID = "CreatorRequestId";
  @SerializedName(SERIALIZED_NAME_CREATOR_REQUEST_ID)
  private String creatorRequestId;

  public CreateServiceResponseService() {
  }

  public CreateServiceResponseService id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CreateServiceResponseService arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateServiceResponseService name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateServiceResponseService namespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
    return this;
  }

  /**
   * Get namespaceId
   * @return namespaceId
   */
  @javax.annotation.Nullable
  public String getNamespaceId() {
    return namespaceId;
  }

  public void setNamespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
  }


  public CreateServiceResponseService description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateServiceResponseService instanceCount(Integer instanceCount) {
    this.instanceCount = instanceCount;
    return this;
  }

  /**
   * Get instanceCount
   * @return instanceCount
   */
  @javax.annotation.Nullable
  public Integer getInstanceCount() {
    return instanceCount;
  }

  public void setInstanceCount(Integer instanceCount) {
    this.instanceCount = instanceCount;
  }


  public CreateServiceResponseService dnsConfig(ServiceDnsConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
    return this;
  }

  /**
   * Get dnsConfig
   * @return dnsConfig
   */
  @javax.annotation.Nullable
  public ServiceDnsConfig getDnsConfig() {
    return dnsConfig;
  }

  public void setDnsConfig(ServiceDnsConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
  }


  public CreateServiceResponseService type(ServiceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ServiceType getType() {
    return type;
  }

  public void setType(ServiceType type) {
    this.type = type;
  }


  public CreateServiceResponseService healthCheckConfig(ServiceHealthCheckConfig healthCheckConfig) {
    this.healthCheckConfig = healthCheckConfig;
    return this;
  }

  /**
   * Get healthCheckConfig
   * @return healthCheckConfig
   */
  @javax.annotation.Nullable
  public ServiceHealthCheckConfig getHealthCheckConfig() {
    return healthCheckConfig;
  }

  public void setHealthCheckConfig(ServiceHealthCheckConfig healthCheckConfig) {
    this.healthCheckConfig = healthCheckConfig;
  }


  public CreateServiceResponseService healthCheckCustomConfig(ServiceHealthCheckCustomConfig healthCheckCustomConfig) {
    this.healthCheckCustomConfig = healthCheckCustomConfig;
    return this;
  }

  /**
   * Get healthCheckCustomConfig
   * @return healthCheckCustomConfig
   */
  @javax.annotation.Nullable
  public ServiceHealthCheckCustomConfig getHealthCheckCustomConfig() {
    return healthCheckCustomConfig;
  }

  public void setHealthCheckCustomConfig(ServiceHealthCheckCustomConfig healthCheckCustomConfig) {
    this.healthCheckCustomConfig = healthCheckCustomConfig;
  }


  public CreateServiceResponseService createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }


  public CreateServiceResponseService creatorRequestId(String creatorRequestId) {
    this.creatorRequestId = creatorRequestId;
    return this;
  }

  /**
   * Get creatorRequestId
   * @return creatorRequestId
   */
  @javax.annotation.Nullable
  public String getCreatorRequestId() {
    return creatorRequestId;
  }

  public void setCreatorRequestId(String creatorRequestId) {
    this.creatorRequestId = creatorRequestId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateServiceResponseService createServiceResponseService = (CreateServiceResponseService) o;
    return Objects.equals(this.id, createServiceResponseService.id) &&
        Objects.equals(this.arn, createServiceResponseService.arn) &&
        Objects.equals(this.name, createServiceResponseService.name) &&
        Objects.equals(this.namespaceId, createServiceResponseService.namespaceId) &&
        Objects.equals(this.description, createServiceResponseService.description) &&
        Objects.equals(this.instanceCount, createServiceResponseService.instanceCount) &&
        Objects.equals(this.dnsConfig, createServiceResponseService.dnsConfig) &&
        Objects.equals(this.type, createServiceResponseService.type) &&
        Objects.equals(this.healthCheckConfig, createServiceResponseService.healthCheckConfig) &&
        Objects.equals(this.healthCheckCustomConfig, createServiceResponseService.healthCheckCustomConfig) &&
        Objects.equals(this.createDate, createServiceResponseService.createDate) &&
        Objects.equals(this.creatorRequestId, createServiceResponseService.creatorRequestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, name, namespaceId, description, instanceCount, dnsConfig, type, healthCheckConfig, healthCheckCustomConfig, createDate, creatorRequestId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateServiceResponseService {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespaceId: ").append(toIndentedString(namespaceId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    instanceCount: ").append(toIndentedString(instanceCount)).append("\n");
    sb.append("    dnsConfig: ").append(toIndentedString(dnsConfig)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    healthCheckConfig: ").append(toIndentedString(healthCheckConfig)).append("\n");
    sb.append("    healthCheckCustomConfig: ").append(toIndentedString(healthCheckCustomConfig)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("    creatorRequestId: ").append(toIndentedString(creatorRequestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Arn");
    openapiFields.add("Name");
    openapiFields.add("NamespaceId");
    openapiFields.add("Description");
    openapiFields.add("InstanceCount");
    openapiFields.add("DnsConfig");
    openapiFields.add("Type");
    openapiFields.add("HealthCheckConfig");
    openapiFields.add("HealthCheckCustomConfig");
    openapiFields.add("CreateDate");
    openapiFields.add("CreatorRequestId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateServiceResponseService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateServiceResponseService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateServiceResponseService is not found in the empty JSON string", CreateServiceResponseService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateServiceResponseService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateServiceResponseService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `NamespaceId`
      if (jsonObj.get("NamespaceId") != null && !jsonObj.get("NamespaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NamespaceId"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `InstanceCount`
      if (jsonObj.get("InstanceCount") != null && !jsonObj.get("InstanceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstanceCount"));
      }
      // validate the optional field `DnsConfig`
      if (jsonObj.get("DnsConfig") != null && !jsonObj.get("DnsConfig").isJsonNull()) {
        ServiceDnsConfig.validateJsonElement(jsonObj.get("DnsConfig"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ServiceType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `HealthCheckConfig`
      if (jsonObj.get("HealthCheckConfig") != null && !jsonObj.get("HealthCheckConfig").isJsonNull()) {
        ServiceHealthCheckConfig.validateJsonElement(jsonObj.get("HealthCheckConfig"));
      }
      // validate the optional field `HealthCheckCustomConfig`
      if (jsonObj.get("HealthCheckCustomConfig") != null && !jsonObj.get("HealthCheckCustomConfig").isJsonNull()) {
        ServiceHealthCheckCustomConfig.validateJsonElement(jsonObj.get("HealthCheckCustomConfig"));
      }
      // validate the optional field `CreateDate`
      if (jsonObj.get("CreateDate") != null && !jsonObj.get("CreateDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreateDate"));
      }
      // validate the optional field `CreatorRequestId`
      if (jsonObj.get("CreatorRequestId") != null && !jsonObj.get("CreatorRequestId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreatorRequestId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateServiceResponseService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateServiceResponseService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateServiceResponseService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateServiceResponseService.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateServiceResponseService>() {
           @Override
           public void write(JsonWriter out, CreateServiceResponseService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateServiceResponseService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateServiceResponseService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateServiceResponseService
   * @throws IOException if the JSON string is invalid with respect to CreateServiceResponseService
   */
  public static CreateServiceResponseService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateServiceResponseService.class);
  }

  /**
   * Convert an instance of CreateServiceResponseService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

