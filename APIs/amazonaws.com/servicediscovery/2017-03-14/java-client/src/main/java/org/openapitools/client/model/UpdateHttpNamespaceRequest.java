/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UpdateHttpNamespaceRequestNamespace;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateHttpNamespaceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:11.953926-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateHttpNamespaceRequest {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_UPDATER_REQUEST_ID = "UpdaterRequestId";
  @SerializedName(SERIALIZED_NAME_UPDATER_REQUEST_ID)
  private String updaterRequestId;

  public static final String SERIALIZED_NAME_NAMESPACE = "Namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private UpdateHttpNamespaceRequestNamespace namespace;

  public UpdateHttpNamespaceRequest() {
  }

  public UpdateHttpNamespaceRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UpdateHttpNamespaceRequest updaterRequestId(String updaterRequestId) {
    this.updaterRequestId = updaterRequestId;
    return this;
  }

  /**
   * Get updaterRequestId
   * @return updaterRequestId
   */
  @javax.annotation.Nullable
  public String getUpdaterRequestId() {
    return updaterRequestId;
  }

  public void setUpdaterRequestId(String updaterRequestId) {
    this.updaterRequestId = updaterRequestId;
  }


  public UpdateHttpNamespaceRequest namespace(UpdateHttpNamespaceRequestNamespace namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nonnull
  public UpdateHttpNamespaceRequestNamespace getNamespace() {
    return namespace;
  }

  public void setNamespace(UpdateHttpNamespaceRequestNamespace namespace) {
    this.namespace = namespace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateHttpNamespaceRequest updateHttpNamespaceRequest = (UpdateHttpNamespaceRequest) o;
    return Objects.equals(this.id, updateHttpNamespaceRequest.id) &&
        Objects.equals(this.updaterRequestId, updateHttpNamespaceRequest.updaterRequestId) &&
        Objects.equals(this.namespace, updateHttpNamespaceRequest.namespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, updaterRequestId, namespace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateHttpNamespaceRequest {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    updaterRequestId: ").append(toIndentedString(updaterRequestId)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("UpdaterRequestId");
    openapiFields.add("Namespace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Namespace");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateHttpNamespaceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateHttpNamespaceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateHttpNamespaceRequest is not found in the empty JSON string", UpdateHttpNamespaceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateHttpNamespaceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateHttpNamespaceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateHttpNamespaceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the optional field `UpdaterRequestId`
      if (jsonObj.get("UpdaterRequestId") != null && !jsonObj.get("UpdaterRequestId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UpdaterRequestId"));
      }
      // validate the required field `Namespace`
      UpdateHttpNamespaceRequestNamespace.validateJsonElement(jsonObj.get("Namespace"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateHttpNamespaceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateHttpNamespaceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateHttpNamespaceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateHttpNamespaceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateHttpNamespaceRequest>() {
           @Override
           public void write(JsonWriter out, UpdateHttpNamespaceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateHttpNamespaceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateHttpNamespaceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateHttpNamespaceRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateHttpNamespaceRequest
   */
  public static UpdateHttpNamespaceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateHttpNamespaceRequest.class);
  }

  /**
   * Convert an instance of UpdateHttpNamespaceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

