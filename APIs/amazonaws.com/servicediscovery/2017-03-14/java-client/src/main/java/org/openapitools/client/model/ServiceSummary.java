/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ServiceChangeHealthCheckConfig;
import org.openapitools.client.model.ServiceSummaryDnsConfig;
import org.openapitools.client.model.ServiceSummaryHealthCheckCustomConfig;
import org.openapitools.client.model.ServiceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A complex type that contains information about a specified service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:11.953926-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceSummary {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ServiceType type;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INSTANCE_COUNT = "InstanceCount";
  @SerializedName(SERIALIZED_NAME_INSTANCE_COUNT)
  private Integer instanceCount;

  public static final String SERIALIZED_NAME_DNS_CONFIG = "DnsConfig";
  @SerializedName(SERIALIZED_NAME_DNS_CONFIG)
  private ServiceSummaryDnsConfig dnsConfig;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_CONFIG = "HealthCheckConfig";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_CONFIG)
  private ServiceChangeHealthCheckConfig healthCheckConfig;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_CUSTOM_CONFIG = "HealthCheckCustomConfig";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_CUSTOM_CONFIG)
  private ServiceSummaryHealthCheckCustomConfig healthCheckCustomConfig;

  public static final String SERIALIZED_NAME_CREATE_DATE = "CreateDate";
  @SerializedName(SERIALIZED_NAME_CREATE_DATE)
  private OffsetDateTime createDate;

  public ServiceSummary() {
  }

  public ServiceSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ServiceSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ServiceSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ServiceSummary type(ServiceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ServiceType getType() {
    return type;
  }

  public void setType(ServiceType type) {
    this.type = type;
  }


  public ServiceSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ServiceSummary instanceCount(Integer instanceCount) {
    this.instanceCount = instanceCount;
    return this;
  }

  /**
   * Get instanceCount
   * @return instanceCount
   */
  @javax.annotation.Nullable
  public Integer getInstanceCount() {
    return instanceCount;
  }

  public void setInstanceCount(Integer instanceCount) {
    this.instanceCount = instanceCount;
  }


  public ServiceSummary dnsConfig(ServiceSummaryDnsConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
    return this;
  }

  /**
   * Get dnsConfig
   * @return dnsConfig
   */
  @javax.annotation.Nullable
  public ServiceSummaryDnsConfig getDnsConfig() {
    return dnsConfig;
  }

  public void setDnsConfig(ServiceSummaryDnsConfig dnsConfig) {
    this.dnsConfig = dnsConfig;
  }


  public ServiceSummary healthCheckConfig(ServiceChangeHealthCheckConfig healthCheckConfig) {
    this.healthCheckConfig = healthCheckConfig;
    return this;
  }

  /**
   * Get healthCheckConfig
   * @return healthCheckConfig
   */
  @javax.annotation.Nullable
  public ServiceChangeHealthCheckConfig getHealthCheckConfig() {
    return healthCheckConfig;
  }

  public void setHealthCheckConfig(ServiceChangeHealthCheckConfig healthCheckConfig) {
    this.healthCheckConfig = healthCheckConfig;
  }


  public ServiceSummary healthCheckCustomConfig(ServiceSummaryHealthCheckCustomConfig healthCheckCustomConfig) {
    this.healthCheckCustomConfig = healthCheckCustomConfig;
    return this;
  }

  /**
   * Get healthCheckCustomConfig
   * @return healthCheckCustomConfig
   */
  @javax.annotation.Nullable
  public ServiceSummaryHealthCheckCustomConfig getHealthCheckCustomConfig() {
    return healthCheckCustomConfig;
  }

  public void setHealthCheckCustomConfig(ServiceSummaryHealthCheckCustomConfig healthCheckCustomConfig) {
    this.healthCheckCustomConfig = healthCheckCustomConfig;
  }


  public ServiceSummary createDate(OffsetDateTime createDate) {
    this.createDate = createDate;
    return this;
  }

  /**
   * Get createDate
   * @return createDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateDate() {
    return createDate;
  }

  public void setCreateDate(OffsetDateTime createDate) {
    this.createDate = createDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceSummary serviceSummary = (ServiceSummary) o;
    return Objects.equals(this.id, serviceSummary.id) &&
        Objects.equals(this.arn, serviceSummary.arn) &&
        Objects.equals(this.name, serviceSummary.name) &&
        Objects.equals(this.type, serviceSummary.type) &&
        Objects.equals(this.description, serviceSummary.description) &&
        Objects.equals(this.instanceCount, serviceSummary.instanceCount) &&
        Objects.equals(this.dnsConfig, serviceSummary.dnsConfig) &&
        Objects.equals(this.healthCheckConfig, serviceSummary.healthCheckConfig) &&
        Objects.equals(this.healthCheckCustomConfig, serviceSummary.healthCheckCustomConfig) &&
        Objects.equals(this.createDate, serviceSummary.createDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, name, type, description, instanceCount, dnsConfig, healthCheckConfig, healthCheckCustomConfig, createDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceSummary {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    instanceCount: ").append(toIndentedString(instanceCount)).append("\n");
    sb.append("    dnsConfig: ").append(toIndentedString(dnsConfig)).append("\n");
    sb.append("    healthCheckConfig: ").append(toIndentedString(healthCheckConfig)).append("\n");
    sb.append("    healthCheckCustomConfig: ").append(toIndentedString(healthCheckCustomConfig)).append("\n");
    sb.append("    createDate: ").append(toIndentedString(createDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Arn");
    openapiFields.add("Name");
    openapiFields.add("Type");
    openapiFields.add("Description");
    openapiFields.add("InstanceCount");
    openapiFields.add("DnsConfig");
    openapiFields.add("HealthCheckConfig");
    openapiFields.add("HealthCheckCustomConfig");
    openapiFields.add("CreateDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceSummary is not found in the empty JSON string", ServiceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ServiceType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `InstanceCount`
      if (jsonObj.get("InstanceCount") != null && !jsonObj.get("InstanceCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("InstanceCount"));
      }
      // validate the optional field `DnsConfig`
      if (jsonObj.get("DnsConfig") != null && !jsonObj.get("DnsConfig").isJsonNull()) {
        ServiceSummaryDnsConfig.validateJsonElement(jsonObj.get("DnsConfig"));
      }
      // validate the optional field `HealthCheckConfig`
      if (jsonObj.get("HealthCheckConfig") != null && !jsonObj.get("HealthCheckConfig").isJsonNull()) {
        ServiceChangeHealthCheckConfig.validateJsonElement(jsonObj.get("HealthCheckConfig"));
      }
      // validate the optional field `HealthCheckCustomConfig`
      if (jsonObj.get("HealthCheckCustomConfig") != null && !jsonObj.get("HealthCheckCustomConfig").isJsonNull()) {
        ServiceSummaryHealthCheckCustomConfig.validateJsonElement(jsonObj.get("HealthCheckCustomConfig"));
      }
      // validate the optional field `CreateDate`
      if (jsonObj.get("CreateDate") != null && !jsonObj.get("CreateDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreateDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceSummary>() {
           @Override
           public void write(JsonWriter out, ServiceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceSummary
   * @throws IOException if the JSON string is invalid with respect to ServiceSummary
   */
  public static ServiceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceSummary.class);
  }

  /**
   * Convert an instance of ServiceSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

