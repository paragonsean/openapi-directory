/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthCheckType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt; &lt;i&gt;Public DNS and HTTP namespaces only.&lt;/i&gt; A complex type that contains settings for an optional health check. If you specify settings for a health check, Cloud Map associates the health check with the records that you specify in &lt;code&gt;DnsConfig&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you specify a health check configuration, you can specify either &lt;code&gt;HealthCheckCustomConfig&lt;/code&gt; or &lt;code&gt;HealthCheckConfig&lt;/code&gt; but not both.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Health checks are basic Route 53 health checks that monitor an Amazon Web Services endpoint. For information about pricing for health checks, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Note the following about configuring health checks.&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;A and AAAA records&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;If &lt;code&gt;DnsConfig&lt;/code&gt; includes configurations for both &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;AAAA&lt;/code&gt; records, Cloud Map creates a health check that uses the IPv4 address to check the health of the resource. If the endpoint tthat&#39;s specified by the IPv4 address is unhealthy, Route 53 considers both the &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;AAAA&lt;/code&gt; records to be unhealthy. &lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;CNAME records&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;You can&#39;t specify settings for &lt;code&gt;HealthCheckConfig&lt;/code&gt; when the &lt;code&gt;DNSConfig&lt;/code&gt; includes &lt;code&gt;CNAME&lt;/code&gt; for the value of &lt;code&gt;Type&lt;/code&gt;. If you do, the &lt;code&gt;CreateService&lt;/code&gt; request will fail with an &lt;code&gt;InvalidInput&lt;/code&gt; error.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Request interval&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;A Route 53 health checker in each health-checking Amazon Web Services Region sends a health check request to an endpoint every 30 seconds. On average, your endpoint receives a health check request about every two seconds. However, health checkers don&#39;t coordinate with one another. Therefore, you might sometimes see several requests in one second that&#39;s followed by a few seconds with no health checks at all.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Health checking regions&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Health checkers perform checks from all Route 53 health-checking Regions. For a list of the current Regions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-Regions\&quot;&gt;Regions&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;Alias records&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;When you register an instance, if you include the &lt;code&gt;AWS_ALIAS_DNS_NAME&lt;/code&gt; attribute, Cloud Map creates a Route 53 alias record. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Route 53 automatically sets &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; to true for alias records. When &lt;code&gt;EvaluateTargetHealth&lt;/code&gt; is true, the alias record inherits the health of the referenced Amazon Web Services resource. such as an ELB load balancer. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-EvaluateTargetHealth\&quot;&gt;EvaluateTargetHealth&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you include &lt;code&gt;HealthCheckConfig&lt;/code&gt; and then use the service to register an instance that creates an alias record, Route 53 doesn&#39;t create the health check.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/dd&gt; &lt;dt&gt;Charges for health checks&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Health checks are basic Route 53 health checks that monitor an Amazon Web Services endpoint. For information about pricing for health checks, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:11.953926-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthCheckConfig {
  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private HealthCheckType type;

  public static final String SERIALIZED_NAME_RESOURCE_PATH = "ResourcePath";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PATH)
  private String resourcePath;

  public static final String SERIALIZED_NAME_FAILURE_THRESHOLD = "FailureThreshold";
  @SerializedName(SERIALIZED_NAME_FAILURE_THRESHOLD)
  private Integer failureThreshold;

  public HealthCheckConfig() {
  }

  public HealthCheckConfig type(HealthCheckType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public HealthCheckType getType() {
    return type;
  }

  public void setType(HealthCheckType type) {
    this.type = type;
  }


  public HealthCheckConfig resourcePath(String resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  }

  /**
   * Get resourcePath
   * @return resourcePath
   */
  @javax.annotation.Nullable
  public String getResourcePath() {
    return resourcePath;
  }

  public void setResourcePath(String resourcePath) {
    this.resourcePath = resourcePath;
  }


  public HealthCheckConfig failureThreshold(Integer failureThreshold) {
    this.failureThreshold = failureThreshold;
    return this;
  }

  /**
   * Get failureThreshold
   * @return failureThreshold
   */
  @javax.annotation.Nullable
  public Integer getFailureThreshold() {
    return failureThreshold;
  }

  public void setFailureThreshold(Integer failureThreshold) {
    this.failureThreshold = failureThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthCheckConfig healthCheckConfig = (HealthCheckConfig) o;
    return Objects.equals(this.type, healthCheckConfig.type) &&
        Objects.equals(this.resourcePath, healthCheckConfig.resourcePath) &&
        Objects.equals(this.failureThreshold, healthCheckConfig.failureThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, resourcePath, failureThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthCheckConfig {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    resourcePath: ").append(toIndentedString(resourcePath)).append("\n");
    sb.append("    failureThreshold: ").append(toIndentedString(failureThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("ResourcePath");
    openapiFields.add("FailureThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthCheckConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthCheckConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthCheckConfig is not found in the empty JSON string", HealthCheckConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthCheckConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthCheckConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HealthCheckConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Type`
      HealthCheckType.validateJsonElement(jsonObj.get("Type"));
      // validate the optional field `ResourcePath`
      if (jsonObj.get("ResourcePath") != null && !jsonObj.get("ResourcePath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourcePath"));
      }
      // validate the optional field `FailureThreshold`
      if (jsonObj.get("FailureThreshold") != null && !jsonObj.get("FailureThreshold").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailureThreshold"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthCheckConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthCheckConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthCheckConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthCheckConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthCheckConfig>() {
           @Override
           public void write(JsonWriter out, HealthCheckConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthCheckConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthCheckConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthCheckConfig
   * @throws IOException if the JSON string is invalid with respect to HealthCheckConfig
   */
  public static HealthCheckConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthCheckConfig.class);
  }

  /**
   * Convert an instance of HealthCheckConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

