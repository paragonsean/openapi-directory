/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NamespacePropertiesDnsProperties;
import org.openapitools.client.model.NamespacePropertiesHttpProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NamespaceProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:11.953926-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NamespaceProperties {
  public static final String SERIALIZED_NAME_DNS_PROPERTIES = "DnsProperties";
  @SerializedName(SERIALIZED_NAME_DNS_PROPERTIES)
  private NamespacePropertiesDnsProperties dnsProperties;

  public static final String SERIALIZED_NAME_HTTP_PROPERTIES = "HttpProperties";
  @SerializedName(SERIALIZED_NAME_HTTP_PROPERTIES)
  private NamespacePropertiesHttpProperties httpProperties;

  public NamespaceProperties() {
  }

  public NamespaceProperties dnsProperties(NamespacePropertiesDnsProperties dnsProperties) {
    this.dnsProperties = dnsProperties;
    return this;
  }

  /**
   * Get dnsProperties
   * @return dnsProperties
   */
  @javax.annotation.Nullable
  public NamespacePropertiesDnsProperties getDnsProperties() {
    return dnsProperties;
  }

  public void setDnsProperties(NamespacePropertiesDnsProperties dnsProperties) {
    this.dnsProperties = dnsProperties;
  }


  public NamespaceProperties httpProperties(NamespacePropertiesHttpProperties httpProperties) {
    this.httpProperties = httpProperties;
    return this;
  }

  /**
   * Get httpProperties
   * @return httpProperties
   */
  @javax.annotation.Nullable
  public NamespacePropertiesHttpProperties getHttpProperties() {
    return httpProperties;
  }

  public void setHttpProperties(NamespacePropertiesHttpProperties httpProperties) {
    this.httpProperties = httpProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamespaceProperties namespaceProperties = (NamespaceProperties) o;
    return Objects.equals(this.dnsProperties, namespaceProperties.dnsProperties) &&
        Objects.equals(this.httpProperties, namespaceProperties.httpProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsProperties, httpProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamespaceProperties {\n");
    sb.append("    dnsProperties: ").append(toIndentedString(dnsProperties)).append("\n");
    sb.append("    httpProperties: ").append(toIndentedString(httpProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DnsProperties");
    openapiFields.add("HttpProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NamespaceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NamespaceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NamespaceProperties is not found in the empty JSON string", NamespaceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NamespaceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NamespaceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DnsProperties`
      if (jsonObj.get("DnsProperties") != null && !jsonObj.get("DnsProperties").isJsonNull()) {
        NamespacePropertiesDnsProperties.validateJsonElement(jsonObj.get("DnsProperties"));
      }
      // validate the optional field `HttpProperties`
      if (jsonObj.get("HttpProperties") != null && !jsonObj.get("HttpProperties").isJsonNull()) {
        NamespacePropertiesHttpProperties.validateJsonElement(jsonObj.get("HttpProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NamespaceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NamespaceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NamespaceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NamespaceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<NamespaceProperties>() {
           @Override
           public void write(JsonWriter out, NamespaceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NamespaceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NamespaceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NamespaceProperties
   * @throws IOException if the JSON string is invalid with respect to NamespaceProperties
   */
  public static NamespaceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NamespaceProperties.class);
  }

  /**
   * Convert an instance of NamespaceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

