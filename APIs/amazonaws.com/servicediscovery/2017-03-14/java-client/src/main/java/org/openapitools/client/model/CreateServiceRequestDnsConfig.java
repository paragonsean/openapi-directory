/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RoutingPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateServiceRequestDnsConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:26:11.953926-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateServiceRequestDnsConfig {
  public static final String SERIALIZED_NAME_NAMESPACE_ID = "NamespaceId";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_ID)
  private String namespaceId;

  public static final String SERIALIZED_NAME_ROUTING_POLICY = "RoutingPolicy";
  @SerializedName(SERIALIZED_NAME_ROUTING_POLICY)
  private RoutingPolicy routingPolicy;

  public static final String SERIALIZED_NAME_DNS_RECORDS = "DnsRecords";
  @SerializedName(SERIALIZED_NAME_DNS_RECORDS)
  private List dnsRecords;

  public CreateServiceRequestDnsConfig() {
  }

  public CreateServiceRequestDnsConfig namespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
    return this;
  }

  /**
   * Get namespaceId
   * @return namespaceId
   */
  @javax.annotation.Nullable
  public String getNamespaceId() {
    return namespaceId;
  }

  public void setNamespaceId(String namespaceId) {
    this.namespaceId = namespaceId;
  }


  public CreateServiceRequestDnsConfig routingPolicy(RoutingPolicy routingPolicy) {
    this.routingPolicy = routingPolicy;
    return this;
  }

  /**
   * Get routingPolicy
   * @return routingPolicy
   */
  @javax.annotation.Nullable
  public RoutingPolicy getRoutingPolicy() {
    return routingPolicy;
  }

  public void setRoutingPolicy(RoutingPolicy routingPolicy) {
    this.routingPolicy = routingPolicy;
  }


  public CreateServiceRequestDnsConfig dnsRecords(List dnsRecords) {
    this.dnsRecords = dnsRecords;
    return this;
  }

  /**
   * Get dnsRecords
   * @return dnsRecords
   */
  @javax.annotation.Nonnull
  public List getDnsRecords() {
    return dnsRecords;
  }

  public void setDnsRecords(List dnsRecords) {
    this.dnsRecords = dnsRecords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateServiceRequestDnsConfig createServiceRequestDnsConfig = (CreateServiceRequestDnsConfig) o;
    return Objects.equals(this.namespaceId, createServiceRequestDnsConfig.namespaceId) &&
        Objects.equals(this.routingPolicy, createServiceRequestDnsConfig.routingPolicy) &&
        Objects.equals(this.dnsRecords, createServiceRequestDnsConfig.dnsRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespaceId, routingPolicy, dnsRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateServiceRequestDnsConfig {\n");
    sb.append("    namespaceId: ").append(toIndentedString(namespaceId)).append("\n");
    sb.append("    routingPolicy: ").append(toIndentedString(routingPolicy)).append("\n");
    sb.append("    dnsRecords: ").append(toIndentedString(dnsRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NamespaceId");
    openapiFields.add("RoutingPolicy");
    openapiFields.add("DnsRecords");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DnsRecords");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateServiceRequestDnsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateServiceRequestDnsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateServiceRequestDnsConfig is not found in the empty JSON string", CreateServiceRequestDnsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateServiceRequestDnsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateServiceRequestDnsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateServiceRequestDnsConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NamespaceId`
      if (jsonObj.get("NamespaceId") != null && !jsonObj.get("NamespaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NamespaceId"));
      }
      // validate the optional field `RoutingPolicy`
      if (jsonObj.get("RoutingPolicy") != null && !jsonObj.get("RoutingPolicy").isJsonNull()) {
        RoutingPolicy.validateJsonElement(jsonObj.get("RoutingPolicy"));
      }
      // validate the required field `DnsRecords`
      List.validateJsonElement(jsonObj.get("DnsRecords"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateServiceRequestDnsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateServiceRequestDnsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateServiceRequestDnsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateServiceRequestDnsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateServiceRequestDnsConfig>() {
           @Override
           public void write(JsonWriter out, CreateServiceRequestDnsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateServiceRequestDnsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateServiceRequestDnsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateServiceRequestDnsConfig
   * @throws IOException if the JSON string is invalid with respect to CreateServiceRequestDnsConfig
   */
  public static CreateServiceRequestDnsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateServiceRequestDnsConfig.class);
  }

  /**
   * Convert an instance of CreateServiceRequestDnsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

