/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateHttpNamespaceRequest;
import org.openapitools.client.model.CreateHttpNamespaceResponse;
import org.openapitools.client.model.CreatePrivateDnsNamespaceRequest;
import org.openapitools.client.model.CreatePrivateDnsNamespaceResponse;
import org.openapitools.client.model.CreatePublicDnsNamespaceRequest;
import org.openapitools.client.model.CreatePublicDnsNamespaceResponse;
import org.openapitools.client.model.CreateServiceRequest;
import org.openapitools.client.model.CreateServiceResponse;
import org.openapitools.client.model.DeleteNamespaceRequest;
import org.openapitools.client.model.DeleteNamespaceResponse;
import org.openapitools.client.model.DeleteServiceRequest;
import org.openapitools.client.model.DeregisterInstanceRequest;
import org.openapitools.client.model.DeregisterInstanceResponse;
import org.openapitools.client.model.DiscoverInstancesRequest;
import org.openapitools.client.model.DiscoverInstancesResponse;
import org.openapitools.client.model.GetInstanceRequest;
import org.openapitools.client.model.GetInstanceResponse;
import org.openapitools.client.model.GetInstancesHealthStatusRequest;
import org.openapitools.client.model.GetInstancesHealthStatusResponse;
import org.openapitools.client.model.GetNamespaceRequest;
import org.openapitools.client.model.GetNamespaceResponse;
import org.openapitools.client.model.GetOperationRequest;
import org.openapitools.client.model.GetOperationResponse;
import org.openapitools.client.model.GetServiceRequest;
import org.openapitools.client.model.GetServiceResponse;
import org.openapitools.client.model.ListInstancesRequest;
import org.openapitools.client.model.ListInstancesResponse;
import org.openapitools.client.model.ListNamespacesRequest;
import org.openapitools.client.model.ListNamespacesResponse;
import org.openapitools.client.model.ListOperationsRequest;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListServicesRequest;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.RegisterInstanceRequest;
import org.openapitools.client.model.RegisterInstanceResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateHttpNamespaceRequest;
import org.openapitools.client.model.UpdateHttpNamespaceResponse;
import org.openapitools.client.model.UpdateInstanceCustomHealthStatusRequest;
import org.openapitools.client.model.UpdatePrivateDnsNamespaceRequest;
import org.openapitools.client.model.UpdatePrivateDnsNamespaceResponse;
import org.openapitools.client.model.UpdatePublicDnsNamespaceRequest;
import org.openapitools.client.model.UpdatePublicDnsNamespaceResponse;
import org.openapitools.client.model.UpdateServiceRequest;
import org.openapitools.client.model.UpdateServiceResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Creates an HTTP namespace. Service instances registered using an HTTP namespace can be discovered using a &lt;code&gt;DiscoverInstances&lt;/code&gt; request but can&#39;t be discovered using DNS.&lt;/p&gt; &lt;p&gt;For the current quota on the number of namespaces that you can create using the same Amazon Web Services account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\&quot;&gt;Cloud Map quotas&lt;/a&gt; in the &lt;i&gt;Cloud Map Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHttpNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        CreateHttpNamespaceRequest createHttpNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateHttpNamespaceResponse response = api.createHttpNamespace(xAmzTarget, createHttpNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a private namespace based on DNS, which is visible only inside a specified Amazon VPC. The namespace defines your service naming scheme. For example, if you name your namespace &lt;code&gt;example.com&lt;/code&gt; and name your service &lt;code&gt;backend&lt;/code&gt;, the resulting DNS name for the service is &lt;code&gt;backend.example.com&lt;/code&gt;. Service instances that are registered using a private DNS namespace can be discovered using either a &lt;code&gt;DiscoverInstances&lt;/code&gt; request or using DNS. For the current quota on the number of namespaces that you can create using the same Amazon Web Services account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\&quot;&gt;Cloud Map quotas&lt;/a&gt; in the &lt;i&gt;Cloud Map Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPrivateDnsNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        CreatePrivateDnsNamespaceRequest createPrivateDnsNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePrivateDnsNamespaceResponse response = api.createPrivateDnsNamespace(xAmzTarget, createPrivateDnsNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a public namespace based on DNS, which is visible on the internet. The namespace defines your service naming scheme. For example, if you name your namespace &lt;code&gt;example.com&lt;/code&gt; and name your service &lt;code&gt;backend&lt;/code&gt;, the resulting DNS name for the service is &lt;code&gt;backend.example.com&lt;/code&gt;. You can discover instances that were registered with a public DNS namespace by using either a &lt;code&gt;DiscoverInstances&lt;/code&gt; request or using DNS. For the current quota on the number of namespaces that you can create using the same Amazon Web Services account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\&quot;&gt;Cloud Map quotas&lt;/a&gt; in the &lt;i&gt;Cloud Map Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;The &lt;code&gt;CreatePublicDnsNamespace&lt;/code&gt; API operation is not supported in the Amazon Web Services GovCloud (US) Regions.&lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPublicDnsNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        CreatePublicDnsNamespaceRequest createPublicDnsNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePublicDnsNamespaceResponse response = api.createPublicDnsNamespace(xAmzTarget, createPublicDnsNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a service. This action defines the configuration for the following entities:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For public and private DNS namespaces, one of the following combinations of DNS records in Amazon RouteÂ 53:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;A&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AAAA&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;AAAA&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SRV&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CNAME&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Optionally, a health check&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After you create the service, you can submit a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html\&quot;&gt;RegisterInstance&lt;/a&gt; request, and Cloud Map uses the values in the configuration to create the specified entities.&lt;/p&gt; &lt;p&gt;For the current quota on the number of instances that you can register using the same namespace and using the same service, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\&quot;&gt;Cloud Map quotas&lt;/a&gt; in the &lt;i&gt;Cloud Map Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceTest() throws ApiException {
        String xAmzTarget = null;
        CreateServiceRequest createServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateServiceResponse response = api.createService(xAmzTarget, createServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a namespace from the current account. If the namespace still contains one or more services, the request fails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteNamespaceRequest deleteNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteNamespaceResponse response = api.deleteNamespace(xAmzTarget, deleteNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified service. If the service still contains one or more registered instances, the request fails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteServiceRequest deleteServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteService(xAmzTarget, deleteServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the Amazon RouteÂ 53 DNS records and health check, if any, that Cloud Map created for the specified instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterInstanceTest() throws ApiException {
        String xAmzTarget = null;
        DeregisterInstanceRequest deregisterInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeregisterInstanceResponse response = api.deregisterInstance(xAmzTarget, deregisterInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Discovers registered instances for a specified namespace and service. You can use &lt;code&gt;DiscoverInstances&lt;/code&gt; to discover instances for any type of namespace. For public and private DNS namespaces, you can also use DNS queries to discover instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void discoverInstancesTest() throws ApiException {
        String xAmzTarget = null;
        DiscoverInstancesRequest discoverInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DiscoverInstancesResponse response = api.discoverInstances(xAmzTarget, discoverInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about a specified instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstanceTest() throws ApiException {
        String xAmzTarget = null;
        GetInstanceRequest getInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInstanceResponse response = api.getInstance(xAmzTarget, getInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets the current health status (&lt;code&gt;Healthy&lt;/code&gt;, &lt;code&gt;Unhealthy&lt;/code&gt;, or &lt;code&gt;Unknown&lt;/code&gt;) of one or more instances that are associated with a specified service.&lt;/p&gt; &lt;note&gt; &lt;p&gt;There&#39;s a brief delay between when you register an instance and when the health status for the instance is available. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstancesHealthStatusTest() throws ApiException {
        String xAmzTarget = null;
        GetInstancesHealthStatusRequest getInstancesHealthStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetInstancesHealthStatusResponse response = api.getInstancesHealthStatus(xAmzTarget, getInstancesHealthStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets information about a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        GetNamespaceRequest getNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetNamespaceResponse response = api.getNamespace(xAmzTarget, getNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gets information about any operation that returns an operation ID in the response, such as a &lt;code&gt;CreateService&lt;/code&gt; request.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To get a list of operations that match specified criteria, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloud-map/latest/api/API_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOperationTest() throws ApiException {
        String xAmzTarget = null;
        GetOperationRequest getOperationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOperationResponse response = api.getOperation(xAmzTarget, getOperationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the settings for a specified service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceTest() throws ApiException {
        String xAmzTarget = null;
        GetServiceRequest getServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServiceResponse response = api.getService(xAmzTarget, getServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists summary information about the instances that you registered by using a specified service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstancesTest() throws ApiException {
        String xAmzTarget = null;
        ListInstancesRequest listInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListInstancesResponse response = api.listInstances(xAmzTarget, listInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists summary information about the namespaces that were created by the current Amazon Web Services account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNamespacesTest() throws ApiException {
        String xAmzTarget = null;
        ListNamespacesRequest listNamespacesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListNamespacesResponse response = api.listNamespaces(xAmzTarget, listNamespacesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists operations that match the criteria that you specify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOperationsTest() throws ApiException {
        String xAmzTarget = null;
        ListOperationsRequest listOperationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListOperationsResponse response = api.listOperations(xAmzTarget, listOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists summary information for all the services that are associated with one or more specified namespaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServicesTest() throws ApiException {
        String xAmzTarget = null;
        ListServicesRequest listServicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListServicesResponse response = api.listServices(xAmzTarget, listServicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists tags for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates one or more records and, optionally, creates a health check based on the settings in a specified service. When you submit a &lt;code&gt;RegisterInstance&lt;/code&gt; request, the following occurs:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For each DNS record that you define in the service that&#39;s specified by &lt;code&gt;ServiceId&lt;/code&gt;, a record is created or updated in the hosted zone that&#39;s associated with the corresponding namespace.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the service includes &lt;code&gt;HealthCheckConfig&lt;/code&gt;, a health check is created based on the settings in the health check configuration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The health check, if any, is associated with each of the new or updated records.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt;One &lt;code&gt;RegisterInstance&lt;/code&gt; request must complete before you can submit another request and specify the same service ID and instance ID.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloud-map/latest/api/API_CreateService.html\&quot;&gt;CreateService&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When Cloud Map receives a DNS query for the specified DNS name, it returns the applicable value:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If the health check is healthy&lt;/b&gt;: returns all the records&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If the health check is unhealthy&lt;/b&gt;: returns the applicable value for the last healthy instance&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;If you didn&#39;t specify a health check configuration&lt;/b&gt;: returns all the records&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For the current quota on the number of instances that you can register using the same namespace and using the same service, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloud-map/latest/dg/cloud-map-limits.html\&quot;&gt;Cloud Map quotas&lt;/a&gt; in the &lt;i&gt;Cloud Map Developer Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerInstanceTest() throws ApiException {
        String xAmzTarget = null;
        RegisterInstanceRequest registerInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RegisterInstanceResponse response = api.registerInstance(xAmzTarget, registerInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds one or more tags to the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an HTTP namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHttpNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateHttpNamespaceRequest updateHttpNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateHttpNamespaceResponse response = api.updateHttpNamespace(xAmzTarget, updateHttpNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Submits a request to change the health status of a custom health check to healthy or unhealthy.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;UpdateInstanceCustomHealthStatus&lt;/code&gt; to change the status only for custom health checks, which you define using &lt;code&gt;HealthCheckCustomConfig&lt;/code&gt; when you create a service. You can&#39;t use it to change the status for RouteÂ 53 health checks, which you define using &lt;code&gt;HealthCheckConfig&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloud-map/latest/api/API_HealthCheckCustomConfig.html\&quot;&gt;HealthCheckCustomConfig&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstanceCustomHealthStatusTest() throws ApiException {
        String xAmzTarget = null;
        UpdateInstanceCustomHealthStatusRequest updateInstanceCustomHealthStatusRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateInstanceCustomHealthStatus(xAmzTarget, updateInstanceCustomHealthStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a private DNS namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrivateDnsNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePrivateDnsNamespaceRequest updatePrivateDnsNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePrivateDnsNamespaceResponse response = api.updatePrivateDnsNamespace(xAmzTarget, updatePrivateDnsNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a public DNS namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePublicDnsNamespaceTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePublicDnsNamespaceRequest updatePublicDnsNamespaceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePublicDnsNamespaceResponse response = api.updatePublicDnsNamespace(xAmzTarget, updatePublicDnsNamespaceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Submits a request to perform the following operations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Update the TTL setting for existing &lt;code&gt;DnsRecords&lt;/code&gt; configurations&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add, update, or delete &lt;code&gt;HealthCheckConfig&lt;/code&gt; for a specified service&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can&#39;t add, update, or delete a &lt;code&gt;HealthCheckCustomConfig&lt;/code&gt; configuration.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For public and private DNS namespaces, note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If you omit any existing &lt;code&gt;DnsRecords&lt;/code&gt; or &lt;code&gt;HealthCheckConfig&lt;/code&gt; configurations from an &lt;code&gt;UpdateService&lt;/code&gt; request, the configurations are deleted from the service.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you omit an existing &lt;code&gt;HealthCheckCustomConfig&lt;/code&gt; configuration from an &lt;code&gt;UpdateService&lt;/code&gt; request, the configuration isn&#39;t deleted from the service.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When you update settings for a service, Cloud Map also updates the corresponding settings in all the records and health checks that were created by using the specified service.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateServiceRequest updateServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateServiceResponse response = api.updateService(xAmzTarget, updateServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
