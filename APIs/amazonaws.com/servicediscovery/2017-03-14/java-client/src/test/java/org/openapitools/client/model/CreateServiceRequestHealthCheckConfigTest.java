/*
 * AWS Cloud Map
 * <fullname>Cloud Map</fullname> <p>With Cloud Map, you can configure public DNS, private DNS, or HTTP namespaces that your microservice applications run in. When an instance becomes available, you can call the Cloud Map API to register the instance with Cloud Map. For public or private DNS namespaces, Cloud Map automatically creates DNS records and an optional health check. Clients that submit public or private DNS queries, or HTTP requests, for the service receive an answer that contains up to eight healthy records. </p>
 *
 * The version of the OpenAPI document: 2017-03-14
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HealthCheckType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CreateServiceRequestHealthCheckConfig
 */
public class CreateServiceRequestHealthCheckConfigTest {
    private final CreateServiceRequestHealthCheckConfig model = new CreateServiceRequestHealthCheckConfig();

    /**
     * Model tests for CreateServiceRequestHealthCheckConfig
     */
    @Test
    public void testCreateServiceRequestHealthCheckConfig() {
        // TODO: test CreateServiceRequestHealthCheckConfig
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'resourcePath'
     */
    @Test
    public void resourcePathTest() {
        // TODO: test resourcePath
    }

    /**
     * Test the property 'failureThreshold'
     */
    @Test
    public void failureThresholdTest() {
        // TODO: test failureThreshold
    }

}
