# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgentFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_healths: List=None, agent_health_codes: List=None):
        """AgentFilter - a model defined in OpenAPI

        :param agent_healths: The agent_healths of this AgentFilter.
        :param agent_health_codes: The agent_health_codes of this AgentFilter.
        """
        self.openapi_types = {
            'agent_healths': List,
            'agent_health_codes': List
        }

        self.attribute_map = {
            'agent_healths': 'agentHealths',
            'agent_health_codes': 'agentHealthCodes'
        }

        self._agent_healths = agent_healths
        self._agent_health_codes = agent_health_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentFilter of this AgentFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_healths(self):
        """Gets the agent_healths of this AgentFilter.


        :return: The agent_healths of this AgentFilter.
        :rtype: List
        """
        return self._agent_healths

    @agent_healths.setter
    def agent_healths(self, agent_healths):
        """Sets the agent_healths of this AgentFilter.


        :param agent_healths: The agent_healths of this AgentFilter.
        :type agent_healths: List
        """
        if agent_healths is None:
            raise ValueError("Invalid value for `agent_healths`, must not be `None`")

        self._agent_healths = agent_healths

    @property
    def agent_health_codes(self):
        """Gets the agent_health_codes of this AgentFilter.


        :return: The agent_health_codes of this AgentFilter.
        :rtype: List
        """
        return self._agent_health_codes

    @agent_health_codes.setter
    def agent_health_codes(self, agent_health_codes):
        """Sets the agent_health_codes of this AgentFilter.


        :param agent_health_codes: The agent_health_codes of this AgentFilter.
        :type agent_health_codes: List
        """
        if agent_health_codes is None:
            raise ValueError("Invalid value for `agent_health_codes`, must not be `None`")

        self._agent_health_codes = agent_health_codes
