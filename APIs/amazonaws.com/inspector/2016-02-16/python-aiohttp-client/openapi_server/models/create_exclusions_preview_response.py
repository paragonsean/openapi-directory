# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateExclusionsPreviewResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preview_token: str=None):
        """CreateExclusionsPreviewResponse - a model defined in OpenAPI

        :param preview_token: The preview_token of this CreateExclusionsPreviewResponse.
        """
        self.openapi_types = {
            'preview_token': str
        }

        self.attribute_map = {
            'preview_token': 'previewToken'
        }

        self._preview_token = preview_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateExclusionsPreviewResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateExclusionsPreviewResponse of this CreateExclusionsPreviewResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preview_token(self):
        """Gets the preview_token of this CreateExclusionsPreviewResponse.


        :return: The preview_token of this CreateExclusionsPreviewResponse.
        :rtype: str
        """
        return self._preview_token

    @preview_token.setter
    def preview_token(self, preview_token):
        """Sets the preview_token of this CreateExclusionsPreviewResponse.


        :param preview_token: The preview_token of this CreateExclusionsPreviewResponse.
        :type preview_token: str
        """
        if preview_token is None:
            raise ValueError("Invalid value for `preview_token`, must not be `None`")

        self._preview_token = preview_token
