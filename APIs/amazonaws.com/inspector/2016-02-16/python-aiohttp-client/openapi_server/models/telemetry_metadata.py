# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TelemetryMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_type: str=None, count: int=None, data_size: int=None):
        """TelemetryMetadata - a model defined in OpenAPI

        :param message_type: The message_type of this TelemetryMetadata.
        :param count: The count of this TelemetryMetadata.
        :param data_size: The data_size of this TelemetryMetadata.
        """
        self.openapi_types = {
            'message_type': str,
            'count': int,
            'data_size': int
        }

        self.attribute_map = {
            'message_type': 'messageType',
            'count': 'count',
            'data_size': 'dataSize'
        }

        self._message_type = message_type
        self._count = count
        self._data_size = data_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TelemetryMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TelemetryMetadata of this TelemetryMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_type(self):
        """Gets the message_type of this TelemetryMetadata.


        :return: The message_type of this TelemetryMetadata.
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this TelemetryMetadata.


        :param message_type: The message_type of this TelemetryMetadata.
        :type message_type: str
        """
        if message_type is None:
            raise ValueError("Invalid value for `message_type`, must not be `None`")

        self._message_type = message_type

    @property
    def count(self):
        """Gets the count of this TelemetryMetadata.


        :return: The count of this TelemetryMetadata.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TelemetryMetadata.


        :param count: The count of this TelemetryMetadata.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def data_size(self):
        """Gets the data_size of this TelemetryMetadata.


        :return: The data_size of this TelemetryMetadata.
        :rtype: int
        """
        return self._data_size

    @data_size.setter
    def data_size(self, data_size):
        """Sets the data_size of this TelemetryMetadata.


        :param data_size: The data_size of this TelemetryMetadata.
        :type data_size: int
        """

        self._data_size = data_size
