# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssessmentTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None, resource_group_arn: str=None, created_at: datetime=None, updated_at: datetime=None):
        """AssessmentTarget - a model defined in OpenAPI

        :param arn: The arn of this AssessmentTarget.
        :param name: The name of this AssessmentTarget.
        :param resource_group_arn: The resource_group_arn of this AssessmentTarget.
        :param created_at: The created_at of this AssessmentTarget.
        :param updated_at: The updated_at of this AssessmentTarget.
        """
        self.openapi_types = {
            'arn': str,
            'name': str,
            'resource_group_arn': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'arn': 'arn',
            'name': 'name',
            'resource_group_arn': 'resourceGroupArn',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._arn = arn
        self._name = name
        self._resource_group_arn = resource_group_arn
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentTarget of this AssessmentTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this AssessmentTarget.


        :return: The arn of this AssessmentTarget.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AssessmentTarget.


        :param arn: The arn of this AssessmentTarget.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this AssessmentTarget.


        :return: The name of this AssessmentTarget.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssessmentTarget.


        :param name: The name of this AssessmentTarget.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def resource_group_arn(self):
        """Gets the resource_group_arn of this AssessmentTarget.


        :return: The resource_group_arn of this AssessmentTarget.
        :rtype: str
        """
        return self._resource_group_arn

    @resource_group_arn.setter
    def resource_group_arn(self, resource_group_arn):
        """Sets the resource_group_arn of this AssessmentTarget.


        :param resource_group_arn: The resource_group_arn of this AssessmentTarget.
        :type resource_group_arn: str
        """

        self._resource_group_arn = resource_group_arn

    @property
    def created_at(self):
        """Gets the created_at of this AssessmentTarget.


        :return: The created_at of this AssessmentTarget.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AssessmentTarget.


        :param created_at: The created_at of this AssessmentTarget.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AssessmentTarget.


        :return: The updated_at of this AssessmentTarget.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AssessmentTarget.


        :param updated_at: The updated_at of this AssessmentTarget.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
