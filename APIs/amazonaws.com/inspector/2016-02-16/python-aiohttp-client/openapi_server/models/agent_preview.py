# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_health import AgentHealth
from openapi_server import util


class AgentPreview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hostname: str=None, agent_id: str=None, auto_scaling_group: str=None, agent_health: AgentHealth=None, agent_version: str=None, operating_system: str=None, kernel_version: str=None, ipv4_address: str=None):
        """AgentPreview - a model defined in OpenAPI

        :param hostname: The hostname of this AgentPreview.
        :param agent_id: The agent_id of this AgentPreview.
        :param auto_scaling_group: The auto_scaling_group of this AgentPreview.
        :param agent_health: The agent_health of this AgentPreview.
        :param agent_version: The agent_version of this AgentPreview.
        :param operating_system: The operating_system of this AgentPreview.
        :param kernel_version: The kernel_version of this AgentPreview.
        :param ipv4_address: The ipv4_address of this AgentPreview.
        """
        self.openapi_types = {
            'hostname': str,
            'agent_id': str,
            'auto_scaling_group': str,
            'agent_health': AgentHealth,
            'agent_version': str,
            'operating_system': str,
            'kernel_version': str,
            'ipv4_address': str
        }

        self.attribute_map = {
            'hostname': 'hostname',
            'agent_id': 'agentId',
            'auto_scaling_group': 'autoScalingGroup',
            'agent_health': 'agentHealth',
            'agent_version': 'agentVersion',
            'operating_system': 'operatingSystem',
            'kernel_version': 'kernelVersion',
            'ipv4_address': 'ipv4Address'
        }

        self._hostname = hostname
        self._agent_id = agent_id
        self._auto_scaling_group = auto_scaling_group
        self._agent_health = agent_health
        self._agent_version = agent_version
        self._operating_system = operating_system
        self._kernel_version = kernel_version
        self._ipv4_address = ipv4_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentPreview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentPreview of this AgentPreview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hostname(self):
        """Gets the hostname of this AgentPreview.


        :return: The hostname of this AgentPreview.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AgentPreview.


        :param hostname: The hostname of this AgentPreview.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def agent_id(self):
        """Gets the agent_id of this AgentPreview.


        :return: The agent_id of this AgentPreview.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this AgentPreview.


        :param agent_id: The agent_id of this AgentPreview.
        :type agent_id: str
        """
        if agent_id is None:
            raise ValueError("Invalid value for `agent_id`, must not be `None`")

        self._agent_id = agent_id

    @property
    def auto_scaling_group(self):
        """Gets the auto_scaling_group of this AgentPreview.


        :return: The auto_scaling_group of this AgentPreview.
        :rtype: str
        """
        return self._auto_scaling_group

    @auto_scaling_group.setter
    def auto_scaling_group(self, auto_scaling_group):
        """Sets the auto_scaling_group of this AgentPreview.


        :param auto_scaling_group: The auto_scaling_group of this AgentPreview.
        :type auto_scaling_group: str
        """

        self._auto_scaling_group = auto_scaling_group

    @property
    def agent_health(self):
        """Gets the agent_health of this AgentPreview.


        :return: The agent_health of this AgentPreview.
        :rtype: AgentHealth
        """
        return self._agent_health

    @agent_health.setter
    def agent_health(self, agent_health):
        """Sets the agent_health of this AgentPreview.


        :param agent_health: The agent_health of this AgentPreview.
        :type agent_health: AgentHealth
        """

        self._agent_health = agent_health

    @property
    def agent_version(self):
        """Gets the agent_version of this AgentPreview.


        :return: The agent_version of this AgentPreview.
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this AgentPreview.


        :param agent_version: The agent_version of this AgentPreview.
        :type agent_version: str
        """

        self._agent_version = agent_version

    @property
    def operating_system(self):
        """Gets the operating_system of this AgentPreview.


        :return: The operating_system of this AgentPreview.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system):
        """Sets the operating_system of this AgentPreview.


        :param operating_system: The operating_system of this AgentPreview.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def kernel_version(self):
        """Gets the kernel_version of this AgentPreview.


        :return: The kernel_version of this AgentPreview.
        :rtype: str
        """
        return self._kernel_version

    @kernel_version.setter
    def kernel_version(self, kernel_version):
        """Sets the kernel_version of this AgentPreview.


        :param kernel_version: The kernel_version of this AgentPreview.
        :type kernel_version: str
        """

        self._kernel_version = kernel_version

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this AgentPreview.


        :return: The ipv4_address of this AgentPreview.
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this AgentPreview.


        :param ipv4_address: The ipv4_address of this AgentPreview.
        :type ipv4_address: str
        """

        self._ipv4_address = ipv4_address
