# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_interface_id: str=None, subnet_id: str=None, vpc_id: str=None, private_dns_name: str=None, private_ip_address: str=None, private_ip_addresses: List=None, public_dns_name: str=None, public_ip: str=None, ipv6_addresses: List=None, security_groups: List=None):
        """NetworkInterface - a model defined in OpenAPI

        :param network_interface_id: The network_interface_id of this NetworkInterface.
        :param subnet_id: The subnet_id of this NetworkInterface.
        :param vpc_id: The vpc_id of this NetworkInterface.
        :param private_dns_name: The private_dns_name of this NetworkInterface.
        :param private_ip_address: The private_ip_address of this NetworkInterface.
        :param private_ip_addresses: The private_ip_addresses of this NetworkInterface.
        :param public_dns_name: The public_dns_name of this NetworkInterface.
        :param public_ip: The public_ip of this NetworkInterface.
        :param ipv6_addresses: The ipv6_addresses of this NetworkInterface.
        :param security_groups: The security_groups of this NetworkInterface.
        """
        self.openapi_types = {
            'network_interface_id': str,
            'subnet_id': str,
            'vpc_id': str,
            'private_dns_name': str,
            'private_ip_address': str,
            'private_ip_addresses': List,
            'public_dns_name': str,
            'public_ip': str,
            'ipv6_addresses': List,
            'security_groups': List
        }

        self.attribute_map = {
            'network_interface_id': 'networkInterfaceId',
            'subnet_id': 'subnetId',
            'vpc_id': 'vpcId',
            'private_dns_name': 'privateDnsName',
            'private_ip_address': 'privateIpAddress',
            'private_ip_addresses': 'privateIpAddresses',
            'public_dns_name': 'publicDnsName',
            'public_ip': 'publicIp',
            'ipv6_addresses': 'ipv6Addresses',
            'security_groups': 'securityGroups'
        }

        self._network_interface_id = network_interface_id
        self._subnet_id = subnet_id
        self._vpc_id = vpc_id
        self._private_dns_name = private_dns_name
        self._private_ip_address = private_ip_address
        self._private_ip_addresses = private_ip_addresses
        self._public_dns_name = public_dns_name
        self._public_ip = public_ip
        self._ipv6_addresses = ipv6_addresses
        self._security_groups = security_groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkInterface of this NetworkInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_interface_id(self):
        """Gets the network_interface_id of this NetworkInterface.


        :return: The network_interface_id of this NetworkInterface.
        :rtype: str
        """
        return self._network_interface_id

    @network_interface_id.setter
    def network_interface_id(self, network_interface_id):
        """Sets the network_interface_id of this NetworkInterface.


        :param network_interface_id: The network_interface_id of this NetworkInterface.
        :type network_interface_id: str
        """

        self._network_interface_id = network_interface_id

    @property
    def subnet_id(self):
        """Gets the subnet_id of this NetworkInterface.


        :return: The subnet_id of this NetworkInterface.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this NetworkInterface.


        :param subnet_id: The subnet_id of this NetworkInterface.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id

    @property
    def vpc_id(self):
        """Gets the vpc_id of this NetworkInterface.


        :return: The vpc_id of this NetworkInterface.
        :rtype: str
        """
        return self._vpc_id

    @vpc_id.setter
    def vpc_id(self, vpc_id):
        """Sets the vpc_id of this NetworkInterface.


        :param vpc_id: The vpc_id of this NetworkInterface.
        :type vpc_id: str
        """

        self._vpc_id = vpc_id

    @property
    def private_dns_name(self):
        """Gets the private_dns_name of this NetworkInterface.


        :return: The private_dns_name of this NetworkInterface.
        :rtype: str
        """
        return self._private_dns_name

    @private_dns_name.setter
    def private_dns_name(self, private_dns_name):
        """Sets the private_dns_name of this NetworkInterface.


        :param private_dns_name: The private_dns_name of this NetworkInterface.
        :type private_dns_name: str
        """

        self._private_dns_name = private_dns_name

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this NetworkInterface.


        :return: The private_ip_address of this NetworkInterface.
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this NetworkInterface.


        :param private_ip_address: The private_ip_address of this NetworkInterface.
        :type private_ip_address: str
        """

        self._private_ip_address = private_ip_address

    @property
    def private_ip_addresses(self):
        """Gets the private_ip_addresses of this NetworkInterface.


        :return: The private_ip_addresses of this NetworkInterface.
        :rtype: List
        """
        return self._private_ip_addresses

    @private_ip_addresses.setter
    def private_ip_addresses(self, private_ip_addresses):
        """Sets the private_ip_addresses of this NetworkInterface.


        :param private_ip_addresses: The private_ip_addresses of this NetworkInterface.
        :type private_ip_addresses: List
        """

        self._private_ip_addresses = private_ip_addresses

    @property
    def public_dns_name(self):
        """Gets the public_dns_name of this NetworkInterface.


        :return: The public_dns_name of this NetworkInterface.
        :rtype: str
        """
        return self._public_dns_name

    @public_dns_name.setter
    def public_dns_name(self, public_dns_name):
        """Sets the public_dns_name of this NetworkInterface.


        :param public_dns_name: The public_dns_name of this NetworkInterface.
        :type public_dns_name: str
        """

        self._public_dns_name = public_dns_name

    @property
    def public_ip(self):
        """Gets the public_ip of this NetworkInterface.


        :return: The public_ip of this NetworkInterface.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this NetworkInterface.


        :param public_ip: The public_ip of this NetworkInterface.
        :type public_ip: str
        """

        self._public_ip = public_ip

    @property
    def ipv6_addresses(self):
        """Gets the ipv6_addresses of this NetworkInterface.


        :return: The ipv6_addresses of this NetworkInterface.
        :rtype: List
        """
        return self._ipv6_addresses

    @ipv6_addresses.setter
    def ipv6_addresses(self, ipv6_addresses):
        """Sets the ipv6_addresses of this NetworkInterface.


        :param ipv6_addresses: The ipv6_addresses of this NetworkInterface.
        :type ipv6_addresses: List
        """

        self._ipv6_addresses = ipv6_addresses

    @property
    def security_groups(self):
        """Gets the security_groups of this NetworkInterface.


        :return: The security_groups of this NetworkInterface.
        :rtype: List
        """
        return self._security_groups

    @security_groups.setter
    def security_groups(self, security_groups):
        """Sets the security_groups of this NetworkInterface.


        :param security_groups: The security_groups of this NetworkInterface.
        :type security_groups: List
        """

        self._security_groups = security_groups
