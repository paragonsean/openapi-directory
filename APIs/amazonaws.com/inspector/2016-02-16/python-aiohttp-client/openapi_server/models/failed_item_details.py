# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failed_item_error_code import FailedItemErrorCode
from openapi_server import util


class FailedItemDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_code: FailedItemErrorCode=None, retryable: bool=None):
        """FailedItemDetails - a model defined in OpenAPI

        :param failure_code: The failure_code of this FailedItemDetails.
        :param retryable: The retryable of this FailedItemDetails.
        """
        self.openapi_types = {
            'failure_code': FailedItemErrorCode,
            'retryable': bool
        }

        self.attribute_map = {
            'failure_code': 'failureCode',
            'retryable': 'retryable'
        }

        self._failure_code = failure_code
        self._retryable = retryable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailedItemDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailedItemDetails of this FailedItemDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_code(self):
        """Gets the failure_code of this FailedItemDetails.


        :return: The failure_code of this FailedItemDetails.
        :rtype: FailedItemErrorCode
        """
        return self._failure_code

    @failure_code.setter
    def failure_code(self, failure_code):
        """Sets the failure_code of this FailedItemDetails.


        :param failure_code: The failure_code of this FailedItemDetails.
        :type failure_code: FailedItemErrorCode
        """
        if failure_code is None:
            raise ValueError("Invalid value for `failure_code`, must not be `None`")

        self._failure_code = failure_code

    @property
    def retryable(self):
        """Gets the retryable of this FailedItemDetails.


        :return: The retryable of this FailedItemDetails.
        :rtype: bool
        """
        return self._retryable

    @retryable.setter
    def retryable(self, retryable):
        """Sets the retryable of this FailedItemDetails.


        :param retryable: The retryable of this FailedItemDetails.
        :type retryable: bool
        """
        if retryable is None:
            raise ValueError("Invalid value for `retryable`, must not be `None`")

        self._retryable = retryable
