# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeCrossAccountAccessRoleResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, valid: bool=None, registered_at: datetime=None):
        """DescribeCrossAccountAccessRoleResponse - a model defined in OpenAPI

        :param role_arn: The role_arn of this DescribeCrossAccountAccessRoleResponse.
        :param valid: The valid of this DescribeCrossAccountAccessRoleResponse.
        :param registered_at: The registered_at of this DescribeCrossAccountAccessRoleResponse.
        """
        self.openapi_types = {
            'role_arn': str,
            'valid': bool,
            'registered_at': datetime
        }

        self.attribute_map = {
            'role_arn': 'roleArn',
            'valid': 'valid',
            'registered_at': 'registeredAt'
        }

        self._role_arn = role_arn
        self._valid = valid
        self._registered_at = registered_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeCrossAccountAccessRoleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeCrossAccountAccessRoleResponse of this DescribeCrossAccountAccessRoleResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this DescribeCrossAccountAccessRoleResponse.


        :return: The role_arn of this DescribeCrossAccountAccessRoleResponse.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this DescribeCrossAccountAccessRoleResponse.


        :param role_arn: The role_arn of this DescribeCrossAccountAccessRoleResponse.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def valid(self):
        """Gets the valid of this DescribeCrossAccountAccessRoleResponse.


        :return: The valid of this DescribeCrossAccountAccessRoleResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this DescribeCrossAccountAccessRoleResponse.


        :param valid: The valid of this DescribeCrossAccountAccessRoleResponse.
        :type valid: bool
        """
        if valid is None:
            raise ValueError("Invalid value for `valid`, must not be `None`")

        self._valid = valid

    @property
    def registered_at(self):
        """Gets the registered_at of this DescribeCrossAccountAccessRoleResponse.


        :return: The registered_at of this DescribeCrossAccountAccessRoleResponse.
        :rtype: datetime
        """
        return self._registered_at

    @registered_at.setter
    def registered_at(self, registered_at):
        """Sets the registered_at of this DescribeCrossAccountAccessRoleResponse.


        :param registered_at: The registered_at of this DescribeCrossAccountAccessRoleResponse.
        :type registered_at: datetime
        """
        if registered_at is None:
            raise ValueError("Invalid value for `registered_at`, must not be `None`")

        self._registered_at = registered_at
