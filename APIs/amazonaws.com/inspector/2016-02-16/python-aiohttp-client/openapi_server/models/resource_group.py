# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, tags: List=None, created_at: datetime=None):
        """ResourceGroup - a model defined in OpenAPI

        :param arn: The arn of this ResourceGroup.
        :param tags: The tags of this ResourceGroup.
        :param created_at: The created_at of this ResourceGroup.
        """
        self.openapi_types = {
            'arn': str,
            'tags': List,
            'created_at': datetime
        }

        self.attribute_map = {
            'arn': 'arn',
            'tags': 'tags',
            'created_at': 'createdAt'
        }

        self._arn = arn
        self._tags = tags
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceGroup of this ResourceGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this ResourceGroup.


        :return: The arn of this ResourceGroup.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ResourceGroup.


        :param arn: The arn of this ResourceGroup.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def tags(self):
        """Gets the tags of this ResourceGroup.


        :return: The tags of this ResourceGroup.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ResourceGroup.


        :param tags: The tags of this ResourceGroup.
        :type tags: List
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags

    @property
    def created_at(self):
        """Gets the created_at of this ResourceGroup.


        :return: The created_at of this ResourceGroup.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ResourceGroup.


        :param created_at: The created_at of this ResourceGroup.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at
