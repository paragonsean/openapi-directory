# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessment_run_state import AssessmentRunState
from openapi_server import util


class AssessmentRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None, assessment_template_arn: str=None, state: AssessmentRunState=None, duration_in_seconds: int=None, rules_package_arns: List=None, user_attributes_for_findings: List=None, created_at: datetime=None, started_at: datetime=None, completed_at: datetime=None, state_changed_at: datetime=None, data_collected: bool=None, state_changes: List=None, notifications: List=None, finding_counts: Dict=None):
        """AssessmentRun - a model defined in OpenAPI

        :param arn: The arn of this AssessmentRun.
        :param name: The name of this AssessmentRun.
        :param assessment_template_arn: The assessment_template_arn of this AssessmentRun.
        :param state: The state of this AssessmentRun.
        :param duration_in_seconds: The duration_in_seconds of this AssessmentRun.
        :param rules_package_arns: The rules_package_arns of this AssessmentRun.
        :param user_attributes_for_findings: The user_attributes_for_findings of this AssessmentRun.
        :param created_at: The created_at of this AssessmentRun.
        :param started_at: The started_at of this AssessmentRun.
        :param completed_at: The completed_at of this AssessmentRun.
        :param state_changed_at: The state_changed_at of this AssessmentRun.
        :param data_collected: The data_collected of this AssessmentRun.
        :param state_changes: The state_changes of this AssessmentRun.
        :param notifications: The notifications of this AssessmentRun.
        :param finding_counts: The finding_counts of this AssessmentRun.
        """
        self.openapi_types = {
            'arn': str,
            'name': str,
            'assessment_template_arn': str,
            'state': AssessmentRunState,
            'duration_in_seconds': int,
            'rules_package_arns': List,
            'user_attributes_for_findings': List,
            'created_at': datetime,
            'started_at': datetime,
            'completed_at': datetime,
            'state_changed_at': datetime,
            'data_collected': bool,
            'state_changes': List,
            'notifications': List,
            'finding_counts': Dict
        }

        self.attribute_map = {
            'arn': 'arn',
            'name': 'name',
            'assessment_template_arn': 'assessmentTemplateArn',
            'state': 'state',
            'duration_in_seconds': 'durationInSeconds',
            'rules_package_arns': 'rulesPackageArns',
            'user_attributes_for_findings': 'userAttributesForFindings',
            'created_at': 'createdAt',
            'started_at': 'startedAt',
            'completed_at': 'completedAt',
            'state_changed_at': 'stateChangedAt',
            'data_collected': 'dataCollected',
            'state_changes': 'stateChanges',
            'notifications': 'notifications',
            'finding_counts': 'findingCounts'
        }

        self._arn = arn
        self._name = name
        self._assessment_template_arn = assessment_template_arn
        self._state = state
        self._duration_in_seconds = duration_in_seconds
        self._rules_package_arns = rules_package_arns
        self._user_attributes_for_findings = user_attributes_for_findings
        self._created_at = created_at
        self._started_at = started_at
        self._completed_at = completed_at
        self._state_changed_at = state_changed_at
        self._data_collected = data_collected
        self._state_changes = state_changes
        self._notifications = notifications
        self._finding_counts = finding_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentRun of this AssessmentRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this AssessmentRun.


        :return: The arn of this AssessmentRun.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AssessmentRun.


        :param arn: The arn of this AssessmentRun.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this AssessmentRun.


        :return: The name of this AssessmentRun.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssessmentRun.


        :param name: The name of this AssessmentRun.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def assessment_template_arn(self):
        """Gets the assessment_template_arn of this AssessmentRun.


        :return: The assessment_template_arn of this AssessmentRun.
        :rtype: str
        """
        return self._assessment_template_arn

    @assessment_template_arn.setter
    def assessment_template_arn(self, assessment_template_arn):
        """Sets the assessment_template_arn of this AssessmentRun.


        :param assessment_template_arn: The assessment_template_arn of this AssessmentRun.
        :type assessment_template_arn: str
        """
        if assessment_template_arn is None:
            raise ValueError("Invalid value for `assessment_template_arn`, must not be `None`")

        self._assessment_template_arn = assessment_template_arn

    @property
    def state(self):
        """Gets the state of this AssessmentRun.


        :return: The state of this AssessmentRun.
        :rtype: AssessmentRunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AssessmentRun.


        :param state: The state of this AssessmentRun.
        :type state: AssessmentRunState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def duration_in_seconds(self):
        """Gets the duration_in_seconds of this AssessmentRun.


        :return: The duration_in_seconds of this AssessmentRun.
        :rtype: int
        """
        return self._duration_in_seconds

    @duration_in_seconds.setter
    def duration_in_seconds(self, duration_in_seconds):
        """Sets the duration_in_seconds of this AssessmentRun.


        :param duration_in_seconds: The duration_in_seconds of this AssessmentRun.
        :type duration_in_seconds: int
        """
        if duration_in_seconds is None:
            raise ValueError("Invalid value for `duration_in_seconds`, must not be `None`")

        self._duration_in_seconds = duration_in_seconds

    @property
    def rules_package_arns(self):
        """Gets the rules_package_arns of this AssessmentRun.


        :return: The rules_package_arns of this AssessmentRun.
        :rtype: List
        """
        return self._rules_package_arns

    @rules_package_arns.setter
    def rules_package_arns(self, rules_package_arns):
        """Sets the rules_package_arns of this AssessmentRun.


        :param rules_package_arns: The rules_package_arns of this AssessmentRun.
        :type rules_package_arns: List
        """
        if rules_package_arns is None:
            raise ValueError("Invalid value for `rules_package_arns`, must not be `None`")

        self._rules_package_arns = rules_package_arns

    @property
    def user_attributes_for_findings(self):
        """Gets the user_attributes_for_findings of this AssessmentRun.


        :return: The user_attributes_for_findings of this AssessmentRun.
        :rtype: List
        """
        return self._user_attributes_for_findings

    @user_attributes_for_findings.setter
    def user_attributes_for_findings(self, user_attributes_for_findings):
        """Sets the user_attributes_for_findings of this AssessmentRun.


        :param user_attributes_for_findings: The user_attributes_for_findings of this AssessmentRun.
        :type user_attributes_for_findings: List
        """
        if user_attributes_for_findings is None:
            raise ValueError("Invalid value for `user_attributes_for_findings`, must not be `None`")

        self._user_attributes_for_findings = user_attributes_for_findings

    @property
    def created_at(self):
        """Gets the created_at of this AssessmentRun.


        :return: The created_at of this AssessmentRun.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AssessmentRun.


        :param created_at: The created_at of this AssessmentRun.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def started_at(self):
        """Gets the started_at of this AssessmentRun.


        :return: The started_at of this AssessmentRun.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this AssessmentRun.


        :param started_at: The started_at of this AssessmentRun.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this AssessmentRun.


        :return: The completed_at of this AssessmentRun.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this AssessmentRun.


        :param completed_at: The completed_at of this AssessmentRun.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def state_changed_at(self):
        """Gets the state_changed_at of this AssessmentRun.


        :return: The state_changed_at of this AssessmentRun.
        :rtype: datetime
        """
        return self._state_changed_at

    @state_changed_at.setter
    def state_changed_at(self, state_changed_at):
        """Sets the state_changed_at of this AssessmentRun.


        :param state_changed_at: The state_changed_at of this AssessmentRun.
        :type state_changed_at: datetime
        """
        if state_changed_at is None:
            raise ValueError("Invalid value for `state_changed_at`, must not be `None`")

        self._state_changed_at = state_changed_at

    @property
    def data_collected(self):
        """Gets the data_collected of this AssessmentRun.


        :return: The data_collected of this AssessmentRun.
        :rtype: bool
        """
        return self._data_collected

    @data_collected.setter
    def data_collected(self, data_collected):
        """Sets the data_collected of this AssessmentRun.


        :param data_collected: The data_collected of this AssessmentRun.
        :type data_collected: bool
        """
        if data_collected is None:
            raise ValueError("Invalid value for `data_collected`, must not be `None`")

        self._data_collected = data_collected

    @property
    def state_changes(self):
        """Gets the state_changes of this AssessmentRun.


        :return: The state_changes of this AssessmentRun.
        :rtype: List
        """
        return self._state_changes

    @state_changes.setter
    def state_changes(self, state_changes):
        """Sets the state_changes of this AssessmentRun.


        :param state_changes: The state_changes of this AssessmentRun.
        :type state_changes: List
        """
        if state_changes is None:
            raise ValueError("Invalid value for `state_changes`, must not be `None`")

        self._state_changes = state_changes

    @property
    def notifications(self):
        """Gets the notifications of this AssessmentRun.


        :return: The notifications of this AssessmentRun.
        :rtype: List
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this AssessmentRun.


        :param notifications: The notifications of this AssessmentRun.
        :type notifications: List
        """
        if notifications is None:
            raise ValueError("Invalid value for `notifications`, must not be `None`")

        self._notifications = notifications

    @property
    def finding_counts(self):
        """Gets the finding_counts of this AssessmentRun.


        :return: The finding_counts of this AssessmentRun.
        :rtype: Dict
        """
        return self._finding_counts

    @finding_counts.setter
    def finding_counts(self, finding_counts):
        """Sets the finding_counts of this AssessmentRun.


        :param finding_counts: The finding_counts of this AssessmentRun.
        :type finding_counts: Dict
        """
        if finding_counts is None:
            raise ValueError("Invalid value for `finding_counts`, must not be `None`")

        self._finding_counts = finding_counts
