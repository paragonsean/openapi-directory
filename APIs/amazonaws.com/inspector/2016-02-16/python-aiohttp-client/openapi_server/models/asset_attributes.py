# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schema_version: int=None, agent_id: str=None, auto_scaling_group: str=None, ami_id: str=None, hostname: str=None, ipv4_addresses: List=None, tags: List=None, network_interfaces: List=None):
        """AssetAttributes - a model defined in OpenAPI

        :param schema_version: The schema_version of this AssetAttributes.
        :param agent_id: The agent_id of this AssetAttributes.
        :param auto_scaling_group: The auto_scaling_group of this AssetAttributes.
        :param ami_id: The ami_id of this AssetAttributes.
        :param hostname: The hostname of this AssetAttributes.
        :param ipv4_addresses: The ipv4_addresses of this AssetAttributes.
        :param tags: The tags of this AssetAttributes.
        :param network_interfaces: The network_interfaces of this AssetAttributes.
        """
        self.openapi_types = {
            'schema_version': int,
            'agent_id': str,
            'auto_scaling_group': str,
            'ami_id': str,
            'hostname': str,
            'ipv4_addresses': List,
            'tags': List,
            'network_interfaces': List
        }

        self.attribute_map = {
            'schema_version': 'schemaVersion',
            'agent_id': 'agentId',
            'auto_scaling_group': 'autoScalingGroup',
            'ami_id': 'amiId',
            'hostname': 'hostname',
            'ipv4_addresses': 'ipv4Addresses',
            'tags': 'tags',
            'network_interfaces': 'networkInterfaces'
        }

        self._schema_version = schema_version
        self._agent_id = agent_id
        self._auto_scaling_group = auto_scaling_group
        self._ami_id = ami_id
        self._hostname = hostname
        self._ipv4_addresses = ipv4_addresses
        self._tags = tags
        self._network_interfaces = network_interfaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetAttributes of this AssetAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schema_version(self):
        """Gets the schema_version of this AssetAttributes.


        :return: The schema_version of this AssetAttributes.
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this AssetAttributes.


        :param schema_version: The schema_version of this AssetAttributes.
        :type schema_version: int
        """
        if schema_version is None:
            raise ValueError("Invalid value for `schema_version`, must not be `None`")

        self._schema_version = schema_version

    @property
    def agent_id(self):
        """Gets the agent_id of this AssetAttributes.


        :return: The agent_id of this AssetAttributes.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this AssetAttributes.


        :param agent_id: The agent_id of this AssetAttributes.
        :type agent_id: str
        """

        self._agent_id = agent_id

    @property
    def auto_scaling_group(self):
        """Gets the auto_scaling_group of this AssetAttributes.


        :return: The auto_scaling_group of this AssetAttributes.
        :rtype: str
        """
        return self._auto_scaling_group

    @auto_scaling_group.setter
    def auto_scaling_group(self, auto_scaling_group):
        """Sets the auto_scaling_group of this AssetAttributes.


        :param auto_scaling_group: The auto_scaling_group of this AssetAttributes.
        :type auto_scaling_group: str
        """

        self._auto_scaling_group = auto_scaling_group

    @property
    def ami_id(self):
        """Gets the ami_id of this AssetAttributes.


        :return: The ami_id of this AssetAttributes.
        :rtype: str
        """
        return self._ami_id

    @ami_id.setter
    def ami_id(self, ami_id):
        """Sets the ami_id of this AssetAttributes.


        :param ami_id: The ami_id of this AssetAttributes.
        :type ami_id: str
        """

        self._ami_id = ami_id

    @property
    def hostname(self):
        """Gets the hostname of this AssetAttributes.


        :return: The hostname of this AssetAttributes.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this AssetAttributes.


        :param hostname: The hostname of this AssetAttributes.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def ipv4_addresses(self):
        """Gets the ipv4_addresses of this AssetAttributes.


        :return: The ipv4_addresses of this AssetAttributes.
        :rtype: List
        """
        return self._ipv4_addresses

    @ipv4_addresses.setter
    def ipv4_addresses(self, ipv4_addresses):
        """Sets the ipv4_addresses of this AssetAttributes.


        :param ipv4_addresses: The ipv4_addresses of this AssetAttributes.
        :type ipv4_addresses: List
        """

        self._ipv4_addresses = ipv4_addresses

    @property
    def tags(self):
        """Gets the tags of this AssetAttributes.


        :return: The tags of this AssetAttributes.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AssetAttributes.


        :param tags: The tags of this AssetAttributes.
        :type tags: List
        """

        self._tags = tags

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this AssetAttributes.


        :return: The network_interfaces of this AssetAttributes.
        :rtype: List
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this AssetAttributes.


        :param network_interfaces: The network_interfaces of this AssetAttributes.
        :type network_interfaces: List
        """

        self._network_interfaces = network_interfaces
