# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAssessmentTargetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_target_name: str=None, resource_group_arn: str=None):
        """CreateAssessmentTargetRequest - a model defined in OpenAPI

        :param assessment_target_name: The assessment_target_name of this CreateAssessmentTargetRequest.
        :param resource_group_arn: The resource_group_arn of this CreateAssessmentTargetRequest.
        """
        self.openapi_types = {
            'assessment_target_name': str,
            'resource_group_arn': str
        }

        self.attribute_map = {
            'assessment_target_name': 'assessmentTargetName',
            'resource_group_arn': 'resourceGroupArn'
        }

        self._assessment_target_name = assessment_target_name
        self._resource_group_arn = resource_group_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssessmentTargetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAssessmentTargetRequest of this CreateAssessmentTargetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_target_name(self):
        """Gets the assessment_target_name of this CreateAssessmentTargetRequest.


        :return: The assessment_target_name of this CreateAssessmentTargetRequest.
        :rtype: str
        """
        return self._assessment_target_name

    @assessment_target_name.setter
    def assessment_target_name(self, assessment_target_name):
        """Sets the assessment_target_name of this CreateAssessmentTargetRequest.


        :param assessment_target_name: The assessment_target_name of this CreateAssessmentTargetRequest.
        :type assessment_target_name: str
        """
        if assessment_target_name is None:
            raise ValueError("Invalid value for `assessment_target_name`, must not be `None`")

        self._assessment_target_name = assessment_target_name

    @property
    def resource_group_arn(self):
        """Gets the resource_group_arn of this CreateAssessmentTargetRequest.


        :return: The resource_group_arn of this CreateAssessmentTargetRequest.
        :rtype: str
        """
        return self._resource_group_arn

    @resource_group_arn.setter
    def resource_group_arn(self, resource_group_arn):
        """Sets the resource_group_arn of this CreateAssessmentTargetRequest.


        :param resource_group_arn: The resource_group_arn of this CreateAssessmentTargetRequest.
        :type resource_group_arn: str
        """

        self._resource_group_arn = resource_group_arn
