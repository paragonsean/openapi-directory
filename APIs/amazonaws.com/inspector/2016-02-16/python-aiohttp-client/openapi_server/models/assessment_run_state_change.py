# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessment_run_state import AssessmentRunState
from openapi_server import util


class AssessmentRunStateChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state_changed_at: datetime=None, state: AssessmentRunState=None):
        """AssessmentRunStateChange - a model defined in OpenAPI

        :param state_changed_at: The state_changed_at of this AssessmentRunStateChange.
        :param state: The state of this AssessmentRunStateChange.
        """
        self.openapi_types = {
            'state_changed_at': datetime,
            'state': AssessmentRunState
        }

        self.attribute_map = {
            'state_changed_at': 'stateChangedAt',
            'state': 'state'
        }

        self._state_changed_at = state_changed_at
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentRunStateChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentRunStateChange of this AssessmentRunStateChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state_changed_at(self):
        """Gets the state_changed_at of this AssessmentRunStateChange.


        :return: The state_changed_at of this AssessmentRunStateChange.
        :rtype: datetime
        """
        return self._state_changed_at

    @state_changed_at.setter
    def state_changed_at(self, state_changed_at):
        """Sets the state_changed_at of this AssessmentRunStateChange.


        :param state_changed_at: The state_changed_at of this AssessmentRunStateChange.
        :type state_changed_at: datetime
        """
        if state_changed_at is None:
            raise ValueError("Invalid value for `state_changed_at`, must not be `None`")

        self._state_changed_at = state_changed_at

    @property
    def state(self):
        """Gets the state of this AssessmentRunStateChange.


        :return: The state of this AssessmentRunStateChange.
        :rtype: AssessmentRunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AssessmentRunStateChange.


        :param state: The state of this AssessmentRunStateChange.
        :type state: AssessmentRunState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
