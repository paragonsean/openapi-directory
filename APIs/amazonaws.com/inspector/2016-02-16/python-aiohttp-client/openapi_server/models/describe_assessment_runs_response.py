# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeAssessmentRunsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_runs: List=None, failed_items: Dict=None):
        """DescribeAssessmentRunsResponse - a model defined in OpenAPI

        :param assessment_runs: The assessment_runs of this DescribeAssessmentRunsResponse.
        :param failed_items: The failed_items of this DescribeAssessmentRunsResponse.
        """
        self.openapi_types = {
            'assessment_runs': List,
            'failed_items': Dict
        }

        self.attribute_map = {
            'assessment_runs': 'assessmentRuns',
            'failed_items': 'failedItems'
        }

        self._assessment_runs = assessment_runs
        self._failed_items = failed_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAssessmentRunsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAssessmentRunsResponse of this DescribeAssessmentRunsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_runs(self):
        """Gets the assessment_runs of this DescribeAssessmentRunsResponse.


        :return: The assessment_runs of this DescribeAssessmentRunsResponse.
        :rtype: List
        """
        return self._assessment_runs

    @assessment_runs.setter
    def assessment_runs(self, assessment_runs):
        """Sets the assessment_runs of this DescribeAssessmentRunsResponse.


        :param assessment_runs: The assessment_runs of this DescribeAssessmentRunsResponse.
        :type assessment_runs: List
        """
        if assessment_runs is None:
            raise ValueError("Invalid value for `assessment_runs`, must not be `None`")

        self._assessment_runs = assessment_runs

    @property
    def failed_items(self):
        """Gets the failed_items of this DescribeAssessmentRunsResponse.


        :return: The failed_items of this DescribeAssessmentRunsResponse.
        :rtype: Dict
        """
        return self._failed_items

    @failed_items.setter
    def failed_items(self, failed_items):
        """Sets the failed_items of this DescribeAssessmentRunsResponse.


        :param failed_items: The failed_items of this DescribeAssessmentRunsResponse.
        :type failed_items: Dict
        """
        if failed_items is None:
            raise ValueError("Invalid value for `failed_items`, must not be `None`")

        self._failed_items = failed_items
