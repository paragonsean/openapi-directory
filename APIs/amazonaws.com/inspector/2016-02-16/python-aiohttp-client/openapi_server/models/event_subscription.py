# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inspector_event import InspectorEvent
from openapi_server import util


class EventSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: InspectorEvent=None, subscribed_at: datetime=None):
        """EventSubscription - a model defined in OpenAPI

        :param event: The event of this EventSubscription.
        :param subscribed_at: The subscribed_at of this EventSubscription.
        """
        self.openapi_types = {
            'event': InspectorEvent,
            'subscribed_at': datetime
        }

        self.attribute_map = {
            'event': 'event',
            'subscribed_at': 'subscribedAt'
        }

        self._event = event
        self._subscribed_at = subscribed_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSubscription of this EventSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this EventSubscription.


        :return: The event of this EventSubscription.
        :rtype: InspectorEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this EventSubscription.


        :param event: The event of this EventSubscription.
        :type event: InspectorEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def subscribed_at(self):
        """Gets the subscribed_at of this EventSubscription.


        :return: The subscribed_at of this EventSubscription.
        :rtype: datetime
        """
        return self._subscribed_at

    @subscribed_at.setter
    def subscribed_at(self, subscribed_at):
        """Sets the subscribed_at of this EventSubscription.


        :param subscribed_at: The subscribed_at of this EventSubscription.
        :type subscribed_at: datetime
        """
        if subscribed_at is None:
            raise ValueError("Invalid value for `subscribed_at`, must not be `None`")

        self._subscribed_at = subscribed_at
