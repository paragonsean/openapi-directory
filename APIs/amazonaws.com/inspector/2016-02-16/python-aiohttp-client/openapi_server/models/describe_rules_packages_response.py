# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeRulesPackagesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rules_packages: List=None, failed_items: Dict=None):
        """DescribeRulesPackagesResponse - a model defined in OpenAPI

        :param rules_packages: The rules_packages of this DescribeRulesPackagesResponse.
        :param failed_items: The failed_items of this DescribeRulesPackagesResponse.
        """
        self.openapi_types = {
            'rules_packages': List,
            'failed_items': Dict
        }

        self.attribute_map = {
            'rules_packages': 'rulesPackages',
            'failed_items': 'failedItems'
        }

        self._rules_packages = rules_packages
        self._failed_items = failed_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeRulesPackagesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeRulesPackagesResponse of this DescribeRulesPackagesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rules_packages(self):
        """Gets the rules_packages of this DescribeRulesPackagesResponse.


        :return: The rules_packages of this DescribeRulesPackagesResponse.
        :rtype: List
        """
        return self._rules_packages

    @rules_packages.setter
    def rules_packages(self, rules_packages):
        """Sets the rules_packages of this DescribeRulesPackagesResponse.


        :param rules_packages: The rules_packages of this DescribeRulesPackagesResponse.
        :type rules_packages: List
        """
        if rules_packages is None:
            raise ValueError("Invalid value for `rules_packages`, must not be `None`")

        self._rules_packages = rules_packages

    @property
    def failed_items(self):
        """Gets the failed_items of this DescribeRulesPackagesResponse.


        :return: The failed_items of this DescribeRulesPackagesResponse.
        :rtype: Dict
        """
        return self._failed_items

    @failed_items.setter
    def failed_items(self, failed_items):
        """Sets the failed_items of this DescribeRulesPackagesResponse.


        :param failed_items: The failed_items of this DescribeRulesPackagesResponse.
        :type failed_items: Dict
        """
        if failed_items is None:
            raise ValueError("Invalid value for `failed_items`, must not be `None`")

        self._failed_items = failed_items
