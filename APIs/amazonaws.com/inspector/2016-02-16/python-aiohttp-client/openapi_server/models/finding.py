# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_type import AssetType
from openapi_server.models.finding_asset_attributes import FindingAssetAttributes
from openapi_server.models.finding_service_attributes import FindingServiceAttributes
from openapi_server.models.severity import Severity
from openapi_server import util


class Finding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, schema_version: int=None, service: str=None, service_attributes: FindingServiceAttributes=None, asset_type: AssetType=None, asset_attributes: FindingAssetAttributes=None, id: str=None, title: str=None, description: str=None, recommendation: str=None, severity: Severity=None, numeric_severity: float=None, confidence: int=None, indicator_of_compromise: bool=None, attributes: List=None, user_attributes: List=None, created_at: datetime=None, updated_at: datetime=None):
        """Finding - a model defined in OpenAPI

        :param arn: The arn of this Finding.
        :param schema_version: The schema_version of this Finding.
        :param service: The service of this Finding.
        :param service_attributes: The service_attributes of this Finding.
        :param asset_type: The asset_type of this Finding.
        :param asset_attributes: The asset_attributes of this Finding.
        :param id: The id of this Finding.
        :param title: The title of this Finding.
        :param description: The description of this Finding.
        :param recommendation: The recommendation of this Finding.
        :param severity: The severity of this Finding.
        :param numeric_severity: The numeric_severity of this Finding.
        :param confidence: The confidence of this Finding.
        :param indicator_of_compromise: The indicator_of_compromise of this Finding.
        :param attributes: The attributes of this Finding.
        :param user_attributes: The user_attributes of this Finding.
        :param created_at: The created_at of this Finding.
        :param updated_at: The updated_at of this Finding.
        """
        self.openapi_types = {
            'arn': str,
            'schema_version': int,
            'service': str,
            'service_attributes': FindingServiceAttributes,
            'asset_type': AssetType,
            'asset_attributes': FindingAssetAttributes,
            'id': str,
            'title': str,
            'description': str,
            'recommendation': str,
            'severity': Severity,
            'numeric_severity': float,
            'confidence': int,
            'indicator_of_compromise': bool,
            'attributes': List,
            'user_attributes': List,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'arn': 'arn',
            'schema_version': 'schemaVersion',
            'service': 'service',
            'service_attributes': 'serviceAttributes',
            'asset_type': 'assetType',
            'asset_attributes': 'assetAttributes',
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'recommendation': 'recommendation',
            'severity': 'severity',
            'numeric_severity': 'numericSeverity',
            'confidence': 'confidence',
            'indicator_of_compromise': 'indicatorOfCompromise',
            'attributes': 'attributes',
            'user_attributes': 'userAttributes',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._arn = arn
        self._schema_version = schema_version
        self._service = service
        self._service_attributes = service_attributes
        self._asset_type = asset_type
        self._asset_attributes = asset_attributes
        self._id = id
        self._title = title
        self._description = description
        self._recommendation = recommendation
        self._severity = severity
        self._numeric_severity = numeric_severity
        self._confidence = confidence
        self._indicator_of_compromise = indicator_of_compromise
        self._attributes = attributes
        self._user_attributes = user_attributes
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Finding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Finding of this Finding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Finding.


        :return: The arn of this Finding.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Finding.


        :param arn: The arn of this Finding.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def schema_version(self):
        """Gets the schema_version of this Finding.


        :return: The schema_version of this Finding.
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this Finding.


        :param schema_version: The schema_version of this Finding.
        :type schema_version: int
        """

        self._schema_version = schema_version

    @property
    def service(self):
        """Gets the service of this Finding.


        :return: The service of this Finding.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Finding.


        :param service: The service of this Finding.
        :type service: str
        """

        self._service = service

    @property
    def service_attributes(self):
        """Gets the service_attributes of this Finding.


        :return: The service_attributes of this Finding.
        :rtype: FindingServiceAttributes
        """
        return self._service_attributes

    @service_attributes.setter
    def service_attributes(self, service_attributes):
        """Sets the service_attributes of this Finding.


        :param service_attributes: The service_attributes of this Finding.
        :type service_attributes: FindingServiceAttributes
        """

        self._service_attributes = service_attributes

    @property
    def asset_type(self):
        """Gets the asset_type of this Finding.


        :return: The asset_type of this Finding.
        :rtype: AssetType
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this Finding.


        :param asset_type: The asset_type of this Finding.
        :type asset_type: AssetType
        """

        self._asset_type = asset_type

    @property
    def asset_attributes(self):
        """Gets the asset_attributes of this Finding.


        :return: The asset_attributes of this Finding.
        :rtype: FindingAssetAttributes
        """
        return self._asset_attributes

    @asset_attributes.setter
    def asset_attributes(self, asset_attributes):
        """Sets the asset_attributes of this Finding.


        :param asset_attributes: The asset_attributes of this Finding.
        :type asset_attributes: FindingAssetAttributes
        """

        self._asset_attributes = asset_attributes

    @property
    def id(self):
        """Gets the id of this Finding.


        :return: The id of this Finding.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Finding.


        :param id: The id of this Finding.
        :type id: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Finding.


        :return: The title of this Finding.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Finding.


        :param title: The title of this Finding.
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Finding.


        :return: The description of this Finding.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Finding.


        :param description: The description of this Finding.
        :type description: str
        """

        self._description = description

    @property
    def recommendation(self):
        """Gets the recommendation of this Finding.


        :return: The recommendation of this Finding.
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this Finding.


        :param recommendation: The recommendation of this Finding.
        :type recommendation: str
        """

        self._recommendation = recommendation

    @property
    def severity(self):
        """Gets the severity of this Finding.


        :return: The severity of this Finding.
        :rtype: Severity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Finding.


        :param severity: The severity of this Finding.
        :type severity: Severity
        """

        self._severity = severity

    @property
    def numeric_severity(self):
        """Gets the numeric_severity of this Finding.


        :return: The numeric_severity of this Finding.
        :rtype: float
        """
        return self._numeric_severity

    @numeric_severity.setter
    def numeric_severity(self, numeric_severity):
        """Sets the numeric_severity of this Finding.


        :param numeric_severity: The numeric_severity of this Finding.
        :type numeric_severity: float
        """

        self._numeric_severity = numeric_severity

    @property
    def confidence(self):
        """Gets the confidence of this Finding.


        :return: The confidence of this Finding.
        :rtype: int
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Finding.


        :param confidence: The confidence of this Finding.
        :type confidence: int
        """

        self._confidence = confidence

    @property
    def indicator_of_compromise(self):
        """Gets the indicator_of_compromise of this Finding.


        :return: The indicator_of_compromise of this Finding.
        :rtype: bool
        """
        return self._indicator_of_compromise

    @indicator_of_compromise.setter
    def indicator_of_compromise(self, indicator_of_compromise):
        """Sets the indicator_of_compromise of this Finding.


        :param indicator_of_compromise: The indicator_of_compromise of this Finding.
        :type indicator_of_compromise: bool
        """

        self._indicator_of_compromise = indicator_of_compromise

    @property
    def attributes(self):
        """Gets the attributes of this Finding.


        :return: The attributes of this Finding.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Finding.


        :param attributes: The attributes of this Finding.
        :type attributes: List
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def user_attributes(self):
        """Gets the user_attributes of this Finding.


        :return: The user_attributes of this Finding.
        :rtype: List
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this Finding.


        :param user_attributes: The user_attributes of this Finding.
        :type user_attributes: List
        """
        if user_attributes is None:
            raise ValueError("Invalid value for `user_attributes`, must not be `None`")

        self._user_attributes = user_attributes

    @property
    def created_at(self):
        """Gets the created_at of this Finding.


        :return: The created_at of this Finding.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Finding.


        :param created_at: The created_at of this Finding.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Finding.


        :return: The updated_at of this Finding.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Finding.


        :param updated_at: The updated_at of this Finding.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
