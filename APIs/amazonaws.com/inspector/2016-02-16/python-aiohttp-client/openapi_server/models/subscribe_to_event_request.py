# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inspector_event import InspectorEvent
from openapi_server import util


class SubscribeToEventRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, event: InspectorEvent=None, topic_arn: str=None):
        """SubscribeToEventRequest - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this SubscribeToEventRequest.
        :param event: The event of this SubscribeToEventRequest.
        :param topic_arn: The topic_arn of this SubscribeToEventRequest.
        """
        self.openapi_types = {
            'resource_arn': str,
            'event': InspectorEvent,
            'topic_arn': str
        }

        self.attribute_map = {
            'resource_arn': 'resourceArn',
            'event': 'event',
            'topic_arn': 'topicArn'
        }

        self._resource_arn = resource_arn
        self._event = event
        self._topic_arn = topic_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscribeToEventRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscribeToEventRequest of this SubscribeToEventRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this SubscribeToEventRequest.


        :return: The resource_arn of this SubscribeToEventRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this SubscribeToEventRequest.


        :param resource_arn: The resource_arn of this SubscribeToEventRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")

        self._resource_arn = resource_arn

    @property
    def event(self):
        """Gets the event of this SubscribeToEventRequest.


        :return: The event of this SubscribeToEventRequest.
        :rtype: InspectorEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this SubscribeToEventRequest.


        :param event: The event of this SubscribeToEventRequest.
        :type event: InspectorEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def topic_arn(self):
        """Gets the topic_arn of this SubscribeToEventRequest.


        :return: The topic_arn of this SubscribeToEventRequest.
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this SubscribeToEventRequest.


        :param topic_arn: The topic_arn of this SubscribeToEventRequest.
        :type topic_arn: str
        """
        if topic_arn is None:
            raise ValueError("Invalid value for `topic_arn`, must not be `None`")

        self._topic_arn = topic_arn
