# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeResourceGroupsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_groups: List=None, failed_items: Dict=None):
        """DescribeResourceGroupsResponse - a model defined in OpenAPI

        :param resource_groups: The resource_groups of this DescribeResourceGroupsResponse.
        :param failed_items: The failed_items of this DescribeResourceGroupsResponse.
        """
        self.openapi_types = {
            'resource_groups': List,
            'failed_items': Dict
        }

        self.attribute_map = {
            'resource_groups': 'resourceGroups',
            'failed_items': 'failedItems'
        }

        self._resource_groups = resource_groups
        self._failed_items = failed_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeResourceGroupsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeResourceGroupsResponse of this DescribeResourceGroupsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_groups(self):
        """Gets the resource_groups of this DescribeResourceGroupsResponse.


        :return: The resource_groups of this DescribeResourceGroupsResponse.
        :rtype: List
        """
        return self._resource_groups

    @resource_groups.setter
    def resource_groups(self, resource_groups):
        """Sets the resource_groups of this DescribeResourceGroupsResponse.


        :param resource_groups: The resource_groups of this DescribeResourceGroupsResponse.
        :type resource_groups: List
        """
        if resource_groups is None:
            raise ValueError("Invalid value for `resource_groups`, must not be `None`")

        self._resource_groups = resource_groups

    @property
    def failed_items(self):
        """Gets the failed_items of this DescribeResourceGroupsResponse.


        :return: The failed_items of this DescribeResourceGroupsResponse.
        :rtype: Dict
        """
        return self._failed_items

    @failed_items.setter
    def failed_items(self, failed_items):
        """Sets the failed_items of this DescribeResourceGroupsResponse.


        :param failed_items: The failed_items of this DescribeResourceGroupsResponse.
        :type failed_items: Dict
        """
        if failed_items is None:
            raise ValueError("Invalid value for `failed_items`, must not be `None`")

        self._failed_items = failed_items
