# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssessmentTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, name: str=None, assessment_target_arn: str=None, duration_in_seconds: int=None, rules_package_arns: List=None, user_attributes_for_findings: List=None, last_assessment_run_arn: str=None, assessment_run_count: int=None, created_at: datetime=None):
        """AssessmentTemplate - a model defined in OpenAPI

        :param arn: The arn of this AssessmentTemplate.
        :param name: The name of this AssessmentTemplate.
        :param assessment_target_arn: The assessment_target_arn of this AssessmentTemplate.
        :param duration_in_seconds: The duration_in_seconds of this AssessmentTemplate.
        :param rules_package_arns: The rules_package_arns of this AssessmentTemplate.
        :param user_attributes_for_findings: The user_attributes_for_findings of this AssessmentTemplate.
        :param last_assessment_run_arn: The last_assessment_run_arn of this AssessmentTemplate.
        :param assessment_run_count: The assessment_run_count of this AssessmentTemplate.
        :param created_at: The created_at of this AssessmentTemplate.
        """
        self.openapi_types = {
            'arn': str,
            'name': str,
            'assessment_target_arn': str,
            'duration_in_seconds': int,
            'rules_package_arns': List,
            'user_attributes_for_findings': List,
            'last_assessment_run_arn': str,
            'assessment_run_count': int,
            'created_at': datetime
        }

        self.attribute_map = {
            'arn': 'arn',
            'name': 'name',
            'assessment_target_arn': 'assessmentTargetArn',
            'duration_in_seconds': 'durationInSeconds',
            'rules_package_arns': 'rulesPackageArns',
            'user_attributes_for_findings': 'userAttributesForFindings',
            'last_assessment_run_arn': 'lastAssessmentRunArn',
            'assessment_run_count': 'assessmentRunCount',
            'created_at': 'createdAt'
        }

        self._arn = arn
        self._name = name
        self._assessment_target_arn = assessment_target_arn
        self._duration_in_seconds = duration_in_seconds
        self._rules_package_arns = rules_package_arns
        self._user_attributes_for_findings = user_attributes_for_findings
        self._last_assessment_run_arn = last_assessment_run_arn
        self._assessment_run_count = assessment_run_count
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentTemplate of this AssessmentTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this AssessmentTemplate.


        :return: The arn of this AssessmentTemplate.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this AssessmentTemplate.


        :param arn: The arn of this AssessmentTemplate.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this AssessmentTemplate.


        :return: The name of this AssessmentTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssessmentTemplate.


        :param name: The name of this AssessmentTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def assessment_target_arn(self):
        """Gets the assessment_target_arn of this AssessmentTemplate.


        :return: The assessment_target_arn of this AssessmentTemplate.
        :rtype: str
        """
        return self._assessment_target_arn

    @assessment_target_arn.setter
    def assessment_target_arn(self, assessment_target_arn):
        """Sets the assessment_target_arn of this AssessmentTemplate.


        :param assessment_target_arn: The assessment_target_arn of this AssessmentTemplate.
        :type assessment_target_arn: str
        """
        if assessment_target_arn is None:
            raise ValueError("Invalid value for `assessment_target_arn`, must not be `None`")

        self._assessment_target_arn = assessment_target_arn

    @property
    def duration_in_seconds(self):
        """Gets the duration_in_seconds of this AssessmentTemplate.


        :return: The duration_in_seconds of this AssessmentTemplate.
        :rtype: int
        """
        return self._duration_in_seconds

    @duration_in_seconds.setter
    def duration_in_seconds(self, duration_in_seconds):
        """Sets the duration_in_seconds of this AssessmentTemplate.


        :param duration_in_seconds: The duration_in_seconds of this AssessmentTemplate.
        :type duration_in_seconds: int
        """
        if duration_in_seconds is None:
            raise ValueError("Invalid value for `duration_in_seconds`, must not be `None`")

        self._duration_in_seconds = duration_in_seconds

    @property
    def rules_package_arns(self):
        """Gets the rules_package_arns of this AssessmentTemplate.


        :return: The rules_package_arns of this AssessmentTemplate.
        :rtype: List
        """
        return self._rules_package_arns

    @rules_package_arns.setter
    def rules_package_arns(self, rules_package_arns):
        """Sets the rules_package_arns of this AssessmentTemplate.


        :param rules_package_arns: The rules_package_arns of this AssessmentTemplate.
        :type rules_package_arns: List
        """
        if rules_package_arns is None:
            raise ValueError("Invalid value for `rules_package_arns`, must not be `None`")

        self._rules_package_arns = rules_package_arns

    @property
    def user_attributes_for_findings(self):
        """Gets the user_attributes_for_findings of this AssessmentTemplate.


        :return: The user_attributes_for_findings of this AssessmentTemplate.
        :rtype: List
        """
        return self._user_attributes_for_findings

    @user_attributes_for_findings.setter
    def user_attributes_for_findings(self, user_attributes_for_findings):
        """Sets the user_attributes_for_findings of this AssessmentTemplate.


        :param user_attributes_for_findings: The user_attributes_for_findings of this AssessmentTemplate.
        :type user_attributes_for_findings: List
        """
        if user_attributes_for_findings is None:
            raise ValueError("Invalid value for `user_attributes_for_findings`, must not be `None`")

        self._user_attributes_for_findings = user_attributes_for_findings

    @property
    def last_assessment_run_arn(self):
        """Gets the last_assessment_run_arn of this AssessmentTemplate.


        :return: The last_assessment_run_arn of this AssessmentTemplate.
        :rtype: str
        """
        return self._last_assessment_run_arn

    @last_assessment_run_arn.setter
    def last_assessment_run_arn(self, last_assessment_run_arn):
        """Sets the last_assessment_run_arn of this AssessmentTemplate.


        :param last_assessment_run_arn: The last_assessment_run_arn of this AssessmentTemplate.
        :type last_assessment_run_arn: str
        """

        self._last_assessment_run_arn = last_assessment_run_arn

    @property
    def assessment_run_count(self):
        """Gets the assessment_run_count of this AssessmentTemplate.


        :return: The assessment_run_count of this AssessmentTemplate.
        :rtype: int
        """
        return self._assessment_run_count

    @assessment_run_count.setter
    def assessment_run_count(self, assessment_run_count):
        """Sets the assessment_run_count of this AssessmentTemplate.


        :param assessment_run_count: The assessment_run_count of this AssessmentTemplate.
        :type assessment_run_count: int
        """
        if assessment_run_count is None:
            raise ValueError("Invalid value for `assessment_run_count`, must not be `None`")

        self._assessment_run_count = assessment_run_count

    @property
    def created_at(self):
        """Gets the created_at of this AssessmentTemplate.


        :return: The created_at of this AssessmentTemplate.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AssessmentTemplate.


        :param created_at: The created_at of this AssessmentTemplate.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at
