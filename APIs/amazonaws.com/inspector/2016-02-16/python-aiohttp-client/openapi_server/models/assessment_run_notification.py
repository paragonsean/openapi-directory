# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessment_run_notification_sns_status_code import AssessmentRunNotificationSnsStatusCode
from openapi_server.models.inspector_event import InspectorEvent
from openapi_server import util


class AssessmentRunNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _date: datetime=None, event: InspectorEvent=None, message: str=None, error: bool=None, sns_topic_arn: str=None, sns_publish_status_code: AssessmentRunNotificationSnsStatusCode=None):
        """AssessmentRunNotification - a model defined in OpenAPI

        :param _date: The _date of this AssessmentRunNotification.
        :param event: The event of this AssessmentRunNotification.
        :param message: The message of this AssessmentRunNotification.
        :param error: The error of this AssessmentRunNotification.
        :param sns_topic_arn: The sns_topic_arn of this AssessmentRunNotification.
        :param sns_publish_status_code: The sns_publish_status_code of this AssessmentRunNotification.
        """
        self.openapi_types = {
            '_date': datetime,
            'event': InspectorEvent,
            'message': str,
            'error': bool,
            'sns_topic_arn': str,
            'sns_publish_status_code': AssessmentRunNotificationSnsStatusCode
        }

        self.attribute_map = {
            '_date': 'date',
            'event': 'event',
            'message': 'message',
            'error': 'error',
            'sns_topic_arn': 'snsTopicArn',
            'sns_publish_status_code': 'snsPublishStatusCode'
        }

        self.__date = _date
        self._event = event
        self._message = message
        self._error = error
        self._sns_topic_arn = sns_topic_arn
        self._sns_publish_status_code = sns_publish_status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentRunNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentRunNotification of this AssessmentRunNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _date(self):
        """Gets the _date of this AssessmentRunNotification.


        :return: The _date of this AssessmentRunNotification.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AssessmentRunNotification.


        :param _date: The _date of this AssessmentRunNotification.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def event(self):
        """Gets the event of this AssessmentRunNotification.


        :return: The event of this AssessmentRunNotification.
        :rtype: InspectorEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AssessmentRunNotification.


        :param event: The event of this AssessmentRunNotification.
        :type event: InspectorEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def message(self):
        """Gets the message of this AssessmentRunNotification.


        :return: The message of this AssessmentRunNotification.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AssessmentRunNotification.


        :param message: The message of this AssessmentRunNotification.
        :type message: str
        """

        self._message = message

    @property
    def error(self):
        """Gets the error of this AssessmentRunNotification.


        :return: The error of this AssessmentRunNotification.
        :rtype: bool
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AssessmentRunNotification.


        :param error: The error of this AssessmentRunNotification.
        :type error: bool
        """
        if error is None:
            raise ValueError("Invalid value for `error`, must not be `None`")

        self._error = error

    @property
    def sns_topic_arn(self):
        """Gets the sns_topic_arn of this AssessmentRunNotification.


        :return: The sns_topic_arn of this AssessmentRunNotification.
        :rtype: str
        """
        return self._sns_topic_arn

    @sns_topic_arn.setter
    def sns_topic_arn(self, sns_topic_arn):
        """Sets the sns_topic_arn of this AssessmentRunNotification.


        :param sns_topic_arn: The sns_topic_arn of this AssessmentRunNotification.
        :type sns_topic_arn: str
        """

        self._sns_topic_arn = sns_topic_arn

    @property
    def sns_publish_status_code(self):
        """Gets the sns_publish_status_code of this AssessmentRunNotification.


        :return: The sns_publish_status_code of this AssessmentRunNotification.
        :rtype: AssessmentRunNotificationSnsStatusCode
        """
        return self._sns_publish_status_code

    @sns_publish_status_code.setter
    def sns_publish_status_code(self, sns_publish_status_code):
        """Sets the sns_publish_status_code of this AssessmentRunNotification.


        :param sns_publish_status_code: The sns_publish_status_code of this AssessmentRunNotification.
        :type sns_publish_status_code: AssessmentRunNotificationSnsStatusCode
        """

        self._sns_publish_status_code = sns_publish_status_code
