# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agent_health import AgentHealth
from openapi_server.models.agent_health_code import AgentHealthCode
from openapi_server import util


class AssessmentRunAgent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_id: str=None, assessment_run_arn: str=None, agent_health: AgentHealth=None, agent_health_code: AgentHealthCode=None, agent_health_details: str=None, auto_scaling_group: str=None, telemetry_metadata: List=None):
        """AssessmentRunAgent - a model defined in OpenAPI

        :param agent_id: The agent_id of this AssessmentRunAgent.
        :param assessment_run_arn: The assessment_run_arn of this AssessmentRunAgent.
        :param agent_health: The agent_health of this AssessmentRunAgent.
        :param agent_health_code: The agent_health_code of this AssessmentRunAgent.
        :param agent_health_details: The agent_health_details of this AssessmentRunAgent.
        :param auto_scaling_group: The auto_scaling_group of this AssessmentRunAgent.
        :param telemetry_metadata: The telemetry_metadata of this AssessmentRunAgent.
        """
        self.openapi_types = {
            'agent_id': str,
            'assessment_run_arn': str,
            'agent_health': AgentHealth,
            'agent_health_code': AgentHealthCode,
            'agent_health_details': str,
            'auto_scaling_group': str,
            'telemetry_metadata': List
        }

        self.attribute_map = {
            'agent_id': 'agentId',
            'assessment_run_arn': 'assessmentRunArn',
            'agent_health': 'agentHealth',
            'agent_health_code': 'agentHealthCode',
            'agent_health_details': 'agentHealthDetails',
            'auto_scaling_group': 'autoScalingGroup',
            'telemetry_metadata': 'telemetryMetadata'
        }

        self._agent_id = agent_id
        self._assessment_run_arn = assessment_run_arn
        self._agent_health = agent_health
        self._agent_health_code = agent_health_code
        self._agent_health_details = agent_health_details
        self._auto_scaling_group = auto_scaling_group
        self._telemetry_metadata = telemetry_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentRunAgent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentRunAgent of this AssessmentRunAgent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_id(self):
        """Gets the agent_id of this AssessmentRunAgent.


        :return: The agent_id of this AssessmentRunAgent.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this AssessmentRunAgent.


        :param agent_id: The agent_id of this AssessmentRunAgent.
        :type agent_id: str
        """
        if agent_id is None:
            raise ValueError("Invalid value for `agent_id`, must not be `None`")

        self._agent_id = agent_id

    @property
    def assessment_run_arn(self):
        """Gets the assessment_run_arn of this AssessmentRunAgent.


        :return: The assessment_run_arn of this AssessmentRunAgent.
        :rtype: str
        """
        return self._assessment_run_arn

    @assessment_run_arn.setter
    def assessment_run_arn(self, assessment_run_arn):
        """Sets the assessment_run_arn of this AssessmentRunAgent.


        :param assessment_run_arn: The assessment_run_arn of this AssessmentRunAgent.
        :type assessment_run_arn: str
        """
        if assessment_run_arn is None:
            raise ValueError("Invalid value for `assessment_run_arn`, must not be `None`")

        self._assessment_run_arn = assessment_run_arn

    @property
    def agent_health(self):
        """Gets the agent_health of this AssessmentRunAgent.


        :return: The agent_health of this AssessmentRunAgent.
        :rtype: AgentHealth
        """
        return self._agent_health

    @agent_health.setter
    def agent_health(self, agent_health):
        """Sets the agent_health of this AssessmentRunAgent.


        :param agent_health: The agent_health of this AssessmentRunAgent.
        :type agent_health: AgentHealth
        """
        if agent_health is None:
            raise ValueError("Invalid value for `agent_health`, must not be `None`")

        self._agent_health = agent_health

    @property
    def agent_health_code(self):
        """Gets the agent_health_code of this AssessmentRunAgent.


        :return: The agent_health_code of this AssessmentRunAgent.
        :rtype: AgentHealthCode
        """
        return self._agent_health_code

    @agent_health_code.setter
    def agent_health_code(self, agent_health_code):
        """Sets the agent_health_code of this AssessmentRunAgent.


        :param agent_health_code: The agent_health_code of this AssessmentRunAgent.
        :type agent_health_code: AgentHealthCode
        """
        if agent_health_code is None:
            raise ValueError("Invalid value for `agent_health_code`, must not be `None`")

        self._agent_health_code = agent_health_code

    @property
    def agent_health_details(self):
        """Gets the agent_health_details of this AssessmentRunAgent.


        :return: The agent_health_details of this AssessmentRunAgent.
        :rtype: str
        """
        return self._agent_health_details

    @agent_health_details.setter
    def agent_health_details(self, agent_health_details):
        """Sets the agent_health_details of this AssessmentRunAgent.


        :param agent_health_details: The agent_health_details of this AssessmentRunAgent.
        :type agent_health_details: str
        """

        self._agent_health_details = agent_health_details

    @property
    def auto_scaling_group(self):
        """Gets the auto_scaling_group of this AssessmentRunAgent.


        :return: The auto_scaling_group of this AssessmentRunAgent.
        :rtype: str
        """
        return self._auto_scaling_group

    @auto_scaling_group.setter
    def auto_scaling_group(self, auto_scaling_group):
        """Sets the auto_scaling_group of this AssessmentRunAgent.


        :param auto_scaling_group: The auto_scaling_group of this AssessmentRunAgent.
        :type auto_scaling_group: str
        """

        self._auto_scaling_group = auto_scaling_group

    @property
    def telemetry_metadata(self):
        """Gets the telemetry_metadata of this AssessmentRunAgent.


        :return: The telemetry_metadata of this AssessmentRunAgent.
        :rtype: List
        """
        return self._telemetry_metadata

    @telemetry_metadata.setter
    def telemetry_metadata(self, telemetry_metadata):
        """Sets the telemetry_metadata of this AssessmentRunAgent.


        :param telemetry_metadata: The telemetry_metadata of this AssessmentRunAgent.
        :type telemetry_metadata: List
        """
        if telemetry_metadata is None:
            raise ValueError("Invalid value for `telemetry_metadata`, must not be `None`")

        self._telemetry_metadata = telemetry_metadata
