# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateResourceGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_group_tags: List=None):
        """CreateResourceGroupRequest - a model defined in OpenAPI

        :param resource_group_tags: The resource_group_tags of this CreateResourceGroupRequest.
        """
        self.openapi_types = {
            'resource_group_tags': List
        }

        self.attribute_map = {
            'resource_group_tags': 'resourceGroupTags'
        }

        self._resource_group_tags = resource_group_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateResourceGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateResourceGroupRequest of this CreateResourceGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_group_tags(self):
        """Gets the resource_group_tags of this CreateResourceGroupRequest.


        :return: The resource_group_tags of this CreateResourceGroupRequest.
        :rtype: List
        """
        return self._resource_group_tags

    @resource_group_tags.setter
    def resource_group_tags(self, resource_group_tags):
        """Sets the resource_group_tags of this CreateResourceGroupRequest.


        :param resource_group_tags: The resource_group_tags of this CreateResourceGroupRequest.
        :type resource_group_tags: List
        """
        if resource_group_tags is None:
            raise ValueError("Invalid value for `resource_group_tags`, must not be `None`")

        self._resource_group_tags = resource_group_tags
