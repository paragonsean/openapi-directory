# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, topic_arn: str=None, event_subscriptions: List=None):
        """Subscription - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this Subscription.
        :param topic_arn: The topic_arn of this Subscription.
        :param event_subscriptions: The event_subscriptions of this Subscription.
        """
        self.openapi_types = {
            'resource_arn': str,
            'topic_arn': str,
            'event_subscriptions': List
        }

        self.attribute_map = {
            'resource_arn': 'resourceArn',
            'topic_arn': 'topicArn',
            'event_subscriptions': 'eventSubscriptions'
        }

        self._resource_arn = resource_arn
        self._topic_arn = topic_arn
        self._event_subscriptions = event_subscriptions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this Subscription.


        :return: The resource_arn of this Subscription.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this Subscription.


        :param resource_arn: The resource_arn of this Subscription.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")

        self._resource_arn = resource_arn

    @property
    def topic_arn(self):
        """Gets the topic_arn of this Subscription.


        :return: The topic_arn of this Subscription.
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this Subscription.


        :param topic_arn: The topic_arn of this Subscription.
        :type topic_arn: str
        """
        if topic_arn is None:
            raise ValueError("Invalid value for `topic_arn`, must not be `None`")

        self._topic_arn = topic_arn

    @property
    def event_subscriptions(self):
        """Gets the event_subscriptions of this Subscription.


        :return: The event_subscriptions of this Subscription.
        :rtype: List
        """
        return self._event_subscriptions

    @event_subscriptions.setter
    def event_subscriptions(self, event_subscriptions):
        """Sets the event_subscriptions of this Subscription.


        :param event_subscriptions: The event_subscriptions of this Subscription.
        :type event_subscriptions: List
        """
        if event_subscriptions is None:
            raise ValueError("Invalid value for `event_subscriptions`, must not be `None`")

        self._event_subscriptions = event_subscriptions
