# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExclusionPreview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str=None, description: str=None, recommendation: str=None, scopes: List=None, attributes: List=None):
        """ExclusionPreview - a model defined in OpenAPI

        :param title: The title of this ExclusionPreview.
        :param description: The description of this ExclusionPreview.
        :param recommendation: The recommendation of this ExclusionPreview.
        :param scopes: The scopes of this ExclusionPreview.
        :param attributes: The attributes of this ExclusionPreview.
        """
        self.openapi_types = {
            'title': str,
            'description': str,
            'recommendation': str,
            'scopes': List,
            'attributes': List
        }

        self.attribute_map = {
            'title': 'title',
            'description': 'description',
            'recommendation': 'recommendation',
            'scopes': 'scopes',
            'attributes': 'attributes'
        }

        self._title = title
        self._description = description
        self._recommendation = recommendation
        self._scopes = scopes
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExclusionPreview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExclusionPreview of this ExclusionPreview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this ExclusionPreview.


        :return: The title of this ExclusionPreview.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ExclusionPreview.


        :param title: The title of this ExclusionPreview.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def description(self):
        """Gets the description of this ExclusionPreview.


        :return: The description of this ExclusionPreview.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExclusionPreview.


        :param description: The description of this ExclusionPreview.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def recommendation(self):
        """Gets the recommendation of this ExclusionPreview.


        :return: The recommendation of this ExclusionPreview.
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this ExclusionPreview.


        :param recommendation: The recommendation of this ExclusionPreview.
        :type recommendation: str
        """
        if recommendation is None:
            raise ValueError("Invalid value for `recommendation`, must not be `None`")

        self._recommendation = recommendation

    @property
    def scopes(self):
        """Gets the scopes of this ExclusionPreview.


        :return: The scopes of this ExclusionPreview.
        :rtype: List
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ExclusionPreview.


        :param scopes: The scopes of this ExclusionPreview.
        :type scopes: List
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def attributes(self):
        """Gets the attributes of this ExclusionPreview.


        :return: The attributes of this ExclusionPreview.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ExclusionPreview.


        :param attributes: The attributes of this ExclusionPreview.
        :type attributes: List
        """

        self._attributes = attributes
