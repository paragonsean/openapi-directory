/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentRunStateChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentRunStateChange::OAIAssessmentRunStateChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentRunStateChange::OAIAssessmentRunStateChange() {
    this->initializeModel();
}

OAIAssessmentRunStateChange::~OAIAssessmentRunStateChange() {}

void OAIAssessmentRunStateChange::initializeModel() {

    m_state_changed_at_isSet = false;
    m_state_changed_at_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAssessmentRunStateChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentRunStateChange::fromJsonObject(QJsonObject json) {

    m_state_changed_at_isValid = ::OpenAPI::fromJsonValue(m_state_changed_at, json[QString("stateChangedAt")]);
    m_state_changed_at_isSet = !json[QString("stateChangedAt")].isNull() && m_state_changed_at_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAssessmentRunStateChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentRunStateChange::asJsonObject() const {
    QJsonObject obj;
    if (m_state_changed_at_isSet) {
        obj.insert(QString("stateChangedAt"), ::OpenAPI::toJsonValue(m_state_changed_at));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QDateTime OAIAssessmentRunStateChange::getStateChangedAt() const {
    return m_state_changed_at;
}
void OAIAssessmentRunStateChange::setStateChangedAt(const QDateTime &state_changed_at) {
    m_state_changed_at = state_changed_at;
    m_state_changed_at_isSet = true;
}

bool OAIAssessmentRunStateChange::is_state_changed_at_Set() const{
    return m_state_changed_at_isSet;
}

bool OAIAssessmentRunStateChange::is_state_changed_at_Valid() const{
    return m_state_changed_at_isValid;
}

OAIAssessmentRunState OAIAssessmentRunStateChange::getState() const {
    return m_state;
}
void OAIAssessmentRunStateChange::setState(const OAIAssessmentRunState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAssessmentRunStateChange::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAssessmentRunStateChange::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAssessmentRunStateChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_changed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentRunStateChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_changed_at_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
