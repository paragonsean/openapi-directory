/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAssessmentReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAssessmentReportRequest::OAIGetAssessmentReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAssessmentReportRequest::OAIGetAssessmentReportRequest() {
    this->initializeModel();
}

OAIGetAssessmentReportRequest::~OAIGetAssessmentReportRequest() {}

void OAIGetAssessmentReportRequest::initializeModel() {

    m_assessment_run_arn_isSet = false;
    m_assessment_run_arn_isValid = false;

    m_report_file_format_isSet = false;
    m_report_file_format_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;
}

void OAIGetAssessmentReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAssessmentReportRequest::fromJsonObject(QJsonObject json) {

    m_assessment_run_arn_isValid = ::OpenAPI::fromJsonValue(m_assessment_run_arn, json[QString("assessmentRunArn")]);
    m_assessment_run_arn_isSet = !json[QString("assessmentRunArn")].isNull() && m_assessment_run_arn_isValid;

    m_report_file_format_isValid = ::OpenAPI::fromJsonValue(m_report_file_format, json[QString("reportFileFormat")]);
    m_report_file_format_isSet = !json[QString("reportFileFormat")].isNull() && m_report_file_format_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("reportType")]);
    m_report_type_isSet = !json[QString("reportType")].isNull() && m_report_type_isValid;
}

QString OAIGetAssessmentReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAssessmentReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_run_arn_isSet) {
        obj.insert(QString("assessmentRunArn"), ::OpenAPI::toJsonValue(m_assessment_run_arn));
    }
    if (m_report_file_format.isSet()) {
        obj.insert(QString("reportFileFormat"), ::OpenAPI::toJsonValue(m_report_file_format));
    }
    if (m_report_type.isSet()) {
        obj.insert(QString("reportType"), ::OpenAPI::toJsonValue(m_report_type));
    }
    return obj;
}

QString OAIGetAssessmentReportRequest::getAssessmentRunArn() const {
    return m_assessment_run_arn;
}
void OAIGetAssessmentReportRequest::setAssessmentRunArn(const QString &assessment_run_arn) {
    m_assessment_run_arn = assessment_run_arn;
    m_assessment_run_arn_isSet = true;
}

bool OAIGetAssessmentReportRequest::is_assessment_run_arn_Set() const{
    return m_assessment_run_arn_isSet;
}

bool OAIGetAssessmentReportRequest::is_assessment_run_arn_Valid() const{
    return m_assessment_run_arn_isValid;
}

OAIReportFileFormat OAIGetAssessmentReportRequest::getReportFileFormat() const {
    return m_report_file_format;
}
void OAIGetAssessmentReportRequest::setReportFileFormat(const OAIReportFileFormat &report_file_format) {
    m_report_file_format = report_file_format;
    m_report_file_format_isSet = true;
}

bool OAIGetAssessmentReportRequest::is_report_file_format_Set() const{
    return m_report_file_format_isSet;
}

bool OAIGetAssessmentReportRequest::is_report_file_format_Valid() const{
    return m_report_file_format_isValid;
}

OAIReportType OAIGetAssessmentReportRequest::getReportType() const {
    return m_report_type;
}
void OAIGetAssessmentReportRequest::setReportType(const OAIReportType &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIGetAssessmentReportRequest::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIGetAssessmentReportRequest::is_report_type_Valid() const{
    return m_report_type_isValid;
}

bool OAIGetAssessmentReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_run_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_file_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAssessmentReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessment_run_arn_isValid && m_report_file_format_isValid && m_report_type_isValid && true;
}

} // namespace OpenAPI
