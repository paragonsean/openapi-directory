/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeCrossAccountAccessRoleResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeCrossAccountAccessRoleResponse::OAIDescribeCrossAccountAccessRoleResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeCrossAccountAccessRoleResponse::OAIDescribeCrossAccountAccessRoleResponse() {
    this->initializeModel();
}

OAIDescribeCrossAccountAccessRoleResponse::~OAIDescribeCrossAccountAccessRoleResponse() {}

void OAIDescribeCrossAccountAccessRoleResponse::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;

    m_registered_at_isSet = false;
    m_registered_at_isValid = false;
}

void OAIDescribeCrossAccountAccessRoleResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeCrossAccountAccessRoleResponse::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;

    m_registered_at_isValid = ::OpenAPI::fromJsonValue(m_registered_at, json[QString("registeredAt")]);
    m_registered_at_isSet = !json[QString("registeredAt")].isNull() && m_registered_at_isValid;
}

QString OAIDescribeCrossAccountAccessRoleResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeCrossAccountAccessRoleResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    if (m_registered_at_isSet) {
        obj.insert(QString("registeredAt"), ::OpenAPI::toJsonValue(m_registered_at));
    }
    return obj;
}

QString OAIDescribeCrossAccountAccessRoleResponse::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeCrossAccountAccessRoleResponse::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeCrossAccountAccessRoleResponse::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeCrossAccountAccessRoleResponse::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIDescribeCrossAccountAccessRoleResponse::getRValid() const {
    return m_r_valid;
}
void OAIDescribeCrossAccountAccessRoleResponse::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIDescribeCrossAccountAccessRoleResponse::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIDescribeCrossAccountAccessRoleResponse::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

QDateTime OAIDescribeCrossAccountAccessRoleResponse::getRegisteredAt() const {
    return m_registered_at;
}
void OAIDescribeCrossAccountAccessRoleResponse::setRegisteredAt(const QDateTime &registered_at) {
    m_registered_at = registered_at;
    m_registered_at_isSet = true;
}

bool OAIDescribeCrossAccountAccessRoleResponse::is_registered_at_Set() const{
    return m_registered_at_isSet;
}

bool OAIDescribeCrossAccountAccessRoleResponse::is_registered_at_Valid() const{
    return m_registered_at_isValid;
}

bool OAIDescribeCrossAccountAccessRoleResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeCrossAccountAccessRoleResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_arn_isValid && m_r_valid_isValid && m_registered_at_isValid && true;
}

} // namespace OpenAPI
