/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentRunState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentRunState::OAIAssessmentRunState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentRunState::OAIAssessmentRunState() {
    this->initializeModel();
}

OAIAssessmentRunState::~OAIAssessmentRunState() {}

void OAIAssessmentRunState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAssessmentRunState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAssessmentRunState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("START_DATA_COLLECTION_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::START_DATA_COLLECTION_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("START_DATA_COLLECTION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::START_DATA_COLLECTION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COLLECTING_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::COLLECTING_DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STOP_DATA_COLLECTION_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::STOP_DATA_COLLECTION_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATA_COLLECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::DATA_COLLECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("START_EVALUATING_RULES_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::START_EVALUATING_RULES_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVALUATING_RULES", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::EVALUATING_RULES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("COMPLETED_WITH_ERRORS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::COMPLETED_WITH_ERRORS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CANCELED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAssessmentRunState::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAssessmentRunState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAssessmentRunState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAssessmentRunState::CREATED:
            val = "CREATED";
            break;
        case eOAIAssessmentRunState::START_DATA_COLLECTION_PENDING:
            val = "START_DATA_COLLECTION_PENDING";
            break;
        case eOAIAssessmentRunState::START_DATA_COLLECTION_IN_PROGRESS:
            val = "START_DATA_COLLECTION_IN_PROGRESS";
            break;
        case eOAIAssessmentRunState::COLLECTING_DATA:
            val = "COLLECTING_DATA";
            break;
        case eOAIAssessmentRunState::STOP_DATA_COLLECTION_PENDING:
            val = "STOP_DATA_COLLECTION_PENDING";
            break;
        case eOAIAssessmentRunState::DATA_COLLECTED:
            val = "DATA_COLLECTED";
            break;
        case eOAIAssessmentRunState::START_EVALUATING_RULES_PENDING:
            val = "START_EVALUATING_RULES_PENDING";
            break;
        case eOAIAssessmentRunState::EVALUATING_RULES:
            val = "EVALUATING_RULES";
            break;
        case eOAIAssessmentRunState::FAILED:
            val = "FAILED";
            break;
        case eOAIAssessmentRunState::ERROR:
            val = "ERROR";
            break;
        case eOAIAssessmentRunState::COMPLETED:
            val = "COMPLETED";
            break;
        case eOAIAssessmentRunState::COMPLETED_WITH_ERRORS:
            val = "COMPLETED_WITH_ERRORS";
            break;
        case eOAIAssessmentRunState::CANCELED:
            val = "CANCELED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAssessmentRunState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAssessmentRunState::eOAIAssessmentRunState OAIAssessmentRunState::getValue() const {
    return m_value;
}

void OAIAssessmentRunState::setValue(const OAIAssessmentRunState::eOAIAssessmentRunState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAssessmentRunState::isSet() const {
    
    return m_value_isSet;
}

bool OAIAssessmentRunState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
