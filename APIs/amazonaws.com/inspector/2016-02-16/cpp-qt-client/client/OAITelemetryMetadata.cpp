/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITelemetryMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITelemetryMetadata::OAITelemetryMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITelemetryMetadata::OAITelemetryMetadata() {
    this->initializeModel();
}

OAITelemetryMetadata::~OAITelemetryMetadata() {}

void OAITelemetryMetadata::initializeModel() {

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_data_size_isSet = false;
    m_data_size_isValid = false;
}

void OAITelemetryMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITelemetryMetadata::fromJsonObject(QJsonObject json) {

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("messageType")]);
    m_message_type_isSet = !json[QString("messageType")].isNull() && m_message_type_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_data_size_isValid = ::OpenAPI::fromJsonValue(m_data_size, json[QString("dataSize")]);
    m_data_size_isSet = !json[QString("dataSize")].isNull() && m_data_size_isValid;
}

QString OAITelemetryMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITelemetryMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_message_type_isSet) {
        obj.insert(QString("messageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_data_size_isSet) {
        obj.insert(QString("dataSize"), ::OpenAPI::toJsonValue(m_data_size));
    }
    return obj;
}

QString OAITelemetryMetadata::getMessageType() const {
    return m_message_type;
}
void OAITelemetryMetadata::setMessageType(const QString &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAITelemetryMetadata::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAITelemetryMetadata::is_message_type_Valid() const{
    return m_message_type_isValid;
}

qint32 OAITelemetryMetadata::getCount() const {
    return m_count;
}
void OAITelemetryMetadata::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAITelemetryMetadata::is_count_Set() const{
    return m_count_isSet;
}

bool OAITelemetryMetadata::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAITelemetryMetadata::getDataSize() const {
    return m_data_size;
}
void OAITelemetryMetadata::setDataSize(const qint32 &data_size) {
    m_data_size = data_size;
    m_data_size_isSet = true;
}

bool OAITelemetryMetadata::is_data_size_Set() const{
    return m_data_size_isSet;
}

bool OAITelemetryMetadata::is_data_size_Valid() const{
    return m_data_size_isValid;
}

bool OAITelemetryMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITelemetryMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_type_isValid && m_count_isValid && true;
}

} // namespace OpenAPI
