/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentFilter::OAIAgentFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentFilter::OAIAgentFilter() {
    this->initializeModel();
}

OAIAgentFilter::~OAIAgentFilter() {}

void OAIAgentFilter::initializeModel() {

    m_agent_healths_isSet = false;
    m_agent_healths_isValid = false;

    m_agent_health_codes_isSet = false;
    m_agent_health_codes_isValid = false;
}

void OAIAgentFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentFilter::fromJsonObject(QJsonObject json) {

    m_agent_healths_isValid = ::OpenAPI::fromJsonValue(m_agent_healths, json[QString("agentHealths")]);
    m_agent_healths_isSet = !json[QString("agentHealths")].isNull() && m_agent_healths_isValid;

    m_agent_health_codes_isValid = ::OpenAPI::fromJsonValue(m_agent_health_codes, json[QString("agentHealthCodes")]);
    m_agent_health_codes_isSet = !json[QString("agentHealthCodes")].isNull() && m_agent_health_codes_isValid;
}

QString OAIAgentFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_healths.isSet()) {
        obj.insert(QString("agentHealths"), ::OpenAPI::toJsonValue(m_agent_healths));
    }
    if (m_agent_health_codes.isSet()) {
        obj.insert(QString("agentHealthCodes"), ::OpenAPI::toJsonValue(m_agent_health_codes));
    }
    return obj;
}

QList OAIAgentFilter::getAgentHealths() const {
    return m_agent_healths;
}
void OAIAgentFilter::setAgentHealths(const QList &agent_healths) {
    m_agent_healths = agent_healths;
    m_agent_healths_isSet = true;
}

bool OAIAgentFilter::is_agent_healths_Set() const{
    return m_agent_healths_isSet;
}

bool OAIAgentFilter::is_agent_healths_Valid() const{
    return m_agent_healths_isValid;
}

QList OAIAgentFilter::getAgentHealthCodes() const {
    return m_agent_health_codes;
}
void OAIAgentFilter::setAgentHealthCodes(const QList &agent_health_codes) {
    m_agent_health_codes = agent_health_codes;
    m_agent_health_codes_isSet = true;
}

bool OAIAgentFilter::is_agent_health_codes_Set() const{
    return m_agent_health_codes_isSet;
}

bool OAIAgentFilter::is_agent_health_codes_Valid() const{
    return m_agent_health_codes_isValid;
}

bool OAIAgentFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_healths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_health_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agent_healths_isValid && m_agent_health_codes_isValid && true;
}

} // namespace OpenAPI
