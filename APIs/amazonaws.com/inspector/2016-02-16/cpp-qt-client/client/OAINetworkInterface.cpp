/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkInterface::OAINetworkInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkInterface::OAINetworkInterface() {
    this->initializeModel();
}

OAINetworkInterface::~OAINetworkInterface() {}

void OAINetworkInterface::initializeModel() {

    m_network_interface_id_isSet = false;
    m_network_interface_id_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;

    m_private_dns_name_isSet = false;
    m_private_dns_name_isValid = false;

    m_private_ip_address_isSet = false;
    m_private_ip_address_isValid = false;

    m_private_ip_addresses_isSet = false;
    m_private_ip_addresses_isValid = false;

    m_public_dns_name_isSet = false;
    m_public_dns_name_isValid = false;

    m_public_ip_isSet = false;
    m_public_ip_isValid = false;

    m_ipv6_addresses_isSet = false;
    m_ipv6_addresses_isValid = false;

    m_security_groups_isSet = false;
    m_security_groups_isValid = false;
}

void OAINetworkInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkInterface::fromJsonObject(QJsonObject json) {

    m_network_interface_id_isValid = ::OpenAPI::fromJsonValue(m_network_interface_id, json[QString("networkInterfaceId")]);
    m_network_interface_id_isSet = !json[QString("networkInterfaceId")].isNull() && m_network_interface_id_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("vpcId")]);
    m_vpc_id_isSet = !json[QString("vpcId")].isNull() && m_vpc_id_isValid;

    m_private_dns_name_isValid = ::OpenAPI::fromJsonValue(m_private_dns_name, json[QString("privateDnsName")]);
    m_private_dns_name_isSet = !json[QString("privateDnsName")].isNull() && m_private_dns_name_isValid;

    m_private_ip_address_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address, json[QString("privateIpAddress")]);
    m_private_ip_address_isSet = !json[QString("privateIpAddress")].isNull() && m_private_ip_address_isValid;

    m_private_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_private_ip_addresses, json[QString("privateIpAddresses")]);
    m_private_ip_addresses_isSet = !json[QString("privateIpAddresses")].isNull() && m_private_ip_addresses_isValid;

    m_public_dns_name_isValid = ::OpenAPI::fromJsonValue(m_public_dns_name, json[QString("publicDnsName")]);
    m_public_dns_name_isSet = !json[QString("publicDnsName")].isNull() && m_public_dns_name_isValid;

    m_public_ip_isValid = ::OpenAPI::fromJsonValue(m_public_ip, json[QString("publicIp")]);
    m_public_ip_isSet = !json[QString("publicIp")].isNull() && m_public_ip_isValid;

    m_ipv6_addresses_isValid = ::OpenAPI::fromJsonValue(m_ipv6_addresses, json[QString("ipv6Addresses")]);
    m_ipv6_addresses_isSet = !json[QString("ipv6Addresses")].isNull() && m_ipv6_addresses_isValid;

    m_security_groups_isValid = ::OpenAPI::fromJsonValue(m_security_groups, json[QString("securityGroups")]);
    m_security_groups_isSet = !json[QString("securityGroups")].isNull() && m_security_groups_isValid;
}

QString OAINetworkInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_network_interface_id_isSet) {
        obj.insert(QString("networkInterfaceId"), ::OpenAPI::toJsonValue(m_network_interface_id));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("vpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    if (m_private_dns_name_isSet) {
        obj.insert(QString("privateDnsName"), ::OpenAPI::toJsonValue(m_private_dns_name));
    }
    if (m_private_ip_address_isSet) {
        obj.insert(QString("privateIpAddress"), ::OpenAPI::toJsonValue(m_private_ip_address));
    }
    if (m_private_ip_addresses.isSet()) {
        obj.insert(QString("privateIpAddresses"), ::OpenAPI::toJsonValue(m_private_ip_addresses));
    }
    if (m_public_dns_name_isSet) {
        obj.insert(QString("publicDnsName"), ::OpenAPI::toJsonValue(m_public_dns_name));
    }
    if (m_public_ip_isSet) {
        obj.insert(QString("publicIp"), ::OpenAPI::toJsonValue(m_public_ip));
    }
    if (m_ipv6_addresses.isSet()) {
        obj.insert(QString("ipv6Addresses"), ::OpenAPI::toJsonValue(m_ipv6_addresses));
    }
    if (m_security_groups.isSet()) {
        obj.insert(QString("securityGroups"), ::OpenAPI::toJsonValue(m_security_groups));
    }
    return obj;
}

QString OAINetworkInterface::getNetworkInterfaceId() const {
    return m_network_interface_id;
}
void OAINetworkInterface::setNetworkInterfaceId(const QString &network_interface_id) {
    m_network_interface_id = network_interface_id;
    m_network_interface_id_isSet = true;
}

bool OAINetworkInterface::is_network_interface_id_Set() const{
    return m_network_interface_id_isSet;
}

bool OAINetworkInterface::is_network_interface_id_Valid() const{
    return m_network_interface_id_isValid;
}

QString OAINetworkInterface::getSubnetId() const {
    return m_subnet_id;
}
void OAINetworkInterface::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAINetworkInterface::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAINetworkInterface::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

QString OAINetworkInterface::getVpcId() const {
    return m_vpc_id;
}
void OAINetworkInterface::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAINetworkInterface::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAINetworkInterface::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

QString OAINetworkInterface::getPrivateDnsName() const {
    return m_private_dns_name;
}
void OAINetworkInterface::setPrivateDnsName(const QString &private_dns_name) {
    m_private_dns_name = private_dns_name;
    m_private_dns_name_isSet = true;
}

bool OAINetworkInterface::is_private_dns_name_Set() const{
    return m_private_dns_name_isSet;
}

bool OAINetworkInterface::is_private_dns_name_Valid() const{
    return m_private_dns_name_isValid;
}

QString OAINetworkInterface::getPrivateIpAddress() const {
    return m_private_ip_address;
}
void OAINetworkInterface::setPrivateIpAddress(const QString &private_ip_address) {
    m_private_ip_address = private_ip_address;
    m_private_ip_address_isSet = true;
}

bool OAINetworkInterface::is_private_ip_address_Set() const{
    return m_private_ip_address_isSet;
}

bool OAINetworkInterface::is_private_ip_address_Valid() const{
    return m_private_ip_address_isValid;
}

QList OAINetworkInterface::getPrivateIpAddresses() const {
    return m_private_ip_addresses;
}
void OAINetworkInterface::setPrivateIpAddresses(const QList &private_ip_addresses) {
    m_private_ip_addresses = private_ip_addresses;
    m_private_ip_addresses_isSet = true;
}

bool OAINetworkInterface::is_private_ip_addresses_Set() const{
    return m_private_ip_addresses_isSet;
}

bool OAINetworkInterface::is_private_ip_addresses_Valid() const{
    return m_private_ip_addresses_isValid;
}

QString OAINetworkInterface::getPublicDnsName() const {
    return m_public_dns_name;
}
void OAINetworkInterface::setPublicDnsName(const QString &public_dns_name) {
    m_public_dns_name = public_dns_name;
    m_public_dns_name_isSet = true;
}

bool OAINetworkInterface::is_public_dns_name_Set() const{
    return m_public_dns_name_isSet;
}

bool OAINetworkInterface::is_public_dns_name_Valid() const{
    return m_public_dns_name_isValid;
}

QString OAINetworkInterface::getPublicIp() const {
    return m_public_ip;
}
void OAINetworkInterface::setPublicIp(const QString &public_ip) {
    m_public_ip = public_ip;
    m_public_ip_isSet = true;
}

bool OAINetworkInterface::is_public_ip_Set() const{
    return m_public_ip_isSet;
}

bool OAINetworkInterface::is_public_ip_Valid() const{
    return m_public_ip_isValid;
}

QList OAINetworkInterface::getIpv6Addresses() const {
    return m_ipv6_addresses;
}
void OAINetworkInterface::setIpv6Addresses(const QList &ipv6_addresses) {
    m_ipv6_addresses = ipv6_addresses;
    m_ipv6_addresses_isSet = true;
}

bool OAINetworkInterface::is_ipv6_addresses_Set() const{
    return m_ipv6_addresses_isSet;
}

bool OAINetworkInterface::is_ipv6_addresses_Valid() const{
    return m_ipv6_addresses_isValid;
}

QList OAINetworkInterface::getSecurityGroups() const {
    return m_security_groups;
}
void OAINetworkInterface::setSecurityGroups(const QList &security_groups) {
    m_security_groups = security_groups;
    m_security_groups_isSet = true;
}

bool OAINetworkInterface::is_security_groups_Set() const{
    return m_security_groups_isSet;
}

bool OAINetworkInterface::is_security_groups_Valid() const{
    return m_security_groups_isValid;
}

bool OAINetworkInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_interface_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
