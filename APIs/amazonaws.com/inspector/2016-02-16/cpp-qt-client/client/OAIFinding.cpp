/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinding::OAIFinding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinding::OAIFinding() {
    this->initializeModel();
}

OAIFinding::~OAIFinding() {}

void OAIFinding::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_service_attributes_isSet = false;
    m_service_attributes_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_asset_attributes_isSet = false;
    m_asset_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_recommendation_isSet = false;
    m_recommendation_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_numeric_severity_isSet = false;
    m_numeric_severity_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_indicator_of_compromise_isSet = false;
    m_indicator_of_compromise_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_user_attributes_isSet = false;
    m_user_attributes_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIFinding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinding::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_service_attributes_isValid = ::OpenAPI::fromJsonValue(m_service_attributes, json[QString("serviceAttributes")]);
    m_service_attributes_isSet = !json[QString("serviceAttributes")].isNull() && m_service_attributes_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("assetType")]);
    m_asset_type_isSet = !json[QString("assetType")].isNull() && m_asset_type_isValid;

    m_asset_attributes_isValid = ::OpenAPI::fromJsonValue(m_asset_attributes, json[QString("assetAttributes")]);
    m_asset_attributes_isSet = !json[QString("assetAttributes")].isNull() && m_asset_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_recommendation_isValid = ::OpenAPI::fromJsonValue(m_recommendation, json[QString("recommendation")]);
    m_recommendation_isSet = !json[QString("recommendation")].isNull() && m_recommendation_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_numeric_severity_isValid = ::OpenAPI::fromJsonValue(m_numeric_severity, json[QString("numericSeverity")]);
    m_numeric_severity_isSet = !json[QString("numericSeverity")].isNull() && m_numeric_severity_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_indicator_of_compromise_isValid = ::OpenAPI::fromJsonValue(m_indicator_of_compromise, json[QString("indicatorOfCompromise")]);
    m_indicator_of_compromise_isSet = !json[QString("indicatorOfCompromise")].isNull() && m_indicator_of_compromise_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_user_attributes_isValid = ::OpenAPI::fromJsonValue(m_user_attributes, json[QString("userAttributes")]);
    m_user_attributes_isSet = !json[QString("userAttributes")].isNull() && m_user_attributes_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIFinding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinding::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_service_attributes.isSet()) {
        obj.insert(QString("serviceAttributes"), ::OpenAPI::toJsonValue(m_service_attributes));
    }
    if (m_asset_type.isSet()) {
        obj.insert(QString("assetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_asset_attributes.isSet()) {
        obj.insert(QString("assetAttributes"), ::OpenAPI::toJsonValue(m_asset_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_recommendation_isSet) {
        obj.insert(QString("recommendation"), ::OpenAPI::toJsonValue(m_recommendation));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_numeric_severity_isSet) {
        obj.insert(QString("numericSeverity"), ::OpenAPI::toJsonValue(m_numeric_severity));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_indicator_of_compromise_isSet) {
        obj.insert(QString("indicatorOfCompromise"), ::OpenAPI::toJsonValue(m_indicator_of_compromise));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_user_attributes.isSet()) {
        obj.insert(QString("userAttributes"), ::OpenAPI::toJsonValue(m_user_attributes));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIFinding::getArn() const {
    return m_arn;
}
void OAIFinding::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIFinding::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIFinding::is_arn_Valid() const{
    return m_arn_isValid;
}

qint32 OAIFinding::getSchemaVersion() const {
    return m_schema_version;
}
void OAIFinding::setSchemaVersion(const qint32 &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIFinding::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIFinding::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

QString OAIFinding::getService() const {
    return m_service;
}
void OAIFinding::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIFinding::is_service_Set() const{
    return m_service_isSet;
}

bool OAIFinding::is_service_Valid() const{
    return m_service_isValid;
}

OAIFinding_serviceAttributes OAIFinding::getServiceAttributes() const {
    return m_service_attributes;
}
void OAIFinding::setServiceAttributes(const OAIFinding_serviceAttributes &service_attributes) {
    m_service_attributes = service_attributes;
    m_service_attributes_isSet = true;
}

bool OAIFinding::is_service_attributes_Set() const{
    return m_service_attributes_isSet;
}

bool OAIFinding::is_service_attributes_Valid() const{
    return m_service_attributes_isValid;
}

OAIAssetType OAIFinding::getAssetType() const {
    return m_asset_type;
}
void OAIFinding::setAssetType(const OAIAssetType &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAIFinding::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAIFinding::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

OAIFinding_assetAttributes OAIFinding::getAssetAttributes() const {
    return m_asset_attributes;
}
void OAIFinding::setAssetAttributes(const OAIFinding_assetAttributes &asset_attributes) {
    m_asset_attributes = asset_attributes;
    m_asset_attributes_isSet = true;
}

bool OAIFinding::is_asset_attributes_Set() const{
    return m_asset_attributes_isSet;
}

bool OAIFinding::is_asset_attributes_Valid() const{
    return m_asset_attributes_isValid;
}

QString OAIFinding::getId() const {
    return m_id;
}
void OAIFinding::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFinding::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFinding::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFinding::getTitle() const {
    return m_title;
}
void OAIFinding::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIFinding::is_title_Set() const{
    return m_title_isSet;
}

bool OAIFinding::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIFinding::getDescription() const {
    return m_description;
}
void OAIFinding::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFinding::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFinding::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFinding::getRecommendation() const {
    return m_recommendation;
}
void OAIFinding::setRecommendation(const QString &recommendation) {
    m_recommendation = recommendation;
    m_recommendation_isSet = true;
}

bool OAIFinding::is_recommendation_Set() const{
    return m_recommendation_isSet;
}

bool OAIFinding::is_recommendation_Valid() const{
    return m_recommendation_isValid;
}

OAISeverity OAIFinding::getSeverity() const {
    return m_severity;
}
void OAIFinding::setSeverity(const OAISeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIFinding::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIFinding::is_severity_Valid() const{
    return m_severity_isValid;
}

double OAIFinding::getNumericSeverity() const {
    return m_numeric_severity;
}
void OAIFinding::setNumericSeverity(const double &numeric_severity) {
    m_numeric_severity = numeric_severity;
    m_numeric_severity_isSet = true;
}

bool OAIFinding::is_numeric_severity_Set() const{
    return m_numeric_severity_isSet;
}

bool OAIFinding::is_numeric_severity_Valid() const{
    return m_numeric_severity_isValid;
}

qint32 OAIFinding::getConfidence() const {
    return m_confidence;
}
void OAIFinding::setConfidence(const qint32 &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIFinding::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIFinding::is_confidence_Valid() const{
    return m_confidence_isValid;
}

bool OAIFinding::getIndicatorOfCompromise() const {
    return m_indicator_of_compromise;
}
void OAIFinding::setIndicatorOfCompromise(const bool &indicator_of_compromise) {
    m_indicator_of_compromise = indicator_of_compromise;
    m_indicator_of_compromise_isSet = true;
}

bool OAIFinding::is_indicator_of_compromise_Set() const{
    return m_indicator_of_compromise_isSet;
}

bool OAIFinding::is_indicator_of_compromise_Valid() const{
    return m_indicator_of_compromise_isValid;
}

QList OAIFinding::getAttributes() const {
    return m_attributes;
}
void OAIFinding::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIFinding::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIFinding::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList OAIFinding::getUserAttributes() const {
    return m_user_attributes;
}
void OAIFinding::setUserAttributes(const QList &user_attributes) {
    m_user_attributes = user_attributes;
    m_user_attributes_isSet = true;
}

bool OAIFinding::is_user_attributes_Set() const{
    return m_user_attributes_isSet;
}

bool OAIFinding::is_user_attributes_Valid() const{
    return m_user_attributes_isValid;
}

QDateTime OAIFinding::getCreatedAt() const {
    return m_created_at;
}
void OAIFinding::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFinding::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFinding::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIFinding::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFinding::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFinding::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFinding::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIFinding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numeric_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indicator_of_compromise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinding::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_attributes_isValid && m_user_attributes_isValid && m_created_at_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
