/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentRunAgent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentRunAgent::OAIAssessmentRunAgent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentRunAgent::OAIAssessmentRunAgent() {
    this->initializeModel();
}

OAIAssessmentRunAgent::~OAIAssessmentRunAgent() {}

void OAIAssessmentRunAgent::initializeModel() {

    m_agent_id_isSet = false;
    m_agent_id_isValid = false;

    m_assessment_run_arn_isSet = false;
    m_assessment_run_arn_isValid = false;

    m_agent_health_isSet = false;
    m_agent_health_isValid = false;

    m_agent_health_code_isSet = false;
    m_agent_health_code_isValid = false;

    m_agent_health_details_isSet = false;
    m_agent_health_details_isValid = false;

    m_auto_scaling_group_isSet = false;
    m_auto_scaling_group_isValid = false;

    m_telemetry_metadata_isSet = false;
    m_telemetry_metadata_isValid = false;
}

void OAIAssessmentRunAgent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentRunAgent::fromJsonObject(QJsonObject json) {

    m_agent_id_isValid = ::OpenAPI::fromJsonValue(m_agent_id, json[QString("agentId")]);
    m_agent_id_isSet = !json[QString("agentId")].isNull() && m_agent_id_isValid;

    m_assessment_run_arn_isValid = ::OpenAPI::fromJsonValue(m_assessment_run_arn, json[QString("assessmentRunArn")]);
    m_assessment_run_arn_isSet = !json[QString("assessmentRunArn")].isNull() && m_assessment_run_arn_isValid;

    m_agent_health_isValid = ::OpenAPI::fromJsonValue(m_agent_health, json[QString("agentHealth")]);
    m_agent_health_isSet = !json[QString("agentHealth")].isNull() && m_agent_health_isValid;

    m_agent_health_code_isValid = ::OpenAPI::fromJsonValue(m_agent_health_code, json[QString("agentHealthCode")]);
    m_agent_health_code_isSet = !json[QString("agentHealthCode")].isNull() && m_agent_health_code_isValid;

    m_agent_health_details_isValid = ::OpenAPI::fromJsonValue(m_agent_health_details, json[QString("agentHealthDetails")]);
    m_agent_health_details_isSet = !json[QString("agentHealthDetails")].isNull() && m_agent_health_details_isValid;

    m_auto_scaling_group_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group, json[QString("autoScalingGroup")]);
    m_auto_scaling_group_isSet = !json[QString("autoScalingGroup")].isNull() && m_auto_scaling_group_isValid;

    m_telemetry_metadata_isValid = ::OpenAPI::fromJsonValue(m_telemetry_metadata, json[QString("telemetryMetadata")]);
    m_telemetry_metadata_isSet = !json[QString("telemetryMetadata")].isNull() && m_telemetry_metadata_isValid;
}

QString OAIAssessmentRunAgent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentRunAgent::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_id_isSet) {
        obj.insert(QString("agentId"), ::OpenAPI::toJsonValue(m_agent_id));
    }
    if (m_assessment_run_arn_isSet) {
        obj.insert(QString("assessmentRunArn"), ::OpenAPI::toJsonValue(m_assessment_run_arn));
    }
    if (m_agent_health.isSet()) {
        obj.insert(QString("agentHealth"), ::OpenAPI::toJsonValue(m_agent_health));
    }
    if (m_agent_health_code.isSet()) {
        obj.insert(QString("agentHealthCode"), ::OpenAPI::toJsonValue(m_agent_health_code));
    }
    if (m_agent_health_details_isSet) {
        obj.insert(QString("agentHealthDetails"), ::OpenAPI::toJsonValue(m_agent_health_details));
    }
    if (m_auto_scaling_group_isSet) {
        obj.insert(QString("autoScalingGroup"), ::OpenAPI::toJsonValue(m_auto_scaling_group));
    }
    if (m_telemetry_metadata.isSet()) {
        obj.insert(QString("telemetryMetadata"), ::OpenAPI::toJsonValue(m_telemetry_metadata));
    }
    return obj;
}

QString OAIAssessmentRunAgent::getAgentId() const {
    return m_agent_id;
}
void OAIAssessmentRunAgent::setAgentId(const QString &agent_id) {
    m_agent_id = agent_id;
    m_agent_id_isSet = true;
}

bool OAIAssessmentRunAgent::is_agent_id_Set() const{
    return m_agent_id_isSet;
}

bool OAIAssessmentRunAgent::is_agent_id_Valid() const{
    return m_agent_id_isValid;
}

QString OAIAssessmentRunAgent::getAssessmentRunArn() const {
    return m_assessment_run_arn;
}
void OAIAssessmentRunAgent::setAssessmentRunArn(const QString &assessment_run_arn) {
    m_assessment_run_arn = assessment_run_arn;
    m_assessment_run_arn_isSet = true;
}

bool OAIAssessmentRunAgent::is_assessment_run_arn_Set() const{
    return m_assessment_run_arn_isSet;
}

bool OAIAssessmentRunAgent::is_assessment_run_arn_Valid() const{
    return m_assessment_run_arn_isValid;
}

OAIAgentHealth OAIAssessmentRunAgent::getAgentHealth() const {
    return m_agent_health;
}
void OAIAssessmentRunAgent::setAgentHealth(const OAIAgentHealth &agent_health) {
    m_agent_health = agent_health;
    m_agent_health_isSet = true;
}

bool OAIAssessmentRunAgent::is_agent_health_Set() const{
    return m_agent_health_isSet;
}

bool OAIAssessmentRunAgent::is_agent_health_Valid() const{
    return m_agent_health_isValid;
}

OAIAgentHealthCode OAIAssessmentRunAgent::getAgentHealthCode() const {
    return m_agent_health_code;
}
void OAIAssessmentRunAgent::setAgentHealthCode(const OAIAgentHealthCode &agent_health_code) {
    m_agent_health_code = agent_health_code;
    m_agent_health_code_isSet = true;
}

bool OAIAssessmentRunAgent::is_agent_health_code_Set() const{
    return m_agent_health_code_isSet;
}

bool OAIAssessmentRunAgent::is_agent_health_code_Valid() const{
    return m_agent_health_code_isValid;
}

QString OAIAssessmentRunAgent::getAgentHealthDetails() const {
    return m_agent_health_details;
}
void OAIAssessmentRunAgent::setAgentHealthDetails(const QString &agent_health_details) {
    m_agent_health_details = agent_health_details;
    m_agent_health_details_isSet = true;
}

bool OAIAssessmentRunAgent::is_agent_health_details_Set() const{
    return m_agent_health_details_isSet;
}

bool OAIAssessmentRunAgent::is_agent_health_details_Valid() const{
    return m_agent_health_details_isValid;
}

QString OAIAssessmentRunAgent::getAutoScalingGroup() const {
    return m_auto_scaling_group;
}
void OAIAssessmentRunAgent::setAutoScalingGroup(const QString &auto_scaling_group) {
    m_auto_scaling_group = auto_scaling_group;
    m_auto_scaling_group_isSet = true;
}

bool OAIAssessmentRunAgent::is_auto_scaling_group_Set() const{
    return m_auto_scaling_group_isSet;
}

bool OAIAssessmentRunAgent::is_auto_scaling_group_Valid() const{
    return m_auto_scaling_group_isValid;
}

QList OAIAssessmentRunAgent::getTelemetryMetadata() const {
    return m_telemetry_metadata;
}
void OAIAssessmentRunAgent::setTelemetryMetadata(const QList &telemetry_metadata) {
    m_telemetry_metadata = telemetry_metadata;
    m_telemetry_metadata_isSet = true;
}

bool OAIAssessmentRunAgent::is_telemetry_metadata_Set() const{
    return m_telemetry_metadata_isSet;
}

bool OAIAssessmentRunAgent::is_telemetry_metadata_Valid() const{
    return m_telemetry_metadata_isValid;
}

bool OAIAssessmentRunAgent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_run_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_health_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_health_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telemetry_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentRunAgent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agent_id_isValid && m_assessment_run_arn_isValid && m_agent_health_isValid && m_agent_health_code_isValid && m_telemetry_metadata_isValid && true;
}

} // namespace OpenAPI
