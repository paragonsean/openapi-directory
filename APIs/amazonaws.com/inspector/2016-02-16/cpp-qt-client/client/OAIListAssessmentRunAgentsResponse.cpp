/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAssessmentRunAgentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAssessmentRunAgentsResponse::OAIListAssessmentRunAgentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAssessmentRunAgentsResponse::OAIListAssessmentRunAgentsResponse() {
    this->initializeModel();
}

OAIListAssessmentRunAgentsResponse::~OAIListAssessmentRunAgentsResponse() {}

void OAIListAssessmentRunAgentsResponse::initializeModel() {

    m_assessment_run_agents_isSet = false;
    m_assessment_run_agents_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAssessmentRunAgentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAssessmentRunAgentsResponse::fromJsonObject(QJsonObject json) {

    m_assessment_run_agents_isValid = ::OpenAPI::fromJsonValue(m_assessment_run_agents, json[QString("assessmentRunAgents")]);
    m_assessment_run_agents_isSet = !json[QString("assessmentRunAgents")].isNull() && m_assessment_run_agents_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAssessmentRunAgentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAssessmentRunAgentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_run_agents.isSet()) {
        obj.insert(QString("assessmentRunAgents"), ::OpenAPI::toJsonValue(m_assessment_run_agents));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAssessmentRunAgentsResponse::getAssessmentRunAgents() const {
    return m_assessment_run_agents;
}
void OAIListAssessmentRunAgentsResponse::setAssessmentRunAgents(const QList &assessment_run_agents) {
    m_assessment_run_agents = assessment_run_agents;
    m_assessment_run_agents_isSet = true;
}

bool OAIListAssessmentRunAgentsResponse::is_assessment_run_agents_Set() const{
    return m_assessment_run_agents_isSet;
}

bool OAIListAssessmentRunAgentsResponse::is_assessment_run_agents_Valid() const{
    return m_assessment_run_agents_isValid;
}

QString OAIListAssessmentRunAgentsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAssessmentRunAgentsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAssessmentRunAgentsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAssessmentRunAgentsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAssessmentRunAgentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_run_agents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAssessmentRunAgentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessment_run_agents_isValid && true;
}

} // namespace OpenAPI
