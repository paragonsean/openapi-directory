/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFindingsRequest_filter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFindingsRequest_filter::OAIListFindingsRequest_filter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFindingsRequest_filter::OAIListFindingsRequest_filter() {
    this->initializeModel();
}

OAIListFindingsRequest_filter::~OAIListFindingsRequest_filter() {}

void OAIListFindingsRequest_filter::initializeModel() {

    m_agent_ids_isSet = false;
    m_agent_ids_isValid = false;

    m_auto_scaling_groups_isSet = false;
    m_auto_scaling_groups_isValid = false;

    m_rule_names_isSet = false;
    m_rule_names_isValid = false;

    m_severities_isSet = false;
    m_severities_isValid = false;

    m_rules_package_arns_isSet = false;
    m_rules_package_arns_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_user_attributes_isSet = false;
    m_user_attributes_isValid = false;

    m_creation_time_range_isSet = false;
    m_creation_time_range_isValid = false;
}

void OAIListFindingsRequest_filter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFindingsRequest_filter::fromJsonObject(QJsonObject json) {

    m_agent_ids_isValid = ::OpenAPI::fromJsonValue(m_agent_ids, json[QString("agentIds")]);
    m_agent_ids_isSet = !json[QString("agentIds")].isNull() && m_agent_ids_isValid;

    m_auto_scaling_groups_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_groups, json[QString("autoScalingGroups")]);
    m_auto_scaling_groups_isSet = !json[QString("autoScalingGroups")].isNull() && m_auto_scaling_groups_isValid;

    m_rule_names_isValid = ::OpenAPI::fromJsonValue(m_rule_names, json[QString("ruleNames")]);
    m_rule_names_isSet = !json[QString("ruleNames")].isNull() && m_rule_names_isValid;

    m_severities_isValid = ::OpenAPI::fromJsonValue(m_severities, json[QString("severities")]);
    m_severities_isSet = !json[QString("severities")].isNull() && m_severities_isValid;

    m_rules_package_arns_isValid = ::OpenAPI::fromJsonValue(m_rules_package_arns, json[QString("rulesPackageArns")]);
    m_rules_package_arns_isSet = !json[QString("rulesPackageArns")].isNull() && m_rules_package_arns_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_user_attributes_isValid = ::OpenAPI::fromJsonValue(m_user_attributes, json[QString("userAttributes")]);
    m_user_attributes_isSet = !json[QString("userAttributes")].isNull() && m_user_attributes_isValid;

    m_creation_time_range_isValid = ::OpenAPI::fromJsonValue(m_creation_time_range, json[QString("creationTimeRange")]);
    m_creation_time_range_isSet = !json[QString("creationTimeRange")].isNull() && m_creation_time_range_isValid;
}

QString OAIListFindingsRequest_filter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFindingsRequest_filter::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_ids.isSet()) {
        obj.insert(QString("agentIds"), ::OpenAPI::toJsonValue(m_agent_ids));
    }
    if (m_auto_scaling_groups.isSet()) {
        obj.insert(QString("autoScalingGroups"), ::OpenAPI::toJsonValue(m_auto_scaling_groups));
    }
    if (m_rule_names.isSet()) {
        obj.insert(QString("ruleNames"), ::OpenAPI::toJsonValue(m_rule_names));
    }
    if (m_severities.isSet()) {
        obj.insert(QString("severities"), ::OpenAPI::toJsonValue(m_severities));
    }
    if (m_rules_package_arns.isSet()) {
        obj.insert(QString("rulesPackageArns"), ::OpenAPI::toJsonValue(m_rules_package_arns));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_user_attributes.isSet()) {
        obj.insert(QString("userAttributes"), ::OpenAPI::toJsonValue(m_user_attributes));
    }
    if (m_creation_time_range.isSet()) {
        obj.insert(QString("creationTimeRange"), ::OpenAPI::toJsonValue(m_creation_time_range));
    }
    return obj;
}

QList OAIListFindingsRequest_filter::getAgentIds() const {
    return m_agent_ids;
}
void OAIListFindingsRequest_filter::setAgentIds(const QList &agent_ids) {
    m_agent_ids = agent_ids;
    m_agent_ids_isSet = true;
}

bool OAIListFindingsRequest_filter::is_agent_ids_Set() const{
    return m_agent_ids_isSet;
}

bool OAIListFindingsRequest_filter::is_agent_ids_Valid() const{
    return m_agent_ids_isValid;
}

QList OAIListFindingsRequest_filter::getAutoScalingGroups() const {
    return m_auto_scaling_groups;
}
void OAIListFindingsRequest_filter::setAutoScalingGroups(const QList &auto_scaling_groups) {
    m_auto_scaling_groups = auto_scaling_groups;
    m_auto_scaling_groups_isSet = true;
}

bool OAIListFindingsRequest_filter::is_auto_scaling_groups_Set() const{
    return m_auto_scaling_groups_isSet;
}

bool OAIListFindingsRequest_filter::is_auto_scaling_groups_Valid() const{
    return m_auto_scaling_groups_isValid;
}

QList OAIListFindingsRequest_filter::getRuleNames() const {
    return m_rule_names;
}
void OAIListFindingsRequest_filter::setRuleNames(const QList &rule_names) {
    m_rule_names = rule_names;
    m_rule_names_isSet = true;
}

bool OAIListFindingsRequest_filter::is_rule_names_Set() const{
    return m_rule_names_isSet;
}

bool OAIListFindingsRequest_filter::is_rule_names_Valid() const{
    return m_rule_names_isValid;
}

QList OAIListFindingsRequest_filter::getSeverities() const {
    return m_severities;
}
void OAIListFindingsRequest_filter::setSeverities(const QList &severities) {
    m_severities = severities;
    m_severities_isSet = true;
}

bool OAIListFindingsRequest_filter::is_severities_Set() const{
    return m_severities_isSet;
}

bool OAIListFindingsRequest_filter::is_severities_Valid() const{
    return m_severities_isValid;
}

QList OAIListFindingsRequest_filter::getRulesPackageArns() const {
    return m_rules_package_arns;
}
void OAIListFindingsRequest_filter::setRulesPackageArns(const QList &rules_package_arns) {
    m_rules_package_arns = rules_package_arns;
    m_rules_package_arns_isSet = true;
}

bool OAIListFindingsRequest_filter::is_rules_package_arns_Set() const{
    return m_rules_package_arns_isSet;
}

bool OAIListFindingsRequest_filter::is_rules_package_arns_Valid() const{
    return m_rules_package_arns_isValid;
}

QList OAIListFindingsRequest_filter::getAttributes() const {
    return m_attributes;
}
void OAIListFindingsRequest_filter::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIListFindingsRequest_filter::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIListFindingsRequest_filter::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList OAIListFindingsRequest_filter::getUserAttributes() const {
    return m_user_attributes;
}
void OAIListFindingsRequest_filter::setUserAttributes(const QList &user_attributes) {
    m_user_attributes = user_attributes;
    m_user_attributes_isSet = true;
}

bool OAIListFindingsRequest_filter::is_user_attributes_Set() const{
    return m_user_attributes_isSet;
}

bool OAIListFindingsRequest_filter::is_user_attributes_Valid() const{
    return m_user_attributes_isValid;
}

OAIFindingFilter_creationTimeRange OAIListFindingsRequest_filter::getCreationTimeRange() const {
    return m_creation_time_range;
}
void OAIListFindingsRequest_filter::setCreationTimeRange(const OAIFindingFilter_creationTimeRange &creation_time_range) {
    m_creation_time_range = creation_time_range;
    m_creation_time_range_isSet = true;
}

bool OAIListFindingsRequest_filter::is_creation_time_range_Set() const{
    return m_creation_time_range_isSet;
}

bool OAIListFindingsRequest_filter::is_creation_time_range_Valid() const{
    return m_creation_time_range_isValid;
}

bool OAIListFindingsRequest_filter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_package_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFindingsRequest_filter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
