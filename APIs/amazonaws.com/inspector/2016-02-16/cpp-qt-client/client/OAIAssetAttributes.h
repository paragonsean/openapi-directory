/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssetAttributes.h
 *
 * A collection of attributes of the host from which the finding is generated.
 */

#ifndef OAIAssetAttributes_H
#define OAIAssetAttributes_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAssetAttributes : public OAIObject {
public:
    OAIAssetAttributes();
    OAIAssetAttributes(QString json);
    ~OAIAssetAttributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getSchemaVersion() const;
    void setSchemaVersion(const qint32 &schema_version);
    bool is_schema_version_Set() const;
    bool is_schema_version_Valid() const;

    QString getAgentId() const;
    void setAgentId(const QString &agent_id);
    bool is_agent_id_Set() const;
    bool is_agent_id_Valid() const;

    QString getAutoScalingGroup() const;
    void setAutoScalingGroup(const QString &auto_scaling_group);
    bool is_auto_scaling_group_Set() const;
    bool is_auto_scaling_group_Valid() const;

    QString getAmiId() const;
    void setAmiId(const QString &ami_id);
    bool is_ami_id_Set() const;
    bool is_ami_id_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    QList getIpv4Addresses() const;
    void setIpv4Addresses(const QList &ipv4_addresses);
    bool is_ipv4_addresses_Set() const;
    bool is_ipv4_addresses_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList getNetworkInterfaces() const;
    void setNetworkInterfaces(const QList &network_interfaces);
    bool is_network_interfaces_Set() const;
    bool is_network_interfaces_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_schema_version;
    bool m_schema_version_isSet;
    bool m_schema_version_isValid;

    QString m_agent_id;
    bool m_agent_id_isSet;
    bool m_agent_id_isValid;

    QString m_auto_scaling_group;
    bool m_auto_scaling_group_isSet;
    bool m_auto_scaling_group_isValid;

    QString m_ami_id;
    bool m_ami_id_isSet;
    bool m_ami_id_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    QList m_ipv4_addresses;
    bool m_ipv4_addresses_isSet;
    bool m_ipv4_addresses_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList m_network_interfaces;
    bool m_network_interfaces_isSet;
    bool m_network_interfaces_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssetAttributes)

#endif // OAIAssetAttributes_H
