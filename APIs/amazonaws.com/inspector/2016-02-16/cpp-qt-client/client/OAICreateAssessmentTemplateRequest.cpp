/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssessmentTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssessmentTemplateRequest::OAICreateAssessmentTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssessmentTemplateRequest::OAICreateAssessmentTemplateRequest() {
    this->initializeModel();
}

OAICreateAssessmentTemplateRequest::~OAICreateAssessmentTemplateRequest() {}

void OAICreateAssessmentTemplateRequest::initializeModel() {

    m_assessment_target_arn_isSet = false;
    m_assessment_target_arn_isValid = false;

    m_assessment_template_name_isSet = false;
    m_assessment_template_name_isValid = false;

    m_duration_in_seconds_isSet = false;
    m_duration_in_seconds_isValid = false;

    m_rules_package_arns_isSet = false;
    m_rules_package_arns_isValid = false;

    m_user_attributes_for_findings_isSet = false;
    m_user_attributes_for_findings_isValid = false;
}

void OAICreateAssessmentTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssessmentTemplateRequest::fromJsonObject(QJsonObject json) {

    m_assessment_target_arn_isValid = ::OpenAPI::fromJsonValue(m_assessment_target_arn, json[QString("assessmentTargetArn")]);
    m_assessment_target_arn_isSet = !json[QString("assessmentTargetArn")].isNull() && m_assessment_target_arn_isValid;

    m_assessment_template_name_isValid = ::OpenAPI::fromJsonValue(m_assessment_template_name, json[QString("assessmentTemplateName")]);
    m_assessment_template_name_isSet = !json[QString("assessmentTemplateName")].isNull() && m_assessment_template_name_isValid;

    m_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_in_seconds, json[QString("durationInSeconds")]);
    m_duration_in_seconds_isSet = !json[QString("durationInSeconds")].isNull() && m_duration_in_seconds_isValid;

    m_rules_package_arns_isValid = ::OpenAPI::fromJsonValue(m_rules_package_arns, json[QString("rulesPackageArns")]);
    m_rules_package_arns_isSet = !json[QString("rulesPackageArns")].isNull() && m_rules_package_arns_isValid;

    m_user_attributes_for_findings_isValid = ::OpenAPI::fromJsonValue(m_user_attributes_for_findings, json[QString("userAttributesForFindings")]);
    m_user_attributes_for_findings_isSet = !json[QString("userAttributesForFindings")].isNull() && m_user_attributes_for_findings_isValid;
}

QString OAICreateAssessmentTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssessmentTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_target_arn_isSet) {
        obj.insert(QString("assessmentTargetArn"), ::OpenAPI::toJsonValue(m_assessment_target_arn));
    }
    if (m_assessment_template_name_isSet) {
        obj.insert(QString("assessmentTemplateName"), ::OpenAPI::toJsonValue(m_assessment_template_name));
    }
    if (m_duration_in_seconds_isSet) {
        obj.insert(QString("durationInSeconds"), ::OpenAPI::toJsonValue(m_duration_in_seconds));
    }
    if (m_rules_package_arns.isSet()) {
        obj.insert(QString("rulesPackageArns"), ::OpenAPI::toJsonValue(m_rules_package_arns));
    }
    if (m_user_attributes_for_findings.isSet()) {
        obj.insert(QString("userAttributesForFindings"), ::OpenAPI::toJsonValue(m_user_attributes_for_findings));
    }
    return obj;
}

QString OAICreateAssessmentTemplateRequest::getAssessmentTargetArn() const {
    return m_assessment_target_arn;
}
void OAICreateAssessmentTemplateRequest::setAssessmentTargetArn(const QString &assessment_target_arn) {
    m_assessment_target_arn = assessment_target_arn;
    m_assessment_target_arn_isSet = true;
}

bool OAICreateAssessmentTemplateRequest::is_assessment_target_arn_Set() const{
    return m_assessment_target_arn_isSet;
}

bool OAICreateAssessmentTemplateRequest::is_assessment_target_arn_Valid() const{
    return m_assessment_target_arn_isValid;
}

QString OAICreateAssessmentTemplateRequest::getAssessmentTemplateName() const {
    return m_assessment_template_name;
}
void OAICreateAssessmentTemplateRequest::setAssessmentTemplateName(const QString &assessment_template_name) {
    m_assessment_template_name = assessment_template_name;
    m_assessment_template_name_isSet = true;
}

bool OAICreateAssessmentTemplateRequest::is_assessment_template_name_Set() const{
    return m_assessment_template_name_isSet;
}

bool OAICreateAssessmentTemplateRequest::is_assessment_template_name_Valid() const{
    return m_assessment_template_name_isValid;
}

qint32 OAICreateAssessmentTemplateRequest::getDurationInSeconds() const {
    return m_duration_in_seconds;
}
void OAICreateAssessmentTemplateRequest::setDurationInSeconds(const qint32 &duration_in_seconds) {
    m_duration_in_seconds = duration_in_seconds;
    m_duration_in_seconds_isSet = true;
}

bool OAICreateAssessmentTemplateRequest::is_duration_in_seconds_Set() const{
    return m_duration_in_seconds_isSet;
}

bool OAICreateAssessmentTemplateRequest::is_duration_in_seconds_Valid() const{
    return m_duration_in_seconds_isValid;
}

QList OAICreateAssessmentTemplateRequest::getRulesPackageArns() const {
    return m_rules_package_arns;
}
void OAICreateAssessmentTemplateRequest::setRulesPackageArns(const QList &rules_package_arns) {
    m_rules_package_arns = rules_package_arns;
    m_rules_package_arns_isSet = true;
}

bool OAICreateAssessmentTemplateRequest::is_rules_package_arns_Set() const{
    return m_rules_package_arns_isSet;
}

bool OAICreateAssessmentTemplateRequest::is_rules_package_arns_Valid() const{
    return m_rules_package_arns_isValid;
}

QList OAICreateAssessmentTemplateRequest::getUserAttributesForFindings() const {
    return m_user_attributes_for_findings;
}
void OAICreateAssessmentTemplateRequest::setUserAttributesForFindings(const QList &user_attributes_for_findings) {
    m_user_attributes_for_findings = user_attributes_for_findings;
    m_user_attributes_for_findings_isSet = true;
}

bool OAICreateAssessmentTemplateRequest::is_user_attributes_for_findings_Set() const{
    return m_user_attributes_for_findings_isSet;
}

bool OAICreateAssessmentTemplateRequest::is_user_attributes_for_findings_Valid() const{
    return m_user_attributes_for_findings_isValid;
}

bool OAICreateAssessmentTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_package_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attributes_for_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssessmentTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessment_target_arn_isValid && m_assessment_template_name_isValid && m_duration_in_seconds_isValid && m_rules_package_arns_isValid && true;
}

} // namespace OpenAPI
