/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFinding_assetAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFinding_assetAttributes::OAIFinding_assetAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFinding_assetAttributes::OAIFinding_assetAttributes() {
    this->initializeModel();
}

OAIFinding_assetAttributes::~OAIFinding_assetAttributes() {}

void OAIFinding_assetAttributes::initializeModel() {

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_agent_id_isSet = false;
    m_agent_id_isValid = false;

    m_auto_scaling_group_isSet = false;
    m_auto_scaling_group_isValid = false;

    m_ami_id_isSet = false;
    m_ami_id_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_ipv4_addresses_isSet = false;
    m_ipv4_addresses_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_network_interfaces_isSet = false;
    m_network_interfaces_isValid = false;
}

void OAIFinding_assetAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFinding_assetAttributes::fromJsonObject(QJsonObject json) {

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;

    m_agent_id_isValid = ::OpenAPI::fromJsonValue(m_agent_id, json[QString("agentId")]);
    m_agent_id_isSet = !json[QString("agentId")].isNull() && m_agent_id_isValid;

    m_auto_scaling_group_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group, json[QString("autoScalingGroup")]);
    m_auto_scaling_group_isSet = !json[QString("autoScalingGroup")].isNull() && m_auto_scaling_group_isValid;

    m_ami_id_isValid = ::OpenAPI::fromJsonValue(m_ami_id, json[QString("amiId")]);
    m_ami_id_isSet = !json[QString("amiId")].isNull() && m_ami_id_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_ipv4_addresses_isValid = ::OpenAPI::fromJsonValue(m_ipv4_addresses, json[QString("ipv4Addresses")]);
    m_ipv4_addresses_isSet = !json[QString("ipv4Addresses")].isNull() && m_ipv4_addresses_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_network_interfaces, json[QString("networkInterfaces")]);
    m_network_interfaces_isSet = !json[QString("networkInterfaces")].isNull() && m_network_interfaces_isValid;
}

QString OAIFinding_assetAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFinding_assetAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_agent_id_isSet) {
        obj.insert(QString("agentId"), ::OpenAPI::toJsonValue(m_agent_id));
    }
    if (m_auto_scaling_group_isSet) {
        obj.insert(QString("autoScalingGroup"), ::OpenAPI::toJsonValue(m_auto_scaling_group));
    }
    if (m_ami_id_isSet) {
        obj.insert(QString("amiId"), ::OpenAPI::toJsonValue(m_ami_id));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_ipv4_addresses.isSet()) {
        obj.insert(QString("ipv4Addresses"), ::OpenAPI::toJsonValue(m_ipv4_addresses));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_network_interfaces.isSet()) {
        obj.insert(QString("networkInterfaces"), ::OpenAPI::toJsonValue(m_network_interfaces));
    }
    return obj;
}

qint32 OAIFinding_assetAttributes::getSchemaVersion() const {
    return m_schema_version;
}
void OAIFinding_assetAttributes::setSchemaVersion(const qint32 &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIFinding_assetAttributes::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIFinding_assetAttributes::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

QString OAIFinding_assetAttributes::getAgentId() const {
    return m_agent_id;
}
void OAIFinding_assetAttributes::setAgentId(const QString &agent_id) {
    m_agent_id = agent_id;
    m_agent_id_isSet = true;
}

bool OAIFinding_assetAttributes::is_agent_id_Set() const{
    return m_agent_id_isSet;
}

bool OAIFinding_assetAttributes::is_agent_id_Valid() const{
    return m_agent_id_isValid;
}

QString OAIFinding_assetAttributes::getAutoScalingGroup() const {
    return m_auto_scaling_group;
}
void OAIFinding_assetAttributes::setAutoScalingGroup(const QString &auto_scaling_group) {
    m_auto_scaling_group = auto_scaling_group;
    m_auto_scaling_group_isSet = true;
}

bool OAIFinding_assetAttributes::is_auto_scaling_group_Set() const{
    return m_auto_scaling_group_isSet;
}

bool OAIFinding_assetAttributes::is_auto_scaling_group_Valid() const{
    return m_auto_scaling_group_isValid;
}

QString OAIFinding_assetAttributes::getAmiId() const {
    return m_ami_id;
}
void OAIFinding_assetAttributes::setAmiId(const QString &ami_id) {
    m_ami_id = ami_id;
    m_ami_id_isSet = true;
}

bool OAIFinding_assetAttributes::is_ami_id_Set() const{
    return m_ami_id_isSet;
}

bool OAIFinding_assetAttributes::is_ami_id_Valid() const{
    return m_ami_id_isValid;
}

QString OAIFinding_assetAttributes::getHostname() const {
    return m_hostname;
}
void OAIFinding_assetAttributes::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIFinding_assetAttributes::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIFinding_assetAttributes::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QList OAIFinding_assetAttributes::getIpv4Addresses() const {
    return m_ipv4_addresses;
}
void OAIFinding_assetAttributes::setIpv4Addresses(const QList &ipv4_addresses) {
    m_ipv4_addresses = ipv4_addresses;
    m_ipv4_addresses_isSet = true;
}

bool OAIFinding_assetAttributes::is_ipv4_addresses_Set() const{
    return m_ipv4_addresses_isSet;
}

bool OAIFinding_assetAttributes::is_ipv4_addresses_Valid() const{
    return m_ipv4_addresses_isValid;
}

QList OAIFinding_assetAttributes::getTags() const {
    return m_tags;
}
void OAIFinding_assetAttributes::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFinding_assetAttributes::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFinding_assetAttributes::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIFinding_assetAttributes::getNetworkInterfaces() const {
    return m_network_interfaces;
}
void OAIFinding_assetAttributes::setNetworkInterfaces(const QList &network_interfaces) {
    m_network_interfaces = network_interfaces;
    m_network_interfaces_isSet = true;
}

bool OAIFinding_assetAttributes::is_network_interfaces_Set() const{
    return m_network_interfaces_isSet;
}

bool OAIFinding_assetAttributes::is_network_interfaces_Valid() const{
    return m_network_interfaces_isValid;
}

bool OAIFinding_assetAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ami_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv4_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interfaces.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFinding_assetAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_version_isValid && true;
}

} // namespace OpenAPI
