/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAssessmentTargetsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAssessmentTargetsResponse::OAIDescribeAssessmentTargetsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAssessmentTargetsResponse::OAIDescribeAssessmentTargetsResponse() {
    this->initializeModel();
}

OAIDescribeAssessmentTargetsResponse::~OAIDescribeAssessmentTargetsResponse() {}

void OAIDescribeAssessmentTargetsResponse::initializeModel() {

    m_assessment_targets_isSet = false;
    m_assessment_targets_isValid = false;

    m_failed_items_isSet = false;
    m_failed_items_isValid = false;
}

void OAIDescribeAssessmentTargetsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAssessmentTargetsResponse::fromJsonObject(QJsonObject json) {

    m_assessment_targets_isValid = ::OpenAPI::fromJsonValue(m_assessment_targets, json[QString("assessmentTargets")]);
    m_assessment_targets_isSet = !json[QString("assessmentTargets")].isNull() && m_assessment_targets_isValid;

    m_failed_items_isValid = ::OpenAPI::fromJsonValue(m_failed_items, json[QString("failedItems")]);
    m_failed_items_isSet = !json[QString("failedItems")].isNull() && m_failed_items_isValid;
}

QString OAIDescribeAssessmentTargetsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAssessmentTargetsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_targets.isSet()) {
        obj.insert(QString("assessmentTargets"), ::OpenAPI::toJsonValue(m_assessment_targets));
    }
    if (m_failed_items.isSet()) {
        obj.insert(QString("failedItems"), ::OpenAPI::toJsonValue(m_failed_items));
    }
    return obj;
}

QList OAIDescribeAssessmentTargetsResponse::getAssessmentTargets() const {
    return m_assessment_targets;
}
void OAIDescribeAssessmentTargetsResponse::setAssessmentTargets(const QList &assessment_targets) {
    m_assessment_targets = assessment_targets;
    m_assessment_targets_isSet = true;
}

bool OAIDescribeAssessmentTargetsResponse::is_assessment_targets_Set() const{
    return m_assessment_targets_isSet;
}

bool OAIDescribeAssessmentTargetsResponse::is_assessment_targets_Valid() const{
    return m_assessment_targets_isValid;
}

QMap OAIDescribeAssessmentTargetsResponse::getFailedItems() const {
    return m_failed_items;
}
void OAIDescribeAssessmentTargetsResponse::setFailedItems(const QMap &failed_items) {
    m_failed_items = failed_items;
    m_failed_items_isSet = true;
}

bool OAIDescribeAssessmentTargetsResponse::is_failed_items_Set() const{
    return m_failed_items_isSet;
}

bool OAIDescribeAssessmentTargetsResponse::is_failed_items_Valid() const{
    return m_failed_items_isValid;
}

bool OAIDescribeAssessmentTargetsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_items.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAssessmentTargetsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_assessment_targets_isValid && m_failed_items_isValid && true;
}

} // namespace OpenAPI
