/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRulesPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRulesPackage::OAIRulesPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRulesPackage::OAIRulesPackage() {
    this->initializeModel();
}

OAIRulesPackage::~OAIRulesPackage() {}

void OAIRulesPackage::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIRulesPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRulesPackage::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAIRulesPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRulesPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIRulesPackage::getArn() const {
    return m_arn;
}
void OAIRulesPackage::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIRulesPackage::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIRulesPackage::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIRulesPackage::getName() const {
    return m_name;
}
void OAIRulesPackage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRulesPackage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRulesPackage::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRulesPackage::getVersion() const {
    return m_version;
}
void OAIRulesPackage::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRulesPackage::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRulesPackage::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIRulesPackage::getProvider() const {
    return m_provider;
}
void OAIRulesPackage::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIRulesPackage::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIRulesPackage::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIRulesPackage::getDescription() const {
    return m_description;
}
void OAIRulesPackage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRulesPackage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRulesPackage::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIRulesPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRulesPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_name_isValid && m_version_isValid && m_provider_isValid && true;
}

} // namespace OpenAPI
