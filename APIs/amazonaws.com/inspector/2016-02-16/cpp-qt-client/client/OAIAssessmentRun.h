/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessmentRun.h
 *
 * &lt;p&gt;A snapshot of an Amazon Inspector assessment run that contains the findings of the assessment run .&lt;/p&gt; &lt;p&gt;Used as the response element in the &lt;a&gt;DescribeAssessmentRuns&lt;/a&gt; action.&lt;/p&gt;
 */

#ifndef OAIAssessmentRun_H
#define OAIAssessmentRun_H

#include <QJsonObject>

#include "OAIAssessmentRunState.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAssessmentRun : public OAIObject {
public:
    OAIAssessmentRun();
    OAIAssessmentRun(QString json);
    ~OAIAssessmentRun() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getAssessmentTemplateArn() const;
    void setAssessmentTemplateArn(const QString &assessment_template_arn);
    bool is_assessment_template_arn_Set() const;
    bool is_assessment_template_arn_Valid() const;

    OAIAssessmentRunState getState() const;
    void setState(const OAIAssessmentRunState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint32 getDurationInSeconds() const;
    void setDurationInSeconds(const qint32 &duration_in_seconds);
    bool is_duration_in_seconds_Set() const;
    bool is_duration_in_seconds_Valid() const;

    QList getRulesPackageArns() const;
    void setRulesPackageArns(const QList &rules_package_arns);
    bool is_rules_package_arns_Set() const;
    bool is_rules_package_arns_Valid() const;

    QList getUserAttributesForFindings() const;
    void setUserAttributesForFindings(const QList &user_attributes_for_findings);
    bool is_user_attributes_for_findings_Set() const;
    bool is_user_attributes_for_findings_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getStartedAt() const;
    void setStartedAt(const QDateTime &started_at);
    bool is_started_at_Set() const;
    bool is_started_at_Valid() const;

    QDateTime getCompletedAt() const;
    void setCompletedAt(const QDateTime &completed_at);
    bool is_completed_at_Set() const;
    bool is_completed_at_Valid() const;

    QDateTime getStateChangedAt() const;
    void setStateChangedAt(const QDateTime &state_changed_at);
    bool is_state_changed_at_Set() const;
    bool is_state_changed_at_Valid() const;

    bool getDataCollected() const;
    void setDataCollected(const bool &data_collected);
    bool is_data_collected_Set() const;
    bool is_data_collected_Valid() const;

    QList getStateChanges() const;
    void setStateChanges(const QList &state_changes);
    bool is_state_changes_Set() const;
    bool is_state_changes_Valid() const;

    QList getNotifications() const;
    void setNotifications(const QList &notifications);
    bool is_notifications_Set() const;
    bool is_notifications_Valid() const;

    QMap getFindingCounts() const;
    void setFindingCounts(const QMap &finding_counts);
    bool is_finding_counts_Set() const;
    bool is_finding_counts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_assessment_template_arn;
    bool m_assessment_template_arn_isSet;
    bool m_assessment_template_arn_isValid;

    OAIAssessmentRunState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint32 m_duration_in_seconds;
    bool m_duration_in_seconds_isSet;
    bool m_duration_in_seconds_isValid;

    QList m_rules_package_arns;
    bool m_rules_package_arns_isSet;
    bool m_rules_package_arns_isValid;

    QList m_user_attributes_for_findings;
    bool m_user_attributes_for_findings_isSet;
    bool m_user_attributes_for_findings_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_started_at;
    bool m_started_at_isSet;
    bool m_started_at_isValid;

    QDateTime m_completed_at;
    bool m_completed_at_isSet;
    bool m_completed_at_isValid;

    QDateTime m_state_changed_at;
    bool m_state_changed_at_isSet;
    bool m_state_changed_at_isValid;

    bool m_data_collected;
    bool m_data_collected_isSet;
    bool m_data_collected_isValid;

    QList m_state_changes;
    bool m_state_changes_isSet;
    bool m_state_changes_isValid;

    QList m_notifications;
    bool m_notifications_isSet;
    bool m_notifications_isValid;

    QMap m_finding_counts;
    bool m_finding_counts_isSet;
    bool m_finding_counts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessmentRun)

#endif // OAIAssessmentRun_H
