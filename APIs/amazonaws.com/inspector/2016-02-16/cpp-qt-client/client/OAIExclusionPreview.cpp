/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExclusionPreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExclusionPreview::OAIExclusionPreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExclusionPreview::OAIExclusionPreview() {
    this->initializeModel();
}

OAIExclusionPreview::~OAIExclusionPreview() {}

void OAIExclusionPreview::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_recommendation_isSet = false;
    m_recommendation_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIExclusionPreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExclusionPreview::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_recommendation_isValid = ::OpenAPI::fromJsonValue(m_recommendation, json[QString("recommendation")]);
    m_recommendation_isSet = !json[QString("recommendation")].isNull() && m_recommendation_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;
}

QString OAIExclusionPreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExclusionPreview::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_recommendation_isSet) {
        obj.insert(QString("recommendation"), ::OpenAPI::toJsonValue(m_recommendation));
    }
    if (m_scopes.isSet()) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QString OAIExclusionPreview::getTitle() const {
    return m_title;
}
void OAIExclusionPreview::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIExclusionPreview::is_title_Set() const{
    return m_title_isSet;
}

bool OAIExclusionPreview::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIExclusionPreview::getDescription() const {
    return m_description;
}
void OAIExclusionPreview::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExclusionPreview::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExclusionPreview::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIExclusionPreview::getRecommendation() const {
    return m_recommendation;
}
void OAIExclusionPreview::setRecommendation(const QString &recommendation) {
    m_recommendation = recommendation;
    m_recommendation_isSet = true;
}

bool OAIExclusionPreview::is_recommendation_Set() const{
    return m_recommendation_isSet;
}

bool OAIExclusionPreview::is_recommendation_Valid() const{
    return m_recommendation_isValid;
}

QList OAIExclusionPreview::getScopes() const {
    return m_scopes;
}
void OAIExclusionPreview::setScopes(const QList &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIExclusionPreview::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIExclusionPreview::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QList OAIExclusionPreview::getAttributes() const {
    return m_attributes;
}
void OAIExclusionPreview::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIExclusionPreview::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIExclusionPreview::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIExclusionPreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExclusionPreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_title_isValid && m_description_isValid && m_recommendation_isValid && m_scopes_isValid && true;
}

} // namespace OpenAPI
