/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentRunNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentRunNotification::OAIAssessmentRunNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentRunNotification::OAIAssessmentRunNotification() {
    this->initializeModel();
}

OAIAssessmentRunNotification::~OAIAssessmentRunNotification() {}

void OAIAssessmentRunNotification::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_sns_publish_status_code_isSet = false;
    m_sns_publish_status_code_isValid = false;
}

void OAIAssessmentRunNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentRunNotification::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("snsTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("snsTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_sns_publish_status_code_isValid = ::OpenAPI::fromJsonValue(m_sns_publish_status_code, json[QString("snsPublishStatusCode")]);
    m_sns_publish_status_code_isSet = !json[QString("snsPublishStatusCode")].isNull() && m_sns_publish_status_code_isValid;
}

QString OAIAssessmentRunNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentRunNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_event.isSet()) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("snsTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_sns_publish_status_code.isSet()) {
        obj.insert(QString("snsPublishStatusCode"), ::OpenAPI::toJsonValue(m_sns_publish_status_code));
    }
    return obj;
}

QDateTime OAIAssessmentRunNotification::getDate() const {
    return m_date;
}
void OAIAssessmentRunNotification::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIAssessmentRunNotification::is_date_Set() const{
    return m_date_isSet;
}

bool OAIAssessmentRunNotification::is_date_Valid() const{
    return m_date_isValid;
}

OAIInspectorEvent OAIAssessmentRunNotification::getEvent() const {
    return m_event;
}
void OAIAssessmentRunNotification::setEvent(const OAIInspectorEvent &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIAssessmentRunNotification::is_event_Set() const{
    return m_event_isSet;
}

bool OAIAssessmentRunNotification::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIAssessmentRunNotification::getMessage() const {
    return m_message;
}
void OAIAssessmentRunNotification::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAssessmentRunNotification::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAssessmentRunNotification::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIAssessmentRunNotification::getError() const {
    return m_error;
}
void OAIAssessmentRunNotification::setError(const bool &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIAssessmentRunNotification::is_error_Set() const{
    return m_error_isSet;
}

bool OAIAssessmentRunNotification::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIAssessmentRunNotification::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIAssessmentRunNotification::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIAssessmentRunNotification::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIAssessmentRunNotification::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

OAIAssessmentRunNotificationSnsStatusCode OAIAssessmentRunNotification::getSnsPublishStatusCode() const {
    return m_sns_publish_status_code;
}
void OAIAssessmentRunNotification::setSnsPublishStatusCode(const OAIAssessmentRunNotificationSnsStatusCode &sns_publish_status_code) {
    m_sns_publish_status_code = sns_publish_status_code;
    m_sns_publish_status_code_isSet = true;
}

bool OAIAssessmentRunNotification::is_sns_publish_status_code_Set() const{
    return m_sns_publish_status_code_isSet;
}

bool OAIAssessmentRunNotification::is_sns_publish_status_code_Valid() const{
    return m_sns_publish_status_code_isValid;
}

bool OAIAssessmentRunNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_publish_status_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentRunNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_isValid && m_event_isValid && m_error_isValid && true;
}

} // namespace OpenAPI
