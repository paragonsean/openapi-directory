/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentPreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentPreview::OAIAgentPreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentPreview::OAIAgentPreview() {
    this->initializeModel();
}

OAIAgentPreview::~OAIAgentPreview() {}

void OAIAgentPreview::initializeModel() {

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_agent_id_isSet = false;
    m_agent_id_isValid = false;

    m_auto_scaling_group_isSet = false;
    m_auto_scaling_group_isValid = false;

    m_agent_health_isSet = false;
    m_agent_health_isValid = false;

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_kernel_version_isSet = false;
    m_kernel_version_isValid = false;

    m_ipv4_address_isSet = false;
    m_ipv4_address_isValid = false;
}

void OAIAgentPreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentPreview::fromJsonObject(QJsonObject json) {

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_agent_id_isValid = ::OpenAPI::fromJsonValue(m_agent_id, json[QString("agentId")]);
    m_agent_id_isSet = !json[QString("agentId")].isNull() && m_agent_id_isValid;

    m_auto_scaling_group_isValid = ::OpenAPI::fromJsonValue(m_auto_scaling_group, json[QString("autoScalingGroup")]);
    m_auto_scaling_group_isSet = !json[QString("autoScalingGroup")].isNull() && m_auto_scaling_group_isValid;

    m_agent_health_isValid = ::OpenAPI::fromJsonValue(m_agent_health, json[QString("agentHealth")]);
    m_agent_health_isSet = !json[QString("agentHealth")].isNull() && m_agent_health_isValid;

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_kernel_version_isValid = ::OpenAPI::fromJsonValue(m_kernel_version, json[QString("kernelVersion")]);
    m_kernel_version_isSet = !json[QString("kernelVersion")].isNull() && m_kernel_version_isValid;

    m_ipv4_address_isValid = ::OpenAPI::fromJsonValue(m_ipv4_address, json[QString("ipv4Address")]);
    m_ipv4_address_isSet = !json[QString("ipv4Address")].isNull() && m_ipv4_address_isValid;
}

QString OAIAgentPreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentPreview::asJsonObject() const {
    QJsonObject obj;
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_agent_id_isSet) {
        obj.insert(QString("agentId"), ::OpenAPI::toJsonValue(m_agent_id));
    }
    if (m_auto_scaling_group_isSet) {
        obj.insert(QString("autoScalingGroup"), ::OpenAPI::toJsonValue(m_auto_scaling_group));
    }
    if (m_agent_health.isSet()) {
        obj.insert(QString("agentHealth"), ::OpenAPI::toJsonValue(m_agent_health));
    }
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_kernel_version_isSet) {
        obj.insert(QString("kernelVersion"), ::OpenAPI::toJsonValue(m_kernel_version));
    }
    if (m_ipv4_address_isSet) {
        obj.insert(QString("ipv4Address"), ::OpenAPI::toJsonValue(m_ipv4_address));
    }
    return obj;
}

QString OAIAgentPreview::getHostname() const {
    return m_hostname;
}
void OAIAgentPreview::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIAgentPreview::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIAgentPreview::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIAgentPreview::getAgentId() const {
    return m_agent_id;
}
void OAIAgentPreview::setAgentId(const QString &agent_id) {
    m_agent_id = agent_id;
    m_agent_id_isSet = true;
}

bool OAIAgentPreview::is_agent_id_Set() const{
    return m_agent_id_isSet;
}

bool OAIAgentPreview::is_agent_id_Valid() const{
    return m_agent_id_isValid;
}

QString OAIAgentPreview::getAutoScalingGroup() const {
    return m_auto_scaling_group;
}
void OAIAgentPreview::setAutoScalingGroup(const QString &auto_scaling_group) {
    m_auto_scaling_group = auto_scaling_group;
    m_auto_scaling_group_isSet = true;
}

bool OAIAgentPreview::is_auto_scaling_group_Set() const{
    return m_auto_scaling_group_isSet;
}

bool OAIAgentPreview::is_auto_scaling_group_Valid() const{
    return m_auto_scaling_group_isValid;
}

OAIAgentHealth OAIAgentPreview::getAgentHealth() const {
    return m_agent_health;
}
void OAIAgentPreview::setAgentHealth(const OAIAgentHealth &agent_health) {
    m_agent_health = agent_health;
    m_agent_health_isSet = true;
}

bool OAIAgentPreview::is_agent_health_Set() const{
    return m_agent_health_isSet;
}

bool OAIAgentPreview::is_agent_health_Valid() const{
    return m_agent_health_isValid;
}

QString OAIAgentPreview::getAgentVersion() const {
    return m_agent_version;
}
void OAIAgentPreview::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIAgentPreview::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIAgentPreview::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAIAgentPreview::getOperatingSystem() const {
    return m_operating_system;
}
void OAIAgentPreview::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIAgentPreview::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIAgentPreview::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

QString OAIAgentPreview::getKernelVersion() const {
    return m_kernel_version;
}
void OAIAgentPreview::setKernelVersion(const QString &kernel_version) {
    m_kernel_version = kernel_version;
    m_kernel_version_isSet = true;
}

bool OAIAgentPreview::is_kernel_version_Set() const{
    return m_kernel_version_isSet;
}

bool OAIAgentPreview::is_kernel_version_Valid() const{
    return m_kernel_version_isValid;
}

QString OAIAgentPreview::getIpv4Address() const {
    return m_ipv4_address;
}
void OAIAgentPreview::setIpv4Address(const QString &ipv4_address) {
    m_ipv4_address = ipv4_address;
    m_ipv4_address_isSet = true;
}

bool OAIAgentPreview::is_ipv4_address_Set() const{
    return m_ipv4_address_isSet;
}

bool OAIAgentPreview::is_ipv4_address_Valid() const{
    return m_ipv4_address_isValid;
}

bool OAIAgentPreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scaling_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kernel_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv4_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentPreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agent_id_isValid && true;
}

} // namespace OpenAPI
