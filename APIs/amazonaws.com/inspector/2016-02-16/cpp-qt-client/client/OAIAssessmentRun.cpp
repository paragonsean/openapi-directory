/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentRun::OAIAssessmentRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentRun::OAIAssessmentRun() {
    this->initializeModel();
}

OAIAssessmentRun::~OAIAssessmentRun() {}

void OAIAssessmentRun::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_assessment_template_arn_isSet = false;
    m_assessment_template_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_duration_in_seconds_isSet = false;
    m_duration_in_seconds_isValid = false;

    m_rules_package_arns_isSet = false;
    m_rules_package_arns_isValid = false;

    m_user_attributes_for_findings_isSet = false;
    m_user_attributes_for_findings_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_state_changed_at_isSet = false;
    m_state_changed_at_isValid = false;

    m_data_collected_isSet = false;
    m_data_collected_isValid = false;

    m_state_changes_isSet = false;
    m_state_changes_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_finding_counts_isSet = false;
    m_finding_counts_isValid = false;
}

void OAIAssessmentRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentRun::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_assessment_template_arn_isValid = ::OpenAPI::fromJsonValue(m_assessment_template_arn, json[QString("assessmentTemplateArn")]);
    m_assessment_template_arn_isSet = !json[QString("assessmentTemplateArn")].isNull() && m_assessment_template_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_in_seconds, json[QString("durationInSeconds")]);
    m_duration_in_seconds_isSet = !json[QString("durationInSeconds")].isNull() && m_duration_in_seconds_isValid;

    m_rules_package_arns_isValid = ::OpenAPI::fromJsonValue(m_rules_package_arns, json[QString("rulesPackageArns")]);
    m_rules_package_arns_isSet = !json[QString("rulesPackageArns")].isNull() && m_rules_package_arns_isValid;

    m_user_attributes_for_findings_isValid = ::OpenAPI::fromJsonValue(m_user_attributes_for_findings, json[QString("userAttributesForFindings")]);
    m_user_attributes_for_findings_isSet = !json[QString("userAttributesForFindings")].isNull() && m_user_attributes_for_findings_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_state_changed_at_isValid = ::OpenAPI::fromJsonValue(m_state_changed_at, json[QString("stateChangedAt")]);
    m_state_changed_at_isSet = !json[QString("stateChangedAt")].isNull() && m_state_changed_at_isValid;

    m_data_collected_isValid = ::OpenAPI::fromJsonValue(m_data_collected, json[QString("dataCollected")]);
    m_data_collected_isSet = !json[QString("dataCollected")].isNull() && m_data_collected_isValid;

    m_state_changes_isValid = ::OpenAPI::fromJsonValue(m_state_changes, json[QString("stateChanges")]);
    m_state_changes_isSet = !json[QString("stateChanges")].isNull() && m_state_changes_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_finding_counts_isValid = ::OpenAPI::fromJsonValue(m_finding_counts, json[QString("findingCounts")]);
    m_finding_counts_isSet = !json[QString("findingCounts")].isNull() && m_finding_counts_isValid;
}

QString OAIAssessmentRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentRun::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_assessment_template_arn_isSet) {
        obj.insert(QString("assessmentTemplateArn"), ::OpenAPI::toJsonValue(m_assessment_template_arn));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_duration_in_seconds_isSet) {
        obj.insert(QString("durationInSeconds"), ::OpenAPI::toJsonValue(m_duration_in_seconds));
    }
    if (m_rules_package_arns.isSet()) {
        obj.insert(QString("rulesPackageArns"), ::OpenAPI::toJsonValue(m_rules_package_arns));
    }
    if (m_user_attributes_for_findings.isSet()) {
        obj.insert(QString("userAttributesForFindings"), ::OpenAPI::toJsonValue(m_user_attributes_for_findings));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_state_changed_at_isSet) {
        obj.insert(QString("stateChangedAt"), ::OpenAPI::toJsonValue(m_state_changed_at));
    }
    if (m_data_collected_isSet) {
        obj.insert(QString("dataCollected"), ::OpenAPI::toJsonValue(m_data_collected));
    }
    if (m_state_changes.isSet()) {
        obj.insert(QString("stateChanges"), ::OpenAPI::toJsonValue(m_state_changes));
    }
    if (m_notifications.isSet()) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_finding_counts.isSet()) {
        obj.insert(QString("findingCounts"), ::OpenAPI::toJsonValue(m_finding_counts));
    }
    return obj;
}

QString OAIAssessmentRun::getArn() const {
    return m_arn;
}
void OAIAssessmentRun::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAssessmentRun::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAssessmentRun::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIAssessmentRun::getName() const {
    return m_name;
}
void OAIAssessmentRun::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssessmentRun::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssessmentRun::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAssessmentRun::getAssessmentTemplateArn() const {
    return m_assessment_template_arn;
}
void OAIAssessmentRun::setAssessmentTemplateArn(const QString &assessment_template_arn) {
    m_assessment_template_arn = assessment_template_arn;
    m_assessment_template_arn_isSet = true;
}

bool OAIAssessmentRun::is_assessment_template_arn_Set() const{
    return m_assessment_template_arn_isSet;
}

bool OAIAssessmentRun::is_assessment_template_arn_Valid() const{
    return m_assessment_template_arn_isValid;
}

OAIAssessmentRunState OAIAssessmentRun::getState() const {
    return m_state;
}
void OAIAssessmentRun::setState(const OAIAssessmentRunState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAssessmentRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAssessmentRun::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIAssessmentRun::getDurationInSeconds() const {
    return m_duration_in_seconds;
}
void OAIAssessmentRun::setDurationInSeconds(const qint32 &duration_in_seconds) {
    m_duration_in_seconds = duration_in_seconds;
    m_duration_in_seconds_isSet = true;
}

bool OAIAssessmentRun::is_duration_in_seconds_Set() const{
    return m_duration_in_seconds_isSet;
}

bool OAIAssessmentRun::is_duration_in_seconds_Valid() const{
    return m_duration_in_seconds_isValid;
}

QList OAIAssessmentRun::getRulesPackageArns() const {
    return m_rules_package_arns;
}
void OAIAssessmentRun::setRulesPackageArns(const QList &rules_package_arns) {
    m_rules_package_arns = rules_package_arns;
    m_rules_package_arns_isSet = true;
}

bool OAIAssessmentRun::is_rules_package_arns_Set() const{
    return m_rules_package_arns_isSet;
}

bool OAIAssessmentRun::is_rules_package_arns_Valid() const{
    return m_rules_package_arns_isValid;
}

QList OAIAssessmentRun::getUserAttributesForFindings() const {
    return m_user_attributes_for_findings;
}
void OAIAssessmentRun::setUserAttributesForFindings(const QList &user_attributes_for_findings) {
    m_user_attributes_for_findings = user_attributes_for_findings;
    m_user_attributes_for_findings_isSet = true;
}

bool OAIAssessmentRun::is_user_attributes_for_findings_Set() const{
    return m_user_attributes_for_findings_isSet;
}

bool OAIAssessmentRun::is_user_attributes_for_findings_Valid() const{
    return m_user_attributes_for_findings_isValid;
}

QDateTime OAIAssessmentRun::getCreatedAt() const {
    return m_created_at;
}
void OAIAssessmentRun::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAssessmentRun::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAssessmentRun::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIAssessmentRun::getStartedAt() const {
    return m_started_at;
}
void OAIAssessmentRun::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIAssessmentRun::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIAssessmentRun::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QDateTime OAIAssessmentRun::getCompletedAt() const {
    return m_completed_at;
}
void OAIAssessmentRun::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIAssessmentRun::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIAssessmentRun::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QDateTime OAIAssessmentRun::getStateChangedAt() const {
    return m_state_changed_at;
}
void OAIAssessmentRun::setStateChangedAt(const QDateTime &state_changed_at) {
    m_state_changed_at = state_changed_at;
    m_state_changed_at_isSet = true;
}

bool OAIAssessmentRun::is_state_changed_at_Set() const{
    return m_state_changed_at_isSet;
}

bool OAIAssessmentRun::is_state_changed_at_Valid() const{
    return m_state_changed_at_isValid;
}

bool OAIAssessmentRun::getDataCollected() const {
    return m_data_collected;
}
void OAIAssessmentRun::setDataCollected(const bool &data_collected) {
    m_data_collected = data_collected;
    m_data_collected_isSet = true;
}

bool OAIAssessmentRun::is_data_collected_Set() const{
    return m_data_collected_isSet;
}

bool OAIAssessmentRun::is_data_collected_Valid() const{
    return m_data_collected_isValid;
}

QList OAIAssessmentRun::getStateChanges() const {
    return m_state_changes;
}
void OAIAssessmentRun::setStateChanges(const QList &state_changes) {
    m_state_changes = state_changes;
    m_state_changes_isSet = true;
}

bool OAIAssessmentRun::is_state_changes_Set() const{
    return m_state_changes_isSet;
}

bool OAIAssessmentRun::is_state_changes_Valid() const{
    return m_state_changes_isValid;
}

QList OAIAssessmentRun::getNotifications() const {
    return m_notifications;
}
void OAIAssessmentRun::setNotifications(const QList &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIAssessmentRun::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIAssessmentRun::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QMap OAIAssessmentRun::getFindingCounts() const {
    return m_finding_counts;
}
void OAIAssessmentRun::setFindingCounts(const QMap &finding_counts) {
    m_finding_counts = finding_counts;
    m_finding_counts_isSet = true;
}

bool OAIAssessmentRun::is_finding_counts_Set() const{
    return m_finding_counts_isSet;
}

bool OAIAssessmentRun::is_finding_counts_Valid() const{
    return m_finding_counts_isValid;
}

bool OAIAssessmentRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_template_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_package_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attributes_for_findings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_changed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_collected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_changes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finding_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_name_isValid && m_assessment_template_arn_isValid && m_state_isValid && m_duration_in_seconds_isValid && m_rules_package_arns_isValid && m_user_attributes_for_findings_isValid && m_created_at_isValid && m_state_changed_at_isValid && m_data_collected_isValid && m_state_changes_isValid && m_notifications_isValid && m_finding_counts_isValid && true;
}

} // namespace OpenAPI
