/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddAttributesToFindingsRequest from '../model/AddAttributesToFindingsRequest';
import AddAttributesToFindingsResponse from '../model/AddAttributesToFindingsResponse';
import CreateAssessmentTargetRequest from '../model/CreateAssessmentTargetRequest';
import CreateAssessmentTargetResponse from '../model/CreateAssessmentTargetResponse';
import CreateAssessmentTemplateRequest from '../model/CreateAssessmentTemplateRequest';
import CreateAssessmentTemplateResponse from '../model/CreateAssessmentTemplateResponse';
import CreateExclusionsPreviewRequest from '../model/CreateExclusionsPreviewRequest';
import CreateExclusionsPreviewResponse from '../model/CreateExclusionsPreviewResponse';
import CreateResourceGroupRequest from '../model/CreateResourceGroupRequest';
import CreateResourceGroupResponse from '../model/CreateResourceGroupResponse';
import DeleteAssessmentRunRequest from '../model/DeleteAssessmentRunRequest';
import DeleteAssessmentTargetRequest from '../model/DeleteAssessmentTargetRequest';
import DeleteAssessmentTemplateRequest from '../model/DeleteAssessmentTemplateRequest';
import DescribeAssessmentRunsRequest from '../model/DescribeAssessmentRunsRequest';
import DescribeAssessmentRunsResponse from '../model/DescribeAssessmentRunsResponse';
import DescribeAssessmentTargetsRequest from '../model/DescribeAssessmentTargetsRequest';
import DescribeAssessmentTargetsResponse from '../model/DescribeAssessmentTargetsResponse';
import DescribeAssessmentTemplatesRequest from '../model/DescribeAssessmentTemplatesRequest';
import DescribeAssessmentTemplatesResponse from '../model/DescribeAssessmentTemplatesResponse';
import DescribeCrossAccountAccessRoleResponse from '../model/DescribeCrossAccountAccessRoleResponse';
import DescribeExclusionsRequest from '../model/DescribeExclusionsRequest';
import DescribeExclusionsResponse from '../model/DescribeExclusionsResponse';
import DescribeFindingsRequest from '../model/DescribeFindingsRequest';
import DescribeFindingsResponse from '../model/DescribeFindingsResponse';
import DescribeResourceGroupsRequest from '../model/DescribeResourceGroupsRequest';
import DescribeResourceGroupsResponse from '../model/DescribeResourceGroupsResponse';
import DescribeRulesPackagesRequest from '../model/DescribeRulesPackagesRequest';
import DescribeRulesPackagesResponse from '../model/DescribeRulesPackagesResponse';
import GetAssessmentReportRequest from '../model/GetAssessmentReportRequest';
import GetAssessmentReportResponse from '../model/GetAssessmentReportResponse';
import GetExclusionsPreviewRequest from '../model/GetExclusionsPreviewRequest';
import GetExclusionsPreviewResponse from '../model/GetExclusionsPreviewResponse';
import GetTelemetryMetadataRequest from '../model/GetTelemetryMetadataRequest';
import GetTelemetryMetadataResponse from '../model/GetTelemetryMetadataResponse';
import ListAssessmentRunAgentsRequest from '../model/ListAssessmentRunAgentsRequest';
import ListAssessmentRunAgentsResponse from '../model/ListAssessmentRunAgentsResponse';
import ListAssessmentRunsRequest from '../model/ListAssessmentRunsRequest';
import ListAssessmentRunsResponse from '../model/ListAssessmentRunsResponse';
import ListAssessmentTargetsRequest from '../model/ListAssessmentTargetsRequest';
import ListAssessmentTargetsResponse from '../model/ListAssessmentTargetsResponse';
import ListAssessmentTemplatesRequest from '../model/ListAssessmentTemplatesRequest';
import ListAssessmentTemplatesResponse from '../model/ListAssessmentTemplatesResponse';
import ListEventSubscriptionsRequest from '../model/ListEventSubscriptionsRequest';
import ListEventSubscriptionsResponse from '../model/ListEventSubscriptionsResponse';
import ListExclusionsRequest from '../model/ListExclusionsRequest';
import ListExclusionsResponse from '../model/ListExclusionsResponse';
import ListFindingsRequest from '../model/ListFindingsRequest';
import ListFindingsResponse from '../model/ListFindingsResponse';
import ListRulesPackagesRequest from '../model/ListRulesPackagesRequest';
import ListRulesPackagesResponse from '../model/ListRulesPackagesResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PreviewAgentsRequest from '../model/PreviewAgentsRequest';
import PreviewAgentsResponse from '../model/PreviewAgentsResponse';
import RegisterCrossAccountAccessRoleRequest from '../model/RegisterCrossAccountAccessRoleRequest';
import RemoveAttributesFromFindingsRequest from '../model/RemoveAttributesFromFindingsRequest';
import RemoveAttributesFromFindingsResponse from '../model/RemoveAttributesFromFindingsResponse';
import SetTagsForResourceRequest from '../model/SetTagsForResourceRequest';
import StartAssessmentRunRequest from '../model/StartAssessmentRunRequest';
import StartAssessmentRunResponse from '../model/StartAssessmentRunResponse';
import StopAssessmentRunRequest from '../model/StopAssessmentRunRequest';
import SubscribeToEventRequest from '../model/SubscribeToEventRequest';
import UnsubscribeFromEventRequest from '../model/UnsubscribeFromEventRequest';
import UpdateAssessmentTargetRequest from '../model/UpdateAssessmentTargetRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2016-02-16
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAttributesToFindings operation.
     * @callback module:api/DefaultApi~addAttributesToFindingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddAttributesToFindingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns attributes (key and value pairs) to the findings that are specified by the ARNs of the findings.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AddAttributesToFindingsRequest} addAttributesToFindingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addAttributesToFindingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddAttributesToFindingsResponse}
     */
    addAttributesToFindings(xAmzTarget, addAttributesToFindingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = addAttributesToFindingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling addAttributesToFindings");
      }
      // verify the required parameter 'addAttributesToFindingsRequest' is set
      if (addAttributesToFindingsRequest === undefined || addAttributesToFindingsRequest === null) {
        throw new Error("Missing the required parameter 'addAttributesToFindingsRequest' when calling addAttributesToFindings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddAttributesToFindingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.AddAttributesToFindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssessmentTarget operation.
     * @callback module:api/DefaultApi~createAssessmentTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAssessmentTargetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new assessment target using the ARN of the resource group that is generated by <a>CreateResourceGroup</a>. If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target. If the <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html\">service-linked role</a> isn’t already registered, this action also creates and registers a service-linked role to grant Amazon Inspector access to AWS Services needed to perform security assessments. You can create up to 50 assessment targets per AWS account. You can run up to 500 concurrent agents per AWS account. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html\"> Amazon Inspector Assessment Targets</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAssessmentTargetRequest} createAssessmentTargetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAssessmentTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAssessmentTargetResponse}
     */
    createAssessmentTarget(xAmzTarget, createAssessmentTargetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAssessmentTargetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAssessmentTarget");
      }
      // verify the required parameter 'createAssessmentTargetRequest' is set
      if (createAssessmentTargetRequest === undefined || createAssessmentTargetRequest === null) {
        throw new Error("Missing the required parameter 'createAssessmentTargetRequest' when calling createAssessmentTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAssessmentTargetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.CreateAssessmentTarget', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssessmentTemplate operation.
     * @callback module:api/DefaultApi~createAssessmentTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAssessmentTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an assessment template for the assessment target that is specified by the ARN of the assessment target. If the <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html\">service-linked role</a> isn’t already registered, this action also creates and registers a service-linked role to grant Amazon Inspector access to AWS Services needed to perform security assessments.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAssessmentTemplateRequest} createAssessmentTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAssessmentTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAssessmentTemplateResponse}
     */
    createAssessmentTemplate(xAmzTarget, createAssessmentTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAssessmentTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAssessmentTemplate");
      }
      // verify the required parameter 'createAssessmentTemplateRequest' is set
      if (createAssessmentTemplateRequest === undefined || createAssessmentTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createAssessmentTemplateRequest' when calling createAssessmentTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAssessmentTemplateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.CreateAssessmentTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExclusionsPreview operation.
     * @callback module:api/DefaultApi~createExclusionsPreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateExclusionsPreviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the generation of an exclusions preview for the specified assessment template. The exclusions preview lists the potential exclusions (ExclusionPreview) that Inspector can detect before it runs the assessment. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateExclusionsPreviewRequest} createExclusionsPreviewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createExclusionsPreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateExclusionsPreviewResponse}
     */
    createExclusionsPreview(xAmzTarget, createExclusionsPreviewRequest, opts, callback) {
      opts = opts || {};
      let postBody = createExclusionsPreviewRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createExclusionsPreview");
      }
      // verify the required parameter 'createExclusionsPreviewRequest' is set
      if (createExclusionsPreviewRequest === undefined || createExclusionsPreviewRequest === null) {
        throw new Error("Missing the required parameter 'createExclusionsPreviewRequest' when calling createExclusionsPreview");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateExclusionsPreviewResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.CreateExclusionsPreview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createResourceGroup operation.
     * @callback module:api/DefaultApi~createResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResourceGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a resource group using the specified set of tags (key and value pairs) that are used to select the EC2 instances to be included in an Amazon Inspector assessment target. The created resource group is then used to create an Amazon Inspector assessment target. For more information, see <a>CreateAssessmentTarget</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateResourceGroupRequest} createResourceGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResourceGroupResponse}
     */
    createResourceGroup(xAmzTarget, createResourceGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createResourceGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createResourceGroup");
      }
      // verify the required parameter 'createResourceGroupRequest' is set
      if (createResourceGroupRequest === undefined || createResourceGroupRequest === null) {
        throw new Error("Missing the required parameter 'createResourceGroupRequest' when calling createResourceGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResourceGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.CreateResourceGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssessmentRun operation.
     * @callback module:api/DefaultApi~deleteAssessmentRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the assessment run that is specified by the ARN of the assessment run.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAssessmentRunRequest} deleteAssessmentRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssessmentRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAssessmentRun(xAmzTarget, deleteAssessmentRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAssessmentRunRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAssessmentRun");
      }
      // verify the required parameter 'deleteAssessmentRunRequest' is set
      if (deleteAssessmentRunRequest === undefined || deleteAssessmentRunRequest === null) {
        throw new Error("Missing the required parameter 'deleteAssessmentRunRequest' when calling deleteAssessmentRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DeleteAssessmentRun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssessmentTarget operation.
     * @callback module:api/DefaultApi~deleteAssessmentTargetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the assessment target that is specified by the ARN of the assessment target.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAssessmentTargetRequest} deleteAssessmentTargetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssessmentTargetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAssessmentTarget(xAmzTarget, deleteAssessmentTargetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAssessmentTargetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAssessmentTarget");
      }
      // verify the required parameter 'deleteAssessmentTargetRequest' is set
      if (deleteAssessmentTargetRequest === undefined || deleteAssessmentTargetRequest === null) {
        throw new Error("Missing the required parameter 'deleteAssessmentTargetRequest' when calling deleteAssessmentTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DeleteAssessmentTarget', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssessmentTemplate operation.
     * @callback module:api/DefaultApi~deleteAssessmentTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the assessment template that is specified by the ARN of the assessment template.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAssessmentTemplateRequest} deleteAssessmentTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssessmentTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAssessmentTemplate(xAmzTarget, deleteAssessmentTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAssessmentTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAssessmentTemplate");
      }
      // verify the required parameter 'deleteAssessmentTemplateRequest' is set
      if (deleteAssessmentTemplateRequest === undefined || deleteAssessmentTemplateRequest === null) {
        throw new Error("Missing the required parameter 'deleteAssessmentTemplateRequest' when calling deleteAssessmentTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DeleteAssessmentTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAssessmentRuns operation.
     * @callback module:api/DefaultApi~describeAssessmentRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAssessmentRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the assessment runs that are specified by the ARNs of the assessment runs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAssessmentRunsRequest} describeAssessmentRunsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAssessmentRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAssessmentRunsResponse}
     */
    describeAssessmentRuns(xAmzTarget, describeAssessmentRunsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAssessmentRunsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAssessmentRuns");
      }
      // verify the required parameter 'describeAssessmentRunsRequest' is set
      if (describeAssessmentRunsRequest === undefined || describeAssessmentRunsRequest === null) {
        throw new Error("Missing the required parameter 'describeAssessmentRunsRequest' when calling describeAssessmentRuns");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAssessmentRunsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DescribeAssessmentRuns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAssessmentTargets operation.
     * @callback module:api/DefaultApi~describeAssessmentTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAssessmentTargetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the assessment targets that are specified by the ARNs of the assessment targets.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAssessmentTargetsRequest} describeAssessmentTargetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAssessmentTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAssessmentTargetsResponse}
     */
    describeAssessmentTargets(xAmzTarget, describeAssessmentTargetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAssessmentTargetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAssessmentTargets");
      }
      // verify the required parameter 'describeAssessmentTargetsRequest' is set
      if (describeAssessmentTargetsRequest === undefined || describeAssessmentTargetsRequest === null) {
        throw new Error("Missing the required parameter 'describeAssessmentTargetsRequest' when calling describeAssessmentTargets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAssessmentTargetsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DescribeAssessmentTargets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAssessmentTemplates operation.
     * @callback module:api/DefaultApi~describeAssessmentTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAssessmentTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the assessment templates that are specified by the ARNs of the assessment templates.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAssessmentTemplatesRequest} describeAssessmentTemplatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAssessmentTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAssessmentTemplatesResponse}
     */
    describeAssessmentTemplates(xAmzTarget, describeAssessmentTemplatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAssessmentTemplatesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAssessmentTemplates");
      }
      // verify the required parameter 'describeAssessmentTemplatesRequest' is set
      if (describeAssessmentTemplatesRequest === undefined || describeAssessmentTemplatesRequest === null) {
        throw new Error("Missing the required parameter 'describeAssessmentTemplatesRequest' when calling describeAssessmentTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAssessmentTemplatesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DescribeAssessmentTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCrossAccountAccessRole operation.
     * @callback module:api/DefaultApi~describeCrossAccountAccessRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeCrossAccountAccessRoleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the IAM role that enables Amazon Inspector to access your AWS account.
     * @param {module:model/String} xAmzTarget 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeCrossAccountAccessRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeCrossAccountAccessRoleResponse}
     */
    describeCrossAccountAccessRole(xAmzTarget, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeCrossAccountAccessRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeCrossAccountAccessRoleResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DescribeCrossAccountAccessRole', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeExclusions operation.
     * @callback module:api/DefaultApi~describeExclusionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeExclusionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the exclusions that are specified by the exclusions' ARNs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeExclusionsRequest} describeExclusionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeExclusionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeExclusionsResponse}
     */
    describeExclusions(xAmzTarget, describeExclusionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeExclusionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeExclusions");
      }
      // verify the required parameter 'describeExclusionsRequest' is set
      if (describeExclusionsRequest === undefined || describeExclusionsRequest === null) {
        throw new Error("Missing the required parameter 'describeExclusionsRequest' when calling describeExclusions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeExclusionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DescribeExclusions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeFindings operation.
     * @callback module:api/DefaultApi~describeFindingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeFindingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the findings that are specified by the ARNs of the findings.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeFindingsRequest} describeFindingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeFindingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeFindingsResponse}
     */
    describeFindings(xAmzTarget, describeFindingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeFindingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeFindings");
      }
      // verify the required parameter 'describeFindingsRequest' is set
      if (describeFindingsRequest === undefined || describeFindingsRequest === null) {
        throw new Error("Missing the required parameter 'describeFindingsRequest' when calling describeFindings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeFindingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DescribeFindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeResourceGroups operation.
     * @callback module:api/DefaultApi~describeResourceGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeResourceGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the resource groups that are specified by the ARNs of the resource groups.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeResourceGroupsRequest} describeResourceGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeResourceGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeResourceGroupsResponse}
     */
    describeResourceGroups(xAmzTarget, describeResourceGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeResourceGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeResourceGroups");
      }
      // verify the required parameter 'describeResourceGroupsRequest' is set
      if (describeResourceGroupsRequest === undefined || describeResourceGroupsRequest === null) {
        throw new Error("Missing the required parameter 'describeResourceGroupsRequest' when calling describeResourceGroups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeResourceGroupsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DescribeResourceGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRulesPackages operation.
     * @callback module:api/DefaultApi~describeRulesPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRulesPackagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the rules packages that are specified by the ARNs of the rules packages.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeRulesPackagesRequest} describeRulesPackagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRulesPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRulesPackagesResponse}
     */
    describeRulesPackages(xAmzTarget, describeRulesPackagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeRulesPackagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeRulesPackages");
      }
      // verify the required parameter 'describeRulesPackagesRequest' is set
      if (describeRulesPackagesRequest === undefined || describeRulesPackagesRequest === null) {
        throw new Error("Missing the required parameter 'describeRulesPackagesRequest' when calling describeRulesPackages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRulesPackagesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.DescribeRulesPackages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssessmentReport operation.
     * @callback module:api/DefaultApi~getAssessmentReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssessmentReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Produces an assessment report that includes detailed and comprehensive results of a specified assessment run. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAssessmentReportRequest} getAssessmentReportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAssessmentReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssessmentReportResponse}
     */
    getAssessmentReport(xAmzTarget, getAssessmentReportRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAssessmentReportRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAssessmentReport");
      }
      // verify the required parameter 'getAssessmentReportRequest' is set
      if (getAssessmentReportRequest === undefined || getAssessmentReportRequest === null) {
        throw new Error("Missing the required parameter 'getAssessmentReportRequest' when calling getAssessmentReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAssessmentReportResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.GetAssessmentReport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExclusionsPreview operation.
     * @callback module:api/DefaultApi~getExclusionsPreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExclusionsPreviewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the exclusions preview (a list of ExclusionPreview objects) specified by the preview token. You can obtain the preview token by running the CreateExclusionsPreview API.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetExclusionsPreviewRequest} getExclusionsPreviewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getExclusionsPreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExclusionsPreviewResponse}
     */
    getExclusionsPreview(xAmzTarget, getExclusionsPreviewRequest, opts, callback) {
      opts = opts || {};
      let postBody = getExclusionsPreviewRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getExclusionsPreview");
      }
      // verify the required parameter 'getExclusionsPreviewRequest' is set
      if (getExclusionsPreviewRequest === undefined || getExclusionsPreviewRequest === null) {
        throw new Error("Missing the required parameter 'getExclusionsPreviewRequest' when calling getExclusionsPreview");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetExclusionsPreviewResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.GetExclusionsPreview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTelemetryMetadata operation.
     * @callback module:api/DefaultApi~getTelemetryMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTelemetryMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information about the data that is collected for the specified assessment run.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetTelemetryMetadataRequest} getTelemetryMetadataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTelemetryMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTelemetryMetadataResponse}
     */
    getTelemetryMetadata(xAmzTarget, getTelemetryMetadataRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTelemetryMetadataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getTelemetryMetadata");
      }
      // verify the required parameter 'getTelemetryMetadataRequest' is set
      if (getTelemetryMetadataRequest === undefined || getTelemetryMetadataRequest === null) {
        throw new Error("Missing the required parameter 'getTelemetryMetadataRequest' when calling getTelemetryMetadata");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTelemetryMetadataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.GetTelemetryMetadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssessmentRunAgents operation.
     * @callback module:api/DefaultApi~listAssessmentRunAgentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssessmentRunAgentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the agents of the assessment runs that are specified by the ARNs of the assessment runs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAssessmentRunAgentsRequest} listAssessmentRunAgentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAssessmentRunAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssessmentRunAgentsResponse}
     */
    listAssessmentRunAgents(xAmzTarget, listAssessmentRunAgentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAssessmentRunAgentsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAssessmentRunAgents");
      }
      // verify the required parameter 'listAssessmentRunAgentsRequest' is set
      if (listAssessmentRunAgentsRequest === undefined || listAssessmentRunAgentsRequest === null) {
        throw new Error("Missing the required parameter 'listAssessmentRunAgentsRequest' when calling listAssessmentRunAgents");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAssessmentRunAgentsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.ListAssessmentRunAgents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssessmentRuns operation.
     * @callback module:api/DefaultApi~listAssessmentRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssessmentRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the assessment runs that correspond to the assessment templates that are specified by the ARNs of the assessment templates.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAssessmentRunsRequest} listAssessmentRunsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAssessmentRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssessmentRunsResponse}
     */
    listAssessmentRuns(xAmzTarget, listAssessmentRunsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAssessmentRunsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAssessmentRuns");
      }
      // verify the required parameter 'listAssessmentRunsRequest' is set
      if (listAssessmentRunsRequest === undefined || listAssessmentRunsRequest === null) {
        throw new Error("Missing the required parameter 'listAssessmentRunsRequest' when calling listAssessmentRuns");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAssessmentRunsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.ListAssessmentRuns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssessmentTargets operation.
     * @callback module:api/DefaultApi~listAssessmentTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssessmentTargetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the ARNs of the assessment targets within this AWS account. For more information about assessment targets, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html\">Amazon Inspector Assessment Targets</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAssessmentTargetsRequest} listAssessmentTargetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAssessmentTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssessmentTargetsResponse}
     */
    listAssessmentTargets(xAmzTarget, listAssessmentTargetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAssessmentTargetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAssessmentTargets");
      }
      // verify the required parameter 'listAssessmentTargetsRequest' is set
      if (listAssessmentTargetsRequest === undefined || listAssessmentTargetsRequest === null) {
        throw new Error("Missing the required parameter 'listAssessmentTargetsRequest' when calling listAssessmentTargets");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAssessmentTargetsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.ListAssessmentTargets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssessmentTemplates operation.
     * @callback module:api/DefaultApi~listAssessmentTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssessmentTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the assessment templates that correspond to the assessment targets that are specified by the ARNs of the assessment targets.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAssessmentTemplatesRequest} listAssessmentTemplatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAssessmentTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssessmentTemplatesResponse}
     */
    listAssessmentTemplates(xAmzTarget, listAssessmentTemplatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAssessmentTemplatesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAssessmentTemplates");
      }
      // verify the required parameter 'listAssessmentTemplatesRequest' is set
      if (listAssessmentTemplatesRequest === undefined || listAssessmentTemplatesRequest === null) {
        throw new Error("Missing the required parameter 'listAssessmentTemplatesRequest' when calling listAssessmentTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAssessmentTemplatesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.ListAssessmentTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEventSubscriptions operation.
     * @callback module:api/DefaultApi~listEventSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEventSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the event subscriptions for the assessment template that is specified by the ARN of the assessment template. For more information, see <a>SubscribeToEvent</a> and <a>UnsubscribeFromEvent</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListEventSubscriptionsRequest} listEventSubscriptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listEventSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEventSubscriptionsResponse}
     */
    listEventSubscriptions(xAmzTarget, listEventSubscriptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listEventSubscriptionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listEventSubscriptions");
      }
      // verify the required parameter 'listEventSubscriptionsRequest' is set
      if (listEventSubscriptionsRequest === undefined || listEventSubscriptionsRequest === null) {
        throw new Error("Missing the required parameter 'listEventSubscriptionsRequest' when calling listEventSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListEventSubscriptionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.ListEventSubscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExclusions operation.
     * @callback module:api/DefaultApi~listExclusionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExclusionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List exclusions that are generated by the assessment run.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListExclusionsRequest} listExclusionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExclusionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExclusionsResponse}
     */
    listExclusions(xAmzTarget, listExclusionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExclusionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listExclusions");
      }
      // verify the required parameter 'listExclusionsRequest' is set
      if (listExclusionsRequest === undefined || listExclusionsRequest === null) {
        throw new Error("Missing the required parameter 'listExclusionsRequest' when calling listExclusions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExclusionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.ListExclusions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFindings operation.
     * @callback module:api/DefaultApi~listFindingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFindingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists findings that are generated by the assessment runs that are specified by the ARNs of the assessment runs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFindingsRequest} listFindingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listFindingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFindingsResponse}
     */
    listFindings(xAmzTarget, listFindingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFindingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFindings");
      }
      // verify the required parameter 'listFindingsRequest' is set
      if (listFindingsRequest === undefined || listFindingsRequest === null) {
        throw new Error("Missing the required parameter 'listFindingsRequest' when calling listFindings");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFindingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.ListFindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRulesPackages operation.
     * @callback module:api/DefaultApi~listRulesPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRulesPackagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all available Amazon Inspector rules packages.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListRulesPackagesRequest} listRulesPackagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listRulesPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRulesPackagesResponse}
     */
    listRulesPackages(xAmzTarget, listRulesPackagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRulesPackagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listRulesPackages");
      }
      // verify the required parameter 'listRulesPackagesRequest' is set
      if (listRulesPackagesRequest === undefined || listRulesPackagesRequest === null) {
        throw new Error("Missing the required parameter 'listRulesPackagesRequest' when calling listRulesPackages");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListRulesPackagesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.ListRulesPackages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags associated with an assessment template.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previewAgents operation.
     * @callback module:api/DefaultApi~previewAgentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreviewAgentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Previews the agents installed on the EC2 instances that are part of the specified assessment target.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PreviewAgentsRequest} previewAgentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~previewAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreviewAgentsResponse}
     */
    previewAgents(xAmzTarget, previewAgentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = previewAgentsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling previewAgents");
      }
      // verify the required parameter 'previewAgentsRequest' is set
      if (previewAgentsRequest === undefined || previewAgentsRequest === null) {
        throw new Error("Missing the required parameter 'previewAgentsRequest' when calling previewAgents");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PreviewAgentsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.PreviewAgents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerCrossAccountAccessRole operation.
     * @callback module:api/DefaultApi~registerCrossAccountAccessRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers the IAM role that grants Amazon Inspector access to AWS Services needed to perform security assessments.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RegisterCrossAccountAccessRoleRequest} registerCrossAccountAccessRoleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerCrossAccountAccessRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registerCrossAccountAccessRole(xAmzTarget, registerCrossAccountAccessRoleRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerCrossAccountAccessRoleRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling registerCrossAccountAccessRole");
      }
      // verify the required parameter 'registerCrossAccountAccessRoleRequest' is set
      if (registerCrossAccountAccessRoleRequest === undefined || registerCrossAccountAccessRoleRequest === null) {
        throw new Error("Missing the required parameter 'registerCrossAccountAccessRoleRequest' when calling registerCrossAccountAccessRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.RegisterCrossAccountAccessRole', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAttributesFromFindings operation.
     * @callback module:api/DefaultApi~removeAttributesFromFindingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveAttributesFromFindingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes entire attributes (key and value pairs) from the findings that are specified by the ARNs of the findings where an attribute with the specified key exists.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RemoveAttributesFromFindingsRequest} removeAttributesFromFindingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeAttributesFromFindingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveAttributesFromFindingsResponse}
     */
    removeAttributesFromFindings(xAmzTarget, removeAttributesFromFindingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeAttributesFromFindingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling removeAttributesFromFindings");
      }
      // verify the required parameter 'removeAttributesFromFindingsRequest' is set
      if (removeAttributesFromFindingsRequest === undefined || removeAttributesFromFindingsRequest === null) {
        throw new Error("Missing the required parameter 'removeAttributesFromFindingsRequest' when calling removeAttributesFromFindings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RemoveAttributesFromFindingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.RemoveAttributesFromFindings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setTagsForResource operation.
     * @callback module:api/DefaultApi~setTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets tags (key and value pairs) to the assessment template that is specified by the ARN of the assessment template.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SetTagsForResourceRequest} setTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~setTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setTagsForResource(xAmzTarget, setTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = setTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling setTagsForResource");
      }
      // verify the required parameter 'setTagsForResourceRequest' is set
      if (setTagsForResourceRequest === undefined || setTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'setTagsForResourceRequest' when calling setTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.SetTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startAssessmentRun operation.
     * @callback module:api/DefaultApi~startAssessmentRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartAssessmentRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the assessment run specified by the ARN of the assessment template. For this API to function properly, you must not exceed the limit of running up to 500 concurrent agents per AWS account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartAssessmentRunRequest} startAssessmentRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startAssessmentRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartAssessmentRunResponse}
     */
    startAssessmentRun(xAmzTarget, startAssessmentRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = startAssessmentRunRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startAssessmentRun");
      }
      // verify the required parameter 'startAssessmentRunRequest' is set
      if (startAssessmentRunRequest === undefined || startAssessmentRunRequest === null) {
        throw new Error("Missing the required parameter 'startAssessmentRunRequest' when calling startAssessmentRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartAssessmentRunResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.StartAssessmentRun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopAssessmentRun operation.
     * @callback module:api/DefaultApi~stopAssessmentRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops the assessment run that is specified by the ARN of the assessment run.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopAssessmentRunRequest} stopAssessmentRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopAssessmentRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopAssessmentRun(xAmzTarget, stopAssessmentRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopAssessmentRunRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopAssessmentRun");
      }
      // verify the required parameter 'stopAssessmentRunRequest' is set
      if (stopAssessmentRunRequest === undefined || stopAssessmentRunRequest === null) {
        throw new Error("Missing the required parameter 'stopAssessmentRunRequest' when calling stopAssessmentRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.StopAssessmentRun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeToEvent operation.
     * @callback module:api/DefaultApi~subscribeToEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the process of sending Amazon Simple Notification Service (SNS) notifications about a specified event to a specified SNS topic.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SubscribeToEventRequest} subscribeToEventRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~subscribeToEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscribeToEvent(xAmzTarget, subscribeToEventRequest, opts, callback) {
      opts = opts || {};
      let postBody = subscribeToEventRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling subscribeToEvent");
      }
      // verify the required parameter 'subscribeToEventRequest' is set
      if (subscribeToEventRequest === undefined || subscribeToEventRequest === null) {
        throw new Error("Missing the required parameter 'subscribeToEventRequest' when calling subscribeToEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.SubscribeToEvent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeFromEvent operation.
     * @callback module:api/DefaultApi~unsubscribeFromEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the process of sending Amazon Simple Notification Service (SNS) notifications about a specified event to a specified SNS topic.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UnsubscribeFromEventRequest} unsubscribeFromEventRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~unsubscribeFromEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unsubscribeFromEvent(xAmzTarget, unsubscribeFromEventRequest, opts, callback) {
      opts = opts || {};
      let postBody = unsubscribeFromEventRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling unsubscribeFromEvent");
      }
      // verify the required parameter 'unsubscribeFromEventRequest' is set
      if (unsubscribeFromEventRequest === undefined || unsubscribeFromEventRequest === null) {
        throw new Error("Missing the required parameter 'unsubscribeFromEventRequest' when calling unsubscribeFromEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.UnsubscribeFromEvent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssessmentTarget operation.
     * @callback module:api/DefaultApi~updateAssessmentTargetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the assessment target that is specified by the ARN of the assessment target.</p> <p>If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAssessmentTargetRequest} updateAssessmentTargetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAssessmentTargetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateAssessmentTarget(xAmzTarget, updateAssessmentTargetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAssessmentTargetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAssessmentTarget");
      }
      // verify the required parameter 'updateAssessmentTargetRequest' is set
      if (updateAssessmentTargetRequest === undefined || updateAssessmentTargetRequest === null) {
        throw new Error("Missing the required parameter 'updateAssessmentTargetRequest' when calling updateAssessmentTarget");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=InspectorService.UpdateAssessmentTarget', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
