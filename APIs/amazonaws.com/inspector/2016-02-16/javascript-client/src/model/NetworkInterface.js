/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkInterface model module.
 * @module model/NetworkInterface
 * @version 2016-02-16
 */
class NetworkInterface {
    /**
     * Constructs a new <code>NetworkInterface</code>.
     * Contains information about the network interfaces interacting with an EC2 instance. This data type is used as one of the elements of the &lt;a&gt;AssetAttributes&lt;/a&gt; data type.
     * @alias module:model/NetworkInterface
     */
    constructor() { 
        
        NetworkInterface.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkInterface} obj Optional instance to populate.
     * @return {module:model/NetworkInterface} The populated <code>NetworkInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkInterface();

            if (data.hasOwnProperty('networkInterfaceId')) {
                obj['networkInterfaceId'] = ApiClient.convertToType(data['networkInterfaceId'], 'String');
            }
            if (data.hasOwnProperty('subnetId')) {
                obj['subnetId'] = ApiClient.convertToType(data['subnetId'], 'String');
            }
            if (data.hasOwnProperty('vpcId')) {
                obj['vpcId'] = ApiClient.convertToType(data['vpcId'], 'String');
            }
            if (data.hasOwnProperty('privateDnsName')) {
                obj['privateDnsName'] = ApiClient.convertToType(data['privateDnsName'], 'String');
            }
            if (data.hasOwnProperty('privateIpAddress')) {
                obj['privateIpAddress'] = ApiClient.convertToType(data['privateIpAddress'], 'String');
            }
            if (data.hasOwnProperty('privateIpAddresses')) {
                obj['privateIpAddresses'] = ApiClient.convertToType(data['privateIpAddresses'], Array);
            }
            if (data.hasOwnProperty('publicDnsName')) {
                obj['publicDnsName'] = ApiClient.convertToType(data['publicDnsName'], 'String');
            }
            if (data.hasOwnProperty('publicIp')) {
                obj['publicIp'] = ApiClient.convertToType(data['publicIp'], 'String');
            }
            if (data.hasOwnProperty('ipv6Addresses')) {
                obj['ipv6Addresses'] = ApiClient.convertToType(data['ipv6Addresses'], Array);
            }
            if (data.hasOwnProperty('securityGroups')) {
                obj['securityGroups'] = ApiClient.convertToType(data['securityGroups'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkInterface</code>.
     */
    static validateJSON(data) {
        // validate the optional field `networkInterfaceId`
        if (data['networkInterfaceId']) { // data not null
          String.validateJSON(data['networkInterfaceId']);
        }
        // validate the optional field `subnetId`
        if (data['subnetId']) { // data not null
          String.validateJSON(data['subnetId']);
        }
        // validate the optional field `vpcId`
        if (data['vpcId']) { // data not null
          String.validateJSON(data['vpcId']);
        }
        // validate the optional field `privateDnsName`
        if (data['privateDnsName']) { // data not null
          String.validateJSON(data['privateDnsName']);
        }
        // validate the optional field `privateIpAddress`
        if (data['privateIpAddress']) { // data not null
          String.validateJSON(data['privateIpAddress']);
        }
        // validate the optional field `privateIpAddresses`
        if (data['privateIpAddresses']) { // data not null
          Array.validateJSON(data['privateIpAddresses']);
        }
        // validate the optional field `publicDnsName`
        if (data['publicDnsName']) { // data not null
          String.validateJSON(data['publicDnsName']);
        }
        // validate the optional field `publicIp`
        if (data['publicIp']) { // data not null
          String.validateJSON(data['publicIp']);
        }
        // validate the optional field `ipv6Addresses`
        if (data['ipv6Addresses']) { // data not null
          Array.validateJSON(data['ipv6Addresses']);
        }
        // validate the optional field `securityGroups`
        if (data['securityGroups']) { // data not null
          Array.validateJSON(data['securityGroups']);
        }

        return true;
    }


}



/**
 * @member {String} networkInterfaceId
 */
NetworkInterface.prototype['networkInterfaceId'] = undefined;

/**
 * @member {String} subnetId
 */
NetworkInterface.prototype['subnetId'] = undefined;

/**
 * @member {String} vpcId
 */
NetworkInterface.prototype['vpcId'] = undefined;

/**
 * @member {String} privateDnsName
 */
NetworkInterface.prototype['privateDnsName'] = undefined;

/**
 * @member {String} privateIpAddress
 */
NetworkInterface.prototype['privateIpAddress'] = undefined;

/**
 * @member {Array} privateIpAddresses
 */
NetworkInterface.prototype['privateIpAddresses'] = undefined;

/**
 * @member {String} publicDnsName
 */
NetworkInterface.prototype['publicDnsName'] = undefined;

/**
 * @member {String} publicIp
 */
NetworkInterface.prototype['publicIp'] = undefined;

/**
 * @member {Array} ipv6Addresses
 */
NetworkInterface.prototype['ipv6Addresses'] = undefined;

/**
 * @member {Array} securityGroups
 */
NetworkInterface.prototype['securityGroups'] = undefined;






export default NetworkInterface;

