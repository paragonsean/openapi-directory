/**
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetType from './AssetType';
import FindingAssetAttributes from './FindingAssetAttributes';
import FindingServiceAttributes from './FindingServiceAttributes';
import Severity from './Severity';

/**
 * The Finding model module.
 * @module model/Finding
 * @version 2016-02-16
 */
class Finding {
    /**
     * Constructs a new <code>Finding</code>.
     * Contains information about an Amazon Inspector finding. This data type is used as the response element in the &lt;a&gt;DescribeFindings&lt;/a&gt; action.
     * @alias module:model/Finding
     * @param arn {String} 
     * @param attributes {Array} 
     * @param userAttributes {Array} 
     * @param createdAt {Date} 
     * @param updatedAt {Date} 
     */
    constructor(arn, attributes, userAttributes, createdAt, updatedAt) { 
        
        Finding.initialize(this, arn, attributes, userAttributes, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, arn, attributes, userAttributes, createdAt, updatedAt) { 
        obj['arn'] = arn;
        obj['attributes'] = attributes;
        obj['userAttributes'] = userAttributes;
        obj['createdAt'] = createdAt;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>Finding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Finding} obj Optional instance to populate.
     * @return {module:model/Finding} The populated <code>Finding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Finding();

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'Number');
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('serviceAttributes')) {
                obj['serviceAttributes'] = FindingServiceAttributes.constructFromObject(data['serviceAttributes']);
            }
            if (data.hasOwnProperty('assetType')) {
                obj['assetType'] = ApiClient.convertToType(data['assetType'], AssetType);
            }
            if (data.hasOwnProperty('assetAttributes')) {
                obj['assetAttributes'] = FindingAssetAttributes.constructFromObject(data['assetAttributes']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('recommendation')) {
                obj['recommendation'] = ApiClient.convertToType(data['recommendation'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], Severity);
            }
            if (data.hasOwnProperty('numericSeverity')) {
                obj['numericSeverity'] = ApiClient.convertToType(data['numericSeverity'], 'Number');
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('indicatorOfCompromise')) {
                obj['indicatorOfCompromise'] = ApiClient.convertToType(data['indicatorOfCompromise'], 'Boolean');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], Array);
            }
            if (data.hasOwnProperty('userAttributes')) {
                obj['userAttributes'] = ApiClient.convertToType(data['userAttributes'], Array);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Finding</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Finding</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Finding.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `schemaVersion`
        if (data['schemaVersion']) { // data not null
          Number.validateJSON(data['schemaVersion']);
        }
        // validate the optional field `service`
        if (data['service']) { // data not null
          String.validateJSON(data['service']);
        }
        // validate the optional field `serviceAttributes`
        if (data['serviceAttributes']) { // data not null
          FindingServiceAttributes.validateJSON(data['serviceAttributes']);
        }
        // validate the optional field `assetType`
        if (data['assetType']) { // data not null
          AssetType.validateJSON(data['assetType']);
        }
        // validate the optional field `assetAttributes`
        if (data['assetAttributes']) { // data not null
          FindingAssetAttributes.validateJSON(data['assetAttributes']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `title`
        if (data['title']) { // data not null
          String.validateJSON(data['title']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `recommendation`
        if (data['recommendation']) { // data not null
          String.validateJSON(data['recommendation']);
        }
        // validate the optional field `severity`
        if (data['severity']) { // data not null
          Severity.validateJSON(data['severity']);
        }
        // validate the optional field `numericSeverity`
        if (data['numericSeverity']) { // data not null
          Number.validateJSON(data['numericSeverity']);
        }
        // validate the optional field `confidence`
        if (data['confidence']) { // data not null
          Number.validateJSON(data['confidence']);
        }
        // validate the optional field `indicatorOfCompromise`
        if (data['indicatorOfCompromise']) { // data not null
          Boolean.validateJSON(data['indicatorOfCompromise']);
        }
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          Array.validateJSON(data['attributes']);
        }
        // validate the optional field `userAttributes`
        if (data['userAttributes']) { // data not null
          Array.validateJSON(data['userAttributes']);
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `updatedAt`
        if (data['updatedAt']) { // data not null
          Date.validateJSON(data['updatedAt']);
        }

        return true;
    }


}

Finding.RequiredProperties = ["arn", "attributes", "userAttributes", "createdAt", "updatedAt"];

/**
 * @member {String} arn
 */
Finding.prototype['arn'] = undefined;

/**
 * @member {Number} schemaVersion
 */
Finding.prototype['schemaVersion'] = undefined;

/**
 * @member {String} service
 */
Finding.prototype['service'] = undefined;

/**
 * @member {module:model/FindingServiceAttributes} serviceAttributes
 */
Finding.prototype['serviceAttributes'] = undefined;

/**
 * @member {module:model/AssetType} assetType
 */
Finding.prototype['assetType'] = undefined;

/**
 * @member {module:model/FindingAssetAttributes} assetAttributes
 */
Finding.prototype['assetAttributes'] = undefined;

/**
 * @member {String} id
 */
Finding.prototype['id'] = undefined;

/**
 * @member {String} title
 */
Finding.prototype['title'] = undefined;

/**
 * @member {String} description
 */
Finding.prototype['description'] = undefined;

/**
 * @member {String} recommendation
 */
Finding.prototype['recommendation'] = undefined;

/**
 * @member {module:model/Severity} severity
 */
Finding.prototype['severity'] = undefined;

/**
 * @member {Number} numericSeverity
 */
Finding.prototype['numericSeverity'] = undefined;

/**
 * @member {Number} confidence
 */
Finding.prototype['confidence'] = undefined;

/**
 * @member {Boolean} indicatorOfCompromise
 */
Finding.prototype['indicatorOfCompromise'] = undefined;

/**
 * @member {Array} attributes
 */
Finding.prototype['attributes'] = undefined;

/**
 * @member {Array} userAttributes
 */
Finding.prototype['userAttributes'] = undefined;

/**
 * @member {Date} createdAt
 */
Finding.prototype['createdAt'] = undefined;

/**
 * @member {Date} updatedAt
 */
Finding.prototype['updatedAt'] = undefined;






export default Finding;

