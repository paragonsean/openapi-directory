/*
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddAttributesToFindingsRequest;
import org.openapitools.client.model.AddAttributesToFindingsResponse;
import org.openapitools.client.model.CreateAssessmentTargetRequest;
import org.openapitools.client.model.CreateAssessmentTargetResponse;
import org.openapitools.client.model.CreateAssessmentTemplateRequest;
import org.openapitools.client.model.CreateAssessmentTemplateResponse;
import org.openapitools.client.model.CreateExclusionsPreviewRequest;
import org.openapitools.client.model.CreateExclusionsPreviewResponse;
import org.openapitools.client.model.CreateResourceGroupRequest;
import org.openapitools.client.model.CreateResourceGroupResponse;
import org.openapitools.client.model.DeleteAssessmentRunRequest;
import org.openapitools.client.model.DeleteAssessmentTargetRequest;
import org.openapitools.client.model.DeleteAssessmentTemplateRequest;
import org.openapitools.client.model.DescribeAssessmentRunsRequest;
import org.openapitools.client.model.DescribeAssessmentRunsResponse;
import org.openapitools.client.model.DescribeAssessmentTargetsRequest;
import org.openapitools.client.model.DescribeAssessmentTargetsResponse;
import org.openapitools.client.model.DescribeAssessmentTemplatesRequest;
import org.openapitools.client.model.DescribeAssessmentTemplatesResponse;
import org.openapitools.client.model.DescribeCrossAccountAccessRoleResponse;
import org.openapitools.client.model.DescribeExclusionsRequest;
import org.openapitools.client.model.DescribeExclusionsResponse;
import org.openapitools.client.model.DescribeFindingsRequest;
import org.openapitools.client.model.DescribeFindingsResponse;
import org.openapitools.client.model.DescribeResourceGroupsRequest;
import org.openapitools.client.model.DescribeResourceGroupsResponse;
import org.openapitools.client.model.DescribeRulesPackagesRequest;
import org.openapitools.client.model.DescribeRulesPackagesResponse;
import org.openapitools.client.model.GetAssessmentReportRequest;
import org.openapitools.client.model.GetAssessmentReportResponse;
import org.openapitools.client.model.GetExclusionsPreviewRequest;
import org.openapitools.client.model.GetExclusionsPreviewResponse;
import org.openapitools.client.model.GetTelemetryMetadataRequest;
import org.openapitools.client.model.GetTelemetryMetadataResponse;
import org.openapitools.client.model.ListAssessmentRunAgentsRequest;
import org.openapitools.client.model.ListAssessmentRunAgentsResponse;
import org.openapitools.client.model.ListAssessmentRunsRequest;
import org.openapitools.client.model.ListAssessmentRunsResponse;
import org.openapitools.client.model.ListAssessmentTargetsRequest;
import org.openapitools.client.model.ListAssessmentTargetsResponse;
import org.openapitools.client.model.ListAssessmentTemplatesRequest;
import org.openapitools.client.model.ListAssessmentTemplatesResponse;
import org.openapitools.client.model.ListEventSubscriptionsRequest;
import org.openapitools.client.model.ListEventSubscriptionsResponse;
import org.openapitools.client.model.ListExclusionsRequest;
import org.openapitools.client.model.ListExclusionsResponse;
import org.openapitools.client.model.ListFindingsRequest;
import org.openapitools.client.model.ListFindingsResponse;
import org.openapitools.client.model.ListRulesPackagesRequest;
import org.openapitools.client.model.ListRulesPackagesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PreviewAgentsRequest;
import org.openapitools.client.model.PreviewAgentsResponse;
import org.openapitools.client.model.RegisterCrossAccountAccessRoleRequest;
import org.openapitools.client.model.RemoveAttributesFromFindingsRequest;
import org.openapitools.client.model.RemoveAttributesFromFindingsResponse;
import org.openapitools.client.model.SetTagsForResourceRequest;
import org.openapitools.client.model.StartAssessmentRunRequest;
import org.openapitools.client.model.StartAssessmentRunResponse;
import org.openapitools.client.model.StopAssessmentRunRequest;
import org.openapitools.client.model.SubscribeToEventRequest;
import org.openapitools.client.model.UnsubscribeFromEventRequest;
import org.openapitools.client.model.UpdateAssessmentTargetRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Assigns attributes (key and value pairs) to the findings that are specified by the ARNs of the findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAttributesToFindingsTest() throws ApiException {
        String xAmzTarget = null;
        AddAttributesToFindingsRequest addAttributesToFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddAttributesToFindingsResponse response = api.addAttributesToFindings(xAmzTarget, addAttributesToFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new assessment target using the ARN of the resource group that is generated by &lt;a&gt;CreateResourceGroup&lt;/a&gt;. If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target. If the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html\&quot;&gt;service-linked role&lt;/a&gt; isn’t already registered, this action also creates and registers a service-linked role to grant Amazon Inspector access to AWS Services needed to perform security assessments. You can create up to 50 assessment targets per AWS account. You can run up to 500 concurrent agents per AWS account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html\&quot;&gt; Amazon Inspector Assessment Targets&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssessmentTargetTest() throws ApiException {
        String xAmzTarget = null;
        CreateAssessmentTargetRequest createAssessmentTargetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAssessmentTargetResponse response = api.createAssessmentTarget(xAmzTarget, createAssessmentTargetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an assessment template for the assessment target that is specified by the ARN of the assessment target. If the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/inspector/latest/userguide/inspector_slr.html\&quot;&gt;service-linked role&lt;/a&gt; isn’t already registered, this action also creates and registers a service-linked role to grant Amazon Inspector access to AWS Services needed to perform security assessments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssessmentTemplateTest() throws ApiException {
        String xAmzTarget = null;
        CreateAssessmentTemplateRequest createAssessmentTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAssessmentTemplateResponse response = api.createAssessmentTemplate(xAmzTarget, createAssessmentTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the generation of an exclusions preview for the specified assessment template. The exclusions preview lists the potential exclusions (ExclusionPreview) that Inspector can detect before it runs the assessment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExclusionsPreviewTest() throws ApiException {
        String xAmzTarget = null;
        CreateExclusionsPreviewRequest createExclusionsPreviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateExclusionsPreviewResponse response = api.createExclusionsPreview(xAmzTarget, createExclusionsPreviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a resource group using the specified set of tags (key and value pairs) that are used to select the EC2 instances to be included in an Amazon Inspector assessment target. The created resource group is then used to create an Amazon Inspector assessment target. For more information, see &lt;a&gt;CreateAssessmentTarget&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourceGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateResourceGroupRequest createResourceGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateResourceGroupResponse response = api.createResourceGroup(xAmzTarget, createResourceGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the assessment run that is specified by the ARN of the assessment run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssessmentRunTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAssessmentRunRequest deleteAssessmentRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAssessmentRun(xAmzTarget, deleteAssessmentRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the assessment target that is specified by the ARN of the assessment target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssessmentTargetTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAssessmentTargetRequest deleteAssessmentTargetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAssessmentTarget(xAmzTarget, deleteAssessmentTargetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the assessment template that is specified by the ARN of the assessment template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssessmentTemplateTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAssessmentTemplateRequest deleteAssessmentTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAssessmentTemplate(xAmzTarget, deleteAssessmentTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the assessment runs that are specified by the ARNs of the assessment runs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAssessmentRunsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAssessmentRunsRequest describeAssessmentRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAssessmentRunsResponse response = api.describeAssessmentRuns(xAmzTarget, describeAssessmentRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the assessment targets that are specified by the ARNs of the assessment targets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAssessmentTargetsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAssessmentTargetsRequest describeAssessmentTargetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAssessmentTargetsResponse response = api.describeAssessmentTargets(xAmzTarget, describeAssessmentTargetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the assessment templates that are specified by the ARNs of the assessment templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAssessmentTemplatesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAssessmentTemplatesRequest describeAssessmentTemplatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAssessmentTemplatesResponse response = api.describeAssessmentTemplates(xAmzTarget, describeAssessmentTemplatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the IAM role that enables Amazon Inspector to access your AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCrossAccountAccessRoleTest() throws ApiException {
        String xAmzTarget = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeCrossAccountAccessRoleResponse response = api.describeCrossAccountAccessRole(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the exclusions that are specified by the exclusions&#39; ARNs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeExclusionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeExclusionsRequest describeExclusionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeExclusionsResponse response = api.describeExclusions(xAmzTarget, describeExclusionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the findings that are specified by the ARNs of the findings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFindingsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFindingsRequest describeFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeFindingsResponse response = api.describeFindings(xAmzTarget, describeFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the resource groups that are specified by the ARNs of the resource groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeResourceGroupsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeResourceGroupsRequest describeResourceGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeResourceGroupsResponse response = api.describeResourceGroups(xAmzTarget, describeResourceGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the rules packages that are specified by the ARNs of the rules packages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRulesPackagesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRulesPackagesRequest describeRulesPackagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRulesPackagesResponse response = api.describeRulesPackages(xAmzTarget, describeRulesPackagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Produces an assessment report that includes detailed and comprehensive results of a specified assessment run. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssessmentReportTest() throws ApiException {
        String xAmzTarget = null;
        GetAssessmentReportRequest getAssessmentReportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAssessmentReportResponse response = api.getAssessmentReport(xAmzTarget, getAssessmentReportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the exclusions preview (a list of ExclusionPreview objects) specified by the preview token. You can obtain the preview token by running the CreateExclusionsPreview API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExclusionsPreviewTest() throws ApiException {
        String xAmzTarget = null;
        GetExclusionsPreviewRequest getExclusionsPreviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetExclusionsPreviewResponse response = api.getExclusionsPreview(xAmzTarget, getExclusionsPreviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Information about the data that is collected for the specified assessment run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTelemetryMetadataTest() throws ApiException {
        String xAmzTarget = null;
        GetTelemetryMetadataRequest getTelemetryMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTelemetryMetadataResponse response = api.getTelemetryMetadata(xAmzTarget, getTelemetryMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the agents of the assessment runs that are specified by the ARNs of the assessment runs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssessmentRunAgentsTest() throws ApiException {
        String xAmzTarget = null;
        ListAssessmentRunAgentsRequest listAssessmentRunAgentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAssessmentRunAgentsResponse response = api.listAssessmentRunAgents(xAmzTarget, listAssessmentRunAgentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the assessment runs that correspond to the assessment templates that are specified by the ARNs of the assessment templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssessmentRunsTest() throws ApiException {
        String xAmzTarget = null;
        ListAssessmentRunsRequest listAssessmentRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAssessmentRunsResponse response = api.listAssessmentRuns(xAmzTarget, listAssessmentRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the ARNs of the assessment targets within this AWS account. For more information about assessment targets, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/inspector/latest/userguide/inspector_applications.html\&quot;&gt;Amazon Inspector Assessment Targets&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssessmentTargetsTest() throws ApiException {
        String xAmzTarget = null;
        ListAssessmentTargetsRequest listAssessmentTargetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAssessmentTargetsResponse response = api.listAssessmentTargets(xAmzTarget, listAssessmentTargetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the assessment templates that correspond to the assessment targets that are specified by the ARNs of the assessment targets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssessmentTemplatesTest() throws ApiException {
        String xAmzTarget = null;
        ListAssessmentTemplatesRequest listAssessmentTemplatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAssessmentTemplatesResponse response = api.listAssessmentTemplates(xAmzTarget, listAssessmentTemplatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the event subscriptions for the assessment template that is specified by the ARN of the assessment template. For more information, see &lt;a&gt;SubscribeToEvent&lt;/a&gt; and &lt;a&gt;UnsubscribeFromEvent&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventSubscriptionsTest() throws ApiException {
        String xAmzTarget = null;
        ListEventSubscriptionsRequest listEventSubscriptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListEventSubscriptionsResponse response = api.listEventSubscriptions(xAmzTarget, listEventSubscriptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List exclusions that are generated by the assessment run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExclusionsTest() throws ApiException {
        String xAmzTarget = null;
        ListExclusionsRequest listExclusionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListExclusionsResponse response = api.listExclusions(xAmzTarget, listExclusionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists findings that are generated by the assessment runs that are specified by the ARNs of the assessment runs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFindingsTest() throws ApiException {
        String xAmzTarget = null;
        ListFindingsRequest listFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFindingsResponse response = api.listFindings(xAmzTarget, listFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all available Amazon Inspector rules packages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRulesPackagesTest() throws ApiException {
        String xAmzTarget = null;
        ListRulesPackagesRequest listRulesPackagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListRulesPackagesResponse response = api.listRulesPackages(xAmzTarget, listRulesPackagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all tags associated with an assessment template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Previews the agents installed on the EC2 instances that are part of the specified assessment target.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void previewAgentsTest() throws ApiException {
        String xAmzTarget = null;
        PreviewAgentsRequest previewAgentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        PreviewAgentsResponse response = api.previewAgents(xAmzTarget, previewAgentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Registers the IAM role that grants Amazon Inspector access to AWS Services needed to perform security assessments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerCrossAccountAccessRoleTest() throws ApiException {
        String xAmzTarget = null;
        RegisterCrossAccountAccessRoleRequest registerCrossAccountAccessRoleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.registerCrossAccountAccessRole(xAmzTarget, registerCrossAccountAccessRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes entire attributes (key and value pairs) from the findings that are specified by the ARNs of the findings where an attribute with the specified key exists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAttributesFromFindingsTest() throws ApiException {
        String xAmzTarget = null;
        RemoveAttributesFromFindingsRequest removeAttributesFromFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveAttributesFromFindingsResponse response = api.removeAttributesFromFindings(xAmzTarget, removeAttributesFromFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets tags (key and value pairs) to the assessment template that is specified by the ARN of the assessment template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        SetTagsForResourceRequest setTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.setTagsForResource(xAmzTarget, setTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts the assessment run specified by the ARN of the assessment template. For this API to function properly, you must not exceed the limit of running up to 500 concurrent agents per AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAssessmentRunTest() throws ApiException {
        String xAmzTarget = null;
        StartAssessmentRunRequest startAssessmentRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartAssessmentRunResponse response = api.startAssessmentRun(xAmzTarget, startAssessmentRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the assessment run that is specified by the ARN of the assessment run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopAssessmentRunTest() throws ApiException {
        String xAmzTarget = null;
        StopAssessmentRunRequest stopAssessmentRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.stopAssessmentRun(xAmzTarget, stopAssessmentRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the process of sending Amazon Simple Notification Service (SNS) notifications about a specified event to a specified SNS topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeToEventTest() throws ApiException {
        String xAmzTarget = null;
        SubscribeToEventRequest subscribeToEventRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.subscribeToEvent(xAmzTarget, subscribeToEventRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the process of sending Amazon Simple Notification Service (SNS) notifications about a specified event to a specified SNS topic.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeFromEventTest() throws ApiException {
        String xAmzTarget = null;
        UnsubscribeFromEventRequest unsubscribeFromEventRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.unsubscribeFromEvent(xAmzTarget, unsubscribeFromEventRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the assessment target that is specified by the ARN of the assessment target.&lt;/p&gt; &lt;p&gt;If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssessmentTargetTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAssessmentTargetRequest updateAssessmentTargetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateAssessmentTarget(xAmzTarget, updateAssessmentTargetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
