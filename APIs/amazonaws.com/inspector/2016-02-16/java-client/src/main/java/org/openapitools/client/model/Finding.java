/*
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssetType;
import org.openapitools.client.model.FindingAssetAttributes;
import org.openapitools.client.model.FindingServiceAttributes;
import org.openapitools.client.model.Severity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about an Amazon Inspector finding. This data type is used as the response element in the &lt;a&gt;DescribeFindings&lt;/a&gt; action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:08.917957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Finding {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private Integer schemaVersion;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_SERVICE_ATTRIBUTES = "serviceAttributes";
  @SerializedName(SERIALIZED_NAME_SERVICE_ATTRIBUTES)
  private FindingServiceAttributes serviceAttributes;

  public static final String SERIALIZED_NAME_ASSET_TYPE = "assetType";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private AssetType assetType;

  public static final String SERIALIZED_NAME_ASSET_ATTRIBUTES = "assetAttributes";
  @SerializedName(SERIALIZED_NAME_ASSET_ATTRIBUTES)
  private FindingAssetAttributes assetAttributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RECOMMENDATION = "recommendation";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION)
  private String recommendation;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Severity severity;

  public static final String SERIALIZED_NAME_NUMERIC_SEVERITY = "numericSeverity";
  @SerializedName(SERIALIZED_NAME_NUMERIC_SEVERITY)
  private Double numericSeverity;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Integer confidence;

  public static final String SERIALIZED_NAME_INDICATOR_OF_COMPROMISE = "indicatorOfCompromise";
  @SerializedName(SERIALIZED_NAME_INDICATOR_OF_COMPROMISE)
  private Boolean indicatorOfCompromise;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List attributes;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTES = "userAttributes";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTES)
  private List userAttributes;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Finding() {
  }

  public Finding arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public Finding schemaVersion(Integer schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Get schemaVersion
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public Integer getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(Integer schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public Finding service(String service) {
    this.service = service;
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public Finding serviceAttributes(FindingServiceAttributes serviceAttributes) {
    this.serviceAttributes = serviceAttributes;
    return this;
  }

  /**
   * Get serviceAttributes
   * @return serviceAttributes
   */
  @javax.annotation.Nullable
  public FindingServiceAttributes getServiceAttributes() {
    return serviceAttributes;
  }

  public void setServiceAttributes(FindingServiceAttributes serviceAttributes) {
    this.serviceAttributes = serviceAttributes;
  }


  public Finding assetType(AssetType assetType) {
    this.assetType = assetType;
    return this;
  }

  /**
   * Get assetType
   * @return assetType
   */
  @javax.annotation.Nullable
  public AssetType getAssetType() {
    return assetType;
  }

  public void setAssetType(AssetType assetType) {
    this.assetType = assetType;
  }


  public Finding assetAttributes(FindingAssetAttributes assetAttributes) {
    this.assetAttributes = assetAttributes;
    return this;
  }

  /**
   * Get assetAttributes
   * @return assetAttributes
   */
  @javax.annotation.Nullable
  public FindingAssetAttributes getAssetAttributes() {
    return assetAttributes;
  }

  public void setAssetAttributes(FindingAssetAttributes assetAttributes) {
    this.assetAttributes = assetAttributes;
  }


  public Finding id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Finding title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Finding description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Finding recommendation(String recommendation) {
    this.recommendation = recommendation;
    return this;
  }

  /**
   * Get recommendation
   * @return recommendation
   */
  @javax.annotation.Nullable
  public String getRecommendation() {
    return recommendation;
  }

  public void setRecommendation(String recommendation) {
    this.recommendation = recommendation;
  }


  public Finding severity(Severity severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public Severity getSeverity() {
    return severity;
  }

  public void setSeverity(Severity severity) {
    this.severity = severity;
  }


  public Finding numericSeverity(Double numericSeverity) {
    this.numericSeverity = numericSeverity;
    return this;
  }

  /**
   * Get numericSeverity
   * @return numericSeverity
   */
  @javax.annotation.Nullable
  public Double getNumericSeverity() {
    return numericSeverity;
  }

  public void setNumericSeverity(Double numericSeverity) {
    this.numericSeverity = numericSeverity;
  }


  public Finding confidence(Integer confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Get confidence
   * @return confidence
   */
  @javax.annotation.Nullable
  public Integer getConfidence() {
    return confidence;
  }

  public void setConfidence(Integer confidence) {
    this.confidence = confidence;
  }


  public Finding indicatorOfCompromise(Boolean indicatorOfCompromise) {
    this.indicatorOfCompromise = indicatorOfCompromise;
    return this;
  }

  /**
   * Get indicatorOfCompromise
   * @return indicatorOfCompromise
   */
  @javax.annotation.Nullable
  public Boolean getIndicatorOfCompromise() {
    return indicatorOfCompromise;
  }

  public void setIndicatorOfCompromise(Boolean indicatorOfCompromise) {
    this.indicatorOfCompromise = indicatorOfCompromise;
  }


  public Finding attributes(List attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nonnull
  public List getAttributes() {
    return attributes;
  }

  public void setAttributes(List attributes) {
    this.attributes = attributes;
  }


  public Finding userAttributes(List userAttributes) {
    this.userAttributes = userAttributes;
    return this;
  }

  /**
   * Get userAttributes
   * @return userAttributes
   */
  @javax.annotation.Nonnull
  public List getUserAttributes() {
    return userAttributes;
  }

  public void setUserAttributes(List userAttributes) {
    this.userAttributes = userAttributes;
  }


  public Finding createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Finding updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Finding finding = (Finding) o;
    return Objects.equals(this.arn, finding.arn) &&
        Objects.equals(this.schemaVersion, finding.schemaVersion) &&
        Objects.equals(this.service, finding.service) &&
        Objects.equals(this.serviceAttributes, finding.serviceAttributes) &&
        Objects.equals(this.assetType, finding.assetType) &&
        Objects.equals(this.assetAttributes, finding.assetAttributes) &&
        Objects.equals(this.id, finding.id) &&
        Objects.equals(this.title, finding.title) &&
        Objects.equals(this.description, finding.description) &&
        Objects.equals(this.recommendation, finding.recommendation) &&
        Objects.equals(this.severity, finding.severity) &&
        Objects.equals(this.numericSeverity, finding.numericSeverity) &&
        Objects.equals(this.confidence, finding.confidence) &&
        Objects.equals(this.indicatorOfCompromise, finding.indicatorOfCompromise) &&
        Objects.equals(this.attributes, finding.attributes) &&
        Objects.equals(this.userAttributes, finding.userAttributes) &&
        Objects.equals(this.createdAt, finding.createdAt) &&
        Objects.equals(this.updatedAt, finding.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, schemaVersion, service, serviceAttributes, assetType, assetAttributes, id, title, description, recommendation, severity, numericSeverity, confidence, indicatorOfCompromise, attributes, userAttributes, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Finding {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    serviceAttributes: ").append(toIndentedString(serviceAttributes)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    assetAttributes: ").append(toIndentedString(assetAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    recommendation: ").append(toIndentedString(recommendation)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    numericSeverity: ").append(toIndentedString(numericSeverity)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    indicatorOfCompromise: ").append(toIndentedString(indicatorOfCompromise)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    userAttributes: ").append(toIndentedString(userAttributes)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("schemaVersion");
    openapiFields.add("service");
    openapiFields.add("serviceAttributes");
    openapiFields.add("assetType");
    openapiFields.add("assetAttributes");
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("recommendation");
    openapiFields.add("severity");
    openapiFields.add("numericSeverity");
    openapiFields.add("confidence");
    openapiFields.add("indicatorOfCompromise");
    openapiFields.add("attributes");
    openapiFields.add("userAttributes");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("attributes");
    openapiRequiredFields.add("userAttributes");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Finding
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Finding.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Finding is not found in the empty JSON string", Finding.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Finding.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Finding` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Finding.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the optional field `schemaVersion`
      if (jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("schemaVersion"));
      }
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("service"));
      }
      // validate the optional field `serviceAttributes`
      if (jsonObj.get("serviceAttributes") != null && !jsonObj.get("serviceAttributes").isJsonNull()) {
        FindingServiceAttributes.validateJsonElement(jsonObj.get("serviceAttributes"));
      }
      // validate the optional field `assetType`
      if (jsonObj.get("assetType") != null && !jsonObj.get("assetType").isJsonNull()) {
        AssetType.validateJsonElement(jsonObj.get("assetType"));
      }
      // validate the optional field `assetAttributes`
      if (jsonObj.get("assetAttributes") != null && !jsonObj.get("assetAttributes").isJsonNull()) {
        FindingAssetAttributes.validateJsonElement(jsonObj.get("assetAttributes"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `title`
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("title"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `recommendation`
      if (jsonObj.get("recommendation") != null && !jsonObj.get("recommendation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("recommendation"));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        Severity.validateJsonElement(jsonObj.get("severity"));
      }
      // validate the optional field `numericSeverity`
      if (jsonObj.get("numericSeverity") != null && !jsonObj.get("numericSeverity").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("numericSeverity"));
      }
      // validate the optional field `confidence`
      if (jsonObj.get("confidence") != null && !jsonObj.get("confidence").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("confidence"));
      }
      // validate the optional field `indicatorOfCompromise`
      if (jsonObj.get("indicatorOfCompromise") != null && !jsonObj.get("indicatorOfCompromise").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("indicatorOfCompromise"));
      }
      // validate the required field `attributes`
      List.validateJsonElement(jsonObj.get("attributes"));
      // validate the required field `userAttributes`
      List.validateJsonElement(jsonObj.get("userAttributes"));
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the required field `updatedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("updatedAt"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Finding.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Finding' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Finding> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Finding.class));

       return (TypeAdapter<T>) new TypeAdapter<Finding>() {
           @Override
           public void write(JsonWriter out, Finding value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Finding read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Finding given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Finding
   * @throws IOException if the JSON string is invalid with respect to Finding
   */
  public static Finding fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Finding.class);
  }

  /**
   * Convert an instance of Finding to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

