/*
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of attributes of the host from which the finding is generated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:08.917957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetAttributes {
  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private Integer schemaVersion;

  public static final String SERIALIZED_NAME_AGENT_ID = "agentId";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private String agentId;

  public static final String SERIALIZED_NAME_AUTO_SCALING_GROUP = "autoScalingGroup";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_GROUP)
  private String autoScalingGroup;

  public static final String SERIALIZED_NAME_AMI_ID = "amiId";
  @SerializedName(SERIALIZED_NAME_AMI_ID)
  private String amiId;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_IPV4_ADDRESSES = "ipv4Addresses";
  @SerializedName(SERIALIZED_NAME_IPV4_ADDRESSES)
  private List ipv4Addresses;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACES = "networkInterfaces";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACES)
  private List networkInterfaces;

  public AssetAttributes() {
  }

  public AssetAttributes schemaVersion(Integer schemaVersion) {
    this.schemaVersion = schemaVersion;
    return this;
  }

  /**
   * Get schemaVersion
   * @return schemaVersion
   */
  @javax.annotation.Nonnull
  public Integer getSchemaVersion() {
    return schemaVersion;
  }

  public void setSchemaVersion(Integer schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public AssetAttributes agentId(String agentId) {
    this.agentId = agentId;
    return this;
  }

  /**
   * Get agentId
   * @return agentId
   */
  @javax.annotation.Nullable
  public String getAgentId() {
    return agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }


  public AssetAttributes autoScalingGroup(String autoScalingGroup) {
    this.autoScalingGroup = autoScalingGroup;
    return this;
  }

  /**
   * Get autoScalingGroup
   * @return autoScalingGroup
   */
  @javax.annotation.Nullable
  public String getAutoScalingGroup() {
    return autoScalingGroup;
  }

  public void setAutoScalingGroup(String autoScalingGroup) {
    this.autoScalingGroup = autoScalingGroup;
  }


  public AssetAttributes amiId(String amiId) {
    this.amiId = amiId;
    return this;
  }

  /**
   * Get amiId
   * @return amiId
   */
  @javax.annotation.Nullable
  public String getAmiId() {
    return amiId;
  }

  public void setAmiId(String amiId) {
    this.amiId = amiId;
  }


  public AssetAttributes hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public AssetAttributes ipv4Addresses(List ipv4Addresses) {
    this.ipv4Addresses = ipv4Addresses;
    return this;
  }

  /**
   * Get ipv4Addresses
   * @return ipv4Addresses
   */
  @javax.annotation.Nullable
  public List getIpv4Addresses() {
    return ipv4Addresses;
  }

  public void setIpv4Addresses(List ipv4Addresses) {
    this.ipv4Addresses = ipv4Addresses;
  }


  public AssetAttributes tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public AssetAttributes networkInterfaces(List networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
    return this;
  }

  /**
   * Get networkInterfaces
   * @return networkInterfaces
   */
  @javax.annotation.Nullable
  public List getNetworkInterfaces() {
    return networkInterfaces;
  }

  public void setNetworkInterfaces(List networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetAttributes assetAttributes = (AssetAttributes) o;
    return Objects.equals(this.schemaVersion, assetAttributes.schemaVersion) &&
        Objects.equals(this.agentId, assetAttributes.agentId) &&
        Objects.equals(this.autoScalingGroup, assetAttributes.autoScalingGroup) &&
        Objects.equals(this.amiId, assetAttributes.amiId) &&
        Objects.equals(this.hostname, assetAttributes.hostname) &&
        Objects.equals(this.ipv4Addresses, assetAttributes.ipv4Addresses) &&
        Objects.equals(this.tags, assetAttributes.tags) &&
        Objects.equals(this.networkInterfaces, assetAttributes.networkInterfaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaVersion, agentId, autoScalingGroup, amiId, hostname, ipv4Addresses, tags, networkInterfaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetAttributes {\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    autoScalingGroup: ").append(toIndentedString(autoScalingGroup)).append("\n");
    sb.append("    amiId: ").append(toIndentedString(amiId)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    ipv4Addresses: ").append(toIndentedString(ipv4Addresses)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    networkInterfaces: ").append(toIndentedString(networkInterfaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemaVersion");
    openapiFields.add("agentId");
    openapiFields.add("autoScalingGroup");
    openapiFields.add("amiId");
    openapiFields.add("hostname");
    openapiFields.add("ipv4Addresses");
    openapiFields.add("tags");
    openapiFields.add("networkInterfaces");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemaVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetAttributes is not found in the empty JSON string", AssetAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `schemaVersion`
      Integer.validateJsonElement(jsonObj.get("schemaVersion"));
      // validate the optional field `agentId`
      if (jsonObj.get("agentId") != null && !jsonObj.get("agentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("agentId"));
      }
      // validate the optional field `autoScalingGroup`
      if (jsonObj.get("autoScalingGroup") != null && !jsonObj.get("autoScalingGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("autoScalingGroup"));
      }
      // validate the optional field `amiId`
      if (jsonObj.get("amiId") != null && !jsonObj.get("amiId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("amiId"));
      }
      // validate the optional field `hostname`
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("hostname"));
      }
      // validate the optional field `ipv4Addresses`
      if (jsonObj.get("ipv4Addresses") != null && !jsonObj.get("ipv4Addresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ipv4Addresses"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `networkInterfaces`
      if (jsonObj.get("networkInterfaces") != null && !jsonObj.get("networkInterfaces").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("networkInterfaces"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetAttributes>() {
           @Override
           public void write(JsonWriter out, AssetAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetAttributes
   * @throws IOException if the JSON string is invalid with respect to AssetAttributes
   */
  public static AssetAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetAttributes.class);
  }

  /**
   * Convert an instance of AssetAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

