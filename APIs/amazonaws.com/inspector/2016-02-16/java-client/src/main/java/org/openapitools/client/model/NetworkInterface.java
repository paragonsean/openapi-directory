/*
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the network interfaces interacting with an EC2 instance. This data type is used as one of the elements of the &lt;a&gt;AssetAttributes&lt;/a&gt; data type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:08.917957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkInterface {
  public static final String SERIALIZED_NAME_NETWORK_INTERFACE_ID = "networkInterfaceId";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE_ID)
  private String networkInterfaceId;

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_VPC_ID = "vpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_PRIVATE_DNS_NAME = "privateDnsName";
  @SerializedName(SERIALIZED_NAME_PRIVATE_DNS_NAME)
  private String privateDnsName;

  public static final String SERIALIZED_NAME_PRIVATE_IP_ADDRESS = "privateIpAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ADDRESS)
  private String privateIpAddress;

  public static final String SERIALIZED_NAME_PRIVATE_IP_ADDRESSES = "privateIpAddresses";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ADDRESSES)
  private List privateIpAddresses;

  public static final String SERIALIZED_NAME_PUBLIC_DNS_NAME = "publicDnsName";
  @SerializedName(SERIALIZED_NAME_PUBLIC_DNS_NAME)
  private String publicDnsName;

  public static final String SERIALIZED_NAME_PUBLIC_IP = "publicIp";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP)
  private String publicIp;

  public static final String SERIALIZED_NAME_IPV6_ADDRESSES = "ipv6Addresses";
  @SerializedName(SERIALIZED_NAME_IPV6_ADDRESSES)
  private List ipv6Addresses;

  public static final String SERIALIZED_NAME_SECURITY_GROUPS = "securityGroups";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUPS)
  private List securityGroups;

  public NetworkInterface() {
  }

  public NetworkInterface networkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
    return this;
  }

  /**
   * Get networkInterfaceId
   * @return networkInterfaceId
   */
  @javax.annotation.Nullable
  public String getNetworkInterfaceId() {
    return networkInterfaceId;
  }

  public void setNetworkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
  }


  public NetworkInterface subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Get subnetId
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public NetworkInterface vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public NetworkInterface privateDnsName(String privateDnsName) {
    this.privateDnsName = privateDnsName;
    return this;
  }

  /**
   * Get privateDnsName
   * @return privateDnsName
   */
  @javax.annotation.Nullable
  public String getPrivateDnsName() {
    return privateDnsName;
  }

  public void setPrivateDnsName(String privateDnsName) {
    this.privateDnsName = privateDnsName;
  }


  public NetworkInterface privateIpAddress(String privateIpAddress) {
    this.privateIpAddress = privateIpAddress;
    return this;
  }

  /**
   * Get privateIpAddress
   * @return privateIpAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIpAddress() {
    return privateIpAddress;
  }

  public void setPrivateIpAddress(String privateIpAddress) {
    this.privateIpAddress = privateIpAddress;
  }


  public NetworkInterface privateIpAddresses(List privateIpAddresses) {
    this.privateIpAddresses = privateIpAddresses;
    return this;
  }

  /**
   * Get privateIpAddresses
   * @return privateIpAddresses
   */
  @javax.annotation.Nullable
  public List getPrivateIpAddresses() {
    return privateIpAddresses;
  }

  public void setPrivateIpAddresses(List privateIpAddresses) {
    this.privateIpAddresses = privateIpAddresses;
  }


  public NetworkInterface publicDnsName(String publicDnsName) {
    this.publicDnsName = publicDnsName;
    return this;
  }

  /**
   * Get publicDnsName
   * @return publicDnsName
   */
  @javax.annotation.Nullable
  public String getPublicDnsName() {
    return publicDnsName;
  }

  public void setPublicDnsName(String publicDnsName) {
    this.publicDnsName = publicDnsName;
  }


  public NetworkInterface publicIp(String publicIp) {
    this.publicIp = publicIp;
    return this;
  }

  /**
   * Get publicIp
   * @return publicIp
   */
  @javax.annotation.Nullable
  public String getPublicIp() {
    return publicIp;
  }

  public void setPublicIp(String publicIp) {
    this.publicIp = publicIp;
  }


  public NetworkInterface ipv6Addresses(List ipv6Addresses) {
    this.ipv6Addresses = ipv6Addresses;
    return this;
  }

  /**
   * Get ipv6Addresses
   * @return ipv6Addresses
   */
  @javax.annotation.Nullable
  public List getIpv6Addresses() {
    return ipv6Addresses;
  }

  public void setIpv6Addresses(List ipv6Addresses) {
    this.ipv6Addresses = ipv6Addresses;
  }


  public NetworkInterface securityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

  /**
   * Get securityGroups
   * @return securityGroups
   */
  @javax.annotation.Nullable
  public List getSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(List securityGroups) {
    this.securityGroups = securityGroups;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkInterface networkInterface = (NetworkInterface) o;
    return Objects.equals(this.networkInterfaceId, networkInterface.networkInterfaceId) &&
        Objects.equals(this.subnetId, networkInterface.subnetId) &&
        Objects.equals(this.vpcId, networkInterface.vpcId) &&
        Objects.equals(this.privateDnsName, networkInterface.privateDnsName) &&
        Objects.equals(this.privateIpAddress, networkInterface.privateIpAddress) &&
        Objects.equals(this.privateIpAddresses, networkInterface.privateIpAddresses) &&
        Objects.equals(this.publicDnsName, networkInterface.publicDnsName) &&
        Objects.equals(this.publicIp, networkInterface.publicIp) &&
        Objects.equals(this.ipv6Addresses, networkInterface.ipv6Addresses) &&
        Objects.equals(this.securityGroups, networkInterface.securityGroups);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkInterfaceId, subnetId, vpcId, privateDnsName, privateIpAddress, privateIpAddresses, publicDnsName, publicIp, ipv6Addresses, securityGroups);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkInterface {\n");
    sb.append("    networkInterfaceId: ").append(toIndentedString(networkInterfaceId)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    privateDnsName: ").append(toIndentedString(privateDnsName)).append("\n");
    sb.append("    privateIpAddress: ").append(toIndentedString(privateIpAddress)).append("\n");
    sb.append("    privateIpAddresses: ").append(toIndentedString(privateIpAddresses)).append("\n");
    sb.append("    publicDnsName: ").append(toIndentedString(publicDnsName)).append("\n");
    sb.append("    publicIp: ").append(toIndentedString(publicIp)).append("\n");
    sb.append("    ipv6Addresses: ").append(toIndentedString(ipv6Addresses)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("networkInterfaceId");
    openapiFields.add("subnetId");
    openapiFields.add("vpcId");
    openapiFields.add("privateDnsName");
    openapiFields.add("privateIpAddress");
    openapiFields.add("privateIpAddresses");
    openapiFields.add("publicDnsName");
    openapiFields.add("publicIp");
    openapiFields.add("ipv6Addresses");
    openapiFields.add("securityGroups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkInterface is not found in the empty JSON string", NetworkInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `networkInterfaceId`
      if (jsonObj.get("networkInterfaceId") != null && !jsonObj.get("networkInterfaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("networkInterfaceId"));
      }
      // validate the optional field `subnetId`
      if (jsonObj.get("subnetId") != null && !jsonObj.get("subnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("subnetId"));
      }
      // validate the optional field `vpcId`
      if (jsonObj.get("vpcId") != null && !jsonObj.get("vpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vpcId"));
      }
      // validate the optional field `privateDnsName`
      if (jsonObj.get("privateDnsName") != null && !jsonObj.get("privateDnsName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("privateDnsName"));
      }
      // validate the optional field `privateIpAddress`
      if (jsonObj.get("privateIpAddress") != null && !jsonObj.get("privateIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("privateIpAddress"));
      }
      // validate the optional field `privateIpAddresses`
      if (jsonObj.get("privateIpAddresses") != null && !jsonObj.get("privateIpAddresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("privateIpAddresses"));
      }
      // validate the optional field `publicDnsName`
      if (jsonObj.get("publicDnsName") != null && !jsonObj.get("publicDnsName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("publicDnsName"));
      }
      // validate the optional field `publicIp`
      if (jsonObj.get("publicIp") != null && !jsonObj.get("publicIp").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("publicIp"));
      }
      // validate the optional field `ipv6Addresses`
      if (jsonObj.get("ipv6Addresses") != null && !jsonObj.get("ipv6Addresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ipv6Addresses"));
      }
      // validate the optional field `securityGroups`
      if (jsonObj.get("securityGroups") != null && !jsonObj.get("securityGroups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("securityGroups"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkInterface>() {
           @Override
           public void write(JsonWriter out, NetworkInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkInterface
   * @throws IOException if the JSON string is invalid with respect to NetworkInterface
   */
  public static NetworkInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkInterface.class);
  }

  /**
   * Convert an instance of NetworkInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

