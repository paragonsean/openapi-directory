/*
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AssessmentRunState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A snapshot of an Amazon Inspector assessment run that contains the findings of the assessment run .&lt;/p&gt; &lt;p&gt;Used as the response element in the &lt;a&gt;DescribeAssessmentRuns&lt;/a&gt; action.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:08.917957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessmentRun {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ASSESSMENT_TEMPLATE_ARN = "assessmentTemplateArn";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_TEMPLATE_ARN)
  private String assessmentTemplateArn;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private AssessmentRunState state;

  public static final String SERIALIZED_NAME_DURATION_IN_SECONDS = "durationInSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_IN_SECONDS)
  private Integer durationInSeconds;

  public static final String SERIALIZED_NAME_RULES_PACKAGE_ARNS = "rulesPackageArns";
  @SerializedName(SERIALIZED_NAME_RULES_PACKAGE_ARNS)
  private List rulesPackageArns;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTES_FOR_FINDINGS = "userAttributesForFindings";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTES_FOR_FINDINGS)
  private List userAttributesForFindings;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completedAt";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private OffsetDateTime completedAt;

  public static final String SERIALIZED_NAME_STATE_CHANGED_AT = "stateChangedAt";
  @SerializedName(SERIALIZED_NAME_STATE_CHANGED_AT)
  private OffsetDateTime stateChangedAt;

  public static final String SERIALIZED_NAME_DATA_COLLECTED = "dataCollected";
  @SerializedName(SERIALIZED_NAME_DATA_COLLECTED)
  private Boolean dataCollected;

  public static final String SERIALIZED_NAME_STATE_CHANGES = "stateChanges";
  @SerializedName(SERIALIZED_NAME_STATE_CHANGES)
  private List stateChanges;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List notifications;

  public static final String SERIALIZED_NAME_FINDING_COUNTS = "findingCounts";
  @SerializedName(SERIALIZED_NAME_FINDING_COUNTS)
  private Map findingCounts;

  public AssessmentRun() {
  }

  public AssessmentRun arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public AssessmentRun name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AssessmentRun assessmentTemplateArn(String assessmentTemplateArn) {
    this.assessmentTemplateArn = assessmentTemplateArn;
    return this;
  }

  /**
   * Get assessmentTemplateArn
   * @return assessmentTemplateArn
   */
  @javax.annotation.Nonnull
  public String getAssessmentTemplateArn() {
    return assessmentTemplateArn;
  }

  public void setAssessmentTemplateArn(String assessmentTemplateArn) {
    this.assessmentTemplateArn = assessmentTemplateArn;
  }


  public AssessmentRun state(AssessmentRunState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nonnull
  public AssessmentRunState getState() {
    return state;
  }

  public void setState(AssessmentRunState state) {
    this.state = state;
  }


  public AssessmentRun durationInSeconds(Integer durationInSeconds) {
    this.durationInSeconds = durationInSeconds;
    return this;
  }

  /**
   * Get durationInSeconds
   * @return durationInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getDurationInSeconds() {
    return durationInSeconds;
  }

  public void setDurationInSeconds(Integer durationInSeconds) {
    this.durationInSeconds = durationInSeconds;
  }


  public AssessmentRun rulesPackageArns(List rulesPackageArns) {
    this.rulesPackageArns = rulesPackageArns;
    return this;
  }

  /**
   * Get rulesPackageArns
   * @return rulesPackageArns
   */
  @javax.annotation.Nonnull
  public List getRulesPackageArns() {
    return rulesPackageArns;
  }

  public void setRulesPackageArns(List rulesPackageArns) {
    this.rulesPackageArns = rulesPackageArns;
  }


  public AssessmentRun userAttributesForFindings(List userAttributesForFindings) {
    this.userAttributesForFindings = userAttributesForFindings;
    return this;
  }

  /**
   * Get userAttributesForFindings
   * @return userAttributesForFindings
   */
  @javax.annotation.Nonnull
  public List getUserAttributesForFindings() {
    return userAttributesForFindings;
  }

  public void setUserAttributesForFindings(List userAttributesForFindings) {
    this.userAttributesForFindings = userAttributesForFindings;
  }


  public AssessmentRun createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AssessmentRun startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * Get startedAt
   * @return startedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public AssessmentRun completedAt(OffsetDateTime completedAt) {
    this.completedAt = completedAt;
    return this;
  }

  /**
   * Get completedAt
   * @return completedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }

  public void setCompletedAt(OffsetDateTime completedAt) {
    this.completedAt = completedAt;
  }


  public AssessmentRun stateChangedAt(OffsetDateTime stateChangedAt) {
    this.stateChangedAt = stateChangedAt;
    return this;
  }

  /**
   * Get stateChangedAt
   * @return stateChangedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStateChangedAt() {
    return stateChangedAt;
  }

  public void setStateChangedAt(OffsetDateTime stateChangedAt) {
    this.stateChangedAt = stateChangedAt;
  }


  public AssessmentRun dataCollected(Boolean dataCollected) {
    this.dataCollected = dataCollected;
    return this;
  }

  /**
   * Get dataCollected
   * @return dataCollected
   */
  @javax.annotation.Nonnull
  public Boolean getDataCollected() {
    return dataCollected;
  }

  public void setDataCollected(Boolean dataCollected) {
    this.dataCollected = dataCollected;
  }


  public AssessmentRun stateChanges(List stateChanges) {
    this.stateChanges = stateChanges;
    return this;
  }

  /**
   * Get stateChanges
   * @return stateChanges
   */
  @javax.annotation.Nonnull
  public List getStateChanges() {
    return stateChanges;
  }

  public void setStateChanges(List stateChanges) {
    this.stateChanges = stateChanges;
  }


  public AssessmentRun notifications(List notifications) {
    this.notifications = notifications;
    return this;
  }

  /**
   * Get notifications
   * @return notifications
   */
  @javax.annotation.Nonnull
  public List getNotifications() {
    return notifications;
  }

  public void setNotifications(List notifications) {
    this.notifications = notifications;
  }


  public AssessmentRun findingCounts(Map findingCounts) {
    this.findingCounts = findingCounts;
    return this;
  }

  /**
   * Get findingCounts
   * @return findingCounts
   */
  @javax.annotation.Nonnull
  public Map getFindingCounts() {
    return findingCounts;
  }

  public void setFindingCounts(Map findingCounts) {
    this.findingCounts = findingCounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessmentRun assessmentRun = (AssessmentRun) o;
    return Objects.equals(this.arn, assessmentRun.arn) &&
        Objects.equals(this.name, assessmentRun.name) &&
        Objects.equals(this.assessmentTemplateArn, assessmentRun.assessmentTemplateArn) &&
        Objects.equals(this.state, assessmentRun.state) &&
        Objects.equals(this.durationInSeconds, assessmentRun.durationInSeconds) &&
        Objects.equals(this.rulesPackageArns, assessmentRun.rulesPackageArns) &&
        Objects.equals(this.userAttributesForFindings, assessmentRun.userAttributesForFindings) &&
        Objects.equals(this.createdAt, assessmentRun.createdAt) &&
        Objects.equals(this.startedAt, assessmentRun.startedAt) &&
        Objects.equals(this.completedAt, assessmentRun.completedAt) &&
        Objects.equals(this.stateChangedAt, assessmentRun.stateChangedAt) &&
        Objects.equals(this.dataCollected, assessmentRun.dataCollected) &&
        Objects.equals(this.stateChanges, assessmentRun.stateChanges) &&
        Objects.equals(this.notifications, assessmentRun.notifications) &&
        Objects.equals(this.findingCounts, assessmentRun.findingCounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, name, assessmentTemplateArn, state, durationInSeconds, rulesPackageArns, userAttributesForFindings, createdAt, startedAt, completedAt, stateChangedAt, dataCollected, stateChanges, notifications, findingCounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessmentRun {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    assessmentTemplateArn: ").append(toIndentedString(assessmentTemplateArn)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    durationInSeconds: ").append(toIndentedString(durationInSeconds)).append("\n");
    sb.append("    rulesPackageArns: ").append(toIndentedString(rulesPackageArns)).append("\n");
    sb.append("    userAttributesForFindings: ").append(toIndentedString(userAttributesForFindings)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    stateChangedAt: ").append(toIndentedString(stateChangedAt)).append("\n");
    sb.append("    dataCollected: ").append(toIndentedString(dataCollected)).append("\n");
    sb.append("    stateChanges: ").append(toIndentedString(stateChanges)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    findingCounts: ").append(toIndentedString(findingCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("assessmentTemplateArn");
    openapiFields.add("state");
    openapiFields.add("durationInSeconds");
    openapiFields.add("rulesPackageArns");
    openapiFields.add("userAttributesForFindings");
    openapiFields.add("createdAt");
    openapiFields.add("startedAt");
    openapiFields.add("completedAt");
    openapiFields.add("stateChangedAt");
    openapiFields.add("dataCollected");
    openapiFields.add("stateChanges");
    openapiFields.add("notifications");
    openapiFields.add("findingCounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("assessmentTemplateArn");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("durationInSeconds");
    openapiRequiredFields.add("rulesPackageArns");
    openapiRequiredFields.add("userAttributesForFindings");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("stateChangedAt");
    openapiRequiredFields.add("dataCollected");
    openapiRequiredFields.add("stateChanges");
    openapiRequiredFields.add("notifications");
    openapiRequiredFields.add("findingCounts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessmentRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessmentRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessmentRun is not found in the empty JSON string", AssessmentRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessmentRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessmentRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssessmentRun.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `assessmentTemplateArn`
      String.validateJsonElement(jsonObj.get("assessmentTemplateArn"));
      // validate the required field `state`
      AssessmentRunState.validateJsonElement(jsonObj.get("state"));
      // validate the required field `durationInSeconds`
      Integer.validateJsonElement(jsonObj.get("durationInSeconds"));
      // validate the required field `rulesPackageArns`
      List.validateJsonElement(jsonObj.get("rulesPackageArns"));
      // validate the required field `userAttributesForFindings`
      List.validateJsonElement(jsonObj.get("userAttributesForFindings"));
      // validate the required field `createdAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      // validate the optional field `startedAt`
      if (jsonObj.get("startedAt") != null && !jsonObj.get("startedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("startedAt"));
      }
      // validate the optional field `completedAt`
      if (jsonObj.get("completedAt") != null && !jsonObj.get("completedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("completedAt"));
      }
      // validate the required field `stateChangedAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("stateChangedAt"));
      // validate the required field `dataCollected`
      Boolean.validateJsonElement(jsonObj.get("dataCollected"));
      // validate the required field `stateChanges`
      List.validateJsonElement(jsonObj.get("stateChanges"));
      // validate the required field `notifications`
      List.validateJsonElement(jsonObj.get("notifications"));
      // validate the required field `findingCounts`
      Map.validateJsonElement(jsonObj.get("findingCounts"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessmentRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessmentRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessmentRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessmentRun.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessmentRun>() {
           @Override
           public void write(JsonWriter out, AssessmentRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessmentRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessmentRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessmentRun
   * @throws IOException if the JSON string is invalid with respect to AssessmentRun
   */
  public static AssessmentRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessmentRun.class);
  }

  /**
   * Convert an instance of AssessmentRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

