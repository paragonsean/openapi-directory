/*
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AssessmentRunNotificationSnsStatusCode;
import org.openapitools.client.model.InspectorEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Used as one of the elements of the &lt;a&gt;AssessmentRun&lt;/a&gt; data type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:08.917957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessmentRunNotification {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private InspectorEvent event;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Boolean error;

  public static final String SERIALIZED_NAME_SNS_TOPIC_ARN = "snsTopicArn";
  @SerializedName(SERIALIZED_NAME_SNS_TOPIC_ARN)
  private String snsTopicArn;

  public static final String SERIALIZED_NAME_SNS_PUBLISH_STATUS_CODE = "snsPublishStatusCode";
  @SerializedName(SERIALIZED_NAME_SNS_PUBLISH_STATUS_CODE)
  private AssessmentRunNotificationSnsStatusCode snsPublishStatusCode;

  public AssessmentRunNotification() {
  }

  public AssessmentRunNotification date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public AssessmentRunNotification event(InspectorEvent event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   * @return event
   */
  @javax.annotation.Nonnull
  public InspectorEvent getEvent() {
    return event;
  }

  public void setEvent(InspectorEvent event) {
    this.event = event;
  }


  public AssessmentRunNotification message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public AssessmentRunNotification error(Boolean error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nonnull
  public Boolean getError() {
    return error;
  }

  public void setError(Boolean error) {
    this.error = error;
  }


  public AssessmentRunNotification snsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
    return this;
  }

  /**
   * Get snsTopicArn
   * @return snsTopicArn
   */
  @javax.annotation.Nullable
  public String getSnsTopicArn() {
    return snsTopicArn;
  }

  public void setSnsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
  }


  public AssessmentRunNotification snsPublishStatusCode(AssessmentRunNotificationSnsStatusCode snsPublishStatusCode) {
    this.snsPublishStatusCode = snsPublishStatusCode;
    return this;
  }

  /**
   * Get snsPublishStatusCode
   * @return snsPublishStatusCode
   */
  @javax.annotation.Nullable
  public AssessmentRunNotificationSnsStatusCode getSnsPublishStatusCode() {
    return snsPublishStatusCode;
  }

  public void setSnsPublishStatusCode(AssessmentRunNotificationSnsStatusCode snsPublishStatusCode) {
    this.snsPublishStatusCode = snsPublishStatusCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessmentRunNotification assessmentRunNotification = (AssessmentRunNotification) o;
    return Objects.equals(this.date, assessmentRunNotification.date) &&
        Objects.equals(this.event, assessmentRunNotification.event) &&
        Objects.equals(this.message, assessmentRunNotification.message) &&
        Objects.equals(this.error, assessmentRunNotification.error) &&
        Objects.equals(this.snsTopicArn, assessmentRunNotification.snsTopicArn) &&
        Objects.equals(this.snsPublishStatusCode, assessmentRunNotification.snsPublishStatusCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, event, message, error, snsTopicArn, snsPublishStatusCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessmentRunNotification {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    snsTopicArn: ").append(toIndentedString(snsTopicArn)).append("\n");
    sb.append("    snsPublishStatusCode: ").append(toIndentedString(snsPublishStatusCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("event");
    openapiFields.add("message");
    openapiFields.add("error");
    openapiFields.add("snsTopicArn");
    openapiFields.add("snsPublishStatusCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("event");
    openapiRequiredFields.add("error");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessmentRunNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessmentRunNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessmentRunNotification is not found in the empty JSON string", AssessmentRunNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessmentRunNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessmentRunNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssessmentRunNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `date`
      OffsetDateTime.validateJsonElement(jsonObj.get("date"));
      // validate the required field `event`
      InspectorEvent.validateJsonElement(jsonObj.get("event"));
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the required field `error`
      Boolean.validateJsonElement(jsonObj.get("error"));
      // validate the optional field `snsTopicArn`
      if (jsonObj.get("snsTopicArn") != null && !jsonObj.get("snsTopicArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("snsTopicArn"));
      }
      // validate the optional field `snsPublishStatusCode`
      if (jsonObj.get("snsPublishStatusCode") != null && !jsonObj.get("snsPublishStatusCode").isJsonNull()) {
        AssessmentRunNotificationSnsStatusCode.validateJsonElement(jsonObj.get("snsPublishStatusCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessmentRunNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessmentRunNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessmentRunNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessmentRunNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessmentRunNotification>() {
           @Override
           public void write(JsonWriter out, AssessmentRunNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessmentRunNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessmentRunNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessmentRunNotification
   * @throws IOException if the JSON string is invalid with respect to AssessmentRunNotification
   */
  public static AssessmentRunNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessmentRunNotification.class);
  }

  /**
   * Convert an instance of AssessmentRunNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

