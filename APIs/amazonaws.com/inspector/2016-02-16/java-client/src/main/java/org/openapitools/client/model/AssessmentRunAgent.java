/*
 * Amazon Inspector
 * <fullname>Amazon Inspector</fullname> <p>Amazon Inspector enables you to analyze the behavior of your AWS resources and to identify potential security issues. For more information, see <a href=\"https://docs.aws.amazon.com/inspector/latest/userguide/inspector_introduction.html\"> Amazon Inspector User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-02-16
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AgentHealth;
import org.openapitools.client.model.AgentHealthCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about an Amazon Inspector agent. This data type is used as a response element in the &lt;a&gt;ListAssessmentRunAgents&lt;/a&gt; action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:08.917957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessmentRunAgent {
  public static final String SERIALIZED_NAME_AGENT_ID = "agentId";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private String agentId;

  public static final String SERIALIZED_NAME_ASSESSMENT_RUN_ARN = "assessmentRunArn";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_RUN_ARN)
  private String assessmentRunArn;

  public static final String SERIALIZED_NAME_AGENT_HEALTH = "agentHealth";
  @SerializedName(SERIALIZED_NAME_AGENT_HEALTH)
  private AgentHealth agentHealth;

  public static final String SERIALIZED_NAME_AGENT_HEALTH_CODE = "agentHealthCode";
  @SerializedName(SERIALIZED_NAME_AGENT_HEALTH_CODE)
  private AgentHealthCode agentHealthCode;

  public static final String SERIALIZED_NAME_AGENT_HEALTH_DETAILS = "agentHealthDetails";
  @SerializedName(SERIALIZED_NAME_AGENT_HEALTH_DETAILS)
  private String agentHealthDetails;

  public static final String SERIALIZED_NAME_AUTO_SCALING_GROUP = "autoScalingGroup";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_GROUP)
  private String autoScalingGroup;

  public static final String SERIALIZED_NAME_TELEMETRY_METADATA = "telemetryMetadata";
  @SerializedName(SERIALIZED_NAME_TELEMETRY_METADATA)
  private List telemetryMetadata;

  public AssessmentRunAgent() {
  }

  public AssessmentRunAgent agentId(String agentId) {
    this.agentId = agentId;
    return this;
  }

  /**
   * Get agentId
   * @return agentId
   */
  @javax.annotation.Nonnull
  public String getAgentId() {
    return agentId;
  }

  public void setAgentId(String agentId) {
    this.agentId = agentId;
  }


  public AssessmentRunAgent assessmentRunArn(String assessmentRunArn) {
    this.assessmentRunArn = assessmentRunArn;
    return this;
  }

  /**
   * Get assessmentRunArn
   * @return assessmentRunArn
   */
  @javax.annotation.Nonnull
  public String getAssessmentRunArn() {
    return assessmentRunArn;
  }

  public void setAssessmentRunArn(String assessmentRunArn) {
    this.assessmentRunArn = assessmentRunArn;
  }


  public AssessmentRunAgent agentHealth(AgentHealth agentHealth) {
    this.agentHealth = agentHealth;
    return this;
  }

  /**
   * Get agentHealth
   * @return agentHealth
   */
  @javax.annotation.Nonnull
  public AgentHealth getAgentHealth() {
    return agentHealth;
  }

  public void setAgentHealth(AgentHealth agentHealth) {
    this.agentHealth = agentHealth;
  }


  public AssessmentRunAgent agentHealthCode(AgentHealthCode agentHealthCode) {
    this.agentHealthCode = agentHealthCode;
    return this;
  }

  /**
   * Get agentHealthCode
   * @return agentHealthCode
   */
  @javax.annotation.Nonnull
  public AgentHealthCode getAgentHealthCode() {
    return agentHealthCode;
  }

  public void setAgentHealthCode(AgentHealthCode agentHealthCode) {
    this.agentHealthCode = agentHealthCode;
  }


  public AssessmentRunAgent agentHealthDetails(String agentHealthDetails) {
    this.agentHealthDetails = agentHealthDetails;
    return this;
  }

  /**
   * Get agentHealthDetails
   * @return agentHealthDetails
   */
  @javax.annotation.Nullable
  public String getAgentHealthDetails() {
    return agentHealthDetails;
  }

  public void setAgentHealthDetails(String agentHealthDetails) {
    this.agentHealthDetails = agentHealthDetails;
  }


  public AssessmentRunAgent autoScalingGroup(String autoScalingGroup) {
    this.autoScalingGroup = autoScalingGroup;
    return this;
  }

  /**
   * Get autoScalingGroup
   * @return autoScalingGroup
   */
  @javax.annotation.Nullable
  public String getAutoScalingGroup() {
    return autoScalingGroup;
  }

  public void setAutoScalingGroup(String autoScalingGroup) {
    this.autoScalingGroup = autoScalingGroup;
  }


  public AssessmentRunAgent telemetryMetadata(List telemetryMetadata) {
    this.telemetryMetadata = telemetryMetadata;
    return this;
  }

  /**
   * Get telemetryMetadata
   * @return telemetryMetadata
   */
  @javax.annotation.Nonnull
  public List getTelemetryMetadata() {
    return telemetryMetadata;
  }

  public void setTelemetryMetadata(List telemetryMetadata) {
    this.telemetryMetadata = telemetryMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessmentRunAgent assessmentRunAgent = (AssessmentRunAgent) o;
    return Objects.equals(this.agentId, assessmentRunAgent.agentId) &&
        Objects.equals(this.assessmentRunArn, assessmentRunAgent.assessmentRunArn) &&
        Objects.equals(this.agentHealth, assessmentRunAgent.agentHealth) &&
        Objects.equals(this.agentHealthCode, assessmentRunAgent.agentHealthCode) &&
        Objects.equals(this.agentHealthDetails, assessmentRunAgent.agentHealthDetails) &&
        Objects.equals(this.autoScalingGroup, assessmentRunAgent.autoScalingGroup) &&
        Objects.equals(this.telemetryMetadata, assessmentRunAgent.telemetryMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentId, assessmentRunArn, agentHealth, agentHealthCode, agentHealthDetails, autoScalingGroup, telemetryMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessmentRunAgent {\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    assessmentRunArn: ").append(toIndentedString(assessmentRunArn)).append("\n");
    sb.append("    agentHealth: ").append(toIndentedString(agentHealth)).append("\n");
    sb.append("    agentHealthCode: ").append(toIndentedString(agentHealthCode)).append("\n");
    sb.append("    agentHealthDetails: ").append(toIndentedString(agentHealthDetails)).append("\n");
    sb.append("    autoScalingGroup: ").append(toIndentedString(autoScalingGroup)).append("\n");
    sb.append("    telemetryMetadata: ").append(toIndentedString(telemetryMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentId");
    openapiFields.add("assessmentRunArn");
    openapiFields.add("agentHealth");
    openapiFields.add("agentHealthCode");
    openapiFields.add("agentHealthDetails");
    openapiFields.add("autoScalingGroup");
    openapiFields.add("telemetryMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("agentId");
    openapiRequiredFields.add("assessmentRunArn");
    openapiRequiredFields.add("agentHealth");
    openapiRequiredFields.add("agentHealthCode");
    openapiRequiredFields.add("telemetryMetadata");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessmentRunAgent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessmentRunAgent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessmentRunAgent is not found in the empty JSON string", AssessmentRunAgent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessmentRunAgent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessmentRunAgent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssessmentRunAgent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `agentId`
      String.validateJsonElement(jsonObj.get("agentId"));
      // validate the required field `assessmentRunArn`
      String.validateJsonElement(jsonObj.get("assessmentRunArn"));
      // validate the required field `agentHealth`
      AgentHealth.validateJsonElement(jsonObj.get("agentHealth"));
      // validate the required field `agentHealthCode`
      AgentHealthCode.validateJsonElement(jsonObj.get("agentHealthCode"));
      // validate the optional field `agentHealthDetails`
      if (jsonObj.get("agentHealthDetails") != null && !jsonObj.get("agentHealthDetails").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("agentHealthDetails"));
      }
      // validate the optional field `autoScalingGroup`
      if (jsonObj.get("autoScalingGroup") != null && !jsonObj.get("autoScalingGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("autoScalingGroup"));
      }
      // validate the required field `telemetryMetadata`
      List.validateJsonElement(jsonObj.get("telemetryMetadata"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessmentRunAgent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessmentRunAgent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessmentRunAgent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessmentRunAgent.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessmentRunAgent>() {
           @Override
           public void write(JsonWriter out, AssessmentRunAgent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessmentRunAgent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessmentRunAgent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessmentRunAgent
   * @throws IOException if the JSON string is invalid with respect to AssessmentRunAgent
   */
  public static AssessmentRunAgent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessmentRunAgent.class);
  }

  /**
   * Convert an instance of AssessmentRunAgent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

