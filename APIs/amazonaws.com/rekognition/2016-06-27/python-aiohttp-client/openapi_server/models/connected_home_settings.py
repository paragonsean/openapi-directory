# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectedHomeSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: List=None, min_confidence: float=None):
        """ConnectedHomeSettings - a model defined in OpenAPI

        :param labels: The labels of this ConnectedHomeSettings.
        :param min_confidence: The min_confidence of this ConnectedHomeSettings.
        """
        self.openapi_types = {
            'labels': List,
            'min_confidence': float
        }

        self.attribute_map = {
            'labels': 'Labels',
            'min_confidence': 'MinConfidence'
        }

        self._labels = labels
        self._min_confidence = min_confidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectedHomeSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectedHomeSettings of this ConnectedHomeSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this ConnectedHomeSettings.


        :return: The labels of this ConnectedHomeSettings.
        :rtype: List
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ConnectedHomeSettings.


        :param labels: The labels of this ConnectedHomeSettings.
        :type labels: List
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def min_confidence(self):
        """Gets the min_confidence of this ConnectedHomeSettings.


        :return: The min_confidence of this ConnectedHomeSettings.
        :rtype: float
        """
        return self._min_confidence

    @min_confidence.setter
    def min_confidence(self, min_confidence):
        """Sets the min_confidence of this ConnectedHomeSettings.


        :param min_confidence: The min_confidence of this ConnectedHomeSettings.
        :type min_confidence: float
        """

        self._min_confidence = min_confidence
