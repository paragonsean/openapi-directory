# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_dataset_request_dataset_source import CreateDatasetRequestDatasetSource
from openapi_server.models.dataset_type import DatasetType
from openapi_server import util


class CreateDatasetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_source: CreateDatasetRequestDatasetSource=None, dataset_type: DatasetType=None, project_arn: str=None):
        """CreateDatasetRequest - a model defined in OpenAPI

        :param dataset_source: The dataset_source of this CreateDatasetRequest.
        :param dataset_type: The dataset_type of this CreateDatasetRequest.
        :param project_arn: The project_arn of this CreateDatasetRequest.
        """
        self.openapi_types = {
            'dataset_source': CreateDatasetRequestDatasetSource,
            'dataset_type': DatasetType,
            'project_arn': str
        }

        self.attribute_map = {
            'dataset_source': 'DatasetSource',
            'dataset_type': 'DatasetType',
            'project_arn': 'ProjectArn'
        }

        self._dataset_source = dataset_source
        self._dataset_type = dataset_type
        self._project_arn = project_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDatasetRequest of this CreateDatasetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_source(self):
        """Gets the dataset_source of this CreateDatasetRequest.


        :return: The dataset_source of this CreateDatasetRequest.
        :rtype: CreateDatasetRequestDatasetSource
        """
        return self._dataset_source

    @dataset_source.setter
    def dataset_source(self, dataset_source):
        """Sets the dataset_source of this CreateDatasetRequest.


        :param dataset_source: The dataset_source of this CreateDatasetRequest.
        :type dataset_source: CreateDatasetRequestDatasetSource
        """

        self._dataset_source = dataset_source

    @property
    def dataset_type(self):
        """Gets the dataset_type of this CreateDatasetRequest.


        :return: The dataset_type of this CreateDatasetRequest.
        :rtype: DatasetType
        """
        return self._dataset_type

    @dataset_type.setter
    def dataset_type(self, dataset_type):
        """Sets the dataset_type of this CreateDatasetRequest.


        :param dataset_type: The dataset_type of this CreateDatasetRequest.
        :type dataset_type: DatasetType
        """
        if dataset_type is None:
            raise ValueError("Invalid value for `dataset_type`, must not be `None`")

        self._dataset_type = dataset_type

    @property
    def project_arn(self):
        """Gets the project_arn of this CreateDatasetRequest.


        :return: The project_arn of this CreateDatasetRequest.
        :rtype: str
        """
        return self._project_arn

    @project_arn.setter
    def project_arn(self, project_arn):
        """Sets the project_arn of this CreateDatasetRequest.


        :param project_arn: The project_arn of this CreateDatasetRequest.
        :type project_arn: str
        """
        if project_arn is None:
            raise ValueError("Invalid value for `project_arn`, must not be `None`")

        self._project_arn = project_arn
