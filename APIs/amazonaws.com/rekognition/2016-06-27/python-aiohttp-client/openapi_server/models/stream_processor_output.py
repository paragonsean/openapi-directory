# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_processor_output_kinesis_data_stream import StreamProcessorOutputKinesisDataStream
from openapi_server.models.stream_processor_output_s3_destination import StreamProcessorOutputS3Destination
from openapi_server import util


class StreamProcessorOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kinesis_data_stream: StreamProcessorOutputKinesisDataStream=None, s3_destination: StreamProcessorOutputS3Destination=None):
        """StreamProcessorOutput - a model defined in OpenAPI

        :param kinesis_data_stream: The kinesis_data_stream of this StreamProcessorOutput.
        :param s3_destination: The s3_destination of this StreamProcessorOutput.
        """
        self.openapi_types = {
            'kinesis_data_stream': StreamProcessorOutputKinesisDataStream,
            's3_destination': StreamProcessorOutputS3Destination
        }

        self.attribute_map = {
            'kinesis_data_stream': 'KinesisDataStream',
            's3_destination': 'S3Destination'
        }

        self._kinesis_data_stream = kinesis_data_stream
        self._s3_destination = s3_destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamProcessorOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamProcessorOutput of this StreamProcessorOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kinesis_data_stream(self):
        """Gets the kinesis_data_stream of this StreamProcessorOutput.


        :return: The kinesis_data_stream of this StreamProcessorOutput.
        :rtype: StreamProcessorOutputKinesisDataStream
        """
        return self._kinesis_data_stream

    @kinesis_data_stream.setter
    def kinesis_data_stream(self, kinesis_data_stream):
        """Sets the kinesis_data_stream of this StreamProcessorOutput.


        :param kinesis_data_stream: The kinesis_data_stream of this StreamProcessorOutput.
        :type kinesis_data_stream: StreamProcessorOutputKinesisDataStream
        """

        self._kinesis_data_stream = kinesis_data_stream

    @property
    def s3_destination(self):
        """Gets the s3_destination of this StreamProcessorOutput.


        :return: The s3_destination of this StreamProcessorOutput.
        :rtype: StreamProcessorOutputS3Destination
        """
        return self._s3_destination

    @s3_destination.setter
    def s3_destination(self, s3_destination):
        """Sets the s3_destination of this StreamProcessorOutput.


        :param s3_destination: The s3_destination of this StreamProcessorOutput.
        :type s3_destination: StreamProcessorOutputS3Destination
        """

        self._s3_destination = s3_destination
