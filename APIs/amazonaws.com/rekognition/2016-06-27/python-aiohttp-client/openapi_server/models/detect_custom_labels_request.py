# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server import util


class DetectCustomLabelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_version_arn: str=None, image: Image=None, max_results: int=None, min_confidence: float=None):
        """DetectCustomLabelsRequest - a model defined in OpenAPI

        :param project_version_arn: The project_version_arn of this DetectCustomLabelsRequest.
        :param image: The image of this DetectCustomLabelsRequest.
        :param max_results: The max_results of this DetectCustomLabelsRequest.
        :param min_confidence: The min_confidence of this DetectCustomLabelsRequest.
        """
        self.openapi_types = {
            'project_version_arn': str,
            'image': Image,
            'max_results': int,
            'min_confidence': float
        }

        self.attribute_map = {
            'project_version_arn': 'ProjectVersionArn',
            'image': 'Image',
            'max_results': 'MaxResults',
            'min_confidence': 'MinConfidence'
        }

        self._project_version_arn = project_version_arn
        self._image = image
        self._max_results = max_results
        self._min_confidence = min_confidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectCustomLabelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectCustomLabelsRequest of this DetectCustomLabelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_version_arn(self):
        """Gets the project_version_arn of this DetectCustomLabelsRequest.


        :return: The project_version_arn of this DetectCustomLabelsRequest.
        :rtype: str
        """
        return self._project_version_arn

    @project_version_arn.setter
    def project_version_arn(self, project_version_arn):
        """Sets the project_version_arn of this DetectCustomLabelsRequest.


        :param project_version_arn: The project_version_arn of this DetectCustomLabelsRequest.
        :type project_version_arn: str
        """
        if project_version_arn is None:
            raise ValueError("Invalid value for `project_version_arn`, must not be `None`")

        self._project_version_arn = project_version_arn

    @property
    def image(self):
        """Gets the image of this DetectCustomLabelsRequest.


        :return: The image of this DetectCustomLabelsRequest.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DetectCustomLabelsRequest.


        :param image: The image of this DetectCustomLabelsRequest.
        :type image: Image
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def max_results(self):
        """Gets the max_results of this DetectCustomLabelsRequest.


        :return: The max_results of this DetectCustomLabelsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DetectCustomLabelsRequest.


        :param max_results: The max_results of this DetectCustomLabelsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def min_confidence(self):
        """Gets the min_confidence of this DetectCustomLabelsRequest.


        :return: The min_confidence of this DetectCustomLabelsRequest.
        :rtype: float
        """
        return self._min_confidence

    @min_confidence.setter
    def min_confidence(self, min_confidence):
        """Sets the min_confidence of this DetectCustomLabelsRequest.


        :param min_confidence: The min_confidence of this DetectCustomLabelsRequest.
        :type min_confidence: float
        """

        self._min_confidence = min_confidence
