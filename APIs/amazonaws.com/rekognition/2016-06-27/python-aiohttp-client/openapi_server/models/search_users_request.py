# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchUsersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id: str=None, user_id: str=None, face_id: str=None, user_match_threshold: float=None, max_users: int=None):
        """SearchUsersRequest - a model defined in OpenAPI

        :param collection_id: The collection_id of this SearchUsersRequest.
        :param user_id: The user_id of this SearchUsersRequest.
        :param face_id: The face_id of this SearchUsersRequest.
        :param user_match_threshold: The user_match_threshold of this SearchUsersRequest.
        :param max_users: The max_users of this SearchUsersRequest.
        """
        self.openapi_types = {
            'collection_id': str,
            'user_id': str,
            'face_id': str,
            'user_match_threshold': float,
            'max_users': int
        }

        self.attribute_map = {
            'collection_id': 'CollectionId',
            'user_id': 'UserId',
            'face_id': 'FaceId',
            'user_match_threshold': 'UserMatchThreshold',
            'max_users': 'MaxUsers'
        }

        self._collection_id = collection_id
        self._user_id = user_id
        self._face_id = face_id
        self._user_match_threshold = user_match_threshold
        self._max_users = max_users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchUsersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchUsersRequest of this SearchUsersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self):
        """Gets the collection_id of this SearchUsersRequest.


        :return: The collection_id of this SearchUsersRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this SearchUsersRequest.


        :param collection_id: The collection_id of this SearchUsersRequest.
        :type collection_id: str
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")

        self._collection_id = collection_id

    @property
    def user_id(self):
        """Gets the user_id of this SearchUsersRequest.


        :return: The user_id of this SearchUsersRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SearchUsersRequest.


        :param user_id: The user_id of this SearchUsersRequest.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def face_id(self):
        """Gets the face_id of this SearchUsersRequest.


        :return: The face_id of this SearchUsersRequest.
        :rtype: str
        """
        return self._face_id

    @face_id.setter
    def face_id(self, face_id):
        """Sets the face_id of this SearchUsersRequest.


        :param face_id: The face_id of this SearchUsersRequest.
        :type face_id: str
        """

        self._face_id = face_id

    @property
    def user_match_threshold(self):
        """Gets the user_match_threshold of this SearchUsersRequest.


        :return: The user_match_threshold of this SearchUsersRequest.
        :rtype: float
        """
        return self._user_match_threshold

    @user_match_threshold.setter
    def user_match_threshold(self, user_match_threshold):
        """Sets the user_match_threshold of this SearchUsersRequest.


        :param user_match_threshold: The user_match_threshold of this SearchUsersRequest.
        :type user_match_threshold: float
        """

        self._user_match_threshold = user_match_threshold

    @property
    def max_users(self):
        """Gets the max_users of this SearchUsersRequest.


        :return: The max_users of this SearchUsersRequest.
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this SearchUsersRequest.


        :param max_users: The max_users of this SearchUsersRequest.
        :type max_users: int
        """

        self._max_users = max_users
