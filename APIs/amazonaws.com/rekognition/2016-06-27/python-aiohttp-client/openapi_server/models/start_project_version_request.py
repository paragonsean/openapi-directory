# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartProjectVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_version_arn: str=None, min_inference_units: int=None, max_inference_units: int=None):
        """StartProjectVersionRequest - a model defined in OpenAPI

        :param project_version_arn: The project_version_arn of this StartProjectVersionRequest.
        :param min_inference_units: The min_inference_units of this StartProjectVersionRequest.
        :param max_inference_units: The max_inference_units of this StartProjectVersionRequest.
        """
        self.openapi_types = {
            'project_version_arn': str,
            'min_inference_units': int,
            'max_inference_units': int
        }

        self.attribute_map = {
            'project_version_arn': 'ProjectVersionArn',
            'min_inference_units': 'MinInferenceUnits',
            'max_inference_units': 'MaxInferenceUnits'
        }

        self._project_version_arn = project_version_arn
        self._min_inference_units = min_inference_units
        self._max_inference_units = max_inference_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartProjectVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartProjectVersionRequest of this StartProjectVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_version_arn(self):
        """Gets the project_version_arn of this StartProjectVersionRequest.


        :return: The project_version_arn of this StartProjectVersionRequest.
        :rtype: str
        """
        return self._project_version_arn

    @project_version_arn.setter
    def project_version_arn(self, project_version_arn):
        """Sets the project_version_arn of this StartProjectVersionRequest.


        :param project_version_arn: The project_version_arn of this StartProjectVersionRequest.
        :type project_version_arn: str
        """
        if project_version_arn is None:
            raise ValueError("Invalid value for `project_version_arn`, must not be `None`")

        self._project_version_arn = project_version_arn

    @property
    def min_inference_units(self):
        """Gets the min_inference_units of this StartProjectVersionRequest.


        :return: The min_inference_units of this StartProjectVersionRequest.
        :rtype: int
        """
        return self._min_inference_units

    @min_inference_units.setter
    def min_inference_units(self, min_inference_units):
        """Sets the min_inference_units of this StartProjectVersionRequest.


        :param min_inference_units: The min_inference_units of this StartProjectVersionRequest.
        :type min_inference_units: int
        """
        if min_inference_units is None:
            raise ValueError("Invalid value for `min_inference_units`, must not be `None`")

        self._min_inference_units = min_inference_units

    @property
    def max_inference_units(self):
        """Gets the max_inference_units of this StartProjectVersionRequest.


        :return: The max_inference_units of this StartProjectVersionRequest.
        :rtype: int
        """
        return self._max_inference_units

    @max_inference_units.setter
    def max_inference_units(self, max_inference_units):
        """Sets the max_inference_units of this StartProjectVersionRequest.


        :param max_inference_units: The max_inference_units of this StartProjectVersionRequest.
        :type max_inference_units: int
        """

        self._max_inference_units = max_inference_units
