# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.text_detection_geometry import TextDetectionGeometry
from openapi_server.models.text_types import TextTypes
from openapi_server import util


class TextDetection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detected_text: str=None, type: TextTypes=None, id: int=None, parent_id: int=None, confidence: float=None, geometry: TextDetectionGeometry=None):
        """TextDetection - a model defined in OpenAPI

        :param detected_text: The detected_text of this TextDetection.
        :param type: The type of this TextDetection.
        :param id: The id of this TextDetection.
        :param parent_id: The parent_id of this TextDetection.
        :param confidence: The confidence of this TextDetection.
        :param geometry: The geometry of this TextDetection.
        """
        self.openapi_types = {
            'detected_text': str,
            'type': TextTypes,
            'id': int,
            'parent_id': int,
            'confidence': float,
            'geometry': TextDetectionGeometry
        }

        self.attribute_map = {
            'detected_text': 'DetectedText',
            'type': 'Type',
            'id': 'Id',
            'parent_id': 'ParentId',
            'confidence': 'Confidence',
            'geometry': 'Geometry'
        }

        self._detected_text = detected_text
        self._type = type
        self._id = id
        self._parent_id = parent_id
        self._confidence = confidence
        self._geometry = geometry

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextDetection of this TextDetection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detected_text(self):
        """Gets the detected_text of this TextDetection.


        :return: The detected_text of this TextDetection.
        :rtype: str
        """
        return self._detected_text

    @detected_text.setter
    def detected_text(self, detected_text):
        """Sets the detected_text of this TextDetection.


        :param detected_text: The detected_text of this TextDetection.
        :type detected_text: str
        """

        self._detected_text = detected_text

    @property
    def type(self):
        """Gets the type of this TextDetection.


        :return: The type of this TextDetection.
        :rtype: TextTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TextDetection.


        :param type: The type of this TextDetection.
        :type type: TextTypes
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this TextDetection.


        :return: The id of this TextDetection.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TextDetection.


        :param id: The id of this TextDetection.
        :type id: int
        """

        self._id = id

    @property
    def parent_id(self):
        """Gets the parent_id of this TextDetection.


        :return: The parent_id of this TextDetection.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this TextDetection.


        :param parent_id: The parent_id of this TextDetection.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def confidence(self):
        """Gets the confidence of this TextDetection.


        :return: The confidence of this TextDetection.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this TextDetection.


        :param confidence: The confidence of this TextDetection.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def geometry(self):
        """Gets the geometry of this TextDetection.


        :return: The geometry of this TextDetection.
        :rtype: TextDetectionGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this TextDetection.


        :param geometry: The geometry of this TextDetection.
        :type geometry: TextDetectionGeometry
        """

        self._geometry = geometry
