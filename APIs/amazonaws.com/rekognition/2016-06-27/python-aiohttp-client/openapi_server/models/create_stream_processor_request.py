# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_stream_processor_request_data_sharing_preference import CreateStreamProcessorRequestDataSharingPreference
from openapi_server.models.create_stream_processor_request_input import CreateStreamProcessorRequestInput
from openapi_server.models.create_stream_processor_request_output import CreateStreamProcessorRequestOutput
from openapi_server.models.create_stream_processor_request_settings import CreateStreamProcessorRequestSettings
from openapi_server.models.stream_processor_notification_channel import StreamProcessorNotificationChannel
from openapi_server import util


class CreateStreamProcessorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: CreateStreamProcessorRequestInput=None, output: CreateStreamProcessorRequestOutput=None, name: str=None, settings: CreateStreamProcessorRequestSettings=None, role_arn: str=None, tags: Dict=None, notification_channel: StreamProcessorNotificationChannel=None, kms_key_id: str=None, regions_of_interest: List=None, data_sharing_preference: CreateStreamProcessorRequestDataSharingPreference=None):
        """CreateStreamProcessorRequest - a model defined in OpenAPI

        :param input: The input of this CreateStreamProcessorRequest.
        :param output: The output of this CreateStreamProcessorRequest.
        :param name: The name of this CreateStreamProcessorRequest.
        :param settings: The settings of this CreateStreamProcessorRequest.
        :param role_arn: The role_arn of this CreateStreamProcessorRequest.
        :param tags: The tags of this CreateStreamProcessorRequest.
        :param notification_channel: The notification_channel of this CreateStreamProcessorRequest.
        :param kms_key_id: The kms_key_id of this CreateStreamProcessorRequest.
        :param regions_of_interest: The regions_of_interest of this CreateStreamProcessorRequest.
        :param data_sharing_preference: The data_sharing_preference of this CreateStreamProcessorRequest.
        """
        self.openapi_types = {
            'input': CreateStreamProcessorRequestInput,
            'output': CreateStreamProcessorRequestOutput,
            'name': str,
            'settings': CreateStreamProcessorRequestSettings,
            'role_arn': str,
            'tags': Dict,
            'notification_channel': StreamProcessorNotificationChannel,
            'kms_key_id': str,
            'regions_of_interest': List,
            'data_sharing_preference': CreateStreamProcessorRequestDataSharingPreference
        }

        self.attribute_map = {
            'input': 'Input',
            'output': 'Output',
            'name': 'Name',
            'settings': 'Settings',
            'role_arn': 'RoleArn',
            'tags': 'Tags',
            'notification_channel': 'NotificationChannel',
            'kms_key_id': 'KmsKeyId',
            'regions_of_interest': 'RegionsOfInterest',
            'data_sharing_preference': 'DataSharingPreference'
        }

        self._input = input
        self._output = output
        self._name = name
        self._settings = settings
        self._role_arn = role_arn
        self._tags = tags
        self._notification_channel = notification_channel
        self._kms_key_id = kms_key_id
        self._regions_of_interest = regions_of_interest
        self._data_sharing_preference = data_sharing_preference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStreamProcessorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStreamProcessorRequest of this CreateStreamProcessorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this CreateStreamProcessorRequest.


        :return: The input of this CreateStreamProcessorRequest.
        :rtype: CreateStreamProcessorRequestInput
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this CreateStreamProcessorRequest.


        :param input: The input of this CreateStreamProcessorRequest.
        :type input: CreateStreamProcessorRequestInput
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")

        self._input = input

    @property
    def output(self):
        """Gets the output of this CreateStreamProcessorRequest.


        :return: The output of this CreateStreamProcessorRequest.
        :rtype: CreateStreamProcessorRequestOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this CreateStreamProcessorRequest.


        :param output: The output of this CreateStreamProcessorRequest.
        :type output: CreateStreamProcessorRequestOutput
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")

        self._output = output

    @property
    def name(self):
        """Gets the name of this CreateStreamProcessorRequest.


        :return: The name of this CreateStreamProcessorRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateStreamProcessorRequest.


        :param name: The name of this CreateStreamProcessorRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def settings(self):
        """Gets the settings of this CreateStreamProcessorRequest.


        :return: The settings of this CreateStreamProcessorRequest.
        :rtype: CreateStreamProcessorRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateStreamProcessorRequest.


        :param settings: The settings of this CreateStreamProcessorRequest.
        :type settings: CreateStreamProcessorRequestSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")

        self._settings = settings

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateStreamProcessorRequest.


        :return: The role_arn of this CreateStreamProcessorRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateStreamProcessorRequest.


        :param role_arn: The role_arn of this CreateStreamProcessorRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateStreamProcessorRequest.


        :return: The tags of this CreateStreamProcessorRequest.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStreamProcessorRequest.


        :param tags: The tags of this CreateStreamProcessorRequest.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def notification_channel(self):
        """Gets the notification_channel of this CreateStreamProcessorRequest.


        :return: The notification_channel of this CreateStreamProcessorRequest.
        :rtype: StreamProcessorNotificationChannel
        """
        return self._notification_channel

    @notification_channel.setter
    def notification_channel(self, notification_channel):
        """Sets the notification_channel of this CreateStreamProcessorRequest.


        :param notification_channel: The notification_channel of this CreateStreamProcessorRequest.
        :type notification_channel: StreamProcessorNotificationChannel
        """

        self._notification_channel = notification_channel

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CreateStreamProcessorRequest.


        :return: The kms_key_id of this CreateStreamProcessorRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CreateStreamProcessorRequest.


        :param kms_key_id: The kms_key_id of this CreateStreamProcessorRequest.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id

    @property
    def regions_of_interest(self):
        """Gets the regions_of_interest of this CreateStreamProcessorRequest.


        :return: The regions_of_interest of this CreateStreamProcessorRequest.
        :rtype: List
        """
        return self._regions_of_interest

    @regions_of_interest.setter
    def regions_of_interest(self, regions_of_interest):
        """Sets the regions_of_interest of this CreateStreamProcessorRequest.


        :param regions_of_interest: The regions_of_interest of this CreateStreamProcessorRequest.
        :type regions_of_interest: List
        """

        self._regions_of_interest = regions_of_interest

    @property
    def data_sharing_preference(self):
        """Gets the data_sharing_preference of this CreateStreamProcessorRequest.


        :return: The data_sharing_preference of this CreateStreamProcessorRequest.
        :rtype: CreateStreamProcessorRequestDataSharingPreference
        """
        return self._data_sharing_preference

    @data_sharing_preference.setter
    def data_sharing_preference(self, data_sharing_preference):
        """Sets the data_sharing_preference of this CreateStreamProcessorRequest.


        :param data_sharing_preference: The data_sharing_preference of this CreateStreamProcessorRequest.
        :type data_sharing_preference: CreateStreamProcessorRequestDataSharingPreference
        """

        self._data_sharing_preference = data_sharing_preference
