# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_stream_processor_request_start_selector import StartStreamProcessorRequestStartSelector
from openapi_server.models.start_stream_processor_request_stop_selector import StartStreamProcessorRequestStopSelector
from openapi_server import util


class StartStreamProcessorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, start_selector: StartStreamProcessorRequestStartSelector=None, stop_selector: StartStreamProcessorRequestStopSelector=None):
        """StartStreamProcessorRequest - a model defined in OpenAPI

        :param name: The name of this StartStreamProcessorRequest.
        :param start_selector: The start_selector of this StartStreamProcessorRequest.
        :param stop_selector: The stop_selector of this StartStreamProcessorRequest.
        """
        self.openapi_types = {
            'name': str,
            'start_selector': StartStreamProcessorRequestStartSelector,
            'stop_selector': StartStreamProcessorRequestStopSelector
        }

        self.attribute_map = {
            'name': 'Name',
            'start_selector': 'StartSelector',
            'stop_selector': 'StopSelector'
        }

        self._name = name
        self._start_selector = start_selector
        self._stop_selector = stop_selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartStreamProcessorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartStreamProcessorRequest of this StartStreamProcessorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this StartStreamProcessorRequest.


        :return: The name of this StartStreamProcessorRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StartStreamProcessorRequest.


        :param name: The name of this StartStreamProcessorRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def start_selector(self):
        """Gets the start_selector of this StartStreamProcessorRequest.


        :return: The start_selector of this StartStreamProcessorRequest.
        :rtype: StartStreamProcessorRequestStartSelector
        """
        return self._start_selector

    @start_selector.setter
    def start_selector(self, start_selector):
        """Sets the start_selector of this StartStreamProcessorRequest.


        :param start_selector: The start_selector of this StartStreamProcessorRequest.
        :type start_selector: StartStreamProcessorRequestStartSelector
        """

        self._start_selector = start_selector

    @property
    def stop_selector(self):
        """Gets the stop_selector of this StartStreamProcessorRequest.


        :return: The stop_selector of this StartStreamProcessorRequest.
        :rtype: StartStreamProcessorRequestStopSelector
        """
        return self._stop_selector

    @stop_selector.setter
    def stop_selector(self, stop_selector):
        """Sets the stop_selector of this StartStreamProcessorRequest.


        :param stop_selector: The stop_selector of this StartStreamProcessorRequest.
        :type stop_selector: StartStreamProcessorRequestStopSelector
        """

        self._stop_selector = stop_selector
