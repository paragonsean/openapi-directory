# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compared_face_bounding_box import ComparedFaceBoundingBox
from openapi_server import util


class FaceMatchFace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, face_id: str=None, bounding_box: ComparedFaceBoundingBox=None, image_id: str=None, external_image_id: str=None, confidence: float=None, index_faces_model_version: str=None, user_id: str=None):
        """FaceMatchFace - a model defined in OpenAPI

        :param face_id: The face_id of this FaceMatchFace.
        :param bounding_box: The bounding_box of this FaceMatchFace.
        :param image_id: The image_id of this FaceMatchFace.
        :param external_image_id: The external_image_id of this FaceMatchFace.
        :param confidence: The confidence of this FaceMatchFace.
        :param index_faces_model_version: The index_faces_model_version of this FaceMatchFace.
        :param user_id: The user_id of this FaceMatchFace.
        """
        self.openapi_types = {
            'face_id': str,
            'bounding_box': ComparedFaceBoundingBox,
            'image_id': str,
            'external_image_id': str,
            'confidence': float,
            'index_faces_model_version': str,
            'user_id': str
        }

        self.attribute_map = {
            'face_id': 'FaceId',
            'bounding_box': 'BoundingBox',
            'image_id': 'ImageId',
            'external_image_id': 'ExternalImageId',
            'confidence': 'Confidence',
            'index_faces_model_version': 'IndexFacesModelVersion',
            'user_id': 'UserId'
        }

        self._face_id = face_id
        self._bounding_box = bounding_box
        self._image_id = image_id
        self._external_image_id = external_image_id
        self._confidence = confidence
        self._index_faces_model_version = index_faces_model_version
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FaceMatchFace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FaceMatch_Face of this FaceMatchFace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def face_id(self):
        """Gets the face_id of this FaceMatchFace.


        :return: The face_id of this FaceMatchFace.
        :rtype: str
        """
        return self._face_id

    @face_id.setter
    def face_id(self, face_id):
        """Sets the face_id of this FaceMatchFace.


        :param face_id: The face_id of this FaceMatchFace.
        :type face_id: str
        """

        self._face_id = face_id

    @property
    def bounding_box(self):
        """Gets the bounding_box of this FaceMatchFace.


        :return: The bounding_box of this FaceMatchFace.
        :rtype: ComparedFaceBoundingBox
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this FaceMatchFace.


        :param bounding_box: The bounding_box of this FaceMatchFace.
        :type bounding_box: ComparedFaceBoundingBox
        """

        self._bounding_box = bounding_box

    @property
    def image_id(self):
        """Gets the image_id of this FaceMatchFace.


        :return: The image_id of this FaceMatchFace.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this FaceMatchFace.


        :param image_id: The image_id of this FaceMatchFace.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def external_image_id(self):
        """Gets the external_image_id of this FaceMatchFace.


        :return: The external_image_id of this FaceMatchFace.
        :rtype: str
        """
        return self._external_image_id

    @external_image_id.setter
    def external_image_id(self, external_image_id):
        """Sets the external_image_id of this FaceMatchFace.


        :param external_image_id: The external_image_id of this FaceMatchFace.
        :type external_image_id: str
        """

        self._external_image_id = external_image_id

    @property
    def confidence(self):
        """Gets the confidence of this FaceMatchFace.


        :return: The confidence of this FaceMatchFace.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this FaceMatchFace.


        :param confidence: The confidence of this FaceMatchFace.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def index_faces_model_version(self):
        """Gets the index_faces_model_version of this FaceMatchFace.


        :return: The index_faces_model_version of this FaceMatchFace.
        :rtype: str
        """
        return self._index_faces_model_version

    @index_faces_model_version.setter
    def index_faces_model_version(self, index_faces_model_version):
        """Sets the index_faces_model_version of this FaceMatchFace.


        :param index_faces_model_version: The index_faces_model_version of this FaceMatchFace.
        :type index_faces_model_version: str
        """

        self._index_faces_model_version = index_faces_model_version

    @property
    def user_id(self):
        """Gets the user_id of this FaceMatchFace.


        :return: The user_id of this FaceMatchFace.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FaceMatchFace.


        :param user_id: The user_id of this FaceMatchFace.
        :type user_id: str
        """

        self._user_id = user_id
