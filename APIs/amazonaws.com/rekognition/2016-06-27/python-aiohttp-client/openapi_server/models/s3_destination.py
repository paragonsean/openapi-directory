# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, key_prefix: str=None):
        """S3Destination - a model defined in OpenAPI

        :param bucket: The bucket of this S3Destination.
        :param key_prefix: The key_prefix of this S3Destination.
        """
        self.openapi_types = {
            'bucket': str,
            'key_prefix': str
        }

        self.attribute_map = {
            'bucket': 'Bucket',
            'key_prefix': 'KeyPrefix'
        }

        self._bucket = bucket
        self._key_prefix = key_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Destination of this S3Destination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this S3Destination.


        :return: The bucket of this S3Destination.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this S3Destination.


        :param bucket: The bucket of this S3Destination.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def key_prefix(self):
        """Gets the key_prefix of this S3Destination.


        :return: The key_prefix of this S3Destination.
        :rtype: str
        """
        return self._key_prefix

    @key_prefix.setter
    def key_prefix(self, key_prefix):
        """Sets the key_prefix of this S3Destination.


        :param key_prefix: The key_prefix of this S3Destination.
        :type key_prefix: str
        """

        self._key_prefix = key_prefix
