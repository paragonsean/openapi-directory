# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.copy_project_version_request_output_config import CopyProjectVersionRequestOutputConfig
from openapi_server import util


class CopyProjectVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_project_arn: str=None, source_project_version_arn: str=None, destination_project_arn: str=None, version_name: str=None, output_config: CopyProjectVersionRequestOutputConfig=None, tags: Dict=None, kms_key_id: str=None):
        """CopyProjectVersionRequest - a model defined in OpenAPI

        :param source_project_arn: The source_project_arn of this CopyProjectVersionRequest.
        :param source_project_version_arn: The source_project_version_arn of this CopyProjectVersionRequest.
        :param destination_project_arn: The destination_project_arn of this CopyProjectVersionRequest.
        :param version_name: The version_name of this CopyProjectVersionRequest.
        :param output_config: The output_config of this CopyProjectVersionRequest.
        :param tags: The tags of this CopyProjectVersionRequest.
        :param kms_key_id: The kms_key_id of this CopyProjectVersionRequest.
        """
        self.openapi_types = {
            'source_project_arn': str,
            'source_project_version_arn': str,
            'destination_project_arn': str,
            'version_name': str,
            'output_config': CopyProjectVersionRequestOutputConfig,
            'tags': Dict,
            'kms_key_id': str
        }

        self.attribute_map = {
            'source_project_arn': 'SourceProjectArn',
            'source_project_version_arn': 'SourceProjectVersionArn',
            'destination_project_arn': 'DestinationProjectArn',
            'version_name': 'VersionName',
            'output_config': 'OutputConfig',
            'tags': 'Tags',
            'kms_key_id': 'KmsKeyId'
        }

        self._source_project_arn = source_project_arn
        self._source_project_version_arn = source_project_version_arn
        self._destination_project_arn = destination_project_arn
        self._version_name = version_name
        self._output_config = output_config
        self._tags = tags
        self._kms_key_id = kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyProjectVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyProjectVersionRequest of this CopyProjectVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_project_arn(self):
        """Gets the source_project_arn of this CopyProjectVersionRequest.


        :return: The source_project_arn of this CopyProjectVersionRequest.
        :rtype: str
        """
        return self._source_project_arn

    @source_project_arn.setter
    def source_project_arn(self, source_project_arn):
        """Sets the source_project_arn of this CopyProjectVersionRequest.


        :param source_project_arn: The source_project_arn of this CopyProjectVersionRequest.
        :type source_project_arn: str
        """
        if source_project_arn is None:
            raise ValueError("Invalid value for `source_project_arn`, must not be `None`")

        self._source_project_arn = source_project_arn

    @property
    def source_project_version_arn(self):
        """Gets the source_project_version_arn of this CopyProjectVersionRequest.


        :return: The source_project_version_arn of this CopyProjectVersionRequest.
        :rtype: str
        """
        return self._source_project_version_arn

    @source_project_version_arn.setter
    def source_project_version_arn(self, source_project_version_arn):
        """Sets the source_project_version_arn of this CopyProjectVersionRequest.


        :param source_project_version_arn: The source_project_version_arn of this CopyProjectVersionRequest.
        :type source_project_version_arn: str
        """
        if source_project_version_arn is None:
            raise ValueError("Invalid value for `source_project_version_arn`, must not be `None`")

        self._source_project_version_arn = source_project_version_arn

    @property
    def destination_project_arn(self):
        """Gets the destination_project_arn of this CopyProjectVersionRequest.


        :return: The destination_project_arn of this CopyProjectVersionRequest.
        :rtype: str
        """
        return self._destination_project_arn

    @destination_project_arn.setter
    def destination_project_arn(self, destination_project_arn):
        """Sets the destination_project_arn of this CopyProjectVersionRequest.


        :param destination_project_arn: The destination_project_arn of this CopyProjectVersionRequest.
        :type destination_project_arn: str
        """
        if destination_project_arn is None:
            raise ValueError("Invalid value for `destination_project_arn`, must not be `None`")

        self._destination_project_arn = destination_project_arn

    @property
    def version_name(self):
        """Gets the version_name of this CopyProjectVersionRequest.


        :return: The version_name of this CopyProjectVersionRequest.
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this CopyProjectVersionRequest.


        :param version_name: The version_name of this CopyProjectVersionRequest.
        :type version_name: str
        """
        if version_name is None:
            raise ValueError("Invalid value for `version_name`, must not be `None`")

        self._version_name = version_name

    @property
    def output_config(self):
        """Gets the output_config of this CopyProjectVersionRequest.


        :return: The output_config of this CopyProjectVersionRequest.
        :rtype: CopyProjectVersionRequestOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this CopyProjectVersionRequest.


        :param output_config: The output_config of this CopyProjectVersionRequest.
        :type output_config: CopyProjectVersionRequestOutputConfig
        """
        if output_config is None:
            raise ValueError("Invalid value for `output_config`, must not be `None`")

        self._output_config = output_config

    @property
    def tags(self):
        """Gets the tags of this CopyProjectVersionRequest.


        :return: The tags of this CopyProjectVersionRequest.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CopyProjectVersionRequest.


        :param tags: The tags of this CopyProjectVersionRequest.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this CopyProjectVersionRequest.


        :return: The kms_key_id of this CopyProjectVersionRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this CopyProjectVersionRequest.


        :param kms_key_id: The kms_key_id of this CopyProjectVersionRequest.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id
