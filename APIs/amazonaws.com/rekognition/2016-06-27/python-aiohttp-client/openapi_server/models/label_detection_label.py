# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabelDetectionLabel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, confidence: float=None, instances: List=None, parents: List=None, aliases: List=None, categories: List=None):
        """LabelDetectionLabel - a model defined in OpenAPI

        :param name: The name of this LabelDetectionLabel.
        :param confidence: The confidence of this LabelDetectionLabel.
        :param instances: The instances of this LabelDetectionLabel.
        :param parents: The parents of this LabelDetectionLabel.
        :param aliases: The aliases of this LabelDetectionLabel.
        :param categories: The categories of this LabelDetectionLabel.
        """
        self.openapi_types = {
            'name': str,
            'confidence': float,
            'instances': List,
            'parents': List,
            'aliases': List,
            'categories': List
        }

        self.attribute_map = {
            'name': 'Name',
            'confidence': 'Confidence',
            'instances': 'Instances',
            'parents': 'Parents',
            'aliases': 'Aliases',
            'categories': 'Categories'
        }

        self._name = name
        self._confidence = confidence
        self._instances = instances
        self._parents = parents
        self._aliases = aliases
        self._categories = categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelDetectionLabel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabelDetection_Label of this LabelDetectionLabel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this LabelDetectionLabel.


        :return: The name of this LabelDetectionLabel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabelDetectionLabel.


        :param name: The name of this LabelDetectionLabel.
        :type name: str
        """

        self._name = name

    @property
    def confidence(self):
        """Gets the confidence of this LabelDetectionLabel.


        :return: The confidence of this LabelDetectionLabel.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this LabelDetectionLabel.


        :param confidence: The confidence of this LabelDetectionLabel.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def instances(self):
        """Gets the instances of this LabelDetectionLabel.


        :return: The instances of this LabelDetectionLabel.
        :rtype: List
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this LabelDetectionLabel.


        :param instances: The instances of this LabelDetectionLabel.
        :type instances: List
        """

        self._instances = instances

    @property
    def parents(self):
        """Gets the parents of this LabelDetectionLabel.


        :return: The parents of this LabelDetectionLabel.
        :rtype: List
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this LabelDetectionLabel.


        :param parents: The parents of this LabelDetectionLabel.
        :type parents: List
        """

        self._parents = parents

    @property
    def aliases(self):
        """Gets the aliases of this LabelDetectionLabel.


        :return: The aliases of this LabelDetectionLabel.
        :rtype: List
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this LabelDetectionLabel.


        :param aliases: The aliases of this LabelDetectionLabel.
        :type aliases: List
        """

        self._aliases = aliases

    @property
    def categories(self):
        """Gets the categories of this LabelDetectionLabel.


        :return: The categories of this LabelDetectionLabel.
        :rtype: List
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this LabelDetectionLabel.


        :param categories: The categories of this LabelDetectionLabel.
        :type categories: List
        """

        self._categories = categories
