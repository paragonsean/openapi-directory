# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.face_detail_age_range import FaceDetailAgeRange
from openapi_server.models.face_detail_beard import FaceDetailBeard
from openapi_server.models.face_detail_bounding_box import FaceDetailBoundingBox
from openapi_server.models.face_detail_eye_direction import FaceDetailEyeDirection
from openapi_server.models.face_detail_eyeglasses import FaceDetailEyeglasses
from openapi_server.models.face_detail_eyes_open import FaceDetailEyesOpen
from openapi_server.models.face_detail_face_occluded import FaceDetailFaceOccluded
from openapi_server.models.face_detail_gender import FaceDetailGender
from openapi_server.models.face_detail_mouth_open import FaceDetailMouthOpen
from openapi_server.models.face_detail_mustache import FaceDetailMustache
from openapi_server.models.face_detail_pose import FaceDetailPose
from openapi_server.models.face_detail_quality import FaceDetailQuality
from openapi_server.models.face_detail_smile import FaceDetailSmile
from openapi_server.models.face_detail_sunglasses import FaceDetailSunglasses
from openapi_server import util


class FaceDetectionFace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: FaceDetailBoundingBox=None, age_range: FaceDetailAgeRange=None, smile: FaceDetailSmile=None, eyeglasses: FaceDetailEyeglasses=None, sunglasses: FaceDetailSunglasses=None, gender: FaceDetailGender=None, beard: FaceDetailBeard=None, mustache: FaceDetailMustache=None, eyes_open: FaceDetailEyesOpen=None, mouth_open: FaceDetailMouthOpen=None, emotions: List=None, landmarks: List=None, pose: FaceDetailPose=None, quality: FaceDetailQuality=None, confidence: float=None, face_occluded: FaceDetailFaceOccluded=None, eye_direction: FaceDetailEyeDirection=None):
        """FaceDetectionFace - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this FaceDetectionFace.
        :param age_range: The age_range of this FaceDetectionFace.
        :param smile: The smile of this FaceDetectionFace.
        :param eyeglasses: The eyeglasses of this FaceDetectionFace.
        :param sunglasses: The sunglasses of this FaceDetectionFace.
        :param gender: The gender of this FaceDetectionFace.
        :param beard: The beard of this FaceDetectionFace.
        :param mustache: The mustache of this FaceDetectionFace.
        :param eyes_open: The eyes_open of this FaceDetectionFace.
        :param mouth_open: The mouth_open of this FaceDetectionFace.
        :param emotions: The emotions of this FaceDetectionFace.
        :param landmarks: The landmarks of this FaceDetectionFace.
        :param pose: The pose of this FaceDetectionFace.
        :param quality: The quality of this FaceDetectionFace.
        :param confidence: The confidence of this FaceDetectionFace.
        :param face_occluded: The face_occluded of this FaceDetectionFace.
        :param eye_direction: The eye_direction of this FaceDetectionFace.
        """
        self.openapi_types = {
            'bounding_box': FaceDetailBoundingBox,
            'age_range': FaceDetailAgeRange,
            'smile': FaceDetailSmile,
            'eyeglasses': FaceDetailEyeglasses,
            'sunglasses': FaceDetailSunglasses,
            'gender': FaceDetailGender,
            'beard': FaceDetailBeard,
            'mustache': FaceDetailMustache,
            'eyes_open': FaceDetailEyesOpen,
            'mouth_open': FaceDetailMouthOpen,
            'emotions': List,
            'landmarks': List,
            'pose': FaceDetailPose,
            'quality': FaceDetailQuality,
            'confidence': float,
            'face_occluded': FaceDetailFaceOccluded,
            'eye_direction': FaceDetailEyeDirection
        }

        self.attribute_map = {
            'bounding_box': 'BoundingBox',
            'age_range': 'AgeRange',
            'smile': 'Smile',
            'eyeglasses': 'Eyeglasses',
            'sunglasses': 'Sunglasses',
            'gender': 'Gender',
            'beard': 'Beard',
            'mustache': 'Mustache',
            'eyes_open': 'EyesOpen',
            'mouth_open': 'MouthOpen',
            'emotions': 'Emotions',
            'landmarks': 'Landmarks',
            'pose': 'Pose',
            'quality': 'Quality',
            'confidence': 'Confidence',
            'face_occluded': 'FaceOccluded',
            'eye_direction': 'EyeDirection'
        }

        self._bounding_box = bounding_box
        self._age_range = age_range
        self._smile = smile
        self._eyeglasses = eyeglasses
        self._sunglasses = sunglasses
        self._gender = gender
        self._beard = beard
        self._mustache = mustache
        self._eyes_open = eyes_open
        self._mouth_open = mouth_open
        self._emotions = emotions
        self._landmarks = landmarks
        self._pose = pose
        self._quality = quality
        self._confidence = confidence
        self._face_occluded = face_occluded
        self._eye_direction = eye_direction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FaceDetectionFace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FaceDetection_Face of this FaceDetectionFace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this FaceDetectionFace.


        :return: The bounding_box of this FaceDetectionFace.
        :rtype: FaceDetailBoundingBox
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this FaceDetectionFace.


        :param bounding_box: The bounding_box of this FaceDetectionFace.
        :type bounding_box: FaceDetailBoundingBox
        """

        self._bounding_box = bounding_box

    @property
    def age_range(self):
        """Gets the age_range of this FaceDetectionFace.


        :return: The age_range of this FaceDetectionFace.
        :rtype: FaceDetailAgeRange
        """
        return self._age_range

    @age_range.setter
    def age_range(self, age_range):
        """Sets the age_range of this FaceDetectionFace.


        :param age_range: The age_range of this FaceDetectionFace.
        :type age_range: FaceDetailAgeRange
        """

        self._age_range = age_range

    @property
    def smile(self):
        """Gets the smile of this FaceDetectionFace.


        :return: The smile of this FaceDetectionFace.
        :rtype: FaceDetailSmile
        """
        return self._smile

    @smile.setter
    def smile(self, smile):
        """Sets the smile of this FaceDetectionFace.


        :param smile: The smile of this FaceDetectionFace.
        :type smile: FaceDetailSmile
        """

        self._smile = smile

    @property
    def eyeglasses(self):
        """Gets the eyeglasses of this FaceDetectionFace.


        :return: The eyeglasses of this FaceDetectionFace.
        :rtype: FaceDetailEyeglasses
        """
        return self._eyeglasses

    @eyeglasses.setter
    def eyeglasses(self, eyeglasses):
        """Sets the eyeglasses of this FaceDetectionFace.


        :param eyeglasses: The eyeglasses of this FaceDetectionFace.
        :type eyeglasses: FaceDetailEyeglasses
        """

        self._eyeglasses = eyeglasses

    @property
    def sunglasses(self):
        """Gets the sunglasses of this FaceDetectionFace.


        :return: The sunglasses of this FaceDetectionFace.
        :rtype: FaceDetailSunglasses
        """
        return self._sunglasses

    @sunglasses.setter
    def sunglasses(self, sunglasses):
        """Sets the sunglasses of this FaceDetectionFace.


        :param sunglasses: The sunglasses of this FaceDetectionFace.
        :type sunglasses: FaceDetailSunglasses
        """

        self._sunglasses = sunglasses

    @property
    def gender(self):
        """Gets the gender of this FaceDetectionFace.


        :return: The gender of this FaceDetectionFace.
        :rtype: FaceDetailGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this FaceDetectionFace.


        :param gender: The gender of this FaceDetectionFace.
        :type gender: FaceDetailGender
        """

        self._gender = gender

    @property
    def beard(self):
        """Gets the beard of this FaceDetectionFace.


        :return: The beard of this FaceDetectionFace.
        :rtype: FaceDetailBeard
        """
        return self._beard

    @beard.setter
    def beard(self, beard):
        """Sets the beard of this FaceDetectionFace.


        :param beard: The beard of this FaceDetectionFace.
        :type beard: FaceDetailBeard
        """

        self._beard = beard

    @property
    def mustache(self):
        """Gets the mustache of this FaceDetectionFace.


        :return: The mustache of this FaceDetectionFace.
        :rtype: FaceDetailMustache
        """
        return self._mustache

    @mustache.setter
    def mustache(self, mustache):
        """Sets the mustache of this FaceDetectionFace.


        :param mustache: The mustache of this FaceDetectionFace.
        :type mustache: FaceDetailMustache
        """

        self._mustache = mustache

    @property
    def eyes_open(self):
        """Gets the eyes_open of this FaceDetectionFace.


        :return: The eyes_open of this FaceDetectionFace.
        :rtype: FaceDetailEyesOpen
        """
        return self._eyes_open

    @eyes_open.setter
    def eyes_open(self, eyes_open):
        """Sets the eyes_open of this FaceDetectionFace.


        :param eyes_open: The eyes_open of this FaceDetectionFace.
        :type eyes_open: FaceDetailEyesOpen
        """

        self._eyes_open = eyes_open

    @property
    def mouth_open(self):
        """Gets the mouth_open of this FaceDetectionFace.


        :return: The mouth_open of this FaceDetectionFace.
        :rtype: FaceDetailMouthOpen
        """
        return self._mouth_open

    @mouth_open.setter
    def mouth_open(self, mouth_open):
        """Sets the mouth_open of this FaceDetectionFace.


        :param mouth_open: The mouth_open of this FaceDetectionFace.
        :type mouth_open: FaceDetailMouthOpen
        """

        self._mouth_open = mouth_open

    @property
    def emotions(self):
        """Gets the emotions of this FaceDetectionFace.


        :return: The emotions of this FaceDetectionFace.
        :rtype: List
        """
        return self._emotions

    @emotions.setter
    def emotions(self, emotions):
        """Sets the emotions of this FaceDetectionFace.


        :param emotions: The emotions of this FaceDetectionFace.
        :type emotions: List
        """

        self._emotions = emotions

    @property
    def landmarks(self):
        """Gets the landmarks of this FaceDetectionFace.


        :return: The landmarks of this FaceDetectionFace.
        :rtype: List
        """
        return self._landmarks

    @landmarks.setter
    def landmarks(self, landmarks):
        """Sets the landmarks of this FaceDetectionFace.


        :param landmarks: The landmarks of this FaceDetectionFace.
        :type landmarks: List
        """

        self._landmarks = landmarks

    @property
    def pose(self):
        """Gets the pose of this FaceDetectionFace.


        :return: The pose of this FaceDetectionFace.
        :rtype: FaceDetailPose
        """
        return self._pose

    @pose.setter
    def pose(self, pose):
        """Sets the pose of this FaceDetectionFace.


        :param pose: The pose of this FaceDetectionFace.
        :type pose: FaceDetailPose
        """

        self._pose = pose

    @property
    def quality(self):
        """Gets the quality of this FaceDetectionFace.


        :return: The quality of this FaceDetectionFace.
        :rtype: FaceDetailQuality
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this FaceDetectionFace.


        :param quality: The quality of this FaceDetectionFace.
        :type quality: FaceDetailQuality
        """

        self._quality = quality

    @property
    def confidence(self):
        """Gets the confidence of this FaceDetectionFace.


        :return: The confidence of this FaceDetectionFace.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this FaceDetectionFace.


        :param confidence: The confidence of this FaceDetectionFace.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def face_occluded(self):
        """Gets the face_occluded of this FaceDetectionFace.


        :return: The face_occluded of this FaceDetectionFace.
        :rtype: FaceDetailFaceOccluded
        """
        return self._face_occluded

    @face_occluded.setter
    def face_occluded(self, face_occluded):
        """Sets the face_occluded of this FaceDetectionFace.


        :param face_occluded: The face_occluded of this FaceDetectionFace.
        :type face_occluded: FaceDetailFaceOccluded
        """

        self._face_occluded = face_occluded

    @property
    def eye_direction(self):
        """Gets the eye_direction of this FaceDetectionFace.


        :return: The eye_direction of this FaceDetectionFace.
        :rtype: FaceDetailEyeDirection
        """
        return self._eye_direction

    @eye_direction.setter
    def eye_direction(self, eye_direction):
        """Sets the eye_direction of this FaceDetectionFace.


        :param eye_direction: The eye_direction of this FaceDetectionFace.
        :type eye_direction: FaceDetailEyeDirection
        """

        self._eye_direction = eye_direction
