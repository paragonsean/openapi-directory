# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListDatasetLabelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_arn: str=None, next_token: str=None, max_results: int=None):
        """ListDatasetLabelsRequest - a model defined in OpenAPI

        :param dataset_arn: The dataset_arn of this ListDatasetLabelsRequest.
        :param next_token: The next_token of this ListDatasetLabelsRequest.
        :param max_results: The max_results of this ListDatasetLabelsRequest.
        """
        self.openapi_types = {
            'dataset_arn': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'dataset_arn': 'DatasetArn',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._dataset_arn = dataset_arn
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDatasetLabelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDatasetLabelsRequest of this ListDatasetLabelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_arn(self):
        """Gets the dataset_arn of this ListDatasetLabelsRequest.


        :return: The dataset_arn of this ListDatasetLabelsRequest.
        :rtype: str
        """
        return self._dataset_arn

    @dataset_arn.setter
    def dataset_arn(self, dataset_arn):
        """Sets the dataset_arn of this ListDatasetLabelsRequest.


        :param dataset_arn: The dataset_arn of this ListDatasetLabelsRequest.
        :type dataset_arn: str
        """
        if dataset_arn is None:
            raise ValueError("Invalid value for `dataset_arn`, must not be `None`")

        self._dataset_arn = dataset_arn

    @property
    def next_token(self):
        """Gets the next_token of this ListDatasetLabelsRequest.


        :return: The next_token of this ListDatasetLabelsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListDatasetLabelsRequest.


        :param next_token: The next_token of this ListDatasetLabelsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListDatasetLabelsRequest.


        :return: The max_results of this ListDatasetLabelsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListDatasetLabelsRequest.


        :param max_results: The max_results of this ListDatasetLabelsRequest.
        :type max_results: int
        """

        self._max_results = max_results
