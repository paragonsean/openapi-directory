# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.text_detection_result_text_detection import TextDetectionResultTextDetection
from openapi_server import util


class TextDetectionResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: int=None, text_detection: TextDetectionResultTextDetection=None):
        """TextDetectionResult - a model defined in OpenAPI

        :param timestamp: The timestamp of this TextDetectionResult.
        :param text_detection: The text_detection of this TextDetectionResult.
        """
        self.openapi_types = {
            'timestamp': int,
            'text_detection': TextDetectionResultTextDetection
        }

        self.attribute_map = {
            'timestamp': 'Timestamp',
            'text_detection': 'TextDetection'
        }

        self._timestamp = timestamp
        self._text_detection = text_detection

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextDetectionResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextDetectionResult of this TextDetectionResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this TextDetectionResult.


        :return: The timestamp of this TextDetectionResult.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TextDetectionResult.


        :param timestamp: The timestamp of this TextDetectionResult.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def text_detection(self):
        """Gets the text_detection of this TextDetectionResult.


        :return: The text_detection of this TextDetectionResult.
        :rtype: TextDetectionResultTextDetection
        """
        return self._text_detection

    @text_detection.setter
    def text_detection(self, text_detection):
        """Sets the text_detection of this TextDetectionResult.


        :param text_detection: The text_detection of this TextDetectionResult.
        :type text_detection: TextDetectionResultTextDetection
        """

        self._text_detection = text_detection
