# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.index_faces_request_image import IndexFacesRequestImage
from openapi_server.models.quality_filter import QualityFilter
from openapi_server import util


class IndexFacesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id: str=None, image: IndexFacesRequestImage=None, external_image_id: str=None, detection_attributes: List=None, max_faces: int=None, quality_filter: QualityFilter=None):
        """IndexFacesRequest - a model defined in OpenAPI

        :param collection_id: The collection_id of this IndexFacesRequest.
        :param image: The image of this IndexFacesRequest.
        :param external_image_id: The external_image_id of this IndexFacesRequest.
        :param detection_attributes: The detection_attributes of this IndexFacesRequest.
        :param max_faces: The max_faces of this IndexFacesRequest.
        :param quality_filter: The quality_filter of this IndexFacesRequest.
        """
        self.openapi_types = {
            'collection_id': str,
            'image': IndexFacesRequestImage,
            'external_image_id': str,
            'detection_attributes': List,
            'max_faces': int,
            'quality_filter': QualityFilter
        }

        self.attribute_map = {
            'collection_id': 'CollectionId',
            'image': 'Image',
            'external_image_id': 'ExternalImageId',
            'detection_attributes': 'DetectionAttributes',
            'max_faces': 'MaxFaces',
            'quality_filter': 'QualityFilter'
        }

        self._collection_id = collection_id
        self._image = image
        self._external_image_id = external_image_id
        self._detection_attributes = detection_attributes
        self._max_faces = max_faces
        self._quality_filter = quality_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexFacesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexFacesRequest of this IndexFacesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self):
        """Gets the collection_id of this IndexFacesRequest.


        :return: The collection_id of this IndexFacesRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this IndexFacesRequest.


        :param collection_id: The collection_id of this IndexFacesRequest.
        :type collection_id: str
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")

        self._collection_id = collection_id

    @property
    def image(self):
        """Gets the image of this IndexFacesRequest.


        :return: The image of this IndexFacesRequest.
        :rtype: IndexFacesRequestImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this IndexFacesRequest.


        :param image: The image of this IndexFacesRequest.
        :type image: IndexFacesRequestImage
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def external_image_id(self):
        """Gets the external_image_id of this IndexFacesRequest.


        :return: The external_image_id of this IndexFacesRequest.
        :rtype: str
        """
        return self._external_image_id

    @external_image_id.setter
    def external_image_id(self, external_image_id):
        """Sets the external_image_id of this IndexFacesRequest.


        :param external_image_id: The external_image_id of this IndexFacesRequest.
        :type external_image_id: str
        """

        self._external_image_id = external_image_id

    @property
    def detection_attributes(self):
        """Gets the detection_attributes of this IndexFacesRequest.


        :return: The detection_attributes of this IndexFacesRequest.
        :rtype: List
        """
        return self._detection_attributes

    @detection_attributes.setter
    def detection_attributes(self, detection_attributes):
        """Sets the detection_attributes of this IndexFacesRequest.


        :param detection_attributes: The detection_attributes of this IndexFacesRequest.
        :type detection_attributes: List
        """

        self._detection_attributes = detection_attributes

    @property
    def max_faces(self):
        """Gets the max_faces of this IndexFacesRequest.


        :return: The max_faces of this IndexFacesRequest.
        :rtype: int
        """
        return self._max_faces

    @max_faces.setter
    def max_faces(self, max_faces):
        """Sets the max_faces of this IndexFacesRequest.


        :param max_faces: The max_faces of this IndexFacesRequest.
        :type max_faces: int
        """

        self._max_faces = max_faces

    @property
    def quality_filter(self):
        """Gets the quality_filter of this IndexFacesRequest.


        :return: The quality_filter of this IndexFacesRequest.
        :rtype: QualityFilter
        """
        return self._quality_filter

    @quality_filter.setter
    def quality_filter(self, quality_filter):
        """Sets the quality_filter of this IndexFacesRequest.


        :param quality_filter: The quality_filter of this IndexFacesRequest.
        :type quality_filter: QualityFilter
        """

        self._quality_filter = quality_filter
