# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartShotDetectionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_segment_confidence: float=None):
        """StartShotDetectionFilter - a model defined in OpenAPI

        :param min_segment_confidence: The min_segment_confidence of this StartShotDetectionFilter.
        """
        self.openapi_types = {
            'min_segment_confidence': float
        }

        self.attribute_map = {
            'min_segment_confidence': 'MinSegmentConfidence'
        }

        self._min_segment_confidence = min_segment_confidence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartShotDetectionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartShotDetectionFilter of this StartShotDetectionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_segment_confidence(self):
        """Gets the min_segment_confidence of this StartShotDetectionFilter.


        :return: The min_segment_confidence of this StartShotDetectionFilter.
        :rtype: float
        """
        return self._min_segment_confidence

    @min_segment_confidence.setter
    def min_segment_confidence(self, min_segment_confidence):
        """Sets the min_segment_confidence of this StartShotDetectionFilter.


        :param min_segment_confidence: The min_segment_confidence of this StartShotDetectionFilter.
        :type min_segment_confidence: float
        """

        self._min_segment_confidence = min_segment_confidence
