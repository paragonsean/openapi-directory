# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_face_liveness_session_results_response_reference_image import GetFaceLivenessSessionResultsResponseReferenceImage
from openapi_server.models.liveness_session_status import LivenessSessionStatus
from openapi_server import util


class GetFaceLivenessSessionResultsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_id: str=None, status: LivenessSessionStatus=None, confidence: float=None, reference_image: GetFaceLivenessSessionResultsResponseReferenceImage=None, audit_images: List=None):
        """GetFaceLivenessSessionResultsResponse - a model defined in OpenAPI

        :param session_id: The session_id of this GetFaceLivenessSessionResultsResponse.
        :param status: The status of this GetFaceLivenessSessionResultsResponse.
        :param confidence: The confidence of this GetFaceLivenessSessionResultsResponse.
        :param reference_image: The reference_image of this GetFaceLivenessSessionResultsResponse.
        :param audit_images: The audit_images of this GetFaceLivenessSessionResultsResponse.
        """
        self.openapi_types = {
            'session_id': str,
            'status': LivenessSessionStatus,
            'confidence': float,
            'reference_image': GetFaceLivenessSessionResultsResponseReferenceImage,
            'audit_images': List
        }

        self.attribute_map = {
            'session_id': 'SessionId',
            'status': 'Status',
            'confidence': 'Confidence',
            'reference_image': 'ReferenceImage',
            'audit_images': 'AuditImages'
        }

        self._session_id = session_id
        self._status = status
        self._confidence = confidence
        self._reference_image = reference_image
        self._audit_images = audit_images

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFaceLivenessSessionResultsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFaceLivenessSessionResultsResponse of this GetFaceLivenessSessionResultsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_id(self):
        """Gets the session_id of this GetFaceLivenessSessionResultsResponse.


        :return: The session_id of this GetFaceLivenessSessionResultsResponse.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this GetFaceLivenessSessionResultsResponse.


        :param session_id: The session_id of this GetFaceLivenessSessionResultsResponse.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")

        self._session_id = session_id

    @property
    def status(self):
        """Gets the status of this GetFaceLivenessSessionResultsResponse.


        :return: The status of this GetFaceLivenessSessionResultsResponse.
        :rtype: LivenessSessionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetFaceLivenessSessionResultsResponse.


        :param status: The status of this GetFaceLivenessSessionResultsResponse.
        :type status: LivenessSessionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def confidence(self):
        """Gets the confidence of this GetFaceLivenessSessionResultsResponse.


        :return: The confidence of this GetFaceLivenessSessionResultsResponse.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this GetFaceLivenessSessionResultsResponse.


        :param confidence: The confidence of this GetFaceLivenessSessionResultsResponse.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def reference_image(self):
        """Gets the reference_image of this GetFaceLivenessSessionResultsResponse.


        :return: The reference_image of this GetFaceLivenessSessionResultsResponse.
        :rtype: GetFaceLivenessSessionResultsResponseReferenceImage
        """
        return self._reference_image

    @reference_image.setter
    def reference_image(self, reference_image):
        """Sets the reference_image of this GetFaceLivenessSessionResultsResponse.


        :param reference_image: The reference_image of this GetFaceLivenessSessionResultsResponse.
        :type reference_image: GetFaceLivenessSessionResultsResponseReferenceImage
        """

        self._reference_image = reference_image

    @property
    def audit_images(self):
        """Gets the audit_images of this GetFaceLivenessSessionResultsResponse.


        :return: The audit_images of this GetFaceLivenessSessionResultsResponse.
        :rtype: List
        """
        return self._audit_images

    @audit_images.setter
    def audit_images(self, audit_images):
        """Sets the audit_images of this GetFaceLivenessSessionResultsResponse.


        :param audit_images: The audit_images of this GetFaceLivenessSessionResultsResponse.
        :type audit_images: List
        """

        self._audit_images = audit_images
