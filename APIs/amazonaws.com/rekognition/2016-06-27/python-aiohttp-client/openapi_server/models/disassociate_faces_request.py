# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisassociateFacesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id: str=None, user_id: str=None, client_request_token: str=None, face_ids: List=None):
        """DisassociateFacesRequest - a model defined in OpenAPI

        :param collection_id: The collection_id of this DisassociateFacesRequest.
        :param user_id: The user_id of this DisassociateFacesRequest.
        :param client_request_token: The client_request_token of this DisassociateFacesRequest.
        :param face_ids: The face_ids of this DisassociateFacesRequest.
        """
        self.openapi_types = {
            'collection_id': str,
            'user_id': str,
            'client_request_token': str,
            'face_ids': List
        }

        self.attribute_map = {
            'collection_id': 'CollectionId',
            'user_id': 'UserId',
            'client_request_token': 'ClientRequestToken',
            'face_ids': 'FaceIds'
        }

        self._collection_id = collection_id
        self._user_id = user_id
        self._client_request_token = client_request_token
        self._face_ids = face_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisassociateFacesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisassociateFacesRequest of this DisassociateFacesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self):
        """Gets the collection_id of this DisassociateFacesRequest.


        :return: The collection_id of this DisassociateFacesRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this DisassociateFacesRequest.


        :param collection_id: The collection_id of this DisassociateFacesRequest.
        :type collection_id: str
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")

        self._collection_id = collection_id

    @property
    def user_id(self):
        """Gets the user_id of this DisassociateFacesRequest.


        :return: The user_id of this DisassociateFacesRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DisassociateFacesRequest.


        :param user_id: The user_id of this DisassociateFacesRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def client_request_token(self):
        """Gets the client_request_token of this DisassociateFacesRequest.


        :return: The client_request_token of this DisassociateFacesRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this DisassociateFacesRequest.


        :param client_request_token: The client_request_token of this DisassociateFacesRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def face_ids(self):
        """Gets the face_ids of this DisassociateFacesRequest.


        :return: The face_ids of this DisassociateFacesRequest.
        :rtype: List
        """
        return self._face_ids

    @face_ids.setter
    def face_ids(self, face_ids):
        """Sets the face_ids of this DisassociateFacesRequest.


        :param face_ids: The face_ids of this DisassociateFacesRequest.
        :type face_ids: List
        """
        if face_ids is None:
            raise ValueError("Invalid value for `face_ids`, must not be `None`")

        self._face_ids = face_ids
