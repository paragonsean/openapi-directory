# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DominantColor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, red: int=None, blue: int=None, green: int=None, hex_code: str=None, css_color: str=None, simplified_color: str=None, pixel_percent: float=None):
        """DominantColor - a model defined in OpenAPI

        :param red: The red of this DominantColor.
        :param blue: The blue of this DominantColor.
        :param green: The green of this DominantColor.
        :param hex_code: The hex_code of this DominantColor.
        :param css_color: The css_color of this DominantColor.
        :param simplified_color: The simplified_color of this DominantColor.
        :param pixel_percent: The pixel_percent of this DominantColor.
        """
        self.openapi_types = {
            'red': int,
            'blue': int,
            'green': int,
            'hex_code': str,
            'css_color': str,
            'simplified_color': str,
            'pixel_percent': float
        }

        self.attribute_map = {
            'red': 'Red',
            'blue': 'Blue',
            'green': 'Green',
            'hex_code': 'HexCode',
            'css_color': 'CSSColor',
            'simplified_color': 'SimplifiedColor',
            'pixel_percent': 'PixelPercent'
        }

        self._red = red
        self._blue = blue
        self._green = green
        self._hex_code = hex_code
        self._css_color = css_color
        self._simplified_color = simplified_color
        self._pixel_percent = pixel_percent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DominantColor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DominantColor of this DominantColor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def red(self):
        """Gets the red of this DominantColor.


        :return: The red of this DominantColor.
        :rtype: int
        """
        return self._red

    @red.setter
    def red(self, red):
        """Sets the red of this DominantColor.


        :param red: The red of this DominantColor.
        :type red: int
        """

        self._red = red

    @property
    def blue(self):
        """Gets the blue of this DominantColor.


        :return: The blue of this DominantColor.
        :rtype: int
        """
        return self._blue

    @blue.setter
    def blue(self, blue):
        """Sets the blue of this DominantColor.


        :param blue: The blue of this DominantColor.
        :type blue: int
        """

        self._blue = blue

    @property
    def green(self):
        """Gets the green of this DominantColor.


        :return: The green of this DominantColor.
        :rtype: int
        """
        return self._green

    @green.setter
    def green(self, green):
        """Sets the green of this DominantColor.


        :param green: The green of this DominantColor.
        :type green: int
        """

        self._green = green

    @property
    def hex_code(self):
        """Gets the hex_code of this DominantColor.


        :return: The hex_code of this DominantColor.
        :rtype: str
        """
        return self._hex_code

    @hex_code.setter
    def hex_code(self, hex_code):
        """Sets the hex_code of this DominantColor.


        :param hex_code: The hex_code of this DominantColor.
        :type hex_code: str
        """

        self._hex_code = hex_code

    @property
    def css_color(self):
        """Gets the css_color of this DominantColor.


        :return: The css_color of this DominantColor.
        :rtype: str
        """
        return self._css_color

    @css_color.setter
    def css_color(self, css_color):
        """Sets the css_color of this DominantColor.


        :param css_color: The css_color of this DominantColor.
        :type css_color: str
        """

        self._css_color = css_color

    @property
    def simplified_color(self):
        """Gets the simplified_color of this DominantColor.


        :return: The simplified_color of this DominantColor.
        :rtype: str
        """
        return self._simplified_color

    @simplified_color.setter
    def simplified_color(self, simplified_color):
        """Sets the simplified_color of this DominantColor.


        :param simplified_color: The simplified_color of this DominantColor.
        :type simplified_color: str
        """

        self._simplified_color = simplified_color

    @property
    def pixel_percent(self):
        """Gets the pixel_percent of this DominantColor.


        :return: The pixel_percent of this DominantColor.
        :rtype: float
        """
        return self._pixel_percent

    @pixel_percent.setter
    def pixel_percent(self, pixel_percent):
        """Sets the pixel_percent of this DominantColor.


        :param pixel_percent: The pixel_percent of this DominantColor.
        :type pixel_percent: float
        """

        self._pixel_percent = pixel_percent
