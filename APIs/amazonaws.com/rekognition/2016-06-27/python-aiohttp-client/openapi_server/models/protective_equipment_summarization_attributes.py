# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProtectiveEquipmentSummarizationAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_confidence: float=None, required_equipment_types: List=None):
        """ProtectiveEquipmentSummarizationAttributes - a model defined in OpenAPI

        :param min_confidence: The min_confidence of this ProtectiveEquipmentSummarizationAttributes.
        :param required_equipment_types: The required_equipment_types of this ProtectiveEquipmentSummarizationAttributes.
        """
        self.openapi_types = {
            'min_confidence': float,
            'required_equipment_types': List
        }

        self.attribute_map = {
            'min_confidence': 'MinConfidence',
            'required_equipment_types': 'RequiredEquipmentTypes'
        }

        self._min_confidence = min_confidence
        self._required_equipment_types = required_equipment_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectiveEquipmentSummarizationAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectiveEquipmentSummarizationAttributes of this ProtectiveEquipmentSummarizationAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_confidence(self):
        """Gets the min_confidence of this ProtectiveEquipmentSummarizationAttributes.


        :return: The min_confidence of this ProtectiveEquipmentSummarizationAttributes.
        :rtype: float
        """
        return self._min_confidence

    @min_confidence.setter
    def min_confidence(self, min_confidence):
        """Sets the min_confidence of this ProtectiveEquipmentSummarizationAttributes.


        :param min_confidence: The min_confidence of this ProtectiveEquipmentSummarizationAttributes.
        :type min_confidence: float
        """
        if min_confidence is None:
            raise ValueError("Invalid value for `min_confidence`, must not be `None`")

        self._min_confidence = min_confidence

    @property
    def required_equipment_types(self):
        """Gets the required_equipment_types of this ProtectiveEquipmentSummarizationAttributes.


        :return: The required_equipment_types of this ProtectiveEquipmentSummarizationAttributes.
        :rtype: List
        """
        return self._required_equipment_types

    @required_equipment_types.setter
    def required_equipment_types(self, required_equipment_types):
        """Sets the required_equipment_types of this ProtectiveEquipmentSummarizationAttributes.


        :param required_equipment_types: The required_equipment_types of this ProtectiveEquipmentSummarizationAttributes.
        :type required_equipment_types: List
        """
        if required_equipment_types is None:
            raise ValueError("Invalid value for `required_equipment_types`, must not be `None`")

        self._required_equipment_types = required_equipment_types
