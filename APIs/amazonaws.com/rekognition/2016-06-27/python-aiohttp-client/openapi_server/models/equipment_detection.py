# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.equipment_detection_bounding_box import EquipmentDetectionBoundingBox
from openapi_server.models.equipment_detection_covers_body_part import EquipmentDetectionCoversBodyPart
from openapi_server.models.protective_equipment_type import ProtectiveEquipmentType
from openapi_server import util


class EquipmentDetection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: EquipmentDetectionBoundingBox=None, confidence: float=None, type: ProtectiveEquipmentType=None, covers_body_part: EquipmentDetectionCoversBodyPart=None):
        """EquipmentDetection - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this EquipmentDetection.
        :param confidence: The confidence of this EquipmentDetection.
        :param type: The type of this EquipmentDetection.
        :param covers_body_part: The covers_body_part of this EquipmentDetection.
        """
        self.openapi_types = {
            'bounding_box': EquipmentDetectionBoundingBox,
            'confidence': float,
            'type': ProtectiveEquipmentType,
            'covers_body_part': EquipmentDetectionCoversBodyPart
        }

        self.attribute_map = {
            'bounding_box': 'BoundingBox',
            'confidence': 'Confidence',
            'type': 'Type',
            'covers_body_part': 'CoversBodyPart'
        }

        self._bounding_box = bounding_box
        self._confidence = confidence
        self._type = type
        self._covers_body_part = covers_body_part

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EquipmentDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EquipmentDetection of this EquipmentDetection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this EquipmentDetection.


        :return: The bounding_box of this EquipmentDetection.
        :rtype: EquipmentDetectionBoundingBox
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this EquipmentDetection.


        :param bounding_box: The bounding_box of this EquipmentDetection.
        :type bounding_box: EquipmentDetectionBoundingBox
        """

        self._bounding_box = bounding_box

    @property
    def confidence(self):
        """Gets the confidence of this EquipmentDetection.


        :return: The confidence of this EquipmentDetection.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this EquipmentDetection.


        :param confidence: The confidence of this EquipmentDetection.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def type(self):
        """Gets the type of this EquipmentDetection.


        :return: The type of this EquipmentDetection.
        :rtype: ProtectiveEquipmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EquipmentDetection.


        :param type: The type of this EquipmentDetection.
        :type type: ProtectiveEquipmentType
        """

        self._type = type

    @property
    def covers_body_part(self):
        """Gets the covers_body_part of this EquipmentDetection.


        :return: The covers_body_part of this EquipmentDetection.
        :rtype: EquipmentDetectionCoversBodyPart
        """
        return self._covers_body_part

    @covers_body_part.setter
    def covers_body_part(self, covers_body_part):
        """Sets the covers_body_part of this EquipmentDetection.


        :param covers_body_part: The covers_body_part of this EquipmentDetection.
        :type covers_body_part: EquipmentDetectionCoversBodyPart
        """

        self._covers_body_part = covers_body_part
