# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compare_faces_request_source_image import CompareFacesRequestSourceImage
from openapi_server.models.detect_moderation_labels_request_human_loop_config import DetectModerationLabelsRequestHumanLoopConfig
from openapi_server import util


class DetectModerationLabelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image: CompareFacesRequestSourceImage=None, min_confidence: float=None, human_loop_config: DetectModerationLabelsRequestHumanLoopConfig=None):
        """DetectModerationLabelsRequest - a model defined in OpenAPI

        :param image: The image of this DetectModerationLabelsRequest.
        :param min_confidence: The min_confidence of this DetectModerationLabelsRequest.
        :param human_loop_config: The human_loop_config of this DetectModerationLabelsRequest.
        """
        self.openapi_types = {
            'image': CompareFacesRequestSourceImage,
            'min_confidence': float,
            'human_loop_config': DetectModerationLabelsRequestHumanLoopConfig
        }

        self.attribute_map = {
            'image': 'Image',
            'min_confidence': 'MinConfidence',
            'human_loop_config': 'HumanLoopConfig'
        }

        self._image = image
        self._min_confidence = min_confidence
        self._human_loop_config = human_loop_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectModerationLabelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectModerationLabelsRequest of this DetectModerationLabelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self):
        """Gets the image of this DetectModerationLabelsRequest.


        :return: The image of this DetectModerationLabelsRequest.
        :rtype: CompareFacesRequestSourceImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DetectModerationLabelsRequest.


        :param image: The image of this DetectModerationLabelsRequest.
        :type image: CompareFacesRequestSourceImage
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def min_confidence(self):
        """Gets the min_confidence of this DetectModerationLabelsRequest.


        :return: The min_confidence of this DetectModerationLabelsRequest.
        :rtype: float
        """
        return self._min_confidence

    @min_confidence.setter
    def min_confidence(self, min_confidence):
        """Sets the min_confidence of this DetectModerationLabelsRequest.


        :param min_confidence: The min_confidence of this DetectModerationLabelsRequest.
        :type min_confidence: float
        """

        self._min_confidence = min_confidence

    @property
    def human_loop_config(self):
        """Gets the human_loop_config of this DetectModerationLabelsRequest.


        :return: The human_loop_config of this DetectModerationLabelsRequest.
        :rtype: DetectModerationLabelsRequestHumanLoopConfig
        """
        return self._human_loop_config

    @human_loop_config.setter
    def human_loop_config(self, human_loop_config):
        """Sets the human_loop_config of this DetectModerationLabelsRequest.


        :param human_loop_config: The human_loop_config of this DetectModerationLabelsRequest.
        :type human_loop_config: DetectModerationLabelsRequestHumanLoopConfig
        """

        self._human_loop_config = human_loop_config
