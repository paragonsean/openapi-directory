# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label_detection_aggregate_by import LabelDetectionAggregateBy
from openapi_server.models.label_detection_sort_by import LabelDetectionSortBy
from openapi_server import util


class GetLabelDetectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, max_results: int=None, next_token: str=None, sort_by: LabelDetectionSortBy=None, aggregate_by: LabelDetectionAggregateBy=None):
        """GetLabelDetectionRequest - a model defined in OpenAPI

        :param job_id: The job_id of this GetLabelDetectionRequest.
        :param max_results: The max_results of this GetLabelDetectionRequest.
        :param next_token: The next_token of this GetLabelDetectionRequest.
        :param sort_by: The sort_by of this GetLabelDetectionRequest.
        :param aggregate_by: The aggregate_by of this GetLabelDetectionRequest.
        """
        self.openapi_types = {
            'job_id': str,
            'max_results': int,
            'next_token': str,
            'sort_by': LabelDetectionSortBy,
            'aggregate_by': LabelDetectionAggregateBy
        }

        self.attribute_map = {
            'job_id': 'JobId',
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'sort_by': 'SortBy',
            'aggregate_by': 'AggregateBy'
        }

        self._job_id = job_id
        self._max_results = max_results
        self._next_token = next_token
        self._sort_by = sort_by
        self._aggregate_by = aggregate_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLabelDetectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetLabelDetectionRequest of this GetLabelDetectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this GetLabelDetectionRequest.


        :return: The job_id of this GetLabelDetectionRequest.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GetLabelDetectionRequest.


        :param job_id: The job_id of this GetLabelDetectionRequest.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def max_results(self):
        """Gets the max_results of this GetLabelDetectionRequest.


        :return: The max_results of this GetLabelDetectionRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetLabelDetectionRequest.


        :param max_results: The max_results of this GetLabelDetectionRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetLabelDetectionRequest.


        :return: The next_token of this GetLabelDetectionRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetLabelDetectionRequest.


        :param next_token: The next_token of this GetLabelDetectionRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def sort_by(self):
        """Gets the sort_by of this GetLabelDetectionRequest.


        :return: The sort_by of this GetLabelDetectionRequest.
        :rtype: LabelDetectionSortBy
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this GetLabelDetectionRequest.


        :param sort_by: The sort_by of this GetLabelDetectionRequest.
        :type sort_by: LabelDetectionSortBy
        """

        self._sort_by = sort_by

    @property
    def aggregate_by(self):
        """Gets the aggregate_by of this GetLabelDetectionRequest.


        :return: The aggregate_by of this GetLabelDetectionRequest.
        :rtype: LabelDetectionAggregateBy
        """
        return self._aggregate_by

    @aggregate_by.setter
    def aggregate_by(self, aggregate_by):
        """Sets the aggregate_by of this GetLabelDetectionRequest.


        :param aggregate_by: The aggregate_by of this GetLabelDetectionRequest.
        :type aggregate_by: LabelDetectionAggregateBy
        """

        self._aggregate_by = aggregate_by
