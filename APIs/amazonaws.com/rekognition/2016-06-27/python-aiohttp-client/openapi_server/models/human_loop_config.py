# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.human_loop_config_data_attributes import HumanLoopConfigDataAttributes
from openapi_server import util


class HumanLoopConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, human_loop_name: str=None, flow_definition_arn: str=None, data_attributes: HumanLoopConfigDataAttributes=None):
        """HumanLoopConfig - a model defined in OpenAPI

        :param human_loop_name: The human_loop_name of this HumanLoopConfig.
        :param flow_definition_arn: The flow_definition_arn of this HumanLoopConfig.
        :param data_attributes: The data_attributes of this HumanLoopConfig.
        """
        self.openapi_types = {
            'human_loop_name': str,
            'flow_definition_arn': str,
            'data_attributes': HumanLoopConfigDataAttributes
        }

        self.attribute_map = {
            'human_loop_name': 'HumanLoopName',
            'flow_definition_arn': 'FlowDefinitionArn',
            'data_attributes': 'DataAttributes'
        }

        self._human_loop_name = human_loop_name
        self._flow_definition_arn = flow_definition_arn
        self._data_attributes = data_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HumanLoopConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HumanLoopConfig of this HumanLoopConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def human_loop_name(self):
        """Gets the human_loop_name of this HumanLoopConfig.


        :return: The human_loop_name of this HumanLoopConfig.
        :rtype: str
        """
        return self._human_loop_name

    @human_loop_name.setter
    def human_loop_name(self, human_loop_name):
        """Sets the human_loop_name of this HumanLoopConfig.


        :param human_loop_name: The human_loop_name of this HumanLoopConfig.
        :type human_loop_name: str
        """
        if human_loop_name is None:
            raise ValueError("Invalid value for `human_loop_name`, must not be `None`")

        self._human_loop_name = human_loop_name

    @property
    def flow_definition_arn(self):
        """Gets the flow_definition_arn of this HumanLoopConfig.


        :return: The flow_definition_arn of this HumanLoopConfig.
        :rtype: str
        """
        return self._flow_definition_arn

    @flow_definition_arn.setter
    def flow_definition_arn(self, flow_definition_arn):
        """Sets the flow_definition_arn of this HumanLoopConfig.


        :param flow_definition_arn: The flow_definition_arn of this HumanLoopConfig.
        :type flow_definition_arn: str
        """
        if flow_definition_arn is None:
            raise ValueError("Invalid value for `flow_definition_arn`, must not be `None`")

        self._flow_definition_arn = flow_definition_arn

    @property
    def data_attributes(self):
        """Gets the data_attributes of this HumanLoopConfig.


        :return: The data_attributes of this HumanLoopConfig.
        :rtype: HumanLoopConfigDataAttributes
        """
        return self._data_attributes

    @data_attributes.setter
    def data_attributes(self, data_attributes):
        """Sets the data_attributes of this HumanLoopConfig.


        :param data_attributes: The data_attributes of this HumanLoopConfig.
        :type data_attributes: HumanLoopConfigDataAttributes
        """

        self._data_attributes = data_attributes
