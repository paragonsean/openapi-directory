# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geometry_bounding_box import GeometryBoundingBox
from openapi_server import util


class TextDetectionGeometry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: GeometryBoundingBox=None, polygon: List=None):
        """TextDetectionGeometry - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this TextDetectionGeometry.
        :param polygon: The polygon of this TextDetectionGeometry.
        """
        self.openapi_types = {
            'bounding_box': GeometryBoundingBox,
            'polygon': List
        }

        self.attribute_map = {
            'bounding_box': 'BoundingBox',
            'polygon': 'Polygon'
        }

        self._bounding_box = bounding_box
        self._polygon = polygon

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextDetectionGeometry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextDetection_Geometry of this TextDetectionGeometry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this TextDetectionGeometry.


        :return: The bounding_box of this TextDetectionGeometry.
        :rtype: GeometryBoundingBox
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this TextDetectionGeometry.


        :param bounding_box: The bounding_box of this TextDetectionGeometry.
        :type bounding_box: GeometryBoundingBox
        """

        self._bounding_box = bounding_box

    @property
    def polygon(self):
        """Gets the polygon of this TextDetectionGeometry.


        :return: The polygon of this TextDetectionGeometry.
        :rtype: List
        """
        return self._polygon

    @polygon.setter
    def polygon(self, polygon):
        """Sets the polygon of this TextDetectionGeometry.


        :param polygon: The polygon of this TextDetectionGeometry.
        :type polygon: List
        """

        self._polygon = polygon
