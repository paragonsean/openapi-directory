# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compare_faces_request_source_image import CompareFacesRequestSourceImage
from openapi_server.models.compare_faces_request_target_image import CompareFacesRequestTargetImage
from openapi_server.models.quality_filter import QualityFilter
from openapi_server import util


class CompareFacesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_image: CompareFacesRequestSourceImage=None, target_image: CompareFacesRequestTargetImage=None, similarity_threshold: float=None, quality_filter: QualityFilter=None):
        """CompareFacesRequest - a model defined in OpenAPI

        :param source_image: The source_image of this CompareFacesRequest.
        :param target_image: The target_image of this CompareFacesRequest.
        :param similarity_threshold: The similarity_threshold of this CompareFacesRequest.
        :param quality_filter: The quality_filter of this CompareFacesRequest.
        """
        self.openapi_types = {
            'source_image': CompareFacesRequestSourceImage,
            'target_image': CompareFacesRequestTargetImage,
            'similarity_threshold': float,
            'quality_filter': QualityFilter
        }

        self.attribute_map = {
            'source_image': 'SourceImage',
            'target_image': 'TargetImage',
            'similarity_threshold': 'SimilarityThreshold',
            'quality_filter': 'QualityFilter'
        }

        self._source_image = source_image
        self._target_image = target_image
        self._similarity_threshold = similarity_threshold
        self._quality_filter = quality_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompareFacesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompareFacesRequest of this CompareFacesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_image(self):
        """Gets the source_image of this CompareFacesRequest.


        :return: The source_image of this CompareFacesRequest.
        :rtype: CompareFacesRequestSourceImage
        """
        return self._source_image

    @source_image.setter
    def source_image(self, source_image):
        """Sets the source_image of this CompareFacesRequest.


        :param source_image: The source_image of this CompareFacesRequest.
        :type source_image: CompareFacesRequestSourceImage
        """
        if source_image is None:
            raise ValueError("Invalid value for `source_image`, must not be `None`")

        self._source_image = source_image

    @property
    def target_image(self):
        """Gets the target_image of this CompareFacesRequest.


        :return: The target_image of this CompareFacesRequest.
        :rtype: CompareFacesRequestTargetImage
        """
        return self._target_image

    @target_image.setter
    def target_image(self, target_image):
        """Sets the target_image of this CompareFacesRequest.


        :param target_image: The target_image of this CompareFacesRequest.
        :type target_image: CompareFacesRequestTargetImage
        """
        if target_image is None:
            raise ValueError("Invalid value for `target_image`, must not be `None`")

        self._target_image = target_image

    @property
    def similarity_threshold(self):
        """Gets the similarity_threshold of this CompareFacesRequest.


        :return: The similarity_threshold of this CompareFacesRequest.
        :rtype: float
        """
        return self._similarity_threshold

    @similarity_threshold.setter
    def similarity_threshold(self, similarity_threshold):
        """Sets the similarity_threshold of this CompareFacesRequest.


        :param similarity_threshold: The similarity_threshold of this CompareFacesRequest.
        :type similarity_threshold: float
        """

        self._similarity_threshold = similarity_threshold

    @property
    def quality_filter(self):
        """Gets the quality_filter of this CompareFacesRequest.


        :return: The quality_filter of this CompareFacesRequest.
        :rtype: QualityFilter
        """
        return self._quality_filter

    @quality_filter.setter
    def quality_filter(self, quality_filter):
        """Sets the quality_filter of this CompareFacesRequest.


        :param quality_filter: The quality_filter of this CompareFacesRequest.
        :type quality_filter: QualityFilter
        """

        self._quality_filter = quality_filter
