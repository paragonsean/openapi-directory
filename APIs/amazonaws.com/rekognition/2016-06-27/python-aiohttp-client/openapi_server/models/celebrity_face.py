# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compared_face_bounding_box import ComparedFaceBoundingBox
from openapi_server.models.compared_face_pose import ComparedFacePose
from openapi_server.models.compared_face_quality import ComparedFaceQuality
from openapi_server.models.compared_face_smile import ComparedFaceSmile
from openapi_server import util


class CelebrityFace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: ComparedFaceBoundingBox=None, confidence: float=None, landmarks: List=None, pose: ComparedFacePose=None, quality: ComparedFaceQuality=None, emotions: List=None, smile: ComparedFaceSmile=None):
        """CelebrityFace - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this CelebrityFace.
        :param confidence: The confidence of this CelebrityFace.
        :param landmarks: The landmarks of this CelebrityFace.
        :param pose: The pose of this CelebrityFace.
        :param quality: The quality of this CelebrityFace.
        :param emotions: The emotions of this CelebrityFace.
        :param smile: The smile of this CelebrityFace.
        """
        self.openapi_types = {
            'bounding_box': ComparedFaceBoundingBox,
            'confidence': float,
            'landmarks': List,
            'pose': ComparedFacePose,
            'quality': ComparedFaceQuality,
            'emotions': List,
            'smile': ComparedFaceSmile
        }

        self.attribute_map = {
            'bounding_box': 'BoundingBox',
            'confidence': 'Confidence',
            'landmarks': 'Landmarks',
            'pose': 'Pose',
            'quality': 'Quality',
            'emotions': 'Emotions',
            'smile': 'Smile'
        }

        self._bounding_box = bounding_box
        self._confidence = confidence
        self._landmarks = landmarks
        self._pose = pose
        self._quality = quality
        self._emotions = emotions
        self._smile = smile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CelebrityFace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Celebrity_Face of this CelebrityFace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this CelebrityFace.


        :return: The bounding_box of this CelebrityFace.
        :rtype: ComparedFaceBoundingBox
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this CelebrityFace.


        :param bounding_box: The bounding_box of this CelebrityFace.
        :type bounding_box: ComparedFaceBoundingBox
        """

        self._bounding_box = bounding_box

    @property
    def confidence(self):
        """Gets the confidence of this CelebrityFace.


        :return: The confidence of this CelebrityFace.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this CelebrityFace.


        :param confidence: The confidence of this CelebrityFace.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def landmarks(self):
        """Gets the landmarks of this CelebrityFace.


        :return: The landmarks of this CelebrityFace.
        :rtype: List
        """
        return self._landmarks

    @landmarks.setter
    def landmarks(self, landmarks):
        """Sets the landmarks of this CelebrityFace.


        :param landmarks: The landmarks of this CelebrityFace.
        :type landmarks: List
        """

        self._landmarks = landmarks

    @property
    def pose(self):
        """Gets the pose of this CelebrityFace.


        :return: The pose of this CelebrityFace.
        :rtype: ComparedFacePose
        """
        return self._pose

    @pose.setter
    def pose(self, pose):
        """Sets the pose of this CelebrityFace.


        :param pose: The pose of this CelebrityFace.
        :type pose: ComparedFacePose
        """

        self._pose = pose

    @property
    def quality(self):
        """Gets the quality of this CelebrityFace.


        :return: The quality of this CelebrityFace.
        :rtype: ComparedFaceQuality
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this CelebrityFace.


        :param quality: The quality of this CelebrityFace.
        :type quality: ComparedFaceQuality
        """

        self._quality = quality

    @property
    def emotions(self):
        """Gets the emotions of this CelebrityFace.


        :return: The emotions of this CelebrityFace.
        :rtype: List
        """
        return self._emotions

    @emotions.setter
    def emotions(self, emotions):
        """Sets the emotions of this CelebrityFace.


        :param emotions: The emotions of this CelebrityFace.
        :type emotions: List
        """

        self._emotions = emotions

    @property
    def smile(self):
        """Gets the smile of this CelebrityFace.


        :return: The smile of this CelebrityFace.
        :rtype: ComparedFaceSmile
        """
        return self._smile

    @smile.setter
    def smile(self, smile):
        """Sets the smile of this CelebrityFace.


        :param smile: The smile of this CelebrityFace.
        :type smile: ComparedFaceSmile
        """

        self._smile = smile
