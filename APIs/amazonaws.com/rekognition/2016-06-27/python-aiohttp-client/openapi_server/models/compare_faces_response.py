# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compare_faces_response_source_image_face import CompareFacesResponseSourceImageFace
from openapi_server.models.orientation_correction import OrientationCorrection
from openapi_server import util


class CompareFacesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_image_face: CompareFacesResponseSourceImageFace=None, face_matches: List=None, unmatched_faces: List=None, source_image_orientation_correction: OrientationCorrection=None, target_image_orientation_correction: OrientationCorrection=None):
        """CompareFacesResponse - a model defined in OpenAPI

        :param source_image_face: The source_image_face of this CompareFacesResponse.
        :param face_matches: The face_matches of this CompareFacesResponse.
        :param unmatched_faces: The unmatched_faces of this CompareFacesResponse.
        :param source_image_orientation_correction: The source_image_orientation_correction of this CompareFacesResponse.
        :param target_image_orientation_correction: The target_image_orientation_correction of this CompareFacesResponse.
        """
        self.openapi_types = {
            'source_image_face': CompareFacesResponseSourceImageFace,
            'face_matches': List,
            'unmatched_faces': List,
            'source_image_orientation_correction': OrientationCorrection,
            'target_image_orientation_correction': OrientationCorrection
        }

        self.attribute_map = {
            'source_image_face': 'SourceImageFace',
            'face_matches': 'FaceMatches',
            'unmatched_faces': 'UnmatchedFaces',
            'source_image_orientation_correction': 'SourceImageOrientationCorrection',
            'target_image_orientation_correction': 'TargetImageOrientationCorrection'
        }

        self._source_image_face = source_image_face
        self._face_matches = face_matches
        self._unmatched_faces = unmatched_faces
        self._source_image_orientation_correction = source_image_orientation_correction
        self._target_image_orientation_correction = target_image_orientation_correction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompareFacesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompareFacesResponse of this CompareFacesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_image_face(self):
        """Gets the source_image_face of this CompareFacesResponse.


        :return: The source_image_face of this CompareFacesResponse.
        :rtype: CompareFacesResponseSourceImageFace
        """
        return self._source_image_face

    @source_image_face.setter
    def source_image_face(self, source_image_face):
        """Sets the source_image_face of this CompareFacesResponse.


        :param source_image_face: The source_image_face of this CompareFacesResponse.
        :type source_image_face: CompareFacesResponseSourceImageFace
        """

        self._source_image_face = source_image_face

    @property
    def face_matches(self):
        """Gets the face_matches of this CompareFacesResponse.


        :return: The face_matches of this CompareFacesResponse.
        :rtype: List
        """
        return self._face_matches

    @face_matches.setter
    def face_matches(self, face_matches):
        """Sets the face_matches of this CompareFacesResponse.


        :param face_matches: The face_matches of this CompareFacesResponse.
        :type face_matches: List
        """

        self._face_matches = face_matches

    @property
    def unmatched_faces(self):
        """Gets the unmatched_faces of this CompareFacesResponse.


        :return: The unmatched_faces of this CompareFacesResponse.
        :rtype: List
        """
        return self._unmatched_faces

    @unmatched_faces.setter
    def unmatched_faces(self, unmatched_faces):
        """Sets the unmatched_faces of this CompareFacesResponse.


        :param unmatched_faces: The unmatched_faces of this CompareFacesResponse.
        :type unmatched_faces: List
        """

        self._unmatched_faces = unmatched_faces

    @property
    def source_image_orientation_correction(self):
        """Gets the source_image_orientation_correction of this CompareFacesResponse.


        :return: The source_image_orientation_correction of this CompareFacesResponse.
        :rtype: OrientationCorrection
        """
        return self._source_image_orientation_correction

    @source_image_orientation_correction.setter
    def source_image_orientation_correction(self, source_image_orientation_correction):
        """Sets the source_image_orientation_correction of this CompareFacesResponse.


        :param source_image_orientation_correction: The source_image_orientation_correction of this CompareFacesResponse.
        :type source_image_orientation_correction: OrientationCorrection
        """

        self._source_image_orientation_correction = source_image_orientation_correction

    @property
    def target_image_orientation_correction(self):
        """Gets the target_image_orientation_correction of this CompareFacesResponse.


        :return: The target_image_orientation_correction of this CompareFacesResponse.
        :rtype: OrientationCorrection
        """
        return self._target_image_orientation_correction

    @target_image_orientation_correction.setter
    def target_image_orientation_correction(self, target_image_orientation_correction):
        """Sets the target_image_orientation_correction of this CompareFacesResponse.


        :param target_image_orientation_correction: The target_image_orientation_correction of this CompareFacesResponse.
        :type target_image_orientation_correction: OrientationCorrection
        """

        self._target_image_orientation_correction = target_image_orientation_correction
