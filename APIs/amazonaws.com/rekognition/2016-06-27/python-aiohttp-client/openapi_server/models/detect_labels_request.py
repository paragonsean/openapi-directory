# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detect_labels_request_image import DetectLabelsRequestImage
from openapi_server.models.detect_labels_request_settings import DetectLabelsRequestSettings
from openapi_server import util


class DetectLabelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image: DetectLabelsRequestImage=None, max_labels: int=None, min_confidence: float=None, features: List=None, settings: DetectLabelsRequestSettings=None):
        """DetectLabelsRequest - a model defined in OpenAPI

        :param image: The image of this DetectLabelsRequest.
        :param max_labels: The max_labels of this DetectLabelsRequest.
        :param min_confidence: The min_confidence of this DetectLabelsRequest.
        :param features: The features of this DetectLabelsRequest.
        :param settings: The settings of this DetectLabelsRequest.
        """
        self.openapi_types = {
            'image': DetectLabelsRequestImage,
            'max_labels': int,
            'min_confidence': float,
            'features': List,
            'settings': DetectLabelsRequestSettings
        }

        self.attribute_map = {
            'image': 'Image',
            'max_labels': 'MaxLabels',
            'min_confidence': 'MinConfidence',
            'features': 'Features',
            'settings': 'Settings'
        }

        self._image = image
        self._max_labels = max_labels
        self._min_confidence = min_confidence
        self._features = features
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectLabelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectLabelsRequest of this DetectLabelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self):
        """Gets the image of this DetectLabelsRequest.


        :return: The image of this DetectLabelsRequest.
        :rtype: DetectLabelsRequestImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DetectLabelsRequest.


        :param image: The image of this DetectLabelsRequest.
        :type image: DetectLabelsRequestImage
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def max_labels(self):
        """Gets the max_labels of this DetectLabelsRequest.


        :return: The max_labels of this DetectLabelsRequest.
        :rtype: int
        """
        return self._max_labels

    @max_labels.setter
    def max_labels(self, max_labels):
        """Sets the max_labels of this DetectLabelsRequest.


        :param max_labels: The max_labels of this DetectLabelsRequest.
        :type max_labels: int
        """

        self._max_labels = max_labels

    @property
    def min_confidence(self):
        """Gets the min_confidence of this DetectLabelsRequest.


        :return: The min_confidence of this DetectLabelsRequest.
        :rtype: float
        """
        return self._min_confidence

    @min_confidence.setter
    def min_confidence(self, min_confidence):
        """Sets the min_confidence of this DetectLabelsRequest.


        :param min_confidence: The min_confidence of this DetectLabelsRequest.
        :type min_confidence: float
        """

        self._min_confidence = min_confidence

    @property
    def features(self):
        """Gets the features of this DetectLabelsRequest.


        :return: The features of this DetectLabelsRequest.
        :rtype: List
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this DetectLabelsRequest.


        :param features: The features of this DetectLabelsRequest.
        :type features: List
        """

        self._features = features

    @property
    def settings(self):
        """Gets the settings of this DetectLabelsRequest.


        :return: The settings of this DetectLabelsRequest.
        :rtype: DetectLabelsRequestSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DetectLabelsRequest.


        :param settings: The settings of this DetectLabelsRequest.
        :type settings: DetectLabelsRequestSettings
        """

        self._settings = settings
