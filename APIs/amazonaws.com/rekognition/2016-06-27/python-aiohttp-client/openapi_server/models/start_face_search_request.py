# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_face_search_request_notification_channel import StartFaceSearchRequestNotificationChannel
from openapi_server.models.start_face_search_request_video import StartFaceSearchRequestVideo
from openapi_server import util


class StartFaceSearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, video: StartFaceSearchRequestVideo=None, client_request_token: str=None, face_match_threshold: float=None, collection_id: str=None, notification_channel: StartFaceSearchRequestNotificationChannel=None, job_tag: str=None):
        """StartFaceSearchRequest - a model defined in OpenAPI

        :param video: The video of this StartFaceSearchRequest.
        :param client_request_token: The client_request_token of this StartFaceSearchRequest.
        :param face_match_threshold: The face_match_threshold of this StartFaceSearchRequest.
        :param collection_id: The collection_id of this StartFaceSearchRequest.
        :param notification_channel: The notification_channel of this StartFaceSearchRequest.
        :param job_tag: The job_tag of this StartFaceSearchRequest.
        """
        self.openapi_types = {
            'video': StartFaceSearchRequestVideo,
            'client_request_token': str,
            'face_match_threshold': float,
            'collection_id': str,
            'notification_channel': StartFaceSearchRequestNotificationChannel,
            'job_tag': str
        }

        self.attribute_map = {
            'video': 'Video',
            'client_request_token': 'ClientRequestToken',
            'face_match_threshold': 'FaceMatchThreshold',
            'collection_id': 'CollectionId',
            'notification_channel': 'NotificationChannel',
            'job_tag': 'JobTag'
        }

        self._video = video
        self._client_request_token = client_request_token
        self._face_match_threshold = face_match_threshold
        self._collection_id = collection_id
        self._notification_channel = notification_channel
        self._job_tag = job_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartFaceSearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartFaceSearchRequest of this StartFaceSearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def video(self):
        """Gets the video of this StartFaceSearchRequest.


        :return: The video of this StartFaceSearchRequest.
        :rtype: StartFaceSearchRequestVideo
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this StartFaceSearchRequest.


        :param video: The video of this StartFaceSearchRequest.
        :type video: StartFaceSearchRequestVideo
        """
        if video is None:
            raise ValueError("Invalid value for `video`, must not be `None`")

        self._video = video

    @property
    def client_request_token(self):
        """Gets the client_request_token of this StartFaceSearchRequest.


        :return: The client_request_token of this StartFaceSearchRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this StartFaceSearchRequest.


        :param client_request_token: The client_request_token of this StartFaceSearchRequest.
        :type client_request_token: str
        """

        self._client_request_token = client_request_token

    @property
    def face_match_threshold(self):
        """Gets the face_match_threshold of this StartFaceSearchRequest.


        :return: The face_match_threshold of this StartFaceSearchRequest.
        :rtype: float
        """
        return self._face_match_threshold

    @face_match_threshold.setter
    def face_match_threshold(self, face_match_threshold):
        """Sets the face_match_threshold of this StartFaceSearchRequest.


        :param face_match_threshold: The face_match_threshold of this StartFaceSearchRequest.
        :type face_match_threshold: float
        """

        self._face_match_threshold = face_match_threshold

    @property
    def collection_id(self):
        """Gets the collection_id of this StartFaceSearchRequest.


        :return: The collection_id of this StartFaceSearchRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this StartFaceSearchRequest.


        :param collection_id: The collection_id of this StartFaceSearchRequest.
        :type collection_id: str
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")

        self._collection_id = collection_id

    @property
    def notification_channel(self):
        """Gets the notification_channel of this StartFaceSearchRequest.


        :return: The notification_channel of this StartFaceSearchRequest.
        :rtype: StartFaceSearchRequestNotificationChannel
        """
        return self._notification_channel

    @notification_channel.setter
    def notification_channel(self, notification_channel):
        """Sets the notification_channel of this StartFaceSearchRequest.


        :param notification_channel: The notification_channel of this StartFaceSearchRequest.
        :type notification_channel: StartFaceSearchRequestNotificationChannel
        """

        self._notification_channel = notification_channel

    @property
    def job_tag(self):
        """Gets the job_tag of this StartFaceSearchRequest.


        :return: The job_tag of this StartFaceSearchRequest.
        :rtype: str
        """
        return self._job_tag

    @job_tag.setter
    def job_tag(self, job_tag):
        """Sets the job_tag of this StartFaceSearchRequest.


        :param job_tag: The job_tag of this StartFaceSearchRequest.
        :type job_tag: str
        """

        self._job_tag = job_tag
