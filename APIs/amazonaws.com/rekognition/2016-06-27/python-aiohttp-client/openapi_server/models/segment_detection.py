# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_detection_shot_segment import SegmentDetectionShotSegment
from openapi_server.models.segment_detection_technical_cue_segment import SegmentDetectionTechnicalCueSegment
from openapi_server.models.segment_type import SegmentType
from openapi_server import util


class SegmentDetection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: SegmentType=None, start_timestamp_millis: int=None, end_timestamp_millis: int=None, duration_millis: int=None, start_timecode_smpte: str=None, end_timecode_smpte: str=None, duration_smpte: str=None, technical_cue_segment: SegmentDetectionTechnicalCueSegment=None, shot_segment: SegmentDetectionShotSegment=None, start_frame_number: int=None, end_frame_number: int=None, duration_frames: int=None):
        """SegmentDetection - a model defined in OpenAPI

        :param type: The type of this SegmentDetection.
        :param start_timestamp_millis: The start_timestamp_millis of this SegmentDetection.
        :param end_timestamp_millis: The end_timestamp_millis of this SegmentDetection.
        :param duration_millis: The duration_millis of this SegmentDetection.
        :param start_timecode_smpte: The start_timecode_smpte of this SegmentDetection.
        :param end_timecode_smpte: The end_timecode_smpte of this SegmentDetection.
        :param duration_smpte: The duration_smpte of this SegmentDetection.
        :param technical_cue_segment: The technical_cue_segment of this SegmentDetection.
        :param shot_segment: The shot_segment of this SegmentDetection.
        :param start_frame_number: The start_frame_number of this SegmentDetection.
        :param end_frame_number: The end_frame_number of this SegmentDetection.
        :param duration_frames: The duration_frames of this SegmentDetection.
        """
        self.openapi_types = {
            'type': SegmentType,
            'start_timestamp_millis': int,
            'end_timestamp_millis': int,
            'duration_millis': int,
            'start_timecode_smpte': str,
            'end_timecode_smpte': str,
            'duration_smpte': str,
            'technical_cue_segment': SegmentDetectionTechnicalCueSegment,
            'shot_segment': SegmentDetectionShotSegment,
            'start_frame_number': int,
            'end_frame_number': int,
            'duration_frames': int
        }

        self.attribute_map = {
            'type': 'Type',
            'start_timestamp_millis': 'StartTimestampMillis',
            'end_timestamp_millis': 'EndTimestampMillis',
            'duration_millis': 'DurationMillis',
            'start_timecode_smpte': 'StartTimecodeSMPTE',
            'end_timecode_smpte': 'EndTimecodeSMPTE',
            'duration_smpte': 'DurationSMPTE',
            'technical_cue_segment': 'TechnicalCueSegment',
            'shot_segment': 'ShotSegment',
            'start_frame_number': 'StartFrameNumber',
            'end_frame_number': 'EndFrameNumber',
            'duration_frames': 'DurationFrames'
        }

        self._type = type
        self._start_timestamp_millis = start_timestamp_millis
        self._end_timestamp_millis = end_timestamp_millis
        self._duration_millis = duration_millis
        self._start_timecode_smpte = start_timecode_smpte
        self._end_timecode_smpte = end_timecode_smpte
        self._duration_smpte = duration_smpte
        self._technical_cue_segment = technical_cue_segment
        self._shot_segment = shot_segment
        self._start_frame_number = start_frame_number
        self._end_frame_number = end_frame_number
        self._duration_frames = duration_frames

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentDetection of this SegmentDetection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this SegmentDetection.


        :return: The type of this SegmentDetection.
        :rtype: SegmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SegmentDetection.


        :param type: The type of this SegmentDetection.
        :type type: SegmentType
        """

        self._type = type

    @property
    def start_timestamp_millis(self):
        """Gets the start_timestamp_millis of this SegmentDetection.


        :return: The start_timestamp_millis of this SegmentDetection.
        :rtype: int
        """
        return self._start_timestamp_millis

    @start_timestamp_millis.setter
    def start_timestamp_millis(self, start_timestamp_millis):
        """Sets the start_timestamp_millis of this SegmentDetection.


        :param start_timestamp_millis: The start_timestamp_millis of this SegmentDetection.
        :type start_timestamp_millis: int
        """

        self._start_timestamp_millis = start_timestamp_millis

    @property
    def end_timestamp_millis(self):
        """Gets the end_timestamp_millis of this SegmentDetection.


        :return: The end_timestamp_millis of this SegmentDetection.
        :rtype: int
        """
        return self._end_timestamp_millis

    @end_timestamp_millis.setter
    def end_timestamp_millis(self, end_timestamp_millis):
        """Sets the end_timestamp_millis of this SegmentDetection.


        :param end_timestamp_millis: The end_timestamp_millis of this SegmentDetection.
        :type end_timestamp_millis: int
        """

        self._end_timestamp_millis = end_timestamp_millis

    @property
    def duration_millis(self):
        """Gets the duration_millis of this SegmentDetection.


        :return: The duration_millis of this SegmentDetection.
        :rtype: int
        """
        return self._duration_millis

    @duration_millis.setter
    def duration_millis(self, duration_millis):
        """Sets the duration_millis of this SegmentDetection.


        :param duration_millis: The duration_millis of this SegmentDetection.
        :type duration_millis: int
        """

        self._duration_millis = duration_millis

    @property
    def start_timecode_smpte(self):
        """Gets the start_timecode_smpte of this SegmentDetection.


        :return: The start_timecode_smpte of this SegmentDetection.
        :rtype: str
        """
        return self._start_timecode_smpte

    @start_timecode_smpte.setter
    def start_timecode_smpte(self, start_timecode_smpte):
        """Sets the start_timecode_smpte of this SegmentDetection.


        :param start_timecode_smpte: The start_timecode_smpte of this SegmentDetection.
        :type start_timecode_smpte: str
        """

        self._start_timecode_smpte = start_timecode_smpte

    @property
    def end_timecode_smpte(self):
        """Gets the end_timecode_smpte of this SegmentDetection.


        :return: The end_timecode_smpte of this SegmentDetection.
        :rtype: str
        """
        return self._end_timecode_smpte

    @end_timecode_smpte.setter
    def end_timecode_smpte(self, end_timecode_smpte):
        """Sets the end_timecode_smpte of this SegmentDetection.


        :param end_timecode_smpte: The end_timecode_smpte of this SegmentDetection.
        :type end_timecode_smpte: str
        """

        self._end_timecode_smpte = end_timecode_smpte

    @property
    def duration_smpte(self):
        """Gets the duration_smpte of this SegmentDetection.


        :return: The duration_smpte of this SegmentDetection.
        :rtype: str
        """
        return self._duration_smpte

    @duration_smpte.setter
    def duration_smpte(self, duration_smpte):
        """Sets the duration_smpte of this SegmentDetection.


        :param duration_smpte: The duration_smpte of this SegmentDetection.
        :type duration_smpte: str
        """

        self._duration_smpte = duration_smpte

    @property
    def technical_cue_segment(self):
        """Gets the technical_cue_segment of this SegmentDetection.


        :return: The technical_cue_segment of this SegmentDetection.
        :rtype: SegmentDetectionTechnicalCueSegment
        """
        return self._technical_cue_segment

    @technical_cue_segment.setter
    def technical_cue_segment(self, technical_cue_segment):
        """Sets the technical_cue_segment of this SegmentDetection.


        :param technical_cue_segment: The technical_cue_segment of this SegmentDetection.
        :type technical_cue_segment: SegmentDetectionTechnicalCueSegment
        """

        self._technical_cue_segment = technical_cue_segment

    @property
    def shot_segment(self):
        """Gets the shot_segment of this SegmentDetection.


        :return: The shot_segment of this SegmentDetection.
        :rtype: SegmentDetectionShotSegment
        """
        return self._shot_segment

    @shot_segment.setter
    def shot_segment(self, shot_segment):
        """Sets the shot_segment of this SegmentDetection.


        :param shot_segment: The shot_segment of this SegmentDetection.
        :type shot_segment: SegmentDetectionShotSegment
        """

        self._shot_segment = shot_segment

    @property
    def start_frame_number(self):
        """Gets the start_frame_number of this SegmentDetection.


        :return: The start_frame_number of this SegmentDetection.
        :rtype: int
        """
        return self._start_frame_number

    @start_frame_number.setter
    def start_frame_number(self, start_frame_number):
        """Sets the start_frame_number of this SegmentDetection.


        :param start_frame_number: The start_frame_number of this SegmentDetection.
        :type start_frame_number: int
        """

        self._start_frame_number = start_frame_number

    @property
    def end_frame_number(self):
        """Gets the end_frame_number of this SegmentDetection.


        :return: The end_frame_number of this SegmentDetection.
        :rtype: int
        """
        return self._end_frame_number

    @end_frame_number.setter
    def end_frame_number(self, end_frame_number):
        """Sets the end_frame_number of this SegmentDetection.


        :param end_frame_number: The end_frame_number of this SegmentDetection.
        :type end_frame_number: int
        """

        self._end_frame_number = end_frame_number

    @property
    def duration_frames(self):
        """Gets the duration_frames of this SegmentDetection.


        :return: The duration_frames of this SegmentDetection.
        :rtype: int
        """
        return self._duration_frames

    @duration_frames.setter
    def duration_frames(self, duration_frames):
        """Sets the duration_frames of this SegmentDetection.


        :param duration_frames: The duration_frames of this SegmentDetection.
        :type duration_frames: int
        """

        self._duration_frames = duration_frames
