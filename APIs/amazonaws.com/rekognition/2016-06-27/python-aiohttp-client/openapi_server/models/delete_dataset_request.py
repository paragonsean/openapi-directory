# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteDatasetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_arn: str=None):
        """DeleteDatasetRequest - a model defined in OpenAPI

        :param dataset_arn: The dataset_arn of this DeleteDatasetRequest.
        """
        self.openapi_types = {
            'dataset_arn': str
        }

        self.attribute_map = {
            'dataset_arn': 'DatasetArn'
        }

        self._dataset_arn = dataset_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteDatasetRequest of this DeleteDatasetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_arn(self):
        """Gets the dataset_arn of this DeleteDatasetRequest.


        :return: The dataset_arn of this DeleteDatasetRequest.
        :rtype: str
        """
        return self._dataset_arn

    @dataset_arn.setter
    def dataset_arn(self, dataset_arn):
        """Sets the dataset_arn of this DeleteDatasetRequest.


        :param dataset_arn: The dataset_arn of this DeleteDatasetRequest.
        :type dataset_arn: str
        """
        if dataset_arn is None:
            raise ValueError("Invalid value for `dataset_arn`, must not be `None`")

        self._dataset_arn = dataset_arn
