# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compare_faces_request_source_image import CompareFacesRequestSourceImage
from openapi_server import util


class DetectFacesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image: CompareFacesRequestSourceImage=None, attributes: List=None):
        """DetectFacesRequest - a model defined in OpenAPI

        :param image: The image of this DetectFacesRequest.
        :param attributes: The attributes of this DetectFacesRequest.
        """
        self.openapi_types = {
            'image': CompareFacesRequestSourceImage,
            'attributes': List
        }

        self.attribute_map = {
            'image': 'Image',
            'attributes': 'Attributes'
        }

        self._image = image
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectFacesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectFacesRequest of this DetectFacesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self):
        """Gets the image of this DetectFacesRequest.


        :return: The image of this DetectFacesRequest.
        :rtype: CompareFacesRequestSourceImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DetectFacesRequest.


        :param image: The image of this DetectFacesRequest.
        :type image: CompareFacesRequestSourceImage
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def attributes(self):
        """Gets the attributes of this DetectFacesRequest.


        :return: The attributes of this DetectFacesRequest.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DetectFacesRequest.


        :param attributes: The attributes of this DetectFacesRequest.
        :type attributes: List
        """

        self._attributes = attributes
