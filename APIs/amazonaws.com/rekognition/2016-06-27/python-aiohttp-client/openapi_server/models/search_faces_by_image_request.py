# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compare_faces_request_source_image import CompareFacesRequestSourceImage
from openapi_server.models.quality_filter import QualityFilter
from openapi_server import util


class SearchFacesByImageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id: str=None, image: CompareFacesRequestSourceImage=None, max_faces: int=None, face_match_threshold: float=None, quality_filter: QualityFilter=None):
        """SearchFacesByImageRequest - a model defined in OpenAPI

        :param collection_id: The collection_id of this SearchFacesByImageRequest.
        :param image: The image of this SearchFacesByImageRequest.
        :param max_faces: The max_faces of this SearchFacesByImageRequest.
        :param face_match_threshold: The face_match_threshold of this SearchFacesByImageRequest.
        :param quality_filter: The quality_filter of this SearchFacesByImageRequest.
        """
        self.openapi_types = {
            'collection_id': str,
            'image': CompareFacesRequestSourceImage,
            'max_faces': int,
            'face_match_threshold': float,
            'quality_filter': QualityFilter
        }

        self.attribute_map = {
            'collection_id': 'CollectionId',
            'image': 'Image',
            'max_faces': 'MaxFaces',
            'face_match_threshold': 'FaceMatchThreshold',
            'quality_filter': 'QualityFilter'
        }

        self._collection_id = collection_id
        self._image = image
        self._max_faces = max_faces
        self._face_match_threshold = face_match_threshold
        self._quality_filter = quality_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchFacesByImageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchFacesByImageRequest of this SearchFacesByImageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self):
        """Gets the collection_id of this SearchFacesByImageRequest.


        :return: The collection_id of this SearchFacesByImageRequest.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this SearchFacesByImageRequest.


        :param collection_id: The collection_id of this SearchFacesByImageRequest.
        :type collection_id: str
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")

        self._collection_id = collection_id

    @property
    def image(self):
        """Gets the image of this SearchFacesByImageRequest.


        :return: The image of this SearchFacesByImageRequest.
        :rtype: CompareFacesRequestSourceImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this SearchFacesByImageRequest.


        :param image: The image of this SearchFacesByImageRequest.
        :type image: CompareFacesRequestSourceImage
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def max_faces(self):
        """Gets the max_faces of this SearchFacesByImageRequest.


        :return: The max_faces of this SearchFacesByImageRequest.
        :rtype: int
        """
        return self._max_faces

    @max_faces.setter
    def max_faces(self, max_faces):
        """Sets the max_faces of this SearchFacesByImageRequest.


        :param max_faces: The max_faces of this SearchFacesByImageRequest.
        :type max_faces: int
        """

        self._max_faces = max_faces

    @property
    def face_match_threshold(self):
        """Gets the face_match_threshold of this SearchFacesByImageRequest.


        :return: The face_match_threshold of this SearchFacesByImageRequest.
        :rtype: float
        """
        return self._face_match_threshold

    @face_match_threshold.setter
    def face_match_threshold(self, face_match_threshold):
        """Sets the face_match_threshold of this SearchFacesByImageRequest.


        :param face_match_threshold: The face_match_threshold of this SearchFacesByImageRequest.
        :type face_match_threshold: float
        """

        self._face_match_threshold = face_match_threshold

    @property
    def quality_filter(self):
        """Gets the quality_filter of this SearchFacesByImageRequest.


        :return: The quality_filter of this SearchFacesByImageRequest.
        :rtype: QualityFilter
        """
        return self._quality_filter

    @quality_filter.setter
    def quality_filter(self, quality_filter):
        """Sets the quality_filter of this SearchFacesByImageRequest.


        :param quality_filter: The quality_filter of this SearchFacesByImageRequest.
        :type quality_filter: QualityFilter
        """

        self._quality_filter = quality_filter
