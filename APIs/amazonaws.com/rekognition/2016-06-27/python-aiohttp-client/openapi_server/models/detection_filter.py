# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_confidence: float=None, min_bounding_box_height: float=None, min_bounding_box_width: float=None):
        """DetectionFilter - a model defined in OpenAPI

        :param min_confidence: The min_confidence of this DetectionFilter.
        :param min_bounding_box_height: The min_bounding_box_height of this DetectionFilter.
        :param min_bounding_box_width: The min_bounding_box_width of this DetectionFilter.
        """
        self.openapi_types = {
            'min_confidence': float,
            'min_bounding_box_height': float,
            'min_bounding_box_width': float
        }

        self.attribute_map = {
            'min_confidence': 'MinConfidence',
            'min_bounding_box_height': 'MinBoundingBoxHeight',
            'min_bounding_box_width': 'MinBoundingBoxWidth'
        }

        self._min_confidence = min_confidence
        self._min_bounding_box_height = min_bounding_box_height
        self._min_bounding_box_width = min_bounding_box_width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectionFilter of this DetectionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_confidence(self):
        """Gets the min_confidence of this DetectionFilter.


        :return: The min_confidence of this DetectionFilter.
        :rtype: float
        """
        return self._min_confidence

    @min_confidence.setter
    def min_confidence(self, min_confidence):
        """Sets the min_confidence of this DetectionFilter.


        :param min_confidence: The min_confidence of this DetectionFilter.
        :type min_confidence: float
        """

        self._min_confidence = min_confidence

    @property
    def min_bounding_box_height(self):
        """Gets the min_bounding_box_height of this DetectionFilter.


        :return: The min_bounding_box_height of this DetectionFilter.
        :rtype: float
        """
        return self._min_bounding_box_height

    @min_bounding_box_height.setter
    def min_bounding_box_height(self, min_bounding_box_height):
        """Sets the min_bounding_box_height of this DetectionFilter.


        :param min_bounding_box_height: The min_bounding_box_height of this DetectionFilter.
        :type min_bounding_box_height: float
        """

        self._min_bounding_box_height = min_bounding_box_height

    @property
    def min_bounding_box_width(self):
        """Gets the min_bounding_box_width of this DetectionFilter.


        :return: The min_bounding_box_width of this DetectionFilter.
        :rtype: float
        """
        return self._min_bounding_box_width

    @min_bounding_box_width.setter
    def min_bounding_box_width(self, min_bounding_box_width):
        """Sets the min_bounding_box_width of this DetectionFilter.


        :param min_bounding_box_width: The min_bounding_box_width of this DetectionFilter.
        :type min_bounding_box_width: float
        """

        self._min_bounding_box_width = min_bounding_box_width
