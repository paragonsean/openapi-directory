# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DistributeDatasetEntriesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, datasets: List=None):
        """DistributeDatasetEntriesRequest - a model defined in OpenAPI

        :param datasets: The datasets of this DistributeDatasetEntriesRequest.
        """
        self.openapi_types = {
            'datasets': List
        }

        self.attribute_map = {
            'datasets': 'Datasets'
        }

        self._datasets = datasets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DistributeDatasetEntriesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DistributeDatasetEntriesRequest of this DistributeDatasetEntriesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasets(self):
        """Gets the datasets of this DistributeDatasetEntriesRequest.


        :return: The datasets of this DistributeDatasetEntriesRequest.
        :rtype: List
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this DistributeDatasetEntriesRequest.


        :param datasets: The datasets of this DistributeDatasetEntriesRequest.
        :type datasets: List
        """
        if datasets is None:
            raise ValueError("Invalid value for `datasets`, must not be `None`")

        self._datasets = datasets
