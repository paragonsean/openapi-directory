# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Bucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value: str=None, count: int=None):
        """Bucket - a model defined in OpenAPI

        :param value: The value of this Bucket.
        :param count: The count of this Bucket.
        """
        self.openapi_types = {
            'value': str,
            'count': int
        }

        self.attribute_map = {
            'value': 'value',
            'count': 'count'
        }

        self._value = value
        self._count = count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bucket of this Bucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self):
        """Gets the value of this Bucket.


        :return: The value of this Bucket.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Bucket.


        :param value: The value of this Bucket.
        :type value: str
        """

        self._value = value

    @property
    def count(self):
        """Gets the count of this Bucket.


        :return: The count of this Bucket.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Bucket.


        :param count: The count of this Bucket.
        :type count: int
        """

        self._count = count
