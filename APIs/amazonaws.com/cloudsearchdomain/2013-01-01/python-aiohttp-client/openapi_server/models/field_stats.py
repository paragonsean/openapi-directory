# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min: str=None, max: str=None, count: int=None, missing: int=None, sum: float=None, sum_of_squares: float=None, mean: str=None, stddev: float=None):
        """FieldStats - a model defined in OpenAPI

        :param min: The min of this FieldStats.
        :param max: The max of this FieldStats.
        :param count: The count of this FieldStats.
        :param missing: The missing of this FieldStats.
        :param sum: The sum of this FieldStats.
        :param sum_of_squares: The sum_of_squares of this FieldStats.
        :param mean: The mean of this FieldStats.
        :param stddev: The stddev of this FieldStats.
        """
        self.openapi_types = {
            'min': str,
            'max': str,
            'count': int,
            'missing': int,
            'sum': float,
            'sum_of_squares': float,
            'mean': str,
            'stddev': float
        }

        self.attribute_map = {
            'min': 'min',
            'max': 'max',
            'count': 'count',
            'missing': 'missing',
            'sum': 'sum',
            'sum_of_squares': 'sumOfSquares',
            'mean': 'mean',
            'stddev': 'stddev'
        }

        self._min = min
        self._max = max
        self._count = count
        self._missing = missing
        self._sum = sum
        self._sum_of_squares = sum_of_squares
        self._mean = mean
        self._stddev = stddev

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldStats of this FieldStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min(self):
        """Gets the min of this FieldStats.


        :return: The min of this FieldStats.
        :rtype: str
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this FieldStats.


        :param min: The min of this FieldStats.
        :type min: str
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this FieldStats.


        :return: The max of this FieldStats.
        :rtype: str
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this FieldStats.


        :param max: The max of this FieldStats.
        :type max: str
        """

        self._max = max

    @property
    def count(self):
        """Gets the count of this FieldStats.


        :return: The count of this FieldStats.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this FieldStats.


        :param count: The count of this FieldStats.
        :type count: int
        """

        self._count = count

    @property
    def missing(self):
        """Gets the missing of this FieldStats.


        :return: The missing of this FieldStats.
        :rtype: int
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this FieldStats.


        :param missing: The missing of this FieldStats.
        :type missing: int
        """

        self._missing = missing

    @property
    def sum(self):
        """Gets the sum of this FieldStats.


        :return: The sum of this FieldStats.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this FieldStats.


        :param sum: The sum of this FieldStats.
        :type sum: float
        """

        self._sum = sum

    @property
    def sum_of_squares(self):
        """Gets the sum_of_squares of this FieldStats.


        :return: The sum_of_squares of this FieldStats.
        :rtype: float
        """
        return self._sum_of_squares

    @sum_of_squares.setter
    def sum_of_squares(self, sum_of_squares):
        """Sets the sum_of_squares of this FieldStats.


        :param sum_of_squares: The sum_of_squares of this FieldStats.
        :type sum_of_squares: float
        """

        self._sum_of_squares = sum_of_squares

    @property
    def mean(self):
        """Gets the mean of this FieldStats.


        :return: The mean of this FieldStats.
        :rtype: str
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this FieldStats.


        :param mean: The mean of this FieldStats.
        :type mean: str
        """

        self._mean = mean

    @property
    def stddev(self):
        """Gets the stddev of this FieldStats.


        :return: The stddev of this FieldStats.
        :rtype: float
        """
        return self._stddev

    @stddev.setter
    def stddev(self, stddev):
        """Sets the stddev of this FieldStats.


        :param stddev: The stddev of this FieldStats.
        :type stddev: float
        """

        self._stddev = stddev
