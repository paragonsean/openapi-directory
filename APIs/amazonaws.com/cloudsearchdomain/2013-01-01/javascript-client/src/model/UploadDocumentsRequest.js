/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadDocumentsRequest model module.
 * @module model/UploadDocumentsRequest
 * @version 2013-01-01
 */
class UploadDocumentsRequest {
    /**
     * Constructs a new <code>UploadDocumentsRequest</code>.
     * @alias module:model/UploadDocumentsRequest
     * @param documents {String} A batch of documents formatted in JSON or HTML.
     */
    constructor(documents) { 
        
        UploadDocumentsRequest.initialize(this, documents);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documents) { 
        obj['documents'] = documents;
    }

    /**
     * Constructs a <code>UploadDocumentsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadDocumentsRequest} obj Optional instance to populate.
     * @return {module:model/UploadDocumentsRequest} The populated <code>UploadDocumentsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadDocumentsRequest();

            if (data.hasOwnProperty('documents')) {
                obj['documents'] = ApiClient.convertToType(data['documents'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadDocumentsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadDocumentsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadDocumentsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['documents'] && !(typeof data['documents'] === 'string' || data['documents'] instanceof String)) {
            throw new Error("Expected the field `documents` to be a primitive type in the JSON string but got " + data['documents']);
        }

        return true;
    }


}

UploadDocumentsRequest.RequiredProperties = ["documents"];

/**
 * A batch of documents formatted in JSON or HTML.
 * @member {String} documents
 */
UploadDocumentsRequest.prototype['documents'] = undefined;






export default UploadDocumentsRequest;

