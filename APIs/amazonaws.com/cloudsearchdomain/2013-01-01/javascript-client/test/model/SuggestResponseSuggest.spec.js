/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudSearchDomain);
  }
}(this, function(expect, AmazonCloudSearchDomain) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudSearchDomain.SuggestResponseSuggest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SuggestResponseSuggest', function() {
    it('should create an instance of SuggestResponseSuggest', function() {
      // uncomment below and update the code to test SuggestResponseSuggest
      //var instance = new AmazonCloudSearchDomain.SuggestResponseSuggest();
      //expect(instance).to.be.a(AmazonCloudSearchDomain.SuggestResponseSuggest);
    });

    it('should have the property query (base name: "query")', function() {
      // uncomment below and update the code to test the property query
      //var instance = new AmazonCloudSearchDomain.SuggestResponseSuggest();
      //expect(instance).to.be();
    });

    it('should have the property found (base name: "found")', function() {
      // uncomment below and update the code to test the property found
      //var instance = new AmazonCloudSearchDomain.SuggestResponseSuggest();
      //expect(instance).to.be();
    });

    it('should have the property suggestions (base name: "suggestions")', function() {
      // uncomment below and update the code to test the property suggestions
      //var instance = new AmazonCloudSearchDomain.SuggestResponseSuggest();
      //expect(instance).to.be();
    });

  });

}));
