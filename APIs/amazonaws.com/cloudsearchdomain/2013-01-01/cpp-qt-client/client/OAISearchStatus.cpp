/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchStatus::OAISearchStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchStatus::OAISearchStatus() {
    this->initializeModel();
}

OAISearchStatus::~OAISearchStatus() {}

void OAISearchStatus::initializeModel() {

    m_timems_isSet = false;
    m_timems_isValid = false;

    m_rid_isSet = false;
    m_rid_isValid = false;
}

void OAISearchStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchStatus::fromJsonObject(QJsonObject json) {

    m_timems_isValid = ::OpenAPI::fromJsonValue(m_timems, json[QString("timems")]);
    m_timems_isSet = !json[QString("timems")].isNull() && m_timems_isValid;

    m_rid_isValid = ::OpenAPI::fromJsonValue(m_rid, json[QString("rid")]);
    m_rid_isSet = !json[QString("rid")].isNull() && m_rid_isValid;
}

QString OAISearchStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_timems_isSet) {
        obj.insert(QString("timems"), ::OpenAPI::toJsonValue(m_timems));
    }
    if (m_rid_isSet) {
        obj.insert(QString("rid"), ::OpenAPI::toJsonValue(m_rid));
    }
    return obj;
}

qint32 OAISearchStatus::getTimems() const {
    return m_timems;
}
void OAISearchStatus::setTimems(const qint32 &timems) {
    m_timems = timems;
    m_timems_isSet = true;
}

bool OAISearchStatus::is_timems_Set() const{
    return m_timems_isSet;
}

bool OAISearchStatus::is_timems_Valid() const{
    return m_timems_isValid;
}

QString OAISearchStatus::getRid() const {
    return m_rid;
}
void OAISearchStatus::setRid(const QString &rid) {
    m_rid = rid;
    m_rid_isSet = true;
}

bool OAISearchStatus::is_rid_Set() const{
    return m_rid_isSet;
}

bool OAISearchStatus::is_rid_Valid() const{
    return m_rid_isValid;
}

bool OAISearchStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timems_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
