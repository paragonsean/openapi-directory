/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISuggestionMatch.h
 *
 * An autocomplete suggestion that matches the query string specified in a &lt;code&gt;SuggestRequest&lt;/code&gt;. 
 */

#ifndef OAISuggestionMatch_H
#define OAISuggestionMatch_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISuggestionMatch : public OAIObject {
public:
    OAISuggestionMatch();
    OAISuggestionMatch(QString json);
    ~OAISuggestionMatch() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSuggestion() const;
    void setSuggestion(const QString &suggestion);
    bool is_suggestion_Set() const;
    bool is_suggestion_Valid() const;

    qint32 getScore() const;
    void setScore(const qint32 &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_suggestion;
    bool m_suggestion_isSet;
    bool m_suggestion_isValid;

    qint32 m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISuggestionMatch)

#endif // OAISuggestionMatch_H
