/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResponse::OAISearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResponse::OAISearchResponse() {
    this->initializeModel();
}

OAISearchResponse::~OAISearchResponse() {}

void OAISearchResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_hits_isSet = false;
    m_hits_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAISearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_hits_isValid = ::OpenAPI::fromJsonValue(m_hits, json[QString("hits")]);
    m_hits_isSet = !json[QString("hits")].isNull() && m_hits_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAISearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_hits.isSet()) {
        obj.insert(QString("hits"), ::OpenAPI::toJsonValue(m_hits));
    }
    if (m_facets.isSet()) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

OAISearchResponse_status OAISearchResponse::getStatus() const {
    return m_status;
}
void OAISearchResponse::setStatus(const OAISearchResponse_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISearchResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISearchResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAISearchResponse_hits OAISearchResponse::getHits() const {
    return m_hits;
}
void OAISearchResponse::setHits(const OAISearchResponse_hits &hits) {
    m_hits = hits;
    m_hits_isSet = true;
}

bool OAISearchResponse::is_hits_Set() const{
    return m_hits_isSet;
}

bool OAISearchResponse::is_hits_Valid() const{
    return m_hits_isValid;
}

QMap OAISearchResponse::getFacets() const {
    return m_facets;
}
void OAISearchResponse::setFacets(const QMap &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAISearchResponse::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAISearchResponse::is_facets_Valid() const{
    return m_facets_isValid;
}

QMap OAISearchResponse::getStats() const {
    return m_stats;
}
void OAISearchResponse::setStats(const QMap &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAISearchResponse::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAISearchResponse::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAISearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
