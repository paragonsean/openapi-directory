/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchResponse.h
 *
 * The result of a &lt;code&gt;Search&lt;/code&gt; request. Contains the documents that match the specified search criteria and any requested fields, highlights, and facet information.
 */

#ifndef OAISearchResponse_H
#define OAISearchResponse_H

#include <QJsonObject>

#include "OAISearchResponse_hits.h"
#include "OAISearchResponse_status.h"
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISearchResponse_status;
class OAISearchResponse_hits;

class OAISearchResponse : public OAIObject {
public:
    OAISearchResponse();
    OAISearchResponse(QString json);
    ~OAISearchResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISearchResponse_status getStatus() const;
    void setStatus(const OAISearchResponse_status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAISearchResponse_hits getHits() const;
    void setHits(const OAISearchResponse_hits &hits);
    bool is_hits_Set() const;
    bool is_hits_Valid() const;

    QMap getFacets() const;
    void setFacets(const QMap &facets);
    bool is_facets_Set() const;
    bool is_facets_Valid() const;

    QMap getStats() const;
    void setStats(const QMap &stats);
    bool is_stats_Set() const;
    bool is_stats_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISearchResponse_status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAISearchResponse_hits m_hits;
    bool m_hits_isSet;
    bool m_hits_isValid;

    QMap m_facets;
    bool m_facets_isSet;
    bool m_facets_isValid;

    QMap m_stats;
    bool m_stats_isSet;
    bool m_stats_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchResponse)

#endif // OAISearchResponse_H
