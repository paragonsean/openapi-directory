/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestResponse::OAISuggestResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestResponse::OAISuggestResponse() {
    this->initializeModel();
}

OAISuggestResponse::~OAISuggestResponse() {}

void OAISuggestResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_suggest_isSet = false;
    m_suggest_isValid = false;
}

void OAISuggestResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_suggest_isValid = ::OpenAPI::fromJsonValue(m_suggest, json[QString("suggest")]);
    m_suggest_isSet = !json[QString("suggest")].isNull() && m_suggest_isValid;
}

QString OAISuggestResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_suggest.isSet()) {
        obj.insert(QString("suggest"), ::OpenAPI::toJsonValue(m_suggest));
    }
    return obj;
}

OAISuggestResponse_status OAISuggestResponse::getStatus() const {
    return m_status;
}
void OAISuggestResponse::setStatus(const OAISuggestResponse_status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISuggestResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAISuggestResponse::is_status_Valid() const{
    return m_status_isValid;
}

OAISuggestResponse_suggest OAISuggestResponse::getSuggest() const {
    return m_suggest;
}
void OAISuggestResponse::setSuggest(const OAISuggestResponse_suggest &suggest) {
    m_suggest = suggest;
    m_suggest_isSet = true;
}

bool OAISuggestResponse::is_suggest_Set() const{
    return m_suggest_isSet;
}

bool OAISuggestResponse::is_suggest_Valid() const{
    return m_suggest_isValid;
}

bool OAISuggestResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggest.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
