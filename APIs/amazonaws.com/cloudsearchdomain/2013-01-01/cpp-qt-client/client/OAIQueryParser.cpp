/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryParser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryParser::OAIQueryParser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryParser::OAIQueryParser() {
    this->initializeModel();
}

OAIQueryParser::~OAIQueryParser() {}

void OAIQueryParser::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIQueryParser::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIQueryParser::fromJson(QString jsonString) {
    
    if ( jsonString.compare("simple", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryParser::SIMPLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("structured", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryParser::STRUCTURED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lucene", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryParser::LUCENE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dismax", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryParser::DISMAX;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIQueryParser::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIQueryParser::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIQueryParser::SIMPLE:
            val = "simple";
            break;
        case eOAIQueryParser::STRUCTURED:
            val = "structured";
            break;
        case eOAIQueryParser::LUCENE:
            val = "lucene";
            break;
        case eOAIQueryParser::DISMAX:
            val = "dismax";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIQueryParser::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIQueryParser::eOAIQueryParser OAIQueryParser::getValue() const {
    return m_value;
}

void OAIQueryParser::setValue(const OAIQueryParser::eOAIQueryParser& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIQueryParser::isSet() const {
    
    return m_value_isSet;
}

bool OAIQueryParser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
