/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHit::OAIHit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHit::OAIHit() {
    this->initializeModel();
}

OAIHit::~OAIHit() {}

void OAIHit::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_exprs_isSet = false;
    m_exprs_isValid = false;

    m_highlights_isSet = false;
    m_highlights_isValid = false;
}

void OAIHit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHit::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_exprs_isValid = ::OpenAPI::fromJsonValue(m_exprs, json[QString("exprs")]);
    m_exprs_isSet = !json[QString("exprs")].isNull() && m_exprs_isValid;

    m_highlights_isValid = ::OpenAPI::fromJsonValue(m_highlights, json[QString("highlights")]);
    m_highlights_isSet = !json[QString("highlights")].isNull() && m_highlights_isValid;
}

QString OAIHit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHit::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_fields.isSet()) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_exprs.isSet()) {
        obj.insert(QString("exprs"), ::OpenAPI::toJsonValue(m_exprs));
    }
    if (m_highlights.isSet()) {
        obj.insert(QString("highlights"), ::OpenAPI::toJsonValue(m_highlights));
    }
    return obj;
}

QString OAIHit::getId() const {
    return m_id;
}
void OAIHit::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIHit::is_id_Set() const{
    return m_id_isSet;
}

bool OAIHit::is_id_Valid() const{
    return m_id_isValid;
}

QMap OAIHit::getFields() const {
    return m_fields;
}
void OAIHit::setFields(const QMap &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIHit::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIHit::is_fields_Valid() const{
    return m_fields_isValid;
}

QMap OAIHit::getExprs() const {
    return m_exprs;
}
void OAIHit::setExprs(const QMap &exprs) {
    m_exprs = exprs;
    m_exprs_isSet = true;
}

bool OAIHit::is_exprs_Set() const{
    return m_exprs_isSet;
}

bool OAIHit::is_exprs_Valid() const{
    return m_exprs_isValid;
}

QMap OAIHit::getHighlights() const {
    return m_highlights;
}
void OAIHit::setHighlights(const QMap &highlights) {
    m_highlights = highlights;
    m_highlights_isSet = true;
}

bool OAIHit::is_highlights_Set() const{
    return m_highlights_isSet;
}

bool OAIHit::is_highlights_Valid() const{
    return m_highlights_isValid;
}

bool OAIHit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exprs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlights.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
