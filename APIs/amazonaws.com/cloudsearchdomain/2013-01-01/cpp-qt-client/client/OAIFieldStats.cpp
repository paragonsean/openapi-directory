/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFieldStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFieldStats::OAIFieldStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFieldStats::OAIFieldStats() {
    this->initializeModel();
}

OAIFieldStats::~OAIFieldStats() {}

void OAIFieldStats::initializeModel() {

    m_min_isSet = false;
    m_min_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_missing_isSet = false;
    m_missing_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_sum_of_squares_isSet = false;
    m_sum_of_squares_isValid = false;

    m_mean_isSet = false;
    m_mean_isValid = false;

    m_stddev_isSet = false;
    m_stddev_isValid = false;
}

void OAIFieldStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFieldStats::fromJsonObject(QJsonObject json) {

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_missing_isValid = ::OpenAPI::fromJsonValue(m_missing, json[QString("missing")]);
    m_missing_isSet = !json[QString("missing")].isNull() && m_missing_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;

    m_sum_of_squares_isValid = ::OpenAPI::fromJsonValue(m_sum_of_squares, json[QString("sumOfSquares")]);
    m_sum_of_squares_isSet = !json[QString("sumOfSquares")].isNull() && m_sum_of_squares_isValid;

    m_mean_isValid = ::OpenAPI::fromJsonValue(m_mean, json[QString("mean")]);
    m_mean_isSet = !json[QString("mean")].isNull() && m_mean_isValid;

    m_stddev_isValid = ::OpenAPI::fromJsonValue(m_stddev, json[QString("stddev")]);
    m_stddev_isSet = !json[QString("stddev")].isNull() && m_stddev_isValid;
}

QString OAIFieldStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFieldStats::asJsonObject() const {
    QJsonObject obj;
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_missing_isSet) {
        obj.insert(QString("missing"), ::OpenAPI::toJsonValue(m_missing));
    }
    if (m_sum_isSet) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_sum_of_squares_isSet) {
        obj.insert(QString("sumOfSquares"), ::OpenAPI::toJsonValue(m_sum_of_squares));
    }
    if (m_mean_isSet) {
        obj.insert(QString("mean"), ::OpenAPI::toJsonValue(m_mean));
    }
    if (m_stddev_isSet) {
        obj.insert(QString("stddev"), ::OpenAPI::toJsonValue(m_stddev));
    }
    return obj;
}

QString OAIFieldStats::getMin() const {
    return m_min;
}
void OAIFieldStats::setMin(const QString &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIFieldStats::is_min_Set() const{
    return m_min_isSet;
}

bool OAIFieldStats::is_min_Valid() const{
    return m_min_isValid;
}

QString OAIFieldStats::getMax() const {
    return m_max;
}
void OAIFieldStats::setMax(const QString &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIFieldStats::is_max_Set() const{
    return m_max_isSet;
}

bool OAIFieldStats::is_max_Valid() const{
    return m_max_isValid;
}

qint32 OAIFieldStats::getCount() const {
    return m_count;
}
void OAIFieldStats::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIFieldStats::is_count_Set() const{
    return m_count_isSet;
}

bool OAIFieldStats::is_count_Valid() const{
    return m_count_isValid;
}

qint32 OAIFieldStats::getMissing() const {
    return m_missing;
}
void OAIFieldStats::setMissing(const qint32 &missing) {
    m_missing = missing;
    m_missing_isSet = true;
}

bool OAIFieldStats::is_missing_Set() const{
    return m_missing_isSet;
}

bool OAIFieldStats::is_missing_Valid() const{
    return m_missing_isValid;
}

double OAIFieldStats::getSum() const {
    return m_sum;
}
void OAIFieldStats::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIFieldStats::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIFieldStats::is_sum_Valid() const{
    return m_sum_isValid;
}

double OAIFieldStats::getSumOfSquares() const {
    return m_sum_of_squares;
}
void OAIFieldStats::setSumOfSquares(const double &sum_of_squares) {
    m_sum_of_squares = sum_of_squares;
    m_sum_of_squares_isSet = true;
}

bool OAIFieldStats::is_sum_of_squares_Set() const{
    return m_sum_of_squares_isSet;
}

bool OAIFieldStats::is_sum_of_squares_Valid() const{
    return m_sum_of_squares_isValid;
}

QString OAIFieldStats::getMean() const {
    return m_mean;
}
void OAIFieldStats::setMean(const QString &mean) {
    m_mean = mean;
    m_mean_isSet = true;
}

bool OAIFieldStats::is_mean_Set() const{
    return m_mean_isSet;
}

bool OAIFieldStats::is_mean_Valid() const{
    return m_mean_isValid;
}

double OAIFieldStats::getStddev() const {
    return m_stddev;
}
void OAIFieldStats::setStddev(const double &stddev) {
    m_stddev = stddev;
    m_stddev_isSet = true;
}

bool OAIFieldStats::is_stddev_Set() const{
    return m_stddev_isSet;
}

bool OAIFieldStats::is_stddev_Valid() const{
    return m_stddev_isValid;
}

bool OAIFieldStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_of_squares_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stddev_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFieldStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
