/**
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHits::OAIHits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHits::OAIHits() {
    this->initializeModel();
}

OAIHits::~OAIHits() {}

void OAIHits::initializeModel() {

    m_found_isSet = false;
    m_found_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_cursor_isSet = false;
    m_cursor_isValid = false;

    m_hit_isSet = false;
    m_hit_isValid = false;
}

void OAIHits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHits::fromJsonObject(QJsonObject json) {

    m_found_isValid = ::OpenAPI::fromJsonValue(m_found, json[QString("found")]);
    m_found_isSet = !json[QString("found")].isNull() && m_found_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_cursor_isValid = ::OpenAPI::fromJsonValue(m_cursor, json[QString("cursor")]);
    m_cursor_isSet = !json[QString("cursor")].isNull() && m_cursor_isValid;

    m_hit_isValid = ::OpenAPI::fromJsonValue(m_hit, json[QString("hit")]);
    m_hit_isSet = !json[QString("hit")].isNull() && m_hit_isValid;
}

QString OAIHits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHits::asJsonObject() const {
    QJsonObject obj;
    if (m_found_isSet) {
        obj.insert(QString("found"), ::OpenAPI::toJsonValue(m_found));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_cursor_isSet) {
        obj.insert(QString("cursor"), ::OpenAPI::toJsonValue(m_cursor));
    }
    if (m_hit.isSet()) {
        obj.insert(QString("hit"), ::OpenAPI::toJsonValue(m_hit));
    }
    return obj;
}

qint32 OAIHits::getFound() const {
    return m_found;
}
void OAIHits::setFound(const qint32 &found) {
    m_found = found;
    m_found_isSet = true;
}

bool OAIHits::is_found_Set() const{
    return m_found_isSet;
}

bool OAIHits::is_found_Valid() const{
    return m_found_isValid;
}

qint32 OAIHits::getStart() const {
    return m_start;
}
void OAIHits::setStart(const qint32 &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIHits::is_start_Set() const{
    return m_start_isSet;
}

bool OAIHits::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIHits::getCursor() const {
    return m_cursor;
}
void OAIHits::setCursor(const QString &cursor) {
    m_cursor = cursor;
    m_cursor_isSet = true;
}

bool OAIHits::is_cursor_Set() const{
    return m_cursor_isSet;
}

bool OAIHits::is_cursor_Valid() const{
    return m_cursor_isValid;
}

QList OAIHits::getHit() const {
    return m_hit;
}
void OAIHits::setHit(const QList &hit) {
    m_hit = hit;
    m_hit_isSet = true;
}

bool OAIHits::is_hit_Set() const{
    return m_hit_isSet;
}

bool OAIHits::is_hit_Valid() const{
    return m_hit_isValid;
}

bool OAIHits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cursor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
