/*
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The statistics for a field calculated in the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:56.284232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FieldStats {
  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private String min;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private String max;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_MISSING = "missing";
  @SerializedName(SERIALIZED_NAME_MISSING)
  private Integer missing;

  public static final String SERIALIZED_NAME_SUM = "sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Double sum;

  public static final String SERIALIZED_NAME_SUM_OF_SQUARES = "sumOfSquares";
  @SerializedName(SERIALIZED_NAME_SUM_OF_SQUARES)
  private Double sumOfSquares;

  public static final String SERIALIZED_NAME_MEAN = "mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private String mean;

  public static final String SERIALIZED_NAME_STDDEV = "stddev";
  @SerializedName(SERIALIZED_NAME_STDDEV)
  private Double stddev;

  public FieldStats() {
  }

  public FieldStats min(String min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  public String getMin() {
    return min;
  }

  public void setMin(String min) {
    this.min = min;
  }


  public FieldStats max(String max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public String getMax() {
    return max;
  }

  public void setMax(String max) {
    this.max = max;
  }


  public FieldStats count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public FieldStats missing(Integer missing) {
    this.missing = missing;
    return this;
  }

  /**
   * Get missing
   * @return missing
   */
  @javax.annotation.Nullable
  public Integer getMissing() {
    return missing;
  }

  public void setMissing(Integer missing) {
    this.missing = missing;
  }


  public FieldStats sum(Double sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Get sum
   * @return sum
   */
  @javax.annotation.Nullable
  public Double getSum() {
    return sum;
  }

  public void setSum(Double sum) {
    this.sum = sum;
  }


  public FieldStats sumOfSquares(Double sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
    return this;
  }

  /**
   * Get sumOfSquares
   * @return sumOfSquares
   */
  @javax.annotation.Nullable
  public Double getSumOfSquares() {
    return sumOfSquares;
  }

  public void setSumOfSquares(Double sumOfSquares) {
    this.sumOfSquares = sumOfSquares;
  }


  public FieldStats mean(String mean) {
    this.mean = mean;
    return this;
  }

  /**
   * Get mean
   * @return mean
   */
  @javax.annotation.Nullable
  public String getMean() {
    return mean;
  }

  public void setMean(String mean) {
    this.mean = mean;
  }


  public FieldStats stddev(Double stddev) {
    this.stddev = stddev;
    return this;
  }

  /**
   * Get stddev
   * @return stddev
   */
  @javax.annotation.Nullable
  public Double getStddev() {
    return stddev;
  }

  public void setStddev(Double stddev) {
    this.stddev = stddev;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldStats fieldStats = (FieldStats) o;
    return Objects.equals(this.min, fieldStats.min) &&
        Objects.equals(this.max, fieldStats.max) &&
        Objects.equals(this.count, fieldStats.count) &&
        Objects.equals(this.missing, fieldStats.missing) &&
        Objects.equals(this.sum, fieldStats.sum) &&
        Objects.equals(this.sumOfSquares, fieldStats.sumOfSquares) &&
        Objects.equals(this.mean, fieldStats.mean) &&
        Objects.equals(this.stddev, fieldStats.stddev);
  }

  @Override
  public int hashCode() {
    return Objects.hash(min, max, count, missing, sum, sumOfSquares, mean, stddev);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldStats {\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    missing: ").append(toIndentedString(missing)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    sumOfSquares: ").append(toIndentedString(sumOfSquares)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    stddev: ").append(toIndentedString(stddev)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("min");
    openapiFields.add("max");
    openapiFields.add("count");
    openapiFields.add("missing");
    openapiFields.add("sum");
    openapiFields.add("sumOfSquares");
    openapiFields.add("mean");
    openapiFields.add("stddev");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FieldStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldStats is not found in the empty JSON string", FieldStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FieldStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FieldStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `min`
      if (jsonObj.get("min") != null && !jsonObj.get("min").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("min"));
      }
      // validate the optional field `max`
      if (jsonObj.get("max") != null && !jsonObj.get("max").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("max"));
      }
      // validate the optional field `count`
      if (jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("count"));
      }
      // validate the optional field `missing`
      if (jsonObj.get("missing") != null && !jsonObj.get("missing").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("missing"));
      }
      // validate the optional field `sum`
      if (jsonObj.get("sum") != null && !jsonObj.get("sum").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("sum"));
      }
      // validate the optional field `sumOfSquares`
      if (jsonObj.get("sumOfSquares") != null && !jsonObj.get("sumOfSquares").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("sumOfSquares"));
      }
      // validate the optional field `mean`
      if (jsonObj.get("mean") != null && !jsonObj.get("mean").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("mean"));
      }
      // validate the optional field `stddev`
      if (jsonObj.get("stddev") != null && !jsonObj.get("stddev").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("stddev"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldStats.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldStats>() {
           @Override
           public void write(JsonWriter out, FieldStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldStats
   * @throws IOException if the JSON string is invalid with respect to FieldStats
   */
  public static FieldStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldStats.class);
  }

  /**
   * Convert an instance of FieldStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

