/*
 * Amazon CloudSearch Domain
 * <p>You use the AmazonCloudSearch2013 API to upload documents to a search domain and search those documents. </p> <p>The endpoints for submitting <code>UploadDocuments</code>, <code>Search</code>, and <code>Suggest</code> requests are domain-specific. To get the endpoints for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. The domain endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. You submit suggest requests to the search endpoint. </p> <p>For more information, see the <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide\">Amazon CloudSearch Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2013-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SuggestResponseStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:56.284232-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuggestResponseStatus {
  public static final String SERIALIZED_NAME_TIMEMS = "timems";
  @SerializedName(SERIALIZED_NAME_TIMEMS)
  private Integer timems;

  public static final String SERIALIZED_NAME_RID = "rid";
  @SerializedName(SERIALIZED_NAME_RID)
  private String rid;

  public SuggestResponseStatus() {
  }

  public SuggestResponseStatus timems(Integer timems) {
    this.timems = timems;
    return this;
  }

  /**
   * Get timems
   * @return timems
   */
  @javax.annotation.Nullable
  public Integer getTimems() {
    return timems;
  }

  public void setTimems(Integer timems) {
    this.timems = timems;
  }


  public SuggestResponseStatus rid(String rid) {
    this.rid = rid;
    return this;
  }

  /**
   * Get rid
   * @return rid
   */
  @javax.annotation.Nullable
  public String getRid() {
    return rid;
  }

  public void setRid(String rid) {
    this.rid = rid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestResponseStatus suggestResponseStatus = (SuggestResponseStatus) o;
    return Objects.equals(this.timems, suggestResponseStatus.timems) &&
        Objects.equals(this.rid, suggestResponseStatus.rid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timems, rid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestResponseStatus {\n");
    sb.append("    timems: ").append(toIndentedString(timems)).append("\n");
    sb.append("    rid: ").append(toIndentedString(rid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timems");
    openapiFields.add("rid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuggestResponseStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuggestResponseStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestResponseStatus is not found in the empty JSON string", SuggestResponseStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuggestResponseStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuggestResponseStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `timems`
      if (jsonObj.get("timems") != null && !jsonObj.get("timems").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("timems"));
      }
      // validate the optional field `rid`
      if (jsonObj.get("rid") != null && !jsonObj.get("rid").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rid"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestResponseStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestResponseStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestResponseStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestResponseStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestResponseStatus>() {
           @Override
           public void write(JsonWriter out, SuggestResponseStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestResponseStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuggestResponseStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuggestResponseStatus
   * @throws IOException if the JSON string is invalid with respect to SuggestResponseStatus
   */
  public static SuggestResponseStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestResponseStatus.class);
  }

  /**
   * Convert an instance of SuggestResponseStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

