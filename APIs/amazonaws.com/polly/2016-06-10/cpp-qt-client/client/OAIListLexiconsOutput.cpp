/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLexiconsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLexiconsOutput::OAIListLexiconsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLexiconsOutput::OAIListLexiconsOutput() {
    this->initializeModel();
}

OAIListLexiconsOutput::~OAIListLexiconsOutput() {}

void OAIListLexiconsOutput::initializeModel() {

    m_lexicons_isSet = false;
    m_lexicons_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListLexiconsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLexiconsOutput::fromJsonObject(QJsonObject json) {

    m_lexicons_isValid = ::OpenAPI::fromJsonValue(m_lexicons, json[QString("Lexicons")]);
    m_lexicons_isSet = !json[QString("Lexicons")].isNull() && m_lexicons_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListLexiconsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLexiconsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_lexicons.isSet()) {
        obj.insert(QString("Lexicons"), ::OpenAPI::toJsonValue(m_lexicons));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListLexiconsOutput::getLexicons() const {
    return m_lexicons;
}
void OAIListLexiconsOutput::setLexicons(const QList &lexicons) {
    m_lexicons = lexicons;
    m_lexicons_isSet = true;
}

bool OAIListLexiconsOutput::is_lexicons_Set() const{
    return m_lexicons_isSet;
}

bool OAIListLexiconsOutput::is_lexicons_Valid() const{
    return m_lexicons_isValid;
}

QString OAIListLexiconsOutput::getNextToken() const {
    return m_next_token;
}
void OAIListLexiconsOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListLexiconsOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListLexiconsOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListLexiconsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lexicons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLexiconsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
