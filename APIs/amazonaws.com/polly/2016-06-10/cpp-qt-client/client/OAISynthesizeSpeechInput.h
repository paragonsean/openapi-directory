/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISynthesizeSpeechInput.h
 *
 * 
 */

#ifndef OAISynthesizeSpeechInput_H
#define OAISynthesizeSpeechInput_H

#include <QJsonObject>

#include "OAIEngine.h"
#include "OAILanguageCode.h"
#include "OAIOutputFormat.h"
#include "OAITextType.h"
#include "OAIVoiceId.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISynthesizeSpeechInput : public OAIObject {
public:
    OAISynthesizeSpeechInput();
    OAISynthesizeSpeechInput(QString json);
    ~OAISynthesizeSpeechInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEngine getEngine() const;
    void setEngine(const OAIEngine &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    OAILanguageCode getLanguageCode() const;
    void setLanguageCode(const OAILanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    QList getLexiconNames() const;
    void setLexiconNames(const QList &lexicon_names);
    bool is_lexicon_names_Set() const;
    bool is_lexicon_names_Valid() const;

    OAIOutputFormat getOutputFormat() const;
    void setOutputFormat(const OAIOutputFormat &output_format);
    bool is_output_format_Set() const;
    bool is_output_format_Valid() const;

    QString getSampleRate() const;
    void setSampleRate(const QString &sample_rate);
    bool is_sample_rate_Set() const;
    bool is_sample_rate_Valid() const;

    QList getSpeechMarkTypes() const;
    void setSpeechMarkTypes(const QList &speech_mark_types);
    bool is_speech_mark_types_Set() const;
    bool is_speech_mark_types_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    OAITextType getTextType() const;
    void setTextType(const OAITextType &text_type);
    bool is_text_type_Set() const;
    bool is_text_type_Valid() const;

    OAIVoiceId getVoiceId() const;
    void setVoiceId(const OAIVoiceId &voice_id);
    bool is_voice_id_Set() const;
    bool is_voice_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEngine m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    OAILanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    QList m_lexicon_names;
    bool m_lexicon_names_isSet;
    bool m_lexicon_names_isValid;

    OAIOutputFormat m_output_format;
    bool m_output_format_isSet;
    bool m_output_format_isValid;

    QString m_sample_rate;
    bool m_sample_rate_isSet;
    bool m_sample_rate_isValid;

    QList m_speech_mark_types;
    bool m_speech_mark_types_isSet;
    bool m_speech_mark_types_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    OAITextType m_text_type;
    bool m_text_type_isSet;
    bool m_text_type_isValid;

    OAIVoiceId m_voice_id;
    bool m_voice_id_isSet;
    bool m_voice_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISynthesizeSpeechInput)

#endif // OAISynthesizeSpeechInput_H
