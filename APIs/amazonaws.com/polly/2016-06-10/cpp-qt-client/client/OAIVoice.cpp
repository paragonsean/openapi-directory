/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVoice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVoice::OAIVoice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVoice::OAIVoice() {
    this->initializeModel();
}

OAIVoice::~OAIVoice() {}

void OAIVoice::initializeModel() {

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_language_name_isSet = false;
    m_language_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_additional_language_codes_isSet = false;
    m_additional_language_codes_isValid = false;

    m_supported_engines_isSet = false;
    m_supported_engines_isValid = false;
}

void OAIVoice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVoice::fromJsonObject(QJsonObject json) {

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("Gender")]);
    m_gender_isSet = !json[QString("Gender")].isNull() && m_gender_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_language_name_isValid = ::OpenAPI::fromJsonValue(m_language_name, json[QString("LanguageName")]);
    m_language_name_isSet = !json[QString("LanguageName")].isNull() && m_language_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_additional_language_codes_isValid = ::OpenAPI::fromJsonValue(m_additional_language_codes, json[QString("AdditionalLanguageCodes")]);
    m_additional_language_codes_isSet = !json[QString("AdditionalLanguageCodes")].isNull() && m_additional_language_codes_isValid;

    m_supported_engines_isValid = ::OpenAPI::fromJsonValue(m_supported_engines, json[QString("SupportedEngines")]);
    m_supported_engines_isSet = !json[QString("SupportedEngines")].isNull() && m_supported_engines_isValid;
}

QString OAIVoice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVoice::asJsonObject() const {
    QJsonObject obj;
    if (m_gender.isSet()) {
        obj.insert(QString("Gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_id.isSet()) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_language_name_isSet) {
        obj.insert(QString("LanguageName"), ::OpenAPI::toJsonValue(m_language_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_additional_language_codes.isSet()) {
        obj.insert(QString("AdditionalLanguageCodes"), ::OpenAPI::toJsonValue(m_additional_language_codes));
    }
    if (m_supported_engines.isSet()) {
        obj.insert(QString("SupportedEngines"), ::OpenAPI::toJsonValue(m_supported_engines));
    }
    return obj;
}

OAIGender OAIVoice::getGender() const {
    return m_gender;
}
void OAIVoice::setGender(const OAIGender &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIVoice::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIVoice::is_gender_Valid() const{
    return m_gender_isValid;
}

OAIVoiceId OAIVoice::getId() const {
    return m_id;
}
void OAIVoice::setId(const OAIVoiceId &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVoice::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVoice::is_id_Valid() const{
    return m_id_isValid;
}

OAILanguageCode OAIVoice::getLanguageCode() const {
    return m_language_code;
}
void OAIVoice::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIVoice::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIVoice::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIVoice::getLanguageName() const {
    return m_language_name;
}
void OAIVoice::setLanguageName(const QString &language_name) {
    m_language_name = language_name;
    m_language_name_isSet = true;
}

bool OAIVoice::is_language_name_Set() const{
    return m_language_name_isSet;
}

bool OAIVoice::is_language_name_Valid() const{
    return m_language_name_isValid;
}

QString OAIVoice::getName() const {
    return m_name;
}
void OAIVoice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVoice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVoice::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIVoice::getAdditionalLanguageCodes() const {
    return m_additional_language_codes;
}
void OAIVoice::setAdditionalLanguageCodes(const QList &additional_language_codes) {
    m_additional_language_codes = additional_language_codes;
    m_additional_language_codes_isSet = true;
}

bool OAIVoice::is_additional_language_codes_Set() const{
    return m_additional_language_codes_isSet;
}

bool OAIVoice::is_additional_language_codes_Valid() const{
    return m_additional_language_codes_isValid;
}

QList OAIVoice::getSupportedEngines() const {
    return m_supported_engines;
}
void OAIVoice::setSupportedEngines(const QList &supported_engines) {
    m_supported_engines = supported_engines;
    m_supported_engines_isSet = true;
}

bool OAIVoice::is_supported_engines_Set() const{
    return m_supported_engines_isSet;
}

bool OAIVoice::is_supported_engines_Valid() const{
    return m_supported_engines_isValid;
}

bool OAIVoice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gender.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_language_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_engines.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVoice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
