/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSpeechSynthesisTasksOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSpeechSynthesisTasksOutput::OAIListSpeechSynthesisTasksOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSpeechSynthesisTasksOutput::OAIListSpeechSynthesisTasksOutput() {
    this->initializeModel();
}

OAIListSpeechSynthesisTasksOutput::~OAIListSpeechSynthesisTasksOutput() {}

void OAIListSpeechSynthesisTasksOutput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_synthesis_tasks_isSet = false;
    m_synthesis_tasks_isValid = false;
}

void OAIListSpeechSynthesisTasksOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSpeechSynthesisTasksOutput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_synthesis_tasks_isValid = ::OpenAPI::fromJsonValue(m_synthesis_tasks, json[QString("SynthesisTasks")]);
    m_synthesis_tasks_isSet = !json[QString("SynthesisTasks")].isNull() && m_synthesis_tasks_isValid;
}

QString OAIListSpeechSynthesisTasksOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSpeechSynthesisTasksOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_synthesis_tasks.isSet()) {
        obj.insert(QString("SynthesisTasks"), ::OpenAPI::toJsonValue(m_synthesis_tasks));
    }
    return obj;
}

QString OAIListSpeechSynthesisTasksOutput::getNextToken() const {
    return m_next_token;
}
void OAIListSpeechSynthesisTasksOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListSpeechSynthesisTasksOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListSpeechSynthesisTasksOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListSpeechSynthesisTasksOutput::getSynthesisTasks() const {
    return m_synthesis_tasks;
}
void OAIListSpeechSynthesisTasksOutput::setSynthesisTasks(const QList &synthesis_tasks) {
    m_synthesis_tasks = synthesis_tasks;
    m_synthesis_tasks_isSet = true;
}

bool OAIListSpeechSynthesisTasksOutput::is_synthesis_tasks_Set() const{
    return m_synthesis_tasks_isSet;
}

bool OAIListSpeechSynthesisTasksOutput::is_synthesis_tasks_Valid() const{
    return m_synthesis_tasks_isValid;
}

bool OAIListSpeechSynthesisTasksOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synthesis_tasks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSpeechSynthesisTasksOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
