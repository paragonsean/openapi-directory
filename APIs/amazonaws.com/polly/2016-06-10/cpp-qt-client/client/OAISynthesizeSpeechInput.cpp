/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISynthesizeSpeechInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISynthesizeSpeechInput::OAISynthesizeSpeechInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISynthesizeSpeechInput::OAISynthesizeSpeechInput() {
    this->initializeModel();
}

OAISynthesizeSpeechInput::~OAISynthesizeSpeechInput() {}

void OAISynthesizeSpeechInput::initializeModel() {

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_lexicon_names_isSet = false;
    m_lexicon_names_isValid = false;

    m_output_format_isSet = false;
    m_output_format_isValid = false;

    m_sample_rate_isSet = false;
    m_sample_rate_isValid = false;

    m_speech_mark_types_isSet = false;
    m_speech_mark_types_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_text_type_isSet = false;
    m_text_type_isValid = false;

    m_voice_id_isSet = false;
    m_voice_id_isValid = false;
}

void OAISynthesizeSpeechInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISynthesizeSpeechInput::fromJsonObject(QJsonObject json) {

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_lexicon_names_isValid = ::OpenAPI::fromJsonValue(m_lexicon_names, json[QString("LexiconNames")]);
    m_lexicon_names_isSet = !json[QString("LexiconNames")].isNull() && m_lexicon_names_isValid;

    m_output_format_isValid = ::OpenAPI::fromJsonValue(m_output_format, json[QString("OutputFormat")]);
    m_output_format_isSet = !json[QString("OutputFormat")].isNull() && m_output_format_isValid;

    m_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_sample_rate, json[QString("SampleRate")]);
    m_sample_rate_isSet = !json[QString("SampleRate")].isNull() && m_sample_rate_isValid;

    m_speech_mark_types_isValid = ::OpenAPI::fromJsonValue(m_speech_mark_types, json[QString("SpeechMarkTypes")]);
    m_speech_mark_types_isSet = !json[QString("SpeechMarkTypes")].isNull() && m_speech_mark_types_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_text_type_isValid = ::OpenAPI::fromJsonValue(m_text_type, json[QString("TextType")]);
    m_text_type_isSet = !json[QString("TextType")].isNull() && m_text_type_isValid;

    m_voice_id_isValid = ::OpenAPI::fromJsonValue(m_voice_id, json[QString("VoiceId")]);
    m_voice_id_isSet = !json[QString("VoiceId")].isNull() && m_voice_id_isValid;
}

QString OAISynthesizeSpeechInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISynthesizeSpeechInput::asJsonObject() const {
    QJsonObject obj;
    if (m_engine.isSet()) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_lexicon_names.isSet()) {
        obj.insert(QString("LexiconNames"), ::OpenAPI::toJsonValue(m_lexicon_names));
    }
    if (m_output_format.isSet()) {
        obj.insert(QString("OutputFormat"), ::OpenAPI::toJsonValue(m_output_format));
    }
    if (m_sample_rate_isSet) {
        obj.insert(QString("SampleRate"), ::OpenAPI::toJsonValue(m_sample_rate));
    }
    if (m_speech_mark_types.isSet()) {
        obj.insert(QString("SpeechMarkTypes"), ::OpenAPI::toJsonValue(m_speech_mark_types));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_text_type.isSet()) {
        obj.insert(QString("TextType"), ::OpenAPI::toJsonValue(m_text_type));
    }
    if (m_voice_id.isSet()) {
        obj.insert(QString("VoiceId"), ::OpenAPI::toJsonValue(m_voice_id));
    }
    return obj;
}

OAIEngine OAISynthesizeSpeechInput::getEngine() const {
    return m_engine;
}
void OAISynthesizeSpeechInput::setEngine(const OAIEngine &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAISynthesizeSpeechInput::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAISynthesizeSpeechInput::is_engine_Valid() const{
    return m_engine_isValid;
}

OAILanguageCode OAISynthesizeSpeechInput::getLanguageCode() const {
    return m_language_code;
}
void OAISynthesizeSpeechInput::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAISynthesizeSpeechInput::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAISynthesizeSpeechInput::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QList OAISynthesizeSpeechInput::getLexiconNames() const {
    return m_lexicon_names;
}
void OAISynthesizeSpeechInput::setLexiconNames(const QList &lexicon_names) {
    m_lexicon_names = lexicon_names;
    m_lexicon_names_isSet = true;
}

bool OAISynthesizeSpeechInput::is_lexicon_names_Set() const{
    return m_lexicon_names_isSet;
}

bool OAISynthesizeSpeechInput::is_lexicon_names_Valid() const{
    return m_lexicon_names_isValid;
}

OAIOutputFormat OAISynthesizeSpeechInput::getOutputFormat() const {
    return m_output_format;
}
void OAISynthesizeSpeechInput::setOutputFormat(const OAIOutputFormat &output_format) {
    m_output_format = output_format;
    m_output_format_isSet = true;
}

bool OAISynthesizeSpeechInput::is_output_format_Set() const{
    return m_output_format_isSet;
}

bool OAISynthesizeSpeechInput::is_output_format_Valid() const{
    return m_output_format_isValid;
}

QString OAISynthesizeSpeechInput::getSampleRate() const {
    return m_sample_rate;
}
void OAISynthesizeSpeechInput::setSampleRate(const QString &sample_rate) {
    m_sample_rate = sample_rate;
    m_sample_rate_isSet = true;
}

bool OAISynthesizeSpeechInput::is_sample_rate_Set() const{
    return m_sample_rate_isSet;
}

bool OAISynthesizeSpeechInput::is_sample_rate_Valid() const{
    return m_sample_rate_isValid;
}

QList OAISynthesizeSpeechInput::getSpeechMarkTypes() const {
    return m_speech_mark_types;
}
void OAISynthesizeSpeechInput::setSpeechMarkTypes(const QList &speech_mark_types) {
    m_speech_mark_types = speech_mark_types;
    m_speech_mark_types_isSet = true;
}

bool OAISynthesizeSpeechInput::is_speech_mark_types_Set() const{
    return m_speech_mark_types_isSet;
}

bool OAISynthesizeSpeechInput::is_speech_mark_types_Valid() const{
    return m_speech_mark_types_isValid;
}

QString OAISynthesizeSpeechInput::getText() const {
    return m_text;
}
void OAISynthesizeSpeechInput::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISynthesizeSpeechInput::is_text_Set() const{
    return m_text_isSet;
}

bool OAISynthesizeSpeechInput::is_text_Valid() const{
    return m_text_isValid;
}

OAITextType OAISynthesizeSpeechInput::getTextType() const {
    return m_text_type;
}
void OAISynthesizeSpeechInput::setTextType(const OAITextType &text_type) {
    m_text_type = text_type;
    m_text_type_isSet = true;
}

bool OAISynthesizeSpeechInput::is_text_type_Set() const{
    return m_text_type_isSet;
}

bool OAISynthesizeSpeechInput::is_text_type_Valid() const{
    return m_text_type_isValid;
}

OAIVoiceId OAISynthesizeSpeechInput::getVoiceId() const {
    return m_voice_id;
}
void OAISynthesizeSpeechInput::setVoiceId(const OAIVoiceId &voice_id) {
    m_voice_id = voice_id;
    m_voice_id_isSet = true;
}

bool OAISynthesizeSpeechInput::is_voice_id_Set() const{
    return m_voice_id_isSet;
}

bool OAISynthesizeSpeechInput::is_voice_id_Valid() const{
    return m_voice_id_isValid;
}

bool OAISynthesizeSpeechInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lexicon_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_mark_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_voice_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISynthesizeSpeechInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_format_isValid && m_text_isValid && m_voice_id_isValid && true;
}

} // namespace OpenAPI
