/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartSpeechSynthesisTaskOutput_SynthesisTask.h
 *
 * 
 */

#ifndef OAIStartSpeechSynthesisTaskOutput_SynthesisTask_H
#define OAIStartSpeechSynthesisTaskOutput_SynthesisTask_H

#include <QJsonObject>

#include "OAIEngine.h"
#include "OAILanguageCode.h"
#include "OAIOutputFormat.h"
#include "OAITaskStatus.h"
#include "OAITextType.h"
#include "OAIVoiceId.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStartSpeechSynthesisTaskOutput_SynthesisTask : public OAIObject {
public:
    OAIStartSpeechSynthesisTaskOutput_SynthesisTask();
    OAIStartSpeechSynthesisTaskOutput_SynthesisTask(QString json);
    ~OAIStartSpeechSynthesisTaskOutput_SynthesisTask() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEngine getEngine() const;
    void setEngine(const OAIEngine &engine);
    bool is_engine_Set() const;
    bool is_engine_Valid() const;

    QString getTaskId() const;
    void setTaskId(const QString &task_id);
    bool is_task_id_Set() const;
    bool is_task_id_Valid() const;

    OAITaskStatus getTaskStatus() const;
    void setTaskStatus(const OAITaskStatus &task_status);
    bool is_task_status_Set() const;
    bool is_task_status_Valid() const;

    QString getTaskStatusReason() const;
    void setTaskStatusReason(const QString &task_status_reason);
    bool is_task_status_reason_Set() const;
    bool is_task_status_reason_Valid() const;

    QString getOutputUri() const;
    void setOutputUri(const QString &output_uri);
    bool is_output_uri_Set() const;
    bool is_output_uri_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    qint32 getRequestCharacters() const;
    void setRequestCharacters(const qint32 &request_characters);
    bool is_request_characters_Set() const;
    bool is_request_characters_Valid() const;

    QString getSnsTopicArn() const;
    void setSnsTopicArn(const QString &sns_topic_arn);
    bool is_sns_topic_arn_Set() const;
    bool is_sns_topic_arn_Valid() const;

    QList getLexiconNames() const;
    void setLexiconNames(const QList &lexicon_names);
    bool is_lexicon_names_Set() const;
    bool is_lexicon_names_Valid() const;

    OAIOutputFormat getOutputFormat() const;
    void setOutputFormat(const OAIOutputFormat &output_format);
    bool is_output_format_Set() const;
    bool is_output_format_Valid() const;

    QString getSampleRate() const;
    void setSampleRate(const QString &sample_rate);
    bool is_sample_rate_Set() const;
    bool is_sample_rate_Valid() const;

    QList getSpeechMarkTypes() const;
    void setSpeechMarkTypes(const QList &speech_mark_types);
    bool is_speech_mark_types_Set() const;
    bool is_speech_mark_types_Valid() const;

    OAITextType getTextType() const;
    void setTextType(const OAITextType &text_type);
    bool is_text_type_Set() const;
    bool is_text_type_Valid() const;

    OAIVoiceId getVoiceId() const;
    void setVoiceId(const OAIVoiceId &voice_id);
    bool is_voice_id_Set() const;
    bool is_voice_id_Valid() const;

    OAILanguageCode getLanguageCode() const;
    void setLanguageCode(const OAILanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEngine m_engine;
    bool m_engine_isSet;
    bool m_engine_isValid;

    QString m_task_id;
    bool m_task_id_isSet;
    bool m_task_id_isValid;

    OAITaskStatus m_task_status;
    bool m_task_status_isSet;
    bool m_task_status_isValid;

    QString m_task_status_reason;
    bool m_task_status_reason_isSet;
    bool m_task_status_reason_isValid;

    QString m_output_uri;
    bool m_output_uri_isSet;
    bool m_output_uri_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    qint32 m_request_characters;
    bool m_request_characters_isSet;
    bool m_request_characters_isValid;

    QString m_sns_topic_arn;
    bool m_sns_topic_arn_isSet;
    bool m_sns_topic_arn_isValid;

    QList m_lexicon_names;
    bool m_lexicon_names_isSet;
    bool m_lexicon_names_isValid;

    OAIOutputFormat m_output_format;
    bool m_output_format_isSet;
    bool m_output_format_isValid;

    QString m_sample_rate;
    bool m_sample_rate_isSet;
    bool m_sample_rate_isValid;

    QList m_speech_mark_types;
    bool m_speech_mark_types_isSet;
    bool m_speech_mark_types_isValid;

    OAITextType m_text_type;
    bool m_text_type_isSet;
    bool m_text_type_isValid;

    OAIVoiceId m_voice_id;
    bool m_voice_id_isSet;
    bool m_voice_id_isValid;

    OAILanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartSpeechSynthesisTaskOutput_SynthesisTask)

#endif // OAIStartSpeechSynthesisTaskOutput_SynthesisTask_H
