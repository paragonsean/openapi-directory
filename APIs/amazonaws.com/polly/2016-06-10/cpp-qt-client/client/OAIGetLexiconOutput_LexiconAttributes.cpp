/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetLexiconOutput_LexiconAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetLexiconOutput_LexiconAttributes::OAIGetLexiconOutput_LexiconAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetLexiconOutput_LexiconAttributes::OAIGetLexiconOutput_LexiconAttributes() {
    this->initializeModel();
}

OAIGetLexiconOutput_LexiconAttributes::~OAIGetLexiconOutput_LexiconAttributes() {}

void OAIGetLexiconOutput_LexiconAttributes::initializeModel() {

    m_alphabet_isSet = false;
    m_alphabet_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_lexicon_arn_isSet = false;
    m_lexicon_arn_isValid = false;

    m_lexemes_count_isSet = false;
    m_lexemes_count_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIGetLexiconOutput_LexiconAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetLexiconOutput_LexiconAttributes::fromJsonObject(QJsonObject json) {

    m_alphabet_isValid = ::OpenAPI::fromJsonValue(m_alphabet, json[QString("Alphabet")]);
    m_alphabet_isSet = !json[QString("Alphabet")].isNull() && m_alphabet_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_lexicon_arn_isValid = ::OpenAPI::fromJsonValue(m_lexicon_arn, json[QString("LexiconArn")]);
    m_lexicon_arn_isSet = !json[QString("LexiconArn")].isNull() && m_lexicon_arn_isValid;

    m_lexemes_count_isValid = ::OpenAPI::fromJsonValue(m_lexemes_count, json[QString("LexemesCount")]);
    m_lexemes_count_isSet = !json[QString("LexemesCount")].isNull() && m_lexemes_count_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;
}

QString OAIGetLexiconOutput_LexiconAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetLexiconOutput_LexiconAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_alphabet_isSet) {
        obj.insert(QString("Alphabet"), ::OpenAPI::toJsonValue(m_alphabet));
    }
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_lexicon_arn_isSet) {
        obj.insert(QString("LexiconArn"), ::OpenAPI::toJsonValue(m_lexicon_arn));
    }
    if (m_lexemes_count_isSet) {
        obj.insert(QString("LexemesCount"), ::OpenAPI::toJsonValue(m_lexemes_count));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIGetLexiconOutput_LexiconAttributes::getAlphabet() const {
    return m_alphabet;
}
void OAIGetLexiconOutput_LexiconAttributes::setAlphabet(const QString &alphabet) {
    m_alphabet = alphabet;
    m_alphabet_isSet = true;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_alphabet_Set() const{
    return m_alphabet_isSet;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_alphabet_Valid() const{
    return m_alphabet_isValid;
}

OAILanguageCode OAIGetLexiconOutput_LexiconAttributes::getLanguageCode() const {
    return m_language_code;
}
void OAIGetLexiconOutput_LexiconAttributes::setLanguageCode(const OAILanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QDateTime OAIGetLexiconOutput_LexiconAttributes::getLastModified() const {
    return m_last_modified;
}
void OAIGetLexiconOutput_LexiconAttributes::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIGetLexiconOutput_LexiconAttributes::getLexiconArn() const {
    return m_lexicon_arn;
}
void OAIGetLexiconOutput_LexiconAttributes::setLexiconArn(const QString &lexicon_arn) {
    m_lexicon_arn = lexicon_arn;
    m_lexicon_arn_isSet = true;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_lexicon_arn_Set() const{
    return m_lexicon_arn_isSet;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_lexicon_arn_Valid() const{
    return m_lexicon_arn_isValid;
}

qint32 OAIGetLexiconOutput_LexiconAttributes::getLexemesCount() const {
    return m_lexemes_count;
}
void OAIGetLexiconOutput_LexiconAttributes::setLexemesCount(const qint32 &lexemes_count) {
    m_lexemes_count = lexemes_count;
    m_lexemes_count_isSet = true;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_lexemes_count_Set() const{
    return m_lexemes_count_isSet;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_lexemes_count_Valid() const{
    return m_lexemes_count_isValid;
}

qint32 OAIGetLexiconOutput_LexiconAttributes::getSize() const {
    return m_size;
}
void OAIGetLexiconOutput_LexiconAttributes::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGetLexiconOutput_LexiconAttributes::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIGetLexiconOutput_LexiconAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alphabet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lexicon_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lexemes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetLexiconOutput_LexiconAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
