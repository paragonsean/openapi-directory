/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DescribeVoicesOutput from '../model/DescribeVoicesOutput';
import GetLexiconOutput from '../model/GetLexiconOutput';
import GetSpeechSynthesisTaskOutput from '../model/GetSpeechSynthesisTaskOutput';
import ListLexiconsOutput from '../model/ListLexiconsOutput';
import ListSpeechSynthesisTasksOutput from '../model/ListSpeechSynthesisTasksOutput';
import PutLexiconRequest from '../model/PutLexiconRequest';
import StartSpeechSynthesisTaskOutput from '../model/StartSpeechSynthesisTaskOutput';
import StartSpeechSynthesisTaskRequest from '../model/StartSpeechSynthesisTaskRequest';
import SynthesizeSpeechOutput from '../model/SynthesizeSpeechOutput';
import SynthesizeSpeechRequest from '../model/SynthesizeSpeechRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2016-06-10
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteLexicon operation.
     * @callback module:api/DefaultApi~deleteLexiconCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified pronunciation lexicon stored in an Amazon Web Services Region. A lexicon which has been deleted is not available for speech synthesis, nor is it possible to retrieve it using either the <code>GetLexicon</code> or <code>ListLexicon</code> APIs.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing Lexicons</a>.</p>
     * @param {String} lexiconName The name of the lexicon to delete. Must be an existing lexicon in the region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLexiconCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLexicon(lexiconName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lexiconName' is set
      if (lexiconName === undefined || lexiconName === null) {
        throw new Error("Missing the required parameter 'lexiconName' when calling deleteLexicon");
      }

      let pathParams = {
        'LexiconName': lexiconName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/lexicons/{LexiconName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVoices operation.
     * @callback module:api/DefaultApi~describeVoicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVoicesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the list of voices that are available for use when requesting speech synthesis. Each voice speaks a specified language, is either male or female, and is identified by an ID, which is the ASCII version of the voice name. </p> <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you provide the voice ID for the voice you want from the list of voices returned by <code>DescribeVoices</code>.</p> <p>For example, you want your news reader application to read news in a specific language, but giving a user the option to choose the voice. Using the <code>DescribeVoices</code> operation you can provide the user with a list of available voices to select from.</p> <p> You can optionally specify a language code to filter the available voices. For example, if you specify <code>en-US</code>, the operation returns a list of all available US English voices. </p> <p>This operation requires permissions to perform the <code>polly:DescribeVoices</code> action.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [engine] Specifies the engine (<code>standard</code> or <code>neural</code>) used by Amazon Polly when processing input text for speech synthesis. 
     * @param {module:model/String} [languageCode]  The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned. 
     * @param {Boolean} [includeAdditionalLanguageCodes] Boolean value indicating whether to return any bilingual voices that use the specified language as an additional language. For instance, if you request all languages that use US English (es-US), and there is an Italian voice that speaks both Italian (it-IT) and US English, that voice will be included if you specify <code>yes</code> but not if you specify <code>no</code>.
     * @param {String} [nextToken] An opaque pagination token returned from the previous <code>DescribeVoices</code> operation. If present, this indicates where to continue the listing.
     * @param {module:api/DefaultApi~describeVoicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVoicesOutput}
     */
    describeVoices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Engine': opts['engine'],
        'LanguageCode': opts['languageCode'],
        'IncludeAdditionalLanguageCodes': opts['includeAdditionalLanguageCodes'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVoicesOutput;
      return this.apiClient.callApi(
        '/v1/voices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLexicon operation.
     * @callback module:api/DefaultApi~getLexiconCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLexiconOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the content of the specified pronunciation lexicon stored in an Amazon Web Services Region. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing Lexicons</a>.
     * @param {String} lexiconName Name of the lexicon.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLexiconCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLexiconOutput}
     */
    getLexicon(lexiconName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lexiconName' is set
      if (lexiconName === undefined || lexiconName === null) {
        throw new Error("Missing the required parameter 'lexiconName' when calling getLexicon");
      }

      let pathParams = {
        'LexiconName': lexiconName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLexiconOutput;
      return this.apiClient.callApi(
        '/v1/lexicons/{LexiconName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpeechSynthesisTask operation.
     * @callback module:api/DefaultApi~getSpeechSynthesisTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSpeechSynthesisTaskOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific SpeechSynthesisTask object based on its TaskID. This object contains information about the given speech synthesis task, including the status of the task, and a link to the S3 bucket containing the output of the task.
     * @param {String} taskId The Amazon Polly generated identifier for a speech synthesis task.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSpeechSynthesisTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSpeechSynthesisTaskOutput}
     */
    getSpeechSynthesisTask(taskId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getSpeechSynthesisTask");
      }

      let pathParams = {
        'TaskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSpeechSynthesisTaskOutput;
      return this.apiClient.callApi(
        '/v1/synthesisTasks/{TaskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLexicons operation.
     * @callback module:api/DefaultApi~listLexiconsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLexiconsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of pronunciation lexicons stored in an Amazon Web Services Region. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing Lexicons</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] An opaque pagination token returned from previous <code>ListLexicons</code> operation. If present, indicates where to continue the list of lexicons.
     * @param {module:api/DefaultApi~listLexiconsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLexiconsOutput}
     */
    listLexicons(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLexiconsOutput;
      return this.apiClient.callApi(
        '/v1/lexicons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpeechSynthesisTasks operation.
     * @callback module:api/DefaultApi~listSpeechSynthesisTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpeechSynthesisTasksOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of SpeechSynthesisTask objects ordered by their creation date. This operation can filter the tasks by their status, for example, allowing users to list only tasks that are completed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Maximum number of speech synthesis tasks returned in a List operation.
     * @param {String} [nextToken] The pagination token to use in the next request to continue the listing of speech synthesis tasks. 
     * @param {module:model/String} [status] Status of the speech synthesis tasks returned in a List operation
     * @param {module:api/DefaultApi~listSpeechSynthesisTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpeechSynthesisTasksOutput}
     */
    listSpeechSynthesisTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken'],
        'Status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSpeechSynthesisTasksOutput;
      return this.apiClient.callApi(
        '/v1/synthesisTasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putLexicon operation.
     * @callback module:api/DefaultApi~putLexiconCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stores a pronunciation lexicon in an Amazon Web Services Region. If a lexicon with the same name already exists in the region, it is overwritten by the new lexicon. Lexicon operations have eventual consistency, therefore, it might take some time before the lexicon is available to the SynthesizeSpeech operation.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing Lexicons</a>.</p>
     * @param {String} lexiconName Name of the lexicon. The name must follow the regular express format [0-9A-Za-z]{1,20}. That is, the name is a case-sensitive alphanumeric string up to 20 characters long. 
     * @param {module:model/PutLexiconRequest} putLexiconRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putLexiconCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putLexicon(lexiconName, putLexiconRequest, opts, callback) {
      opts = opts || {};
      let postBody = putLexiconRequest;
      // verify the required parameter 'lexiconName' is set
      if (lexiconName === undefined || lexiconName === null) {
        throw new Error("Missing the required parameter 'lexiconName' when calling putLexicon");
      }
      // verify the required parameter 'putLexiconRequest' is set
      if (putLexiconRequest === undefined || putLexiconRequest === null) {
        throw new Error("Missing the required parameter 'putLexiconRequest' when calling putLexicon");
      }

      let pathParams = {
        'LexiconName': lexiconName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/lexicons/{LexiconName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSpeechSynthesisTask operation.
     * @callback module:api/DefaultApi~startSpeechSynthesisTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartSpeechSynthesisTaskOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the creation of an asynchronous synthesis task, by starting a new <code>SpeechSynthesisTask</code>. This operation requires all the standard information needed for speech synthesis, plus the name of an Amazon S3 bucket for the service to store the output of the synthesis task and two optional parameters (<code>OutputS3KeyPrefix</code> and <code>SnsTopicArn</code>). Once the synthesis task is created, this operation will return a <code>SpeechSynthesisTask</code> object, which will include an identifier of this task as well as the current status. The <code>SpeechSynthesisTask</code> object is available for 72 hours after starting the asynchronous synthesis task.
     * @param {module:model/StartSpeechSynthesisTaskRequest} startSpeechSynthesisTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startSpeechSynthesisTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartSpeechSynthesisTaskOutput}
     */
    startSpeechSynthesisTask(startSpeechSynthesisTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = startSpeechSynthesisTaskRequest;
      // verify the required parameter 'startSpeechSynthesisTaskRequest' is set
      if (startSpeechSynthesisTaskRequest === undefined || startSpeechSynthesisTaskRequest === null) {
        throw new Error("Missing the required parameter 'startSpeechSynthesisTaskRequest' when calling startSpeechSynthesisTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartSpeechSynthesisTaskOutput;
      return this.apiClient.callApi(
        '/v1/synthesisTasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the synthesizeSpeech operation.
     * @callback module:api/DefaultApi~synthesizeSpeechCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynthesizeSpeechOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes. SSML input must be valid, well-formed SSML. Some alphabets might not be available with all the voices (for example, Cyrillic might not be read at all by English voices) unless phoneme mapping is used. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html\">How it Works</a>.
     * @param {module:model/SynthesizeSpeechRequest} synthesizeSpeechRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~synthesizeSpeechCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynthesizeSpeechOutput}
     */
    synthesizeSpeech(synthesizeSpeechRequest, opts, callback) {
      opts = opts || {};
      let postBody = synthesizeSpeechRequest;
      // verify the required parameter 'synthesizeSpeechRequest' is set
      if (synthesizeSpeechRequest === undefined || synthesizeSpeechRequest === null) {
        throw new Error("Missing the required parameter 'synthesizeSpeechRequest' when calling synthesizeSpeech");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SynthesizeSpeechOutput;
      return this.apiClient.callApi(
        '/v1/speech', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
