/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Engine from './Engine';
import LanguageCode from './LanguageCode';
import OutputFormat from './OutputFormat';
import SynthesisTask from './SynthesisTask';
import TaskStatus from './TaskStatus';
import TextType from './TextType';
import VoiceId from './VoiceId';

/**
 * The StartSpeechSynthesisTaskOutputSynthesisTask model module.
 * @module model/StartSpeechSynthesisTaskOutputSynthesisTask
 * @version 2016-06-10
 */
class StartSpeechSynthesisTaskOutputSynthesisTask {
    /**
     * Constructs a new <code>StartSpeechSynthesisTaskOutputSynthesisTask</code>.
     * @alias module:model/StartSpeechSynthesisTaskOutputSynthesisTask
     * @implements module:model/SynthesisTask
     */
    constructor() { 
        SynthesisTask.initialize(this);
        StartSpeechSynthesisTaskOutputSynthesisTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StartSpeechSynthesisTaskOutputSynthesisTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartSpeechSynthesisTaskOutputSynthesisTask} obj Optional instance to populate.
     * @return {module:model/StartSpeechSynthesisTaskOutputSynthesisTask} The populated <code>StartSpeechSynthesisTaskOutputSynthesisTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartSpeechSynthesisTaskOutputSynthesisTask();
            SynthesisTask.constructFromObject(data, obj);

            if (data.hasOwnProperty('Engine')) {
                obj['Engine'] = ApiClient.convertToType(data['Engine'], Engine);
            }
            if (data.hasOwnProperty('TaskId')) {
                obj['TaskId'] = ApiClient.convertToType(data['TaskId'], 'String');
            }
            if (data.hasOwnProperty('TaskStatus')) {
                obj['TaskStatus'] = ApiClient.convertToType(data['TaskStatus'], TaskStatus);
            }
            if (data.hasOwnProperty('TaskStatusReason')) {
                obj['TaskStatusReason'] = ApiClient.convertToType(data['TaskStatusReason'], 'String');
            }
            if (data.hasOwnProperty('OutputUri')) {
                obj['OutputUri'] = ApiClient.convertToType(data['OutputUri'], 'String');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('RequestCharacters')) {
                obj['RequestCharacters'] = ApiClient.convertToType(data['RequestCharacters'], 'Number');
            }
            if (data.hasOwnProperty('SnsTopicArn')) {
                obj['SnsTopicArn'] = ApiClient.convertToType(data['SnsTopicArn'], 'String');
            }
            if (data.hasOwnProperty('LexiconNames')) {
                obj['LexiconNames'] = ApiClient.convertToType(data['LexiconNames'], Array);
            }
            if (data.hasOwnProperty('OutputFormat')) {
                obj['OutputFormat'] = ApiClient.convertToType(data['OutputFormat'], OutputFormat);
            }
            if (data.hasOwnProperty('SampleRate')) {
                obj['SampleRate'] = ApiClient.convertToType(data['SampleRate'], 'String');
            }
            if (data.hasOwnProperty('SpeechMarkTypes')) {
                obj['SpeechMarkTypes'] = ApiClient.convertToType(data['SpeechMarkTypes'], Array);
            }
            if (data.hasOwnProperty('TextType')) {
                obj['TextType'] = ApiClient.convertToType(data['TextType'], TextType);
            }
            if (data.hasOwnProperty('VoiceId')) {
                obj['VoiceId'] = ApiClient.convertToType(data['VoiceId'], VoiceId);
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], LanguageCode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartSpeechSynthesisTaskOutputSynthesisTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartSpeechSynthesisTaskOutputSynthesisTask</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Engine`
        if (data['Engine']) { // data not null
          Engine.validateJSON(data['Engine']);
        }
        // validate the optional field `TaskId`
        if (data['TaskId']) { // data not null
          String.validateJSON(data['TaskId']);
        }
        // validate the optional field `TaskStatus`
        if (data['TaskStatus']) { // data not null
          TaskStatus.validateJSON(data['TaskStatus']);
        }
        // validate the optional field `TaskStatusReason`
        if (data['TaskStatusReason']) { // data not null
          String.validateJSON(data['TaskStatusReason']);
        }
        // validate the optional field `OutputUri`
        if (data['OutputUri']) { // data not null
          String.validateJSON(data['OutputUri']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `RequestCharacters`
        if (data['RequestCharacters']) { // data not null
          Number.validateJSON(data['RequestCharacters']);
        }
        // validate the optional field `SnsTopicArn`
        if (data['SnsTopicArn']) { // data not null
          String.validateJSON(data['SnsTopicArn']);
        }
        // validate the optional field `LexiconNames`
        if (data['LexiconNames']) { // data not null
          Array.validateJSON(data['LexiconNames']);
        }
        // validate the optional field `OutputFormat`
        if (data['OutputFormat']) { // data not null
          OutputFormat.validateJSON(data['OutputFormat']);
        }
        // validate the optional field `SampleRate`
        if (data['SampleRate']) { // data not null
          String.validateJSON(data['SampleRate']);
        }
        // validate the optional field `SpeechMarkTypes`
        if (data['SpeechMarkTypes']) { // data not null
          Array.validateJSON(data['SpeechMarkTypes']);
        }
        // validate the optional field `TextType`
        if (data['TextType']) { // data not null
          TextType.validateJSON(data['TextType']);
        }
        // validate the optional field `VoiceId`
        if (data['VoiceId']) { // data not null
          VoiceId.validateJSON(data['VoiceId']);
        }
        // validate the optional field `LanguageCode`
        if (data['LanguageCode']) { // data not null
          LanguageCode.validateJSON(data['LanguageCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/Engine} Engine
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['Engine'] = undefined;

/**
 * @member {String} TaskId
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['TaskId'] = undefined;

/**
 * @member {module:model/TaskStatus} TaskStatus
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['TaskStatus'] = undefined;

/**
 * @member {String} TaskStatusReason
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['TaskStatusReason'] = undefined;

/**
 * @member {String} OutputUri
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['OutputUri'] = undefined;

/**
 * @member {Date} CreationTime
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['CreationTime'] = undefined;

/**
 * @member {Number} RequestCharacters
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['RequestCharacters'] = undefined;

/**
 * @member {String} SnsTopicArn
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['SnsTopicArn'] = undefined;

/**
 * @member {Array} LexiconNames
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['LexiconNames'] = undefined;

/**
 * @member {module:model/OutputFormat} OutputFormat
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['OutputFormat'] = undefined;

/**
 * @member {String} SampleRate
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['SampleRate'] = undefined;

/**
 * @member {Array} SpeechMarkTypes
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['SpeechMarkTypes'] = undefined;

/**
 * @member {module:model/TextType} TextType
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['TextType'] = undefined;

/**
 * @member {module:model/VoiceId} VoiceId
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['VoiceId'] = undefined;

/**
 * @member {module:model/LanguageCode} LanguageCode
 */
StartSpeechSynthesisTaskOutputSynthesisTask.prototype['LanguageCode'] = undefined;


// Implement SynthesisTask interface:
/**
 * @member {module:model/Engine} Engine
 */
SynthesisTask.prototype['Engine'] = undefined;
/**
 * @member {String} TaskId
 */
SynthesisTask.prototype['TaskId'] = undefined;
/**
 * @member {module:model/TaskStatus} TaskStatus
 */
SynthesisTask.prototype['TaskStatus'] = undefined;
/**
 * @member {String} TaskStatusReason
 */
SynthesisTask.prototype['TaskStatusReason'] = undefined;
/**
 * @member {String} OutputUri
 */
SynthesisTask.prototype['OutputUri'] = undefined;
/**
 * @member {Date} CreationTime
 */
SynthesisTask.prototype['CreationTime'] = undefined;
/**
 * @member {Number} RequestCharacters
 */
SynthesisTask.prototype['RequestCharacters'] = undefined;
/**
 * @member {String} SnsTopicArn
 */
SynthesisTask.prototype['SnsTopicArn'] = undefined;
/**
 * @member {Array} LexiconNames
 */
SynthesisTask.prototype['LexiconNames'] = undefined;
/**
 * @member {module:model/OutputFormat} OutputFormat
 */
SynthesisTask.prototype['OutputFormat'] = undefined;
/**
 * @member {String} SampleRate
 */
SynthesisTask.prototype['SampleRate'] = undefined;
/**
 * @member {Array} SpeechMarkTypes
 */
SynthesisTask.prototype['SpeechMarkTypes'] = undefined;
/**
 * @member {module:model/TextType} TextType
 */
SynthesisTask.prototype['TextType'] = undefined;
/**
 * @member {module:model/VoiceId} VoiceId
 */
SynthesisTask.prototype['VoiceId'] = undefined;
/**
 * @member {module:model/LanguageCode} LanguageCode
 */
SynthesisTask.prototype['LanguageCode'] = undefined;




export default StartSpeechSynthesisTaskOutputSynthesisTask;

