/**
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SpeechMarkType from './SpeechMarkType';

/**
 * The SynthesizeSpeechRequest model module.
 * @module model/SynthesizeSpeechRequest
 * @version 2016-06-10
 */
class SynthesizeSpeechRequest {
    /**
     * Constructs a new <code>SynthesizeSpeechRequest</code>.
     * @alias module:model/SynthesizeSpeechRequest
     * @param outputFormat {module:model/SynthesizeSpeechRequest.OutputFormatEnum} <p> The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p> <p>When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format. </p>
     * @param text {String}  Input text to synthesize. If you specify <code>ssml</code> as the <code>TextType</code>, follow the SSML format for the input text. 
     * @param voiceId {module:model/SynthesizeSpeechRequest.VoiceIdEnum}  Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation. 
     */
    constructor(outputFormat, text, voiceId) { 
        
        SynthesizeSpeechRequest.initialize(this, outputFormat, text, voiceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, outputFormat, text, voiceId) { 
        obj['OutputFormat'] = outputFormat;
        obj['Text'] = text;
        obj['VoiceId'] = voiceId;
    }

    /**
     * Constructs a <code>SynthesizeSpeechRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SynthesizeSpeechRequest} obj Optional instance to populate.
     * @return {module:model/SynthesizeSpeechRequest} The populated <code>SynthesizeSpeechRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SynthesizeSpeechRequest();

            if (data.hasOwnProperty('Engine')) {
                obj['Engine'] = ApiClient.convertToType(data['Engine'], 'String');
            }
            if (data.hasOwnProperty('LanguageCode')) {
                obj['LanguageCode'] = ApiClient.convertToType(data['LanguageCode'], 'String');
            }
            if (data.hasOwnProperty('LexiconNames')) {
                obj['LexiconNames'] = ApiClient.convertToType(data['LexiconNames'], ['String']);
            }
            if (data.hasOwnProperty('OutputFormat')) {
                obj['OutputFormat'] = ApiClient.convertToType(data['OutputFormat'], 'String');
            }
            if (data.hasOwnProperty('SampleRate')) {
                obj['SampleRate'] = ApiClient.convertToType(data['SampleRate'], 'String');
            }
            if (data.hasOwnProperty('SpeechMarkTypes')) {
                obj['SpeechMarkTypes'] = ApiClient.convertToType(data['SpeechMarkTypes'], [SpeechMarkType]);
            }
            if (data.hasOwnProperty('Text')) {
                obj['Text'] = ApiClient.convertToType(data['Text'], 'String');
            }
            if (data.hasOwnProperty('TextType')) {
                obj['TextType'] = ApiClient.convertToType(data['TextType'], 'String');
            }
            if (data.hasOwnProperty('VoiceId')) {
                obj['VoiceId'] = ApiClient.convertToType(data['VoiceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SynthesizeSpeechRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SynthesizeSpeechRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SynthesizeSpeechRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Engine'] && !(typeof data['Engine'] === 'string' || data['Engine'] instanceof String)) {
            throw new Error("Expected the field `Engine` to be a primitive type in the JSON string but got " + data['Engine']);
        }
        // ensure the json data is a string
        if (data['LanguageCode'] && !(typeof data['LanguageCode'] === 'string' || data['LanguageCode'] instanceof String)) {
            throw new Error("Expected the field `LanguageCode` to be a primitive type in the JSON string but got " + data['LanguageCode']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['LexiconNames'])) {
            throw new Error("Expected the field `LexiconNames` to be an array in the JSON data but got " + data['LexiconNames']);
        }
        // ensure the json data is a string
        if (data['OutputFormat'] && !(typeof data['OutputFormat'] === 'string' || data['OutputFormat'] instanceof String)) {
            throw new Error("Expected the field `OutputFormat` to be a primitive type in the JSON string but got " + data['OutputFormat']);
        }
        // ensure the json data is a string
        if (data['SampleRate'] && !(typeof data['SampleRate'] === 'string' || data['SampleRate'] instanceof String)) {
            throw new Error("Expected the field `SampleRate` to be a primitive type in the JSON string but got " + data['SampleRate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SpeechMarkTypes'])) {
            throw new Error("Expected the field `SpeechMarkTypes` to be an array in the JSON data but got " + data['SpeechMarkTypes']);
        }
        // ensure the json data is a string
        if (data['Text'] && !(typeof data['Text'] === 'string' || data['Text'] instanceof String)) {
            throw new Error("Expected the field `Text` to be a primitive type in the JSON string but got " + data['Text']);
        }
        // ensure the json data is a string
        if (data['TextType'] && !(typeof data['TextType'] === 'string' || data['TextType'] instanceof String)) {
            throw new Error("Expected the field `TextType` to be a primitive type in the JSON string but got " + data['TextType']);
        }
        // ensure the json data is a string
        if (data['VoiceId'] && !(typeof data['VoiceId'] === 'string' || data['VoiceId'] instanceof String)) {
            throw new Error("Expected the field `VoiceId` to be a primitive type in the JSON string but got " + data['VoiceId']);
        }

        return true;
    }


}

SynthesizeSpeechRequest.RequiredProperties = ["OutputFormat", "Text", "VoiceId"];

/**
 * <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. For information on Amazon Polly voices and which voices are available in standard-only, NTTS-only, and both standard and NTTS formats, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Available Voices</a>.</p> <p> <b>NTTS-only voices</b> </p> <p>When using NTTS-only voices such as Kevin (en-US), this parameter is required and must be set to <code>neural</code>. If the engine is not specified, or is set to <code>standard</code>, this will result in an error. </p> <p>Type: String</p> <p>Valid Values: <code>standard</code> | <code>neural</code> </p> <p>Required: Yes</p> <p> <b>Standard voices</b> </p> <p>For standard voices, this is not required; the engine parameter defaults to <code>standard</code>. If the engine is not specified, or is set to <code>standard</code> and an NTTS-only voice is selected, this will result in an error. </p>
 * @member {module:model/SynthesizeSpeechRequest.EngineEnum} Engine
 */
SynthesizeSpeechRequest.prototype['Engine'] = undefined;

/**
 * <p>Optional language code for the Synthesize Speech request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>
 * @member {module:model/SynthesizeSpeechRequest.LanguageCodeEnum} LanguageCode
 */
SynthesizeSpeechRequest.prototype['LanguageCode'] = undefined;

/**
 * List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. For information about storing lexicons, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html\">PutLexicon</a>.
 * @member {Array.<String>} LexiconNames
 */
SynthesizeSpeechRequest.prototype['LexiconNames'] = undefined;

/**
 * <p> The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p> <p>When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format. </p>
 * @member {module:model/SynthesizeSpeechRequest.OutputFormatEnum} OutputFormat
 */
SynthesizeSpeechRequest.prototype['OutputFormat'] = undefined;

/**
 * <p>The audio frequency specified in Hz.</p> <p>The valid values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\". The default value for standard voices is \"22050\". The default value for neural voices is \"24000\".</p> <p>Valid values for pcm are \"8000\" and \"16000\" The default value is \"16000\". </p>
 * @member {String} SampleRate
 */
SynthesizeSpeechRequest.prototype['SampleRate'] = undefined;

/**
 * The type of speech marks returned for the input text.
 * @member {Array.<module:model/SpeechMarkType>} SpeechMarkTypes
 */
SynthesizeSpeechRequest.prototype['SpeechMarkTypes'] = undefined;

/**
 *  Input text to synthesize. If you specify <code>ssml</code> as the <code>TextType</code>, follow the SSML format for the input text. 
 * @member {String} Text
 */
SynthesizeSpeechRequest.prototype['Text'] = undefined;

/**
 *  Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/ssml.html\">Using SSML</a>.
 * @member {module:model/SynthesizeSpeechRequest.TextTypeEnum} TextType
 */
SynthesizeSpeechRequest.prototype['TextType'] = undefined;

/**
 *  Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation. 
 * @member {module:model/SynthesizeSpeechRequest.VoiceIdEnum} VoiceId
 */
SynthesizeSpeechRequest.prototype['VoiceId'] = undefined;





/**
 * Allowed values for the <code>Engine</code> property.
 * @enum {String}
 * @readonly
 */
SynthesizeSpeechRequest['EngineEnum'] = {

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard",

    /**
     * value: "neural"
     * @const
     */
    "neural": "neural"
};


/**
 * Allowed values for the <code>LanguageCode</code> property.
 * @enum {String}
 * @readonly
 */
SynthesizeSpeechRequest['LanguageCodeEnum'] = {

    /**
     * value: "arb"
     * @const
     */
    "arb": "arb",

    /**
     * value: "cmn-CN"
     * @const
     */
    "cmn-CN": "cmn-CN",

    /**
     * value: "cy-GB"
     * @const
     */
    "cy-GB": "cy-GB",

    /**
     * value: "da-DK"
     * @const
     */
    "da-DK": "da-DK",

    /**
     * value: "de-DE"
     * @const
     */
    "de-DE": "de-DE",

    /**
     * value: "en-AU"
     * @const
     */
    "en-AU": "en-AU",

    /**
     * value: "en-GB"
     * @const
     */
    "en-GB": "en-GB",

    /**
     * value: "en-GB-WLS"
     * @const
     */
    "en-GB-WLS": "en-GB-WLS",

    /**
     * value: "en-IN"
     * @const
     */
    "en-IN": "en-IN",

    /**
     * value: "en-US"
     * @const
     */
    "en-US": "en-US",

    /**
     * value: "es-ES"
     * @const
     */
    "es-ES": "es-ES",

    /**
     * value: "es-MX"
     * @const
     */
    "es-MX": "es-MX",

    /**
     * value: "es-US"
     * @const
     */
    "es-US": "es-US",

    /**
     * value: "fr-CA"
     * @const
     */
    "fr-CA": "fr-CA",

    /**
     * value: "fr-FR"
     * @const
     */
    "fr-FR": "fr-FR",

    /**
     * value: "is-IS"
     * @const
     */
    "is-IS": "is-IS",

    /**
     * value: "it-IT"
     * @const
     */
    "it-IT": "it-IT",

    /**
     * value: "ja-JP"
     * @const
     */
    "ja-JP": "ja-JP",

    /**
     * value: "hi-IN"
     * @const
     */
    "hi-IN": "hi-IN",

    /**
     * value: "ko-KR"
     * @const
     */
    "ko-KR": "ko-KR",

    /**
     * value: "nb-NO"
     * @const
     */
    "nb-NO": "nb-NO",

    /**
     * value: "nl-NL"
     * @const
     */
    "nl-NL": "nl-NL",

    /**
     * value: "pl-PL"
     * @const
     */
    "pl-PL": "pl-PL",

    /**
     * value: "pt-BR"
     * @const
     */
    "pt-BR": "pt-BR",

    /**
     * value: "pt-PT"
     * @const
     */
    "pt-PT": "pt-PT",

    /**
     * value: "ro-RO"
     * @const
     */
    "ro-RO": "ro-RO",

    /**
     * value: "ru-RU"
     * @const
     */
    "ru-RU": "ru-RU",

    /**
     * value: "sv-SE"
     * @const
     */
    "sv-SE": "sv-SE",

    /**
     * value: "tr-TR"
     * @const
     */
    "tr-TR": "tr-TR",

    /**
     * value: "en-NZ"
     * @const
     */
    "en-NZ": "en-NZ",

    /**
     * value: "en-ZA"
     * @const
     */
    "en-ZA": "en-ZA",

    /**
     * value: "ca-ES"
     * @const
     */
    "ca-ES": "ca-ES",

    /**
     * value: "de-AT"
     * @const
     */
    "de-AT": "de-AT",

    /**
     * value: "yue-CN"
     * @const
     */
    "yue-CN": "yue-CN",

    /**
     * value: "ar-AE"
     * @const
     */
    "ar-AE": "ar-AE",

    /**
     * value: "fi-FI"
     * @const
     */
    "fi-FI": "fi-FI",

    /**
     * value: "en-IE"
     * @const
     */
    "en-IE": "en-IE",

    /**
     * value: "nl-BE"
     * @const
     */
    "nl-BE": "nl-BE",

    /**
     * value: "fr-BE"
     * @const
     */
    "fr-BE": "fr-BE"
};


/**
 * Allowed values for the <code>OutputFormat</code> property.
 * @enum {String}
 * @readonly
 */
SynthesizeSpeechRequest['OutputFormatEnum'] = {

    /**
     * value: "json"
     * @const
     */
    "json": "json",

    /**
     * value: "mp3"
     * @const
     */
    "mp3": "mp3",

    /**
     * value: "ogg_vorbis"
     * @const
     */
    "ogg_vorbis": "ogg_vorbis",

    /**
     * value: "pcm"
     * @const
     */
    "pcm": "pcm"
};


/**
 * Allowed values for the <code>TextType</code> property.
 * @enum {String}
 * @readonly
 */
SynthesizeSpeechRequest['TextTypeEnum'] = {

    /**
     * value: "ssml"
     * @const
     */
    "ssml": "ssml",

    /**
     * value: "text"
     * @const
     */
    "text": "text"
};


/**
 * Allowed values for the <code>VoiceId</code> property.
 * @enum {String}
 * @readonly
 */
SynthesizeSpeechRequest['VoiceIdEnum'] = {

    /**
     * value: "Aditi"
     * @const
     */
    "Aditi": "Aditi",

    /**
     * value: "Amy"
     * @const
     */
    "Amy": "Amy",

    /**
     * value: "Astrid"
     * @const
     */
    "Astrid": "Astrid",

    /**
     * value: "Bianca"
     * @const
     */
    "Bianca": "Bianca",

    /**
     * value: "Brian"
     * @const
     */
    "Brian": "Brian",

    /**
     * value: "Camila"
     * @const
     */
    "Camila": "Camila",

    /**
     * value: "Carla"
     * @const
     */
    "Carla": "Carla",

    /**
     * value: "Carmen"
     * @const
     */
    "Carmen": "Carmen",

    /**
     * value: "Celine"
     * @const
     */
    "Celine": "Celine",

    /**
     * value: "Chantal"
     * @const
     */
    "Chantal": "Chantal",

    /**
     * value: "Conchita"
     * @const
     */
    "Conchita": "Conchita",

    /**
     * value: "Cristiano"
     * @const
     */
    "Cristiano": "Cristiano",

    /**
     * value: "Dora"
     * @const
     */
    "Dora": "Dora",

    /**
     * value: "Emma"
     * @const
     */
    "Emma": "Emma",

    /**
     * value: "Enrique"
     * @const
     */
    "Enrique": "Enrique",

    /**
     * value: "Ewa"
     * @const
     */
    "Ewa": "Ewa",

    /**
     * value: "Filiz"
     * @const
     */
    "Filiz": "Filiz",

    /**
     * value: "Gabrielle"
     * @const
     */
    "Gabrielle": "Gabrielle",

    /**
     * value: "Geraint"
     * @const
     */
    "Geraint": "Geraint",

    /**
     * value: "Giorgio"
     * @const
     */
    "Giorgio": "Giorgio",

    /**
     * value: "Gwyneth"
     * @const
     */
    "Gwyneth": "Gwyneth",

    /**
     * value: "Hans"
     * @const
     */
    "Hans": "Hans",

    /**
     * value: "Ines"
     * @const
     */
    "Ines": "Ines",

    /**
     * value: "Ivy"
     * @const
     */
    "Ivy": "Ivy",

    /**
     * value: "Jacek"
     * @const
     */
    "Jacek": "Jacek",

    /**
     * value: "Jan"
     * @const
     */
    "Jan": "Jan",

    /**
     * value: "Joanna"
     * @const
     */
    "Joanna": "Joanna",

    /**
     * value: "Joey"
     * @const
     */
    "Joey": "Joey",

    /**
     * value: "Justin"
     * @const
     */
    "Justin": "Justin",

    /**
     * value: "Karl"
     * @const
     */
    "Karl": "Karl",

    /**
     * value: "Kendra"
     * @const
     */
    "Kendra": "Kendra",

    /**
     * value: "Kevin"
     * @const
     */
    "Kevin": "Kevin",

    /**
     * value: "Kimberly"
     * @const
     */
    "Kimberly": "Kimberly",

    /**
     * value: "Lea"
     * @const
     */
    "Lea": "Lea",

    /**
     * value: "Liv"
     * @const
     */
    "Liv": "Liv",

    /**
     * value: "Lotte"
     * @const
     */
    "Lotte": "Lotte",

    /**
     * value: "Lucia"
     * @const
     */
    "Lucia": "Lucia",

    /**
     * value: "Lupe"
     * @const
     */
    "Lupe": "Lupe",

    /**
     * value: "Mads"
     * @const
     */
    "Mads": "Mads",

    /**
     * value: "Maja"
     * @const
     */
    "Maja": "Maja",

    /**
     * value: "Marlene"
     * @const
     */
    "Marlene": "Marlene",

    /**
     * value: "Mathieu"
     * @const
     */
    "Mathieu": "Mathieu",

    /**
     * value: "Matthew"
     * @const
     */
    "Matthew": "Matthew",

    /**
     * value: "Maxim"
     * @const
     */
    "Maxim": "Maxim",

    /**
     * value: "Mia"
     * @const
     */
    "Mia": "Mia",

    /**
     * value: "Miguel"
     * @const
     */
    "Miguel": "Miguel",

    /**
     * value: "Mizuki"
     * @const
     */
    "Mizuki": "Mizuki",

    /**
     * value: "Naja"
     * @const
     */
    "Naja": "Naja",

    /**
     * value: "Nicole"
     * @const
     */
    "Nicole": "Nicole",

    /**
     * value: "Olivia"
     * @const
     */
    "Olivia": "Olivia",

    /**
     * value: "Penelope"
     * @const
     */
    "Penelope": "Penelope",

    /**
     * value: "Raveena"
     * @const
     */
    "Raveena": "Raveena",

    /**
     * value: "Ricardo"
     * @const
     */
    "Ricardo": "Ricardo",

    /**
     * value: "Ruben"
     * @const
     */
    "Ruben": "Ruben",

    /**
     * value: "Russell"
     * @const
     */
    "Russell": "Russell",

    /**
     * value: "Salli"
     * @const
     */
    "Salli": "Salli",

    /**
     * value: "Seoyeon"
     * @const
     */
    "Seoyeon": "Seoyeon",

    /**
     * value: "Takumi"
     * @const
     */
    "Takumi": "Takumi",

    /**
     * value: "Tatyana"
     * @const
     */
    "Tatyana": "Tatyana",

    /**
     * value: "Vicki"
     * @const
     */
    "Vicki": "Vicki",

    /**
     * value: "Vitoria"
     * @const
     */
    "Vitoria": "Vitoria",

    /**
     * value: "Zeina"
     * @const
     */
    "Zeina": "Zeina",

    /**
     * value: "Zhiyu"
     * @const
     */
    "Zhiyu": "Zhiyu",

    /**
     * value: "Aria"
     * @const
     */
    "Aria": "Aria",

    /**
     * value: "Ayanda"
     * @const
     */
    "Ayanda": "Ayanda",

    /**
     * value: "Arlet"
     * @const
     */
    "Arlet": "Arlet",

    /**
     * value: "Hannah"
     * @const
     */
    "Hannah": "Hannah",

    /**
     * value: "Arthur"
     * @const
     */
    "Arthur": "Arthur",

    /**
     * value: "Daniel"
     * @const
     */
    "Daniel": "Daniel",

    /**
     * value: "Liam"
     * @const
     */
    "Liam": "Liam",

    /**
     * value: "Pedro"
     * @const
     */
    "Pedro": "Pedro",

    /**
     * value: "Kajal"
     * @const
     */
    "Kajal": "Kajal",

    /**
     * value: "Hiujin"
     * @const
     */
    "Hiujin": "Hiujin",

    /**
     * value: "Laura"
     * @const
     */
    "Laura": "Laura",

    /**
     * value: "Elin"
     * @const
     */
    "Elin": "Elin",

    /**
     * value: "Ida"
     * @const
     */
    "Ida": "Ida",

    /**
     * value: "Suvi"
     * @const
     */
    "Suvi": "Suvi",

    /**
     * value: "Ola"
     * @const
     */
    "Ola": "Ola",

    /**
     * value: "Hala"
     * @const
     */
    "Hala": "Hala",

    /**
     * value: "Andres"
     * @const
     */
    "Andres": "Andres",

    /**
     * value: "Sergio"
     * @const
     */
    "Sergio": "Sergio",

    /**
     * value: "Remi"
     * @const
     */
    "Remi": "Remi",

    /**
     * value: "Adriano"
     * @const
     */
    "Adriano": "Adriano",

    /**
     * value: "Thiago"
     * @const
     */
    "Thiago": "Thiago",

    /**
     * value: "Ruth"
     * @const
     */
    "Ruth": "Ruth",

    /**
     * value: "Stephen"
     * @const
     */
    "Stephen": "Stephen",

    /**
     * value: "Kazuha"
     * @const
     */
    "Kazuha": "Kazuha",

    /**
     * value: "Tomoko"
     * @const
     */
    "Tomoko": "Tomoko",

    /**
     * value: "Niamh"
     * @const
     */
    "Niamh": "Niamh",

    /**
     * value: "Sofie"
     * @const
     */
    "Sofie": "Sofie",

    /**
     * value: "Lisa"
     * @const
     */
    "Lisa": "Lisa",

    /**
     * value: "Isabelle"
     * @const
     */
    "Isabelle": "Isabelle"
};



export default SynthesizeSpeechRequest;

