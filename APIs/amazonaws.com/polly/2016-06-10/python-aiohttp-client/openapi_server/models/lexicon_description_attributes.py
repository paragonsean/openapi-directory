# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language_code import LanguageCode
from openapi_server import util


class LexiconDescriptionAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alphabet: str=None, language_code: LanguageCode=None, last_modified: datetime=None, lexicon_arn: str=None, lexemes_count: int=None, size: int=None):
        """LexiconDescriptionAttributes - a model defined in OpenAPI

        :param alphabet: The alphabet of this LexiconDescriptionAttributes.
        :param language_code: The language_code of this LexiconDescriptionAttributes.
        :param last_modified: The last_modified of this LexiconDescriptionAttributes.
        :param lexicon_arn: The lexicon_arn of this LexiconDescriptionAttributes.
        :param lexemes_count: The lexemes_count of this LexiconDescriptionAttributes.
        :param size: The size of this LexiconDescriptionAttributes.
        """
        self.openapi_types = {
            'alphabet': str,
            'language_code': LanguageCode,
            'last_modified': datetime,
            'lexicon_arn': str,
            'lexemes_count': int,
            'size': int
        }

        self.attribute_map = {
            'alphabet': 'Alphabet',
            'language_code': 'LanguageCode',
            'last_modified': 'LastModified',
            'lexicon_arn': 'LexiconArn',
            'lexemes_count': 'LexemesCount',
            'size': 'Size'
        }

        self._alphabet = alphabet
        self._language_code = language_code
        self._last_modified = last_modified
        self._lexicon_arn = lexicon_arn
        self._lexemes_count = lexemes_count
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LexiconDescriptionAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LexiconDescription_Attributes of this LexiconDescriptionAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alphabet(self):
        """Gets the alphabet of this LexiconDescriptionAttributes.


        :return: The alphabet of this LexiconDescriptionAttributes.
        :rtype: str
        """
        return self._alphabet

    @alphabet.setter
    def alphabet(self, alphabet):
        """Sets the alphabet of this LexiconDescriptionAttributes.


        :param alphabet: The alphabet of this LexiconDescriptionAttributes.
        :type alphabet: str
        """

        self._alphabet = alphabet

    @property
    def language_code(self):
        """Gets the language_code of this LexiconDescriptionAttributes.


        :return: The language_code of this LexiconDescriptionAttributes.
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this LexiconDescriptionAttributes.


        :param language_code: The language_code of this LexiconDescriptionAttributes.
        :type language_code: LanguageCode
        """

        self._language_code = language_code

    @property
    def last_modified(self):
        """Gets the last_modified of this LexiconDescriptionAttributes.


        :return: The last_modified of this LexiconDescriptionAttributes.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this LexiconDescriptionAttributes.


        :param last_modified: The last_modified of this LexiconDescriptionAttributes.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def lexicon_arn(self):
        """Gets the lexicon_arn of this LexiconDescriptionAttributes.


        :return: The lexicon_arn of this LexiconDescriptionAttributes.
        :rtype: str
        """
        return self._lexicon_arn

    @lexicon_arn.setter
    def lexicon_arn(self, lexicon_arn):
        """Sets the lexicon_arn of this LexiconDescriptionAttributes.


        :param lexicon_arn: The lexicon_arn of this LexiconDescriptionAttributes.
        :type lexicon_arn: str
        """

        self._lexicon_arn = lexicon_arn

    @property
    def lexemes_count(self):
        """Gets the lexemes_count of this LexiconDescriptionAttributes.


        :return: The lexemes_count of this LexiconDescriptionAttributes.
        :rtype: int
        """
        return self._lexemes_count

    @lexemes_count.setter
    def lexemes_count(self, lexemes_count):
        """Sets the lexemes_count of this LexiconDescriptionAttributes.


        :param lexemes_count: The lexemes_count of this LexiconDescriptionAttributes.
        :type lexemes_count: int
        """

        self._lexemes_count = lexemes_count

    @property
    def size(self):
        """Gets the size of this LexiconDescriptionAttributes.


        :return: The size of this LexiconDescriptionAttributes.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LexiconDescriptionAttributes.


        :param size: The size of this LexiconDescriptionAttributes.
        :type size: int
        """

        self._size = size
