# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gender import Gender
from openapi_server.models.language_code import LanguageCode
from openapi_server.models.voice_id import VoiceId
from openapi_server import util


class Voice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gender: Gender=None, id: VoiceId=None, language_code: LanguageCode=None, language_name: str=None, name: str=None, additional_language_codes: List=None, supported_engines: List=None):
        """Voice - a model defined in OpenAPI

        :param gender: The gender of this Voice.
        :param id: The id of this Voice.
        :param language_code: The language_code of this Voice.
        :param language_name: The language_name of this Voice.
        :param name: The name of this Voice.
        :param additional_language_codes: The additional_language_codes of this Voice.
        :param supported_engines: The supported_engines of this Voice.
        """
        self.openapi_types = {
            'gender': Gender,
            'id': VoiceId,
            'language_code': LanguageCode,
            'language_name': str,
            'name': str,
            'additional_language_codes': List,
            'supported_engines': List
        }

        self.attribute_map = {
            'gender': 'Gender',
            'id': 'Id',
            'language_code': 'LanguageCode',
            'language_name': 'LanguageName',
            'name': 'Name',
            'additional_language_codes': 'AdditionalLanguageCodes',
            'supported_engines': 'SupportedEngines'
        }

        self._gender = gender
        self._id = id
        self._language_code = language_code
        self._language_name = language_name
        self._name = name
        self._additional_language_codes = additional_language_codes
        self._supported_engines = supported_engines

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Voice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Voice of this Voice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gender(self):
        """Gets the gender of this Voice.


        :return: The gender of this Voice.
        :rtype: Gender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Voice.


        :param gender: The gender of this Voice.
        :type gender: Gender
        """

        self._gender = gender

    @property
    def id(self):
        """Gets the id of this Voice.


        :return: The id of this Voice.
        :rtype: VoiceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Voice.


        :param id: The id of this Voice.
        :type id: VoiceId
        """

        self._id = id

    @property
    def language_code(self):
        """Gets the language_code of this Voice.


        :return: The language_code of this Voice.
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Voice.


        :param language_code: The language_code of this Voice.
        :type language_code: LanguageCode
        """

        self._language_code = language_code

    @property
    def language_name(self):
        """Gets the language_name of this Voice.


        :return: The language_name of this Voice.
        :rtype: str
        """
        return self._language_name

    @language_name.setter
    def language_name(self, language_name):
        """Sets the language_name of this Voice.


        :param language_name: The language_name of this Voice.
        :type language_name: str
        """

        self._language_name = language_name

    @property
    def name(self):
        """Gets the name of this Voice.


        :return: The name of this Voice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Voice.


        :param name: The name of this Voice.
        :type name: str
        """

        self._name = name

    @property
    def additional_language_codes(self):
        """Gets the additional_language_codes of this Voice.


        :return: The additional_language_codes of this Voice.
        :rtype: List
        """
        return self._additional_language_codes

    @additional_language_codes.setter
    def additional_language_codes(self, additional_language_codes):
        """Sets the additional_language_codes of this Voice.


        :param additional_language_codes: The additional_language_codes of this Voice.
        :type additional_language_codes: List
        """

        self._additional_language_codes = additional_language_codes

    @property
    def supported_engines(self):
        """Gets the supported_engines of this Voice.


        :return: The supported_engines of this Voice.
        :rtype: List
        """
        return self._supported_engines

    @supported_engines.setter
    def supported_engines(self, supported_engines):
        """Sets the supported_engines of this Voice.


        :param supported_engines: The supported_engines of this Voice.
        :type supported_engines: List
        """

        self._supported_engines = supported_engines
