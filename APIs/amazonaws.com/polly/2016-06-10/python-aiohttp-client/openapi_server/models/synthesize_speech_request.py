# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.speech_mark_type import SpeechMarkType
from openapi_server import util


class SynthesizeSpeechRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None, language_code: str=None, lexicon_names: List[str]=None, output_format: str=None, sample_rate: str=None, speech_mark_types: List[SpeechMarkType]=None, text: str=None, text_type: str=None, voice_id: str=None):
        """SynthesizeSpeechRequest - a model defined in OpenAPI

        :param engine: The engine of this SynthesizeSpeechRequest.
        :param language_code: The language_code of this SynthesizeSpeechRequest.
        :param lexicon_names: The lexicon_names of this SynthesizeSpeechRequest.
        :param output_format: The output_format of this SynthesizeSpeechRequest.
        :param sample_rate: The sample_rate of this SynthesizeSpeechRequest.
        :param speech_mark_types: The speech_mark_types of this SynthesizeSpeechRequest.
        :param text: The text of this SynthesizeSpeechRequest.
        :param text_type: The text_type of this SynthesizeSpeechRequest.
        :param voice_id: The voice_id of this SynthesizeSpeechRequest.
        """
        self.openapi_types = {
            'engine': str,
            'language_code': str,
            'lexicon_names': List[str],
            'output_format': str,
            'sample_rate': str,
            'speech_mark_types': List[SpeechMarkType],
            'text': str,
            'text_type': str,
            'voice_id': str
        }

        self.attribute_map = {
            'engine': 'Engine',
            'language_code': 'LanguageCode',
            'lexicon_names': 'LexiconNames',
            'output_format': 'OutputFormat',
            'sample_rate': 'SampleRate',
            'speech_mark_types': 'SpeechMarkTypes',
            'text': 'Text',
            'text_type': 'TextType',
            'voice_id': 'VoiceId'
        }

        self._engine = engine
        self._language_code = language_code
        self._lexicon_names = lexicon_names
        self._output_format = output_format
        self._sample_rate = sample_rate
        self._speech_mark_types = speech_mark_types
        self._text = text
        self._text_type = text_type
        self._voice_id = voice_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SynthesizeSpeechRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SynthesizeSpeech_request of this SynthesizeSpeechRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this SynthesizeSpeechRequest.

        <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. For information on Amazon Polly voices and which voices are available in standard-only, NTTS-only, and both standard and NTTS formats, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Available Voices</a>.</p> <p> <b>NTTS-only voices</b> </p> <p>When using NTTS-only voices such as Kevin (en-US), this parameter is required and must be set to <code>neural</code>. If the engine is not specified, or is set to <code>standard</code>, this will result in an error. </p> <p>Type: String</p> <p>Valid Values: <code>standard</code> | <code>neural</code> </p> <p>Required: Yes</p> <p> <b>Standard voices</b> </p> <p>For standard voices, this is not required; the engine parameter defaults to <code>standard</code>. If the engine is not specified, or is set to <code>standard</code> and an NTTS-only voice is selected, this will result in an error. </p>

        :return: The engine of this SynthesizeSpeechRequest.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this SynthesizeSpeechRequest.

        <p>Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. For information on Amazon Polly voices and which voices are available in standard-only, NTTS-only, and both standard and NTTS formats, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Available Voices</a>.</p> <p> <b>NTTS-only voices</b> </p> <p>When using NTTS-only voices such as Kevin (en-US), this parameter is required and must be set to <code>neural</code>. If the engine is not specified, or is set to <code>standard</code>, this will result in an error. </p> <p>Type: String</p> <p>Valid Values: <code>standard</code> | <code>neural</code> </p> <p>Required: Yes</p> <p> <b>Standard voices</b> </p> <p>For standard voices, this is not required; the engine parameter defaults to <code>standard</code>. If the engine is not specified, or is set to <code>standard</code> and an NTTS-only voice is selected, this will result in an error. </p>

        :param engine: The engine of this SynthesizeSpeechRequest.
        :type engine: str
        """
        allowed_values = ["standard", "neural"]  # noqa: E501
        if engine not in allowed_values:
            raise ValueError(
                "Invalid value for `engine` ({0}), must be one of {1}"
                .format(engine, allowed_values)
            )

        self._engine = engine

    @property
    def language_code(self):
        """Gets the language_code of this SynthesizeSpeechRequest.

        <p>Optional language code for the Synthesize Speech request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>

        :return: The language_code of this SynthesizeSpeechRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this SynthesizeSpeechRequest.

        <p>Optional language code for the Synthesize Speech request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>

        :param language_code: The language_code of this SynthesizeSpeechRequest.
        :type language_code: str
        """
        allowed_values = ["arb", "cmn-CN", "cy-GB", "da-DK", "de-DE", "en-AU", "en-GB", "en-GB-WLS", "en-IN", "en-US", "es-ES", "es-MX", "es-US", "fr-CA", "fr-FR", "is-IS", "it-IT", "ja-JP", "hi-IN", "ko-KR", "nb-NO", "nl-NL", "pl-PL", "pt-BR", "pt-PT", "ro-RO", "ru-RU", "sv-SE", "tr-TR", "en-NZ", "en-ZA", "ca-ES", "de-AT", "yue-CN", "ar-AE", "fi-FI", "en-IE", "nl-BE", "fr-BE"]  # noqa: E501
        if language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `language_code` ({0}), must be one of {1}"
                .format(language_code, allowed_values)
            )

        self._language_code = language_code

    @property
    def lexicon_names(self):
        """Gets the lexicon_names of this SynthesizeSpeechRequest.

        List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. For information about storing lexicons, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html\">PutLexicon</a>.

        :return: The lexicon_names of this SynthesizeSpeechRequest.
        :rtype: List[str]
        """
        return self._lexicon_names

    @lexicon_names.setter
    def lexicon_names(self, lexicon_names):
        """Sets the lexicon_names of this SynthesizeSpeechRequest.

        List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. For information about storing lexicons, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html\">PutLexicon</a>.

        :param lexicon_names: The lexicon_names of this SynthesizeSpeechRequest.
        :type lexicon_names: List[str]
        """
        if lexicon_names is not None and len(lexicon_names) > 5:
            raise ValueError("Invalid value for `lexicon_names`, number of items must be less than or equal to `5`")

        self._lexicon_names = lexicon_names

    @property
    def output_format(self):
        """Gets the output_format of this SynthesizeSpeechRequest.

        <p> The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p> <p>When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format. </p>

        :return: The output_format of this SynthesizeSpeechRequest.
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this SynthesizeSpeechRequest.

        <p> The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. </p> <p>When pcm is used, the content returned is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format. </p>

        :param output_format: The output_format of this SynthesizeSpeechRequest.
        :type output_format: str
        """
        allowed_values = ["json", "mp3", "ogg_vorbis", "pcm"]  # noqa: E501
        if output_format not in allowed_values:
            raise ValueError(
                "Invalid value for `output_format` ({0}), must be one of {1}"
                .format(output_format, allowed_values)
            )

        self._output_format = output_format

    @property
    def sample_rate(self):
        """Gets the sample_rate of this SynthesizeSpeechRequest.

        <p>The audio frequency specified in Hz.</p> <p>The valid values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\". The default value for standard voices is \"22050\". The default value for neural voices is \"24000\".</p> <p>Valid values for pcm are \"8000\" and \"16000\" The default value is \"16000\". </p>

        :return: The sample_rate of this SynthesizeSpeechRequest.
        :rtype: str
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this SynthesizeSpeechRequest.

        <p>The audio frequency specified in Hz.</p> <p>The valid values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\". The default value for standard voices is \"22050\". The default value for neural voices is \"24000\".</p> <p>Valid values for pcm are \"8000\" and \"16000\" The default value is \"16000\". </p>

        :param sample_rate: The sample_rate of this SynthesizeSpeechRequest.
        :type sample_rate: str
        """

        self._sample_rate = sample_rate

    @property
    def speech_mark_types(self):
        """Gets the speech_mark_types of this SynthesizeSpeechRequest.

        The type of speech marks returned for the input text.

        :return: The speech_mark_types of this SynthesizeSpeechRequest.
        :rtype: List[SpeechMarkType]
        """
        return self._speech_mark_types

    @speech_mark_types.setter
    def speech_mark_types(self, speech_mark_types):
        """Sets the speech_mark_types of this SynthesizeSpeechRequest.

        The type of speech marks returned for the input text.

        :param speech_mark_types: The speech_mark_types of this SynthesizeSpeechRequest.
        :type speech_mark_types: List[SpeechMarkType]
        """
        if speech_mark_types is not None and len(speech_mark_types) > 4:
            raise ValueError("Invalid value for `speech_mark_types`, number of items must be less than or equal to `4`")

        self._speech_mark_types = speech_mark_types

    @property
    def text(self):
        """Gets the text of this SynthesizeSpeechRequest.

         Input text to synthesize. If you specify <code>ssml</code> as the <code>TextType</code>, follow the SSML format for the input text. 

        :return: The text of this SynthesizeSpeechRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SynthesizeSpeechRequest.

         Input text to synthesize. If you specify <code>ssml</code> as the <code>TextType</code>, follow the SSML format for the input text. 

        :param text: The text of this SynthesizeSpeechRequest.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def text_type(self):
        """Gets the text_type of this SynthesizeSpeechRequest.

         Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/ssml.html\">Using SSML</a>.

        :return: The text_type of this SynthesizeSpeechRequest.
        :rtype: str
        """
        return self._text_type

    @text_type.setter
    def text_type(self, text_type):
        """Sets the text_type of this SynthesizeSpeechRequest.

         Specifies whether the input text is plain text or SSML. The default value is plain text. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/ssml.html\">Using SSML</a>.

        :param text_type: The text_type of this SynthesizeSpeechRequest.
        :type text_type: str
        """
        allowed_values = ["ssml", "text"]  # noqa: E501
        if text_type not in allowed_values:
            raise ValueError(
                "Invalid value for `text_type` ({0}), must be one of {1}"
                .format(text_type, allowed_values)
            )

        self._text_type = text_type

    @property
    def voice_id(self):
        """Gets the voice_id of this SynthesizeSpeechRequest.

         Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation. 

        :return: The voice_id of this SynthesizeSpeechRequest.
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this SynthesizeSpeechRequest.

         Voice ID to use for the synthesis. You can get a list of available voice IDs by calling the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation. 

        :param voice_id: The voice_id of this SynthesizeSpeechRequest.
        :type voice_id: str
        """
        allowed_values = ["Aditi", "Amy", "Astrid", "Bianca", "Brian", "Camila", "Carla", "Carmen", "Celine", "Chantal", "Conchita", "Cristiano", "Dora", "Emma", "Enrique", "Ewa", "Filiz", "Gabrielle", "Geraint", "Giorgio", "Gwyneth", "Hans", "Ines", "Ivy", "Jacek", "Jan", "Joanna", "Joey", "Justin", "Karl", "Kendra", "Kevin", "Kimberly", "Lea", "Liv", "Lotte", "Lucia", "Lupe", "Mads", "Maja", "Marlene", "Mathieu", "Matthew", "Maxim", "Mia", "Miguel", "Mizuki", "Naja", "Nicole", "Olivia", "Penelope", "Raveena", "Ricardo", "Ruben", "Russell", "Salli", "Seoyeon", "Takumi", "Tatyana", "Vicki", "Vitoria", "Zeina", "Zhiyu", "Aria", "Ayanda", "Arlet", "Hannah", "Arthur", "Daniel", "Liam", "Pedro", "Kajal", "Hiujin", "Laura", "Elin", "Ida", "Suvi", "Ola", "Hala", "Andres", "Sergio", "Remi", "Adriano", "Thiago", "Ruth", "Stephen", "Kazuha", "Tomoko", "Niamh", "Sofie", "Lisa", "Isabelle"]  # noqa: E501
        if voice_id not in allowed_values:
            raise ValueError(
                "Invalid value for `voice_id` ({0}), must be one of {1}"
                .format(voice_id, allowed_values)
            )

        self._voice_id = voice_id
