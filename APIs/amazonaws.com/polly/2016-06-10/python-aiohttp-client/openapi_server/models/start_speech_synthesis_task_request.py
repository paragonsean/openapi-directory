# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.speech_mark_type import SpeechMarkType
import re
from openapi_server import util


class StartSpeechSynthesisTaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: str=None, language_code: str=None, lexicon_names: List[str]=None, output_format: str=None, output_s3_bucket_name: str=None, output_s3_key_prefix: str=None, sample_rate: str=None, sns_topic_arn: str=None, speech_mark_types: List[SpeechMarkType]=None, text: str=None, text_type: str=None, voice_id: str=None):
        """StartSpeechSynthesisTaskRequest - a model defined in OpenAPI

        :param engine: The engine of this StartSpeechSynthesisTaskRequest.
        :param language_code: The language_code of this StartSpeechSynthesisTaskRequest.
        :param lexicon_names: The lexicon_names of this StartSpeechSynthesisTaskRequest.
        :param output_format: The output_format of this StartSpeechSynthesisTaskRequest.
        :param output_s3_bucket_name: The output_s3_bucket_name of this StartSpeechSynthesisTaskRequest.
        :param output_s3_key_prefix: The output_s3_key_prefix of this StartSpeechSynthesisTaskRequest.
        :param sample_rate: The sample_rate of this StartSpeechSynthesisTaskRequest.
        :param sns_topic_arn: The sns_topic_arn of this StartSpeechSynthesisTaskRequest.
        :param speech_mark_types: The speech_mark_types of this StartSpeechSynthesisTaskRequest.
        :param text: The text of this StartSpeechSynthesisTaskRequest.
        :param text_type: The text_type of this StartSpeechSynthesisTaskRequest.
        :param voice_id: The voice_id of this StartSpeechSynthesisTaskRequest.
        """
        self.openapi_types = {
            'engine': str,
            'language_code': str,
            'lexicon_names': List[str],
            'output_format': str,
            'output_s3_bucket_name': str,
            'output_s3_key_prefix': str,
            'sample_rate': str,
            'sns_topic_arn': str,
            'speech_mark_types': List[SpeechMarkType],
            'text': str,
            'text_type': str,
            'voice_id': str
        }

        self.attribute_map = {
            'engine': 'Engine',
            'language_code': 'LanguageCode',
            'lexicon_names': 'LexiconNames',
            'output_format': 'OutputFormat',
            'output_s3_bucket_name': 'OutputS3BucketName',
            'output_s3_key_prefix': 'OutputS3KeyPrefix',
            'sample_rate': 'SampleRate',
            'sns_topic_arn': 'SnsTopicArn',
            'speech_mark_types': 'SpeechMarkTypes',
            'text': 'Text',
            'text_type': 'TextType',
            'voice_id': 'VoiceId'
        }

        self._engine = engine
        self._language_code = language_code
        self._lexicon_names = lexicon_names
        self._output_format = output_format
        self._output_s3_bucket_name = output_s3_bucket_name
        self._output_s3_key_prefix = output_s3_key_prefix
        self._sample_rate = sample_rate
        self._sns_topic_arn = sns_topic_arn
        self._speech_mark_types = speech_mark_types
        self._text = text
        self._text_type = text_type
        self._voice_id = voice_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartSpeechSynthesisTaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartSpeechSynthesisTask_request of this StartSpeechSynthesisTaskRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this StartSpeechSynthesisTaskRequest.

        Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. Using a voice that is not supported for the engine selected will result in an error.

        :return: The engine of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this StartSpeechSynthesisTaskRequest.

        Specifies the engine (<code>standard</code> or <code>neural</code>) for Amazon Polly to use when processing input text for speech synthesis. Using a voice that is not supported for the engine selected will result in an error.

        :param engine: The engine of this StartSpeechSynthesisTaskRequest.
        :type engine: str
        """
        allowed_values = ["standard", "neural"]  # noqa: E501
        if engine not in allowed_values:
            raise ValueError(
                "Invalid value for `engine` ({0}), must be one of {1}"
                .format(engine, allowed_values)
            )

        self._engine = engine

    @property
    def language_code(self):
        """Gets the language_code of this StartSpeechSynthesisTaskRequest.

        <p>Optional language code for the Speech Synthesis request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>

        :return: The language_code of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this StartSpeechSynthesisTaskRequest.

        <p>Optional language code for the Speech Synthesis request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\">DescribeVoices</a> operation for the <code>LanguageCode</code> parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.</p>

        :param language_code: The language_code of this StartSpeechSynthesisTaskRequest.
        :type language_code: str
        """
        allowed_values = ["arb", "cmn-CN", "cy-GB", "da-DK", "de-DE", "en-AU", "en-GB", "en-GB-WLS", "en-IN", "en-US", "es-ES", "es-MX", "es-US", "fr-CA", "fr-FR", "is-IS", "it-IT", "ja-JP", "hi-IN", "ko-KR", "nb-NO", "nl-NL", "pl-PL", "pt-BR", "pt-PT", "ro-RO", "ru-RU", "sv-SE", "tr-TR", "en-NZ", "en-ZA", "ca-ES", "de-AT", "yue-CN", "ar-AE", "fi-FI", "en-IE", "nl-BE", "fr-BE"]  # noqa: E501
        if language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `language_code` ({0}), must be one of {1}"
                .format(language_code, allowed_values)
            )

        self._language_code = language_code

    @property
    def lexicon_names(self):
        """Gets the lexicon_names of this StartSpeechSynthesisTaskRequest.

        List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. 

        :return: The lexicon_names of this StartSpeechSynthesisTaskRequest.
        :rtype: List[str]
        """
        return self._lexicon_names

    @lexicon_names.setter
    def lexicon_names(self, lexicon_names):
        """Sets the lexicon_names of this StartSpeechSynthesisTaskRequest.

        List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. 

        :param lexicon_names: The lexicon_names of this StartSpeechSynthesisTaskRequest.
        :type lexicon_names: List[str]
        """
        if lexicon_names is not None and len(lexicon_names) > 5:
            raise ValueError("Invalid value for `lexicon_names`, number of items must be less than or equal to `5`")

        self._lexicon_names = lexicon_names

    @property
    def output_format(self):
        """Gets the output_format of this StartSpeechSynthesisTaskRequest.

        The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. 

        :return: The output_format of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this StartSpeechSynthesisTaskRequest.

        The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. 

        :param output_format: The output_format of this StartSpeechSynthesisTaskRequest.
        :type output_format: str
        """
        allowed_values = ["json", "mp3", "ogg_vorbis", "pcm"]  # noqa: E501
        if output_format not in allowed_values:
            raise ValueError(
                "Invalid value for `output_format` ({0}), must be one of {1}"
                .format(output_format, allowed_values)
            )

        self._output_format = output_format

    @property
    def output_s3_bucket_name(self):
        """Gets the output_s3_bucket_name of this StartSpeechSynthesisTaskRequest.

        Amazon S3 bucket name to which the output file will be saved.

        :return: The output_s3_bucket_name of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._output_s3_bucket_name

    @output_s3_bucket_name.setter
    def output_s3_bucket_name(self, output_s3_bucket_name):
        """Sets the output_s3_bucket_name of this StartSpeechSynthesisTaskRequest.

        Amazon S3 bucket name to which the output file will be saved.

        :param output_s3_bucket_name: The output_s3_bucket_name of this StartSpeechSynthesisTaskRequest.
        :type output_s3_bucket_name: str
        """
        if output_s3_bucket_name is None:
            raise ValueError("Invalid value for `output_s3_bucket_name`, must not be `None`")
        if output_s3_bucket_name is not None and not re.search(r'^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$', output_s3_bucket_name):
            raise ValueError("Invalid value for `output_s3_bucket_name`, must be a follow pattern or equal to `/^[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]$/`")

        self._output_s3_bucket_name = output_s3_bucket_name

    @property
    def output_s3_key_prefix(self):
        """Gets the output_s3_key_prefix of this StartSpeechSynthesisTaskRequest.

        The Amazon S3 key prefix for the output speech file.

        :return: The output_s3_key_prefix of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._output_s3_key_prefix

    @output_s3_key_prefix.setter
    def output_s3_key_prefix(self, output_s3_key_prefix):
        """Sets the output_s3_key_prefix of this StartSpeechSynthesisTaskRequest.

        The Amazon S3 key prefix for the output speech file.

        :param output_s3_key_prefix: The output_s3_key_prefix of this StartSpeechSynthesisTaskRequest.
        :type output_s3_key_prefix: str
        """
        if output_s3_key_prefix is not None and not re.search(r'^[0-9a-zA-Z\/\!\-_\.\*\\'\(\):;\$@=+\,\?&]{0,800}$', output_s3_key_prefix):
            raise ValueError("Invalid value for `output_s3_key_prefix`, must be a follow pattern or equal to `/^[0-9a-zA-Z\/\!\-_\.\*\'\(\):;\$@=+\,\?&]{0,800}$/`")

        self._output_s3_key_prefix = output_s3_key_prefix

    @property
    def sample_rate(self):
        """Gets the sample_rate of this StartSpeechSynthesisTaskRequest.

        <p>The audio frequency specified in Hz.</p> <p>The valid values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\". The default value for standard voices is \"22050\". The default value for neural voices is \"24000\".</p> <p>Valid values for pcm are \"8000\" and \"16000\" The default value is \"16000\". </p>

        :return: The sample_rate of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this StartSpeechSynthesisTaskRequest.

        <p>The audio frequency specified in Hz.</p> <p>The valid values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\". The default value for standard voices is \"22050\". The default value for neural voices is \"24000\".</p> <p>Valid values for pcm are \"8000\" and \"16000\" The default value is \"16000\". </p>

        :param sample_rate: The sample_rate of this StartSpeechSynthesisTaskRequest.
        :type sample_rate: str
        """

        self._sample_rate = sample_rate

    @property
    def sns_topic_arn(self):
        """Gets the sns_topic_arn of this StartSpeechSynthesisTaskRequest.

        ARN for the SNS topic optionally used for providing status notification for a speech synthesis task.

        :return: The sns_topic_arn of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._sns_topic_arn

    @sns_topic_arn.setter
    def sns_topic_arn(self, sns_topic_arn):
        """Sets the sns_topic_arn of this StartSpeechSynthesisTaskRequest.

        ARN for the SNS topic optionally used for providing status notification for a speech synthesis task.

        :param sns_topic_arn: The sns_topic_arn of this StartSpeechSynthesisTaskRequest.
        :type sns_topic_arn: str
        """
        if sns_topic_arn is not None and not re.search(r'^arn:aws(-(cn|iso(-b)?|us-gov))?:sns:[a-z0-9_-]{1,50}:\d{12}:[a-zA-Z0-9_-]{1,256}$', sns_topic_arn):
            raise ValueError("Invalid value for `sns_topic_arn`, must be a follow pattern or equal to `/^arn:aws(-(cn|iso(-b)?|us-gov))?:sns:[a-z0-9_-]{1,50}:\d{12}:[a-zA-Z0-9_-]{1,256}$/`")

        self._sns_topic_arn = sns_topic_arn

    @property
    def speech_mark_types(self):
        """Gets the speech_mark_types of this StartSpeechSynthesisTaskRequest.

        The type of speech marks returned for the input text.

        :return: The speech_mark_types of this StartSpeechSynthesisTaskRequest.
        :rtype: List[SpeechMarkType]
        """
        return self._speech_mark_types

    @speech_mark_types.setter
    def speech_mark_types(self, speech_mark_types):
        """Sets the speech_mark_types of this StartSpeechSynthesisTaskRequest.

        The type of speech marks returned for the input text.

        :param speech_mark_types: The speech_mark_types of this StartSpeechSynthesisTaskRequest.
        :type speech_mark_types: List[SpeechMarkType]
        """
        if speech_mark_types is not None and len(speech_mark_types) > 4:
            raise ValueError("Invalid value for `speech_mark_types`, number of items must be less than or equal to `4`")

        self._speech_mark_types = speech_mark_types

    @property
    def text(self):
        """Gets the text of this StartSpeechSynthesisTaskRequest.

        The input text to synthesize. If you specify ssml as the TextType, follow the SSML format for the input text. 

        :return: The text of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this StartSpeechSynthesisTaskRequest.

        The input text to synthesize. If you specify ssml as the TextType, follow the SSML format for the input text. 

        :param text: The text of this StartSpeechSynthesisTaskRequest.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def text_type(self):
        """Gets the text_type of this StartSpeechSynthesisTaskRequest.

        Specifies whether the input text is plain text or SSML. The default value is plain text. 

        :return: The text_type of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._text_type

    @text_type.setter
    def text_type(self, text_type):
        """Sets the text_type of this StartSpeechSynthesisTaskRequest.

        Specifies whether the input text is plain text or SSML. The default value is plain text. 

        :param text_type: The text_type of this StartSpeechSynthesisTaskRequest.
        :type text_type: str
        """
        allowed_values = ["ssml", "text"]  # noqa: E501
        if text_type not in allowed_values:
            raise ValueError(
                "Invalid value for `text_type` ({0}), must be one of {1}"
                .format(text_type, allowed_values)
            )

        self._text_type = text_type

    @property
    def voice_id(self):
        """Gets the voice_id of this StartSpeechSynthesisTaskRequest.

        Voice ID to use for the synthesis. 

        :return: The voice_id of this StartSpeechSynthesisTaskRequest.
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this StartSpeechSynthesisTaskRequest.

        Voice ID to use for the synthesis. 

        :param voice_id: The voice_id of this StartSpeechSynthesisTaskRequest.
        :type voice_id: str
        """
        allowed_values = ["Aditi", "Amy", "Astrid", "Bianca", "Brian", "Camila", "Carla", "Carmen", "Celine", "Chantal", "Conchita", "Cristiano", "Dora", "Emma", "Enrique", "Ewa", "Filiz", "Gabrielle", "Geraint", "Giorgio", "Gwyneth", "Hans", "Ines", "Ivy", "Jacek", "Jan", "Joanna", "Joey", "Justin", "Karl", "Kendra", "Kevin", "Kimberly", "Lea", "Liv", "Lotte", "Lucia", "Lupe", "Mads", "Maja", "Marlene", "Mathieu", "Matthew", "Maxim", "Mia", "Miguel", "Mizuki", "Naja", "Nicole", "Olivia", "Penelope", "Raveena", "Ricardo", "Ruben", "Russell", "Salli", "Seoyeon", "Takumi", "Tatyana", "Vicki", "Vitoria", "Zeina", "Zhiyu", "Aria", "Ayanda", "Arlet", "Hannah", "Arthur", "Daniel", "Liam", "Pedro", "Kajal", "Hiujin", "Laura", "Elin", "Ida", "Suvi", "Ola", "Hala", "Andres", "Sergio", "Remi", "Adriano", "Thiago", "Ruth", "Stephen", "Kazuha", "Tomoko", "Niamh", "Sofie", "Lisa", "Isabelle"]  # noqa: E501
        if voice_id not in allowed_values:
            raise ValueError(
                "Invalid value for `voice_id` ({0}), must be one of {1}"
                .format(voice_id, allowed_values)
            )

        self._voice_id = voice_id
