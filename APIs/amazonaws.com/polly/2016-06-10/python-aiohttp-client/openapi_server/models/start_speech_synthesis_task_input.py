# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.engine import Engine
from openapi_server.models.language_code import LanguageCode
from openapi_server.models.output_format import OutputFormat
from openapi_server.models.text_type import TextType
from openapi_server.models.voice_id import VoiceId
from openapi_server import util


class StartSpeechSynthesisTaskInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine: Engine=None, language_code: LanguageCode=None, lexicon_names: List=None, output_format: OutputFormat=None, output_s3_bucket_name: str=None, output_s3_key_prefix: str=None, sample_rate: str=None, sns_topic_arn: str=None, speech_mark_types: List=None, text: str=None, text_type: TextType=None, voice_id: VoiceId=None):
        """StartSpeechSynthesisTaskInput - a model defined in OpenAPI

        :param engine: The engine of this StartSpeechSynthesisTaskInput.
        :param language_code: The language_code of this StartSpeechSynthesisTaskInput.
        :param lexicon_names: The lexicon_names of this StartSpeechSynthesisTaskInput.
        :param output_format: The output_format of this StartSpeechSynthesisTaskInput.
        :param output_s3_bucket_name: The output_s3_bucket_name of this StartSpeechSynthesisTaskInput.
        :param output_s3_key_prefix: The output_s3_key_prefix of this StartSpeechSynthesisTaskInput.
        :param sample_rate: The sample_rate of this StartSpeechSynthesisTaskInput.
        :param sns_topic_arn: The sns_topic_arn of this StartSpeechSynthesisTaskInput.
        :param speech_mark_types: The speech_mark_types of this StartSpeechSynthesisTaskInput.
        :param text: The text of this StartSpeechSynthesisTaskInput.
        :param text_type: The text_type of this StartSpeechSynthesisTaskInput.
        :param voice_id: The voice_id of this StartSpeechSynthesisTaskInput.
        """
        self.openapi_types = {
            'engine': Engine,
            'language_code': LanguageCode,
            'lexicon_names': List,
            'output_format': OutputFormat,
            'output_s3_bucket_name': str,
            'output_s3_key_prefix': str,
            'sample_rate': str,
            'sns_topic_arn': str,
            'speech_mark_types': List,
            'text': str,
            'text_type': TextType,
            'voice_id': VoiceId
        }

        self.attribute_map = {
            'engine': 'Engine',
            'language_code': 'LanguageCode',
            'lexicon_names': 'LexiconNames',
            'output_format': 'OutputFormat',
            'output_s3_bucket_name': 'OutputS3BucketName',
            'output_s3_key_prefix': 'OutputS3KeyPrefix',
            'sample_rate': 'SampleRate',
            'sns_topic_arn': 'SnsTopicArn',
            'speech_mark_types': 'SpeechMarkTypes',
            'text': 'Text',
            'text_type': 'TextType',
            'voice_id': 'VoiceId'
        }

        self._engine = engine
        self._language_code = language_code
        self._lexicon_names = lexicon_names
        self._output_format = output_format
        self._output_s3_bucket_name = output_s3_bucket_name
        self._output_s3_key_prefix = output_s3_key_prefix
        self._sample_rate = sample_rate
        self._sns_topic_arn = sns_topic_arn
        self._speech_mark_types = speech_mark_types
        self._text = text
        self._text_type = text_type
        self._voice_id = voice_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartSpeechSynthesisTaskInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartSpeechSynthesisTaskInput of this StartSpeechSynthesisTaskInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine(self):
        """Gets the engine of this StartSpeechSynthesisTaskInput.


        :return: The engine of this StartSpeechSynthesisTaskInput.
        :rtype: Engine
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this StartSpeechSynthesisTaskInput.


        :param engine: The engine of this StartSpeechSynthesisTaskInput.
        :type engine: Engine
        """

        self._engine = engine

    @property
    def language_code(self):
        """Gets the language_code of this StartSpeechSynthesisTaskInput.


        :return: The language_code of this StartSpeechSynthesisTaskInput.
        :rtype: LanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this StartSpeechSynthesisTaskInput.


        :param language_code: The language_code of this StartSpeechSynthesisTaskInput.
        :type language_code: LanguageCode
        """

        self._language_code = language_code

    @property
    def lexicon_names(self):
        """Gets the lexicon_names of this StartSpeechSynthesisTaskInput.


        :return: The lexicon_names of this StartSpeechSynthesisTaskInput.
        :rtype: List
        """
        return self._lexicon_names

    @lexicon_names.setter
    def lexicon_names(self, lexicon_names):
        """Sets the lexicon_names of this StartSpeechSynthesisTaskInput.


        :param lexicon_names: The lexicon_names of this StartSpeechSynthesisTaskInput.
        :type lexicon_names: List
        """

        self._lexicon_names = lexicon_names

    @property
    def output_format(self):
        """Gets the output_format of this StartSpeechSynthesisTaskInput.


        :return: The output_format of this StartSpeechSynthesisTaskInput.
        :rtype: OutputFormat
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this StartSpeechSynthesisTaskInput.


        :param output_format: The output_format of this StartSpeechSynthesisTaskInput.
        :type output_format: OutputFormat
        """
        if output_format is None:
            raise ValueError("Invalid value for `output_format`, must not be `None`")

        self._output_format = output_format

    @property
    def output_s3_bucket_name(self):
        """Gets the output_s3_bucket_name of this StartSpeechSynthesisTaskInput.


        :return: The output_s3_bucket_name of this StartSpeechSynthesisTaskInput.
        :rtype: str
        """
        return self._output_s3_bucket_name

    @output_s3_bucket_name.setter
    def output_s3_bucket_name(self, output_s3_bucket_name):
        """Sets the output_s3_bucket_name of this StartSpeechSynthesisTaskInput.


        :param output_s3_bucket_name: The output_s3_bucket_name of this StartSpeechSynthesisTaskInput.
        :type output_s3_bucket_name: str
        """
        if output_s3_bucket_name is None:
            raise ValueError("Invalid value for `output_s3_bucket_name`, must not be `None`")

        self._output_s3_bucket_name = output_s3_bucket_name

    @property
    def output_s3_key_prefix(self):
        """Gets the output_s3_key_prefix of this StartSpeechSynthesisTaskInput.


        :return: The output_s3_key_prefix of this StartSpeechSynthesisTaskInput.
        :rtype: str
        """
        return self._output_s3_key_prefix

    @output_s3_key_prefix.setter
    def output_s3_key_prefix(self, output_s3_key_prefix):
        """Sets the output_s3_key_prefix of this StartSpeechSynthesisTaskInput.


        :param output_s3_key_prefix: The output_s3_key_prefix of this StartSpeechSynthesisTaskInput.
        :type output_s3_key_prefix: str
        """

        self._output_s3_key_prefix = output_s3_key_prefix

    @property
    def sample_rate(self):
        """Gets the sample_rate of this StartSpeechSynthesisTaskInput.


        :return: The sample_rate of this StartSpeechSynthesisTaskInput.
        :rtype: str
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this StartSpeechSynthesisTaskInput.


        :param sample_rate: The sample_rate of this StartSpeechSynthesisTaskInput.
        :type sample_rate: str
        """

        self._sample_rate = sample_rate

    @property
    def sns_topic_arn(self):
        """Gets the sns_topic_arn of this StartSpeechSynthesisTaskInput.


        :return: The sns_topic_arn of this StartSpeechSynthesisTaskInput.
        :rtype: str
        """
        return self._sns_topic_arn

    @sns_topic_arn.setter
    def sns_topic_arn(self, sns_topic_arn):
        """Sets the sns_topic_arn of this StartSpeechSynthesisTaskInput.


        :param sns_topic_arn: The sns_topic_arn of this StartSpeechSynthesisTaskInput.
        :type sns_topic_arn: str
        """

        self._sns_topic_arn = sns_topic_arn

    @property
    def speech_mark_types(self):
        """Gets the speech_mark_types of this StartSpeechSynthesisTaskInput.


        :return: The speech_mark_types of this StartSpeechSynthesisTaskInput.
        :rtype: List
        """
        return self._speech_mark_types

    @speech_mark_types.setter
    def speech_mark_types(self, speech_mark_types):
        """Sets the speech_mark_types of this StartSpeechSynthesisTaskInput.


        :param speech_mark_types: The speech_mark_types of this StartSpeechSynthesisTaskInput.
        :type speech_mark_types: List
        """

        self._speech_mark_types = speech_mark_types

    @property
    def text(self):
        """Gets the text of this StartSpeechSynthesisTaskInput.


        :return: The text of this StartSpeechSynthesisTaskInput.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this StartSpeechSynthesisTaskInput.


        :param text: The text of this StartSpeechSynthesisTaskInput.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def text_type(self):
        """Gets the text_type of this StartSpeechSynthesisTaskInput.


        :return: The text_type of this StartSpeechSynthesisTaskInput.
        :rtype: TextType
        """
        return self._text_type

    @text_type.setter
    def text_type(self, text_type):
        """Sets the text_type of this StartSpeechSynthesisTaskInput.


        :param text_type: The text_type of this StartSpeechSynthesisTaskInput.
        :type text_type: TextType
        """

        self._text_type = text_type

    @property
    def voice_id(self):
        """Gets the voice_id of this StartSpeechSynthesisTaskInput.


        :return: The voice_id of this StartSpeechSynthesisTaskInput.
        :rtype: VoiceId
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this StartSpeechSynthesisTaskInput.


        :param voice_id: The voice_id of this StartSpeechSynthesisTaskInput.
        :type voice_id: VoiceId
        """
        if voice_id is None:
            raise ValueError("Invalid value for `voice_id`, must not be `None`")

        self._voice_id = voice_id
