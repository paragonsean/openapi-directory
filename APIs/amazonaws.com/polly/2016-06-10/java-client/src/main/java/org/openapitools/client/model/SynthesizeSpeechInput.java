/*
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Engine;
import org.openapitools.client.model.LanguageCode;
import org.openapitools.client.model.OutputFormat;
import org.openapitools.client.model.TextType;
import org.openapitools.client.model.VoiceId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SynthesizeSpeechInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:49.167874-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SynthesizeSpeechInput {
  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private Engine engine;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCode languageCode;

  public static final String SERIALIZED_NAME_LEXICON_NAMES = "LexiconNames";
  @SerializedName(SERIALIZED_NAME_LEXICON_NAMES)
  private List lexiconNames;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "OutputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private OutputFormat outputFormat;

  public static final String SERIALIZED_NAME_SAMPLE_RATE = "SampleRate";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE)
  private String sampleRate;

  public static final String SERIALIZED_NAME_SPEECH_MARK_TYPES = "SpeechMarkTypes";
  @SerializedName(SERIALIZED_NAME_SPEECH_MARK_TYPES)
  private List speechMarkTypes;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TEXT_TYPE = "TextType";
  @SerializedName(SERIALIZED_NAME_TEXT_TYPE)
  private TextType textType;

  public static final String SERIALIZED_NAME_VOICE_ID = "VoiceId";
  @SerializedName(SERIALIZED_NAME_VOICE_ID)
  private VoiceId voiceId;

  public SynthesizeSpeechInput() {
  }

  public SynthesizeSpeechInput engine(Engine engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public Engine getEngine() {
    return engine;
  }

  public void setEngine(Engine engine) {
    this.engine = engine;
  }


  public SynthesizeSpeechInput languageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public LanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public SynthesizeSpeechInput lexiconNames(List lexiconNames) {
    this.lexiconNames = lexiconNames;
    return this;
  }

  /**
   * Get lexiconNames
   * @return lexiconNames
   */
  @javax.annotation.Nullable
  public List getLexiconNames() {
    return lexiconNames;
  }

  public void setLexiconNames(List lexiconNames) {
    this.lexiconNames = lexiconNames;
  }


  public SynthesizeSpeechInput outputFormat(OutputFormat outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * @return outputFormat
   */
  @javax.annotation.Nonnull
  public OutputFormat getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(OutputFormat outputFormat) {
    this.outputFormat = outputFormat;
  }


  public SynthesizeSpeechInput sampleRate(String sampleRate) {
    this.sampleRate = sampleRate;
    return this;
  }

  /**
   * Get sampleRate
   * @return sampleRate
   */
  @javax.annotation.Nullable
  public String getSampleRate() {
    return sampleRate;
  }

  public void setSampleRate(String sampleRate) {
    this.sampleRate = sampleRate;
  }


  public SynthesizeSpeechInput speechMarkTypes(List speechMarkTypes) {
    this.speechMarkTypes = speechMarkTypes;
    return this;
  }

  /**
   * Get speechMarkTypes
   * @return speechMarkTypes
   */
  @javax.annotation.Nullable
  public List getSpeechMarkTypes() {
    return speechMarkTypes;
  }

  public void setSpeechMarkTypes(List speechMarkTypes) {
    this.speechMarkTypes = speechMarkTypes;
  }


  public SynthesizeSpeechInput text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public SynthesizeSpeechInput textType(TextType textType) {
    this.textType = textType;
    return this;
  }

  /**
   * Get textType
   * @return textType
   */
  @javax.annotation.Nullable
  public TextType getTextType() {
    return textType;
  }

  public void setTextType(TextType textType) {
    this.textType = textType;
  }


  public SynthesizeSpeechInput voiceId(VoiceId voiceId) {
    this.voiceId = voiceId;
    return this;
  }

  /**
   * Get voiceId
   * @return voiceId
   */
  @javax.annotation.Nonnull
  public VoiceId getVoiceId() {
    return voiceId;
  }

  public void setVoiceId(VoiceId voiceId) {
    this.voiceId = voiceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SynthesizeSpeechInput synthesizeSpeechInput = (SynthesizeSpeechInput) o;
    return Objects.equals(this.engine, synthesizeSpeechInput.engine) &&
        Objects.equals(this.languageCode, synthesizeSpeechInput.languageCode) &&
        Objects.equals(this.lexiconNames, synthesizeSpeechInput.lexiconNames) &&
        Objects.equals(this.outputFormat, synthesizeSpeechInput.outputFormat) &&
        Objects.equals(this.sampleRate, synthesizeSpeechInput.sampleRate) &&
        Objects.equals(this.speechMarkTypes, synthesizeSpeechInput.speechMarkTypes) &&
        Objects.equals(this.text, synthesizeSpeechInput.text) &&
        Objects.equals(this.textType, synthesizeSpeechInput.textType) &&
        Objects.equals(this.voiceId, synthesizeSpeechInput.voiceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engine, languageCode, lexiconNames, outputFormat, sampleRate, speechMarkTypes, text, textType, voiceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SynthesizeSpeechInput {\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    lexiconNames: ").append(toIndentedString(lexiconNames)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    sampleRate: ").append(toIndentedString(sampleRate)).append("\n");
    sb.append("    speechMarkTypes: ").append(toIndentedString(speechMarkTypes)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textType: ").append(toIndentedString(textType)).append("\n");
    sb.append("    voiceId: ").append(toIndentedString(voiceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Engine");
    openapiFields.add("LanguageCode");
    openapiFields.add("LexiconNames");
    openapiFields.add("OutputFormat");
    openapiFields.add("SampleRate");
    openapiFields.add("SpeechMarkTypes");
    openapiFields.add("Text");
    openapiFields.add("TextType");
    openapiFields.add("VoiceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OutputFormat");
    openapiRequiredFields.add("Text");
    openapiRequiredFields.add("VoiceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SynthesizeSpeechInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SynthesizeSpeechInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SynthesizeSpeechInput is not found in the empty JSON string", SynthesizeSpeechInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SynthesizeSpeechInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SynthesizeSpeechInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SynthesizeSpeechInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        Engine.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        LanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `LexiconNames`
      if (jsonObj.get("LexiconNames") != null && !jsonObj.get("LexiconNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LexiconNames"));
      }
      // validate the required field `OutputFormat`
      OutputFormat.validateJsonElement(jsonObj.get("OutputFormat"));
      // validate the optional field `SampleRate`
      if (jsonObj.get("SampleRate") != null && !jsonObj.get("SampleRate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SampleRate"));
      }
      // validate the optional field `SpeechMarkTypes`
      if (jsonObj.get("SpeechMarkTypes") != null && !jsonObj.get("SpeechMarkTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SpeechMarkTypes"));
      }
      // validate the required field `Text`
      String.validateJsonElement(jsonObj.get("Text"));
      // validate the optional field `TextType`
      if (jsonObj.get("TextType") != null && !jsonObj.get("TextType").isJsonNull()) {
        TextType.validateJsonElement(jsonObj.get("TextType"));
      }
      // validate the required field `VoiceId`
      VoiceId.validateJsonElement(jsonObj.get("VoiceId"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SynthesizeSpeechInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SynthesizeSpeechInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SynthesizeSpeechInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SynthesizeSpeechInput.class));

       return (TypeAdapter<T>) new TypeAdapter<SynthesizeSpeechInput>() {
           @Override
           public void write(JsonWriter out, SynthesizeSpeechInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SynthesizeSpeechInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SynthesizeSpeechInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SynthesizeSpeechInput
   * @throws IOException if the JSON string is invalid with respect to SynthesizeSpeechInput
   */
  public static SynthesizeSpeechInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SynthesizeSpeechInput.class);
  }

  /**
   * Convert an instance of SynthesizeSpeechInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

