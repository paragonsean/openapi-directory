/*
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets VoiceId
 */
@JsonAdapter(VoiceId.Adapter.class)
public enum VoiceId {
  
  ADITI("Aditi"),
  
  AMY("Amy"),
  
  ASTRID("Astrid"),
  
  BIANCA("Bianca"),
  
  BRIAN("Brian"),
  
  CAMILA("Camila"),
  
  CARLA("Carla"),
  
  CARMEN("Carmen"),
  
  CELINE("Celine"),
  
  CHANTAL("Chantal"),
  
  CONCHITA("Conchita"),
  
  CRISTIANO("Cristiano"),
  
  DORA("Dora"),
  
  EMMA("Emma"),
  
  ENRIQUE("Enrique"),
  
  EWA("Ewa"),
  
  FILIZ("Filiz"),
  
  GABRIELLE("Gabrielle"),
  
  GERAINT("Geraint"),
  
  GIORGIO("Giorgio"),
  
  GWYNETH("Gwyneth"),
  
  HANS("Hans"),
  
  INES("Ines"),
  
  IVY("Ivy"),
  
  JACEK("Jacek"),
  
  JAN("Jan"),
  
  JOANNA("Joanna"),
  
  JOEY("Joey"),
  
  JUSTIN("Justin"),
  
  KARL("Karl"),
  
  KENDRA("Kendra"),
  
  KEVIN("Kevin"),
  
  KIMBERLY("Kimberly"),
  
  LEA("Lea"),
  
  LIV("Liv"),
  
  LOTTE("Lotte"),
  
  LUCIA("Lucia"),
  
  LUPE("Lupe"),
  
  MADS("Mads"),
  
  MAJA("Maja"),
  
  MARLENE("Marlene"),
  
  MATHIEU("Mathieu"),
  
  MATTHEW("Matthew"),
  
  MAXIM("Maxim"),
  
  MIA("Mia"),
  
  MIGUEL("Miguel"),
  
  MIZUKI("Mizuki"),
  
  NAJA("Naja"),
  
  NICOLE("Nicole"),
  
  OLIVIA("Olivia"),
  
  PENELOPE("Penelope"),
  
  RAVEENA("Raveena"),
  
  RICARDO("Ricardo"),
  
  RUBEN("Ruben"),
  
  RUSSELL("Russell"),
  
  SALLI("Salli"),
  
  SEOYEON("Seoyeon"),
  
  TAKUMI("Takumi"),
  
  TATYANA("Tatyana"),
  
  VICKI("Vicki"),
  
  VITORIA("Vitoria"),
  
  ZEINA("Zeina"),
  
  ZHIYU("Zhiyu"),
  
  ARIA("Aria"),
  
  AYANDA("Ayanda"),
  
  ARLET("Arlet"),
  
  HANNAH("Hannah"),
  
  ARTHUR("Arthur"),
  
  DANIEL("Daniel"),
  
  LIAM("Liam"),
  
  PEDRO("Pedro"),
  
  KAJAL("Kajal"),
  
  HIUJIN("Hiujin"),
  
  LAURA("Laura"),
  
  ELIN("Elin"),
  
  IDA("Ida"),
  
  SUVI("Suvi"),
  
  OLA("Ola"),
  
  HALA("Hala"),
  
  ANDRES("Andres"),
  
  SERGIO("Sergio"),
  
  REMI("Remi"),
  
  ADRIANO("Adriano"),
  
  THIAGO("Thiago"),
  
  RUTH("Ruth"),
  
  STEPHEN("Stephen"),
  
  KAZUHA("Kazuha"),
  
  TOMOKO("Tomoko"),
  
  NIAMH("Niamh"),
  
  SOFIE("Sofie"),
  
  LISA("Lisa"),
  
  ISABELLE("Isabelle");

  private String value;

  VoiceId(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static VoiceId fromValue(String value) {
    for (VoiceId b : VoiceId.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<VoiceId> {
    @Override
    public void write(final JsonWriter jsonWriter, final VoiceId enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public VoiceId read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return VoiceId.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    VoiceId.fromValue(value);
  }
}

