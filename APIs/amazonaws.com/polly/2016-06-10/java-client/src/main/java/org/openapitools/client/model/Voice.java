/*
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Gender;
import org.openapitools.client.model.LanguageCode;
import org.openapitools.client.model.VoiceId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of the voice.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:49.167874-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Voice {
  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private Gender gender;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private VoiceId id;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCode languageCode;

  public static final String SERIALIZED_NAME_LANGUAGE_NAME = "LanguageName";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_NAME)
  private String languageName;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ADDITIONAL_LANGUAGE_CODES = "AdditionalLanguageCodes";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_LANGUAGE_CODES)
  private List additionalLanguageCodes;

  public static final String SERIALIZED_NAME_SUPPORTED_ENGINES = "SupportedEngines";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_ENGINES)
  private List supportedEngines;

  public Voice() {
  }

  public Voice gender(Gender gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public Gender getGender() {
    return gender;
  }

  public void setGender(Gender gender) {
    this.gender = gender;
  }


  public Voice id(VoiceId id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public VoiceId getId() {
    return id;
  }

  public void setId(VoiceId id) {
    this.id = id;
  }


  public Voice languageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public LanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public Voice languageName(String languageName) {
    this.languageName = languageName;
    return this;
  }

  /**
   * Get languageName
   * @return languageName
   */
  @javax.annotation.Nullable
  public String getLanguageName() {
    return languageName;
  }

  public void setLanguageName(String languageName) {
    this.languageName = languageName;
  }


  public Voice name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Voice additionalLanguageCodes(List additionalLanguageCodes) {
    this.additionalLanguageCodes = additionalLanguageCodes;
    return this;
  }

  /**
   * Get additionalLanguageCodes
   * @return additionalLanguageCodes
   */
  @javax.annotation.Nullable
  public List getAdditionalLanguageCodes() {
    return additionalLanguageCodes;
  }

  public void setAdditionalLanguageCodes(List additionalLanguageCodes) {
    this.additionalLanguageCodes = additionalLanguageCodes;
  }


  public Voice supportedEngines(List supportedEngines) {
    this.supportedEngines = supportedEngines;
    return this;
  }

  /**
   * Get supportedEngines
   * @return supportedEngines
   */
  @javax.annotation.Nullable
  public List getSupportedEngines() {
    return supportedEngines;
  }

  public void setSupportedEngines(List supportedEngines) {
    this.supportedEngines = supportedEngines;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Voice voice = (Voice) o;
    return Objects.equals(this.gender, voice.gender) &&
        Objects.equals(this.id, voice.id) &&
        Objects.equals(this.languageCode, voice.languageCode) &&
        Objects.equals(this.languageName, voice.languageName) &&
        Objects.equals(this.name, voice.name) &&
        Objects.equals(this.additionalLanguageCodes, voice.additionalLanguageCodes) &&
        Objects.equals(this.supportedEngines, voice.supportedEngines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gender, id, languageCode, languageName, name, additionalLanguageCodes, supportedEngines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Voice {\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    languageName: ").append(toIndentedString(languageName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    additionalLanguageCodes: ").append(toIndentedString(additionalLanguageCodes)).append("\n");
    sb.append("    supportedEngines: ").append(toIndentedString(supportedEngines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Gender");
    openapiFields.add("Id");
    openapiFields.add("LanguageCode");
    openapiFields.add("LanguageName");
    openapiFields.add("Name");
    openapiFields.add("AdditionalLanguageCodes");
    openapiFields.add("SupportedEngines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Voice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Voice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Voice is not found in the empty JSON string", Voice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Voice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Voice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Gender`
      if (jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) {
        Gender.validateJsonElement(jsonObj.get("Gender"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        VoiceId.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        LanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `LanguageName`
      if (jsonObj.get("LanguageName") != null && !jsonObj.get("LanguageName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LanguageName"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `AdditionalLanguageCodes`
      if (jsonObj.get("AdditionalLanguageCodes") != null && !jsonObj.get("AdditionalLanguageCodes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalLanguageCodes"));
      }
      // validate the optional field `SupportedEngines`
      if (jsonObj.get("SupportedEngines") != null && !jsonObj.get("SupportedEngines").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SupportedEngines"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Voice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Voice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Voice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Voice.class));

       return (TypeAdapter<T>) new TypeAdapter<Voice>() {
           @Override
           public void write(JsonWriter out, Voice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Voice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Voice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Voice
   * @throws IOException if the JSON string is invalid with respect to Voice
   */
  public static Voice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Voice.class);
  }

  /**
   * Convert an instance of Voice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

