/*
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LanguageCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetLexiconOutputLexiconAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:49.167874-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetLexiconOutputLexiconAttributes {
  public static final String SERIALIZED_NAME_ALPHABET = "Alphabet";
  @SerializedName(SERIALIZED_NAME_ALPHABET)
  private String alphabet;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCode languageCode;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "LastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_LEXICON_ARN = "LexiconArn";
  @SerializedName(SERIALIZED_NAME_LEXICON_ARN)
  private String lexiconArn;

  public static final String SERIALIZED_NAME_LEXEMES_COUNT = "LexemesCount";
  @SerializedName(SERIALIZED_NAME_LEXEMES_COUNT)
  private Integer lexemesCount;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public GetLexiconOutputLexiconAttributes() {
  }

  public GetLexiconOutputLexiconAttributes alphabet(String alphabet) {
    this.alphabet = alphabet;
    return this;
  }

  /**
   * Get alphabet
   * @return alphabet
   */
  @javax.annotation.Nullable
  public String getAlphabet() {
    return alphabet;
  }

  public void setAlphabet(String alphabet) {
    this.alphabet = alphabet;
  }


  public GetLexiconOutputLexiconAttributes languageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public LanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public GetLexiconOutputLexiconAttributes lastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }

  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public GetLexiconOutputLexiconAttributes lexiconArn(String lexiconArn) {
    this.lexiconArn = lexiconArn;
    return this;
  }

  /**
   * Get lexiconArn
   * @return lexiconArn
   */
  @javax.annotation.Nullable
  public String getLexiconArn() {
    return lexiconArn;
  }

  public void setLexiconArn(String lexiconArn) {
    this.lexiconArn = lexiconArn;
  }


  public GetLexiconOutputLexiconAttributes lexemesCount(Integer lexemesCount) {
    this.lexemesCount = lexemesCount;
    return this;
  }

  /**
   * Get lexemesCount
   * @return lexemesCount
   */
  @javax.annotation.Nullable
  public Integer getLexemesCount() {
    return lexemesCount;
  }

  public void setLexemesCount(Integer lexemesCount) {
    this.lexemesCount = lexemesCount;
  }


  public GetLexiconOutputLexiconAttributes size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetLexiconOutputLexiconAttributes getLexiconOutputLexiconAttributes = (GetLexiconOutputLexiconAttributes) o;
    return Objects.equals(this.alphabet, getLexiconOutputLexiconAttributes.alphabet) &&
        Objects.equals(this.languageCode, getLexiconOutputLexiconAttributes.languageCode) &&
        Objects.equals(this.lastModified, getLexiconOutputLexiconAttributes.lastModified) &&
        Objects.equals(this.lexiconArn, getLexiconOutputLexiconAttributes.lexiconArn) &&
        Objects.equals(this.lexemesCount, getLexiconOutputLexiconAttributes.lexemesCount) &&
        Objects.equals(this.size, getLexiconOutputLexiconAttributes.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alphabet, languageCode, lastModified, lexiconArn, lexemesCount, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetLexiconOutputLexiconAttributes {\n");
    sb.append("    alphabet: ").append(toIndentedString(alphabet)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    lexiconArn: ").append(toIndentedString(lexiconArn)).append("\n");
    sb.append("    lexemesCount: ").append(toIndentedString(lexemesCount)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Alphabet");
    openapiFields.add("LanguageCode");
    openapiFields.add("LastModified");
    openapiFields.add("LexiconArn");
    openapiFields.add("LexemesCount");
    openapiFields.add("Size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetLexiconOutputLexiconAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetLexiconOutputLexiconAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetLexiconOutputLexiconAttributes is not found in the empty JSON string", GetLexiconOutputLexiconAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetLexiconOutputLexiconAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetLexiconOutputLexiconAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Alphabet`
      if (jsonObj.get("Alphabet") != null && !jsonObj.get("Alphabet").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Alphabet"));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        LanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `LastModified`
      if (jsonObj.get("LastModified") != null && !jsonObj.get("LastModified").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModified"));
      }
      // validate the optional field `LexiconArn`
      if (jsonObj.get("LexiconArn") != null && !jsonObj.get("LexiconArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LexiconArn"));
      }
      // validate the optional field `LexemesCount`
      if (jsonObj.get("LexemesCount") != null && !jsonObj.get("LexemesCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LexemesCount"));
      }
      // validate the optional field `Size`
      if (jsonObj.get("Size") != null && !jsonObj.get("Size").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Size"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetLexiconOutputLexiconAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetLexiconOutputLexiconAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetLexiconOutputLexiconAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetLexiconOutputLexiconAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<GetLexiconOutputLexiconAttributes>() {
           @Override
           public void write(JsonWriter out, GetLexiconOutputLexiconAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetLexiconOutputLexiconAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetLexiconOutputLexiconAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetLexiconOutputLexiconAttributes
   * @throws IOException if the JSON string is invalid with respect to GetLexiconOutputLexiconAttributes
   */
  public static GetLexiconOutputLexiconAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetLexiconOutputLexiconAttributes.class);
  }

  /**
   * Convert an instance of GetLexiconOutputLexiconAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

