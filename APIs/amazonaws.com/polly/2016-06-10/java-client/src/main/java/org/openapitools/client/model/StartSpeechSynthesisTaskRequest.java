/*
 * Amazon Polly
 * <p>Amazon Polly is a web service that makes it easy to synthesize speech from text.</p> <p>The Amazon Polly service provides API operations for synthesizing high-quality speech from plain text and Speech Synthesis Markup Language (SSML), along with managing pronunciations lexicons that enable you to get the best results for your application domain.</p>
 *
 * The version of the OpenAPI document: 2016-06-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SpeechMarkType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartSpeechSynthesisTaskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:49.167874-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartSpeechSynthesisTaskRequest {
  /**
   * Specifies the engine (&lt;code&gt;standard&lt;/code&gt; or &lt;code&gt;neural&lt;/code&gt;) for Amazon Polly to use when processing input text for speech synthesis. Using a voice that is not supported for the engine selected will result in an error.
   */
  @JsonAdapter(EngineEnum.Adapter.class)
  public enum EngineEnum {
    STANDARD("standard"),
    
    NEURAL("neural");

    private String value;

    EngineEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineEnum fromValue(String value) {
      for (EngineEnum b : EngineEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EngineEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EngineEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EngineEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private EngineEnum engine;

  /**
   * &lt;p&gt;Optional language code for the Speech Synthesis request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). &lt;/p&gt; &lt;p&gt;If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\&quot;&gt;DescribeVoices&lt;/a&gt; operation for the &lt;code&gt;LanguageCode&lt;/code&gt; parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.&lt;/p&gt;
   */
  @JsonAdapter(LanguageCodeEnum.Adapter.class)
  public enum LanguageCodeEnum {
    ARB("arb"),
    
    CMN_CN("cmn-CN"),
    
    CY_GB("cy-GB"),
    
    DA_DK("da-DK"),
    
    DE_DE("de-DE"),
    
    EN_AU("en-AU"),
    
    EN_GB("en-GB"),
    
    EN_GB_WLS("en-GB-WLS"),
    
    EN_IN("en-IN"),
    
    EN_US("en-US"),
    
    ES_ES("es-ES"),
    
    ES_MX("es-MX"),
    
    ES_US("es-US"),
    
    FR_CA("fr-CA"),
    
    FR_FR("fr-FR"),
    
    IS_IS("is-IS"),
    
    IT_IT("it-IT"),
    
    JA_JP("ja-JP"),
    
    HI_IN("hi-IN"),
    
    KO_KR("ko-KR"),
    
    NB_NO("nb-NO"),
    
    NL_NL("nl-NL"),
    
    PL_PL("pl-PL"),
    
    PT_BR("pt-BR"),
    
    PT_PT("pt-PT"),
    
    RO_RO("ro-RO"),
    
    RU_RU("ru-RU"),
    
    SV_SE("sv-SE"),
    
    TR_TR("tr-TR"),
    
    EN_NZ("en-NZ"),
    
    EN_ZA("en-ZA"),
    
    CA_ES("ca-ES"),
    
    DE_AT("de-AT"),
    
    YUE_CN("yue-CN"),
    
    AR_AE("ar-AE"),
    
    FI_FI("fi-FI"),
    
    EN_IE("en-IE"),
    
    NL_BE("nl-BE"),
    
    FR_BE("fr-BE");

    private String value;

    LanguageCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageCodeEnum fromValue(String value) {
      for (LanguageCodeEnum b : LanguageCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private LanguageCodeEnum languageCode;

  public static final String SERIALIZED_NAME_LEXICON_NAMES = "LexiconNames";
  @SerializedName(SERIALIZED_NAME_LEXICON_NAMES)
  private List<String> lexiconNames = new ArrayList<>();

  /**
   * The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. 
   */
  @JsonAdapter(OutputFormatEnum.Adapter.class)
  public enum OutputFormatEnum {
    JSON("json"),
    
    MP3("mp3"),
    
    OGG_VORBIS("ogg_vorbis"),
    
    PCM("pcm");

    private String value;

    OutputFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputFormatEnum fromValue(String value) {
      for (OutputFormatEnum b : OutputFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutputFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "OutputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private OutputFormatEnum outputFormat;

  public static final String SERIALIZED_NAME_OUTPUT_S3_BUCKET_NAME = "OutputS3BucketName";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_BUCKET_NAME)
  private String outputS3BucketName;

  public static final String SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX = "OutputS3KeyPrefix";
  @SerializedName(SERIALIZED_NAME_OUTPUT_S3_KEY_PREFIX)
  private String outputS3KeyPrefix;

  public static final String SERIALIZED_NAME_SAMPLE_RATE = "SampleRate";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE)
  private String sampleRate;

  public static final String SERIALIZED_NAME_SNS_TOPIC_ARN = "SnsTopicArn";
  @SerializedName(SERIALIZED_NAME_SNS_TOPIC_ARN)
  private String snsTopicArn;

  public static final String SERIALIZED_NAME_SPEECH_MARK_TYPES = "SpeechMarkTypes";
  @SerializedName(SERIALIZED_NAME_SPEECH_MARK_TYPES)
  private List<SpeechMarkType> speechMarkTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  /**
   * Specifies whether the input text is plain text or SSML. The default value is plain text. 
   */
  @JsonAdapter(TextTypeEnum.Adapter.class)
  public enum TextTypeEnum {
    SSML("ssml"),
    
    TEXT("text");

    private String value;

    TextTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextTypeEnum fromValue(String value) {
      for (TextTypeEnum b : TextTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_TYPE = "TextType";
  @SerializedName(SERIALIZED_NAME_TEXT_TYPE)
  private TextTypeEnum textType;

  /**
   * Voice ID to use for the synthesis. 
   */
  @JsonAdapter(VoiceIdEnum.Adapter.class)
  public enum VoiceIdEnum {
    ADITI("Aditi"),
    
    AMY("Amy"),
    
    ASTRID("Astrid"),
    
    BIANCA("Bianca"),
    
    BRIAN("Brian"),
    
    CAMILA("Camila"),
    
    CARLA("Carla"),
    
    CARMEN("Carmen"),
    
    CELINE("Celine"),
    
    CHANTAL("Chantal"),
    
    CONCHITA("Conchita"),
    
    CRISTIANO("Cristiano"),
    
    DORA("Dora"),
    
    EMMA("Emma"),
    
    ENRIQUE("Enrique"),
    
    EWA("Ewa"),
    
    FILIZ("Filiz"),
    
    GABRIELLE("Gabrielle"),
    
    GERAINT("Geraint"),
    
    GIORGIO("Giorgio"),
    
    GWYNETH("Gwyneth"),
    
    HANS("Hans"),
    
    INES("Ines"),
    
    IVY("Ivy"),
    
    JACEK("Jacek"),
    
    JAN("Jan"),
    
    JOANNA("Joanna"),
    
    JOEY("Joey"),
    
    JUSTIN("Justin"),
    
    KARL("Karl"),
    
    KENDRA("Kendra"),
    
    KEVIN("Kevin"),
    
    KIMBERLY("Kimberly"),
    
    LEA("Lea"),
    
    LIV("Liv"),
    
    LOTTE("Lotte"),
    
    LUCIA("Lucia"),
    
    LUPE("Lupe"),
    
    MADS("Mads"),
    
    MAJA("Maja"),
    
    MARLENE("Marlene"),
    
    MATHIEU("Mathieu"),
    
    MATTHEW("Matthew"),
    
    MAXIM("Maxim"),
    
    MIA("Mia"),
    
    MIGUEL("Miguel"),
    
    MIZUKI("Mizuki"),
    
    NAJA("Naja"),
    
    NICOLE("Nicole"),
    
    OLIVIA("Olivia"),
    
    PENELOPE("Penelope"),
    
    RAVEENA("Raveena"),
    
    RICARDO("Ricardo"),
    
    RUBEN("Ruben"),
    
    RUSSELL("Russell"),
    
    SALLI("Salli"),
    
    SEOYEON("Seoyeon"),
    
    TAKUMI("Takumi"),
    
    TATYANA("Tatyana"),
    
    VICKI("Vicki"),
    
    VITORIA("Vitoria"),
    
    ZEINA("Zeina"),
    
    ZHIYU("Zhiyu"),
    
    ARIA("Aria"),
    
    AYANDA("Ayanda"),
    
    ARLET("Arlet"),
    
    HANNAH("Hannah"),
    
    ARTHUR("Arthur"),
    
    DANIEL("Daniel"),
    
    LIAM("Liam"),
    
    PEDRO("Pedro"),
    
    KAJAL("Kajal"),
    
    HIUJIN("Hiujin"),
    
    LAURA("Laura"),
    
    ELIN("Elin"),
    
    IDA("Ida"),
    
    SUVI("Suvi"),
    
    OLA("Ola"),
    
    HALA("Hala"),
    
    ANDRES("Andres"),
    
    SERGIO("Sergio"),
    
    REMI("Remi"),
    
    ADRIANO("Adriano"),
    
    THIAGO("Thiago"),
    
    RUTH("Ruth"),
    
    STEPHEN("Stephen"),
    
    KAZUHA("Kazuha"),
    
    TOMOKO("Tomoko"),
    
    NIAMH("Niamh"),
    
    SOFIE("Sofie"),
    
    LISA("Lisa"),
    
    ISABELLE("Isabelle");

    private String value;

    VoiceIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoiceIdEnum fromValue(String value) {
      for (VoiceIdEnum b : VoiceIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VoiceIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VoiceIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VoiceIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VoiceIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VoiceIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VOICE_ID = "VoiceId";
  @SerializedName(SERIALIZED_NAME_VOICE_ID)
  private VoiceIdEnum voiceId;

  public StartSpeechSynthesisTaskRequest() {
  }

  public StartSpeechSynthesisTaskRequest engine(EngineEnum engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Specifies the engine (&lt;code&gt;standard&lt;/code&gt; or &lt;code&gt;neural&lt;/code&gt;) for Amazon Polly to use when processing input text for speech synthesis. Using a voice that is not supported for the engine selected will result in an error.
   * @return engine
   */
  @javax.annotation.Nullable
  public EngineEnum getEngine() {
    return engine;
  }

  public void setEngine(EngineEnum engine) {
    this.engine = engine;
  }


  public StartSpeechSynthesisTaskRequest languageCode(LanguageCodeEnum languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * &lt;p&gt;Optional language code for the Speech Synthesis request. This is only necessary if using a bilingual voice, such as Aditi, which can be used for either Indian English (en-IN) or Hindi (hi-IN). &lt;/p&gt; &lt;p&gt;If a bilingual voice is used and no language code is specified, Amazon Polly uses the default language of the bilingual voice. The default language for any voice is the one returned by the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\&quot;&gt;DescribeVoices&lt;/a&gt; operation for the &lt;code&gt;LanguageCode&lt;/code&gt; parameter. For example, if no language code is specified, Aditi will use Indian English rather than Hindi.&lt;/p&gt;
   * @return languageCode
   */
  @javax.annotation.Nullable
  public LanguageCodeEnum getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(LanguageCodeEnum languageCode) {
    this.languageCode = languageCode;
  }


  public StartSpeechSynthesisTaskRequest lexiconNames(List<String> lexiconNames) {
    this.lexiconNames = lexiconNames;
    return this;
  }

  public StartSpeechSynthesisTaskRequest addLexiconNamesItem(String lexiconNamesItem) {
    if (this.lexiconNames == null) {
      this.lexiconNames = new ArrayList<>();
    }
    this.lexiconNames.add(lexiconNamesItem);
    return this;
  }

  /**
   * List of one or more pronunciation lexicon names you want the service to apply during synthesis. Lexicons are applied only if the language of the lexicon is the same as the language of the voice. 
   * @return lexiconNames
   */
  @javax.annotation.Nullable
  public List<String> getLexiconNames() {
    return lexiconNames;
  }

  public void setLexiconNames(List<String> lexiconNames) {
    this.lexiconNames = lexiconNames;
  }


  public StartSpeechSynthesisTaskRequest outputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * The format in which the returned output will be encoded. For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will be json. 
   * @return outputFormat
   */
  @javax.annotation.Nonnull
  public OutputFormatEnum getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
  }


  public StartSpeechSynthesisTaskRequest outputS3BucketName(String outputS3BucketName) {
    this.outputS3BucketName = outputS3BucketName;
    return this;
  }

  /**
   * Amazon S3 bucket name to which the output file will be saved.
   * @return outputS3BucketName
   */
  @javax.annotation.Nonnull
  public String getOutputS3BucketName() {
    return outputS3BucketName;
  }

  public void setOutputS3BucketName(String outputS3BucketName) {
    this.outputS3BucketName = outputS3BucketName;
  }


  public StartSpeechSynthesisTaskRequest outputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
    return this;
  }

  /**
   * The Amazon S3 key prefix for the output speech file.
   * @return outputS3KeyPrefix
   */
  @javax.annotation.Nullable
  public String getOutputS3KeyPrefix() {
    return outputS3KeyPrefix;
  }

  public void setOutputS3KeyPrefix(String outputS3KeyPrefix) {
    this.outputS3KeyPrefix = outputS3KeyPrefix;
  }


  public StartSpeechSynthesisTaskRequest sampleRate(String sampleRate) {
    this.sampleRate = sampleRate;
    return this;
  }

  /**
   * &lt;p&gt;The audio frequency specified in Hz.&lt;/p&gt; &lt;p&gt;The valid values for mp3 and ogg_vorbis are \&quot;8000\&quot;, \&quot;16000\&quot;, \&quot;22050\&quot;, and \&quot;24000\&quot;. The default value for standard voices is \&quot;22050\&quot;. The default value for neural voices is \&quot;24000\&quot;.&lt;/p&gt; &lt;p&gt;Valid values for pcm are \&quot;8000\&quot; and \&quot;16000\&quot; The default value is \&quot;16000\&quot;. &lt;/p&gt;
   * @return sampleRate
   */
  @javax.annotation.Nullable
  public String getSampleRate() {
    return sampleRate;
  }

  public void setSampleRate(String sampleRate) {
    this.sampleRate = sampleRate;
  }


  public StartSpeechSynthesisTaskRequest snsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
    return this;
  }

  /**
   * ARN for the SNS topic optionally used for providing status notification for a speech synthesis task.
   * @return snsTopicArn
   */
  @javax.annotation.Nullable
  public String getSnsTopicArn() {
    return snsTopicArn;
  }

  public void setSnsTopicArn(String snsTopicArn) {
    this.snsTopicArn = snsTopicArn;
  }


  public StartSpeechSynthesisTaskRequest speechMarkTypes(List<SpeechMarkType> speechMarkTypes) {
    this.speechMarkTypes = speechMarkTypes;
    return this;
  }

  public StartSpeechSynthesisTaskRequest addSpeechMarkTypesItem(SpeechMarkType speechMarkTypesItem) {
    if (this.speechMarkTypes == null) {
      this.speechMarkTypes = new ArrayList<>();
    }
    this.speechMarkTypes.add(speechMarkTypesItem);
    return this;
  }

  /**
   * The type of speech marks returned for the input text.
   * @return speechMarkTypes
   */
  @javax.annotation.Nullable
  public List<SpeechMarkType> getSpeechMarkTypes() {
    return speechMarkTypes;
  }

  public void setSpeechMarkTypes(List<SpeechMarkType> speechMarkTypes) {
    this.speechMarkTypes = speechMarkTypes;
  }


  public StartSpeechSynthesisTaskRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The input text to synthesize. If you specify ssml as the TextType, follow the SSML format for the input text. 
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public StartSpeechSynthesisTaskRequest textType(TextTypeEnum textType) {
    this.textType = textType;
    return this;
  }

  /**
   * Specifies whether the input text is plain text or SSML. The default value is plain text. 
   * @return textType
   */
  @javax.annotation.Nullable
  public TextTypeEnum getTextType() {
    return textType;
  }

  public void setTextType(TextTypeEnum textType) {
    this.textType = textType;
  }


  public StartSpeechSynthesisTaskRequest voiceId(VoiceIdEnum voiceId) {
    this.voiceId = voiceId;
    return this;
  }

  /**
   * Voice ID to use for the synthesis. 
   * @return voiceId
   */
  @javax.annotation.Nonnull
  public VoiceIdEnum getVoiceId() {
    return voiceId;
  }

  public void setVoiceId(VoiceIdEnum voiceId) {
    this.voiceId = voiceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartSpeechSynthesisTaskRequest startSpeechSynthesisTaskRequest = (StartSpeechSynthesisTaskRequest) o;
    return Objects.equals(this.engine, startSpeechSynthesisTaskRequest.engine) &&
        Objects.equals(this.languageCode, startSpeechSynthesisTaskRequest.languageCode) &&
        Objects.equals(this.lexiconNames, startSpeechSynthesisTaskRequest.lexiconNames) &&
        Objects.equals(this.outputFormat, startSpeechSynthesisTaskRequest.outputFormat) &&
        Objects.equals(this.outputS3BucketName, startSpeechSynthesisTaskRequest.outputS3BucketName) &&
        Objects.equals(this.outputS3KeyPrefix, startSpeechSynthesisTaskRequest.outputS3KeyPrefix) &&
        Objects.equals(this.sampleRate, startSpeechSynthesisTaskRequest.sampleRate) &&
        Objects.equals(this.snsTopicArn, startSpeechSynthesisTaskRequest.snsTopicArn) &&
        Objects.equals(this.speechMarkTypes, startSpeechSynthesisTaskRequest.speechMarkTypes) &&
        Objects.equals(this.text, startSpeechSynthesisTaskRequest.text) &&
        Objects.equals(this.textType, startSpeechSynthesisTaskRequest.textType) &&
        Objects.equals(this.voiceId, startSpeechSynthesisTaskRequest.voiceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engine, languageCode, lexiconNames, outputFormat, outputS3BucketName, outputS3KeyPrefix, sampleRate, snsTopicArn, speechMarkTypes, text, textType, voiceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartSpeechSynthesisTaskRequest {\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    lexiconNames: ").append(toIndentedString(lexiconNames)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    outputS3BucketName: ").append(toIndentedString(outputS3BucketName)).append("\n");
    sb.append("    outputS3KeyPrefix: ").append(toIndentedString(outputS3KeyPrefix)).append("\n");
    sb.append("    sampleRate: ").append(toIndentedString(sampleRate)).append("\n");
    sb.append("    snsTopicArn: ").append(toIndentedString(snsTopicArn)).append("\n");
    sb.append("    speechMarkTypes: ").append(toIndentedString(speechMarkTypes)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textType: ").append(toIndentedString(textType)).append("\n");
    sb.append("    voiceId: ").append(toIndentedString(voiceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Engine");
    openapiFields.add("LanguageCode");
    openapiFields.add("LexiconNames");
    openapiFields.add("OutputFormat");
    openapiFields.add("OutputS3BucketName");
    openapiFields.add("OutputS3KeyPrefix");
    openapiFields.add("SampleRate");
    openapiFields.add("SnsTopicArn");
    openapiFields.add("SpeechMarkTypes");
    openapiFields.add("Text");
    openapiFields.add("TextType");
    openapiFields.add("VoiceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OutputFormat");
    openapiRequiredFields.add("OutputS3BucketName");
    openapiRequiredFields.add("Text");
    openapiRequiredFields.add("VoiceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartSpeechSynthesisTaskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartSpeechSynthesisTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartSpeechSynthesisTaskRequest is not found in the empty JSON string", StartSpeechSynthesisTaskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartSpeechSynthesisTaskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartSpeechSynthesisTaskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartSpeechSynthesisTaskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) && !jsonObj.get("Engine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Engine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Engine").toString()));
      }
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        EngineEnum.validateJsonElement(jsonObj.get("Engine"));
      }
      if ((jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) && !jsonObj.get("LanguageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LanguageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LanguageCode").toString()));
      }
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        LanguageCodeEnum.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("LexiconNames") != null && !jsonObj.get("LexiconNames").isJsonNull() && !jsonObj.get("LexiconNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `LexiconNames` to be an array in the JSON string but got `%s`", jsonObj.get("LexiconNames").toString()));
      }
      if (!jsonObj.get("OutputFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutputFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OutputFormat").toString()));
      }
      // validate the required field `OutputFormat`
      OutputFormatEnum.validateJsonElement(jsonObj.get("OutputFormat"));
      if (!jsonObj.get("OutputS3BucketName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutputS3BucketName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OutputS3BucketName").toString()));
      }
      if ((jsonObj.get("OutputS3KeyPrefix") != null && !jsonObj.get("OutputS3KeyPrefix").isJsonNull()) && !jsonObj.get("OutputS3KeyPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutputS3KeyPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OutputS3KeyPrefix").toString()));
      }
      if ((jsonObj.get("SampleRate") != null && !jsonObj.get("SampleRate").isJsonNull()) && !jsonObj.get("SampleRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SampleRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SampleRate").toString()));
      }
      if ((jsonObj.get("SnsTopicArn") != null && !jsonObj.get("SnsTopicArn").isJsonNull()) && !jsonObj.get("SnsTopicArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SnsTopicArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SnsTopicArn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SpeechMarkTypes") != null && !jsonObj.get("SpeechMarkTypes").isJsonNull() && !jsonObj.get("SpeechMarkTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SpeechMarkTypes` to be an array in the JSON string but got `%s`", jsonObj.get("SpeechMarkTypes").toString()));
      }
      if (!jsonObj.get("Text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Text").toString()));
      }
      if ((jsonObj.get("TextType") != null && !jsonObj.get("TextType").isJsonNull()) && !jsonObj.get("TextType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TextType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TextType").toString()));
      }
      // validate the optional field `TextType`
      if (jsonObj.get("TextType") != null && !jsonObj.get("TextType").isJsonNull()) {
        TextTypeEnum.validateJsonElement(jsonObj.get("TextType"));
      }
      if (!jsonObj.get("VoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VoiceId").toString()));
      }
      // validate the required field `VoiceId`
      VoiceIdEnum.validateJsonElement(jsonObj.get("VoiceId"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartSpeechSynthesisTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartSpeechSynthesisTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartSpeechSynthesisTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartSpeechSynthesisTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartSpeechSynthesisTaskRequest>() {
           @Override
           public void write(JsonWriter out, StartSpeechSynthesisTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartSpeechSynthesisTaskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartSpeechSynthesisTaskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartSpeechSynthesisTaskRequest
   * @throws IOException if the JSON string is invalid with respect to StartSpeechSynthesisTaskRequest
   */
  public static StartSpeechSynthesisTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartSpeechSynthesisTaskRequest.class);
  }

  /**
   * Convert an instance of StartSpeechSynthesisTaskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

