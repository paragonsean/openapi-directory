openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<p>Amazon Polly is a web service that makes it easy to synthesize\
    \ speech from text.</p> <p>The Amazon Polly service provides API operations for\
    \ synthesizing high-quality speech from plain text and Speech Synthesis Markup\
    \ Language (SSML), along with managing pronunciations lexicons that enable you\
    \ to get the best results for your application domain.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Polly
  version: 2016-06-10
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: polly
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/polly-2016-06-10.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/polly/
servers:
- description: The Amazon Polly multi-region endpoint
  url: "http://polly.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Polly multi-region endpoint
  url: "https://polly.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Polly endpoint for China (Beijing) and China (Ningxia)
  url: "http://polly.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon Polly endpoint for China (Beijing) and China (Ningxia)
  url: "https://polly.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /v1/lexicons/{LexiconName}:
    delete:
      description: "<p>Deletes the specified pronunciation lexicon stored in an Amazon\
        \ Web Services Region. A lexicon which has been deleted is not available for\
        \ speech synthesis, nor is it possible to retrieve it using either the <code>GetLexicon</code>\
        \ or <code>ListLexicon</code> APIs.</p> <p>For more information, see <a href=\"\
        https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\
        \ Lexicons</a>.</p>"
      operationId: DeleteLexicon
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the lexicon to delete. Must be an existing lexicon
          in the region.
        explode: false
        in: path
        name: LexiconName
        required: true
        schema:
          pattern: "[0-9A-Za-z]{1,20}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLexiconOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LexiconNotFoundException'
          description: LexiconNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-accepts:
      - application/json
    get:
      description: "Returns the content of the specified pronunciation lexicon stored\
        \ in an Amazon Web Services Region. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\"\
        >Managing Lexicons</a>."
      operationId: GetLexicon
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Name of the lexicon.
        explode: false
        in: path
        name: LexiconName
        required: true
        schema:
          pattern: "[0-9A-Za-z]{1,20}"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLexiconOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LexiconNotFoundException'
          description: LexiconNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-accepts:
      - application/json
    put:
      description: "<p>Stores a pronunciation lexicon in an Amazon Web Services Region.\
        \ If a lexicon with the same name already exists in the region, it is overwritten\
        \ by the new lexicon. Lexicon operations have eventual consistency, therefore,\
        \ it might take some time before the lexicon is available to the SynthesizeSpeech\
        \ operation.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\"\
        >Managing Lexicons</a>.</p>"
      operationId: PutLexicon
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "Name of the lexicon. The name must follow the regular express\
          \ format [0-9A-Za-z]{1,20}. That is, the name is a case-sensitive alphanumeric\
          \ string up to 20 characters long. "
        explode: false
        in: path
        name: LexiconName
        required: true
        schema:
          pattern: "[0-9A-Za-z]{1,20}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLexicon_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutLexiconOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLexiconException'
          description: InvalidLexiconException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedPlsAlphabetException'
          description: UnsupportedPlsAlphabetException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedPlsLanguageException'
          description: UnsupportedPlsLanguageException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LexiconSizeExceededException'
          description: LexiconSizeExceededException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxLexemeLengthExceededException'
          description: MaxLexemeLengthExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaxLexiconsNumberExceededException'
          description: MaxLexiconsNumberExceededException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/voices:
    get:
      description: "<p>Returns the list of voices that are available for use when\
        \ requesting speech synthesis. Each voice speaks a specified language, is\
        \ either male or female, and is identified by an ID, which is the ASCII version\
        \ of the voice name. </p> <p>When synthesizing speech ( <code>SynthesizeSpeech</code>\
        \ ), you provide the voice ID for the voice you want from the list of voices\
        \ returned by <code>DescribeVoices</code>.</p> <p>For example, you want your\
        \ news reader application to read news in a specific language, but giving\
        \ a user the option to choose the voice. Using the <code>DescribeVoices</code>\
        \ operation you can provide the user with a list of available voices to select\
        \ from.</p> <p> You can optionally specify a language code to filter the available\
        \ voices. For example, if you specify <code>en-US</code>, the operation returns\
        \ a list of all available US English voices. </p> <p>This operation requires\
        \ permissions to perform the <code>polly:DescribeVoices</code> action.</p>"
      operationId: DescribeVoices
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: 'Specifies the engine (<code>standard</code> or <code>neural</code>)
          used by Amazon Polly when processing input text for speech synthesis. '
        explode: true
        in: query
        name: Engine
        required: false
        schema:
          enum:
          - standard
          - neural
          type: string
        style: form
      - description: " The language identification tag (ISO 639 code for the language\
          \ name-ISO 3166 country code) for filtering the list of voices returned.\
          \ If you don't specify this optional parameter, all available voices are\
          \ returned. "
        explode: true
        in: query
        name: LanguageCode
        required: false
        schema:
          enum:
          - arb
          - cmn-CN
          - cy-GB
          - da-DK
          - de-DE
          - en-AU
          - en-GB
          - en-GB-WLS
          - en-IN
          - en-US
          - es-ES
          - es-MX
          - es-US
          - fr-CA
          - fr-FR
          - is-IS
          - it-IT
          - ja-JP
          - hi-IN
          - ko-KR
          - nb-NO
          - nl-NL
          - pl-PL
          - pt-BR
          - pt-PT
          - ro-RO
          - ru-RU
          - sv-SE
          - tr-TR
          - en-NZ
          - en-ZA
          - ca-ES
          - de-AT
          - yue-CN
          - ar-AE
          - fi-FI
          - en-IE
          - nl-BE
          - fr-BE
          type: string
        style: form
      - description: "Boolean value indicating whether to return any bilingual voices\
          \ that use the specified language as an additional language. For instance,\
          \ if you request all languages that use US English (es-US), and there is\
          \ an Italian voice that speaks both Italian (it-IT) and US English, that\
          \ voice will be included if you specify <code>yes</code> but not if you\
          \ specify <code>no</code>."
        explode: true
        in: query
        name: IncludeAdditionalLanguageCodes
        required: false
        schema:
          type: boolean
        style: form
      - description: "An opaque pagination token returned from the previous <code>DescribeVoices</code>\
          \ operation. If present, this indicates where to continue the listing."
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          maxLength: 4096
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeVoicesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
          description: InvalidNextTokenException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-accepts:
      - application/json
  /v1/synthesisTasks/{TaskId}:
    get:
      description: "Retrieves a specific SpeechSynthesisTask object based on its TaskID.\
        \ This object contains information about the given speech synthesis task,\
        \ including the status of the task, and a link to the S3 bucket containing\
        \ the output of the task."
      operationId: GetSpeechSynthesisTask
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The Amazon Polly generated identifier for a speech synthesis
          task.
        explode: false
        in: path
        name: TaskId
        required: true
        schema:
          pattern: "^[a-zA-Z0-9_-]{1,100}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSpeechSynthesisTaskOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTaskIdException'
          description: InvalidTaskIdException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynthesisTaskNotFoundException'
          description: SynthesisTaskNotFoundException
      x-accepts:
      - application/json
  /v1/lexicons:
    get:
      description: "Returns a list of pronunciation lexicons stored in an Amazon Web\
        \ Services Region. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\"\
        >Managing Lexicons</a>."
      operationId: ListLexicons
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "An opaque pagination token returned from previous <code>ListLexicons</code>\
          \ operation. If present, indicates where to continue the list of lexicons."
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          maxLength: 4096
          minLength: 0
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLexiconsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
          description: InvalidNextTokenException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-accepts:
      - application/json
  /v1/synthesisTasks:
    get:
      description: "Returns a list of SpeechSynthesisTask objects ordered by their\
        \ creation date. This operation can filter the tasks by their status, for\
        \ example, allowing users to list only tasks that are completed."
      operationId: ListSpeechSynthesisTasks
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Maximum number of speech synthesis tasks returned in a List operation.
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: 'The pagination token to use in the next request to continue
          the listing of speech synthesis tasks. '
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          maxLength: 4096
          minLength: 0
          type: string
        style: form
      - description: Status of the speech synthesis tasks returned in a List operation
        explode: true
        in: query
        name: Status
        required: false
        schema:
          enum:
          - scheduled
          - inProgress
          - completed
          - failed
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSpeechSynthesisTasksOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNextTokenException'
          description: InvalidNextTokenException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
      x-accepts:
      - application/json
    post:
      description: "Allows the creation of an asynchronous synthesis task, by starting\
        \ a new <code>SpeechSynthesisTask</code>. This operation requires all the\
        \ standard information needed for speech synthesis, plus the name of an Amazon\
        \ S3 bucket for the service to store the output of the synthesis task and\
        \ two optional parameters (<code>OutputS3KeyPrefix</code> and <code>SnsTopicArn</code>).\
        \ Once the synthesis task is created, this operation will return a <code>SpeechSynthesisTask</code>\
        \ object, which will include an identifier of this task as well as the current\
        \ status. The <code>SpeechSynthesisTask</code> object is available for 72\
        \ hours after starting the asynchronous synthesis task."
      operationId: StartSpeechSynthesisTask
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartSpeechSynthesisTask_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartSpeechSynthesisTaskOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextLengthExceededException'
          description: TextLengthExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidS3BucketException'
          description: InvalidS3BucketException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidS3KeyException'
          description: InvalidS3KeyException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSampleRateException'
          description: InvalidSampleRateException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSnsTopicArnException'
          description: InvalidSnsTopicArnException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSsmlException'
          description: InvalidSsmlException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineNotSupportedException'
          description: EngineNotSupportedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LexiconNotFoundException'
          description: LexiconNotFoundException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarksNotSupportedForFormatException'
          description: MarksNotSupportedForFormatException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SsmlMarksNotSupportedForTextTypeException'
          description: SsmlMarksNotSupportedForTextTypeException
        "491":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageNotSupportedException'
          description: LanguageNotSupportedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/speech:
    post:
      description: "Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes.\
        \ SSML input must be valid, well-formed SSML. Some alphabets might not be\
        \ available with all the voices (for example, Cyrillic might not be read at\
        \ all by English voices) unless phoneme mapping is used. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html\"\
        >How it Works</a>."
      operationId: SynthesizeSpeech
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SynthesizeSpeech_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynthesizeSpeechOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextLengthExceededException'
          description: TextLengthExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSampleRateException'
          description: InvalidSampleRateException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSsmlException'
          description: InvalidSsmlException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LexiconNotFoundException'
          description: LexiconNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
          description: ServiceFailureException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarksNotSupportedForFormatException'
          description: MarksNotSupportedForFormatException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SsmlMarksNotSupportedForTextTypeException'
          description: SsmlMarksNotSupportedForTextTypeException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageNotSupportedException'
          description: LanguageNotSupportedException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EngineNotSupportedException'
          description: EngineNotSupportedException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    DeleteLexiconOutput:
      example: {}
      properties: {}
      type: object
    LexiconNotFoundException: {}
    ServiceFailureException: {}
    DescribeVoicesOutput:
      example:
        Voices:
        - Gender: Female
          Id: Emma
          LanguageCode: en-GB
          LanguageName: British English
          Name: Emma
        - Gender: Male
          Id: Brian
          LanguageCode: en-GB
          LanguageName: British English
          Name: Brian
        - Gender: Female
          Id: Amy
          LanguageCode: en-GB
          LanguageName: British English
          Name: Amy
      properties:
        Voices:
          allOf:
          - $ref: '#/components/schemas/VoiceList'
          - description: A list of voices with their properties.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The pagination token to use in the next request to continue
              the listing of voices. <code>NextToken</code> is returned only if the
              response is truncated.
      type: object
    InvalidNextTokenException: {}
    GetLexiconOutput:
      example:
        Lexicon:
          Content: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<lexicon version=\"\
            1.0\" \r\n      xmlns=\"http://www.w3.org/2005/01/pronunciation-lexicon\"\
            \r\n      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n\
            \      xsi:schemaLocation=\"http://www.w3.org/2005/01/pronunciation-lexicon\
            \ \r\n        http://www.w3.org/TR/2007/CR-pronunciation-lexicon-20071212/pls.xsd\"\
            \r\n      alphabet=\"ipa\" \r\n      xml:lang=\"en-US\">\r\n  <lexeme>\r\
            \n    <grapheme>W3C</grapheme>\r\n    <alias>World Wide Web Consortium</alias>\r\
            \n  </lexeme>\r\n</lexicon>"
          Name: example
        LexiconAttributes:
          Alphabet: ipa
          LanguageCode: en-US
          LastModified: 1.478542980117E9
          LexemesCount: 1
          LexiconArn: arn:aws:polly:us-east-1:123456789012:lexicon/example
          Size: 503
      properties:
        Lexicon:
          $ref: '#/components/schemas/GetLexiconOutput_Lexicon'
        LexiconAttributes:
          $ref: '#/components/schemas/GetLexiconOutput_LexiconAttributes'
      type: object
    GetSpeechSynthesisTaskOutput:
      example:
        SynthesisTask:
          TaskId: ""
          RequestCharacters: ""
          OutputFormat: ""
          OutputUri: ""
          TaskStatus: ""
          TaskStatusReason: ""
          TextType: ""
          LanguageCode: ""
          SampleRate: ""
          CreationTime: ""
          VoiceId: ""
          SnsTopicArn: ""
          LexiconNames: ""
          SpeechMarkTypes: ""
          Engine: ""
      properties:
        SynthesisTask:
          $ref: '#/components/schemas/GetSpeechSynthesisTaskOutput_SynthesisTask'
      type: object
    InvalidTaskIdException: {}
    SynthesisTaskNotFoundException: {}
    ListLexiconsOutput:
      example:
        Lexicons:
        - Attributes:
            Alphabet: ipa
            LanguageCode: en-US
            LastModified: 1.478542980117E9
            LexemesCount: 1
            LexiconArn: arn:aws:polly:us-east-1:123456789012:lexicon/example
            Size: 503
          Name: example
      properties:
        Lexicons:
          allOf:
          - $ref: '#/components/schemas/LexiconDescriptionList'
          - description: A list of lexicon names and attributes.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The pagination token to use in the next request to continue
              the listing of lexicons. <code>NextToken</code> is returned only if
              the response is truncated.
      type: object
    ListSpeechSynthesisTasksOutput:
      example:
        NextToken: ""
        SynthesisTasks: ""
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "An opaque pagination token returned from the previous List\
              \ operation in this request. If present, this indicates where to continue\
              \ the listing."
        SynthesisTasks:
          allOf:
          - $ref: '#/components/schemas/SynthesisTasks'
          - description: "List of SynthesisTask objects that provides information\
              \ from the specified task in the list request, including output format,\
              \ creation time, task status, and so on."
      type: object
    PutLexiconOutput:
      example: {}
      properties: {}
      type: object
    InvalidLexiconException: {}
    UnsupportedPlsAlphabetException: {}
    UnsupportedPlsLanguageException: {}
    LexiconSizeExceededException: {}
    MaxLexemeLengthExceededException: {}
    MaxLexiconsNumberExceededException: {}
    StartSpeechSynthesisTaskOutput:
      example:
        SynthesisTask:
          TaskId: ""
          RequestCharacters: ""
          OutputFormat: ""
          OutputUri: ""
          TaskStatus: ""
          TaskStatusReason: ""
          TextType: ""
          LanguageCode: ""
          SampleRate: ""
          CreationTime: ""
          VoiceId: ""
          SnsTopicArn: ""
          LexiconNames: ""
          SpeechMarkTypes: ""
          Engine: ""
      properties:
        SynthesisTask:
          $ref: '#/components/schemas/StartSpeechSynthesisTaskOutput_SynthesisTask'
      type: object
    LexiconName:
      pattern: "[0-9A-Za-z]{1,20}"
      type: string
    SpeechMarkType:
      enum:
      - sentence
      - ssml
      - viseme
      - word
      type: string
    TextLengthExceededException: {}
    InvalidS3BucketException: {}
    InvalidS3KeyException: {}
    InvalidSampleRateException: {}
    InvalidSnsTopicArnException: {}
    InvalidSsmlException: {}
    EngineNotSupportedException: {}
    MarksNotSupportedForFormatException: {}
    SsmlMarksNotSupportedForTextTypeException: {}
    LanguageNotSupportedException: {}
    SynthesizeSpeechOutput:
      example:
        AudioStream: TEXT
        ContentType: audio/mpeg
        RequestCharacters: 37
      properties:
        AudioStream:
          allOf:
          - $ref: '#/components/schemas/AudioStream'
          - description: ' Stream containing the synthesized speech. '
      type: object
    Alphabet:
      type: string
    AudioStream:
      type: string
    ContentType:
      type: string
    DateTime:
      format: date-time
      type: string
    DeleteLexiconInput:
      properties: {}
      title: DeleteLexiconInput
      type: object
    Engine:
      enum:
      - standard
      - neural
      type: string
    LanguageCode:
      enum:
      - arb
      - cmn-CN
      - cy-GB
      - da-DK
      - de-DE
      - en-AU
      - en-GB
      - en-GB-WLS
      - en-IN
      - en-US
      - es-ES
      - es-MX
      - es-US
      - fr-CA
      - fr-FR
      - is-IS
      - it-IT
      - ja-JP
      - hi-IN
      - ko-KR
      - nb-NO
      - nl-NL
      - pl-PL
      - pt-BR
      - pt-PT
      - ro-RO
      - ru-RU
      - sv-SE
      - tr-TR
      - en-NZ
      - en-ZA
      - ca-ES
      - de-AT
      - yue-CN
      - ar-AE
      - fi-FI
      - en-IE
      - nl-BE
      - fr-BE
      type: string
    IncludeAdditionalLanguageCodes:
      type: boolean
    NextToken:
      maxLength: 4096
      minLength: 0
      type: string
    DescribeVoicesInput:
      properties: {}
      title: DescribeVoicesInput
      type: object
    VoiceList:
      items:
        $ref: '#/components/schemas/Voice'
      type: array
    EngineList:
      items:
        $ref: '#/components/schemas/Engine'
      type: array
    Gender:
      enum:
      - Female
      - Male
      type: string
    GetLexiconInput:
      properties: {}
      title: GetLexiconInput
      type: object
    Lexicon:
      description: "Provides lexicon name and lexicon content in string format. For\
        \ more information, see <a href=\"https://www.w3.org/TR/pronunciation-lexicon/\"\
        >Pronunciation Lexicon Specification (PLS) Version 1.0</a>."
      properties:
        Content:
          allOf:
          - $ref: '#/components/schemas/LexiconContent'
          - description: Lexicon content in string format. The content of a lexicon
              must be in PLS format.
        Name:
          allOf:
          - $ref: '#/components/schemas/LexiconName'
          - description: Name of the lexicon.
      type: object
    LexiconAttributes:
      description: "Contains metadata describing the lexicon such as the number of\
        \ lexemes, language code, and so on. For more information, see <a href=\"\
        https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\
        \ Lexicons</a>."
      properties:
        Alphabet:
          allOf:
          - $ref: '#/components/schemas/Alphabet'
          - description: Phonetic alphabet used in the lexicon. Valid values are <code>ipa</code>
              and <code>x-sampa</code>.
        LanguageCode:
          allOf:
          - $ref: '#/components/schemas/LanguageCode'
          - description: "Language code that the lexicon applies to. A lexicon with\
              \ a language code such as \"en\" would be applied to all English languages\
              \ (en-GB, en-US, en-AUS, en-WLS, and so on."
        LastModified:
          allOf:
          - $ref: '#/components/schemas/LastModified'
          - description: Date lexicon was last modified (a timestamp value).
        LexiconArn:
          allOf:
          - $ref: '#/components/schemas/LexiconArn'
          - description: Amazon Resource Name (ARN) of the lexicon.
        LexemesCount:
          allOf:
          - $ref: '#/components/schemas/LexemesCount'
          - description: Number of lexemes in the lexicon.
        Size:
          allOf:
          - $ref: '#/components/schemas/Size'
          - description: "Total size of the lexicon, in characters."
      type: object
    TaskId:
      pattern: "^[a-zA-Z0-9_-]{1,100}$"
      type: string
    GetSpeechSynthesisTaskInput:
      properties: {}
      title: GetSpeechSynthesisTaskInput
      type: object
    SynthesisTask:
      description: SynthesisTask object that provides information about a speech synthesis
        task.
      properties:
        Engine:
          allOf:
          - $ref: '#/components/schemas/Engine'
          - description: Specifies the engine (<code>standard</code> or <code>neural</code>)
              for Amazon Polly to use when processing input text for speech synthesis.
              Using a voice that is not supported for the engine selected will result
              in an error.
        TaskId:
          allOf:
          - $ref: '#/components/schemas/TaskId'
          - description: The Amazon Polly generated identifier for a speech synthesis
              task.
        TaskStatus:
          allOf:
          - $ref: '#/components/schemas/TaskStatus'
          - description: Current status of the individual speech synthesis task.
        TaskStatusReason:
          allOf:
          - $ref: '#/components/schemas/TaskStatusReason'
          - description: "Reason for the current status of a specific speech synthesis\
              \ task, including errors if the task has failed."
        OutputUri:
          allOf:
          - $ref: '#/components/schemas/OutputUri'
          - description: Pathway for the output speech file.
        CreationTime:
          allOf:
          - $ref: '#/components/schemas/DateTime'
          - description: Timestamp for the time the synthesis task was started.
        RequestCharacters:
          allOf:
          - $ref: '#/components/schemas/RequestCharacters'
          - description: Number of billable characters synthesized.
        SnsTopicArn:
          allOf:
          - $ref: '#/components/schemas/SnsTopicArn'
          - description: ARN for the SNS topic optionally used for providing status
              notification for a speech synthesis task.
        LexiconNames:
          allOf:
          - $ref: '#/components/schemas/LexiconNameList'
          - description: 'List of one or more pronunciation lexicon names you want
              the service to apply during synthesis. Lexicons are applied only if
              the language of the lexicon is the same as the language of the voice. '
        OutputFormat:
          allOf:
          - $ref: '#/components/schemas/OutputFormat'
          - description: "The format in which the returned output will be encoded.\
              \ For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech\
              \ marks, this will be json. "
        SampleRate:
          allOf:
          - $ref: '#/components/schemas/SampleRate'
          - description: "<p>The audio frequency specified in Hz.</p> <p>The valid\
              \ values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\",\
              \ and \"24000\". The default value for standard voices is \"22050\"\
              . The default value for neural voices is \"24000\".</p> <p>Valid values\
              \ for pcm are \"8000\" and \"16000\" The default value is \"16000\"\
              . </p>"
        SpeechMarkTypes:
          allOf:
          - $ref: '#/components/schemas/SpeechMarkTypeList'
          - description: The type of speech marks returned for the input text.
        TextType:
          allOf:
          - $ref: '#/components/schemas/TextType'
          - description: 'Specifies whether the input text is plain text or SSML.
              The default value is plain text. '
        VoiceId:
          allOf:
          - $ref: '#/components/schemas/VoiceId'
          - description: 'Voice ID to use for the synthesis. '
        LanguageCode:
          allOf:
          - $ref: '#/components/schemas/LanguageCode'
          - description: "<p>Optional language code for a synthesis task. This is\
              \ only necessary if using a bilingual voice, such as Aditi, which can\
              \ be used for either Indian English (en-IN) or Hindi (hi-IN). </p> <p>If\
              \ a bilingual voice is used and no language code is specified, Amazon\
              \ Polly uses the default language of the bilingual voice. The default\
              \ language for any voice is the one returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\"\
              >DescribeVoices</a> operation for the <code>LanguageCode</code> parameter.\
              \ For example, if no language code is specified, Aditi will use Indian\
              \ English rather than Hindi.</p>"
      type: object
    LanguageCodeList:
      items:
        $ref: '#/components/schemas/LanguageCode'
      type: array
    LanguageName:
      type: string
    LastModified:
      format: date-time
      type: string
    LexemesCount:
      type: integer
    LexiconContent:
      format: password
      type: string
    LexiconArn:
      type: string
    Size:
      type: integer
    LexiconDescription:
      description: Describes the content of the lexicon.
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/LexiconName'
          - description: Name of the lexicon.
        Attributes:
          $ref: '#/components/schemas/LexiconDescription_Attributes'
      type: object
    LexiconDescriptionList:
      items:
        $ref: '#/components/schemas/LexiconDescription'
      type: array
    LexiconNameList:
      items:
        $ref: '#/components/schemas/LexiconName'
      maxItems: 5
      type: array
    ListLexiconsInput:
      properties: {}
      title: ListLexiconsInput
      type: object
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    TaskStatus:
      enum:
      - scheduled
      - inProgress
      - completed
      - failed
      type: string
    ListSpeechSynthesisTasksInput:
      properties: {}
      title: ListSpeechSynthesisTasksInput
      type: object
    SynthesisTasks:
      items:
        $ref: '#/components/schemas/SynthesisTask'
      type: array
    OutputFormat:
      enum:
      - json
      - mp3
      - ogg_vorbis
      - pcm
      type: string
    OutputS3BucketName:
      pattern: "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$"
      type: string
    OutputS3KeyPrefix:
      pattern: "^[0-9a-zA-Z\\/\\!\\-_\\.\\*\\'\\(\\):;\\$@=+\\,\\?&]{0,800}$"
      type: string
    OutputUri:
      type: string
    PutLexiconInput:
      properties:
        Content:
          allOf:
          - $ref: '#/components/schemas/LexiconContent'
          - description: Content of the PLS lexicon as string data.
      required:
      - Content
      title: PutLexiconInput
      type: object
    RequestCharacters:
      type: integer
    SampleRate:
      type: string
    SnsTopicArn:
      pattern: "^arn:aws(-(cn|iso(-b)?|us-gov))?:sns:[a-z0-9_-]{1,50}:\\d{12}:[a-zA-Z0-9_-]{1,256}$"
      type: string
    SpeechMarkTypeList:
      items:
        $ref: '#/components/schemas/SpeechMarkType'
      maxItems: 4
      type: array
    Text:
      type: string
    TextType:
      enum:
      - ssml
      - text
      type: string
    VoiceId:
      enum:
      - Aditi
      - Amy
      - Astrid
      - Bianca
      - Brian
      - Camila
      - Carla
      - Carmen
      - Celine
      - Chantal
      - Conchita
      - Cristiano
      - Dora
      - Emma
      - Enrique
      - Ewa
      - Filiz
      - Gabrielle
      - Geraint
      - Giorgio
      - Gwyneth
      - Hans
      - Ines
      - Ivy
      - Jacek
      - Jan
      - Joanna
      - Joey
      - Justin
      - Karl
      - Kendra
      - Kevin
      - Kimberly
      - Lea
      - Liv
      - Lotte
      - Lucia
      - Lupe
      - Mads
      - Maja
      - Marlene
      - Mathieu
      - Matthew
      - Maxim
      - Mia
      - Miguel
      - Mizuki
      - Naja
      - Nicole
      - Olivia
      - Penelope
      - Raveena
      - Ricardo
      - Ruben
      - Russell
      - Salli
      - Seoyeon
      - Takumi
      - Tatyana
      - Vicki
      - Vitoria
      - Zeina
      - Zhiyu
      - Aria
      - Ayanda
      - Arlet
      - Hannah
      - Arthur
      - Daniel
      - Liam
      - Pedro
      - Kajal
      - Hiujin
      - Laura
      - Elin
      - Ida
      - Suvi
      - Ola
      - Hala
      - Andres
      - Sergio
      - Remi
      - Adriano
      - Thiago
      - Ruth
      - Stephen
      - Kazuha
      - Tomoko
      - Niamh
      - Sofie
      - Lisa
      - Isabelle
      type: string
    StartSpeechSynthesisTaskInput:
      properties:
        Engine:
          allOf:
          - $ref: '#/components/schemas/Engine'
          - description: Specifies the engine (<code>standard</code> or <code>neural</code>)
              for Amazon Polly to use when processing input text for speech synthesis.
              Using a voice that is not supported for the engine selected will result
              in an error.
        LanguageCode:
          allOf:
          - $ref: '#/components/schemas/LanguageCode'
          - description: "<p>Optional language code for the Speech Synthesis request.\
              \ This is only necessary if using a bilingual voice, such as Aditi,\
              \ which can be used for either Indian English (en-IN) or Hindi (hi-IN).\
              \ </p> <p>If a bilingual voice is used and no language code is specified,\
              \ Amazon Polly uses the default language of the bilingual voice. The\
              \ default language for any voice is the one returned by the <a href=\"\
              https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\"\
              >DescribeVoices</a> operation for the <code>LanguageCode</code> parameter.\
              \ For example, if no language code is specified, Aditi will use Indian\
              \ English rather than Hindi.</p>"
        LexiconNames:
          allOf:
          - $ref: '#/components/schemas/LexiconNameList'
          - description: 'List of one or more pronunciation lexicon names you want
              the service to apply during synthesis. Lexicons are applied only if
              the language of the lexicon is the same as the language of the voice. '
        OutputFormat:
          allOf:
          - $ref: '#/components/schemas/OutputFormat'
          - description: "The format in which the returned output will be encoded.\
              \ For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech\
              \ marks, this will be json. "
        OutputS3BucketName:
          allOf:
          - $ref: '#/components/schemas/OutputS3BucketName'
          - description: Amazon S3 bucket name to which the output file will be saved.
        OutputS3KeyPrefix:
          allOf:
          - $ref: '#/components/schemas/OutputS3KeyPrefix'
          - description: The Amazon S3 key prefix for the output speech file.
        SampleRate:
          allOf:
          - $ref: '#/components/schemas/SampleRate'
          - description: "<p>The audio frequency specified in Hz.</p> <p>The valid\
              \ values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\",\
              \ and \"24000\". The default value for standard voices is \"22050\"\
              . The default value for neural voices is \"24000\".</p> <p>Valid values\
              \ for pcm are \"8000\" and \"16000\" The default value is \"16000\"\
              . </p>"
        SnsTopicArn:
          allOf:
          - $ref: '#/components/schemas/SnsTopicArn'
          - description: ARN for the SNS topic optionally used for providing status
              notification for a speech synthesis task.
        SpeechMarkTypes:
          allOf:
          - $ref: '#/components/schemas/SpeechMarkTypeList'
          - description: The type of speech marks returned for the input text.
        Text:
          allOf:
          - $ref: '#/components/schemas/Text'
          - description: "The input text to synthesize. If you specify ssml as the\
              \ TextType, follow the SSML format for the input text. "
        TextType:
          allOf:
          - $ref: '#/components/schemas/TextType'
          - description: 'Specifies whether the input text is plain text or SSML.
              The default value is plain text. '
        VoiceId:
          allOf:
          - $ref: '#/components/schemas/VoiceId'
          - description: 'Voice ID to use for the synthesis. '
      required:
      - OutputFormat
      - OutputS3BucketName
      - Text
      - VoiceId
      title: StartSpeechSynthesisTaskInput
      type: object
    TaskStatusReason:
      type: string
    SynthesizeSpeechInput:
      properties:
        Engine:
          allOf:
          - $ref: '#/components/schemas/Engine'
          - description: "<p>Specifies the engine (<code>standard</code> or <code>neural</code>)\
              \ for Amazon Polly to use when processing input text for speech synthesis.\
              \ For information on Amazon Polly voices and which voices are available\
              \ in standard-only, NTTS-only, and both standard and NTTS formats, see\
              \ <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\"\
              >Available Voices</a>.</p> <p> <b>NTTS-only voices</b> </p> <p>When\
              \ using NTTS-only voices such as Kevin (en-US), this parameter is required\
              \ and must be set to <code>neural</code>. If the engine is not specified,\
              \ or is set to <code>standard</code>, this will result in an error.\
              \ </p> <p>Type: String</p> <p>Valid Values: <code>standard</code> |\
              \ <code>neural</code> </p> <p>Required: Yes</p> <p> <b>Standard voices</b>\
              \ </p> <p>For standard voices, this is not required; the engine parameter\
              \ defaults to <code>standard</code>. If the engine is not specified,\
              \ or is set to <code>standard</code> and an NTTS-only voice is selected,\
              \ this will result in an error. </p>"
        LanguageCode:
          allOf:
          - $ref: '#/components/schemas/LanguageCode'
          - description: "<p>Optional language code for the Synthesize Speech request.\
              \ This is only necessary if using a bilingual voice, such as Aditi,\
              \ which can be used for either Indian English (en-IN) or Hindi (hi-IN).\
              \ </p> <p>If a bilingual voice is used and no language code is specified,\
              \ Amazon Polly uses the default language of the bilingual voice. The\
              \ default language for any voice is the one returned by the <a href=\"\
              https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\"\
              >DescribeVoices</a> operation for the <code>LanguageCode</code> parameter.\
              \ For example, if no language code is specified, Aditi will use Indian\
              \ English rather than Hindi.</p>"
        LexiconNames:
          allOf:
          - $ref: '#/components/schemas/LexiconNameList'
          - description: "List of one or more pronunciation lexicon names you want\
              \ the service to apply during synthesis. Lexicons are applied only if\
              \ the language of the lexicon is the same as the language of the voice.\
              \ For information about storing lexicons, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html\"\
              >PutLexicon</a>."
        OutputFormat:
          allOf:
          - $ref: '#/components/schemas/OutputFormat'
          - description: "<p> The format in which the returned output will be encoded.\
              \ For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech\
              \ marks, this will be json. </p> <p>When pcm is used, the content returned\
              \ is audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format.\
              \ </p>"
        SampleRate:
          allOf:
          - $ref: '#/components/schemas/SampleRate'
          - description: "<p>The audio frequency specified in Hz.</p> <p>The valid\
              \ values for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\",\
              \ and \"24000\". The default value for standard voices is \"22050\"\
              . The default value for neural voices is \"24000\".</p> <p>Valid values\
              \ for pcm are \"8000\" and \"16000\" The default value is \"16000\"\
              . </p>"
        SpeechMarkTypes:
          allOf:
          - $ref: '#/components/schemas/SpeechMarkTypeList'
          - description: The type of speech marks returned for the input text.
        Text:
          allOf:
          - $ref: '#/components/schemas/Text'
          - description: " Input text to synthesize. If you specify <code>ssml</code>\
              \ as the <code>TextType</code>, follow the SSML format for the input\
              \ text. "
        TextType:
          allOf:
          - $ref: '#/components/schemas/TextType'
          - description: " Specifies whether the input text is plain text or SSML.\
              \ The default value is plain text. For more information, see <a href=\"\
              https://docs.aws.amazon.com/polly/latest/dg/ssml.html\">Using SSML</a>."
        VoiceId:
          allOf:
          - $ref: '#/components/schemas/VoiceId'
          - description: ' Voice ID to use for the synthesis. You can get a list of
              available voice IDs by calling the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a>
              operation. '
      required:
      - OutputFormat
      - Text
      - VoiceId
      title: SynthesizeSpeechInput
      type: object
    VoiceName:
      type: string
    Voice:
      description: Description of the voice.
      properties:
        Gender:
          allOf:
          - $ref: '#/components/schemas/Gender'
          - description: Gender of the voice.
        Id:
          allOf:
          - $ref: '#/components/schemas/VoiceId'
          - description: Amazon Polly assigned voice ID. This is the ID that you specify
              when calling the <code>SynthesizeSpeech</code> operation.
        LanguageCode:
          allOf:
          - $ref: '#/components/schemas/LanguageCode'
          - description: Language code of the voice.
        LanguageName:
          allOf:
          - $ref: '#/components/schemas/LanguageName'
          - description: Human readable name of the language in English.
        Name:
          allOf:
          - $ref: '#/components/schemas/VoiceName'
          - description: "Name of the voice (for example, Salli, Kendra, etc.). This\
              \ provides a human readable voice name that you might display in your\
              \ application."
        AdditionalLanguageCodes:
          allOf:
          - $ref: '#/components/schemas/LanguageCodeList'
          - description: "<p>Additional codes for languages available for the specified\
              \ voice in addition to its default language. </p> <p>For example, the\
              \ default language for Aditi is Indian English (en-IN) because it was\
              \ first used for that language. Since Aditi is bilingual and fluent\
              \ in both Indian English and Hindi, this parameter would show the code\
              \ <code>hi-IN</code>.</p>"
        SupportedEngines:
          allOf:
          - $ref: '#/components/schemas/EngineList'
          - description: Specifies which engines (<code>standard</code> or <code>neural</code>)
              that are supported by a given voice.
      type: object
    PutLexicon_request:
      properties:
        Content:
          description: Content of the PLS lexicon as string data.
          format: password
          type: string
      required:
      - Content
      type: object
    StartSpeechSynthesisTask_request:
      properties:
        Engine:
          description: Specifies the engine (<code>standard</code> or <code>neural</code>)
            for Amazon Polly to use when processing input text for speech synthesis.
            Using a voice that is not supported for the engine selected will result
            in an error.
          enum:
          - standard
          - neural
          type: string
        LanguageCode:
          description: "<p>Optional language code for the Speech Synthesis request.\
            \ This is only necessary if using a bilingual voice, such as Aditi, which\
            \ can be used for either Indian English (en-IN) or Hindi (hi-IN). </p>\
            \ <p>If a bilingual voice is used and no language code is specified, Amazon\
            \ Polly uses the default language of the bilingual voice. The default\
            \ language for any voice is the one returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\"\
            >DescribeVoices</a> operation for the <code>LanguageCode</code> parameter.\
            \ For example, if no language code is specified, Aditi will use Indian\
            \ English rather than Hindi.</p>"
          enum:
          - arb
          - cmn-CN
          - cy-GB
          - da-DK
          - de-DE
          - en-AU
          - en-GB
          - en-GB-WLS
          - en-IN
          - en-US
          - es-ES
          - es-MX
          - es-US
          - fr-CA
          - fr-FR
          - is-IS
          - it-IT
          - ja-JP
          - hi-IN
          - ko-KR
          - nb-NO
          - nl-NL
          - pl-PL
          - pt-BR
          - pt-PT
          - ro-RO
          - ru-RU
          - sv-SE
          - tr-TR
          - en-NZ
          - en-ZA
          - ca-ES
          - de-AT
          - yue-CN
          - ar-AE
          - fi-FI
          - en-IE
          - nl-BE
          - fr-BE
          type: string
        LexiconNames:
          description: 'List of one or more pronunciation lexicon names you want the
            service to apply during synthesis. Lexicons are applied only if the language
            of the lexicon is the same as the language of the voice. '
          items:
            $ref: '#/components/schemas/LexiconName'
          maxItems: 5
          type: array
        OutputFormat:
          description: "The format in which the returned output will be encoded. For\
            \ audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks,\
            \ this will be json. "
          enum:
          - json
          - mp3
          - ogg_vorbis
          - pcm
          type: string
        OutputS3BucketName:
          description: Amazon S3 bucket name to which the output file will be saved.
          pattern: "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$"
          type: string
        OutputS3KeyPrefix:
          description: The Amazon S3 key prefix for the output speech file.
          pattern: "^[0-9a-zA-Z\\/\\!\\-_\\.\\*\\'\\(\\):;\\$@=+\\,\\?&]{0,800}$"
          type: string
        SampleRate:
          description: "<p>The audio frequency specified in Hz.</p> <p>The valid values\
            \ for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\"\
            . The default value for standard voices is \"22050\". The default value\
            \ for neural voices is \"24000\".</p> <p>Valid values for pcm are \"8000\"\
            \ and \"16000\" The default value is \"16000\". </p>"
          type: string
        SnsTopicArn:
          description: ARN for the SNS topic optionally used for providing status
            notification for a speech synthesis task.
          pattern: "^arn:aws(-(cn|iso(-b)?|us-gov))?:sns:[a-z0-9_-]{1,50}:\\d{12}:[a-zA-Z0-9_-]{1,256}$"
          type: string
        SpeechMarkTypes:
          description: The type of speech marks returned for the input text.
          items:
            $ref: '#/components/schemas/SpeechMarkType'
          maxItems: 4
          type: array
        Text:
          description: "The input text to synthesize. If you specify ssml as the TextType,\
            \ follow the SSML format for the input text. "
          type: string
        TextType:
          description: 'Specifies whether the input text is plain text or SSML. The
            default value is plain text. '
          enum:
          - ssml
          - text
          type: string
        VoiceId:
          description: 'Voice ID to use for the synthesis. '
          enum:
          - Aditi
          - Amy
          - Astrid
          - Bianca
          - Brian
          - Camila
          - Carla
          - Carmen
          - Celine
          - Chantal
          - Conchita
          - Cristiano
          - Dora
          - Emma
          - Enrique
          - Ewa
          - Filiz
          - Gabrielle
          - Geraint
          - Giorgio
          - Gwyneth
          - Hans
          - Ines
          - Ivy
          - Jacek
          - Jan
          - Joanna
          - Joey
          - Justin
          - Karl
          - Kendra
          - Kevin
          - Kimberly
          - Lea
          - Liv
          - Lotte
          - Lucia
          - Lupe
          - Mads
          - Maja
          - Marlene
          - Mathieu
          - Matthew
          - Maxim
          - Mia
          - Miguel
          - Mizuki
          - Naja
          - Nicole
          - Olivia
          - Penelope
          - Raveena
          - Ricardo
          - Ruben
          - Russell
          - Salli
          - Seoyeon
          - Takumi
          - Tatyana
          - Vicki
          - Vitoria
          - Zeina
          - Zhiyu
          - Aria
          - Ayanda
          - Arlet
          - Hannah
          - Arthur
          - Daniel
          - Liam
          - Pedro
          - Kajal
          - Hiujin
          - Laura
          - Elin
          - Ida
          - Suvi
          - Ola
          - Hala
          - Andres
          - Sergio
          - Remi
          - Adriano
          - Thiago
          - Ruth
          - Stephen
          - Kazuha
          - Tomoko
          - Niamh
          - Sofie
          - Lisa
          - Isabelle
          type: string
      required:
      - OutputFormat
      - OutputS3BucketName
      - Text
      - VoiceId
      type: object
    SynthesizeSpeech_request:
      properties:
        Engine:
          description: "<p>Specifies the engine (<code>standard</code> or <code>neural</code>)\
            \ for Amazon Polly to use when processing input text for speech synthesis.\
            \ For information on Amazon Polly voices and which voices are available\
            \ in standard-only, NTTS-only, and both standard and NTTS formats, see\
            \ <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\"\
            >Available Voices</a>.</p> <p> <b>NTTS-only voices</b> </p> <p>When using\
            \ NTTS-only voices such as Kevin (en-US), this parameter is required and\
            \ must be set to <code>neural</code>. If the engine is not specified,\
            \ or is set to <code>standard</code>, this will result in an error. </p>\
            \ <p>Type: String</p> <p>Valid Values: <code>standard</code> | <code>neural</code>\
            \ </p> <p>Required: Yes</p> <p> <b>Standard voices</b> </p> <p>For standard\
            \ voices, this is not required; the engine parameter defaults to <code>standard</code>.\
            \ If the engine is not specified, or is set to <code>standard</code> and\
            \ an NTTS-only voice is selected, this will result in an error. </p>"
          enum:
          - standard
          - neural
          type: string
        LanguageCode:
          description: "<p>Optional language code for the Synthesize Speech request.\
            \ This is only necessary if using a bilingual voice, such as Aditi, which\
            \ can be used for either Indian English (en-IN) or Hindi (hi-IN). </p>\
            \ <p>If a bilingual voice is used and no language code is specified, Amazon\
            \ Polly uses the default language of the bilingual voice. The default\
            \ language for any voice is the one returned by the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html\"\
            >DescribeVoices</a> operation for the <code>LanguageCode</code> parameter.\
            \ For example, if no language code is specified, Aditi will use Indian\
            \ English rather than Hindi.</p>"
          enum:
          - arb
          - cmn-CN
          - cy-GB
          - da-DK
          - de-DE
          - en-AU
          - en-GB
          - en-GB-WLS
          - en-IN
          - en-US
          - es-ES
          - es-MX
          - es-US
          - fr-CA
          - fr-FR
          - is-IS
          - it-IT
          - ja-JP
          - hi-IN
          - ko-KR
          - nb-NO
          - nl-NL
          - pl-PL
          - pt-BR
          - pt-PT
          - ro-RO
          - ru-RU
          - sv-SE
          - tr-TR
          - en-NZ
          - en-ZA
          - ca-ES
          - de-AT
          - yue-CN
          - ar-AE
          - fi-FI
          - en-IE
          - nl-BE
          - fr-BE
          type: string
        LexiconNames:
          description: "List of one or more pronunciation lexicon names you want the\
            \ service to apply during synthesis. Lexicons are applied only if the\
            \ language of the lexicon is the same as the language of the voice. For\
            \ information about storing lexicons, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html\"\
            >PutLexicon</a>."
          items:
            $ref: '#/components/schemas/LexiconName'
          maxItems: 5
          type: array
        OutputFormat:
          description: "<p> The format in which the returned output will be encoded.\
            \ For audio stream, this will be mp3, ogg_vorbis, or pcm. For speech marks,\
            \ this will be json. </p> <p>When pcm is used, the content returned is\
            \ audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format.\
            \ </p>"
          enum:
          - json
          - mp3
          - ogg_vorbis
          - pcm
          type: string
        SampleRate:
          description: "<p>The audio frequency specified in Hz.</p> <p>The valid values\
            \ for mp3 and ogg_vorbis are \"8000\", \"16000\", \"22050\", and \"24000\"\
            . The default value for standard voices is \"22050\". The default value\
            \ for neural voices is \"24000\".</p> <p>Valid values for pcm are \"8000\"\
            \ and \"16000\" The default value is \"16000\". </p>"
          type: string
        SpeechMarkTypes:
          description: The type of speech marks returned for the input text.
          items:
            $ref: '#/components/schemas/SpeechMarkType'
          maxItems: 4
          type: array
        Text:
          description: " Input text to synthesize. If you specify <code>ssml</code>\
            \ as the <code>TextType</code>, follow the SSML format for the input text. "
          type: string
        TextType:
          description: " Specifies whether the input text is plain text or SSML. The\
            \ default value is plain text. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/ssml.html\"\
            >Using SSML</a>."
          enum:
          - ssml
          - text
          type: string
        VoiceId:
          description: ' Voice ID to use for the synthesis. You can get a list of
            available voice IDs by calling the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a>
            operation. '
          enum:
          - Aditi
          - Amy
          - Astrid
          - Bianca
          - Brian
          - Camila
          - Carla
          - Carmen
          - Celine
          - Chantal
          - Conchita
          - Cristiano
          - Dora
          - Emma
          - Enrique
          - Ewa
          - Filiz
          - Gabrielle
          - Geraint
          - Giorgio
          - Gwyneth
          - Hans
          - Ines
          - Ivy
          - Jacek
          - Jan
          - Joanna
          - Joey
          - Justin
          - Karl
          - Kendra
          - Kevin
          - Kimberly
          - Lea
          - Liv
          - Lotte
          - Lucia
          - Lupe
          - Mads
          - Maja
          - Marlene
          - Mathieu
          - Matthew
          - Maxim
          - Mia
          - Miguel
          - Mizuki
          - Naja
          - Nicole
          - Olivia
          - Penelope
          - Raveena
          - Ricardo
          - Ruben
          - Russell
          - Salli
          - Seoyeon
          - Takumi
          - Tatyana
          - Vicki
          - Vitoria
          - Zeina
          - Zhiyu
          - Aria
          - Ayanda
          - Arlet
          - Hannah
          - Arthur
          - Daniel
          - Liam
          - Pedro
          - Kajal
          - Hiujin
          - Laura
          - Elin
          - Ida
          - Suvi
          - Ola
          - Hala
          - Andres
          - Sergio
          - Remi
          - Adriano
          - Thiago
          - Ruth
          - Stephen
          - Kazuha
          - Tomoko
          - Niamh
          - Sofie
          - Lisa
          - Isabelle
          type: string
      required:
      - OutputFormat
      - Text
      - VoiceId
      type: object
    GetLexiconOutput_Lexicon:
      allOf:
      - $ref: '#/components/schemas/Lexicon'
      - description: 'Lexicon object that provides name and the string content of
          the lexicon. '
    GetLexiconOutput_LexiconAttributes:
      allOf:
      - $ref: '#/components/schemas/LexiconAttributes'
      - description: "Metadata of the lexicon, including phonetic alphabetic used,\
          \ language code, lexicon ARN, number of lexemes defined in the lexicon,\
          \ and size of lexicon in bytes."
    GetSpeechSynthesisTaskOutput_SynthesisTask:
      allOf:
      - $ref: '#/components/schemas/SynthesisTask'
      - description: "SynthesisTask object that provides information from the requested\
          \ task, including output format, creation time, task status, and so on."
      example:
        TaskId: ""
        RequestCharacters: ""
        OutputFormat: ""
        OutputUri: ""
        TaskStatus: ""
        TaskStatusReason: ""
        TextType: ""
        LanguageCode: ""
        SampleRate: ""
        CreationTime: ""
        VoiceId: ""
        SnsTopicArn: ""
        LexiconNames: ""
        SpeechMarkTypes: ""
        Engine: ""
    StartSpeechSynthesisTaskOutput_SynthesisTask:
      allOf:
      - $ref: '#/components/schemas/SynthesisTask'
      - description: SynthesisTask object that provides information and attributes
          about a newly submitted speech synthesis task.
      example:
        TaskId: ""
        RequestCharacters: ""
        OutputFormat: ""
        OutputUri: ""
        TaskStatus: ""
        TaskStatusReason: ""
        TextType: ""
        LanguageCode: ""
        SampleRate: ""
        CreationTime: ""
        VoiceId: ""
        SnsTopicArn: ""
        LexiconNames: ""
        SpeechMarkTypes: ""
        Engine: ""
    LexiconDescription_Attributes:
      allOf:
      - $ref: '#/components/schemas/LexiconAttributes'
      - description: Provides lexicon metadata.
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4

