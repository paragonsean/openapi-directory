/**
 * AWS Marketplace Entitlement Service
 * <fullname>AWS Marketplace Entitlement Service</fullname> <p>This reference provides descriptions of the AWS Marketplace Entitlement Service API.</p> <p>AWS Marketplace Entitlement Service is used to determine the entitlement of a customer to a given product. An entitlement represents capacity in a product owned by the customer. For example, a customer might own some number of users or seats in an SaaS application or some amount of data capacity in a multi-tenant database.</p> <p> <b>Getting Entitlement Records</b> </p> <ul> <li> <p> <i>GetEntitlements</i>- Gets the entitlements for a Marketplace product.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetEntitlementsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetEntitlementsRequest::OAIGetEntitlementsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetEntitlementsRequest::OAIGetEntitlementsRequest() {
    this->initializeModel();
}

OAIGetEntitlementsRequest::~OAIGetEntitlementsRequest() {}

void OAIGetEntitlementsRequest::initializeModel() {

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetEntitlementsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetEntitlementsRequest::fromJsonObject(QJsonObject json) {

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("ProductCode")]);
    m_product_code_isSet = !json[QString("ProductCode")].isNull() && m_product_code_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetEntitlementsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetEntitlementsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_product_code_isSet) {
        obj.insert(QString("ProductCode"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIGetEntitlementsRequest::getProductCode() const {
    return m_product_code;
}
void OAIGetEntitlementsRequest::setProductCode(const QString &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAIGetEntitlementsRequest::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAIGetEntitlementsRequest::is_product_code_Valid() const{
    return m_product_code_isValid;
}

QMap OAIGetEntitlementsRequest::getFilter() const {
    return m_filter;
}
void OAIGetEntitlementsRequest::setFilter(const QMap &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGetEntitlementsRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGetEntitlementsRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIGetEntitlementsRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetEntitlementsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetEntitlementsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetEntitlementsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetEntitlementsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetEntitlementsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetEntitlementsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetEntitlementsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetEntitlementsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetEntitlementsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_code_isValid && true;
}

} // namespace OpenAPI
