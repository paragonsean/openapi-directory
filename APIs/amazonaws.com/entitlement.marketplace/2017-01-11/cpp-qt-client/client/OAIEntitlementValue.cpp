/**
 * AWS Marketplace Entitlement Service
 * <fullname>AWS Marketplace Entitlement Service</fullname> <p>This reference provides descriptions of the AWS Marketplace Entitlement Service API.</p> <p>AWS Marketplace Entitlement Service is used to determine the entitlement of a customer to a given product. An entitlement represents capacity in a product owned by the customer. For example, a customer might own some number of users or seats in an SaaS application or some amount of data capacity in a multi-tenant database.</p> <p> <b>Getting Entitlement Records</b> </p> <ul> <li> <p> <i>GetEntitlements</i>- Gets the entitlements for a Marketplace product.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitlementValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitlementValue::OAIEntitlementValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitlementValue::OAIEntitlementValue() {
    this->initializeModel();
}

OAIEntitlementValue::~OAIEntitlementValue() {}

void OAIEntitlementValue::initializeModel() {

    m_integer_value_isSet = false;
    m_integer_value_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIEntitlementValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntitlementValue::fromJsonObject(QJsonObject json) {

    m_integer_value_isValid = ::OpenAPI::fromJsonValue(m_integer_value, json[QString("IntegerValue")]);
    m_integer_value_isSet = !json[QString("IntegerValue")].isNull() && m_integer_value_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("DoubleValue")]);
    m_double_value_isSet = !json[QString("DoubleValue")].isNull() && m_double_value_isValid;

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("BooleanValue")]);
    m_boolean_value_isSet = !json[QString("BooleanValue")].isNull() && m_boolean_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("StringValue")]);
    m_string_value_isSet = !json[QString("StringValue")].isNull() && m_string_value_isValid;
}

QString OAIEntitlementValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntitlementValue::asJsonObject() const {
    QJsonObject obj;
    if (m_integer_value_isSet) {
        obj.insert(QString("IntegerValue"), ::OpenAPI::toJsonValue(m_integer_value));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("DoubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_boolean_value_isSet) {
        obj.insert(QString("BooleanValue"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("StringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

qint32 OAIEntitlementValue::getIntegerValue() const {
    return m_integer_value;
}
void OAIEntitlementValue::setIntegerValue(const qint32 &integer_value) {
    m_integer_value = integer_value;
    m_integer_value_isSet = true;
}

bool OAIEntitlementValue::is_integer_value_Set() const{
    return m_integer_value_isSet;
}

bool OAIEntitlementValue::is_integer_value_Valid() const{
    return m_integer_value_isValid;
}

double OAIEntitlementValue::getDoubleValue() const {
    return m_double_value;
}
void OAIEntitlementValue::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIEntitlementValue::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIEntitlementValue::is_double_value_Valid() const{
    return m_double_value_isValid;
}

bool OAIEntitlementValue::getBooleanValue() const {
    return m_boolean_value;
}
void OAIEntitlementValue::setBooleanValue(const bool &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAIEntitlementValue::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAIEntitlementValue::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

QString OAIEntitlementValue::getStringValue() const {
    return m_string_value;
}
void OAIEntitlementValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIEntitlementValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIEntitlementValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIEntitlementValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_integer_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntitlementValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
