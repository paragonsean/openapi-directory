/**
 * AWS Marketplace Entitlement Service
 * <fullname>AWS Marketplace Entitlement Service</fullname> <p>This reference provides descriptions of the AWS Marketplace Entitlement Service API.</p> <p>AWS Marketplace Entitlement Service is used to determine the entitlement of a customer to a given product. An entitlement represents capacity in a product owned by the customer. For example, a customer might own some number of users or seats in an SaaS application or some amount of data capacity in a multi-tenant database.</p> <p> <b>Getting Entitlement Records</b> </p> <ul> <li> <p> <i>GetEntitlements</i>- Gets the entitlements for a Marketplace product.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitlement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitlement::OAIEntitlement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitlement::OAIEntitlement() {
    this->initializeModel();
}

OAIEntitlement::~OAIEntitlement() {}

void OAIEntitlement::initializeModel() {

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_customer_identifier_isSet = false;
    m_customer_identifier_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;
}

void OAIEntitlement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntitlement::fromJsonObject(QJsonObject json) {

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("ProductCode")]);
    m_product_code_isSet = !json[QString("ProductCode")].isNull() && m_product_code_isValid;

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("Dimension")]);
    m_dimension_isSet = !json[QString("Dimension")].isNull() && m_dimension_isValid;

    m_customer_identifier_isValid = ::OpenAPI::fromJsonValue(m_customer_identifier, json[QString("CustomerIdentifier")]);
    m_customer_identifier_isSet = !json[QString("CustomerIdentifier")].isNull() && m_customer_identifier_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("ExpirationDate")]);
    m_expiration_date_isSet = !json[QString("ExpirationDate")].isNull() && m_expiration_date_isValid;
}

QString OAIEntitlement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntitlement::asJsonObject() const {
    QJsonObject obj;
    if (m_product_code_isSet) {
        obj.insert(QString("ProductCode"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_dimension_isSet) {
        obj.insert(QString("Dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_customer_identifier_isSet) {
        obj.insert(QString("CustomerIdentifier"), ::OpenAPI::toJsonValue(m_customer_identifier));
    }
    if (m_value.isSet()) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("ExpirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    return obj;
}

QString OAIEntitlement::getProductCode() const {
    return m_product_code;
}
void OAIEntitlement::setProductCode(const QString &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAIEntitlement::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAIEntitlement::is_product_code_Valid() const{
    return m_product_code_isValid;
}

QString OAIEntitlement::getDimension() const {
    return m_dimension;
}
void OAIEntitlement::setDimension(const QString &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAIEntitlement::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAIEntitlement::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QString OAIEntitlement::getCustomerIdentifier() const {
    return m_customer_identifier;
}
void OAIEntitlement::setCustomerIdentifier(const QString &customer_identifier) {
    m_customer_identifier = customer_identifier;
    m_customer_identifier_isSet = true;
}

bool OAIEntitlement::is_customer_identifier_Set() const{
    return m_customer_identifier_isSet;
}

bool OAIEntitlement::is_customer_identifier_Valid() const{
    return m_customer_identifier_isValid;
}

OAIEntitlement_Value OAIEntitlement::getValue() const {
    return m_value;
}
void OAIEntitlement::setValue(const OAIEntitlement_Value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEntitlement::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEntitlement::is_value_Valid() const{
    return m_value_isValid;
}

QDateTime OAIEntitlement::getExpirationDate() const {
    return m_expiration_date;
}
void OAIEntitlement::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIEntitlement::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIEntitlement::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

bool OAIEntitlement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntitlement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
