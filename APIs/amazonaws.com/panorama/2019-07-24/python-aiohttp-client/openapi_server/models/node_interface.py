# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inputs: List=None, outputs: List=None):
        """NodeInterface - a model defined in OpenAPI

        :param inputs: The inputs of this NodeInterface.
        :param outputs: The outputs of this NodeInterface.
        """
        self.openapi_types = {
            'inputs': List,
            'outputs': List
        }

        self.attribute_map = {
            'inputs': 'Inputs',
            'outputs': 'Outputs'
        }

        self._inputs = inputs
        self._outputs = outputs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeInterface of this NodeInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inputs(self):
        """Gets the inputs of this NodeInterface.


        :return: The inputs of this NodeInterface.
        :rtype: List
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this NodeInterface.


        :param inputs: The inputs of this NodeInterface.
        :type inputs: List
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this NodeInterface.


        :return: The outputs of this NodeInterface.
        :rtype: List
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this NodeInterface.


        :param outputs: The outputs of this NodeInterface.
        :type outputs: List
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")

        self._outputs = outputs
