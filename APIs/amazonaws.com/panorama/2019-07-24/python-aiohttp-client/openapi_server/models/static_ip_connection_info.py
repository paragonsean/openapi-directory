# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StaticIpConnectionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_gateway: str=None, dns: List=None, ip_address: str=None, mask: str=None):
        """StaticIpConnectionInfo - a model defined in OpenAPI

        :param default_gateway: The default_gateway of this StaticIpConnectionInfo.
        :param dns: The dns of this StaticIpConnectionInfo.
        :param ip_address: The ip_address of this StaticIpConnectionInfo.
        :param mask: The mask of this StaticIpConnectionInfo.
        """
        self.openapi_types = {
            'default_gateway': str,
            'dns': List,
            'ip_address': str,
            'mask': str
        }

        self.attribute_map = {
            'default_gateway': 'DefaultGateway',
            'dns': 'Dns',
            'ip_address': 'IpAddress',
            'mask': 'Mask'
        }

        self._default_gateway = default_gateway
        self._dns = dns
        self._ip_address = ip_address
        self._mask = mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StaticIpConnectionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StaticIpConnectionInfo of this StaticIpConnectionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_gateway(self):
        """Gets the default_gateway of this StaticIpConnectionInfo.


        :return: The default_gateway of this StaticIpConnectionInfo.
        :rtype: str
        """
        return self._default_gateway

    @default_gateway.setter
    def default_gateway(self, default_gateway):
        """Sets the default_gateway of this StaticIpConnectionInfo.


        :param default_gateway: The default_gateway of this StaticIpConnectionInfo.
        :type default_gateway: str
        """
        if default_gateway is None:
            raise ValueError("Invalid value for `default_gateway`, must not be `None`")

        self._default_gateway = default_gateway

    @property
    def dns(self):
        """Gets the dns of this StaticIpConnectionInfo.


        :return: The dns of this StaticIpConnectionInfo.
        :rtype: List
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this StaticIpConnectionInfo.


        :param dns: The dns of this StaticIpConnectionInfo.
        :type dns: List
        """
        if dns is None:
            raise ValueError("Invalid value for `dns`, must not be `None`")

        self._dns = dns

    @property
    def ip_address(self):
        """Gets the ip_address of this StaticIpConnectionInfo.


        :return: The ip_address of this StaticIpConnectionInfo.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this StaticIpConnectionInfo.


        :param ip_address: The ip_address of this StaticIpConnectionInfo.
        :type ip_address: str
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")

        self._ip_address = ip_address

    @property
    def mask(self):
        """Gets the mask of this StaticIpConnectionInfo.


        :return: The mask of this StaticIpConnectionInfo.
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this StaticIpConnectionInfo.


        :param mask: The mask of this StaticIpConnectionInfo.
        :type mask: str
        """
        if mask is None:
            raise ValueError("Invalid value for `mask`, must not be `None`")

        self._mask = mask
