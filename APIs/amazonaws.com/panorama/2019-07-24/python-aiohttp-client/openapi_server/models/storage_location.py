# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, binary_prefix_location: str=None, bucket: str=None, generated_prefix_location: str=None, manifest_prefix_location: str=None, repo_prefix_location: str=None):
        """StorageLocation - a model defined in OpenAPI

        :param binary_prefix_location: The binary_prefix_location of this StorageLocation.
        :param bucket: The bucket of this StorageLocation.
        :param generated_prefix_location: The generated_prefix_location of this StorageLocation.
        :param manifest_prefix_location: The manifest_prefix_location of this StorageLocation.
        :param repo_prefix_location: The repo_prefix_location of this StorageLocation.
        """
        self.openapi_types = {
            'binary_prefix_location': str,
            'bucket': str,
            'generated_prefix_location': str,
            'manifest_prefix_location': str,
            'repo_prefix_location': str
        }

        self.attribute_map = {
            'binary_prefix_location': 'BinaryPrefixLocation',
            'bucket': 'Bucket',
            'generated_prefix_location': 'GeneratedPrefixLocation',
            'manifest_prefix_location': 'ManifestPrefixLocation',
            'repo_prefix_location': 'RepoPrefixLocation'
        }

        self._binary_prefix_location = binary_prefix_location
        self._bucket = bucket
        self._generated_prefix_location = generated_prefix_location
        self._manifest_prefix_location = manifest_prefix_location
        self._repo_prefix_location = repo_prefix_location

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageLocation of this StorageLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def binary_prefix_location(self):
        """Gets the binary_prefix_location of this StorageLocation.


        :return: The binary_prefix_location of this StorageLocation.
        :rtype: str
        """
        return self._binary_prefix_location

    @binary_prefix_location.setter
    def binary_prefix_location(self, binary_prefix_location):
        """Sets the binary_prefix_location of this StorageLocation.


        :param binary_prefix_location: The binary_prefix_location of this StorageLocation.
        :type binary_prefix_location: str
        """
        if binary_prefix_location is None:
            raise ValueError("Invalid value for `binary_prefix_location`, must not be `None`")

        self._binary_prefix_location = binary_prefix_location

    @property
    def bucket(self):
        """Gets the bucket of this StorageLocation.


        :return: The bucket of this StorageLocation.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this StorageLocation.


        :param bucket: The bucket of this StorageLocation.
        :type bucket: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")

        self._bucket = bucket

    @property
    def generated_prefix_location(self):
        """Gets the generated_prefix_location of this StorageLocation.


        :return: The generated_prefix_location of this StorageLocation.
        :rtype: str
        """
        return self._generated_prefix_location

    @generated_prefix_location.setter
    def generated_prefix_location(self, generated_prefix_location):
        """Sets the generated_prefix_location of this StorageLocation.


        :param generated_prefix_location: The generated_prefix_location of this StorageLocation.
        :type generated_prefix_location: str
        """
        if generated_prefix_location is None:
            raise ValueError("Invalid value for `generated_prefix_location`, must not be `None`")

        self._generated_prefix_location = generated_prefix_location

    @property
    def manifest_prefix_location(self):
        """Gets the manifest_prefix_location of this StorageLocation.


        :return: The manifest_prefix_location of this StorageLocation.
        :rtype: str
        """
        return self._manifest_prefix_location

    @manifest_prefix_location.setter
    def manifest_prefix_location(self, manifest_prefix_location):
        """Sets the manifest_prefix_location of this StorageLocation.


        :param manifest_prefix_location: The manifest_prefix_location of this StorageLocation.
        :type manifest_prefix_location: str
        """
        if manifest_prefix_location is None:
            raise ValueError("Invalid value for `manifest_prefix_location`, must not be `None`")

        self._manifest_prefix_location = manifest_prefix_location

    @property
    def repo_prefix_location(self):
        """Gets the repo_prefix_location of this StorageLocation.


        :return: The repo_prefix_location of this StorageLocation.
        :rtype: str
        """
        return self._repo_prefix_location

    @repo_prefix_location.setter
    def repo_prefix_location(self, repo_prefix_location):
        """Sets the repo_prefix_location of this StorageLocation.


        :param repo_prefix_location: The repo_prefix_location of this StorageLocation.
        :type repo_prefix_location: str
        """
        if repo_prefix_location is None:
            raise ValueError("Invalid value for `repo_prefix_location`, must not be `None`")

        self._repo_prefix_location = repo_prefix_location
