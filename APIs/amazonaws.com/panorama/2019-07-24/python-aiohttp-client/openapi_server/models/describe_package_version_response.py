# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.package_version_status import PackageVersionStatus
from openapi_server import util


class DescribePackageVersionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_latest_patch: bool=None, owner_account: str=None, package_arn: str=None, package_id: str=None, package_name: str=None, package_version: str=None, patch_version: str=None, registered_time: datetime=None, status: PackageVersionStatus=None, status_description: str=None):
        """DescribePackageVersionResponse - a model defined in OpenAPI

        :param is_latest_patch: The is_latest_patch of this DescribePackageVersionResponse.
        :param owner_account: The owner_account of this DescribePackageVersionResponse.
        :param package_arn: The package_arn of this DescribePackageVersionResponse.
        :param package_id: The package_id of this DescribePackageVersionResponse.
        :param package_name: The package_name of this DescribePackageVersionResponse.
        :param package_version: The package_version of this DescribePackageVersionResponse.
        :param patch_version: The patch_version of this DescribePackageVersionResponse.
        :param registered_time: The registered_time of this DescribePackageVersionResponse.
        :param status: The status of this DescribePackageVersionResponse.
        :param status_description: The status_description of this DescribePackageVersionResponse.
        """
        self.openapi_types = {
            'is_latest_patch': bool,
            'owner_account': str,
            'package_arn': str,
            'package_id': str,
            'package_name': str,
            'package_version': str,
            'patch_version': str,
            'registered_time': datetime,
            'status': PackageVersionStatus,
            'status_description': str
        }

        self.attribute_map = {
            'is_latest_patch': 'IsLatestPatch',
            'owner_account': 'OwnerAccount',
            'package_arn': 'PackageArn',
            'package_id': 'PackageId',
            'package_name': 'PackageName',
            'package_version': 'PackageVersion',
            'patch_version': 'PatchVersion',
            'registered_time': 'RegisteredTime',
            'status': 'Status',
            'status_description': 'StatusDescription'
        }

        self._is_latest_patch = is_latest_patch
        self._owner_account = owner_account
        self._package_arn = package_arn
        self._package_id = package_id
        self._package_name = package_name
        self._package_version = package_version
        self._patch_version = patch_version
        self._registered_time = registered_time
        self._status = status
        self._status_description = status_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribePackageVersionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribePackageVersionResponse of this DescribePackageVersionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_latest_patch(self):
        """Gets the is_latest_patch of this DescribePackageVersionResponse.


        :return: The is_latest_patch of this DescribePackageVersionResponse.
        :rtype: bool
        """
        return self._is_latest_patch

    @is_latest_patch.setter
    def is_latest_patch(self, is_latest_patch):
        """Sets the is_latest_patch of this DescribePackageVersionResponse.


        :param is_latest_patch: The is_latest_patch of this DescribePackageVersionResponse.
        :type is_latest_patch: bool
        """
        if is_latest_patch is None:
            raise ValueError("Invalid value for `is_latest_patch`, must not be `None`")

        self._is_latest_patch = is_latest_patch

    @property
    def owner_account(self):
        """Gets the owner_account of this DescribePackageVersionResponse.


        :return: The owner_account of this DescribePackageVersionResponse.
        :rtype: str
        """
        return self._owner_account

    @owner_account.setter
    def owner_account(self, owner_account):
        """Sets the owner_account of this DescribePackageVersionResponse.


        :param owner_account: The owner_account of this DescribePackageVersionResponse.
        :type owner_account: str
        """

        self._owner_account = owner_account

    @property
    def package_arn(self):
        """Gets the package_arn of this DescribePackageVersionResponse.


        :return: The package_arn of this DescribePackageVersionResponse.
        :rtype: str
        """
        return self._package_arn

    @package_arn.setter
    def package_arn(self, package_arn):
        """Sets the package_arn of this DescribePackageVersionResponse.


        :param package_arn: The package_arn of this DescribePackageVersionResponse.
        :type package_arn: str
        """

        self._package_arn = package_arn

    @property
    def package_id(self):
        """Gets the package_id of this DescribePackageVersionResponse.


        :return: The package_id of this DescribePackageVersionResponse.
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this DescribePackageVersionResponse.


        :param package_id: The package_id of this DescribePackageVersionResponse.
        :type package_id: str
        """
        if package_id is None:
            raise ValueError("Invalid value for `package_id`, must not be `None`")

        self._package_id = package_id

    @property
    def package_name(self):
        """Gets the package_name of this DescribePackageVersionResponse.


        :return: The package_name of this DescribePackageVersionResponse.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this DescribePackageVersionResponse.


        :param package_name: The package_name of this DescribePackageVersionResponse.
        :type package_name: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")

        self._package_name = package_name

    @property
    def package_version(self):
        """Gets the package_version of this DescribePackageVersionResponse.


        :return: The package_version of this DescribePackageVersionResponse.
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this DescribePackageVersionResponse.


        :param package_version: The package_version of this DescribePackageVersionResponse.
        :type package_version: str
        """
        if package_version is None:
            raise ValueError("Invalid value for `package_version`, must not be `None`")

        self._package_version = package_version

    @property
    def patch_version(self):
        """Gets the patch_version of this DescribePackageVersionResponse.


        :return: The patch_version of this DescribePackageVersionResponse.
        :rtype: str
        """
        return self._patch_version

    @patch_version.setter
    def patch_version(self, patch_version):
        """Sets the patch_version of this DescribePackageVersionResponse.


        :param patch_version: The patch_version of this DescribePackageVersionResponse.
        :type patch_version: str
        """
        if patch_version is None:
            raise ValueError("Invalid value for `patch_version`, must not be `None`")

        self._patch_version = patch_version

    @property
    def registered_time(self):
        """Gets the registered_time of this DescribePackageVersionResponse.


        :return: The registered_time of this DescribePackageVersionResponse.
        :rtype: datetime
        """
        return self._registered_time

    @registered_time.setter
    def registered_time(self, registered_time):
        """Sets the registered_time of this DescribePackageVersionResponse.


        :param registered_time: The registered_time of this DescribePackageVersionResponse.
        :type registered_time: datetime
        """

        self._registered_time = registered_time

    @property
    def status(self):
        """Gets the status of this DescribePackageVersionResponse.


        :return: The status of this DescribePackageVersionResponse.
        :rtype: PackageVersionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribePackageVersionResponse.


        :param status: The status of this DescribePackageVersionResponse.
        :type status: PackageVersionStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this DescribePackageVersionResponse.


        :return: The status_description of this DescribePackageVersionResponse.
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this DescribePackageVersionResponse.


        :param status_description: The status_description of this DescribePackageVersionResponse.
        :type status_description: str
        """

        self._status_description = status_description
