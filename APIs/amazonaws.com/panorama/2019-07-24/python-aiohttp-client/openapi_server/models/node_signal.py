# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_signal_value import NodeSignalValue
from openapi_server import util


class NodeSignal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_instance_id: str=None, signal: NodeSignalValue=None):
        """NodeSignal - a model defined in OpenAPI

        :param node_instance_id: The node_instance_id of this NodeSignal.
        :param signal: The signal of this NodeSignal.
        """
        self.openapi_types = {
            'node_instance_id': str,
            'signal': NodeSignalValue
        }

        self.attribute_map = {
            'node_instance_id': 'NodeInstanceId',
            'signal': 'Signal'
        }

        self._node_instance_id = node_instance_id
        self._signal = signal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeSignal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeSignal of this NodeSignal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_instance_id(self):
        """Gets the node_instance_id of this NodeSignal.


        :return: The node_instance_id of this NodeSignal.
        :rtype: str
        """
        return self._node_instance_id

    @node_instance_id.setter
    def node_instance_id(self, node_instance_id):
        """Sets the node_instance_id of this NodeSignal.


        :param node_instance_id: The node_instance_id of this NodeSignal.
        :type node_instance_id: str
        """
        if node_instance_id is None:
            raise ValueError("Invalid value for `node_instance_id`, must not be `None`")

        self._node_instance_id = node_instance_id

    @property
    def signal(self):
        """Gets the signal of this NodeSignal.


        :return: The signal of this NodeSignal.
        :rtype: NodeSignalValue
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this NodeSignal.


        :param signal: The signal of this NodeSignal.
        :type signal: NodeSignalValue
        """
        if signal is None:
            raise ValueError("Invalid value for `signal`, must not be `None`")

        self._signal = signal
