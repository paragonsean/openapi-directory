# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_package_import_job_response_input_config import DescribePackageImportJobResponseInputConfig
from openapi_server.models.describe_package_import_job_response_output import DescribePackageImportJobResponseOutput
from openapi_server.models.describe_package_import_job_response_output_config import DescribePackageImportJobResponseOutputConfig
from openapi_server.models.package_import_job_status import PackageImportJobStatus
from openapi_server.models.package_import_job_type import PackageImportJobType
from openapi_server import util


class DescribePackageImportJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, created_time: datetime=None, input_config: DescribePackageImportJobResponseInputConfig=None, job_id: str=None, job_tags: List=None, job_type: PackageImportJobType=None, last_updated_time: datetime=None, output: DescribePackageImportJobResponseOutput=None, output_config: DescribePackageImportJobResponseOutputConfig=None, status: PackageImportJobStatus=None, status_message: str=None):
        """DescribePackageImportJobResponse - a model defined in OpenAPI

        :param client_token: The client_token of this DescribePackageImportJobResponse.
        :param created_time: The created_time of this DescribePackageImportJobResponse.
        :param input_config: The input_config of this DescribePackageImportJobResponse.
        :param job_id: The job_id of this DescribePackageImportJobResponse.
        :param job_tags: The job_tags of this DescribePackageImportJobResponse.
        :param job_type: The job_type of this DescribePackageImportJobResponse.
        :param last_updated_time: The last_updated_time of this DescribePackageImportJobResponse.
        :param output: The output of this DescribePackageImportJobResponse.
        :param output_config: The output_config of this DescribePackageImportJobResponse.
        :param status: The status of this DescribePackageImportJobResponse.
        :param status_message: The status_message of this DescribePackageImportJobResponse.
        """
        self.openapi_types = {
            'client_token': str,
            'created_time': datetime,
            'input_config': DescribePackageImportJobResponseInputConfig,
            'job_id': str,
            'job_tags': List,
            'job_type': PackageImportJobType,
            'last_updated_time': datetime,
            'output': DescribePackageImportJobResponseOutput,
            'output_config': DescribePackageImportJobResponseOutputConfig,
            'status': PackageImportJobStatus,
            'status_message': str
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'created_time': 'CreatedTime',
            'input_config': 'InputConfig',
            'job_id': 'JobId',
            'job_tags': 'JobTags',
            'job_type': 'JobType',
            'last_updated_time': 'LastUpdatedTime',
            'output': 'Output',
            'output_config': 'OutputConfig',
            'status': 'Status',
            'status_message': 'StatusMessage'
        }

        self._client_token = client_token
        self._created_time = created_time
        self._input_config = input_config
        self._job_id = job_id
        self._job_tags = job_tags
        self._job_type = job_type
        self._last_updated_time = last_updated_time
        self._output = output
        self._output_config = output_config
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribePackageImportJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribePackageImportJobResponse of this DescribePackageImportJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this DescribePackageImportJobResponse.


        :return: The client_token of this DescribePackageImportJobResponse.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this DescribePackageImportJobResponse.


        :param client_token: The client_token of this DescribePackageImportJobResponse.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def created_time(self):
        """Gets the created_time of this DescribePackageImportJobResponse.


        :return: The created_time of this DescribePackageImportJobResponse.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this DescribePackageImportJobResponse.


        :param created_time: The created_time of this DescribePackageImportJobResponse.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def input_config(self):
        """Gets the input_config of this DescribePackageImportJobResponse.


        :return: The input_config of this DescribePackageImportJobResponse.
        :rtype: DescribePackageImportJobResponseInputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this DescribePackageImportJobResponse.


        :param input_config: The input_config of this DescribePackageImportJobResponse.
        :type input_config: DescribePackageImportJobResponseInputConfig
        """
        if input_config is None:
            raise ValueError("Invalid value for `input_config`, must not be `None`")

        self._input_config = input_config

    @property
    def job_id(self):
        """Gets the job_id of this DescribePackageImportJobResponse.


        :return: The job_id of this DescribePackageImportJobResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this DescribePackageImportJobResponse.


        :param job_id: The job_id of this DescribePackageImportJobResponse.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def job_tags(self):
        """Gets the job_tags of this DescribePackageImportJobResponse.


        :return: The job_tags of this DescribePackageImportJobResponse.
        :rtype: List
        """
        return self._job_tags

    @job_tags.setter
    def job_tags(self, job_tags):
        """Sets the job_tags of this DescribePackageImportJobResponse.


        :param job_tags: The job_tags of this DescribePackageImportJobResponse.
        :type job_tags: List
        """

        self._job_tags = job_tags

    @property
    def job_type(self):
        """Gets the job_type of this DescribePackageImportJobResponse.


        :return: The job_type of this DescribePackageImportJobResponse.
        :rtype: PackageImportJobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this DescribePackageImportJobResponse.


        :param job_type: The job_type of this DescribePackageImportJobResponse.
        :type job_type: PackageImportJobType
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")

        self._job_type = job_type

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this DescribePackageImportJobResponse.


        :return: The last_updated_time of this DescribePackageImportJobResponse.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this DescribePackageImportJobResponse.


        :param last_updated_time: The last_updated_time of this DescribePackageImportJobResponse.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def output(self):
        """Gets the output of this DescribePackageImportJobResponse.


        :return: The output of this DescribePackageImportJobResponse.
        :rtype: DescribePackageImportJobResponseOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this DescribePackageImportJobResponse.


        :param output: The output of this DescribePackageImportJobResponse.
        :type output: DescribePackageImportJobResponseOutput
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")

        self._output = output

    @property
    def output_config(self):
        """Gets the output_config of this DescribePackageImportJobResponse.


        :return: The output_config of this DescribePackageImportJobResponse.
        :rtype: DescribePackageImportJobResponseOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this DescribePackageImportJobResponse.


        :param output_config: The output_config of this DescribePackageImportJobResponse.
        :type output_config: DescribePackageImportJobResponseOutputConfig
        """
        if output_config is None:
            raise ValueError("Invalid value for `output_config`, must not be `None`")

        self._output_config = output_config

    @property
    def status(self):
        """Gets the status of this DescribePackageImportJobResponse.


        :return: The status of this DescribePackageImportJobResponse.
        :rtype: PackageImportJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribePackageImportJobResponse.


        :param status: The status of this DescribePackageImportJobResponse.
        :type status: PackageImportJobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this DescribePackageImportJobResponse.


        :return: The status_message of this DescribePackageImportJobResponse.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this DescribePackageImportJobResponse.


        :param status_message: The status_message of this DescribePackageImportJobResponse.
        :type status_message: str
        """
        if status_message is None:
            raise ValueError("Invalid value for `status_message`, must not be `None`")

        self._status_message = status_message
