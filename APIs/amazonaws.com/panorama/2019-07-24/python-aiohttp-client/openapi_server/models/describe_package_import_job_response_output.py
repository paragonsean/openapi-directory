# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.package_import_job_output_output_s3_location import PackageImportJobOutputOutputS3Location
from openapi_server import util


class DescribePackageImportJobResponseOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, output_s3_location: PackageImportJobOutputOutputS3Location=None, package_id: str=None, package_version: str=None, patch_version: str=None):
        """DescribePackageImportJobResponseOutput - a model defined in OpenAPI

        :param output_s3_location: The output_s3_location of this DescribePackageImportJobResponseOutput.
        :param package_id: The package_id of this DescribePackageImportJobResponseOutput.
        :param package_version: The package_version of this DescribePackageImportJobResponseOutput.
        :param patch_version: The patch_version of this DescribePackageImportJobResponseOutput.
        """
        self.openapi_types = {
            'output_s3_location': PackageImportJobOutputOutputS3Location,
            'package_id': str,
            'package_version': str,
            'patch_version': str
        }

        self.attribute_map = {
            'output_s3_location': 'OutputS3Location',
            'package_id': 'PackageId',
            'package_version': 'PackageVersion',
            'patch_version': 'PatchVersion'
        }

        self._output_s3_location = output_s3_location
        self._package_id = package_id
        self._package_version = package_version
        self._patch_version = patch_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribePackageImportJobResponseOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribePackageImportJobResponse_Output of this DescribePackageImportJobResponseOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def output_s3_location(self):
        """Gets the output_s3_location of this DescribePackageImportJobResponseOutput.


        :return: The output_s3_location of this DescribePackageImportJobResponseOutput.
        :rtype: PackageImportJobOutputOutputS3Location
        """
        return self._output_s3_location

    @output_s3_location.setter
    def output_s3_location(self, output_s3_location):
        """Sets the output_s3_location of this DescribePackageImportJobResponseOutput.


        :param output_s3_location: The output_s3_location of this DescribePackageImportJobResponseOutput.
        :type output_s3_location: PackageImportJobOutputOutputS3Location
        """
        if output_s3_location is None:
            raise ValueError("Invalid value for `output_s3_location`, must not be `None`")

        self._output_s3_location = output_s3_location

    @property
    def package_id(self):
        """Gets the package_id of this DescribePackageImportJobResponseOutput.


        :return: The package_id of this DescribePackageImportJobResponseOutput.
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this DescribePackageImportJobResponseOutput.


        :param package_id: The package_id of this DescribePackageImportJobResponseOutput.
        :type package_id: str
        """
        if package_id is None:
            raise ValueError("Invalid value for `package_id`, must not be `None`")

        self._package_id = package_id

    @property
    def package_version(self):
        """Gets the package_version of this DescribePackageImportJobResponseOutput.


        :return: The package_version of this DescribePackageImportJobResponseOutput.
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this DescribePackageImportJobResponseOutput.


        :param package_version: The package_version of this DescribePackageImportJobResponseOutput.
        :type package_version: str
        """
        if package_version is None:
            raise ValueError("Invalid value for `package_version`, must not be `None`")

        self._package_version = package_version

    @property
    def patch_version(self):
        """Gets the patch_version of this DescribePackageImportJobResponseOutput.


        :return: The patch_version of this DescribePackageImportJobResponseOutput.
        :rtype: str
        """
        return self._patch_version

    @patch_version.setter
    def patch_version(self, patch_version):
        """Sets the patch_version of this DescribePackageImportJobResponseOutput.


        :param patch_version: The patch_version of this DescribePackageImportJobResponseOutput.
        :type patch_version: str
        """
        if patch_version is None:
            raise ValueError("Invalid value for `patch_version`, must not be `None`")

        self._patch_version = patch_version
