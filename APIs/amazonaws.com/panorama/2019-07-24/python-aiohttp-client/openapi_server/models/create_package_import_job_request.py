# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_package_import_job_request_input_config import CreatePackageImportJobRequestInputConfig
from openapi_server.models.create_package_import_job_request_output_config import CreatePackageImportJobRequestOutputConfig
from openapi_server.models.job_resource_tags import JobResourceTags
import re
from openapi_server import util


class CreatePackageImportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, input_config: CreatePackageImportJobRequestInputConfig=None, job_tags: List[JobResourceTags]=None, job_type: str=None, output_config: CreatePackageImportJobRequestOutputConfig=None):
        """CreatePackageImportJobRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreatePackageImportJobRequest.
        :param input_config: The input_config of this CreatePackageImportJobRequest.
        :param job_tags: The job_tags of this CreatePackageImportJobRequest.
        :param job_type: The job_type of this CreatePackageImportJobRequest.
        :param output_config: The output_config of this CreatePackageImportJobRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'input_config': CreatePackageImportJobRequestInputConfig,
            'job_tags': List[JobResourceTags],
            'job_type': str,
            'output_config': CreatePackageImportJobRequestOutputConfig
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'input_config': 'InputConfig',
            'job_tags': 'JobTags',
            'job_type': 'JobType',
            'output_config': 'OutputConfig'
        }

        self._client_token = client_token
        self._input_config = input_config
        self._job_tags = job_tags
        self._job_type = job_type
        self._output_config = output_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePackageImportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePackageImportJob_request of this CreatePackageImportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreatePackageImportJobRequest.

        A client token for the package import job.

        :return: The client_token of this CreatePackageImportJobRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreatePackageImportJobRequest.

        A client token for the package import job.

        :param client_token: The client_token of this CreatePackageImportJobRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[a-zA-Z0-9\-\_]+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-\_]+$/`")

        self._client_token = client_token

    @property
    def input_config(self):
        """Gets the input_config of this CreatePackageImportJobRequest.


        :return: The input_config of this CreatePackageImportJobRequest.
        :rtype: CreatePackageImportJobRequestInputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this CreatePackageImportJobRequest.


        :param input_config: The input_config of this CreatePackageImportJobRequest.
        :type input_config: CreatePackageImportJobRequestInputConfig
        """
        if input_config is None:
            raise ValueError("Invalid value for `input_config`, must not be `None`")

        self._input_config = input_config

    @property
    def job_tags(self):
        """Gets the job_tags of this CreatePackageImportJobRequest.

        Tags for the package import job.

        :return: The job_tags of this CreatePackageImportJobRequest.
        :rtype: List[JobResourceTags]
        """
        return self._job_tags

    @job_tags.setter
    def job_tags(self, job_tags):
        """Sets the job_tags of this CreatePackageImportJobRequest.

        Tags for the package import job.

        :param job_tags: The job_tags of this CreatePackageImportJobRequest.
        :type job_tags: List[JobResourceTags]
        """

        self._job_tags = job_tags

    @property
    def job_type(self):
        """Gets the job_type of this CreatePackageImportJobRequest.

        A job type for the package import job.

        :return: The job_type of this CreatePackageImportJobRequest.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this CreatePackageImportJobRequest.

        A job type for the package import job.

        :param job_type: The job_type of this CreatePackageImportJobRequest.
        :type job_type: str
        """
        allowed_values = ["NODE_PACKAGE_VERSION", "MARKETPLACE_NODE_PACKAGE_VERSION"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def output_config(self):
        """Gets the output_config of this CreatePackageImportJobRequest.


        :return: The output_config of this CreatePackageImportJobRequest.
        :rtype: CreatePackageImportJobRequestOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this CreatePackageImportJobRequest.


        :param output_config: The output_config of this CreatePackageImportJobRequest.
        :type output_config: CreatePackageImportJobRequestOutputConfig
        """
        if output_config is None:
            raise ValueError("Invalid value for `output_config`, must not be `None`")

        self._output_config = output_config
