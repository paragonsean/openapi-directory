# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_status import DeviceStatus
from openapi_server import util


class ProvisionDeviceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, certificates: str=None, device_id: str=None, iot_thing_name: str=None, status: DeviceStatus=None):
        """ProvisionDeviceResponse - a model defined in OpenAPI

        :param arn: The arn of this ProvisionDeviceResponse.
        :param certificates: The certificates of this ProvisionDeviceResponse.
        :param device_id: The device_id of this ProvisionDeviceResponse.
        :param iot_thing_name: The iot_thing_name of this ProvisionDeviceResponse.
        :param status: The status of this ProvisionDeviceResponse.
        """
        self.openapi_types = {
            'arn': str,
            'certificates': str,
            'device_id': str,
            'iot_thing_name': str,
            'status': DeviceStatus
        }

        self.attribute_map = {
            'arn': 'Arn',
            'certificates': 'Certificates',
            'device_id': 'DeviceId',
            'iot_thing_name': 'IotThingName',
            'status': 'Status'
        }

        self._arn = arn
        self._certificates = certificates
        self._device_id = device_id
        self._iot_thing_name = iot_thing_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisionDeviceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisionDeviceResponse of this ProvisionDeviceResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this ProvisionDeviceResponse.


        :return: The arn of this ProvisionDeviceResponse.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ProvisionDeviceResponse.


        :param arn: The arn of this ProvisionDeviceResponse.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def certificates(self):
        """Gets the certificates of this ProvisionDeviceResponse.


        :return: The certificates of this ProvisionDeviceResponse.
        :rtype: str
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this ProvisionDeviceResponse.


        :param certificates: The certificates of this ProvisionDeviceResponse.
        :type certificates: str
        """

        self._certificates = certificates

    @property
    def device_id(self):
        """Gets the device_id of this ProvisionDeviceResponse.


        :return: The device_id of this ProvisionDeviceResponse.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ProvisionDeviceResponse.


        :param device_id: The device_id of this ProvisionDeviceResponse.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def iot_thing_name(self):
        """Gets the iot_thing_name of this ProvisionDeviceResponse.


        :return: The iot_thing_name of this ProvisionDeviceResponse.
        :rtype: str
        """
        return self._iot_thing_name

    @iot_thing_name.setter
    def iot_thing_name(self, iot_thing_name):
        """Sets the iot_thing_name of this ProvisionDeviceResponse.


        :param iot_thing_name: The iot_thing_name of this ProvisionDeviceResponse.
        :type iot_thing_name: str
        """

        self._iot_thing_name = iot_thing_name

    @property
    def status(self):
        """Gets the status of this ProvisionDeviceResponse.


        :return: The status of this ProvisionDeviceResponse.
        :rtype: DeviceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProvisionDeviceResponse.


        :param status: The status of this ProvisionDeviceResponse.
        :type status: DeviceStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
