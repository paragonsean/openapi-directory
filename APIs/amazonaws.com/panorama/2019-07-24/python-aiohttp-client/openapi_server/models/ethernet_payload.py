# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_type import ConnectionType
from openapi_server.models.ethernet_payload_static_ip_connection_info import EthernetPayloadStaticIpConnectionInfo
from openapi_server import util


class EthernetPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_type: ConnectionType=None, static_ip_connection_info: EthernetPayloadStaticIpConnectionInfo=None):
        """EthernetPayload - a model defined in OpenAPI

        :param connection_type: The connection_type of this EthernetPayload.
        :param static_ip_connection_info: The static_ip_connection_info of this EthernetPayload.
        """
        self.openapi_types = {
            'connection_type': ConnectionType,
            'static_ip_connection_info': EthernetPayloadStaticIpConnectionInfo
        }

        self.attribute_map = {
            'connection_type': 'ConnectionType',
            'static_ip_connection_info': 'StaticIpConnectionInfo'
        }

        self._connection_type = connection_type
        self._static_ip_connection_info = static_ip_connection_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EthernetPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EthernetPayload of this EthernetPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_type(self):
        """Gets the connection_type of this EthernetPayload.


        :return: The connection_type of this EthernetPayload.
        :rtype: ConnectionType
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this EthernetPayload.


        :param connection_type: The connection_type of this EthernetPayload.
        :type connection_type: ConnectionType
        """
        if connection_type is None:
            raise ValueError("Invalid value for `connection_type`, must not be `None`")

        self._connection_type = connection_type

    @property
    def static_ip_connection_info(self):
        """Gets the static_ip_connection_info of this EthernetPayload.


        :return: The static_ip_connection_info of this EthernetPayload.
        :rtype: EthernetPayloadStaticIpConnectionInfo
        """
        return self._static_ip_connection_info

    @static_ip_connection_info.setter
    def static_ip_connection_info(self, static_ip_connection_info):
        """Sets the static_ip_connection_info of this EthernetPayload.


        :param static_ip_connection_info: The static_ip_connection_info of this EthernetPayload.
        :type static_ip_connection_info: EthernetPayloadStaticIpConnectionInfo
        """

        self._static_ip_connection_info = static_ip_connection_info
