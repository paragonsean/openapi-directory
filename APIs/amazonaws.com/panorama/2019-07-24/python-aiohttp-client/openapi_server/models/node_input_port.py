# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.port_type import PortType
from openapi_server import util


class NodeInputPort(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_value: str=None, description: str=None, max_connections: int=None, name: str=None, type: PortType=None):
        """NodeInputPort - a model defined in OpenAPI

        :param default_value: The default_value of this NodeInputPort.
        :param description: The description of this NodeInputPort.
        :param max_connections: The max_connections of this NodeInputPort.
        :param name: The name of this NodeInputPort.
        :param type: The type of this NodeInputPort.
        """
        self.openapi_types = {
            'default_value': str,
            'description': str,
            'max_connections': int,
            'name': str,
            'type': PortType
        }

        self.attribute_map = {
            'default_value': 'DefaultValue',
            'description': 'Description',
            'max_connections': 'MaxConnections',
            'name': 'Name',
            'type': 'Type'
        }

        self._default_value = default_value
        self._description = description
        self._max_connections = max_connections
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInputPort':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeInputPort of this NodeInputPort.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_value(self):
        """Gets the default_value of this NodeInputPort.


        :return: The default_value of this NodeInputPort.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this NodeInputPort.


        :param default_value: The default_value of this NodeInputPort.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def description(self):
        """Gets the description of this NodeInputPort.


        :return: The description of this NodeInputPort.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeInputPort.


        :param description: The description of this NodeInputPort.
        :type description: str
        """

        self._description = description

    @property
    def max_connections(self):
        """Gets the max_connections of this NodeInputPort.


        :return: The max_connections of this NodeInputPort.
        :rtype: int
        """
        return self._max_connections

    @max_connections.setter
    def max_connections(self, max_connections):
        """Sets the max_connections of this NodeInputPort.


        :param max_connections: The max_connections of this NodeInputPort.
        :type max_connections: int
        """

        self._max_connections = max_connections

    @property
    def name(self):
        """Gets the name of this NodeInputPort.


        :return: The name of this NodeInputPort.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeInputPort.


        :param name: The name of this NodeInputPort.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this NodeInputPort.


        :return: The type of this NodeInputPort.
        :rtype: PortType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeInputPort.


        :param type: The type of this NodeInputPort.
        :type type: PortType
        """

        self._type = type
