# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mark_latest: bool=None, package_name: str=None, package_version: str=None):
        """CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig - a model defined in OpenAPI

        :param mark_latest: The mark_latest of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        :param package_name: The package_name of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        :param package_version: The package_version of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        """
        self.openapi_types = {
            'mark_latest': bool,
            'package_name': str,
            'package_version': str
        }

        self.attribute_map = {
            'mark_latest': 'MarkLatest',
            'package_name': 'PackageName',
            'package_version': 'PackageVersion'
        }

        self._mark_latest = mark_latest
        self._package_name = package_name
        self._package_version = package_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mark_latest(self):
        """Gets the mark_latest of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.


        :return: The mark_latest of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        :rtype: bool
        """
        return self._mark_latest

    @mark_latest.setter
    def mark_latest(self, mark_latest):
        """Sets the mark_latest of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.


        :param mark_latest: The mark_latest of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        :type mark_latest: bool
        """

        self._mark_latest = mark_latest

    @property
    def package_name(self):
        """Gets the package_name of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.


        :return: The package_name of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.


        :param package_name: The package_name of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        :type package_name: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")

        self._package_name = package_name

    @property
    def package_version(self):
        """Gets the package_version of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.


        :return: The package_version of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.


        :param package_version: The package_version of this CreatePackageImportJobRequestOutputConfigPackageVersionOutputConfig.
        :type package_version: str
        """
        if package_version is None:
            raise ValueError("Invalid value for `package_version`, must not be `None`")

        self._package_version = package_version
