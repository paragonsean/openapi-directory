# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_connection_status import NetworkConnectionStatus
from openapi_server import util


class NtpStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_status: NetworkConnectionStatus=None, ip_address: str=None, ntp_server_name: str=None):
        """NtpStatus - a model defined in OpenAPI

        :param connection_status: The connection_status of this NtpStatus.
        :param ip_address: The ip_address of this NtpStatus.
        :param ntp_server_name: The ntp_server_name of this NtpStatus.
        """
        self.openapi_types = {
            'connection_status': NetworkConnectionStatus,
            'ip_address': str,
            'ntp_server_name': str
        }

        self.attribute_map = {
            'connection_status': 'ConnectionStatus',
            'ip_address': 'IpAddress',
            'ntp_server_name': 'NtpServerName'
        }

        self._connection_status = connection_status
        self._ip_address = ip_address
        self._ntp_server_name = ntp_server_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NtpStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NtpStatus of this NtpStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_status(self):
        """Gets the connection_status of this NtpStatus.


        :return: The connection_status of this NtpStatus.
        :rtype: NetworkConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this NtpStatus.


        :param connection_status: The connection_status of this NtpStatus.
        :type connection_status: NetworkConnectionStatus
        """

        self._connection_status = connection_status

    @property
    def ip_address(self):
        """Gets the ip_address of this NtpStatus.


        :return: The ip_address of this NtpStatus.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this NtpStatus.


        :param ip_address: The ip_address of this NtpStatus.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def ntp_server_name(self):
        """Gets the ntp_server_name of this NtpStatus.


        :return: The ntp_server_name of this NtpStatus.
        :rtype: str
        """
        return self._ntp_server_name

    @ntp_server_name.setter
    def ntp_server_name(self, ntp_server_name):
        """Sets the ntp_server_name of this NtpStatus.


        :param ntp_server_name: The ntp_server_name of this NtpStatus.
        :type ntp_server_name: str
        """

        self._ntp_server_name = ntp_server_name
