# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_job_for_devices_request_device_job_config import CreateJobForDevicesRequestDeviceJobConfig
from openapi_server import util


class CreateJobForDevicesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_ids: List[str]=None, device_job_config: CreateJobForDevicesRequestDeviceJobConfig=None, job_type: str=None):
        """CreateJobForDevicesRequest - a model defined in OpenAPI

        :param device_ids: The device_ids of this CreateJobForDevicesRequest.
        :param device_job_config: The device_job_config of this CreateJobForDevicesRequest.
        :param job_type: The job_type of this CreateJobForDevicesRequest.
        """
        self.openapi_types = {
            'device_ids': List[str],
            'device_job_config': CreateJobForDevicesRequestDeviceJobConfig,
            'job_type': str
        }

        self.attribute_map = {
            'device_ids': 'DeviceIds',
            'device_job_config': 'DeviceJobConfig',
            'job_type': 'JobType'
        }

        self._device_ids = device_ids
        self._device_job_config = device_job_config
        self._job_type = job_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobForDevicesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJobForDevices_request of this CreateJobForDevicesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_ids(self):
        """Gets the device_ids of this CreateJobForDevicesRequest.

        ID of target device.

        :return: The device_ids of this CreateJobForDevicesRequest.
        :rtype: List[str]
        """
        return self._device_ids

    @device_ids.setter
    def device_ids(self, device_ids):
        """Sets the device_ids of this CreateJobForDevicesRequest.

        ID of target device.

        :param device_ids: The device_ids of this CreateJobForDevicesRequest.
        :type device_ids: List[str]
        """
        if device_ids is None:
            raise ValueError("Invalid value for `device_ids`, must not be `None`")
        if device_ids is not None and len(device_ids) > 1:
            raise ValueError("Invalid value for `device_ids`, number of items must be less than or equal to `1`")
        if device_ids is not None and len(device_ids) < 1:
            raise ValueError("Invalid value for `device_ids`, number of items must be greater than or equal to `1`")

        self._device_ids = device_ids

    @property
    def device_job_config(self):
        """Gets the device_job_config of this CreateJobForDevicesRequest.


        :return: The device_job_config of this CreateJobForDevicesRequest.
        :rtype: CreateJobForDevicesRequestDeviceJobConfig
        """
        return self._device_job_config

    @device_job_config.setter
    def device_job_config(self, device_job_config):
        """Sets the device_job_config of this CreateJobForDevicesRequest.


        :param device_job_config: The device_job_config of this CreateJobForDevicesRequest.
        :type device_job_config: CreateJobForDevicesRequestDeviceJobConfig
        """

        self._device_job_config = device_job_config

    @property
    def job_type(self):
        """Gets the job_type of this CreateJobForDevicesRequest.

        The type of job to run.

        :return: The job_type of this CreateJobForDevicesRequest.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this CreateJobForDevicesRequest.

        The type of job to run.

        :param job_type: The job_type of this CreateJobForDevicesRequest.
        :type job_type: str
        """
        allowed_values = ["OTA", "REBOOT"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"
                .format(job_type, allowed_values)
            )

        self._job_type = job_type
