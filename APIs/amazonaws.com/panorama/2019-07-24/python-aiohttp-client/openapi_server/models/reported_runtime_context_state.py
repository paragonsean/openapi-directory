# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.desired_state import DesiredState
from openapi_server.models.device_reported_status import DeviceReportedStatus
from openapi_server import util


class ReportedRuntimeContextState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired_state: DesiredState=None, device_reported_status: DeviceReportedStatus=None, device_reported_time: datetime=None, runtime_context_name: str=None):
        """ReportedRuntimeContextState - a model defined in OpenAPI

        :param desired_state: The desired_state of this ReportedRuntimeContextState.
        :param device_reported_status: The device_reported_status of this ReportedRuntimeContextState.
        :param device_reported_time: The device_reported_time of this ReportedRuntimeContextState.
        :param runtime_context_name: The runtime_context_name of this ReportedRuntimeContextState.
        """
        self.openapi_types = {
            'desired_state': DesiredState,
            'device_reported_status': DeviceReportedStatus,
            'device_reported_time': datetime,
            'runtime_context_name': str
        }

        self.attribute_map = {
            'desired_state': 'DesiredState',
            'device_reported_status': 'DeviceReportedStatus',
            'device_reported_time': 'DeviceReportedTime',
            'runtime_context_name': 'RuntimeContextName'
        }

        self._desired_state = desired_state
        self._device_reported_status = device_reported_status
        self._device_reported_time = device_reported_time
        self._runtime_context_name = runtime_context_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportedRuntimeContextState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportedRuntimeContextState of this ReportedRuntimeContextState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired_state(self):
        """Gets the desired_state of this ReportedRuntimeContextState.


        :return: The desired_state of this ReportedRuntimeContextState.
        :rtype: DesiredState
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this ReportedRuntimeContextState.


        :param desired_state: The desired_state of this ReportedRuntimeContextState.
        :type desired_state: DesiredState
        """
        if desired_state is None:
            raise ValueError("Invalid value for `desired_state`, must not be `None`")

        self._desired_state = desired_state

    @property
    def device_reported_status(self):
        """Gets the device_reported_status of this ReportedRuntimeContextState.


        :return: The device_reported_status of this ReportedRuntimeContextState.
        :rtype: DeviceReportedStatus
        """
        return self._device_reported_status

    @device_reported_status.setter
    def device_reported_status(self, device_reported_status):
        """Sets the device_reported_status of this ReportedRuntimeContextState.


        :param device_reported_status: The device_reported_status of this ReportedRuntimeContextState.
        :type device_reported_status: DeviceReportedStatus
        """
        if device_reported_status is None:
            raise ValueError("Invalid value for `device_reported_status`, must not be `None`")

        self._device_reported_status = device_reported_status

    @property
    def device_reported_time(self):
        """Gets the device_reported_time of this ReportedRuntimeContextState.


        :return: The device_reported_time of this ReportedRuntimeContextState.
        :rtype: datetime
        """
        return self._device_reported_time

    @device_reported_time.setter
    def device_reported_time(self, device_reported_time):
        """Sets the device_reported_time of this ReportedRuntimeContextState.


        :param device_reported_time: The device_reported_time of this ReportedRuntimeContextState.
        :type device_reported_time: datetime
        """
        if device_reported_time is None:
            raise ValueError("Invalid value for `device_reported_time`, must not be `None`")

        self._device_reported_time = device_reported_time

    @property
    def runtime_context_name(self):
        """Gets the runtime_context_name of this ReportedRuntimeContextState.


        :return: The runtime_context_name of this ReportedRuntimeContextState.
        :rtype: str
        """
        return self._runtime_context_name

    @runtime_context_name.setter
    def runtime_context_name(self, runtime_context_name):
        """Sets the runtime_context_name of this ReportedRuntimeContextState.


        :param runtime_context_name: The runtime_context_name of this ReportedRuntimeContextState.
        :type runtime_context_name: str
        """
        if runtime_context_name is None:
            raise ValueError("Invalid value for `runtime_context_name`, must not be `None`")

        self._runtime_context_name = runtime_context_name
