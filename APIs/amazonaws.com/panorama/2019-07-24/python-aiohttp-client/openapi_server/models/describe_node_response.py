# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_node_response_node_interface import DescribeNodeResponseNodeInterface
from openapi_server.models.node_category import NodeCategory
from openapi_server import util


class DescribeNodeResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_name: str=None, category: NodeCategory=None, created_time: datetime=None, description: str=None, last_updated_time: datetime=None, name: str=None, node_id: str=None, node_interface: DescribeNodeResponseNodeInterface=None, owner_account: str=None, package_arn: str=None, package_id: str=None, package_name: str=None, package_version: str=None, patch_version: str=None):
        """DescribeNodeResponse - a model defined in OpenAPI

        :param asset_name: The asset_name of this DescribeNodeResponse.
        :param category: The category of this DescribeNodeResponse.
        :param created_time: The created_time of this DescribeNodeResponse.
        :param description: The description of this DescribeNodeResponse.
        :param last_updated_time: The last_updated_time of this DescribeNodeResponse.
        :param name: The name of this DescribeNodeResponse.
        :param node_id: The node_id of this DescribeNodeResponse.
        :param node_interface: The node_interface of this DescribeNodeResponse.
        :param owner_account: The owner_account of this DescribeNodeResponse.
        :param package_arn: The package_arn of this DescribeNodeResponse.
        :param package_id: The package_id of this DescribeNodeResponse.
        :param package_name: The package_name of this DescribeNodeResponse.
        :param package_version: The package_version of this DescribeNodeResponse.
        :param patch_version: The patch_version of this DescribeNodeResponse.
        """
        self.openapi_types = {
            'asset_name': str,
            'category': NodeCategory,
            'created_time': datetime,
            'description': str,
            'last_updated_time': datetime,
            'name': str,
            'node_id': str,
            'node_interface': DescribeNodeResponseNodeInterface,
            'owner_account': str,
            'package_arn': str,
            'package_id': str,
            'package_name': str,
            'package_version': str,
            'patch_version': str
        }

        self.attribute_map = {
            'asset_name': 'AssetName',
            'category': 'Category',
            'created_time': 'CreatedTime',
            'description': 'Description',
            'last_updated_time': 'LastUpdatedTime',
            'name': 'Name',
            'node_id': 'NodeId',
            'node_interface': 'NodeInterface',
            'owner_account': 'OwnerAccount',
            'package_arn': 'PackageArn',
            'package_id': 'PackageId',
            'package_name': 'PackageName',
            'package_version': 'PackageVersion',
            'patch_version': 'PatchVersion'
        }

        self._asset_name = asset_name
        self._category = category
        self._created_time = created_time
        self._description = description
        self._last_updated_time = last_updated_time
        self._name = name
        self._node_id = node_id
        self._node_interface = node_interface
        self._owner_account = owner_account
        self._package_arn = package_arn
        self._package_id = package_id
        self._package_name = package_name
        self._package_version = package_version
        self._patch_version = patch_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeNodeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeNodeResponse of this DescribeNodeResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_name(self):
        """Gets the asset_name of this DescribeNodeResponse.


        :return: The asset_name of this DescribeNodeResponse.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this DescribeNodeResponse.


        :param asset_name: The asset_name of this DescribeNodeResponse.
        :type asset_name: str
        """

        self._asset_name = asset_name

    @property
    def category(self):
        """Gets the category of this DescribeNodeResponse.


        :return: The category of this DescribeNodeResponse.
        :rtype: NodeCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this DescribeNodeResponse.


        :param category: The category of this DescribeNodeResponse.
        :type category: NodeCategory
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def created_time(self):
        """Gets the created_time of this DescribeNodeResponse.


        :return: The created_time of this DescribeNodeResponse.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this DescribeNodeResponse.


        :param created_time: The created_time of this DescribeNodeResponse.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this DescribeNodeResponse.


        :return: The description of this DescribeNodeResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DescribeNodeResponse.


        :param description: The description of this DescribeNodeResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this DescribeNodeResponse.


        :return: The last_updated_time of this DescribeNodeResponse.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this DescribeNodeResponse.


        :param last_updated_time: The last_updated_time of this DescribeNodeResponse.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def name(self):
        """Gets the name of this DescribeNodeResponse.


        :return: The name of this DescribeNodeResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescribeNodeResponse.


        :param name: The name of this DescribeNodeResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this DescribeNodeResponse.


        :return: The node_id of this DescribeNodeResponse.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this DescribeNodeResponse.


        :param node_id: The node_id of this DescribeNodeResponse.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def node_interface(self):
        """Gets the node_interface of this DescribeNodeResponse.


        :return: The node_interface of this DescribeNodeResponse.
        :rtype: DescribeNodeResponseNodeInterface
        """
        return self._node_interface

    @node_interface.setter
    def node_interface(self, node_interface):
        """Sets the node_interface of this DescribeNodeResponse.


        :param node_interface: The node_interface of this DescribeNodeResponse.
        :type node_interface: DescribeNodeResponseNodeInterface
        """
        if node_interface is None:
            raise ValueError("Invalid value for `node_interface`, must not be `None`")

        self._node_interface = node_interface

    @property
    def owner_account(self):
        """Gets the owner_account of this DescribeNodeResponse.


        :return: The owner_account of this DescribeNodeResponse.
        :rtype: str
        """
        return self._owner_account

    @owner_account.setter
    def owner_account(self, owner_account):
        """Sets the owner_account of this DescribeNodeResponse.


        :param owner_account: The owner_account of this DescribeNodeResponse.
        :type owner_account: str
        """
        if owner_account is None:
            raise ValueError("Invalid value for `owner_account`, must not be `None`")

        self._owner_account = owner_account

    @property
    def package_arn(self):
        """Gets the package_arn of this DescribeNodeResponse.


        :return: The package_arn of this DescribeNodeResponse.
        :rtype: str
        """
        return self._package_arn

    @package_arn.setter
    def package_arn(self, package_arn):
        """Sets the package_arn of this DescribeNodeResponse.


        :param package_arn: The package_arn of this DescribeNodeResponse.
        :type package_arn: str
        """

        self._package_arn = package_arn

    @property
    def package_id(self):
        """Gets the package_id of this DescribeNodeResponse.


        :return: The package_id of this DescribeNodeResponse.
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this DescribeNodeResponse.


        :param package_id: The package_id of this DescribeNodeResponse.
        :type package_id: str
        """
        if package_id is None:
            raise ValueError("Invalid value for `package_id`, must not be `None`")

        self._package_id = package_id

    @property
    def package_name(self):
        """Gets the package_name of this DescribeNodeResponse.


        :return: The package_name of this DescribeNodeResponse.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this DescribeNodeResponse.


        :param package_name: The package_name of this DescribeNodeResponse.
        :type package_name: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")

        self._package_name = package_name

    @property
    def package_version(self):
        """Gets the package_version of this DescribeNodeResponse.


        :return: The package_version of this DescribeNodeResponse.
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this DescribeNodeResponse.


        :param package_version: The package_version of this DescribeNodeResponse.
        :type package_version: str
        """
        if package_version is None:
            raise ValueError("Invalid value for `package_version`, must not be `None`")

        self._package_version = package_version

    @property
    def patch_version(self):
        """Gets the patch_version of this DescribeNodeResponse.


        :return: The patch_version of this DescribeNodeResponse.
        :rtype: str
        """
        return self._patch_version

    @patch_version.setter
    def patch_version(self, patch_version):
        """Sets the patch_version of this DescribeNodeResponse.


        :param patch_version: The patch_version of this DescribeNodeResponse.
        :type patch_version: str
        """
        if patch_version is None:
            raise ValueError("Invalid value for `patch_version`, must not be `None`")

        self._patch_version = patch_version
