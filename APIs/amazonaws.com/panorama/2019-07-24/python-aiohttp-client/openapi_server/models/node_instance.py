# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_instance_status import NodeInstanceStatus
from openapi_server import util


class NodeInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_status: NodeInstanceStatus=None, node_id: str=None, node_instance_id: str=None, node_name: str=None, package_name: str=None, package_patch_version: str=None, package_version: str=None):
        """NodeInstance - a model defined in OpenAPI

        :param current_status: The current_status of this NodeInstance.
        :param node_id: The node_id of this NodeInstance.
        :param node_instance_id: The node_instance_id of this NodeInstance.
        :param node_name: The node_name of this NodeInstance.
        :param package_name: The package_name of this NodeInstance.
        :param package_patch_version: The package_patch_version of this NodeInstance.
        :param package_version: The package_version of this NodeInstance.
        """
        self.openapi_types = {
            'current_status': NodeInstanceStatus,
            'node_id': str,
            'node_instance_id': str,
            'node_name': str,
            'package_name': str,
            'package_patch_version': str,
            'package_version': str
        }

        self.attribute_map = {
            'current_status': 'CurrentStatus',
            'node_id': 'NodeId',
            'node_instance_id': 'NodeInstanceId',
            'node_name': 'NodeName',
            'package_name': 'PackageName',
            'package_patch_version': 'PackagePatchVersion',
            'package_version': 'PackageVersion'
        }

        self._current_status = current_status
        self._node_id = node_id
        self._node_instance_id = node_instance_id
        self._node_name = node_name
        self._package_name = package_name
        self._package_patch_version = package_patch_version
        self._package_version = package_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeInstance of this NodeInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_status(self):
        """Gets the current_status of this NodeInstance.


        :return: The current_status of this NodeInstance.
        :rtype: NodeInstanceStatus
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this NodeInstance.


        :param current_status: The current_status of this NodeInstance.
        :type current_status: NodeInstanceStatus
        """
        if current_status is None:
            raise ValueError("Invalid value for `current_status`, must not be `None`")

        self._current_status = current_status

    @property
    def node_id(self):
        """Gets the node_id of this NodeInstance.


        :return: The node_id of this NodeInstance.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeInstance.


        :param node_id: The node_id of this NodeInstance.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def node_instance_id(self):
        """Gets the node_instance_id of this NodeInstance.


        :return: The node_instance_id of this NodeInstance.
        :rtype: str
        """
        return self._node_instance_id

    @node_instance_id.setter
    def node_instance_id(self, node_instance_id):
        """Sets the node_instance_id of this NodeInstance.


        :param node_instance_id: The node_instance_id of this NodeInstance.
        :type node_instance_id: str
        """
        if node_instance_id is None:
            raise ValueError("Invalid value for `node_instance_id`, must not be `None`")

        self._node_instance_id = node_instance_id

    @property
    def node_name(self):
        """Gets the node_name of this NodeInstance.


        :return: The node_name of this NodeInstance.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this NodeInstance.


        :param node_name: The node_name of this NodeInstance.
        :type node_name: str
        """

        self._node_name = node_name

    @property
    def package_name(self):
        """Gets the package_name of this NodeInstance.


        :return: The package_name of this NodeInstance.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this NodeInstance.


        :param package_name: The package_name of this NodeInstance.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def package_patch_version(self):
        """Gets the package_patch_version of this NodeInstance.


        :return: The package_patch_version of this NodeInstance.
        :rtype: str
        """
        return self._package_patch_version

    @package_patch_version.setter
    def package_patch_version(self, package_patch_version):
        """Sets the package_patch_version of this NodeInstance.


        :param package_patch_version: The package_patch_version of this NodeInstance.
        :type package_patch_version: str
        """

        self._package_patch_version = package_patch_version

    @property
    def package_version(self):
        """Gets the package_version of this NodeInstance.


        :return: The package_version of this NodeInstance.
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this NodeInstance.


        :param package_version: The package_version of this NodeInstance.
        :type package_version: str
        """

        self._package_version = package_version
