# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_application_instance_request_manifest_overrides_payload import CreateApplicationInstanceRequestManifestOverridesPayload
from openapi_server.models.create_application_instance_request_manifest_payload import CreateApplicationInstanceRequestManifestPayload
import re
from openapi_server import util


class CreateApplicationInstanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_instance_id_to_replace: str=None, default_runtime_context_device: str=None, description: str=None, manifest_overrides_payload: CreateApplicationInstanceRequestManifestOverridesPayload=None, manifest_payload: CreateApplicationInstanceRequestManifestPayload=None, name: str=None, runtime_role_arn: str=None, tags: Dict[str, str]=None):
        """CreateApplicationInstanceRequest - a model defined in OpenAPI

        :param application_instance_id_to_replace: The application_instance_id_to_replace of this CreateApplicationInstanceRequest.
        :param default_runtime_context_device: The default_runtime_context_device of this CreateApplicationInstanceRequest.
        :param description: The description of this CreateApplicationInstanceRequest.
        :param manifest_overrides_payload: The manifest_overrides_payload of this CreateApplicationInstanceRequest.
        :param manifest_payload: The manifest_payload of this CreateApplicationInstanceRequest.
        :param name: The name of this CreateApplicationInstanceRequest.
        :param runtime_role_arn: The runtime_role_arn of this CreateApplicationInstanceRequest.
        :param tags: The tags of this CreateApplicationInstanceRequest.
        """
        self.openapi_types = {
            'application_instance_id_to_replace': str,
            'default_runtime_context_device': str,
            'description': str,
            'manifest_overrides_payload': CreateApplicationInstanceRequestManifestOverridesPayload,
            'manifest_payload': CreateApplicationInstanceRequestManifestPayload,
            'name': str,
            'runtime_role_arn': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'application_instance_id_to_replace': 'ApplicationInstanceIdToReplace',
            'default_runtime_context_device': 'DefaultRuntimeContextDevice',
            'description': 'Description',
            'manifest_overrides_payload': 'ManifestOverridesPayload',
            'manifest_payload': 'ManifestPayload',
            'name': 'Name',
            'runtime_role_arn': 'RuntimeRoleArn',
            'tags': 'Tags'
        }

        self._application_instance_id_to_replace = application_instance_id_to_replace
        self._default_runtime_context_device = default_runtime_context_device
        self._description = description
        self._manifest_overrides_payload = manifest_overrides_payload
        self._manifest_payload = manifest_payload
        self._name = name
        self._runtime_role_arn = runtime_role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateApplicationInstanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateApplicationInstance_request of this CreateApplicationInstanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_instance_id_to_replace(self):
        """Gets the application_instance_id_to_replace of this CreateApplicationInstanceRequest.

        The ID of an application instance to replace with the new instance.

        :return: The application_instance_id_to_replace of this CreateApplicationInstanceRequest.
        :rtype: str
        """
        return self._application_instance_id_to_replace

    @application_instance_id_to_replace.setter
    def application_instance_id_to_replace(self, application_instance_id_to_replace):
        """Sets the application_instance_id_to_replace of this CreateApplicationInstanceRequest.

        The ID of an application instance to replace with the new instance.

        :param application_instance_id_to_replace: The application_instance_id_to_replace of this CreateApplicationInstanceRequest.
        :type application_instance_id_to_replace: str
        """
        if application_instance_id_to_replace is not None and len(application_instance_id_to_replace) > 255:
            raise ValueError("Invalid value for `application_instance_id_to_replace`, length must be less than or equal to `255`")
        if application_instance_id_to_replace is not None and len(application_instance_id_to_replace) < 1:
            raise ValueError("Invalid value for `application_instance_id_to_replace`, length must be greater than or equal to `1`")
        if application_instance_id_to_replace is not None and not re.search(r'^[a-zA-Z0-9\-\_]+$', application_instance_id_to_replace):
            raise ValueError("Invalid value for `application_instance_id_to_replace`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-\_]+$/`")

        self._application_instance_id_to_replace = application_instance_id_to_replace

    @property
    def default_runtime_context_device(self):
        """Gets the default_runtime_context_device of this CreateApplicationInstanceRequest.

        A device's ID.

        :return: The default_runtime_context_device of this CreateApplicationInstanceRequest.
        :rtype: str
        """
        return self._default_runtime_context_device

    @default_runtime_context_device.setter
    def default_runtime_context_device(self, default_runtime_context_device):
        """Sets the default_runtime_context_device of this CreateApplicationInstanceRequest.

        A device's ID.

        :param default_runtime_context_device: The default_runtime_context_device of this CreateApplicationInstanceRequest.
        :type default_runtime_context_device: str
        """
        if default_runtime_context_device is None:
            raise ValueError("Invalid value for `default_runtime_context_device`, must not be `None`")
        if default_runtime_context_device is not None and len(default_runtime_context_device) > 255:
            raise ValueError("Invalid value for `default_runtime_context_device`, length must be less than or equal to `255`")
        if default_runtime_context_device is not None and len(default_runtime_context_device) < 1:
            raise ValueError("Invalid value for `default_runtime_context_device`, length must be greater than or equal to `1`")
        if default_runtime_context_device is not None and not re.search(r'^[a-zA-Z0-9\-\_]+$', default_runtime_context_device):
            raise ValueError("Invalid value for `default_runtime_context_device`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-\_]+$/`")

        self._default_runtime_context_device = default_runtime_context_device

    @property
    def description(self):
        """Gets the description of this CreateApplicationInstanceRequest.

        A description for the application instance.

        :return: The description of this CreateApplicationInstanceRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateApplicationInstanceRequest.

        A description for the application instance.

        :param description: The description of this CreateApplicationInstanceRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'^.*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^.*$/`")

        self._description = description

    @property
    def manifest_overrides_payload(self):
        """Gets the manifest_overrides_payload of this CreateApplicationInstanceRequest.


        :return: The manifest_overrides_payload of this CreateApplicationInstanceRequest.
        :rtype: CreateApplicationInstanceRequestManifestOverridesPayload
        """
        return self._manifest_overrides_payload

    @manifest_overrides_payload.setter
    def manifest_overrides_payload(self, manifest_overrides_payload):
        """Sets the manifest_overrides_payload of this CreateApplicationInstanceRequest.


        :param manifest_overrides_payload: The manifest_overrides_payload of this CreateApplicationInstanceRequest.
        :type manifest_overrides_payload: CreateApplicationInstanceRequestManifestOverridesPayload
        """

        self._manifest_overrides_payload = manifest_overrides_payload

    @property
    def manifest_payload(self):
        """Gets the manifest_payload of this CreateApplicationInstanceRequest.


        :return: The manifest_payload of this CreateApplicationInstanceRequest.
        :rtype: CreateApplicationInstanceRequestManifestPayload
        """
        return self._manifest_payload

    @manifest_payload.setter
    def manifest_payload(self, manifest_payload):
        """Sets the manifest_payload of this CreateApplicationInstanceRequest.


        :param manifest_payload: The manifest_payload of this CreateApplicationInstanceRequest.
        :type manifest_payload: CreateApplicationInstanceRequestManifestPayload
        """
        if manifest_payload is None:
            raise ValueError("Invalid value for `manifest_payload`, must not be `None`")

        self._manifest_payload = manifest_payload

    @property
    def name(self):
        """Gets the name of this CreateApplicationInstanceRequest.

        A name for the application instance.

        :return: The name of this CreateApplicationInstanceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateApplicationInstanceRequest.

        A name for the application instance.

        :param name: The name of this CreateApplicationInstanceRequest.
        :type name: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9\-\_]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-\_]+$/`")

        self._name = name

    @property
    def runtime_role_arn(self):
        """Gets the runtime_role_arn of this CreateApplicationInstanceRequest.

        The ARN of a runtime role for the application instance.

        :return: The runtime_role_arn of this CreateApplicationInstanceRequest.
        :rtype: str
        """
        return self._runtime_role_arn

    @runtime_role_arn.setter
    def runtime_role_arn(self, runtime_role_arn):
        """Sets the runtime_role_arn of this CreateApplicationInstanceRequest.

        The ARN of a runtime role for the application instance.

        :param runtime_role_arn: The runtime_role_arn of this CreateApplicationInstanceRequest.
        :type runtime_role_arn: str
        """
        if runtime_role_arn is not None and len(runtime_role_arn) > 255:
            raise ValueError("Invalid value for `runtime_role_arn`, length must be less than or equal to `255`")
        if runtime_role_arn is not None and len(runtime_role_arn) < 1:
            raise ValueError("Invalid value for `runtime_role_arn`, length must be greater than or equal to `1`")
        if runtime_role_arn is not None and not re.search(r'^arn:[a-z0-9][-.a-z0-9]{0,62}:iam::[0-9]{12}:role\/.+$', runtime_role_arn):
            raise ValueError("Invalid value for `runtime_role_arn`, must be a follow pattern or equal to `/^arn:[a-z0-9][-.a-z0-9]{0,62}:iam::[0-9]{12}:role\/.+$/`")

        self._runtime_role_arn = runtime_role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateApplicationInstanceRequest.

        Tags for the application instance.

        :return: The tags of this CreateApplicationInstanceRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateApplicationInstanceRequest.

        Tags for the application instance.

        :param tags: The tags of this CreateApplicationInstanceRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
