# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PackageObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, package_version: str=None, patch_version: str=None):
        """PackageObject - a model defined in OpenAPI

        :param name: The name of this PackageObject.
        :param package_version: The package_version of this PackageObject.
        :param patch_version: The patch_version of this PackageObject.
        """
        self.openapi_types = {
            'name': str,
            'package_version': str,
            'patch_version': str
        }

        self.attribute_map = {
            'name': 'Name',
            'package_version': 'PackageVersion',
            'patch_version': 'PatchVersion'
        }

        self._name = name
        self._package_version = package_version
        self._patch_version = patch_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageObject of this PackageObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this PackageObject.


        :return: The name of this PackageObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PackageObject.


        :param name: The name of this PackageObject.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def package_version(self):
        """Gets the package_version of this PackageObject.


        :return: The package_version of this PackageObject.
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this PackageObject.


        :param package_version: The package_version of this PackageObject.
        :type package_version: str
        """
        if package_version is None:
            raise ValueError("Invalid value for `package_version`, must not be `None`")

        self._package_version = package_version

    @property
    def patch_version(self):
        """Gets the patch_version of this PackageObject.


        :return: The patch_version of this PackageObject.
        :rtype: str
        """
        return self._patch_version

    @patch_version.setter
    def patch_version(self, patch_version):
        """Sets the patch_version of this PackageObject.


        :param patch_version: The patch_version of this PackageObject.
        :type patch_version: str
        """
        if patch_version is None:
            raise ValueError("Invalid value for `patch_version`, must not be `None`")

        self._patch_version = patch_version
