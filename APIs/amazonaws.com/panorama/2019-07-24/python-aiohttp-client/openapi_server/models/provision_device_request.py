# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provision_device_request_networking_configuration import ProvisionDeviceRequestNetworkingConfiguration
import re
from openapi_server import util


class ProvisionDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, networking_configuration: ProvisionDeviceRequestNetworkingConfiguration=None, tags: Dict[str, str]=None):
        """ProvisionDeviceRequest - a model defined in OpenAPI

        :param description: The description of this ProvisionDeviceRequest.
        :param name: The name of this ProvisionDeviceRequest.
        :param networking_configuration: The networking_configuration of this ProvisionDeviceRequest.
        :param tags: The tags of this ProvisionDeviceRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'networking_configuration': ProvisionDeviceRequestNetworkingConfiguration,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'Description',
            'name': 'Name',
            'networking_configuration': 'NetworkingConfiguration',
            'tags': 'Tags'
        }

        self._description = description
        self._name = name
        self._networking_configuration = networking_configuration
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProvisionDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProvisionDevice_request of this ProvisionDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ProvisionDeviceRequest.

        A description for the device.

        :return: The description of this ProvisionDeviceRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProvisionDeviceRequest.

        A description for the device.

        :param description: The description of this ProvisionDeviceRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'^.*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^.*$/`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this ProvisionDeviceRequest.

        A name for the device.

        :return: The name of this ProvisionDeviceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvisionDeviceRequest.

        A name for the device.

        :param name: The name of this ProvisionDeviceRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9\-\_]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-\_]+$/`")

        self._name = name

    @property
    def networking_configuration(self):
        """Gets the networking_configuration of this ProvisionDeviceRequest.


        :return: The networking_configuration of this ProvisionDeviceRequest.
        :rtype: ProvisionDeviceRequestNetworkingConfiguration
        """
        return self._networking_configuration

    @networking_configuration.setter
    def networking_configuration(self, networking_configuration):
        """Sets the networking_configuration of this ProvisionDeviceRequest.


        :param networking_configuration: The networking_configuration of this ProvisionDeviceRequest.
        :type networking_configuration: ProvisionDeviceRequestNetworkingConfiguration
        """

        self._networking_configuration = networking_configuration

    @property
    def tags(self):
        """Gets the tags of this ProvisionDeviceRequest.

        Tags for the device.

        :return: The tags of this ProvisionDeviceRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ProvisionDeviceRequest.

        Tags for the device.

        :param tags: The tags of this ProvisionDeviceRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
