# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_signal import NodeSignal
from openapi_server import util


class SignalApplicationInstanceNodeInstancesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_signals: List[NodeSignal]=None):
        """SignalApplicationInstanceNodeInstancesRequest - a model defined in OpenAPI

        :param node_signals: The node_signals of this SignalApplicationInstanceNodeInstancesRequest.
        """
        self.openapi_types = {
            'node_signals': List[NodeSignal]
        }

        self.attribute_map = {
            'node_signals': 'NodeSignals'
        }

        self._node_signals = node_signals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignalApplicationInstanceNodeInstancesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignalApplicationInstanceNodeInstances_request of this SignalApplicationInstanceNodeInstancesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_signals(self):
        """Gets the node_signals of this SignalApplicationInstanceNodeInstancesRequest.

        A list of signals.

        :return: The node_signals of this SignalApplicationInstanceNodeInstancesRequest.
        :rtype: List[NodeSignal]
        """
        return self._node_signals

    @node_signals.setter
    def node_signals(self, node_signals):
        """Sets the node_signals of this SignalApplicationInstanceNodeInstancesRequest.

        A list of signals.

        :param node_signals: The node_signals of this SignalApplicationInstanceNodeInstancesRequest.
        :type node_signals: List[NodeSignal]
        """
        if node_signals is None:
            raise ValueError("Invalid value for `node_signals`, must not be `None`")
        if node_signals is not None and len(node_signals) < 1:
            raise ValueError("Invalid value for `node_signals`, number of items must be greater than or equal to `1`")

        self._node_signals = node_signals
