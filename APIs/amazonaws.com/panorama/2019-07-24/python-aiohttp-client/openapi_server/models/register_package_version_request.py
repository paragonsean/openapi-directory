# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RegisterPackageVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mark_latest: bool=None, owner_account: str=None):
        """RegisterPackageVersionRequest - a model defined in OpenAPI

        :param mark_latest: The mark_latest of this RegisterPackageVersionRequest.
        :param owner_account: The owner_account of this RegisterPackageVersionRequest.
        """
        self.openapi_types = {
            'mark_latest': bool,
            'owner_account': str
        }

        self.attribute_map = {
            'mark_latest': 'MarkLatest',
            'owner_account': 'OwnerAccount'
        }

        self._mark_latest = mark_latest
        self._owner_account = owner_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterPackageVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterPackageVersion_request of this RegisterPackageVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mark_latest(self):
        """Gets the mark_latest of this RegisterPackageVersionRequest.

        Whether to mark the new version as the latest version.

        :return: The mark_latest of this RegisterPackageVersionRequest.
        :rtype: bool
        """
        return self._mark_latest

    @mark_latest.setter
    def mark_latest(self, mark_latest):
        """Sets the mark_latest of this RegisterPackageVersionRequest.

        Whether to mark the new version as the latest version.

        :param mark_latest: The mark_latest of this RegisterPackageVersionRequest.
        :type mark_latest: bool
        """

        self._mark_latest = mark_latest

    @property
    def owner_account(self):
        """Gets the owner_account of this RegisterPackageVersionRequest.

        An owner account.

        :return: The owner_account of this RegisterPackageVersionRequest.
        :rtype: str
        """
        return self._owner_account

    @owner_account.setter
    def owner_account(self, owner_account):
        """Sets the owner_account of this RegisterPackageVersionRequest.

        An owner account.

        :param owner_account: The owner_account of this RegisterPackageVersionRequest.
        :type owner_account: str
        """
        if owner_account is not None and len(owner_account) > 12:
            raise ValueError("Invalid value for `owner_account`, length must be less than or equal to `12`")
        if owner_account is not None and len(owner_account) < 1:
            raise ValueError("Invalid value for `owner_account`, length must be greater than or equal to `1`")
        if owner_account is not None and not re.search(r'^[0-9a-z\_]+$', owner_account):
            raise ValueError("Invalid value for `owner_account`, must be a follow pattern or equal to `/^[0-9a-z\_]+$/`")

        self._owner_account = owner_account
