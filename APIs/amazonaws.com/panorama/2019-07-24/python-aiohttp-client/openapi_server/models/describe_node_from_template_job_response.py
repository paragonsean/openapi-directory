# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_from_template_job_status import NodeFromTemplateJobStatus
from openapi_server.models.template_type import TemplateType
from openapi_server import util


class DescribeNodeFromTemplateJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, job_id: str=None, job_tags: List=None, last_updated_time: datetime=None, node_description: str=None, node_name: str=None, output_package_name: str=None, output_package_version: str=None, status: NodeFromTemplateJobStatus=None, status_message: str=None, template_parameters: Dict=None, template_type: TemplateType=None):
        """DescribeNodeFromTemplateJobResponse - a model defined in OpenAPI

        :param created_time: The created_time of this DescribeNodeFromTemplateJobResponse.
        :param job_id: The job_id of this DescribeNodeFromTemplateJobResponse.
        :param job_tags: The job_tags of this DescribeNodeFromTemplateJobResponse.
        :param last_updated_time: The last_updated_time of this DescribeNodeFromTemplateJobResponse.
        :param node_description: The node_description of this DescribeNodeFromTemplateJobResponse.
        :param node_name: The node_name of this DescribeNodeFromTemplateJobResponse.
        :param output_package_name: The output_package_name of this DescribeNodeFromTemplateJobResponse.
        :param output_package_version: The output_package_version of this DescribeNodeFromTemplateJobResponse.
        :param status: The status of this DescribeNodeFromTemplateJobResponse.
        :param status_message: The status_message of this DescribeNodeFromTemplateJobResponse.
        :param template_parameters: The template_parameters of this DescribeNodeFromTemplateJobResponse.
        :param template_type: The template_type of this DescribeNodeFromTemplateJobResponse.
        """
        self.openapi_types = {
            'created_time': datetime,
            'job_id': str,
            'job_tags': List,
            'last_updated_time': datetime,
            'node_description': str,
            'node_name': str,
            'output_package_name': str,
            'output_package_version': str,
            'status': NodeFromTemplateJobStatus,
            'status_message': str,
            'template_parameters': Dict,
            'template_type': TemplateType
        }

        self.attribute_map = {
            'created_time': 'CreatedTime',
            'job_id': 'JobId',
            'job_tags': 'JobTags',
            'last_updated_time': 'LastUpdatedTime',
            'node_description': 'NodeDescription',
            'node_name': 'NodeName',
            'output_package_name': 'OutputPackageName',
            'output_package_version': 'OutputPackageVersion',
            'status': 'Status',
            'status_message': 'StatusMessage',
            'template_parameters': 'TemplateParameters',
            'template_type': 'TemplateType'
        }

        self._created_time = created_time
        self._job_id = job_id
        self._job_tags = job_tags
        self._last_updated_time = last_updated_time
        self._node_description = node_description
        self._node_name = node_name
        self._output_package_name = output_package_name
        self._output_package_version = output_package_version
        self._status = status
        self._status_message = status_message
        self._template_parameters = template_parameters
        self._template_type = template_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeNodeFromTemplateJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeNodeFromTemplateJobResponse of this DescribeNodeFromTemplateJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this DescribeNodeFromTemplateJobResponse.


        :return: The created_time of this DescribeNodeFromTemplateJobResponse.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this DescribeNodeFromTemplateJobResponse.


        :param created_time: The created_time of this DescribeNodeFromTemplateJobResponse.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def job_id(self):
        """Gets the job_id of this DescribeNodeFromTemplateJobResponse.


        :return: The job_id of this DescribeNodeFromTemplateJobResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this DescribeNodeFromTemplateJobResponse.


        :param job_id: The job_id of this DescribeNodeFromTemplateJobResponse.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def job_tags(self):
        """Gets the job_tags of this DescribeNodeFromTemplateJobResponse.


        :return: The job_tags of this DescribeNodeFromTemplateJobResponse.
        :rtype: List
        """
        return self._job_tags

    @job_tags.setter
    def job_tags(self, job_tags):
        """Sets the job_tags of this DescribeNodeFromTemplateJobResponse.


        :param job_tags: The job_tags of this DescribeNodeFromTemplateJobResponse.
        :type job_tags: List
        """

        self._job_tags = job_tags

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this DescribeNodeFromTemplateJobResponse.


        :return: The last_updated_time of this DescribeNodeFromTemplateJobResponse.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this DescribeNodeFromTemplateJobResponse.


        :param last_updated_time: The last_updated_time of this DescribeNodeFromTemplateJobResponse.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def node_description(self):
        """Gets the node_description of this DescribeNodeFromTemplateJobResponse.


        :return: The node_description of this DescribeNodeFromTemplateJobResponse.
        :rtype: str
        """
        return self._node_description

    @node_description.setter
    def node_description(self, node_description):
        """Sets the node_description of this DescribeNodeFromTemplateJobResponse.


        :param node_description: The node_description of this DescribeNodeFromTemplateJobResponse.
        :type node_description: str
        """

        self._node_description = node_description

    @property
    def node_name(self):
        """Gets the node_name of this DescribeNodeFromTemplateJobResponse.


        :return: The node_name of this DescribeNodeFromTemplateJobResponse.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this DescribeNodeFromTemplateJobResponse.


        :param node_name: The node_name of this DescribeNodeFromTemplateJobResponse.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def output_package_name(self):
        """Gets the output_package_name of this DescribeNodeFromTemplateJobResponse.


        :return: The output_package_name of this DescribeNodeFromTemplateJobResponse.
        :rtype: str
        """
        return self._output_package_name

    @output_package_name.setter
    def output_package_name(self, output_package_name):
        """Sets the output_package_name of this DescribeNodeFromTemplateJobResponse.


        :param output_package_name: The output_package_name of this DescribeNodeFromTemplateJobResponse.
        :type output_package_name: str
        """
        if output_package_name is None:
            raise ValueError("Invalid value for `output_package_name`, must not be `None`")

        self._output_package_name = output_package_name

    @property
    def output_package_version(self):
        """Gets the output_package_version of this DescribeNodeFromTemplateJobResponse.


        :return: The output_package_version of this DescribeNodeFromTemplateJobResponse.
        :rtype: str
        """
        return self._output_package_version

    @output_package_version.setter
    def output_package_version(self, output_package_version):
        """Sets the output_package_version of this DescribeNodeFromTemplateJobResponse.


        :param output_package_version: The output_package_version of this DescribeNodeFromTemplateJobResponse.
        :type output_package_version: str
        """
        if output_package_version is None:
            raise ValueError("Invalid value for `output_package_version`, must not be `None`")

        self._output_package_version = output_package_version

    @property
    def status(self):
        """Gets the status of this DescribeNodeFromTemplateJobResponse.


        :return: The status of this DescribeNodeFromTemplateJobResponse.
        :rtype: NodeFromTemplateJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DescribeNodeFromTemplateJobResponse.


        :param status: The status of this DescribeNodeFromTemplateJobResponse.
        :type status: NodeFromTemplateJobStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this DescribeNodeFromTemplateJobResponse.


        :return: The status_message of this DescribeNodeFromTemplateJobResponse.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this DescribeNodeFromTemplateJobResponse.


        :param status_message: The status_message of this DescribeNodeFromTemplateJobResponse.
        :type status_message: str
        """
        if status_message is None:
            raise ValueError("Invalid value for `status_message`, must not be `None`")

        self._status_message = status_message

    @property
    def template_parameters(self):
        """Gets the template_parameters of this DescribeNodeFromTemplateJobResponse.


        :return: The template_parameters of this DescribeNodeFromTemplateJobResponse.
        :rtype: Dict
        """
        return self._template_parameters

    @template_parameters.setter
    def template_parameters(self, template_parameters):
        """Sets the template_parameters of this DescribeNodeFromTemplateJobResponse.


        :param template_parameters: The template_parameters of this DescribeNodeFromTemplateJobResponse.
        :type template_parameters: Dict
        """
        if template_parameters is None:
            raise ValueError("Invalid value for `template_parameters`, must not be `None`")

        self._template_parameters = template_parameters

    @property
    def template_type(self):
        """Gets the template_type of this DescribeNodeFromTemplateJobResponse.


        :return: The template_type of this DescribeNodeFromTemplateJobResponse.
        :rtype: TemplateType
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this DescribeNodeFromTemplateJobResponse.


        :param template_type: The template_type of this DescribeNodeFromTemplateJobResponse.
        :type template_type: TemplateType
        """
        if template_type is None:
            raise ValueError("Invalid value for `template_type`, must not be `None`")

        self._template_type = template_type
