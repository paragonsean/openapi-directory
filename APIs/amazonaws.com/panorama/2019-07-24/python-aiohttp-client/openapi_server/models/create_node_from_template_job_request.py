# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_resource_tags import JobResourceTags
import re
from openapi_server import util


class CreateNodeFromTemplateJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_tags: List[JobResourceTags]=None, node_description: str=None, node_name: str=None, output_package_name: str=None, output_package_version: str=None, template_parameters: Dict[str, str]=None, template_type: str=None):
        """CreateNodeFromTemplateJobRequest - a model defined in OpenAPI

        :param job_tags: The job_tags of this CreateNodeFromTemplateJobRequest.
        :param node_description: The node_description of this CreateNodeFromTemplateJobRequest.
        :param node_name: The node_name of this CreateNodeFromTemplateJobRequest.
        :param output_package_name: The output_package_name of this CreateNodeFromTemplateJobRequest.
        :param output_package_version: The output_package_version of this CreateNodeFromTemplateJobRequest.
        :param template_parameters: The template_parameters of this CreateNodeFromTemplateJobRequest.
        :param template_type: The template_type of this CreateNodeFromTemplateJobRequest.
        """
        self.openapi_types = {
            'job_tags': List[JobResourceTags],
            'node_description': str,
            'node_name': str,
            'output_package_name': str,
            'output_package_version': str,
            'template_parameters': Dict[str, str],
            'template_type': str
        }

        self.attribute_map = {
            'job_tags': 'JobTags',
            'node_description': 'NodeDescription',
            'node_name': 'NodeName',
            'output_package_name': 'OutputPackageName',
            'output_package_version': 'OutputPackageVersion',
            'template_parameters': 'TemplateParameters',
            'template_type': 'TemplateType'
        }

        self._job_tags = job_tags
        self._node_description = node_description
        self._node_name = node_name
        self._output_package_name = output_package_name
        self._output_package_version = output_package_version
        self._template_parameters = template_parameters
        self._template_type = template_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNodeFromTemplateJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateNodeFromTemplateJob_request of this CreateNodeFromTemplateJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_tags(self):
        """Gets the job_tags of this CreateNodeFromTemplateJobRequest.

        Tags for the job.

        :return: The job_tags of this CreateNodeFromTemplateJobRequest.
        :rtype: List[JobResourceTags]
        """
        return self._job_tags

    @job_tags.setter
    def job_tags(self, job_tags):
        """Sets the job_tags of this CreateNodeFromTemplateJobRequest.

        Tags for the job.

        :param job_tags: The job_tags of this CreateNodeFromTemplateJobRequest.
        :type job_tags: List[JobResourceTags]
        """

        self._job_tags = job_tags

    @property
    def node_description(self):
        """Gets the node_description of this CreateNodeFromTemplateJobRequest.

        A description for the node.

        :return: The node_description of this CreateNodeFromTemplateJobRequest.
        :rtype: str
        """
        return self._node_description

    @node_description.setter
    def node_description(self, node_description):
        """Sets the node_description of this CreateNodeFromTemplateJobRequest.

        A description for the node.

        :param node_description: The node_description of this CreateNodeFromTemplateJobRequest.
        :type node_description: str
        """
        if node_description is not None and len(node_description) > 255:
            raise ValueError("Invalid value for `node_description`, length must be less than or equal to `255`")
        if node_description is not None and len(node_description) < 0:
            raise ValueError("Invalid value for `node_description`, length must be greater than or equal to `0`")
        if node_description is not None and not re.search(r'^.*$', node_description):
            raise ValueError("Invalid value for `node_description`, must be a follow pattern or equal to `/^.*$/`")

        self._node_description = node_description

    @property
    def node_name(self):
        """Gets the node_name of this CreateNodeFromTemplateJobRequest.

        A name for the node.

        :return: The node_name of this CreateNodeFromTemplateJobRequest.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this CreateNodeFromTemplateJobRequest.

        A name for the node.

        :param node_name: The node_name of this CreateNodeFromTemplateJobRequest.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")
        if node_name is not None and len(node_name) > 128:
            raise ValueError("Invalid value for `node_name`, length must be less than or equal to `128`")
        if node_name is not None and len(node_name) < 1:
            raise ValueError("Invalid value for `node_name`, length must be greater than or equal to `1`")
        if node_name is not None and not re.search(r'^[a-zA-Z0-9\-\_]+$', node_name):
            raise ValueError("Invalid value for `node_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-\_]+$/`")

        self._node_name = node_name

    @property
    def output_package_name(self):
        """Gets the output_package_name of this CreateNodeFromTemplateJobRequest.

        An output package name for the node.

        :return: The output_package_name of this CreateNodeFromTemplateJobRequest.
        :rtype: str
        """
        return self._output_package_name

    @output_package_name.setter
    def output_package_name(self, output_package_name):
        """Sets the output_package_name of this CreateNodeFromTemplateJobRequest.

        An output package name for the node.

        :param output_package_name: The output_package_name of this CreateNodeFromTemplateJobRequest.
        :type output_package_name: str
        """
        if output_package_name is None:
            raise ValueError("Invalid value for `output_package_name`, must not be `None`")
        if output_package_name is not None and len(output_package_name) > 128:
            raise ValueError("Invalid value for `output_package_name`, length must be less than or equal to `128`")
        if output_package_name is not None and len(output_package_name) < 1:
            raise ValueError("Invalid value for `output_package_name`, length must be greater than or equal to `1`")
        if output_package_name is not None and not re.search(r'^[a-zA-Z0-9\-\_]+$', output_package_name):
            raise ValueError("Invalid value for `output_package_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-\_]+$/`")

        self._output_package_name = output_package_name

    @property
    def output_package_version(self):
        """Gets the output_package_version of this CreateNodeFromTemplateJobRequest.

        An output package version for the node.

        :return: The output_package_version of this CreateNodeFromTemplateJobRequest.
        :rtype: str
        """
        return self._output_package_version

    @output_package_version.setter
    def output_package_version(self, output_package_version):
        """Sets the output_package_version of this CreateNodeFromTemplateJobRequest.

        An output package version for the node.

        :param output_package_version: The output_package_version of this CreateNodeFromTemplateJobRequest.
        :type output_package_version: str
        """
        if output_package_version is None:
            raise ValueError("Invalid value for `output_package_version`, must not be `None`")
        if output_package_version is not None and len(output_package_version) > 255:
            raise ValueError("Invalid value for `output_package_version`, length must be less than or equal to `255`")
        if output_package_version is not None and len(output_package_version) < 1:
            raise ValueError("Invalid value for `output_package_version`, length must be greater than or equal to `1`")
        if output_package_version is not None and not re.search(r'^([0-9]+)\.([0-9]+)$', output_package_version):
            raise ValueError("Invalid value for `output_package_version`, must be a follow pattern or equal to `/^([0-9]+)\.([0-9]+)$/`")

        self._output_package_version = output_package_version

    @property
    def template_parameters(self):
        """Gets the template_parameters of this CreateNodeFromTemplateJobRequest.

        Template parameters for the node.

        :return: The template_parameters of this CreateNodeFromTemplateJobRequest.
        :rtype: Dict[str, str]
        """
        return self._template_parameters

    @template_parameters.setter
    def template_parameters(self, template_parameters):
        """Sets the template_parameters of this CreateNodeFromTemplateJobRequest.

        Template parameters for the node.

        :param template_parameters: The template_parameters of this CreateNodeFromTemplateJobRequest.
        :type template_parameters: Dict[str, str]
        """
        if template_parameters is None:
            raise ValueError("Invalid value for `template_parameters`, must not be `None`")

        self._template_parameters = template_parameters

    @property
    def template_type(self):
        """Gets the template_type of this CreateNodeFromTemplateJobRequest.

        The type of node.

        :return: The template_type of this CreateNodeFromTemplateJobRequest.
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this CreateNodeFromTemplateJobRequest.

        The type of node.

        :param template_type: The template_type of this CreateNodeFromTemplateJobRequest.
        :type template_type: str
        """
        allowed_values = ["RTSP_CAMERA_STREAM"]  # noqa: E501
        if template_type not in allowed_values:
            raise ValueError(
                "Invalid value for `template_type` ({0}), must be one of {1}"
                .format(template_type, allowed_values)
            )

        self._template_type = template_type
