# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreatePackageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package_name: str=None, tags: Dict[str, str]=None):
        """CreatePackageRequest - a model defined in OpenAPI

        :param package_name: The package_name of this CreatePackageRequest.
        :param tags: The tags of this CreatePackageRequest.
        """
        self.openapi_types = {
            'package_name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'package_name': 'PackageName',
            'tags': 'Tags'
        }

        self._package_name = package_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePackageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePackage_request of this CreatePackageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_name(self):
        """Gets the package_name of this CreatePackageRequest.

        A name for the package.

        :return: The package_name of this CreatePackageRequest.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this CreatePackageRequest.

        A name for the package.

        :param package_name: The package_name of this CreatePackageRequest.
        :type package_name: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")
        if package_name is not None and len(package_name) > 128:
            raise ValueError("Invalid value for `package_name`, length must be less than or equal to `128`")
        if package_name is not None and len(package_name) < 1:
            raise ValueError("Invalid value for `package_name`, length must be greater than or equal to `1`")
        if package_name is not None and not re.search(r'^[a-zA-Z0-9\-\_]+$', package_name):
            raise ValueError("Invalid value for `package_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-\_]+$/`")

        self._package_name = package_name

    @property
    def tags(self):
        """Gets the tags of this CreatePackageRequest.

        Tags for the package.

        :return: The tags of this CreatePackageRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePackageRequest.

        Tags for the package.

        :param tags: The tags of this CreatePackageRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
