/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDeviceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDeviceResponse::OAIDescribeDeviceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDeviceResponse::OAIDescribeDeviceResponse() {
    this->initializeModel();
}

OAIDescribeDeviceResponse::~OAIDescribeDeviceResponse() {}

void OAIDescribeDeviceResponse::initializeModel() {

    m_alternate_softwares_isSet = false;
    m_alternate_softwares_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_current_networking_status_isSet = false;
    m_current_networking_status_isValid = false;

    m_current_software_isSet = false;
    m_current_software_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_device_aggregated_status_isSet = false;
    m_device_aggregated_status_isValid = false;

    m_device_connection_status_isSet = false;
    m_device_connection_status_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_latest_alternate_software_isSet = false;
    m_latest_alternate_software_isValid = false;

    m_latest_device_job_isSet = false;
    m_latest_device_job_isValid = false;

    m_latest_software_isSet = false;
    m_latest_software_isValid = false;

    m_lease_expiration_time_isSet = false;
    m_lease_expiration_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_networking_configuration_isSet = false;
    m_networking_configuration_isValid = false;

    m_provisioning_status_isSet = false;
    m_provisioning_status_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDescribeDeviceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDeviceResponse::fromJsonObject(QJsonObject json) {

    m_alternate_softwares_isValid = ::OpenAPI::fromJsonValue(m_alternate_softwares, json[QString("AlternateSoftwares")]);
    m_alternate_softwares_isSet = !json[QString("AlternateSoftwares")].isNull() && m_alternate_softwares_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("Brand")]);
    m_brand_isSet = !json[QString("Brand")].isNull() && m_brand_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_current_networking_status_isValid = ::OpenAPI::fromJsonValue(m_current_networking_status, json[QString("CurrentNetworkingStatus")]);
    m_current_networking_status_isSet = !json[QString("CurrentNetworkingStatus")].isNull() && m_current_networking_status_isValid;

    m_current_software_isValid = ::OpenAPI::fromJsonValue(m_current_software, json[QString("CurrentSoftware")]);
    m_current_software_isSet = !json[QString("CurrentSoftware")].isNull() && m_current_software_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_device_aggregated_status_isValid = ::OpenAPI::fromJsonValue(m_device_aggregated_status, json[QString("DeviceAggregatedStatus")]);
    m_device_aggregated_status_isSet = !json[QString("DeviceAggregatedStatus")].isNull() && m_device_aggregated_status_isValid;

    m_device_connection_status_isValid = ::OpenAPI::fromJsonValue(m_device_connection_status, json[QString("DeviceConnectionStatus")]);
    m_device_connection_status_isSet = !json[QString("DeviceConnectionStatus")].isNull() && m_device_connection_status_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_latest_alternate_software_isValid = ::OpenAPI::fromJsonValue(m_latest_alternate_software, json[QString("LatestAlternateSoftware")]);
    m_latest_alternate_software_isSet = !json[QString("LatestAlternateSoftware")].isNull() && m_latest_alternate_software_isValid;

    m_latest_device_job_isValid = ::OpenAPI::fromJsonValue(m_latest_device_job, json[QString("LatestDeviceJob")]);
    m_latest_device_job_isSet = !json[QString("LatestDeviceJob")].isNull() && m_latest_device_job_isValid;

    m_latest_software_isValid = ::OpenAPI::fromJsonValue(m_latest_software, json[QString("LatestSoftware")]);
    m_latest_software_isSet = !json[QString("LatestSoftware")].isNull() && m_latest_software_isValid;

    m_lease_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_lease_expiration_time, json[QString("LeaseExpirationTime")]);
    m_lease_expiration_time_isSet = !json[QString("LeaseExpirationTime")].isNull() && m_lease_expiration_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_networking_configuration_isValid = ::OpenAPI::fromJsonValue(m_networking_configuration, json[QString("NetworkingConfiguration")]);
    m_networking_configuration_isSet = !json[QString("NetworkingConfiguration")].isNull() && m_networking_configuration_isValid;

    m_provisioning_status_isValid = ::OpenAPI::fromJsonValue(m_provisioning_status, json[QString("ProvisioningStatus")]);
    m_provisioning_status_isSet = !json[QString("ProvisioningStatus")].isNull() && m_provisioning_status_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("SerialNumber")]);
    m_serial_number_isSet = !json[QString("SerialNumber")].isNull() && m_serial_number_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIDescribeDeviceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDeviceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_softwares.isSet()) {
        obj.insert(QString("AlternateSoftwares"), ::OpenAPI::toJsonValue(m_alternate_softwares));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_brand.isSet()) {
        obj.insert(QString("Brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_current_networking_status.isSet()) {
        obj.insert(QString("CurrentNetworkingStatus"), ::OpenAPI::toJsonValue(m_current_networking_status));
    }
    if (m_current_software_isSet) {
        obj.insert(QString("CurrentSoftware"), ::OpenAPI::toJsonValue(m_current_software));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_device_aggregated_status.isSet()) {
        obj.insert(QString("DeviceAggregatedStatus"), ::OpenAPI::toJsonValue(m_device_aggregated_status));
    }
    if (m_device_connection_status.isSet()) {
        obj.insert(QString("DeviceConnectionStatus"), ::OpenAPI::toJsonValue(m_device_connection_status));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_latest_alternate_software_isSet) {
        obj.insert(QString("LatestAlternateSoftware"), ::OpenAPI::toJsonValue(m_latest_alternate_software));
    }
    if (m_latest_device_job.isSet()) {
        obj.insert(QString("LatestDeviceJob"), ::OpenAPI::toJsonValue(m_latest_device_job));
    }
    if (m_latest_software_isSet) {
        obj.insert(QString("LatestSoftware"), ::OpenAPI::toJsonValue(m_latest_software));
    }
    if (m_lease_expiration_time_isSet) {
        obj.insert(QString("LeaseExpirationTime"), ::OpenAPI::toJsonValue(m_lease_expiration_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_networking_configuration.isSet()) {
        obj.insert(QString("NetworkingConfiguration"), ::OpenAPI::toJsonValue(m_networking_configuration));
    }
    if (m_provisioning_status.isSet()) {
        obj.insert(QString("ProvisioningStatus"), ::OpenAPI::toJsonValue(m_provisioning_status));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("SerialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList OAIDescribeDeviceResponse::getAlternateSoftwares() const {
    return m_alternate_softwares;
}
void OAIDescribeDeviceResponse::setAlternateSoftwares(const QList &alternate_softwares) {
    m_alternate_softwares = alternate_softwares;
    m_alternate_softwares_isSet = true;
}

bool OAIDescribeDeviceResponse::is_alternate_softwares_Set() const{
    return m_alternate_softwares_isSet;
}

bool OAIDescribeDeviceResponse::is_alternate_softwares_Valid() const{
    return m_alternate_softwares_isValid;
}

QString OAIDescribeDeviceResponse::getArn() const {
    return m_arn;
}
void OAIDescribeDeviceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIDescribeDeviceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIDescribeDeviceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIDeviceBrand OAIDescribeDeviceResponse::getBrand() const {
    return m_brand;
}
void OAIDescribeDeviceResponse::setBrand(const OAIDeviceBrand &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIDescribeDeviceResponse::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIDescribeDeviceResponse::is_brand_Valid() const{
    return m_brand_isValid;
}

QDateTime OAIDescribeDeviceResponse::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeDeviceResponse::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeDeviceResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeDeviceResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIDescribeDeviceResponse_CurrentNetworkingStatus OAIDescribeDeviceResponse::getCurrentNetworkingStatus() const {
    return m_current_networking_status;
}
void OAIDescribeDeviceResponse::setCurrentNetworkingStatus(const OAIDescribeDeviceResponse_CurrentNetworkingStatus &current_networking_status) {
    m_current_networking_status = current_networking_status;
    m_current_networking_status_isSet = true;
}

bool OAIDescribeDeviceResponse::is_current_networking_status_Set() const{
    return m_current_networking_status_isSet;
}

bool OAIDescribeDeviceResponse::is_current_networking_status_Valid() const{
    return m_current_networking_status_isValid;
}

QString OAIDescribeDeviceResponse::getCurrentSoftware() const {
    return m_current_software;
}
void OAIDescribeDeviceResponse::setCurrentSoftware(const QString &current_software) {
    m_current_software = current_software;
    m_current_software_isSet = true;
}

bool OAIDescribeDeviceResponse::is_current_software_Set() const{
    return m_current_software_isSet;
}

bool OAIDescribeDeviceResponse::is_current_software_Valid() const{
    return m_current_software_isValid;
}

QString OAIDescribeDeviceResponse::getDescription() const {
    return m_description;
}
void OAIDescribeDeviceResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeDeviceResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeDeviceResponse::is_description_Valid() const{
    return m_description_isValid;
}

OAIDeviceAggregatedStatus OAIDescribeDeviceResponse::getDeviceAggregatedStatus() const {
    return m_device_aggregated_status;
}
void OAIDescribeDeviceResponse::setDeviceAggregatedStatus(const OAIDeviceAggregatedStatus &device_aggregated_status) {
    m_device_aggregated_status = device_aggregated_status;
    m_device_aggregated_status_isSet = true;
}

bool OAIDescribeDeviceResponse::is_device_aggregated_status_Set() const{
    return m_device_aggregated_status_isSet;
}

bool OAIDescribeDeviceResponse::is_device_aggregated_status_Valid() const{
    return m_device_aggregated_status_isValid;
}

OAIDeviceConnectionStatus OAIDescribeDeviceResponse::getDeviceConnectionStatus() const {
    return m_device_connection_status;
}
void OAIDescribeDeviceResponse::setDeviceConnectionStatus(const OAIDeviceConnectionStatus &device_connection_status) {
    m_device_connection_status = device_connection_status;
    m_device_connection_status_isSet = true;
}

bool OAIDescribeDeviceResponse::is_device_connection_status_Set() const{
    return m_device_connection_status_isSet;
}

bool OAIDescribeDeviceResponse::is_device_connection_status_Valid() const{
    return m_device_connection_status_isValid;
}

QString OAIDescribeDeviceResponse::getDeviceId() const {
    return m_device_id;
}
void OAIDescribeDeviceResponse::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDescribeDeviceResponse::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDescribeDeviceResponse::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIDescribeDeviceResponse::getLatestAlternateSoftware() const {
    return m_latest_alternate_software;
}
void OAIDescribeDeviceResponse::setLatestAlternateSoftware(const QString &latest_alternate_software) {
    m_latest_alternate_software = latest_alternate_software;
    m_latest_alternate_software_isSet = true;
}

bool OAIDescribeDeviceResponse::is_latest_alternate_software_Set() const{
    return m_latest_alternate_software_isSet;
}

bool OAIDescribeDeviceResponse::is_latest_alternate_software_Valid() const{
    return m_latest_alternate_software_isValid;
}

OAIDescribeDeviceResponse_LatestDeviceJob OAIDescribeDeviceResponse::getLatestDeviceJob() const {
    return m_latest_device_job;
}
void OAIDescribeDeviceResponse::setLatestDeviceJob(const OAIDescribeDeviceResponse_LatestDeviceJob &latest_device_job) {
    m_latest_device_job = latest_device_job;
    m_latest_device_job_isSet = true;
}

bool OAIDescribeDeviceResponse::is_latest_device_job_Set() const{
    return m_latest_device_job_isSet;
}

bool OAIDescribeDeviceResponse::is_latest_device_job_Valid() const{
    return m_latest_device_job_isValid;
}

QString OAIDescribeDeviceResponse::getLatestSoftware() const {
    return m_latest_software;
}
void OAIDescribeDeviceResponse::setLatestSoftware(const QString &latest_software) {
    m_latest_software = latest_software;
    m_latest_software_isSet = true;
}

bool OAIDescribeDeviceResponse::is_latest_software_Set() const{
    return m_latest_software_isSet;
}

bool OAIDescribeDeviceResponse::is_latest_software_Valid() const{
    return m_latest_software_isValid;
}

QDateTime OAIDescribeDeviceResponse::getLeaseExpirationTime() const {
    return m_lease_expiration_time;
}
void OAIDescribeDeviceResponse::setLeaseExpirationTime(const QDateTime &lease_expiration_time) {
    m_lease_expiration_time = lease_expiration_time;
    m_lease_expiration_time_isSet = true;
}

bool OAIDescribeDeviceResponse::is_lease_expiration_time_Set() const{
    return m_lease_expiration_time_isSet;
}

bool OAIDescribeDeviceResponse::is_lease_expiration_time_Valid() const{
    return m_lease_expiration_time_isValid;
}

QString OAIDescribeDeviceResponse::getName() const {
    return m_name;
}
void OAIDescribeDeviceResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeDeviceResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeDeviceResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIDescribeDeviceResponse_NetworkingConfiguration OAIDescribeDeviceResponse::getNetworkingConfiguration() const {
    return m_networking_configuration;
}
void OAIDescribeDeviceResponse::setNetworkingConfiguration(const OAIDescribeDeviceResponse_NetworkingConfiguration &networking_configuration) {
    m_networking_configuration = networking_configuration;
    m_networking_configuration_isSet = true;
}

bool OAIDescribeDeviceResponse::is_networking_configuration_Set() const{
    return m_networking_configuration_isSet;
}

bool OAIDescribeDeviceResponse::is_networking_configuration_Valid() const{
    return m_networking_configuration_isValid;
}

OAIDeviceStatus OAIDescribeDeviceResponse::getProvisioningStatus() const {
    return m_provisioning_status;
}
void OAIDescribeDeviceResponse::setProvisioningStatus(const OAIDeviceStatus &provisioning_status) {
    m_provisioning_status = provisioning_status;
    m_provisioning_status_isSet = true;
}

bool OAIDescribeDeviceResponse::is_provisioning_status_Set() const{
    return m_provisioning_status_isSet;
}

bool OAIDescribeDeviceResponse::is_provisioning_status_Valid() const{
    return m_provisioning_status_isValid;
}

QString OAIDescribeDeviceResponse::getSerialNumber() const {
    return m_serial_number;
}
void OAIDescribeDeviceResponse::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIDescribeDeviceResponse::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIDescribeDeviceResponse::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QMap OAIDescribeDeviceResponse::getTags() const {
    return m_tags;
}
void OAIDescribeDeviceResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescribeDeviceResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescribeDeviceResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIDeviceType OAIDescribeDeviceResponse::getType() const {
    return m_type;
}
void OAIDescribeDeviceResponse::setType(const OAIDeviceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDescribeDeviceResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDescribeDeviceResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDescribeDeviceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_softwares.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_networking_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_software_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_aggregated_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_alternate_software_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_device_job.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_software_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networking_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDeviceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
