/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationInstance::OAIApplicationInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationInstance::OAIApplicationInstance() {
    this->initializeModel();
}

OAIApplicationInstance::~OAIApplicationInstance() {}

void OAIApplicationInstance::initializeModel() {

    m_application_instance_id_isSet = false;
    m_application_instance_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_default_runtime_context_device_isSet = false;
    m_default_runtime_context_device_isValid = false;

    m_default_runtime_context_device_name_isSet = false;
    m_default_runtime_context_device_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runtime_context_states_isSet = false;
    m_runtime_context_states_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIApplicationInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationInstance::fromJsonObject(QJsonObject json) {

    m_application_instance_id_isValid = ::OpenAPI::fromJsonValue(m_application_instance_id, json[QString("ApplicationInstanceId")]);
    m_application_instance_id_isSet = !json[QString("ApplicationInstanceId")].isNull() && m_application_instance_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_default_runtime_context_device_isValid = ::OpenAPI::fromJsonValue(m_default_runtime_context_device, json[QString("DefaultRuntimeContextDevice")]);
    m_default_runtime_context_device_isSet = !json[QString("DefaultRuntimeContextDevice")].isNull() && m_default_runtime_context_device_isValid;

    m_default_runtime_context_device_name_isValid = ::OpenAPI::fromJsonValue(m_default_runtime_context_device_name, json[QString("DefaultRuntimeContextDeviceName")]);
    m_default_runtime_context_device_name_isSet = !json[QString("DefaultRuntimeContextDeviceName")].isNull() && m_default_runtime_context_device_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("HealthStatus")]);
    m_health_status_isSet = !json[QString("HealthStatus")].isNull() && m_health_status_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_runtime_context_states_isValid = ::OpenAPI::fromJsonValue(m_runtime_context_states, json[QString("RuntimeContextStates")]);
    m_runtime_context_states_isSet = !json[QString("RuntimeContextStates")].isNull() && m_runtime_context_states_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("StatusDescription")]);
    m_status_description_isSet = !json[QString("StatusDescription")].isNull() && m_status_description_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIApplicationInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_application_instance_id_isSet) {
        obj.insert(QString("ApplicationInstanceId"), ::OpenAPI::toJsonValue(m_application_instance_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_default_runtime_context_device_isSet) {
        obj.insert(QString("DefaultRuntimeContextDevice"), ::OpenAPI::toJsonValue(m_default_runtime_context_device));
    }
    if (m_default_runtime_context_device_name_isSet) {
        obj.insert(QString("DefaultRuntimeContextDeviceName"), ::OpenAPI::toJsonValue(m_default_runtime_context_device_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_health_status.isSet()) {
        obj.insert(QString("HealthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runtime_context_states.isSet()) {
        obj.insert(QString("RuntimeContextStates"), ::OpenAPI::toJsonValue(m_runtime_context_states));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("StatusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIApplicationInstance::getApplicationInstanceId() const {
    return m_application_instance_id;
}
void OAIApplicationInstance::setApplicationInstanceId(const QString &application_instance_id) {
    m_application_instance_id = application_instance_id;
    m_application_instance_id_isSet = true;
}

bool OAIApplicationInstance::is_application_instance_id_Set() const{
    return m_application_instance_id_isSet;
}

bool OAIApplicationInstance::is_application_instance_id_Valid() const{
    return m_application_instance_id_isValid;
}

QString OAIApplicationInstance::getArn() const {
    return m_arn;
}
void OAIApplicationInstance::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIApplicationInstance::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIApplicationInstance::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIApplicationInstance::getCreatedTime() const {
    return m_created_time;
}
void OAIApplicationInstance::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIApplicationInstance::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIApplicationInstance::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIApplicationInstance::getDefaultRuntimeContextDevice() const {
    return m_default_runtime_context_device;
}
void OAIApplicationInstance::setDefaultRuntimeContextDevice(const QString &default_runtime_context_device) {
    m_default_runtime_context_device = default_runtime_context_device;
    m_default_runtime_context_device_isSet = true;
}

bool OAIApplicationInstance::is_default_runtime_context_device_Set() const{
    return m_default_runtime_context_device_isSet;
}

bool OAIApplicationInstance::is_default_runtime_context_device_Valid() const{
    return m_default_runtime_context_device_isValid;
}

QString OAIApplicationInstance::getDefaultRuntimeContextDeviceName() const {
    return m_default_runtime_context_device_name;
}
void OAIApplicationInstance::setDefaultRuntimeContextDeviceName(const QString &default_runtime_context_device_name) {
    m_default_runtime_context_device_name = default_runtime_context_device_name;
    m_default_runtime_context_device_name_isSet = true;
}

bool OAIApplicationInstance::is_default_runtime_context_device_name_Set() const{
    return m_default_runtime_context_device_name_isSet;
}

bool OAIApplicationInstance::is_default_runtime_context_device_name_Valid() const{
    return m_default_runtime_context_device_name_isValid;
}

QString OAIApplicationInstance::getDescription() const {
    return m_description;
}
void OAIApplicationInstance::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationInstance::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationInstance::is_description_Valid() const{
    return m_description_isValid;
}

OAIApplicationInstanceHealthStatus OAIApplicationInstance::getHealthStatus() const {
    return m_health_status;
}
void OAIApplicationInstance::setHealthStatus(const OAIApplicationInstanceHealthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIApplicationInstance::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIApplicationInstance::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIApplicationInstance::getName() const {
    return m_name;
}
void OAIApplicationInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationInstance::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIApplicationInstance::getRuntimeContextStates() const {
    return m_runtime_context_states;
}
void OAIApplicationInstance::setRuntimeContextStates(const QList &runtime_context_states) {
    m_runtime_context_states = runtime_context_states;
    m_runtime_context_states_isSet = true;
}

bool OAIApplicationInstance::is_runtime_context_states_Set() const{
    return m_runtime_context_states_isSet;
}

bool OAIApplicationInstance::is_runtime_context_states_Valid() const{
    return m_runtime_context_states_isValid;
}

OAIApplicationInstanceStatus OAIApplicationInstance::getStatus() const {
    return m_status;
}
void OAIApplicationInstance::setStatus(const OAIApplicationInstanceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIApplicationInstance::is_status_Set() const{
    return m_status_isSet;
}

bool OAIApplicationInstance::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIApplicationInstance::getStatusDescription() const {
    return m_status_description;
}
void OAIApplicationInstance::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAIApplicationInstance::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAIApplicationInstance::is_status_description_Valid() const{
    return m_status_description_isValid;
}

QMap OAIApplicationInstance::getTags() const {
    return m_tags;
}
void OAIApplicationInstance::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIApplicationInstance::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIApplicationInstance::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIApplicationInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_runtime_context_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_runtime_context_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_context_states.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
