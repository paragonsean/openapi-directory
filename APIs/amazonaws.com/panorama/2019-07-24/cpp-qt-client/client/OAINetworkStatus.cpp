/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkStatus::OAINetworkStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkStatus::OAINetworkStatus() {
    this->initializeModel();
}

OAINetworkStatus::~OAINetworkStatus() {}

void OAINetworkStatus::initializeModel() {

    m_ethernet0_status_isSet = false;
    m_ethernet0_status_isValid = false;

    m_ethernet1_status_isSet = false;
    m_ethernet1_status_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_ntp_status_isSet = false;
    m_ntp_status_isValid = false;
}

void OAINetworkStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkStatus::fromJsonObject(QJsonObject json) {

    m_ethernet0_status_isValid = ::OpenAPI::fromJsonValue(m_ethernet0_status, json[QString("Ethernet0Status")]);
    m_ethernet0_status_isSet = !json[QString("Ethernet0Status")].isNull() && m_ethernet0_status_isValid;

    m_ethernet1_status_isValid = ::OpenAPI::fromJsonValue(m_ethernet1_status, json[QString("Ethernet1Status")]);
    m_ethernet1_status_isSet = !json[QString("Ethernet1Status")].isNull() && m_ethernet1_status_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_ntp_status_isValid = ::OpenAPI::fromJsonValue(m_ntp_status, json[QString("NtpStatus")]);
    m_ntp_status_isSet = !json[QString("NtpStatus")].isNull() && m_ntp_status_isValid;
}

QString OAINetworkStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_ethernet0_status.isSet()) {
        obj.insert(QString("Ethernet0Status"), ::OpenAPI::toJsonValue(m_ethernet0_status));
    }
    if (m_ethernet1_status.isSet()) {
        obj.insert(QString("Ethernet1Status"), ::OpenAPI::toJsonValue(m_ethernet1_status));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_ntp_status.isSet()) {
        obj.insert(QString("NtpStatus"), ::OpenAPI::toJsonValue(m_ntp_status));
    }
    return obj;
}

OAINetworkStatus_Ethernet0Status OAINetworkStatus::getEthernet0Status() const {
    return m_ethernet0_status;
}
void OAINetworkStatus::setEthernet0Status(const OAINetworkStatus_Ethernet0Status &ethernet0_status) {
    m_ethernet0_status = ethernet0_status;
    m_ethernet0_status_isSet = true;
}

bool OAINetworkStatus::is_ethernet0_status_Set() const{
    return m_ethernet0_status_isSet;
}

bool OAINetworkStatus::is_ethernet0_status_Valid() const{
    return m_ethernet0_status_isValid;
}

OAINetworkStatus_Ethernet1Status OAINetworkStatus::getEthernet1Status() const {
    return m_ethernet1_status;
}
void OAINetworkStatus::setEthernet1Status(const OAINetworkStatus_Ethernet1Status &ethernet1_status) {
    m_ethernet1_status = ethernet1_status;
    m_ethernet1_status_isSet = true;
}

bool OAINetworkStatus::is_ethernet1_status_Set() const{
    return m_ethernet1_status_isSet;
}

bool OAINetworkStatus::is_ethernet1_status_Valid() const{
    return m_ethernet1_status_isValid;
}

QDateTime OAINetworkStatus::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAINetworkStatus::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAINetworkStatus::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAINetworkStatus::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

OAINetworkStatus_NtpStatus OAINetworkStatus::getNtpStatus() const {
    return m_ntp_status;
}
void OAINetworkStatus::setNtpStatus(const OAINetworkStatus_NtpStatus &ntp_status) {
    m_ntp_status = ntp_status;
    m_ntp_status_isSet = true;
}

bool OAINetworkStatus::is_ntp_status_Set() const{
    return m_ntp_status_isSet;
}

bool OAINetworkStatus::is_ntp_status_Valid() const{
    return m_ntp_status_isValid;
}

bool OAINetworkStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ethernet0_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethernet1_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ntp_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
