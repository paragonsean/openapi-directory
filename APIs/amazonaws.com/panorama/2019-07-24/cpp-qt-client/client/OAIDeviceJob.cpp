/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceJob::OAIDeviceJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceJob::OAIDeviceJob() {
    this->initializeModel();
}

OAIDeviceJob::~OAIDeviceJob() {}

void OAIDeviceJob::initializeModel() {

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;
}

void OAIDeviceJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceJob::fromJsonObject(QJsonObject json) {

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("DeviceName")]);
    m_device_name_isSet = !json[QString("DeviceName")].isNull() && m_device_name_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;
}

QString OAIDeviceJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceJob::asJsonObject() const {
    QJsonObject obj;
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("DeviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    return obj;
}

QDateTime OAIDeviceJob::getCreatedTime() const {
    return m_created_time;
}
void OAIDeviceJob::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDeviceJob::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDeviceJob::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIDeviceJob::getDeviceId() const {
    return m_device_id;
}
void OAIDeviceJob::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIDeviceJob::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIDeviceJob::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIDeviceJob::getDeviceName() const {
    return m_device_name;
}
void OAIDeviceJob::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIDeviceJob::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIDeviceJob::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIDeviceJob::getJobId() const {
    return m_job_id;
}
void OAIDeviceJob::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIDeviceJob::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIDeviceJob::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIJobType OAIDeviceJob::getJobType() const {
    return m_job_type;
}
void OAIDeviceJob::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIDeviceJob::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIDeviceJob::is_job_type_Valid() const{
    return m_job_type_isValid;
}

bool OAIDeviceJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
