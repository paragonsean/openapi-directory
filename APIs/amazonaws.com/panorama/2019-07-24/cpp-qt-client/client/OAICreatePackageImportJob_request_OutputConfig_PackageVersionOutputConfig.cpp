/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig() {
    this->initializeModel();
}

OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::~OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig() {}

void OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::initializeModel() {

    m_mark_latest_isSet = false;
    m_mark_latest_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_package_version_isSet = false;
    m_package_version_isValid = false;
}

void OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::fromJsonObject(QJsonObject json) {

    m_mark_latest_isValid = ::OpenAPI::fromJsonValue(m_mark_latest, json[QString("MarkLatest")]);
    m_mark_latest_isSet = !json[QString("MarkLatest")].isNull() && m_mark_latest_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("PackageName")]);
    m_package_name_isSet = !json[QString("PackageName")].isNull() && m_package_name_isValid;

    m_package_version_isValid = ::OpenAPI::fromJsonValue(m_package_version, json[QString("PackageVersion")]);
    m_package_version_isSet = !json[QString("PackageVersion")].isNull() && m_package_version_isValid;
}

QString OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_mark_latest_isSet) {
        obj.insert(QString("MarkLatest"), ::OpenAPI::toJsonValue(m_mark_latest));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("PackageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_package_version_isSet) {
        obj.insert(QString("PackageVersion"), ::OpenAPI::toJsonValue(m_package_version));
    }
    return obj;
}

bool OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::getMarkLatest() const {
    return m_mark_latest;
}
void OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::setMarkLatest(const bool &mark_latest) {
    m_mark_latest = mark_latest;
    m_mark_latest_isSet = true;
}

bool OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::is_mark_latest_Set() const{
    return m_mark_latest_isSet;
}

bool OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::is_mark_latest_Valid() const{
    return m_mark_latest_isValid;
}

QString OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::getPackageName() const {
    return m_package_name;
}
void OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::getPackageVersion() const {
    return m_package_version;
}
void OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::setPackageVersion(const QString &package_version) {
    m_package_version = package_version;
    m_package_version_isSet = true;
}

bool OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::is_package_version_Set() const{
    return m_package_version_isSet;
}

bool OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::is_package_version_Valid() const{
    return m_package_version_isValid;
}

bool OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mark_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePackageImportJob_request_OutputConfig_PackageVersionOutputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_package_name_isValid && m_package_version_isValid && true;
}

} // namespace OpenAPI
