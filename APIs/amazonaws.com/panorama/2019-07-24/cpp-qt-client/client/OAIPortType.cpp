/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPortType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPortType::OAIPortType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPortType::OAIPortType() {
    this->initializeModel();
}

OAIPortType::~OAIPortType() {}

void OAIPortType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPortType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPortType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("BOOLEAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPortType::BOOLEAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STRING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPortType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INT32", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPortType::INT32;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FLOAT32", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPortType::FLOAT32;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MEDIA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPortType::MEDIA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPortType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPortType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPortType::BOOLEAN:
            val = "BOOLEAN";
            break;
        case eOAIPortType::STRING:
            val = "STRING";
            break;
        case eOAIPortType::INT32:
            val = "INT32";
            break;
        case eOAIPortType::FLOAT32:
            val = "FLOAT32";
            break;
        case eOAIPortType::MEDIA:
            val = "MEDIA";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPortType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPortType::eOAIPortType OAIPortType::getValue() const {
    return m_value;
}

void OAIPortType::setValue(const OAIPortType::eOAIPortType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPortType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPortType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
