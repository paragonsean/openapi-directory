/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStaticIpConnectionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStaticIpConnectionInfo::OAIStaticIpConnectionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStaticIpConnectionInfo::OAIStaticIpConnectionInfo() {
    this->initializeModel();
}

OAIStaticIpConnectionInfo::~OAIStaticIpConnectionInfo() {}

void OAIStaticIpConnectionInfo::initializeModel() {

    m_default_gateway_isSet = false;
    m_default_gateway_isValid = false;

    m_dns_isSet = false;
    m_dns_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_mask_isSet = false;
    m_mask_isValid = false;
}

void OAIStaticIpConnectionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStaticIpConnectionInfo::fromJsonObject(QJsonObject json) {

    m_default_gateway_isValid = ::OpenAPI::fromJsonValue(m_default_gateway, json[QString("DefaultGateway")]);
    m_default_gateway_isSet = !json[QString("DefaultGateway")].isNull() && m_default_gateway_isValid;

    m_dns_isValid = ::OpenAPI::fromJsonValue(m_dns, json[QString("Dns")]);
    m_dns_isSet = !json[QString("Dns")].isNull() && m_dns_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("Mask")]);
    m_mask_isSet = !json[QString("Mask")].isNull() && m_mask_isValid;
}

QString OAIStaticIpConnectionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStaticIpConnectionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_default_gateway_isSet) {
        obj.insert(QString("DefaultGateway"), ::OpenAPI::toJsonValue(m_default_gateway));
    }
    if (m_dns.isSet()) {
        obj.insert(QString("Dns"), ::OpenAPI::toJsonValue(m_dns));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_mask_isSet) {
        obj.insert(QString("Mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    return obj;
}

QString OAIStaticIpConnectionInfo::getDefaultGateway() const {
    return m_default_gateway;
}
void OAIStaticIpConnectionInfo::setDefaultGateway(const QString &default_gateway) {
    m_default_gateway = default_gateway;
    m_default_gateway_isSet = true;
}

bool OAIStaticIpConnectionInfo::is_default_gateway_Set() const{
    return m_default_gateway_isSet;
}

bool OAIStaticIpConnectionInfo::is_default_gateway_Valid() const{
    return m_default_gateway_isValid;
}

QList OAIStaticIpConnectionInfo::getDns() const {
    return m_dns;
}
void OAIStaticIpConnectionInfo::setDns(const QList &dns) {
    m_dns = dns;
    m_dns_isSet = true;
}

bool OAIStaticIpConnectionInfo::is_dns_Set() const{
    return m_dns_isSet;
}

bool OAIStaticIpConnectionInfo::is_dns_Valid() const{
    return m_dns_isValid;
}

QString OAIStaticIpConnectionInfo::getIpAddress() const {
    return m_ip_address;
}
void OAIStaticIpConnectionInfo::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIStaticIpConnectionInfo::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIStaticIpConnectionInfo::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIStaticIpConnectionInfo::getMask() const {
    return m_mask;
}
void OAIStaticIpConnectionInfo::setMask(const QString &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAIStaticIpConnectionInfo::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAIStaticIpConnectionInfo::is_mask_Valid() const{
    return m_mask_isValid;
}

bool OAIStaticIpConnectionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStaticIpConnectionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_gateway_isValid && m_dns_isValid && m_ip_address_isValid && m_mask_isValid && true;
}

} // namespace OpenAPI
