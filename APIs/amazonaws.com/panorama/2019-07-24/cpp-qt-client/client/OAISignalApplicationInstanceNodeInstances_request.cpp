/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignalApplicationInstanceNodeInstances_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignalApplicationInstanceNodeInstances_request::OAISignalApplicationInstanceNodeInstances_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignalApplicationInstanceNodeInstances_request::OAISignalApplicationInstanceNodeInstances_request() {
    this->initializeModel();
}

OAISignalApplicationInstanceNodeInstances_request::~OAISignalApplicationInstanceNodeInstances_request() {}

void OAISignalApplicationInstanceNodeInstances_request::initializeModel() {

    m_node_signals_isSet = false;
    m_node_signals_isValid = false;
}

void OAISignalApplicationInstanceNodeInstances_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignalApplicationInstanceNodeInstances_request::fromJsonObject(QJsonObject json) {

    m_node_signals_isValid = ::OpenAPI::fromJsonValue(m_node_signals, json[QString("NodeSignals")]);
    m_node_signals_isSet = !json[QString("NodeSignals")].isNull() && m_node_signals_isValid;
}

QString OAISignalApplicationInstanceNodeInstances_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignalApplicationInstanceNodeInstances_request::asJsonObject() const {
    QJsonObject obj;
    if (m_node_signals.size() > 0) {
        obj.insert(QString("NodeSignals"), ::OpenAPI::toJsonValue(m_node_signals));
    }
    return obj;
}

QList<OAINodeSignal> OAISignalApplicationInstanceNodeInstances_request::getNodeSignals() const {
    return m_node_signals;
}
void OAISignalApplicationInstanceNodeInstances_request::setNodeSignals(const QList<OAINodeSignal> &node_signals) {
    m_node_signals = node_signals;
    m_node_signals_isSet = true;
}

bool OAISignalApplicationInstanceNodeInstances_request::is_node_signals_Set() const{
    return m_node_signals_isSet;
}

bool OAISignalApplicationInstanceNodeInstances_request::is_node_signals_Valid() const{
    return m_node_signals_isValid;
}

bool OAISignalApplicationInstanceNodeInstances_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_signals.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignalApplicationInstanceNodeInstances_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_signals_isValid && true;
}

} // namespace OpenAPI
