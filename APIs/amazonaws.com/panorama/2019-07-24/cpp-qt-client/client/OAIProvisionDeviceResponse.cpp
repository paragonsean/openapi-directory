/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisionDeviceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisionDeviceResponse::OAIProvisionDeviceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisionDeviceResponse::OAIProvisionDeviceResponse() {
    this->initializeModel();
}

OAIProvisionDeviceResponse::~OAIProvisionDeviceResponse() {}

void OAIProvisionDeviceResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_certificates_isSet = false;
    m_certificates_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_iot_thing_name_isSet = false;
    m_iot_thing_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIProvisionDeviceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisionDeviceResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_certificates_isValid = ::OpenAPI::fromJsonValue(m_certificates, json[QString("Certificates")]);
    m_certificates_isSet = !json[QString("Certificates")].isNull() && m_certificates_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceId")]);
    m_device_id_isSet = !json[QString("DeviceId")].isNull() && m_device_id_isValid;

    m_iot_thing_name_isValid = ::OpenAPI::fromJsonValue(m_iot_thing_name, json[QString("IotThingName")]);
    m_iot_thing_name_isSet = !json[QString("IotThingName")].isNull() && m_iot_thing_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIProvisionDeviceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisionDeviceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_certificates_isSet) {
        obj.insert(QString("Certificates"), ::OpenAPI::toJsonValue(m_certificates));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_iot_thing_name_isSet) {
        obj.insert(QString("IotThingName"), ::OpenAPI::toJsonValue(m_iot_thing_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIProvisionDeviceResponse::getArn() const {
    return m_arn;
}
void OAIProvisionDeviceResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIProvisionDeviceResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIProvisionDeviceResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIProvisionDeviceResponse::getCertificates() const {
    return m_certificates;
}
void OAIProvisionDeviceResponse::setCertificates(const QString &certificates) {
    m_certificates = certificates;
    m_certificates_isSet = true;
}

bool OAIProvisionDeviceResponse::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool OAIProvisionDeviceResponse::is_certificates_Valid() const{
    return m_certificates_isValid;
}

QString OAIProvisionDeviceResponse::getDeviceId() const {
    return m_device_id;
}
void OAIProvisionDeviceResponse::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIProvisionDeviceResponse::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIProvisionDeviceResponse::is_device_id_Valid() const{
    return m_device_id_isValid;
}

QString OAIProvisionDeviceResponse::getIotThingName() const {
    return m_iot_thing_name;
}
void OAIProvisionDeviceResponse::setIotThingName(const QString &iot_thing_name) {
    m_iot_thing_name = iot_thing_name;
    m_iot_thing_name_isSet = true;
}

bool OAIProvisionDeviceResponse::is_iot_thing_name_Set() const{
    return m_iot_thing_name_isSet;
}

bool OAIProvisionDeviceResponse::is_iot_thing_name_Valid() const{
    return m_iot_thing_name_isValid;
}

OAIDeviceStatus OAIProvisionDeviceResponse::getStatus() const {
    return m_status;
}
void OAIProvisionDeviceResponse::setStatus(const OAIDeviceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProvisionDeviceResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProvisionDeviceResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIProvisionDeviceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_thing_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisionDeviceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
