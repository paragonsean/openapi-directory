/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePackageVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePackageVersionResponse::OAIDescribePackageVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePackageVersionResponse::OAIDescribePackageVersionResponse() {
    this->initializeModel();
}

OAIDescribePackageVersionResponse::~OAIDescribePackageVersionResponse() {}

void OAIDescribePackageVersionResponse::initializeModel() {

    m_is_latest_patch_isSet = false;
    m_is_latest_patch_isValid = false;

    m_owner_account_isSet = false;
    m_owner_account_isValid = false;

    m_package_arn_isSet = false;
    m_package_arn_isValid = false;

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_package_version_isSet = false;
    m_package_version_isValid = false;

    m_patch_version_isSet = false;
    m_patch_version_isValid = false;

    m_registered_time_isSet = false;
    m_registered_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;
}

void OAIDescribePackageVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePackageVersionResponse::fromJsonObject(QJsonObject json) {

    m_is_latest_patch_isValid = ::OpenAPI::fromJsonValue(m_is_latest_patch, json[QString("IsLatestPatch")]);
    m_is_latest_patch_isSet = !json[QString("IsLatestPatch")].isNull() && m_is_latest_patch_isValid;

    m_owner_account_isValid = ::OpenAPI::fromJsonValue(m_owner_account, json[QString("OwnerAccount")]);
    m_owner_account_isSet = !json[QString("OwnerAccount")].isNull() && m_owner_account_isValid;

    m_package_arn_isValid = ::OpenAPI::fromJsonValue(m_package_arn, json[QString("PackageArn")]);
    m_package_arn_isSet = !json[QString("PackageArn")].isNull() && m_package_arn_isValid;

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageId")]);
    m_package_id_isSet = !json[QString("PackageId")].isNull() && m_package_id_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("PackageName")]);
    m_package_name_isSet = !json[QString("PackageName")].isNull() && m_package_name_isValid;

    m_package_version_isValid = ::OpenAPI::fromJsonValue(m_package_version, json[QString("PackageVersion")]);
    m_package_version_isSet = !json[QString("PackageVersion")].isNull() && m_package_version_isValid;

    m_patch_version_isValid = ::OpenAPI::fromJsonValue(m_patch_version, json[QString("PatchVersion")]);
    m_patch_version_isSet = !json[QString("PatchVersion")].isNull() && m_patch_version_isValid;

    m_registered_time_isValid = ::OpenAPI::fromJsonValue(m_registered_time, json[QString("RegisteredTime")]);
    m_registered_time_isSet = !json[QString("RegisteredTime")].isNull() && m_registered_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("StatusDescription")]);
    m_status_description_isSet = !json[QString("StatusDescription")].isNull() && m_status_description_isValid;
}

QString OAIDescribePackageVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePackageVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_is_latest_patch_isSet) {
        obj.insert(QString("IsLatestPatch"), ::OpenAPI::toJsonValue(m_is_latest_patch));
    }
    if (m_owner_account_isSet) {
        obj.insert(QString("OwnerAccount"), ::OpenAPI::toJsonValue(m_owner_account));
    }
    if (m_package_arn_isSet) {
        obj.insert(QString("PackageArn"), ::OpenAPI::toJsonValue(m_package_arn));
    }
    if (m_package_id_isSet) {
        obj.insert(QString("PackageId"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("PackageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_package_version_isSet) {
        obj.insert(QString("PackageVersion"), ::OpenAPI::toJsonValue(m_package_version));
    }
    if (m_patch_version_isSet) {
        obj.insert(QString("PatchVersion"), ::OpenAPI::toJsonValue(m_patch_version));
    }
    if (m_registered_time_isSet) {
        obj.insert(QString("RegisteredTime"), ::OpenAPI::toJsonValue(m_registered_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("StatusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    return obj;
}

bool OAIDescribePackageVersionResponse::getIsLatestPatch() const {
    return m_is_latest_patch;
}
void OAIDescribePackageVersionResponse::setIsLatestPatch(const bool &is_latest_patch) {
    m_is_latest_patch = is_latest_patch;
    m_is_latest_patch_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_is_latest_patch_Set() const{
    return m_is_latest_patch_isSet;
}

bool OAIDescribePackageVersionResponse::is_is_latest_patch_Valid() const{
    return m_is_latest_patch_isValid;
}

QString OAIDescribePackageVersionResponse::getOwnerAccount() const {
    return m_owner_account;
}
void OAIDescribePackageVersionResponse::setOwnerAccount(const QString &owner_account) {
    m_owner_account = owner_account;
    m_owner_account_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_owner_account_Set() const{
    return m_owner_account_isSet;
}

bool OAIDescribePackageVersionResponse::is_owner_account_Valid() const{
    return m_owner_account_isValid;
}

QString OAIDescribePackageVersionResponse::getPackageArn() const {
    return m_package_arn;
}
void OAIDescribePackageVersionResponse::setPackageArn(const QString &package_arn) {
    m_package_arn = package_arn;
    m_package_arn_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_package_arn_Set() const{
    return m_package_arn_isSet;
}

bool OAIDescribePackageVersionResponse::is_package_arn_Valid() const{
    return m_package_arn_isValid;
}

QString OAIDescribePackageVersionResponse::getPackageId() const {
    return m_package_id;
}
void OAIDescribePackageVersionResponse::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIDescribePackageVersionResponse::is_package_id_Valid() const{
    return m_package_id_isValid;
}

QString OAIDescribePackageVersionResponse::getPackageName() const {
    return m_package_name;
}
void OAIDescribePackageVersionResponse::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIDescribePackageVersionResponse::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIDescribePackageVersionResponse::getPackageVersion() const {
    return m_package_version;
}
void OAIDescribePackageVersionResponse::setPackageVersion(const QString &package_version) {
    m_package_version = package_version;
    m_package_version_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_package_version_Set() const{
    return m_package_version_isSet;
}

bool OAIDescribePackageVersionResponse::is_package_version_Valid() const{
    return m_package_version_isValid;
}

QString OAIDescribePackageVersionResponse::getPatchVersion() const {
    return m_patch_version;
}
void OAIDescribePackageVersionResponse::setPatchVersion(const QString &patch_version) {
    m_patch_version = patch_version;
    m_patch_version_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_patch_version_Set() const{
    return m_patch_version_isSet;
}

bool OAIDescribePackageVersionResponse::is_patch_version_Valid() const{
    return m_patch_version_isValid;
}

QDateTime OAIDescribePackageVersionResponse::getRegisteredTime() const {
    return m_registered_time;
}
void OAIDescribePackageVersionResponse::setRegisteredTime(const QDateTime &registered_time) {
    m_registered_time = registered_time;
    m_registered_time_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_registered_time_Set() const{
    return m_registered_time_isSet;
}

bool OAIDescribePackageVersionResponse::is_registered_time_Valid() const{
    return m_registered_time_isValid;
}

OAIPackageVersionStatus OAIDescribePackageVersionResponse::getStatus() const {
    return m_status;
}
void OAIDescribePackageVersionResponse::setStatus(const OAIPackageVersionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribePackageVersionResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribePackageVersionResponse::getStatusDescription() const {
    return m_status_description;
}
void OAIDescribePackageVersionResponse::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAIDescribePackageVersionResponse::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAIDescribePackageVersionResponse::is_status_description_Valid() const{
    return m_status_description_isValid;
}

bool OAIDescribePackageVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_latest_patch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePackageVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_latest_patch_isValid && m_package_id_isValid && m_package_name_isValid && m_package_version_isValid && m_patch_version_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
