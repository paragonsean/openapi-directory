/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINtpStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINtpStatus::OAINtpStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINtpStatus::OAINtpStatus() {
    this->initializeModel();
}

OAINtpStatus::~OAINtpStatus() {}

void OAINtpStatus::initializeModel() {

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_ntp_server_name_isSet = false;
    m_ntp_server_name_isValid = false;
}

void OAINtpStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINtpStatus::fromJsonObject(QJsonObject json) {

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("ConnectionStatus")]);
    m_connection_status_isSet = !json[QString("ConnectionStatus")].isNull() && m_connection_status_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("IpAddress")]);
    m_ip_address_isSet = !json[QString("IpAddress")].isNull() && m_ip_address_isValid;

    m_ntp_server_name_isValid = ::OpenAPI::fromJsonValue(m_ntp_server_name, json[QString("NtpServerName")]);
    m_ntp_server_name_isSet = !json[QString("NtpServerName")].isNull() && m_ntp_server_name_isValid;
}

QString OAINtpStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINtpStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_status.isSet()) {
        obj.insert(QString("ConnectionStatus"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("IpAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_ntp_server_name_isSet) {
        obj.insert(QString("NtpServerName"), ::OpenAPI::toJsonValue(m_ntp_server_name));
    }
    return obj;
}

OAINetworkConnectionStatus OAINtpStatus::getConnectionStatus() const {
    return m_connection_status;
}
void OAINtpStatus::setConnectionStatus(const OAINetworkConnectionStatus &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAINtpStatus::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAINtpStatus::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

QString OAINtpStatus::getIpAddress() const {
    return m_ip_address;
}
void OAINtpStatus::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAINtpStatus::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAINtpStatus::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAINtpStatus::getNtpServerName() const {
    return m_ntp_server_name;
}
void OAINtpStatus::setNtpServerName(const QString &ntp_server_name) {
    m_ntp_server_name = ntp_server_name;
    m_ntp_server_name_isSet = true;
}

bool OAINtpStatus::is_ntp_server_name_Set() const{
    return m_ntp_server_name_isSet;
}

bool OAINtpStatus::is_ntp_server_name_Valid() const{
    return m_ntp_server_name_isValid;
}

bool OAINtpStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ntp_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINtpStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
