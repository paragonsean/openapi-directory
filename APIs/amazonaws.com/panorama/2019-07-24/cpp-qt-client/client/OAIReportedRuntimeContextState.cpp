/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportedRuntimeContextState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportedRuntimeContextState::OAIReportedRuntimeContextState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportedRuntimeContextState::OAIReportedRuntimeContextState() {
    this->initializeModel();
}

OAIReportedRuntimeContextState::~OAIReportedRuntimeContextState() {}

void OAIReportedRuntimeContextState::initializeModel() {

    m_desired_state_isSet = false;
    m_desired_state_isValid = false;

    m_device_reported_status_isSet = false;
    m_device_reported_status_isValid = false;

    m_device_reported_time_isSet = false;
    m_device_reported_time_isValid = false;

    m_runtime_context_name_isSet = false;
    m_runtime_context_name_isValid = false;
}

void OAIReportedRuntimeContextState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportedRuntimeContextState::fromJsonObject(QJsonObject json) {

    m_desired_state_isValid = ::OpenAPI::fromJsonValue(m_desired_state, json[QString("DesiredState")]);
    m_desired_state_isSet = !json[QString("DesiredState")].isNull() && m_desired_state_isValid;

    m_device_reported_status_isValid = ::OpenAPI::fromJsonValue(m_device_reported_status, json[QString("DeviceReportedStatus")]);
    m_device_reported_status_isSet = !json[QString("DeviceReportedStatus")].isNull() && m_device_reported_status_isValid;

    m_device_reported_time_isValid = ::OpenAPI::fromJsonValue(m_device_reported_time, json[QString("DeviceReportedTime")]);
    m_device_reported_time_isSet = !json[QString("DeviceReportedTime")].isNull() && m_device_reported_time_isValid;

    m_runtime_context_name_isValid = ::OpenAPI::fromJsonValue(m_runtime_context_name, json[QString("RuntimeContextName")]);
    m_runtime_context_name_isSet = !json[QString("RuntimeContextName")].isNull() && m_runtime_context_name_isValid;
}

QString OAIReportedRuntimeContextState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportedRuntimeContextState::asJsonObject() const {
    QJsonObject obj;
    if (m_desired_state.isSet()) {
        obj.insert(QString("DesiredState"), ::OpenAPI::toJsonValue(m_desired_state));
    }
    if (m_device_reported_status.isSet()) {
        obj.insert(QString("DeviceReportedStatus"), ::OpenAPI::toJsonValue(m_device_reported_status));
    }
    if (m_device_reported_time_isSet) {
        obj.insert(QString("DeviceReportedTime"), ::OpenAPI::toJsonValue(m_device_reported_time));
    }
    if (m_runtime_context_name_isSet) {
        obj.insert(QString("RuntimeContextName"), ::OpenAPI::toJsonValue(m_runtime_context_name));
    }
    return obj;
}

OAIDesiredState OAIReportedRuntimeContextState::getDesiredState() const {
    return m_desired_state;
}
void OAIReportedRuntimeContextState::setDesiredState(const OAIDesiredState &desired_state) {
    m_desired_state = desired_state;
    m_desired_state_isSet = true;
}

bool OAIReportedRuntimeContextState::is_desired_state_Set() const{
    return m_desired_state_isSet;
}

bool OAIReportedRuntimeContextState::is_desired_state_Valid() const{
    return m_desired_state_isValid;
}

OAIDeviceReportedStatus OAIReportedRuntimeContextState::getDeviceReportedStatus() const {
    return m_device_reported_status;
}
void OAIReportedRuntimeContextState::setDeviceReportedStatus(const OAIDeviceReportedStatus &device_reported_status) {
    m_device_reported_status = device_reported_status;
    m_device_reported_status_isSet = true;
}

bool OAIReportedRuntimeContextState::is_device_reported_status_Set() const{
    return m_device_reported_status_isSet;
}

bool OAIReportedRuntimeContextState::is_device_reported_status_Valid() const{
    return m_device_reported_status_isValid;
}

QDateTime OAIReportedRuntimeContextState::getDeviceReportedTime() const {
    return m_device_reported_time;
}
void OAIReportedRuntimeContextState::setDeviceReportedTime(const QDateTime &device_reported_time) {
    m_device_reported_time = device_reported_time;
    m_device_reported_time_isSet = true;
}

bool OAIReportedRuntimeContextState::is_device_reported_time_Set() const{
    return m_device_reported_time_isSet;
}

bool OAIReportedRuntimeContextState::is_device_reported_time_Valid() const{
    return m_device_reported_time_isValid;
}

QString OAIReportedRuntimeContextState::getRuntimeContextName() const {
    return m_runtime_context_name;
}
void OAIReportedRuntimeContextState::setRuntimeContextName(const QString &runtime_context_name) {
    m_runtime_context_name = runtime_context_name;
    m_runtime_context_name_isSet = true;
}

bool OAIReportedRuntimeContextState::is_runtime_context_name_Set() const{
    return m_runtime_context_name_isSet;
}

bool OAIReportedRuntimeContextState::is_runtime_context_name_Valid() const{
    return m_runtime_context_name_isValid;
}

bool OAIReportedRuntimeContextState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_desired_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_reported_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_reported_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_context_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportedRuntimeContextState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_desired_state_isValid && m_device_reported_status_isValid && m_device_reported_time_isValid && m_runtime_context_name_isValid && true;
}

} // namespace OpenAPI
