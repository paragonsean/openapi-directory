/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisionDeviceRequest_NetworkingConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisionDeviceRequest_NetworkingConfiguration::OAIProvisionDeviceRequest_NetworkingConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisionDeviceRequest_NetworkingConfiguration::OAIProvisionDeviceRequest_NetworkingConfiguration() {
    this->initializeModel();
}

OAIProvisionDeviceRequest_NetworkingConfiguration::~OAIProvisionDeviceRequest_NetworkingConfiguration() {}

void OAIProvisionDeviceRequest_NetworkingConfiguration::initializeModel() {

    m_ethernet0_isSet = false;
    m_ethernet0_isValid = false;

    m_ethernet1_isSet = false;
    m_ethernet1_isValid = false;

    m_ntp_isSet = false;
    m_ntp_isValid = false;
}

void OAIProvisionDeviceRequest_NetworkingConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisionDeviceRequest_NetworkingConfiguration::fromJsonObject(QJsonObject json) {

    m_ethernet0_isValid = ::OpenAPI::fromJsonValue(m_ethernet0, json[QString("Ethernet0")]);
    m_ethernet0_isSet = !json[QString("Ethernet0")].isNull() && m_ethernet0_isValid;

    m_ethernet1_isValid = ::OpenAPI::fromJsonValue(m_ethernet1, json[QString("Ethernet1")]);
    m_ethernet1_isSet = !json[QString("Ethernet1")].isNull() && m_ethernet1_isValid;

    m_ntp_isValid = ::OpenAPI::fromJsonValue(m_ntp, json[QString("Ntp")]);
    m_ntp_isSet = !json[QString("Ntp")].isNull() && m_ntp_isValid;
}

QString OAIProvisionDeviceRequest_NetworkingConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisionDeviceRequest_NetworkingConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_ethernet0.isSet()) {
        obj.insert(QString("Ethernet0"), ::OpenAPI::toJsonValue(m_ethernet0));
    }
    if (m_ethernet1.isSet()) {
        obj.insert(QString("Ethernet1"), ::OpenAPI::toJsonValue(m_ethernet1));
    }
    if (m_ntp.isSet()) {
        obj.insert(QString("Ntp"), ::OpenAPI::toJsonValue(m_ntp));
    }
    return obj;
}

OAIProvisionDevice_request_NetworkingConfiguration_Ethernet0 OAIProvisionDeviceRequest_NetworkingConfiguration::getEthernet0() const {
    return m_ethernet0;
}
void OAIProvisionDeviceRequest_NetworkingConfiguration::setEthernet0(const OAIProvisionDevice_request_NetworkingConfiguration_Ethernet0 &ethernet0) {
    m_ethernet0 = ethernet0;
    m_ethernet0_isSet = true;
}

bool OAIProvisionDeviceRequest_NetworkingConfiguration::is_ethernet0_Set() const{
    return m_ethernet0_isSet;
}

bool OAIProvisionDeviceRequest_NetworkingConfiguration::is_ethernet0_Valid() const{
    return m_ethernet0_isValid;
}

OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1 OAIProvisionDeviceRequest_NetworkingConfiguration::getEthernet1() const {
    return m_ethernet1;
}
void OAIProvisionDeviceRequest_NetworkingConfiguration::setEthernet1(const OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1 &ethernet1) {
    m_ethernet1 = ethernet1;
    m_ethernet1_isSet = true;
}

bool OAIProvisionDeviceRequest_NetworkingConfiguration::is_ethernet1_Set() const{
    return m_ethernet1_isSet;
}

bool OAIProvisionDeviceRequest_NetworkingConfiguration::is_ethernet1_Valid() const{
    return m_ethernet1_isValid;
}

OAIProvisionDevice_request_NetworkingConfiguration_Ntp OAIProvisionDeviceRequest_NetworkingConfiguration::getNtp() const {
    return m_ntp;
}
void OAIProvisionDeviceRequest_NetworkingConfiguration::setNtp(const OAIProvisionDevice_request_NetworkingConfiguration_Ntp &ntp) {
    m_ntp = ntp;
    m_ntp_isSet = true;
}

bool OAIProvisionDeviceRequest_NetworkingConfiguration::is_ntp_Set() const{
    return m_ntp_isSet;
}

bool OAIProvisionDeviceRequest_NetworkingConfiguration::is_ntp_Valid() const{
    return m_ntp_isValid;
}

bool OAIProvisionDeviceRequest_NetworkingConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ethernet0.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethernet1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ntp.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisionDeviceRequest_NetworkingConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
