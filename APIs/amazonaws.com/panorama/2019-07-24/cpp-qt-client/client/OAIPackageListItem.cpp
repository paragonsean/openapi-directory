/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageListItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageListItem::OAIPackageListItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageListItem::OAIPackageListItem() {
    this->initializeModel();
}

OAIPackageListItem::~OAIPackageListItem() {}

void OAIPackageListItem::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPackageListItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageListItem::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageId")]);
    m_package_id_isSet = !json[QString("PackageId")].isNull() && m_package_id_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("PackageName")]);
    m_package_name_isSet = !json[QString("PackageName")].isNull() && m_package_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIPackageListItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageListItem::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_package_id_isSet) {
        obj.insert(QString("PackageId"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("PackageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPackageListItem::getArn() const {
    return m_arn;
}
void OAIPackageListItem::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIPackageListItem::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIPackageListItem::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIPackageListItem::getCreatedTime() const {
    return m_created_time;
}
void OAIPackageListItem::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIPackageListItem::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIPackageListItem::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIPackageListItem::getPackageId() const {
    return m_package_id;
}
void OAIPackageListItem::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIPackageListItem::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIPackageListItem::is_package_id_Valid() const{
    return m_package_id_isValid;
}

QString OAIPackageListItem::getPackageName() const {
    return m_package_name;
}
void OAIPackageListItem::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIPackageListItem::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIPackageListItem::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QMap OAIPackageListItem::getTags() const {
    return m_tags;
}
void OAIPackageListItem::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPackageListItem::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPackageListItem::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPackageListItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageListItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
