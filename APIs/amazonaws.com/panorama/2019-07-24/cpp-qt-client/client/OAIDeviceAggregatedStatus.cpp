/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceAggregatedStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceAggregatedStatus::OAIDeviceAggregatedStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceAggregatedStatus::OAIDeviceAggregatedStatus() {
    this->initializeModel();
}

OAIDeviceAggregatedStatus::~OAIDeviceAggregatedStatus() {}

void OAIDeviceAggregatedStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDeviceAggregatedStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDeviceAggregatedStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AWAITING_PROVISIONING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::AWAITING_PROVISIONING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ONLINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::ONLINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OFFLINE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::OFFLINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LEASE_EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::LEASE_EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_NEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::UPDATE_NEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REBOOTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeviceAggregatedStatus::REBOOTING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDeviceAggregatedStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDeviceAggregatedStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDeviceAggregatedStatus::ERROR:
            val = "ERROR";
            break;
        case eOAIDeviceAggregatedStatus::AWAITING_PROVISIONING:
            val = "AWAITING_PROVISIONING";
            break;
        case eOAIDeviceAggregatedStatus::PENDING:
            val = "PENDING";
            break;
        case eOAIDeviceAggregatedStatus::FAILED:
            val = "FAILED";
            break;
        case eOAIDeviceAggregatedStatus::DELETING:
            val = "DELETING";
            break;
        case eOAIDeviceAggregatedStatus::ONLINE:
            val = "ONLINE";
            break;
        case eOAIDeviceAggregatedStatus::OFFLINE:
            val = "OFFLINE";
            break;
        case eOAIDeviceAggregatedStatus::LEASE_EXPIRED:
            val = "LEASE_EXPIRED";
            break;
        case eOAIDeviceAggregatedStatus::UPDATE_NEEDED:
            val = "UPDATE_NEEDED";
            break;
        case eOAIDeviceAggregatedStatus::REBOOTING:
            val = "REBOOTING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDeviceAggregatedStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDeviceAggregatedStatus::eOAIDeviceAggregatedStatus OAIDeviceAggregatedStatus::getValue() const {
    return m_value;
}

void OAIDeviceAggregatedStatus::setValue(const OAIDeviceAggregatedStatus::eOAIDeviceAggregatedStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDeviceAggregatedStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIDeviceAggregatedStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
