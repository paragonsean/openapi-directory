/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisionDevice_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisionDevice_request::OAIProvisionDevice_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisionDevice_request::OAIProvisionDevice_request() {
    this->initializeModel();
}

OAIProvisionDevice_request::~OAIProvisionDevice_request() {}

void OAIProvisionDevice_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_networking_configuration_isSet = false;
    m_networking_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIProvisionDevice_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisionDevice_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_networking_configuration_isValid = ::OpenAPI::fromJsonValue(m_networking_configuration, json[QString("NetworkingConfiguration")]);
    m_networking_configuration_isSet = !json[QString("NetworkingConfiguration")].isNull() && m_networking_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIProvisionDevice_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisionDevice_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_networking_configuration.isSet()) {
        obj.insert(QString("NetworkingConfiguration"), ::OpenAPI::toJsonValue(m_networking_configuration));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIProvisionDevice_request::getDescription() const {
    return m_description;
}
void OAIProvisionDevice_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProvisionDevice_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProvisionDevice_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProvisionDevice_request::getName() const {
    return m_name;
}
void OAIProvisionDevice_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvisionDevice_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvisionDevice_request::is_name_Valid() const{
    return m_name_isValid;
}

OAIProvisionDevice_request_NetworkingConfiguration OAIProvisionDevice_request::getNetworkingConfiguration() const {
    return m_networking_configuration;
}
void OAIProvisionDevice_request::setNetworkingConfiguration(const OAIProvisionDevice_request_NetworkingConfiguration &networking_configuration) {
    m_networking_configuration = networking_configuration;
    m_networking_configuration_isSet = true;
}

bool OAIProvisionDevice_request::is_networking_configuration_Set() const{
    return m_networking_configuration_isSet;
}

bool OAIProvisionDevice_request::is_networking_configuration_Valid() const{
    return m_networking_configuration_isValid;
}

QMap<QString, QString> OAIProvisionDevice_request::getTags() const {
    return m_tags;
}
void OAIProvisionDevice_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProvisionDevice_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProvisionDevice_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIProvisionDevice_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networking_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisionDevice_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
