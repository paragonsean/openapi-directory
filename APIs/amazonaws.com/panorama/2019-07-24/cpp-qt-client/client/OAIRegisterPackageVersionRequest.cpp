/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterPackageVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterPackageVersionRequest::OAIRegisterPackageVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterPackageVersionRequest::OAIRegisterPackageVersionRequest() {
    this->initializeModel();
}

OAIRegisterPackageVersionRequest::~OAIRegisterPackageVersionRequest() {}

void OAIRegisterPackageVersionRequest::initializeModel() {

    m_mark_latest_isSet = false;
    m_mark_latest_isValid = false;

    m_owner_account_isSet = false;
    m_owner_account_isValid = false;
}

void OAIRegisterPackageVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterPackageVersionRequest::fromJsonObject(QJsonObject json) {

    m_mark_latest_isValid = ::OpenAPI::fromJsonValue(m_mark_latest, json[QString("MarkLatest")]);
    m_mark_latest_isSet = !json[QString("MarkLatest")].isNull() && m_mark_latest_isValid;

    m_owner_account_isValid = ::OpenAPI::fromJsonValue(m_owner_account, json[QString("OwnerAccount")]);
    m_owner_account_isSet = !json[QString("OwnerAccount")].isNull() && m_owner_account_isValid;
}

QString OAIRegisterPackageVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterPackageVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_mark_latest_isSet) {
        obj.insert(QString("MarkLatest"), ::OpenAPI::toJsonValue(m_mark_latest));
    }
    if (m_owner_account_isSet) {
        obj.insert(QString("OwnerAccount"), ::OpenAPI::toJsonValue(m_owner_account));
    }
    return obj;
}

bool OAIRegisterPackageVersionRequest::getMarkLatest() const {
    return m_mark_latest;
}
void OAIRegisterPackageVersionRequest::setMarkLatest(const bool &mark_latest) {
    m_mark_latest = mark_latest;
    m_mark_latest_isSet = true;
}

bool OAIRegisterPackageVersionRequest::is_mark_latest_Set() const{
    return m_mark_latest_isSet;
}

bool OAIRegisterPackageVersionRequest::is_mark_latest_Valid() const{
    return m_mark_latest_isValid;
}

QString OAIRegisterPackageVersionRequest::getOwnerAccount() const {
    return m_owner_account;
}
void OAIRegisterPackageVersionRequest::setOwnerAccount(const QString &owner_account) {
    m_owner_account = owner_account;
    m_owner_account_isSet = true;
}

bool OAIRegisterPackageVersionRequest::is_owner_account_Set() const{
    return m_owner_account_isSet;
}

bool OAIRegisterPackageVersionRequest::is_owner_account_Valid() const{
    return m_owner_account_isValid;
}

bool OAIRegisterPackageVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mark_latest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterPackageVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
