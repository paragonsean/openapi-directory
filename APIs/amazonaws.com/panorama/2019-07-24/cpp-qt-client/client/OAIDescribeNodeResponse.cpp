/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeNodeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeNodeResponse::OAIDescribeNodeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeNodeResponse::OAIDescribeNodeResponse() {
    this->initializeModel();
}

OAIDescribeNodeResponse::~OAIDescribeNodeResponse() {}

void OAIDescribeNodeResponse::initializeModel() {

    m_asset_name_isSet = false;
    m_asset_name_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_node_interface_isSet = false;
    m_node_interface_isValid = false;

    m_owner_account_isSet = false;
    m_owner_account_isValid = false;

    m_package_arn_isSet = false;
    m_package_arn_isValid = false;

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_package_version_isSet = false;
    m_package_version_isValid = false;

    m_patch_version_isSet = false;
    m_patch_version_isValid = false;
}

void OAIDescribeNodeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeNodeResponse::fromJsonObject(QJsonObject json) {

    m_asset_name_isValid = ::OpenAPI::fromJsonValue(m_asset_name, json[QString("AssetName")]);
    m_asset_name_isSet = !json[QString("AssetName")].isNull() && m_asset_name_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("CreatedTime")]);
    m_created_time_isSet = !json[QString("CreatedTime")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("LastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("LastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("NodeId")]);
    m_node_id_isSet = !json[QString("NodeId")].isNull() && m_node_id_isValid;

    m_node_interface_isValid = ::OpenAPI::fromJsonValue(m_node_interface, json[QString("NodeInterface")]);
    m_node_interface_isSet = !json[QString("NodeInterface")].isNull() && m_node_interface_isValid;

    m_owner_account_isValid = ::OpenAPI::fromJsonValue(m_owner_account, json[QString("OwnerAccount")]);
    m_owner_account_isSet = !json[QString("OwnerAccount")].isNull() && m_owner_account_isValid;

    m_package_arn_isValid = ::OpenAPI::fromJsonValue(m_package_arn, json[QString("PackageArn")]);
    m_package_arn_isSet = !json[QString("PackageArn")].isNull() && m_package_arn_isValid;

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageId")]);
    m_package_id_isSet = !json[QString("PackageId")].isNull() && m_package_id_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("PackageName")]);
    m_package_name_isSet = !json[QString("PackageName")].isNull() && m_package_name_isValid;

    m_package_version_isValid = ::OpenAPI::fromJsonValue(m_package_version, json[QString("PackageVersion")]);
    m_package_version_isSet = !json[QString("PackageVersion")].isNull() && m_package_version_isValid;

    m_patch_version_isValid = ::OpenAPI::fromJsonValue(m_patch_version, json[QString("PatchVersion")]);
    m_patch_version_isSet = !json[QString("PatchVersion")].isNull() && m_patch_version_isValid;
}

QString OAIDescribeNodeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeNodeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_name_isSet) {
        obj.insert(QString("AssetName"), ::OpenAPI::toJsonValue(m_asset_name));
    }
    if (m_category.isSet()) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("CreatedTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("LastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("NodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_node_interface.isSet()) {
        obj.insert(QString("NodeInterface"), ::OpenAPI::toJsonValue(m_node_interface));
    }
    if (m_owner_account_isSet) {
        obj.insert(QString("OwnerAccount"), ::OpenAPI::toJsonValue(m_owner_account));
    }
    if (m_package_arn_isSet) {
        obj.insert(QString("PackageArn"), ::OpenAPI::toJsonValue(m_package_arn));
    }
    if (m_package_id_isSet) {
        obj.insert(QString("PackageId"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("PackageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_package_version_isSet) {
        obj.insert(QString("PackageVersion"), ::OpenAPI::toJsonValue(m_package_version));
    }
    if (m_patch_version_isSet) {
        obj.insert(QString("PatchVersion"), ::OpenAPI::toJsonValue(m_patch_version));
    }
    return obj;
}

QString OAIDescribeNodeResponse::getAssetName() const {
    return m_asset_name;
}
void OAIDescribeNodeResponse::setAssetName(const QString &asset_name) {
    m_asset_name = asset_name;
    m_asset_name_isSet = true;
}

bool OAIDescribeNodeResponse::is_asset_name_Set() const{
    return m_asset_name_isSet;
}

bool OAIDescribeNodeResponse::is_asset_name_Valid() const{
    return m_asset_name_isValid;
}

OAINodeCategory OAIDescribeNodeResponse::getCategory() const {
    return m_category;
}
void OAIDescribeNodeResponse::setCategory(const OAINodeCategory &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIDescribeNodeResponse::is_category_Set() const{
    return m_category_isSet;
}

bool OAIDescribeNodeResponse::is_category_Valid() const{
    return m_category_isValid;
}

QDateTime OAIDescribeNodeResponse::getCreatedTime() const {
    return m_created_time;
}
void OAIDescribeNodeResponse::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIDescribeNodeResponse::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIDescribeNodeResponse::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIDescribeNodeResponse::getDescription() const {
    return m_description;
}
void OAIDescribeNodeResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeNodeResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeNodeResponse::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIDescribeNodeResponse::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIDescribeNodeResponse::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIDescribeNodeResponse::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIDescribeNodeResponse::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIDescribeNodeResponse::getName() const {
    return m_name;
}
void OAIDescribeNodeResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeNodeResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeNodeResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDescribeNodeResponse::getNodeId() const {
    return m_node_id;
}
void OAIDescribeNodeResponse::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIDescribeNodeResponse::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIDescribeNodeResponse::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAIDescribeNodeResponse_NodeInterface OAIDescribeNodeResponse::getNodeInterface() const {
    return m_node_interface;
}
void OAIDescribeNodeResponse::setNodeInterface(const OAIDescribeNodeResponse_NodeInterface &node_interface) {
    m_node_interface = node_interface;
    m_node_interface_isSet = true;
}

bool OAIDescribeNodeResponse::is_node_interface_Set() const{
    return m_node_interface_isSet;
}

bool OAIDescribeNodeResponse::is_node_interface_Valid() const{
    return m_node_interface_isValid;
}

QString OAIDescribeNodeResponse::getOwnerAccount() const {
    return m_owner_account;
}
void OAIDescribeNodeResponse::setOwnerAccount(const QString &owner_account) {
    m_owner_account = owner_account;
    m_owner_account_isSet = true;
}

bool OAIDescribeNodeResponse::is_owner_account_Set() const{
    return m_owner_account_isSet;
}

bool OAIDescribeNodeResponse::is_owner_account_Valid() const{
    return m_owner_account_isValid;
}

QString OAIDescribeNodeResponse::getPackageArn() const {
    return m_package_arn;
}
void OAIDescribeNodeResponse::setPackageArn(const QString &package_arn) {
    m_package_arn = package_arn;
    m_package_arn_isSet = true;
}

bool OAIDescribeNodeResponse::is_package_arn_Set() const{
    return m_package_arn_isSet;
}

bool OAIDescribeNodeResponse::is_package_arn_Valid() const{
    return m_package_arn_isValid;
}

QString OAIDescribeNodeResponse::getPackageId() const {
    return m_package_id;
}
void OAIDescribeNodeResponse::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIDescribeNodeResponse::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIDescribeNodeResponse::is_package_id_Valid() const{
    return m_package_id_isValid;
}

QString OAIDescribeNodeResponse::getPackageName() const {
    return m_package_name;
}
void OAIDescribeNodeResponse::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIDescribeNodeResponse::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIDescribeNodeResponse::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIDescribeNodeResponse::getPackageVersion() const {
    return m_package_version;
}
void OAIDescribeNodeResponse::setPackageVersion(const QString &package_version) {
    m_package_version = package_version;
    m_package_version_isSet = true;
}

bool OAIDescribeNodeResponse::is_package_version_Set() const{
    return m_package_version_isSet;
}

bool OAIDescribeNodeResponse::is_package_version_Valid() const{
    return m_package_version_isValid;
}

QString OAIDescribeNodeResponse::getPatchVersion() const {
    return m_patch_version;
}
void OAIDescribeNodeResponse::setPatchVersion(const QString &patch_version) {
    m_patch_version = patch_version;
    m_patch_version_isSet = true;
}

bool OAIDescribeNodeResponse::is_patch_version_Set() const{
    return m_patch_version_isSet;
}

bool OAIDescribeNodeResponse::is_patch_version_Valid() const{
    return m_patch_version_isValid;
}

bool OAIDescribeNodeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_interface.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeNodeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_category_isValid && m_created_time_isValid && m_description_isValid && m_last_updated_time_isValid && m_name_isValid && m_node_id_isValid && m_node_interface_isValid && m_owner_account_isValid && m_package_id_isValid && m_package_name_isValid && m_package_version_isValid && m_patch_version_isValid && true;
}

} // namespace OpenAPI
