/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNodeFromTemplateJob_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNodeFromTemplateJob_request::OAICreateNodeFromTemplateJob_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNodeFromTemplateJob_request::OAICreateNodeFromTemplateJob_request() {
    this->initializeModel();
}

OAICreateNodeFromTemplateJob_request::~OAICreateNodeFromTemplateJob_request() {}

void OAICreateNodeFromTemplateJob_request::initializeModel() {

    m_job_tags_isSet = false;
    m_job_tags_isValid = false;

    m_node_description_isSet = false;
    m_node_description_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_output_package_name_isSet = false;
    m_output_package_name_isValid = false;

    m_output_package_version_isSet = false;
    m_output_package_version_isValid = false;

    m_template_parameters_isSet = false;
    m_template_parameters_isValid = false;

    m_template_type_isSet = false;
    m_template_type_isValid = false;
}

void OAICreateNodeFromTemplateJob_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNodeFromTemplateJob_request::fromJsonObject(QJsonObject json) {

    m_job_tags_isValid = ::OpenAPI::fromJsonValue(m_job_tags, json[QString("JobTags")]);
    m_job_tags_isSet = !json[QString("JobTags")].isNull() && m_job_tags_isValid;

    m_node_description_isValid = ::OpenAPI::fromJsonValue(m_node_description, json[QString("NodeDescription")]);
    m_node_description_isSet = !json[QString("NodeDescription")].isNull() && m_node_description_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;

    m_output_package_name_isValid = ::OpenAPI::fromJsonValue(m_output_package_name, json[QString("OutputPackageName")]);
    m_output_package_name_isSet = !json[QString("OutputPackageName")].isNull() && m_output_package_name_isValid;

    m_output_package_version_isValid = ::OpenAPI::fromJsonValue(m_output_package_version, json[QString("OutputPackageVersion")]);
    m_output_package_version_isSet = !json[QString("OutputPackageVersion")].isNull() && m_output_package_version_isValid;

    m_template_parameters_isValid = ::OpenAPI::fromJsonValue(m_template_parameters, json[QString("TemplateParameters")]);
    m_template_parameters_isSet = !json[QString("TemplateParameters")].isNull() && m_template_parameters_isValid;

    m_template_type_isValid = ::OpenAPI::fromJsonValue(m_template_type, json[QString("TemplateType")]);
    m_template_type_isSet = !json[QString("TemplateType")].isNull() && m_template_type_isValid;
}

QString OAICreateNodeFromTemplateJob_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNodeFromTemplateJob_request::asJsonObject() const {
    QJsonObject obj;
    if (m_job_tags.size() > 0) {
        obj.insert(QString("JobTags"), ::OpenAPI::toJsonValue(m_job_tags));
    }
    if (m_node_description_isSet) {
        obj.insert(QString("NodeDescription"), ::OpenAPI::toJsonValue(m_node_description));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_output_package_name_isSet) {
        obj.insert(QString("OutputPackageName"), ::OpenAPI::toJsonValue(m_output_package_name));
    }
    if (m_output_package_version_isSet) {
        obj.insert(QString("OutputPackageVersion"), ::OpenAPI::toJsonValue(m_output_package_version));
    }
    if (m_template_parameters.size() > 0) {
        obj.insert(QString("TemplateParameters"), ::OpenAPI::toJsonValue(m_template_parameters));
    }
    if (m_template_type_isSet) {
        obj.insert(QString("TemplateType"), ::OpenAPI::toJsonValue(m_template_type));
    }
    return obj;
}

QList<OAIJobResourceTags> OAICreateNodeFromTemplateJob_request::getJobTags() const {
    return m_job_tags;
}
void OAICreateNodeFromTemplateJob_request::setJobTags(const QList<OAIJobResourceTags> &job_tags) {
    m_job_tags = job_tags;
    m_job_tags_isSet = true;
}

bool OAICreateNodeFromTemplateJob_request::is_job_tags_Set() const{
    return m_job_tags_isSet;
}

bool OAICreateNodeFromTemplateJob_request::is_job_tags_Valid() const{
    return m_job_tags_isValid;
}

QString OAICreateNodeFromTemplateJob_request::getNodeDescription() const {
    return m_node_description;
}
void OAICreateNodeFromTemplateJob_request::setNodeDescription(const QString &node_description) {
    m_node_description = node_description;
    m_node_description_isSet = true;
}

bool OAICreateNodeFromTemplateJob_request::is_node_description_Set() const{
    return m_node_description_isSet;
}

bool OAICreateNodeFromTemplateJob_request::is_node_description_Valid() const{
    return m_node_description_isValid;
}

QString OAICreateNodeFromTemplateJob_request::getNodeName() const {
    return m_node_name;
}
void OAICreateNodeFromTemplateJob_request::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAICreateNodeFromTemplateJob_request::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAICreateNodeFromTemplateJob_request::is_node_name_Valid() const{
    return m_node_name_isValid;
}

QString OAICreateNodeFromTemplateJob_request::getOutputPackageName() const {
    return m_output_package_name;
}
void OAICreateNodeFromTemplateJob_request::setOutputPackageName(const QString &output_package_name) {
    m_output_package_name = output_package_name;
    m_output_package_name_isSet = true;
}

bool OAICreateNodeFromTemplateJob_request::is_output_package_name_Set() const{
    return m_output_package_name_isSet;
}

bool OAICreateNodeFromTemplateJob_request::is_output_package_name_Valid() const{
    return m_output_package_name_isValid;
}

QString OAICreateNodeFromTemplateJob_request::getOutputPackageVersion() const {
    return m_output_package_version;
}
void OAICreateNodeFromTemplateJob_request::setOutputPackageVersion(const QString &output_package_version) {
    m_output_package_version = output_package_version;
    m_output_package_version_isSet = true;
}

bool OAICreateNodeFromTemplateJob_request::is_output_package_version_Set() const{
    return m_output_package_version_isSet;
}

bool OAICreateNodeFromTemplateJob_request::is_output_package_version_Valid() const{
    return m_output_package_version_isValid;
}

QMap<QString, QString> OAICreateNodeFromTemplateJob_request::getTemplateParameters() const {
    return m_template_parameters;
}
void OAICreateNodeFromTemplateJob_request::setTemplateParameters(const QMap<QString, QString> &template_parameters) {
    m_template_parameters = template_parameters;
    m_template_parameters_isSet = true;
}

bool OAICreateNodeFromTemplateJob_request::is_template_parameters_Set() const{
    return m_template_parameters_isSet;
}

bool OAICreateNodeFromTemplateJob_request::is_template_parameters_Valid() const{
    return m_template_parameters_isValid;
}

QString OAICreateNodeFromTemplateJob_request::getTemplateType() const {
    return m_template_type;
}
void OAICreateNodeFromTemplateJob_request::setTemplateType(const QString &template_type) {
    m_template_type = template_type;
    m_template_type_isSet = true;
}

bool OAICreateNodeFromTemplateJob_request::is_template_type_Set() const{
    return m_template_type_isSet;
}

bool OAICreateNodeFromTemplateJob_request::is_template_type_Valid() const{
    return m_template_type_isValid;
}

bool OAICreateNodeFromTemplateJob_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNodeFromTemplateJob_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_name_isValid && m_output_package_name_isValid && m_output_package_version_isValid && m_template_parameters_isValid && m_template_type_isValid && true;
}

} // namespace OpenAPI
