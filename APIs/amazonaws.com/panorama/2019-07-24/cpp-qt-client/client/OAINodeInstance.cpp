/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeInstance::OAINodeInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeInstance::OAINodeInstance() {
    this->initializeModel();
}

OAINodeInstance::~OAINodeInstance() {}

void OAINodeInstance::initializeModel() {

    m_current_status_isSet = false;
    m_current_status_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_node_instance_id_isSet = false;
    m_node_instance_id_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_package_patch_version_isSet = false;
    m_package_patch_version_isValid = false;

    m_package_version_isSet = false;
    m_package_version_isValid = false;
}

void OAINodeInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeInstance::fromJsonObject(QJsonObject json) {

    m_current_status_isValid = ::OpenAPI::fromJsonValue(m_current_status, json[QString("CurrentStatus")]);
    m_current_status_isSet = !json[QString("CurrentStatus")].isNull() && m_current_status_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("NodeId")]);
    m_node_id_isSet = !json[QString("NodeId")].isNull() && m_node_id_isValid;

    m_node_instance_id_isValid = ::OpenAPI::fromJsonValue(m_node_instance_id, json[QString("NodeInstanceId")]);
    m_node_instance_id_isSet = !json[QString("NodeInstanceId")].isNull() && m_node_instance_id_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("NodeName")]);
    m_node_name_isSet = !json[QString("NodeName")].isNull() && m_node_name_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("PackageName")]);
    m_package_name_isSet = !json[QString("PackageName")].isNull() && m_package_name_isValid;

    m_package_patch_version_isValid = ::OpenAPI::fromJsonValue(m_package_patch_version, json[QString("PackagePatchVersion")]);
    m_package_patch_version_isSet = !json[QString("PackagePatchVersion")].isNull() && m_package_patch_version_isValid;

    m_package_version_isValid = ::OpenAPI::fromJsonValue(m_package_version, json[QString("PackageVersion")]);
    m_package_version_isSet = !json[QString("PackageVersion")].isNull() && m_package_version_isValid;
}

QString OAINodeInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_current_status.isSet()) {
        obj.insert(QString("CurrentStatus"), ::OpenAPI::toJsonValue(m_current_status));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("NodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_node_instance_id_isSet) {
        obj.insert(QString("NodeInstanceId"), ::OpenAPI::toJsonValue(m_node_instance_id));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("NodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("PackageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_package_patch_version_isSet) {
        obj.insert(QString("PackagePatchVersion"), ::OpenAPI::toJsonValue(m_package_patch_version));
    }
    if (m_package_version_isSet) {
        obj.insert(QString("PackageVersion"), ::OpenAPI::toJsonValue(m_package_version));
    }
    return obj;
}

OAINodeInstanceStatus OAINodeInstance::getCurrentStatus() const {
    return m_current_status;
}
void OAINodeInstance::setCurrentStatus(const OAINodeInstanceStatus &current_status) {
    m_current_status = current_status;
    m_current_status_isSet = true;
}

bool OAINodeInstance::is_current_status_Set() const{
    return m_current_status_isSet;
}

bool OAINodeInstance::is_current_status_Valid() const{
    return m_current_status_isValid;
}

QString OAINodeInstance::getNodeId() const {
    return m_node_id;
}
void OAINodeInstance::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAINodeInstance::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAINodeInstance::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAINodeInstance::getNodeInstanceId() const {
    return m_node_instance_id;
}
void OAINodeInstance::setNodeInstanceId(const QString &node_instance_id) {
    m_node_instance_id = node_instance_id;
    m_node_instance_id_isSet = true;
}

bool OAINodeInstance::is_node_instance_id_Set() const{
    return m_node_instance_id_isSet;
}

bool OAINodeInstance::is_node_instance_id_Valid() const{
    return m_node_instance_id_isValid;
}

QString OAINodeInstance::getNodeName() const {
    return m_node_name;
}
void OAINodeInstance::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAINodeInstance::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAINodeInstance::is_node_name_Valid() const{
    return m_node_name_isValid;
}

QString OAINodeInstance::getPackageName() const {
    return m_package_name;
}
void OAINodeInstance::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAINodeInstance::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAINodeInstance::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAINodeInstance::getPackagePatchVersion() const {
    return m_package_patch_version;
}
void OAINodeInstance::setPackagePatchVersion(const QString &package_patch_version) {
    m_package_patch_version = package_patch_version;
    m_package_patch_version_isSet = true;
}

bool OAINodeInstance::is_package_patch_version_Set() const{
    return m_package_patch_version_isSet;
}

bool OAINodeInstance::is_package_patch_version_Valid() const{
    return m_package_patch_version_isValid;
}

QString OAINodeInstance::getPackageVersion() const {
    return m_package_version;
}
void OAINodeInstance::setPackageVersion(const QString &package_version) {
    m_package_version = package_version;
    m_package_version_isSet = true;
}

bool OAINodeInstance::is_package_version_Set() const{
    return m_package_version_isSet;
}

bool OAINodeInstance::is_package_version_Valid() const{
    return m_package_version_isValid;
}

bool OAINodeInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_patch_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_status_isValid && m_node_instance_id_isValid && true;
}

} // namespace OpenAPI
