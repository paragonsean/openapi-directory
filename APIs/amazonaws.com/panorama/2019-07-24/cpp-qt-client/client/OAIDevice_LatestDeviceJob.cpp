/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice_LatestDeviceJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice_LatestDeviceJob::OAIDevice_LatestDeviceJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice_LatestDeviceJob::OAIDevice_LatestDeviceJob() {
    this->initializeModel();
}

OAIDevice_LatestDeviceJob::~OAIDevice_LatestDeviceJob() {}

void OAIDevice_LatestDeviceJob::initializeModel() {

    m_image_version_isSet = false;
    m_image_version_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDevice_LatestDeviceJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDevice_LatestDeviceJob::fromJsonObject(QJsonObject json) {

    m_image_version_isValid = ::OpenAPI::fromJsonValue(m_image_version, json[QString("ImageVersion")]);
    m_image_version_isSet = !json[QString("ImageVersion")].isNull() && m_image_version_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDevice_LatestDeviceJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDevice_LatestDeviceJob::asJsonObject() const {
    QJsonObject obj;
    if (m_image_version_isSet) {
        obj.insert(QString("ImageVersion"), ::OpenAPI::toJsonValue(m_image_version));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDevice_LatestDeviceJob::getImageVersion() const {
    return m_image_version;
}
void OAIDevice_LatestDeviceJob::setImageVersion(const QString &image_version) {
    m_image_version = image_version;
    m_image_version_isSet = true;
}

bool OAIDevice_LatestDeviceJob::is_image_version_Set() const{
    return m_image_version_isSet;
}

bool OAIDevice_LatestDeviceJob::is_image_version_Valid() const{
    return m_image_version_isValid;
}

OAIJobType OAIDevice_LatestDeviceJob::getJobType() const {
    return m_job_type;
}
void OAIDevice_LatestDeviceJob::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIDevice_LatestDeviceJob::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIDevice_LatestDeviceJob::is_job_type_Valid() const{
    return m_job_type_isValid;
}

OAIUpdateProgress OAIDevice_LatestDeviceJob::getStatus() const {
    return m_status;
}
void OAIDevice_LatestDeviceJob::setStatus(const OAIUpdateProgress &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDevice_LatestDeviceJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDevice_LatestDeviceJob::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDevice_LatestDeviceJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDevice_LatestDeviceJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
