/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeSignal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeSignal::OAINodeSignal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeSignal::OAINodeSignal() {
    this->initializeModel();
}

OAINodeSignal::~OAINodeSignal() {}

void OAINodeSignal::initializeModel() {

    m_node_instance_id_isSet = false;
    m_node_instance_id_isValid = false;

    m_signal_isSet = false;
    m_signal_isValid = false;
}

void OAINodeSignal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeSignal::fromJsonObject(QJsonObject json) {

    m_node_instance_id_isValid = ::OpenAPI::fromJsonValue(m_node_instance_id, json[QString("NodeInstanceId")]);
    m_node_instance_id_isSet = !json[QString("NodeInstanceId")].isNull() && m_node_instance_id_isValid;

    m_signal_isValid = ::OpenAPI::fromJsonValue(m_signal, json[QString("Signal")]);
    m_signal_isSet = !json[QString("Signal")].isNull() && m_signal_isValid;
}

QString OAINodeSignal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeSignal::asJsonObject() const {
    QJsonObject obj;
    if (m_node_instance_id_isSet) {
        obj.insert(QString("NodeInstanceId"), ::OpenAPI::toJsonValue(m_node_instance_id));
    }
    if (m_signal.isSet()) {
        obj.insert(QString("Signal"), ::OpenAPI::toJsonValue(m_signal));
    }
    return obj;
}

QString OAINodeSignal::getNodeInstanceId() const {
    return m_node_instance_id;
}
void OAINodeSignal::setNodeInstanceId(const QString &node_instance_id) {
    m_node_instance_id = node_instance_id;
    m_node_instance_id_isSet = true;
}

bool OAINodeSignal::is_node_instance_id_Set() const{
    return m_node_instance_id_isSet;
}

bool OAINodeSignal::is_node_instance_id_Valid() const{
    return m_node_instance_id_isValid;
}

OAINodeSignalValue OAINodeSignal::getSignal() const {
    return m_signal;
}
void OAINodeSignal::setSignal(const OAINodeSignalValue &signal) {
    m_signal = signal;
    m_signal_isSet = true;
}

bool OAINodeSignal::is_signal_Set() const{
    return m_signal_isSet;
}

bool OAINodeSignal::is_signal_Valid() const{
    return m_signal_isValid;
}

bool OAINodeSignal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeSignal::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_instance_id_isValid && m_signal_isValid && true;
}

} // namespace OpenAPI
