/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationInstanceStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationInstanceStatus::OAIApplicationInstanceStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationInstanceStatus::OAIApplicationInstanceStatus() {
    this->initializeModel();
}

OAIApplicationInstanceStatus::~OAIApplicationInstanceStatus() {}

void OAIApplicationInstanceStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIApplicationInstanceStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIApplicationInstanceStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DEPLOYMENT_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::DEPLOYMENT_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEPLOYMENT_REQUESTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::DEPLOYMENT_REQUESTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEPLOYMENT_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::DEPLOYMENT_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEPLOYMENT_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::DEPLOYMENT_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEPLOYMENT_SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::DEPLOYMENT_SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOVAL_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::REMOVAL_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOVAL_REQUESTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::REMOVAL_REQUESTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOVAL_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::REMOVAL_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOVAL_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::REMOVAL_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOVAL_SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::REMOVAL_SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEPLOYMENT_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIApplicationInstanceStatus::DEPLOYMENT_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIApplicationInstanceStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIApplicationInstanceStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIApplicationInstanceStatus::DEPLOYMENT_PENDING:
            val = "DEPLOYMENT_PENDING";
            break;
        case eOAIApplicationInstanceStatus::DEPLOYMENT_REQUESTED:
            val = "DEPLOYMENT_REQUESTED";
            break;
        case eOAIApplicationInstanceStatus::DEPLOYMENT_IN_PROGRESS:
            val = "DEPLOYMENT_IN_PROGRESS";
            break;
        case eOAIApplicationInstanceStatus::DEPLOYMENT_ERROR:
            val = "DEPLOYMENT_ERROR";
            break;
        case eOAIApplicationInstanceStatus::DEPLOYMENT_SUCCEEDED:
            val = "DEPLOYMENT_SUCCEEDED";
            break;
        case eOAIApplicationInstanceStatus::REMOVAL_PENDING:
            val = "REMOVAL_PENDING";
            break;
        case eOAIApplicationInstanceStatus::REMOVAL_REQUESTED:
            val = "REMOVAL_REQUESTED";
            break;
        case eOAIApplicationInstanceStatus::REMOVAL_IN_PROGRESS:
            val = "REMOVAL_IN_PROGRESS";
            break;
        case eOAIApplicationInstanceStatus::REMOVAL_FAILED:
            val = "REMOVAL_FAILED";
            break;
        case eOAIApplicationInstanceStatus::REMOVAL_SUCCEEDED:
            val = "REMOVAL_SUCCEEDED";
            break;
        case eOAIApplicationInstanceStatus::DEPLOYMENT_FAILED:
            val = "DEPLOYMENT_FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIApplicationInstanceStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIApplicationInstanceStatus::eOAIApplicationInstanceStatus OAIApplicationInstanceStatus::getValue() const {
    return m_value;
}

void OAIApplicationInstanceStatus::setValue(const OAIApplicationInstanceStatus::eOAIApplicationInstanceStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIApplicationInstanceStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIApplicationInstanceStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
