/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeDeviceResponse.h
 *
 * 
 */

#ifndef OAIDescribeDeviceResponse_H
#define OAIDescribeDeviceResponse_H

#include <QJsonObject>

#include "OAIDescribeDeviceResponse_CurrentNetworkingStatus.h"
#include "OAIDescribeDeviceResponse_LatestDeviceJob.h"
#include "OAIDescribeDeviceResponse_NetworkingConfiguration.h"
#include "OAIDeviceAggregatedStatus.h"
#include "OAIDeviceBrand.h"
#include "OAIDeviceConnectionStatus.h"
#include "OAIDeviceStatus.h"
#include "OAIDeviceType.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeDeviceResponse_CurrentNetworkingStatus;
class OAIDescribeDeviceResponse_LatestDeviceJob;
class OAIDescribeDeviceResponse_NetworkingConfiguration;

class OAIDescribeDeviceResponse : public OAIObject {
public:
    OAIDescribeDeviceResponse();
    OAIDescribeDeviceResponse(QString json);
    ~OAIDescribeDeviceResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getAlternateSoftwares() const;
    void setAlternateSoftwares(const QList &alternate_softwares);
    bool is_alternate_softwares_Set() const;
    bool is_alternate_softwares_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    OAIDeviceBrand getBrand() const;
    void setBrand(const OAIDeviceBrand &brand);
    bool is_brand_Set() const;
    bool is_brand_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    OAIDescribeDeviceResponse_CurrentNetworkingStatus getCurrentNetworkingStatus() const;
    void setCurrentNetworkingStatus(const OAIDescribeDeviceResponse_CurrentNetworkingStatus &current_networking_status);
    bool is_current_networking_status_Set() const;
    bool is_current_networking_status_Valid() const;

    QString getCurrentSoftware() const;
    void setCurrentSoftware(const QString &current_software);
    bool is_current_software_Set() const;
    bool is_current_software_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIDeviceAggregatedStatus getDeviceAggregatedStatus() const;
    void setDeviceAggregatedStatus(const OAIDeviceAggregatedStatus &device_aggregated_status);
    bool is_device_aggregated_status_Set() const;
    bool is_device_aggregated_status_Valid() const;

    OAIDeviceConnectionStatus getDeviceConnectionStatus() const;
    void setDeviceConnectionStatus(const OAIDeviceConnectionStatus &device_connection_status);
    bool is_device_connection_status_Set() const;
    bool is_device_connection_status_Valid() const;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    QString getLatestAlternateSoftware() const;
    void setLatestAlternateSoftware(const QString &latest_alternate_software);
    bool is_latest_alternate_software_Set() const;
    bool is_latest_alternate_software_Valid() const;

    OAIDescribeDeviceResponse_LatestDeviceJob getLatestDeviceJob() const;
    void setLatestDeviceJob(const OAIDescribeDeviceResponse_LatestDeviceJob &latest_device_job);
    bool is_latest_device_job_Set() const;
    bool is_latest_device_job_Valid() const;

    QString getLatestSoftware() const;
    void setLatestSoftware(const QString &latest_software);
    bool is_latest_software_Set() const;
    bool is_latest_software_Valid() const;

    QDateTime getLeaseExpirationTime() const;
    void setLeaseExpirationTime(const QDateTime &lease_expiration_time);
    bool is_lease_expiration_time_Set() const;
    bool is_lease_expiration_time_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIDescribeDeviceResponse_NetworkingConfiguration getNetworkingConfiguration() const;
    void setNetworkingConfiguration(const OAIDescribeDeviceResponse_NetworkingConfiguration &networking_configuration);
    bool is_networking_configuration_Set() const;
    bool is_networking_configuration_Valid() const;

    OAIDeviceStatus getProvisioningStatus() const;
    void setProvisioningStatus(const OAIDeviceStatus &provisioning_status);
    bool is_provisioning_status_Set() const;
    bool is_provisioning_status_Valid() const;

    QString getSerialNumber() const;
    void setSerialNumber(const QString &serial_number);
    bool is_serial_number_Set() const;
    bool is_serial_number_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIDeviceType getType() const;
    void setType(const OAIDeviceType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_alternate_softwares;
    bool m_alternate_softwares_isSet;
    bool m_alternate_softwares_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    OAIDeviceBrand m_brand;
    bool m_brand_isSet;
    bool m_brand_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    OAIDescribeDeviceResponse_CurrentNetworkingStatus m_current_networking_status;
    bool m_current_networking_status_isSet;
    bool m_current_networking_status_isValid;

    QString m_current_software;
    bool m_current_software_isSet;
    bool m_current_software_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIDeviceAggregatedStatus m_device_aggregated_status;
    bool m_device_aggregated_status_isSet;
    bool m_device_aggregated_status_isValid;

    OAIDeviceConnectionStatus m_device_connection_status;
    bool m_device_connection_status_isSet;
    bool m_device_connection_status_isValid;

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    QString m_latest_alternate_software;
    bool m_latest_alternate_software_isSet;
    bool m_latest_alternate_software_isValid;

    OAIDescribeDeviceResponse_LatestDeviceJob m_latest_device_job;
    bool m_latest_device_job_isSet;
    bool m_latest_device_job_isValid;

    QString m_latest_software;
    bool m_latest_software_isSet;
    bool m_latest_software_isValid;

    QDateTime m_lease_expiration_time;
    bool m_lease_expiration_time_isSet;
    bool m_lease_expiration_time_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIDescribeDeviceResponse_NetworkingConfiguration m_networking_configuration;
    bool m_networking_configuration_isSet;
    bool m_networking_configuration_isValid;

    OAIDeviceStatus m_provisioning_status;
    bool m_provisioning_status_isSet;
    bool m_provisioning_status_isValid;

    QString m_serial_number;
    bool m_serial_number_isSet;
    bool m_serial_number_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIDeviceType m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeDeviceResponse)

#endif // OAIDescribeDeviceResponse_H
