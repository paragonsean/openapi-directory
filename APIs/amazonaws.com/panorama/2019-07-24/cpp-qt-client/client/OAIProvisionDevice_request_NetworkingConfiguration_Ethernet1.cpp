/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1() {
    this->initializeModel();
}

OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::~OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1() {}

void OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::initializeModel() {

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_static_ip_connection_info_isSet = false;
    m_static_ip_connection_info_isValid = false;
}

void OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::fromJsonObject(QJsonObject json) {

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("ConnectionType")]);
    m_connection_type_isSet = !json[QString("ConnectionType")].isNull() && m_connection_type_isValid;

    m_static_ip_connection_info_isValid = ::OpenAPI::fromJsonValue(m_static_ip_connection_info, json[QString("StaticIpConnectionInfo")]);
    m_static_ip_connection_info_isSet = !json[QString("StaticIpConnectionInfo")].isNull() && m_static_ip_connection_info_isValid;
}

QString OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_type.isSet()) {
        obj.insert(QString("ConnectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_static_ip_connection_info.isSet()) {
        obj.insert(QString("StaticIpConnectionInfo"), ::OpenAPI::toJsonValue(m_static_ip_connection_info));
    }
    return obj;
}

OAIConnectionType OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::getConnectionType() const {
    return m_connection_type;
}
void OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::setConnectionType(const OAIConnectionType &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

OAIEthernetPayload_StaticIpConnectionInfo OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::getStaticIpConnectionInfo() const {
    return m_static_ip_connection_info;
}
void OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::setStaticIpConnectionInfo(const OAIEthernetPayload_StaticIpConnectionInfo &static_ip_connection_info) {
    m_static_ip_connection_info = static_ip_connection_info;
    m_static_ip_connection_info_isSet = true;
}

bool OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::is_static_ip_connection_info_Set() const{
    return m_static_ip_connection_info_isSet;
}

bool OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::is_static_ip_connection_info_Valid() const{
    return m_static_ip_connection_info_isValid;
}

bool OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_ip_connection_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisionDevice_request_NetworkingConfiguration_Ethernet1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_type_isValid && true;
}

} // namespace OpenAPI
