/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePackageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePackageResponse::OAICreatePackageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePackageResponse::OAICreatePackageResponse() {
    this->initializeModel();
}

OAICreatePackageResponse::~OAICreatePackageResponse() {}

void OAICreatePackageResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_storage_location_isSet = false;
    m_storage_location_isValid = false;
}

void OAICreatePackageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePackageResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageId")]);
    m_package_id_isSet = !json[QString("PackageId")].isNull() && m_package_id_isValid;

    m_storage_location_isValid = ::OpenAPI::fromJsonValue(m_storage_location, json[QString("StorageLocation")]);
    m_storage_location_isSet = !json[QString("StorageLocation")].isNull() && m_storage_location_isValid;
}

QString OAICreatePackageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePackageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_package_id_isSet) {
        obj.insert(QString("PackageId"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_storage_location.isSet()) {
        obj.insert(QString("StorageLocation"), ::OpenAPI::toJsonValue(m_storage_location));
    }
    return obj;
}

QString OAICreatePackageResponse::getArn() const {
    return m_arn;
}
void OAICreatePackageResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreatePackageResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreatePackageResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreatePackageResponse::getPackageId() const {
    return m_package_id;
}
void OAICreatePackageResponse::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAICreatePackageResponse::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAICreatePackageResponse::is_package_id_Valid() const{
    return m_package_id_isValid;
}

OAICreatePackageResponse_StorageLocation OAICreatePackageResponse::getStorageLocation() const {
    return m_storage_location;
}
void OAICreatePackageResponse::setStorageLocation(const OAICreatePackageResponse_StorageLocation &storage_location) {
    m_storage_location = storage_location;
    m_storage_location_isSet = true;
}

bool OAICreatePackageResponse::is_storage_location_Set() const{
    return m_storage_location_isSet;
}

bool OAICreatePackageResponse::is_storage_location_Valid() const{
    return m_storage_location_isValid;
}

bool OAICreatePackageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePackageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_storage_location_isValid && true;
}

} // namespace OpenAPI
