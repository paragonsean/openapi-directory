/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApplicationInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApplicationInstanceRequest::OAICreateApplicationInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApplicationInstanceRequest::OAICreateApplicationInstanceRequest() {
    this->initializeModel();
}

OAICreateApplicationInstanceRequest::~OAICreateApplicationInstanceRequest() {}

void OAICreateApplicationInstanceRequest::initializeModel() {

    m_application_instance_id_to_replace_isSet = false;
    m_application_instance_id_to_replace_isValid = false;

    m_default_runtime_context_device_isSet = false;
    m_default_runtime_context_device_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_manifest_overrides_payload_isSet = false;
    m_manifest_overrides_payload_isValid = false;

    m_manifest_payload_isSet = false;
    m_manifest_payload_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runtime_role_arn_isSet = false;
    m_runtime_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateApplicationInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApplicationInstanceRequest::fromJsonObject(QJsonObject json) {

    m_application_instance_id_to_replace_isValid = ::OpenAPI::fromJsonValue(m_application_instance_id_to_replace, json[QString("ApplicationInstanceIdToReplace")]);
    m_application_instance_id_to_replace_isSet = !json[QString("ApplicationInstanceIdToReplace")].isNull() && m_application_instance_id_to_replace_isValid;

    m_default_runtime_context_device_isValid = ::OpenAPI::fromJsonValue(m_default_runtime_context_device, json[QString("DefaultRuntimeContextDevice")]);
    m_default_runtime_context_device_isSet = !json[QString("DefaultRuntimeContextDevice")].isNull() && m_default_runtime_context_device_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_manifest_overrides_payload_isValid = ::OpenAPI::fromJsonValue(m_manifest_overrides_payload, json[QString("ManifestOverridesPayload")]);
    m_manifest_overrides_payload_isSet = !json[QString("ManifestOverridesPayload")].isNull() && m_manifest_overrides_payload_isValid;

    m_manifest_payload_isValid = ::OpenAPI::fromJsonValue(m_manifest_payload, json[QString("ManifestPayload")]);
    m_manifest_payload_isSet = !json[QString("ManifestPayload")].isNull() && m_manifest_payload_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_runtime_role_arn_isValid = ::OpenAPI::fromJsonValue(m_runtime_role_arn, json[QString("RuntimeRoleArn")]);
    m_runtime_role_arn_isSet = !json[QString("RuntimeRoleArn")].isNull() && m_runtime_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateApplicationInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApplicationInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_application_instance_id_to_replace_isSet) {
        obj.insert(QString("ApplicationInstanceIdToReplace"), ::OpenAPI::toJsonValue(m_application_instance_id_to_replace));
    }
    if (m_default_runtime_context_device_isSet) {
        obj.insert(QString("DefaultRuntimeContextDevice"), ::OpenAPI::toJsonValue(m_default_runtime_context_device));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_manifest_overrides_payload.isSet()) {
        obj.insert(QString("ManifestOverridesPayload"), ::OpenAPI::toJsonValue(m_manifest_overrides_payload));
    }
    if (m_manifest_payload.isSet()) {
        obj.insert(QString("ManifestPayload"), ::OpenAPI::toJsonValue(m_manifest_payload));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runtime_role_arn_isSet) {
        obj.insert(QString("RuntimeRoleArn"), ::OpenAPI::toJsonValue(m_runtime_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateApplicationInstanceRequest::getApplicationInstanceIdToReplace() const {
    return m_application_instance_id_to_replace;
}
void OAICreateApplicationInstanceRequest::setApplicationInstanceIdToReplace(const QString &application_instance_id_to_replace) {
    m_application_instance_id_to_replace = application_instance_id_to_replace;
    m_application_instance_id_to_replace_isSet = true;
}

bool OAICreateApplicationInstanceRequest::is_application_instance_id_to_replace_Set() const{
    return m_application_instance_id_to_replace_isSet;
}

bool OAICreateApplicationInstanceRequest::is_application_instance_id_to_replace_Valid() const{
    return m_application_instance_id_to_replace_isValid;
}

QString OAICreateApplicationInstanceRequest::getDefaultRuntimeContextDevice() const {
    return m_default_runtime_context_device;
}
void OAICreateApplicationInstanceRequest::setDefaultRuntimeContextDevice(const QString &default_runtime_context_device) {
    m_default_runtime_context_device = default_runtime_context_device;
    m_default_runtime_context_device_isSet = true;
}

bool OAICreateApplicationInstanceRequest::is_default_runtime_context_device_Set() const{
    return m_default_runtime_context_device_isSet;
}

bool OAICreateApplicationInstanceRequest::is_default_runtime_context_device_Valid() const{
    return m_default_runtime_context_device_isValid;
}

QString OAICreateApplicationInstanceRequest::getDescription() const {
    return m_description;
}
void OAICreateApplicationInstanceRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateApplicationInstanceRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateApplicationInstanceRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateApplicationInstanceRequest_ManifestOverridesPayload OAICreateApplicationInstanceRequest::getManifestOverridesPayload() const {
    return m_manifest_overrides_payload;
}
void OAICreateApplicationInstanceRequest::setManifestOverridesPayload(const OAICreateApplicationInstanceRequest_ManifestOverridesPayload &manifest_overrides_payload) {
    m_manifest_overrides_payload = manifest_overrides_payload;
    m_manifest_overrides_payload_isSet = true;
}

bool OAICreateApplicationInstanceRequest::is_manifest_overrides_payload_Set() const{
    return m_manifest_overrides_payload_isSet;
}

bool OAICreateApplicationInstanceRequest::is_manifest_overrides_payload_Valid() const{
    return m_manifest_overrides_payload_isValid;
}

OAICreateApplicationInstanceRequest_ManifestPayload OAICreateApplicationInstanceRequest::getManifestPayload() const {
    return m_manifest_payload;
}
void OAICreateApplicationInstanceRequest::setManifestPayload(const OAICreateApplicationInstanceRequest_ManifestPayload &manifest_payload) {
    m_manifest_payload = manifest_payload;
    m_manifest_payload_isSet = true;
}

bool OAICreateApplicationInstanceRequest::is_manifest_payload_Set() const{
    return m_manifest_payload_isSet;
}

bool OAICreateApplicationInstanceRequest::is_manifest_payload_Valid() const{
    return m_manifest_payload_isValid;
}

QString OAICreateApplicationInstanceRequest::getName() const {
    return m_name;
}
void OAICreateApplicationInstanceRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateApplicationInstanceRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateApplicationInstanceRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateApplicationInstanceRequest::getRuntimeRoleArn() const {
    return m_runtime_role_arn;
}
void OAICreateApplicationInstanceRequest::setRuntimeRoleArn(const QString &runtime_role_arn) {
    m_runtime_role_arn = runtime_role_arn;
    m_runtime_role_arn_isSet = true;
}

bool OAICreateApplicationInstanceRequest::is_runtime_role_arn_Set() const{
    return m_runtime_role_arn_isSet;
}

bool OAICreateApplicationInstanceRequest::is_runtime_role_arn_Valid() const{
    return m_runtime_role_arn_isValid;
}

QMap OAICreateApplicationInstanceRequest::getTags() const {
    return m_tags;
}
void OAICreateApplicationInstanceRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApplicationInstanceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApplicationInstanceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateApplicationInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_instance_id_to_replace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_runtime_context_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_overrides_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApplicationInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_runtime_context_device_isValid && m_manifest_payload_isValid && true;
}

} // namespace OpenAPI
