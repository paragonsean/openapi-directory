/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageVersionInputConfig_S3Location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageVersionInputConfig_S3Location::OAIPackageVersionInputConfig_S3Location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageVersionInputConfig_S3Location::OAIPackageVersionInputConfig_S3Location() {
    this->initializeModel();
}

OAIPackageVersionInputConfig_S3Location::~OAIPackageVersionInputConfig_S3Location() {}

void OAIPackageVersionInputConfig_S3Location::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_object_key_isSet = false;
    m_object_key_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIPackageVersionInputConfig_S3Location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageVersionInputConfig_S3Location::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("BucketName")]);
    m_bucket_name_isSet = !json[QString("BucketName")].isNull() && m_bucket_name_isValid;

    m_object_key_isValid = ::OpenAPI::fromJsonValue(m_object_key, json[QString("ObjectKey")]);
    m_object_key_isSet = !json[QString("ObjectKey")].isNull() && m_object_key_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;
}

QString OAIPackageVersionInputConfig_S3Location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageVersionInputConfig_S3Location::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("BucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_object_key_isSet) {
        obj.insert(QString("ObjectKey"), ::OpenAPI::toJsonValue(m_object_key));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIPackageVersionInputConfig_S3Location::getBucketName() const {
    return m_bucket_name;
}
void OAIPackageVersionInputConfig_S3Location::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIPackageVersionInputConfig_S3Location::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIPackageVersionInputConfig_S3Location::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIPackageVersionInputConfig_S3Location::getObjectKey() const {
    return m_object_key;
}
void OAIPackageVersionInputConfig_S3Location::setObjectKey(const QString &object_key) {
    m_object_key = object_key;
    m_object_key_isSet = true;
}

bool OAIPackageVersionInputConfig_S3Location::is_object_key_Set() const{
    return m_object_key_isSet;
}

bool OAIPackageVersionInputConfig_S3Location::is_object_key_Valid() const{
    return m_object_key_isValid;
}

QString OAIPackageVersionInputConfig_S3Location::getRegion() const {
    return m_region;
}
void OAIPackageVersionInputConfig_S3Location::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIPackageVersionInputConfig_S3Location::is_region_Set() const{
    return m_region_isSet;
}

bool OAIPackageVersionInputConfig_S3Location::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIPackageVersionInputConfig_S3Location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageVersionInputConfig_S3Location::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_name_isValid && m_object_key_isValid && true;
}

} // namespace OpenAPI
