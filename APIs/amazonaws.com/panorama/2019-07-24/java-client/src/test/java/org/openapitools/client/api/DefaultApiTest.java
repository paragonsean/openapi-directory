/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateApplicationInstanceRequest;
import org.openapitools.client.model.CreateApplicationInstanceResponse;
import org.openapitools.client.model.CreateJobForDevicesRequest;
import org.openapitools.client.model.CreateJobForDevicesResponse;
import org.openapitools.client.model.CreateNodeFromTemplateJobRequest;
import org.openapitools.client.model.CreateNodeFromTemplateJobResponse;
import org.openapitools.client.model.CreatePackageImportJobRequest;
import org.openapitools.client.model.CreatePackageImportJobResponse;
import org.openapitools.client.model.CreatePackageRequest;
import org.openapitools.client.model.CreatePackageResponse;
import org.openapitools.client.model.DeleteDeviceResponse;
import org.openapitools.client.model.DescribeApplicationInstanceDetailsResponse;
import org.openapitools.client.model.DescribeApplicationInstanceResponse;
import org.openapitools.client.model.DescribeDeviceJobResponse;
import org.openapitools.client.model.DescribeDeviceResponse;
import org.openapitools.client.model.DescribeNodeFromTemplateJobResponse;
import org.openapitools.client.model.DescribeNodeResponse;
import org.openapitools.client.model.DescribePackageImportJobResponse;
import org.openapitools.client.model.DescribePackageResponse;
import org.openapitools.client.model.DescribePackageVersionResponse;
import org.openapitools.client.model.ListApplicationInstanceDependenciesResponse;
import org.openapitools.client.model.ListApplicationInstanceNodeInstancesResponse;
import org.openapitools.client.model.ListApplicationInstancesResponse;
import org.openapitools.client.model.ListDevicesJobsResponse;
import org.openapitools.client.model.ListDevicesResponse;
import org.openapitools.client.model.ListNodeFromTemplateJobsResponse;
import org.openapitools.client.model.ListNodesResponse;
import org.openapitools.client.model.ListPackageImportJobsResponse;
import org.openapitools.client.model.ListPackagesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ProvisionDeviceRequest;
import org.openapitools.client.model.ProvisionDeviceResponse;
import org.openapitools.client.model.RegisterPackageVersionRequest;
import org.openapitools.client.model.SignalApplicationInstanceNodeInstancesRequest;
import org.openapitools.client.model.SignalApplicationInstanceNodeInstancesResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateDeviceMetadataRequest;
import org.openapitools.client.model.UpdateDeviceMetadataResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates an application instance and deploys it to a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationInstanceTest() throws ApiException {
        CreateApplicationInstanceRequest createApplicationInstanceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApplicationInstanceResponse response = api.createApplicationInstance(createApplicationInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a job to run on a device. A job can update a device&#39;s software or reboot it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJobForDevicesTest() throws ApiException {
        CreateJobForDevicesRequest createJobForDevicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateJobForDevicesResponse response = api.createJobForDevices(createJobForDevicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a camera stream node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNodeFromTemplateJobTest() throws ApiException {
        CreateNodeFromTemplateJobRequest createNodeFromTemplateJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateNodeFromTemplateJobResponse response = api.createNodeFromTemplateJob(createNodeFromTemplateJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a package and storage location in an Amazon S3 access point.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPackageTest() throws ApiException {
        CreatePackageRequest createPackageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePackageResponse response = api.createPackage(createPackageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Imports a node package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPackageImportJobTest() throws ApiException {
        CreatePackageImportJobRequest createPackageImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePackageImportJobResponse response = api.createPackageImportJob(createPackageImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        String deviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDeviceResponse response = api.deleteDevice(deviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a package.&lt;/p&gt; &lt;note&gt; &lt;p&gt;To delete a package, you need permission to call &lt;code&gt;s3:DeleteObject&lt;/code&gt; in addition to permissions for the AWS Panorama API.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePackageTest() throws ApiException {
        String packageId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean forceDelete = null;
        Object response = api.deletePackage(packageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, forceDelete);
        // TODO: test validations
    }

    /**
     * Deregisters a package version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterPackageVersionTest() throws ApiException {
        String packageId = null;
        String packageVersion = null;
        String patchVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ownerAccount = null;
        String updatedLatestPatchVersion = null;
        Object response = api.deregisterPackageVersion(packageId, packageVersion, patchVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ownerAccount, updatedLatestPatchVersion);
        // TODO: test validations
    }

    /**
     * Returns information about an application instance on a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeApplicationInstanceTest() throws ApiException {
        String applicationInstanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeApplicationInstanceResponse response = api.describeApplicationInstance(applicationInstanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about an application instance&#39;s configuration manifest.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeApplicationInstanceDetailsTest() throws ApiException {
        String applicationInstanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeApplicationInstanceDetailsResponse response = api.describeApplicationInstanceDetails(applicationInstanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDeviceTest() throws ApiException {
        String deviceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDeviceResponse response = api.describeDevice(deviceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a device job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDeviceJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDeviceJobResponse response = api.describeDeviceJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeNodeTest() throws ApiException {
        String nodeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ownerAccount = null;
        DescribeNodeResponse response = api.describeNode(nodeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ownerAccount);
        // TODO: test validations
    }

    /**
     * Returns information about a job to create a camera stream node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeNodeFromTemplateJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeNodeFromTemplateJobResponse response = api.describeNodeFromTemplateJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePackageTest() throws ApiException {
        String packageId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePackageResponse response = api.describePackage(packageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a package import job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePackageImportJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePackageImportJobResponse response = api.describePackageImportJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a package version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePackageVersionTest() throws ApiException {
        String packageId = null;
        String packageVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String ownerAccount = null;
        String patchVersion = null;
        DescribePackageVersionResponse response = api.describePackageVersion(packageId, packageVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, ownerAccount, patchVersion);
        // TODO: test validations
    }

    /**
     * Returns a list of application instance dependencies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationInstanceDependenciesTest() throws ApiException {
        String applicationInstanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListApplicationInstanceDependenciesResponse response = api.listApplicationInstanceDependencies(applicationInstanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of application node instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationInstanceNodeInstancesTest() throws ApiException {
        String applicationInstanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListApplicationInstanceNodeInstancesResponse response = api.listApplicationInstanceNodeInstances(applicationInstanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of application instances.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationInstancesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String deviceId = null;
        Integer maxResults = null;
        String nextToken = null;
        String statusFilter = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListApplicationInstancesResponse response = api.listApplicationInstances(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deviceId, maxResults, nextToken, statusFilter, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String deviceAggregatedStatusFilter = null;
        Integer maxResults = null;
        String nameFilter = null;
        String nextToken = null;
        String sortBy = null;
        String sortOrder = null;
        ListDevicesResponse response = api.listDevices(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deviceAggregatedStatusFilter, maxResults, nameFilter, nextToken, sortBy, sortOrder);
        // TODO: test validations
    }

    /**
     * Returns a list of jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevicesJobsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String deviceId = null;
        Integer maxResults = null;
        String nextToken = null;
        ListDevicesJobsResponse response = api.listDevicesJobs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deviceId, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of camera stream node jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNodeFromTemplateJobsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListNodeFromTemplateJobsResponse response = api.listNodeFromTemplateJobs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNodesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String category = null;
        Integer maxResults = null;
        String nextToken = null;
        String ownerAccount = null;
        String packageName = null;
        String packageVersion = null;
        String patchVersion = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListNodesResponse response = api.listNodes(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, category, maxResults, nextToken, ownerAccount, packageName, packageVersion, patchVersion, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of package import jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPackageImportJobsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListPackageImportJobsResponse response = api.listPackageImportJobs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of packages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPackagesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListPackagesResponse response = api.listPackages(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * Returns a list of tags for a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a device and returns a configuration archive. The configuration archive is a ZIP file that contains a provisioning certificate that is valid for 5 minutes. Name the configuration archive &lt;code&gt;certificates-omni_&lt;i&gt;device-name&lt;/i&gt;.zip&lt;/code&gt; and transfer it to the device within 5 minutes. Use the included USB storage device and connect it to the USB 3.0 port next to the HDMI output.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provisionDeviceTest() throws ApiException {
        ProvisionDeviceRequest provisionDeviceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ProvisionDeviceResponse response = api.provisionDevice(provisionDeviceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Registers a package version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerPackageVersionTest() throws ApiException {
        String packageId = null;
        String packageVersion = null;
        String patchVersion = null;
        RegisterPackageVersionRequest registerPackageVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.registerPackageVersion(packageId, packageVersion, patchVersion, registerPackageVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an application instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeApplicationInstanceTest() throws ApiException {
        String applicationInstanceId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.removeApplicationInstance(applicationInstanceId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Signal camera nodes to stop or resume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalApplicationInstanceNodeInstancesTest() throws ApiException {
        String applicationInstanceId = null;
        SignalApplicationInstanceNodeInstancesRequest signalApplicationInstanceNodeInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SignalApplicationInstanceNodeInstancesResponse response = api.signalApplicationInstanceNodeInstances(applicationInstanceId, signalApplicationInstanceNodeInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Tags a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a device&#39;s metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceMetadataTest() throws ApiException {
        String deviceId = null;
        UpdateDeviceMetadataRequest updateDeviceMetadataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDeviceMetadataResponse response = api.updateDeviceMetadata(deviceId, updateDeviceMetadataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
