/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DescribeDeviceResponseCurrentNetworkingStatus;
import org.openapitools.client.model.DescribeDeviceResponseLatestDeviceJob;
import org.openapitools.client.model.DescribeDeviceResponseNetworkingConfiguration;
import org.openapitools.client.model.DeviceAggregatedStatus;
import org.openapitools.client.model.DeviceBrand;
import org.openapitools.client.model.DeviceConnectionStatus;
import org.openapitools.client.model.DeviceStatus;
import org.openapitools.client.model.DeviceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDeviceResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDeviceResponse {
  public static final String SERIALIZED_NAME_ALTERNATE_SOFTWARES = "AlternateSoftwares";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_SOFTWARES)
  private List alternateSoftwares;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_BRAND = "Brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private DeviceBrand brand;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_CURRENT_NETWORKING_STATUS = "CurrentNetworkingStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_NETWORKING_STATUS)
  private DescribeDeviceResponseCurrentNetworkingStatus currentNetworkingStatus;

  public static final String SERIALIZED_NAME_CURRENT_SOFTWARE = "CurrentSoftware";
  @SerializedName(SERIALIZED_NAME_CURRENT_SOFTWARE)
  private String currentSoftware;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE_AGGREGATED_STATUS = "DeviceAggregatedStatus";
  @SerializedName(SERIALIZED_NAME_DEVICE_AGGREGATED_STATUS)
  private DeviceAggregatedStatus deviceAggregatedStatus;

  public static final String SERIALIZED_NAME_DEVICE_CONNECTION_STATUS = "DeviceConnectionStatus";
  @SerializedName(SERIALIZED_NAME_DEVICE_CONNECTION_STATUS)
  private DeviceConnectionStatus deviceConnectionStatus;

  public static final String SERIALIZED_NAME_DEVICE_ID = "DeviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_LATEST_ALTERNATE_SOFTWARE = "LatestAlternateSoftware";
  @SerializedName(SERIALIZED_NAME_LATEST_ALTERNATE_SOFTWARE)
  private String latestAlternateSoftware;

  public static final String SERIALIZED_NAME_LATEST_DEVICE_JOB = "LatestDeviceJob";
  @SerializedName(SERIALIZED_NAME_LATEST_DEVICE_JOB)
  private DescribeDeviceResponseLatestDeviceJob latestDeviceJob;

  public static final String SERIALIZED_NAME_LATEST_SOFTWARE = "LatestSoftware";
  @SerializedName(SERIALIZED_NAME_LATEST_SOFTWARE)
  private String latestSoftware;

  public static final String SERIALIZED_NAME_LEASE_EXPIRATION_TIME = "LeaseExpirationTime";
  @SerializedName(SERIALIZED_NAME_LEASE_EXPIRATION_TIME)
  private OffsetDateTime leaseExpirationTime;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORKING_CONFIGURATION = "NetworkingConfiguration";
  @SerializedName(SERIALIZED_NAME_NETWORKING_CONFIGURATION)
  private DescribeDeviceResponseNetworkingConfiguration networkingConfiguration;

  public static final String SERIALIZED_NAME_PROVISIONING_STATUS = "ProvisioningStatus";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATUS)
  private DeviceStatus provisioningStatus;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DeviceType type;

  public DescribeDeviceResponse() {
  }

  public DescribeDeviceResponse alternateSoftwares(List alternateSoftwares) {
    this.alternateSoftwares = alternateSoftwares;
    return this;
  }

  /**
   * Get alternateSoftwares
   * @return alternateSoftwares
   */
  @javax.annotation.Nullable
  public List getAlternateSoftwares() {
    return alternateSoftwares;
  }

  public void setAlternateSoftwares(List alternateSoftwares) {
    this.alternateSoftwares = alternateSoftwares;
  }


  public DescribeDeviceResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public DescribeDeviceResponse brand(DeviceBrand brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Get brand
   * @return brand
   */
  @javax.annotation.Nullable
  public DeviceBrand getBrand() {
    return brand;
  }

  public void setBrand(DeviceBrand brand) {
    this.brand = brand;
  }


  public DescribeDeviceResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public DescribeDeviceResponse currentNetworkingStatus(DescribeDeviceResponseCurrentNetworkingStatus currentNetworkingStatus) {
    this.currentNetworkingStatus = currentNetworkingStatus;
    return this;
  }

  /**
   * Get currentNetworkingStatus
   * @return currentNetworkingStatus
   */
  @javax.annotation.Nullable
  public DescribeDeviceResponseCurrentNetworkingStatus getCurrentNetworkingStatus() {
    return currentNetworkingStatus;
  }

  public void setCurrentNetworkingStatus(DescribeDeviceResponseCurrentNetworkingStatus currentNetworkingStatus) {
    this.currentNetworkingStatus = currentNetworkingStatus;
  }


  public DescribeDeviceResponse currentSoftware(String currentSoftware) {
    this.currentSoftware = currentSoftware;
    return this;
  }

  /**
   * Get currentSoftware
   * @return currentSoftware
   */
  @javax.annotation.Nullable
  public String getCurrentSoftware() {
    return currentSoftware;
  }

  public void setCurrentSoftware(String currentSoftware) {
    this.currentSoftware = currentSoftware;
  }


  public DescribeDeviceResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeDeviceResponse deviceAggregatedStatus(DeviceAggregatedStatus deviceAggregatedStatus) {
    this.deviceAggregatedStatus = deviceAggregatedStatus;
    return this;
  }

  /**
   * Get deviceAggregatedStatus
   * @return deviceAggregatedStatus
   */
  @javax.annotation.Nullable
  public DeviceAggregatedStatus getDeviceAggregatedStatus() {
    return deviceAggregatedStatus;
  }

  public void setDeviceAggregatedStatus(DeviceAggregatedStatus deviceAggregatedStatus) {
    this.deviceAggregatedStatus = deviceAggregatedStatus;
  }


  public DescribeDeviceResponse deviceConnectionStatus(DeviceConnectionStatus deviceConnectionStatus) {
    this.deviceConnectionStatus = deviceConnectionStatus;
    return this;
  }

  /**
   * Get deviceConnectionStatus
   * @return deviceConnectionStatus
   */
  @javax.annotation.Nullable
  public DeviceConnectionStatus getDeviceConnectionStatus() {
    return deviceConnectionStatus;
  }

  public void setDeviceConnectionStatus(DeviceConnectionStatus deviceConnectionStatus) {
    this.deviceConnectionStatus = deviceConnectionStatus;
  }


  public DescribeDeviceResponse deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Get deviceId
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public DescribeDeviceResponse latestAlternateSoftware(String latestAlternateSoftware) {
    this.latestAlternateSoftware = latestAlternateSoftware;
    return this;
  }

  /**
   * Get latestAlternateSoftware
   * @return latestAlternateSoftware
   */
  @javax.annotation.Nullable
  public String getLatestAlternateSoftware() {
    return latestAlternateSoftware;
  }

  public void setLatestAlternateSoftware(String latestAlternateSoftware) {
    this.latestAlternateSoftware = latestAlternateSoftware;
  }


  public DescribeDeviceResponse latestDeviceJob(DescribeDeviceResponseLatestDeviceJob latestDeviceJob) {
    this.latestDeviceJob = latestDeviceJob;
    return this;
  }

  /**
   * Get latestDeviceJob
   * @return latestDeviceJob
   */
  @javax.annotation.Nullable
  public DescribeDeviceResponseLatestDeviceJob getLatestDeviceJob() {
    return latestDeviceJob;
  }

  public void setLatestDeviceJob(DescribeDeviceResponseLatestDeviceJob latestDeviceJob) {
    this.latestDeviceJob = latestDeviceJob;
  }


  public DescribeDeviceResponse latestSoftware(String latestSoftware) {
    this.latestSoftware = latestSoftware;
    return this;
  }

  /**
   * Get latestSoftware
   * @return latestSoftware
   */
  @javax.annotation.Nullable
  public String getLatestSoftware() {
    return latestSoftware;
  }

  public void setLatestSoftware(String latestSoftware) {
    this.latestSoftware = latestSoftware;
  }


  public DescribeDeviceResponse leaseExpirationTime(OffsetDateTime leaseExpirationTime) {
    this.leaseExpirationTime = leaseExpirationTime;
    return this;
  }

  /**
   * Get leaseExpirationTime
   * @return leaseExpirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLeaseExpirationTime() {
    return leaseExpirationTime;
  }

  public void setLeaseExpirationTime(OffsetDateTime leaseExpirationTime) {
    this.leaseExpirationTime = leaseExpirationTime;
  }


  public DescribeDeviceResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeDeviceResponse networkingConfiguration(DescribeDeviceResponseNetworkingConfiguration networkingConfiguration) {
    this.networkingConfiguration = networkingConfiguration;
    return this;
  }

  /**
   * Get networkingConfiguration
   * @return networkingConfiguration
   */
  @javax.annotation.Nullable
  public DescribeDeviceResponseNetworkingConfiguration getNetworkingConfiguration() {
    return networkingConfiguration;
  }

  public void setNetworkingConfiguration(DescribeDeviceResponseNetworkingConfiguration networkingConfiguration) {
    this.networkingConfiguration = networkingConfiguration;
  }


  public DescribeDeviceResponse provisioningStatus(DeviceStatus provisioningStatus) {
    this.provisioningStatus = provisioningStatus;
    return this;
  }

  /**
   * Get provisioningStatus
   * @return provisioningStatus
   */
  @javax.annotation.Nullable
  public DeviceStatus getProvisioningStatus() {
    return provisioningStatus;
  }

  public void setProvisioningStatus(DeviceStatus provisioningStatus) {
    this.provisioningStatus = provisioningStatus;
  }


  public DescribeDeviceResponse serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Get serialNumber
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public DescribeDeviceResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public DescribeDeviceResponse type(DeviceType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public DeviceType getType() {
    return type;
  }

  public void setType(DeviceType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDeviceResponse describeDeviceResponse = (DescribeDeviceResponse) o;
    return Objects.equals(this.alternateSoftwares, describeDeviceResponse.alternateSoftwares) &&
        Objects.equals(this.arn, describeDeviceResponse.arn) &&
        Objects.equals(this.brand, describeDeviceResponse.brand) &&
        Objects.equals(this.createdTime, describeDeviceResponse.createdTime) &&
        Objects.equals(this.currentNetworkingStatus, describeDeviceResponse.currentNetworkingStatus) &&
        Objects.equals(this.currentSoftware, describeDeviceResponse.currentSoftware) &&
        Objects.equals(this.description, describeDeviceResponse.description) &&
        Objects.equals(this.deviceAggregatedStatus, describeDeviceResponse.deviceAggregatedStatus) &&
        Objects.equals(this.deviceConnectionStatus, describeDeviceResponse.deviceConnectionStatus) &&
        Objects.equals(this.deviceId, describeDeviceResponse.deviceId) &&
        Objects.equals(this.latestAlternateSoftware, describeDeviceResponse.latestAlternateSoftware) &&
        Objects.equals(this.latestDeviceJob, describeDeviceResponse.latestDeviceJob) &&
        Objects.equals(this.latestSoftware, describeDeviceResponse.latestSoftware) &&
        Objects.equals(this.leaseExpirationTime, describeDeviceResponse.leaseExpirationTime) &&
        Objects.equals(this.name, describeDeviceResponse.name) &&
        Objects.equals(this.networkingConfiguration, describeDeviceResponse.networkingConfiguration) &&
        Objects.equals(this.provisioningStatus, describeDeviceResponse.provisioningStatus) &&
        Objects.equals(this.serialNumber, describeDeviceResponse.serialNumber) &&
        Objects.equals(this.tags, describeDeviceResponse.tags) &&
        Objects.equals(this.type, describeDeviceResponse.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateSoftwares, arn, brand, createdTime, currentNetworkingStatus, currentSoftware, description, deviceAggregatedStatus, deviceConnectionStatus, deviceId, latestAlternateSoftware, latestDeviceJob, latestSoftware, leaseExpirationTime, name, networkingConfiguration, provisioningStatus, serialNumber, tags, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDeviceResponse {\n");
    sb.append("    alternateSoftwares: ").append(toIndentedString(alternateSoftwares)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    currentNetworkingStatus: ").append(toIndentedString(currentNetworkingStatus)).append("\n");
    sb.append("    currentSoftware: ").append(toIndentedString(currentSoftware)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceAggregatedStatus: ").append(toIndentedString(deviceAggregatedStatus)).append("\n");
    sb.append("    deviceConnectionStatus: ").append(toIndentedString(deviceConnectionStatus)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    latestAlternateSoftware: ").append(toIndentedString(latestAlternateSoftware)).append("\n");
    sb.append("    latestDeviceJob: ").append(toIndentedString(latestDeviceJob)).append("\n");
    sb.append("    latestSoftware: ").append(toIndentedString(latestSoftware)).append("\n");
    sb.append("    leaseExpirationTime: ").append(toIndentedString(leaseExpirationTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkingConfiguration: ").append(toIndentedString(networkingConfiguration)).append("\n");
    sb.append("    provisioningStatus: ").append(toIndentedString(provisioningStatus)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlternateSoftwares");
    openapiFields.add("Arn");
    openapiFields.add("Brand");
    openapiFields.add("CreatedTime");
    openapiFields.add("CurrentNetworkingStatus");
    openapiFields.add("CurrentSoftware");
    openapiFields.add("Description");
    openapiFields.add("DeviceAggregatedStatus");
    openapiFields.add("DeviceConnectionStatus");
    openapiFields.add("DeviceId");
    openapiFields.add("LatestAlternateSoftware");
    openapiFields.add("LatestDeviceJob");
    openapiFields.add("LatestSoftware");
    openapiFields.add("LeaseExpirationTime");
    openapiFields.add("Name");
    openapiFields.add("NetworkingConfiguration");
    openapiFields.add("ProvisioningStatus");
    openapiFields.add("SerialNumber");
    openapiFields.add("Tags");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDeviceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDeviceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDeviceResponse is not found in the empty JSON string", DescribeDeviceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDeviceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDeviceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AlternateSoftwares`
      if (jsonObj.get("AlternateSoftwares") != null && !jsonObj.get("AlternateSoftwares").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AlternateSoftwares"));
      }
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Brand`
      if (jsonObj.get("Brand") != null && !jsonObj.get("Brand").isJsonNull()) {
        DeviceBrand.validateJsonElement(jsonObj.get("Brand"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `CurrentNetworkingStatus`
      if (jsonObj.get("CurrentNetworkingStatus") != null && !jsonObj.get("CurrentNetworkingStatus").isJsonNull()) {
        DescribeDeviceResponseCurrentNetworkingStatus.validateJsonElement(jsonObj.get("CurrentNetworkingStatus"));
      }
      // validate the optional field `CurrentSoftware`
      if (jsonObj.get("CurrentSoftware") != null && !jsonObj.get("CurrentSoftware").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentSoftware"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DeviceAggregatedStatus`
      if (jsonObj.get("DeviceAggregatedStatus") != null && !jsonObj.get("DeviceAggregatedStatus").isJsonNull()) {
        DeviceAggregatedStatus.validateJsonElement(jsonObj.get("DeviceAggregatedStatus"));
      }
      // validate the optional field `DeviceConnectionStatus`
      if (jsonObj.get("DeviceConnectionStatus") != null && !jsonObj.get("DeviceConnectionStatus").isJsonNull()) {
        DeviceConnectionStatus.validateJsonElement(jsonObj.get("DeviceConnectionStatus"));
      }
      // validate the optional field `DeviceId`
      if (jsonObj.get("DeviceId") != null && !jsonObj.get("DeviceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceId"));
      }
      // validate the optional field `LatestAlternateSoftware`
      if (jsonObj.get("LatestAlternateSoftware") != null && !jsonObj.get("LatestAlternateSoftware").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LatestAlternateSoftware"));
      }
      // validate the optional field `LatestDeviceJob`
      if (jsonObj.get("LatestDeviceJob") != null && !jsonObj.get("LatestDeviceJob").isJsonNull()) {
        DescribeDeviceResponseLatestDeviceJob.validateJsonElement(jsonObj.get("LatestDeviceJob"));
      }
      // validate the optional field `LatestSoftware`
      if (jsonObj.get("LatestSoftware") != null && !jsonObj.get("LatestSoftware").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LatestSoftware"));
      }
      // validate the optional field `LeaseExpirationTime`
      if (jsonObj.get("LeaseExpirationTime") != null && !jsonObj.get("LeaseExpirationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LeaseExpirationTime"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `NetworkingConfiguration`
      if (jsonObj.get("NetworkingConfiguration") != null && !jsonObj.get("NetworkingConfiguration").isJsonNull()) {
        DescribeDeviceResponseNetworkingConfiguration.validateJsonElement(jsonObj.get("NetworkingConfiguration"));
      }
      // validate the optional field `ProvisioningStatus`
      if (jsonObj.get("ProvisioningStatus") != null && !jsonObj.get("ProvisioningStatus").isJsonNull()) {
        DeviceStatus.validateJsonElement(jsonObj.get("ProvisioningStatus"));
      }
      // validate the optional field `SerialNumber`
      if (jsonObj.get("SerialNumber") != null && !jsonObj.get("SerialNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SerialNumber"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        DeviceType.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDeviceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDeviceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDeviceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDeviceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDeviceResponse>() {
           @Override
           public void write(JsonWriter out, DescribeDeviceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDeviceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDeviceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDeviceResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeDeviceResponse
   */
  public static DescribeDeviceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDeviceResponse.class);
  }

  /**
   * Convert an instance of DescribeDeviceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

