/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NodeInstanceStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A node instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeInstance {
  public static final String SERIALIZED_NAME_CURRENT_STATUS = "CurrentStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS)
  private NodeInstanceStatus currentStatus;

  public static final String SERIALIZED_NAME_NODE_ID = "NodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NODE_INSTANCE_ID = "NodeInstanceId";
  @SerializedName(SERIALIZED_NAME_NODE_INSTANCE_ID)
  private String nodeInstanceId;

  public static final String SERIALIZED_NAME_NODE_NAME = "NodeName";
  @SerializedName(SERIALIZED_NAME_NODE_NAME)
  private String nodeName;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "PackageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PACKAGE_PATCH_VERSION = "PackagePatchVersion";
  @SerializedName(SERIALIZED_NAME_PACKAGE_PATCH_VERSION)
  private String packagePatchVersion;

  public static final String SERIALIZED_NAME_PACKAGE_VERSION = "PackageVersion";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VERSION)
  private String packageVersion;

  public NodeInstance() {
  }

  public NodeInstance currentStatus(NodeInstanceStatus currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  /**
   * Get currentStatus
   * @return currentStatus
   */
  @javax.annotation.Nonnull
  public NodeInstanceStatus getCurrentStatus() {
    return currentStatus;
  }

  public void setCurrentStatus(NodeInstanceStatus currentStatus) {
    this.currentStatus = currentStatus;
  }


  public NodeInstance nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public NodeInstance nodeInstanceId(String nodeInstanceId) {
    this.nodeInstanceId = nodeInstanceId;
    return this;
  }

  /**
   * Get nodeInstanceId
   * @return nodeInstanceId
   */
  @javax.annotation.Nonnull
  public String getNodeInstanceId() {
    return nodeInstanceId;
  }

  public void setNodeInstanceId(String nodeInstanceId) {
    this.nodeInstanceId = nodeInstanceId;
  }


  public NodeInstance nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

  /**
   * Get nodeName
   * @return nodeName
   */
  @javax.annotation.Nullable
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }


  public NodeInstance packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Get packageName
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public NodeInstance packagePatchVersion(String packagePatchVersion) {
    this.packagePatchVersion = packagePatchVersion;
    return this;
  }

  /**
   * Get packagePatchVersion
   * @return packagePatchVersion
   */
  @javax.annotation.Nullable
  public String getPackagePatchVersion() {
    return packagePatchVersion;
  }

  public void setPackagePatchVersion(String packagePatchVersion) {
    this.packagePatchVersion = packagePatchVersion;
  }


  public NodeInstance packageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
    return this;
  }

  /**
   * Get packageVersion
   * @return packageVersion
   */
  @javax.annotation.Nullable
  public String getPackageVersion() {
    return packageVersion;
  }

  public void setPackageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInstance nodeInstance = (NodeInstance) o;
    return Objects.equals(this.currentStatus, nodeInstance.currentStatus) &&
        Objects.equals(this.nodeId, nodeInstance.nodeId) &&
        Objects.equals(this.nodeInstanceId, nodeInstance.nodeInstanceId) &&
        Objects.equals(this.nodeName, nodeInstance.nodeName) &&
        Objects.equals(this.packageName, nodeInstance.packageName) &&
        Objects.equals(this.packagePatchVersion, nodeInstance.packagePatchVersion) &&
        Objects.equals(this.packageVersion, nodeInstance.packageVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentStatus, nodeId, nodeInstanceId, nodeName, packageName, packagePatchVersion, packageVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInstance {\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeInstanceId: ").append(toIndentedString(nodeInstanceId)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    packagePatchVersion: ").append(toIndentedString(packagePatchVersion)).append("\n");
    sb.append("    packageVersion: ").append(toIndentedString(packageVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentStatus");
    openapiFields.add("NodeId");
    openapiFields.add("NodeInstanceId");
    openapiFields.add("NodeName");
    openapiFields.add("PackageName");
    openapiFields.add("PackagePatchVersion");
    openapiFields.add("PackageVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CurrentStatus");
    openapiRequiredFields.add("NodeInstanceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeInstance is not found in the empty JSON string", NodeInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeInstance.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CurrentStatus`
      NodeInstanceStatus.validateJsonElement(jsonObj.get("CurrentStatus"));
      // validate the optional field `NodeId`
      if (jsonObj.get("NodeId") != null && !jsonObj.get("NodeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodeId"));
      }
      // validate the required field `NodeInstanceId`
      String.validateJsonElement(jsonObj.get("NodeInstanceId"));
      // validate the optional field `NodeName`
      if (jsonObj.get("NodeName") != null && !jsonObj.get("NodeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodeName"));
      }
      // validate the optional field `PackageName`
      if (jsonObj.get("PackageName") != null && !jsonObj.get("PackageName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageName"));
      }
      // validate the optional field `PackagePatchVersion`
      if (jsonObj.get("PackagePatchVersion") != null && !jsonObj.get("PackagePatchVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackagePatchVersion"));
      }
      // validate the optional field `PackageVersion`
      if (jsonObj.get("PackageVersion") != null && !jsonObj.get("PackageVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeInstance>() {
           @Override
           public void write(JsonWriter out, NodeInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeInstance
   * @throws IOException if the JSON string is invalid with respect to NodeInstance
   */
  public static NodeInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeInstance.class);
  }

  /**
   * Convert an instance of NodeInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

