/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateJobForDevicesRequestDeviceJobConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateJobForDevicesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateJobForDevicesRequest {
  public static final String SERIALIZED_NAME_DEVICE_IDS = "DeviceIds";
  @SerializedName(SERIALIZED_NAME_DEVICE_IDS)
  private List<String> deviceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVICE_JOB_CONFIG = "DeviceJobConfig";
  @SerializedName(SERIALIZED_NAME_DEVICE_JOB_CONFIG)
  private CreateJobForDevicesRequestDeviceJobConfig deviceJobConfig;

  /**
   * The type of job to run.
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    OTA("OTA"),
    
    REBOOT("REBOOT");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTypeEnum fromValue(String value) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_TYPE = "JobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobTypeEnum jobType;

  public CreateJobForDevicesRequest() {
  }

  public CreateJobForDevicesRequest deviceIds(List<String> deviceIds) {
    this.deviceIds = deviceIds;
    return this;
  }

  public CreateJobForDevicesRequest addDeviceIdsItem(String deviceIdsItem) {
    if (this.deviceIds == null) {
      this.deviceIds = new ArrayList<>();
    }
    this.deviceIds.add(deviceIdsItem);
    return this;
  }

  /**
   * ID of target device.
   * @return deviceIds
   */
  @javax.annotation.Nonnull
  public List<String> getDeviceIds() {
    return deviceIds;
  }

  public void setDeviceIds(List<String> deviceIds) {
    this.deviceIds = deviceIds;
  }


  public CreateJobForDevicesRequest deviceJobConfig(CreateJobForDevicesRequestDeviceJobConfig deviceJobConfig) {
    this.deviceJobConfig = deviceJobConfig;
    return this;
  }

  /**
   * Get deviceJobConfig
   * @return deviceJobConfig
   */
  @javax.annotation.Nullable
  public CreateJobForDevicesRequestDeviceJobConfig getDeviceJobConfig() {
    return deviceJobConfig;
  }

  public void setDeviceJobConfig(CreateJobForDevicesRequestDeviceJobConfig deviceJobConfig) {
    this.deviceJobConfig = deviceJobConfig;
  }


  public CreateJobForDevicesRequest jobType(JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * The type of job to run.
   * @return jobType
   */
  @javax.annotation.Nonnull
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateJobForDevicesRequest createJobForDevicesRequest = (CreateJobForDevicesRequest) o;
    return Objects.equals(this.deviceIds, createJobForDevicesRequest.deviceIds) &&
        Objects.equals(this.deviceJobConfig, createJobForDevicesRequest.deviceJobConfig) &&
        Objects.equals(this.jobType, createJobForDevicesRequest.jobType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceIds, deviceJobConfig, jobType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateJobForDevicesRequest {\n");
    sb.append("    deviceIds: ").append(toIndentedString(deviceIds)).append("\n");
    sb.append("    deviceJobConfig: ").append(toIndentedString(deviceJobConfig)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceIds");
    openapiFields.add("DeviceJobConfig");
    openapiFields.add("JobType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeviceIds");
    openapiRequiredFields.add("JobType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateJobForDevicesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateJobForDevicesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateJobForDevicesRequest is not found in the empty JSON string", CreateJobForDevicesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateJobForDevicesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateJobForDevicesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateJobForDevicesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("DeviceIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("DeviceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceIds` to be an array in the JSON string but got `%s`", jsonObj.get("DeviceIds").toString()));
      }
      // validate the optional field `DeviceJobConfig`
      if (jsonObj.get("DeviceJobConfig") != null && !jsonObj.get("DeviceJobConfig").isJsonNull()) {
        CreateJobForDevicesRequestDeviceJobConfig.validateJsonElement(jsonObj.get("DeviceJobConfig"));
      }
      if (!jsonObj.get("JobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobType").toString()));
      }
      // validate the required field `JobType`
      JobTypeEnum.validateJsonElement(jsonObj.get("JobType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateJobForDevicesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateJobForDevicesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateJobForDevicesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateJobForDevicesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateJobForDevicesRequest>() {
           @Override
           public void write(JsonWriter out, CreateJobForDevicesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateJobForDevicesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateJobForDevicesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateJobForDevicesRequest
   * @throws IOException if the JSON string is invalid with respect to CreateJobForDevicesRequest
   */
  public static CreateJobForDevicesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateJobForDevicesRequest.class);
  }

  /**
   * Convert an instance of CreateJobForDevicesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

