/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateApplicationInstanceRequestManifestOverridesPayload;
import org.openapitools.client.model.CreateApplicationInstanceRequestManifestPayload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateApplicationInstanceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApplicationInstanceRequest {
  public static final String SERIALIZED_NAME_APPLICATION_INSTANCE_ID_TO_REPLACE = "ApplicationInstanceIdToReplace";
  @SerializedName(SERIALIZED_NAME_APPLICATION_INSTANCE_ID_TO_REPLACE)
  private String applicationInstanceIdToReplace;

  public static final String SERIALIZED_NAME_DEFAULT_RUNTIME_CONTEXT_DEVICE = "DefaultRuntimeContextDevice";
  @SerializedName(SERIALIZED_NAME_DEFAULT_RUNTIME_CONTEXT_DEVICE)
  private String defaultRuntimeContextDevice;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MANIFEST_OVERRIDES_PAYLOAD = "ManifestOverridesPayload";
  @SerializedName(SERIALIZED_NAME_MANIFEST_OVERRIDES_PAYLOAD)
  private CreateApplicationInstanceRequestManifestOverridesPayload manifestOverridesPayload;

  public static final String SERIALIZED_NAME_MANIFEST_PAYLOAD = "ManifestPayload";
  @SerializedName(SERIALIZED_NAME_MANIFEST_PAYLOAD)
  private CreateApplicationInstanceRequestManifestPayload manifestPayload;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUNTIME_ROLE_ARN = "RuntimeRoleArn";
  @SerializedName(SERIALIZED_NAME_RUNTIME_ROLE_ARN)
  private String runtimeRoleArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateApplicationInstanceRequest() {
  }

  public CreateApplicationInstanceRequest applicationInstanceIdToReplace(String applicationInstanceIdToReplace) {
    this.applicationInstanceIdToReplace = applicationInstanceIdToReplace;
    return this;
  }

  /**
   * The ID of an application instance to replace with the new instance.
   * @return applicationInstanceIdToReplace
   */
  @javax.annotation.Nullable
  public String getApplicationInstanceIdToReplace() {
    return applicationInstanceIdToReplace;
  }

  public void setApplicationInstanceIdToReplace(String applicationInstanceIdToReplace) {
    this.applicationInstanceIdToReplace = applicationInstanceIdToReplace;
  }


  public CreateApplicationInstanceRequest defaultRuntimeContextDevice(String defaultRuntimeContextDevice) {
    this.defaultRuntimeContextDevice = defaultRuntimeContextDevice;
    return this;
  }

  /**
   * A device&#39;s ID.
   * @return defaultRuntimeContextDevice
   */
  @javax.annotation.Nonnull
  public String getDefaultRuntimeContextDevice() {
    return defaultRuntimeContextDevice;
  }

  public void setDefaultRuntimeContextDevice(String defaultRuntimeContextDevice) {
    this.defaultRuntimeContextDevice = defaultRuntimeContextDevice;
  }


  public CreateApplicationInstanceRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for the application instance.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateApplicationInstanceRequest manifestOverridesPayload(CreateApplicationInstanceRequestManifestOverridesPayload manifestOverridesPayload) {
    this.manifestOverridesPayload = manifestOverridesPayload;
    return this;
  }

  /**
   * Get manifestOverridesPayload
   * @return manifestOverridesPayload
   */
  @javax.annotation.Nullable
  public CreateApplicationInstanceRequestManifestOverridesPayload getManifestOverridesPayload() {
    return manifestOverridesPayload;
  }

  public void setManifestOverridesPayload(CreateApplicationInstanceRequestManifestOverridesPayload manifestOverridesPayload) {
    this.manifestOverridesPayload = manifestOverridesPayload;
  }


  public CreateApplicationInstanceRequest manifestPayload(CreateApplicationInstanceRequestManifestPayload manifestPayload) {
    this.manifestPayload = manifestPayload;
    return this;
  }

  /**
   * Get manifestPayload
   * @return manifestPayload
   */
  @javax.annotation.Nonnull
  public CreateApplicationInstanceRequestManifestPayload getManifestPayload() {
    return manifestPayload;
  }

  public void setManifestPayload(CreateApplicationInstanceRequestManifestPayload manifestPayload) {
    this.manifestPayload = manifestPayload;
  }


  public CreateApplicationInstanceRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name for the application instance.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateApplicationInstanceRequest runtimeRoleArn(String runtimeRoleArn) {
    this.runtimeRoleArn = runtimeRoleArn;
    return this;
  }

  /**
   * The ARN of a runtime role for the application instance.
   * @return runtimeRoleArn
   */
  @javax.annotation.Nullable
  public String getRuntimeRoleArn() {
    return runtimeRoleArn;
  }

  public void setRuntimeRoleArn(String runtimeRoleArn) {
    this.runtimeRoleArn = runtimeRoleArn;
  }


  public CreateApplicationInstanceRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateApplicationInstanceRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tags for the application instance.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApplicationInstanceRequest createApplicationInstanceRequest = (CreateApplicationInstanceRequest) o;
    return Objects.equals(this.applicationInstanceIdToReplace, createApplicationInstanceRequest.applicationInstanceIdToReplace) &&
        Objects.equals(this.defaultRuntimeContextDevice, createApplicationInstanceRequest.defaultRuntimeContextDevice) &&
        Objects.equals(this.description, createApplicationInstanceRequest.description) &&
        Objects.equals(this.manifestOverridesPayload, createApplicationInstanceRequest.manifestOverridesPayload) &&
        Objects.equals(this.manifestPayload, createApplicationInstanceRequest.manifestPayload) &&
        Objects.equals(this.name, createApplicationInstanceRequest.name) &&
        Objects.equals(this.runtimeRoleArn, createApplicationInstanceRequest.runtimeRoleArn) &&
        Objects.equals(this.tags, createApplicationInstanceRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationInstanceIdToReplace, defaultRuntimeContextDevice, description, manifestOverridesPayload, manifestPayload, name, runtimeRoleArn, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApplicationInstanceRequest {\n");
    sb.append("    applicationInstanceIdToReplace: ").append(toIndentedString(applicationInstanceIdToReplace)).append("\n");
    sb.append("    defaultRuntimeContextDevice: ").append(toIndentedString(defaultRuntimeContextDevice)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    manifestOverridesPayload: ").append(toIndentedString(manifestOverridesPayload)).append("\n");
    sb.append("    manifestPayload: ").append(toIndentedString(manifestPayload)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runtimeRoleArn: ").append(toIndentedString(runtimeRoleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationInstanceIdToReplace");
    openapiFields.add("DefaultRuntimeContextDevice");
    openapiFields.add("Description");
    openapiFields.add("ManifestOverridesPayload");
    openapiFields.add("ManifestPayload");
    openapiFields.add("Name");
    openapiFields.add("RuntimeRoleArn");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DefaultRuntimeContextDevice");
    openapiRequiredFields.add("ManifestPayload");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApplicationInstanceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApplicationInstanceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApplicationInstanceRequest is not found in the empty JSON string", CreateApplicationInstanceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApplicationInstanceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApplicationInstanceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateApplicationInstanceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ApplicationInstanceIdToReplace") != null && !jsonObj.get("ApplicationInstanceIdToReplace").isJsonNull()) && !jsonObj.get("ApplicationInstanceIdToReplace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationInstanceIdToReplace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationInstanceIdToReplace").toString()));
      }
      if (!jsonObj.get("DefaultRuntimeContextDevice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultRuntimeContextDevice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultRuntimeContextDevice").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `ManifestOverridesPayload`
      if (jsonObj.get("ManifestOverridesPayload") != null && !jsonObj.get("ManifestOverridesPayload").isJsonNull()) {
        CreateApplicationInstanceRequestManifestOverridesPayload.validateJsonElement(jsonObj.get("ManifestOverridesPayload"));
      }
      // validate the required field `ManifestPayload`
      CreateApplicationInstanceRequestManifestPayload.validateJsonElement(jsonObj.get("ManifestPayload"));
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("RuntimeRoleArn") != null && !jsonObj.get("RuntimeRoleArn").isJsonNull()) && !jsonObj.get("RuntimeRoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RuntimeRoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RuntimeRoleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApplicationInstanceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApplicationInstanceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApplicationInstanceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApplicationInstanceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApplicationInstanceRequest>() {
           @Override
           public void write(JsonWriter out, CreateApplicationInstanceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApplicationInstanceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApplicationInstanceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApplicationInstanceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateApplicationInstanceRequest
   */
  public static CreateApplicationInstanceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApplicationInstanceRequest.class);
  }

  /**
   * Convert an instance of CreateApplicationInstanceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

