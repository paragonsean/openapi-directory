/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DeviceType;
import org.openapitools.client.model.JobType;
import org.openapitools.client.model.UpdateProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDeviceJobResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDeviceJobResponse {
  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DEVICE_ARN = "DeviceArn";
  @SerializedName(SERIALIZED_NAME_DEVICE_ARN)
  private String deviceArn;

  public static final String SERIALIZED_NAME_DEVICE_ID = "DeviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  private String deviceId;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "DeviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "DeviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private DeviceType deviceType;

  public static final String SERIALIZED_NAME_IMAGE_VERSION = "ImageVersion";
  @SerializedName(SERIALIZED_NAME_IMAGE_VERSION)
  private String imageVersion;

  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_TYPE = "JobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobType jobType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private UpdateProgress status;

  public DescribeDeviceJobResponse() {
  }

  public DescribeDeviceJobResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public DescribeDeviceJobResponse deviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
    return this;
  }

  /**
   * Get deviceArn
   * @return deviceArn
   */
  @javax.annotation.Nullable
  public String getDeviceArn() {
    return deviceArn;
  }

  public void setDeviceArn(String deviceArn) {
    this.deviceArn = deviceArn;
  }


  public DescribeDeviceJobResponse deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Get deviceId
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }


  public DescribeDeviceJobResponse deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Get deviceName
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public DescribeDeviceJobResponse deviceType(DeviceType deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * Get deviceType
   * @return deviceType
   */
  @javax.annotation.Nullable
  public DeviceType getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(DeviceType deviceType) {
    this.deviceType = deviceType;
  }


  public DescribeDeviceJobResponse imageVersion(String imageVersion) {
    this.imageVersion = imageVersion;
    return this;
  }

  /**
   * Get imageVersion
   * @return imageVersion
   */
  @javax.annotation.Nullable
  public String getImageVersion() {
    return imageVersion;
  }

  public void setImageVersion(String imageVersion) {
    this.imageVersion = imageVersion;
  }


  public DescribeDeviceJobResponse jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public DescribeDeviceJobResponse jobType(JobType jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nullable
  public JobType getJobType() {
    return jobType;
  }

  public void setJobType(JobType jobType) {
    this.jobType = jobType;
  }


  public DescribeDeviceJobResponse status(UpdateProgress status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public UpdateProgress getStatus() {
    return status;
  }

  public void setStatus(UpdateProgress status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDeviceJobResponse describeDeviceJobResponse = (DescribeDeviceJobResponse) o;
    return Objects.equals(this.createdTime, describeDeviceJobResponse.createdTime) &&
        Objects.equals(this.deviceArn, describeDeviceJobResponse.deviceArn) &&
        Objects.equals(this.deviceId, describeDeviceJobResponse.deviceId) &&
        Objects.equals(this.deviceName, describeDeviceJobResponse.deviceName) &&
        Objects.equals(this.deviceType, describeDeviceJobResponse.deviceType) &&
        Objects.equals(this.imageVersion, describeDeviceJobResponse.imageVersion) &&
        Objects.equals(this.jobId, describeDeviceJobResponse.jobId) &&
        Objects.equals(this.jobType, describeDeviceJobResponse.jobType) &&
        Objects.equals(this.status, describeDeviceJobResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdTime, deviceArn, deviceId, deviceName, deviceType, imageVersion, jobId, jobType, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDeviceJobResponse {\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    deviceArn: ").append(toIndentedString(deviceArn)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    imageVersion: ").append(toIndentedString(imageVersion)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreatedTime");
    openapiFields.add("DeviceArn");
    openapiFields.add("DeviceId");
    openapiFields.add("DeviceName");
    openapiFields.add("DeviceType");
    openapiFields.add("ImageVersion");
    openapiFields.add("JobId");
    openapiFields.add("JobType");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDeviceJobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDeviceJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDeviceJobResponse is not found in the empty JSON string", DescribeDeviceJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDeviceJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDeviceJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `DeviceArn`
      if (jsonObj.get("DeviceArn") != null && !jsonObj.get("DeviceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceArn"));
      }
      // validate the optional field `DeviceId`
      if (jsonObj.get("DeviceId") != null && !jsonObj.get("DeviceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceId"));
      }
      // validate the optional field `DeviceName`
      if (jsonObj.get("DeviceName") != null && !jsonObj.get("DeviceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceName"));
      }
      // validate the optional field `DeviceType`
      if (jsonObj.get("DeviceType") != null && !jsonObj.get("DeviceType").isJsonNull()) {
        DeviceType.validateJsonElement(jsonObj.get("DeviceType"));
      }
      // validate the optional field `ImageVersion`
      if (jsonObj.get("ImageVersion") != null && !jsonObj.get("ImageVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageVersion"));
      }
      // validate the optional field `JobId`
      if (jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobId"));
      }
      // validate the optional field `JobType`
      if (jsonObj.get("JobType") != null && !jsonObj.get("JobType").isJsonNull()) {
        JobType.validateJsonElement(jsonObj.get("JobType"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        UpdateProgress.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDeviceJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDeviceJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDeviceJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDeviceJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDeviceJobResponse>() {
           @Override
           public void write(JsonWriter out, DescribeDeviceJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDeviceJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDeviceJobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDeviceJobResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeDeviceJobResponse
   */
  public static DescribeDeviceJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDeviceJobResponse.class);
  }

  /**
   * Convert an instance of DescribeDeviceJobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

