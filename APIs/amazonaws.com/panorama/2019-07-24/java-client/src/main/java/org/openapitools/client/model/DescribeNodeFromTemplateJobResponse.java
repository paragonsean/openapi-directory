/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.NodeFromTemplateJobStatus;
import org.openapitools.client.model.TemplateType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeNodeFromTemplateJobResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeNodeFromTemplateJobResponse {
  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_TAGS = "JobTags";
  @SerializedName(SERIALIZED_NAME_JOB_TAGS)
  private List jobTags;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_NODE_DESCRIPTION = "NodeDescription";
  @SerializedName(SERIALIZED_NAME_NODE_DESCRIPTION)
  private String nodeDescription;

  public static final String SERIALIZED_NAME_NODE_NAME = "NodeName";
  @SerializedName(SERIALIZED_NAME_NODE_NAME)
  private String nodeName;

  public static final String SERIALIZED_NAME_OUTPUT_PACKAGE_NAME = "OutputPackageName";
  @SerializedName(SERIALIZED_NAME_OUTPUT_PACKAGE_NAME)
  private String outputPackageName;

  public static final String SERIALIZED_NAME_OUTPUT_PACKAGE_VERSION = "OutputPackageVersion";
  @SerializedName(SERIALIZED_NAME_OUTPUT_PACKAGE_VERSION)
  private String outputPackageVersion;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private NodeFromTemplateJobStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TEMPLATE_PARAMETERS = "TemplateParameters";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_PARAMETERS)
  private Map templateParameters;

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "TemplateType";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  private TemplateType templateType;

  public DescribeNodeFromTemplateJobResponse() {
  }

  public DescribeNodeFromTemplateJobResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public DescribeNodeFromTemplateJobResponse jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public DescribeNodeFromTemplateJobResponse jobTags(List jobTags) {
    this.jobTags = jobTags;
    return this;
  }

  /**
   * Get jobTags
   * @return jobTags
   */
  @javax.annotation.Nullable
  public List getJobTags() {
    return jobTags;
  }

  public void setJobTags(List jobTags) {
    this.jobTags = jobTags;
  }


  public DescribeNodeFromTemplateJobResponse lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public DescribeNodeFromTemplateJobResponse nodeDescription(String nodeDescription) {
    this.nodeDescription = nodeDescription;
    return this;
  }

  /**
   * Get nodeDescription
   * @return nodeDescription
   */
  @javax.annotation.Nullable
  public String getNodeDescription() {
    return nodeDescription;
  }

  public void setNodeDescription(String nodeDescription) {
    this.nodeDescription = nodeDescription;
  }


  public DescribeNodeFromTemplateJobResponse nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

  /**
   * Get nodeName
   * @return nodeName
   */
  @javax.annotation.Nonnull
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }


  public DescribeNodeFromTemplateJobResponse outputPackageName(String outputPackageName) {
    this.outputPackageName = outputPackageName;
    return this;
  }

  /**
   * Get outputPackageName
   * @return outputPackageName
   */
  @javax.annotation.Nonnull
  public String getOutputPackageName() {
    return outputPackageName;
  }

  public void setOutputPackageName(String outputPackageName) {
    this.outputPackageName = outputPackageName;
  }


  public DescribeNodeFromTemplateJobResponse outputPackageVersion(String outputPackageVersion) {
    this.outputPackageVersion = outputPackageVersion;
    return this;
  }

  /**
   * Get outputPackageVersion
   * @return outputPackageVersion
   */
  @javax.annotation.Nonnull
  public String getOutputPackageVersion() {
    return outputPackageVersion;
  }

  public void setOutputPackageVersion(String outputPackageVersion) {
    this.outputPackageVersion = outputPackageVersion;
  }


  public DescribeNodeFromTemplateJobResponse status(NodeFromTemplateJobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public NodeFromTemplateJobStatus getStatus() {
    return status;
  }

  public void setStatus(NodeFromTemplateJobStatus status) {
    this.status = status;
  }


  public DescribeNodeFromTemplateJobResponse statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nonnull
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public DescribeNodeFromTemplateJobResponse templateParameters(Map templateParameters) {
    this.templateParameters = templateParameters;
    return this;
  }

  /**
   * Get templateParameters
   * @return templateParameters
   */
  @javax.annotation.Nonnull
  public Map getTemplateParameters() {
    return templateParameters;
  }

  public void setTemplateParameters(Map templateParameters) {
    this.templateParameters = templateParameters;
  }


  public DescribeNodeFromTemplateJobResponse templateType(TemplateType templateType) {
    this.templateType = templateType;
    return this;
  }

  /**
   * Get templateType
   * @return templateType
   */
  @javax.annotation.Nonnull
  public TemplateType getTemplateType() {
    return templateType;
  }

  public void setTemplateType(TemplateType templateType) {
    this.templateType = templateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeNodeFromTemplateJobResponse describeNodeFromTemplateJobResponse = (DescribeNodeFromTemplateJobResponse) o;
    return Objects.equals(this.createdTime, describeNodeFromTemplateJobResponse.createdTime) &&
        Objects.equals(this.jobId, describeNodeFromTemplateJobResponse.jobId) &&
        Objects.equals(this.jobTags, describeNodeFromTemplateJobResponse.jobTags) &&
        Objects.equals(this.lastUpdatedTime, describeNodeFromTemplateJobResponse.lastUpdatedTime) &&
        Objects.equals(this.nodeDescription, describeNodeFromTemplateJobResponse.nodeDescription) &&
        Objects.equals(this.nodeName, describeNodeFromTemplateJobResponse.nodeName) &&
        Objects.equals(this.outputPackageName, describeNodeFromTemplateJobResponse.outputPackageName) &&
        Objects.equals(this.outputPackageVersion, describeNodeFromTemplateJobResponse.outputPackageVersion) &&
        Objects.equals(this.status, describeNodeFromTemplateJobResponse.status) &&
        Objects.equals(this.statusMessage, describeNodeFromTemplateJobResponse.statusMessage) &&
        Objects.equals(this.templateParameters, describeNodeFromTemplateJobResponse.templateParameters) &&
        Objects.equals(this.templateType, describeNodeFromTemplateJobResponse.templateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdTime, jobId, jobTags, lastUpdatedTime, nodeDescription, nodeName, outputPackageName, outputPackageVersion, status, statusMessage, templateParameters, templateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeNodeFromTemplateJobResponse {\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobTags: ").append(toIndentedString(jobTags)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    nodeDescription: ").append(toIndentedString(nodeDescription)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    outputPackageName: ").append(toIndentedString(outputPackageName)).append("\n");
    sb.append("    outputPackageVersion: ").append(toIndentedString(outputPackageVersion)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    templateParameters: ").append(toIndentedString(templateParameters)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreatedTime");
    openapiFields.add("JobId");
    openapiFields.add("JobTags");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("NodeDescription");
    openapiFields.add("NodeName");
    openapiFields.add("OutputPackageName");
    openapiFields.add("OutputPackageVersion");
    openapiFields.add("Status");
    openapiFields.add("StatusMessage");
    openapiFields.add("TemplateParameters");
    openapiFields.add("TemplateType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CreatedTime");
    openapiRequiredFields.add("JobId");
    openapiRequiredFields.add("LastUpdatedTime");
    openapiRequiredFields.add("NodeName");
    openapiRequiredFields.add("OutputPackageName");
    openapiRequiredFields.add("OutputPackageVersion");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("StatusMessage");
    openapiRequiredFields.add("TemplateParameters");
    openapiRequiredFields.add("TemplateType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeNodeFromTemplateJobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeNodeFromTemplateJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeNodeFromTemplateJobResponse is not found in the empty JSON string", DescribeNodeFromTemplateJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeNodeFromTemplateJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeNodeFromTemplateJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeNodeFromTemplateJobResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CreatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      // validate the required field `JobId`
      String.validateJsonElement(jsonObj.get("JobId"));
      // validate the optional field `JobTags`
      if (jsonObj.get("JobTags") != null && !jsonObj.get("JobTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("JobTags"));
      }
      // validate the required field `LastUpdatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      // validate the optional field `NodeDescription`
      if (jsonObj.get("NodeDescription") != null && !jsonObj.get("NodeDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodeDescription"));
      }
      // validate the required field `NodeName`
      String.validateJsonElement(jsonObj.get("NodeName"));
      // validate the required field `OutputPackageName`
      String.validateJsonElement(jsonObj.get("OutputPackageName"));
      // validate the required field `OutputPackageVersion`
      String.validateJsonElement(jsonObj.get("OutputPackageVersion"));
      // validate the required field `Status`
      NodeFromTemplateJobStatus.validateJsonElement(jsonObj.get("Status"));
      // validate the required field `StatusMessage`
      String.validateJsonElement(jsonObj.get("StatusMessage"));
      // validate the required field `TemplateParameters`
      Map.validateJsonElement(jsonObj.get("TemplateParameters"));
      // validate the required field `TemplateType`
      TemplateType.validateJsonElement(jsonObj.get("TemplateType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeNodeFromTemplateJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeNodeFromTemplateJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeNodeFromTemplateJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeNodeFromTemplateJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeNodeFromTemplateJobResponse>() {
           @Override
           public void write(JsonWriter out, DescribeNodeFromTemplateJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeNodeFromTemplateJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeNodeFromTemplateJobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeNodeFromTemplateJobResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeNodeFromTemplateJobResponse
   */
  public static DescribeNodeFromTemplateJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeNodeFromTemplateJobResponse.class);
  }

  /**
   * Convert an instance of DescribeNodeFromTemplateJobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

