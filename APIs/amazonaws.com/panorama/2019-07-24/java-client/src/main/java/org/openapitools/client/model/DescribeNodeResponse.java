/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DescribeNodeResponseNodeInterface;
import org.openapitools.client.model.NodeCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeNodeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeNodeResponse {
  public static final String SERIALIZED_NAME_ASSET_NAME = "AssetName";
  @SerializedName(SERIALIZED_NAME_ASSET_NAME)
  private String assetName;

  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private NodeCategory category;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "NodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NODE_INTERFACE = "NodeInterface";
  @SerializedName(SERIALIZED_NAME_NODE_INTERFACE)
  private DescribeNodeResponseNodeInterface nodeInterface;

  public static final String SERIALIZED_NAME_OWNER_ACCOUNT = "OwnerAccount";
  @SerializedName(SERIALIZED_NAME_OWNER_ACCOUNT)
  private String ownerAccount;

  public static final String SERIALIZED_NAME_PACKAGE_ARN = "PackageArn";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ARN)
  private String packageArn;

  public static final String SERIALIZED_NAME_PACKAGE_ID = "PackageId";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
  private String packageId;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "PackageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PACKAGE_VERSION = "PackageVersion";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VERSION)
  private String packageVersion;

  public static final String SERIALIZED_NAME_PATCH_VERSION = "PatchVersion";
  @SerializedName(SERIALIZED_NAME_PATCH_VERSION)
  private String patchVersion;

  public DescribeNodeResponse() {
  }

  public DescribeNodeResponse assetName(String assetName) {
    this.assetName = assetName;
    return this;
  }

  /**
   * Get assetName
   * @return assetName
   */
  @javax.annotation.Nullable
  public String getAssetName() {
    return assetName;
  }

  public void setAssetName(String assetName) {
    this.assetName = assetName;
  }


  public DescribeNodeResponse category(NodeCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nonnull
  public NodeCategory getCategory() {
    return category;
  }

  public void setCategory(NodeCategory category) {
    this.category = category;
  }


  public DescribeNodeResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public DescribeNodeResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeNodeResponse lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public DescribeNodeResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeNodeResponse nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public DescribeNodeResponse nodeInterface(DescribeNodeResponseNodeInterface nodeInterface) {
    this.nodeInterface = nodeInterface;
    return this;
  }

  /**
   * Get nodeInterface
   * @return nodeInterface
   */
  @javax.annotation.Nonnull
  public DescribeNodeResponseNodeInterface getNodeInterface() {
    return nodeInterface;
  }

  public void setNodeInterface(DescribeNodeResponseNodeInterface nodeInterface) {
    this.nodeInterface = nodeInterface;
  }


  public DescribeNodeResponse ownerAccount(String ownerAccount) {
    this.ownerAccount = ownerAccount;
    return this;
  }

  /**
   * Get ownerAccount
   * @return ownerAccount
   */
  @javax.annotation.Nonnull
  public String getOwnerAccount() {
    return ownerAccount;
  }

  public void setOwnerAccount(String ownerAccount) {
    this.ownerAccount = ownerAccount;
  }


  public DescribeNodeResponse packageArn(String packageArn) {
    this.packageArn = packageArn;
    return this;
  }

  /**
   * Get packageArn
   * @return packageArn
   */
  @javax.annotation.Nullable
  public String getPackageArn() {
    return packageArn;
  }

  public void setPackageArn(String packageArn) {
    this.packageArn = packageArn;
  }


  public DescribeNodeResponse packageId(String packageId) {
    this.packageId = packageId;
    return this;
  }

  /**
   * Get packageId
   * @return packageId
   */
  @javax.annotation.Nonnull
  public String getPackageId() {
    return packageId;
  }

  public void setPackageId(String packageId) {
    this.packageId = packageId;
  }


  public DescribeNodeResponse packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Get packageName
   * @return packageName
   */
  @javax.annotation.Nonnull
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public DescribeNodeResponse packageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
    return this;
  }

  /**
   * Get packageVersion
   * @return packageVersion
   */
  @javax.annotation.Nonnull
  public String getPackageVersion() {
    return packageVersion;
  }

  public void setPackageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
  }


  public DescribeNodeResponse patchVersion(String patchVersion) {
    this.patchVersion = patchVersion;
    return this;
  }

  /**
   * Get patchVersion
   * @return patchVersion
   */
  @javax.annotation.Nonnull
  public String getPatchVersion() {
    return patchVersion;
  }

  public void setPatchVersion(String patchVersion) {
    this.patchVersion = patchVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeNodeResponse describeNodeResponse = (DescribeNodeResponse) o;
    return Objects.equals(this.assetName, describeNodeResponse.assetName) &&
        Objects.equals(this.category, describeNodeResponse.category) &&
        Objects.equals(this.createdTime, describeNodeResponse.createdTime) &&
        Objects.equals(this.description, describeNodeResponse.description) &&
        Objects.equals(this.lastUpdatedTime, describeNodeResponse.lastUpdatedTime) &&
        Objects.equals(this.name, describeNodeResponse.name) &&
        Objects.equals(this.nodeId, describeNodeResponse.nodeId) &&
        Objects.equals(this.nodeInterface, describeNodeResponse.nodeInterface) &&
        Objects.equals(this.ownerAccount, describeNodeResponse.ownerAccount) &&
        Objects.equals(this.packageArn, describeNodeResponse.packageArn) &&
        Objects.equals(this.packageId, describeNodeResponse.packageId) &&
        Objects.equals(this.packageName, describeNodeResponse.packageName) &&
        Objects.equals(this.packageVersion, describeNodeResponse.packageVersion) &&
        Objects.equals(this.patchVersion, describeNodeResponse.patchVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetName, category, createdTime, description, lastUpdatedTime, name, nodeId, nodeInterface, ownerAccount, packageArn, packageId, packageName, packageVersion, patchVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeNodeResponse {\n");
    sb.append("    assetName: ").append(toIndentedString(assetName)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeInterface: ").append(toIndentedString(nodeInterface)).append("\n");
    sb.append("    ownerAccount: ").append(toIndentedString(ownerAccount)).append("\n");
    sb.append("    packageArn: ").append(toIndentedString(packageArn)).append("\n");
    sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    packageVersion: ").append(toIndentedString(packageVersion)).append("\n");
    sb.append("    patchVersion: ").append(toIndentedString(patchVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssetName");
    openapiFields.add("Category");
    openapiFields.add("CreatedTime");
    openapiFields.add("Description");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("Name");
    openapiFields.add("NodeId");
    openapiFields.add("NodeInterface");
    openapiFields.add("OwnerAccount");
    openapiFields.add("PackageArn");
    openapiFields.add("PackageId");
    openapiFields.add("PackageName");
    openapiFields.add("PackageVersion");
    openapiFields.add("PatchVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Category");
    openapiRequiredFields.add("CreatedTime");
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("LastUpdatedTime");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("NodeId");
    openapiRequiredFields.add("NodeInterface");
    openapiRequiredFields.add("OwnerAccount");
    openapiRequiredFields.add("PackageId");
    openapiRequiredFields.add("PackageName");
    openapiRequiredFields.add("PackageVersion");
    openapiRequiredFields.add("PatchVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeNodeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeNodeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeNodeResponse is not found in the empty JSON string", DescribeNodeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeNodeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeNodeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeNodeResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AssetName`
      if (jsonObj.get("AssetName") != null && !jsonObj.get("AssetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AssetName"));
      }
      // validate the required field `Category`
      NodeCategory.validateJsonElement(jsonObj.get("Category"));
      // validate the required field `CreatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      // validate the required field `Description`
      String.validateJsonElement(jsonObj.get("Description"));
      // validate the required field `LastUpdatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `NodeId`
      String.validateJsonElement(jsonObj.get("NodeId"));
      // validate the required field `NodeInterface`
      DescribeNodeResponseNodeInterface.validateJsonElement(jsonObj.get("NodeInterface"));
      // validate the required field `OwnerAccount`
      String.validateJsonElement(jsonObj.get("OwnerAccount"));
      // validate the optional field `PackageArn`
      if (jsonObj.get("PackageArn") != null && !jsonObj.get("PackageArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageArn"));
      }
      // validate the required field `PackageId`
      String.validateJsonElement(jsonObj.get("PackageId"));
      // validate the required field `PackageName`
      String.validateJsonElement(jsonObj.get("PackageName"));
      // validate the required field `PackageVersion`
      String.validateJsonElement(jsonObj.get("PackageVersion"));
      // validate the required field `PatchVersion`
      String.validateJsonElement(jsonObj.get("PatchVersion"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeNodeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeNodeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeNodeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeNodeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeNodeResponse>() {
           @Override
           public void write(JsonWriter out, DescribeNodeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeNodeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeNodeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeNodeResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeNodeResponse
   */
  public static DescribeNodeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeNodeResponse.class);
  }

  /**
   * Convert an instance of DescribeNodeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

