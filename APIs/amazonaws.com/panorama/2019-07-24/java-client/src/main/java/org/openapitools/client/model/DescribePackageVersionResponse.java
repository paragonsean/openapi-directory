/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PackageVersionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribePackageVersionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribePackageVersionResponse {
  public static final String SERIALIZED_NAME_IS_LATEST_PATCH = "IsLatestPatch";
  @SerializedName(SERIALIZED_NAME_IS_LATEST_PATCH)
  private Boolean isLatestPatch;

  public static final String SERIALIZED_NAME_OWNER_ACCOUNT = "OwnerAccount";
  @SerializedName(SERIALIZED_NAME_OWNER_ACCOUNT)
  private String ownerAccount;

  public static final String SERIALIZED_NAME_PACKAGE_ARN = "PackageArn";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ARN)
  private String packageArn;

  public static final String SERIALIZED_NAME_PACKAGE_ID = "PackageId";
  @SerializedName(SERIALIZED_NAME_PACKAGE_ID)
  private String packageId;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "PackageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PACKAGE_VERSION = "PackageVersion";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VERSION)
  private String packageVersion;

  public static final String SERIALIZED_NAME_PATCH_VERSION = "PatchVersion";
  @SerializedName(SERIALIZED_NAME_PATCH_VERSION)
  private String patchVersion;

  public static final String SERIALIZED_NAME_REGISTERED_TIME = "RegisteredTime";
  @SerializedName(SERIALIZED_NAME_REGISTERED_TIME)
  private OffsetDateTime registeredTime;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PackageVersionStatus status;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "StatusDescription";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public DescribePackageVersionResponse() {
  }

  public DescribePackageVersionResponse isLatestPatch(Boolean isLatestPatch) {
    this.isLatestPatch = isLatestPatch;
    return this;
  }

  /**
   * Get isLatestPatch
   * @return isLatestPatch
   */
  @javax.annotation.Nonnull
  public Boolean getIsLatestPatch() {
    return isLatestPatch;
  }

  public void setIsLatestPatch(Boolean isLatestPatch) {
    this.isLatestPatch = isLatestPatch;
  }


  public DescribePackageVersionResponse ownerAccount(String ownerAccount) {
    this.ownerAccount = ownerAccount;
    return this;
  }

  /**
   * Get ownerAccount
   * @return ownerAccount
   */
  @javax.annotation.Nullable
  public String getOwnerAccount() {
    return ownerAccount;
  }

  public void setOwnerAccount(String ownerAccount) {
    this.ownerAccount = ownerAccount;
  }


  public DescribePackageVersionResponse packageArn(String packageArn) {
    this.packageArn = packageArn;
    return this;
  }

  /**
   * Get packageArn
   * @return packageArn
   */
  @javax.annotation.Nullable
  public String getPackageArn() {
    return packageArn;
  }

  public void setPackageArn(String packageArn) {
    this.packageArn = packageArn;
  }


  public DescribePackageVersionResponse packageId(String packageId) {
    this.packageId = packageId;
    return this;
  }

  /**
   * Get packageId
   * @return packageId
   */
  @javax.annotation.Nonnull
  public String getPackageId() {
    return packageId;
  }

  public void setPackageId(String packageId) {
    this.packageId = packageId;
  }


  public DescribePackageVersionResponse packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Get packageName
   * @return packageName
   */
  @javax.annotation.Nonnull
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public DescribePackageVersionResponse packageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
    return this;
  }

  /**
   * Get packageVersion
   * @return packageVersion
   */
  @javax.annotation.Nonnull
  public String getPackageVersion() {
    return packageVersion;
  }

  public void setPackageVersion(String packageVersion) {
    this.packageVersion = packageVersion;
  }


  public DescribePackageVersionResponse patchVersion(String patchVersion) {
    this.patchVersion = patchVersion;
    return this;
  }

  /**
   * Get patchVersion
   * @return patchVersion
   */
  @javax.annotation.Nonnull
  public String getPatchVersion() {
    return patchVersion;
  }

  public void setPatchVersion(String patchVersion) {
    this.patchVersion = patchVersion;
  }


  public DescribePackageVersionResponse registeredTime(OffsetDateTime registeredTime) {
    this.registeredTime = registeredTime;
    return this;
  }

  /**
   * Get registeredTime
   * @return registeredTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRegisteredTime() {
    return registeredTime;
  }

  public void setRegisteredTime(OffsetDateTime registeredTime) {
    this.registeredTime = registeredTime;
  }


  public DescribePackageVersionResponse status(PackageVersionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public PackageVersionStatus getStatus() {
    return status;
  }

  public void setStatus(PackageVersionStatus status) {
    this.status = status;
  }


  public DescribePackageVersionResponse statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

  /**
   * Get statusDescription
   * @return statusDescription
   */
  @javax.annotation.Nullable
  public String getStatusDescription() {
    return statusDescription;
  }

  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribePackageVersionResponse describePackageVersionResponse = (DescribePackageVersionResponse) o;
    return Objects.equals(this.isLatestPatch, describePackageVersionResponse.isLatestPatch) &&
        Objects.equals(this.ownerAccount, describePackageVersionResponse.ownerAccount) &&
        Objects.equals(this.packageArn, describePackageVersionResponse.packageArn) &&
        Objects.equals(this.packageId, describePackageVersionResponse.packageId) &&
        Objects.equals(this.packageName, describePackageVersionResponse.packageName) &&
        Objects.equals(this.packageVersion, describePackageVersionResponse.packageVersion) &&
        Objects.equals(this.patchVersion, describePackageVersionResponse.patchVersion) &&
        Objects.equals(this.registeredTime, describePackageVersionResponse.registeredTime) &&
        Objects.equals(this.status, describePackageVersionResponse.status) &&
        Objects.equals(this.statusDescription, describePackageVersionResponse.statusDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isLatestPatch, ownerAccount, packageArn, packageId, packageName, packageVersion, patchVersion, registeredTime, status, statusDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribePackageVersionResponse {\n");
    sb.append("    isLatestPatch: ").append(toIndentedString(isLatestPatch)).append("\n");
    sb.append("    ownerAccount: ").append(toIndentedString(ownerAccount)).append("\n");
    sb.append("    packageArn: ").append(toIndentedString(packageArn)).append("\n");
    sb.append("    packageId: ").append(toIndentedString(packageId)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    packageVersion: ").append(toIndentedString(packageVersion)).append("\n");
    sb.append("    patchVersion: ").append(toIndentedString(patchVersion)).append("\n");
    sb.append("    registeredTime: ").append(toIndentedString(registeredTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("IsLatestPatch");
    openapiFields.add("OwnerAccount");
    openapiFields.add("PackageArn");
    openapiFields.add("PackageId");
    openapiFields.add("PackageName");
    openapiFields.add("PackageVersion");
    openapiFields.add("PatchVersion");
    openapiFields.add("RegisteredTime");
    openapiFields.add("Status");
    openapiFields.add("StatusDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("IsLatestPatch");
    openapiRequiredFields.add("PackageId");
    openapiRequiredFields.add("PackageName");
    openapiRequiredFields.add("PackageVersion");
    openapiRequiredFields.add("PatchVersion");
    openapiRequiredFields.add("Status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribePackageVersionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribePackageVersionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribePackageVersionResponse is not found in the empty JSON string", DescribePackageVersionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribePackageVersionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribePackageVersionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribePackageVersionResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `IsLatestPatch`
      Boolean.validateJsonElement(jsonObj.get("IsLatestPatch"));
      // validate the optional field `OwnerAccount`
      if (jsonObj.get("OwnerAccount") != null && !jsonObj.get("OwnerAccount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerAccount"));
      }
      // validate the optional field `PackageArn`
      if (jsonObj.get("PackageArn") != null && !jsonObj.get("PackageArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageArn"));
      }
      // validate the required field `PackageId`
      String.validateJsonElement(jsonObj.get("PackageId"));
      // validate the required field `PackageName`
      String.validateJsonElement(jsonObj.get("PackageName"));
      // validate the required field `PackageVersion`
      String.validateJsonElement(jsonObj.get("PackageVersion"));
      // validate the required field `PatchVersion`
      String.validateJsonElement(jsonObj.get("PatchVersion"));
      // validate the optional field `RegisteredTime`
      if (jsonObj.get("RegisteredTime") != null && !jsonObj.get("RegisteredTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RegisteredTime"));
      }
      // validate the required field `Status`
      PackageVersionStatus.validateJsonElement(jsonObj.get("Status"));
      // validate the optional field `StatusDescription`
      if (jsonObj.get("StatusDescription") != null && !jsonObj.get("StatusDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribePackageVersionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribePackageVersionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribePackageVersionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribePackageVersionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribePackageVersionResponse>() {
           @Override
           public void write(JsonWriter out, DescribePackageVersionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribePackageVersionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribePackageVersionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribePackageVersionResponse
   * @throws IOException if the JSON string is invalid with respect to DescribePackageVersionResponse
   */
  public static DescribePackageVersionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribePackageVersionResponse.class);
  }

  /**
   * Convert an instance of DescribePackageVersionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

