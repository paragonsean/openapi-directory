/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.NetworkStatusEthernet0Status;
import org.openapitools.client.model.NetworkStatusEthernet1Status;
import org.openapitools.client.model.NetworkStatusNtpStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDeviceResponseCurrentNetworkingStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDeviceResponseCurrentNetworkingStatus {
  public static final String SERIALIZED_NAME_ETHERNET0_STATUS = "Ethernet0Status";
  @SerializedName(SERIALIZED_NAME_ETHERNET0_STATUS)
  private NetworkStatusEthernet0Status ethernet0Status;

  public static final String SERIALIZED_NAME_ETHERNET1_STATUS = "Ethernet1Status";
  @SerializedName(SERIALIZED_NAME_ETHERNET1_STATUS)
  private NetworkStatusEthernet1Status ethernet1Status;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_NTP_STATUS = "NtpStatus";
  @SerializedName(SERIALIZED_NAME_NTP_STATUS)
  private NetworkStatusNtpStatus ntpStatus;

  public DescribeDeviceResponseCurrentNetworkingStatus() {
  }

  public DescribeDeviceResponseCurrentNetworkingStatus ethernet0Status(NetworkStatusEthernet0Status ethernet0Status) {
    this.ethernet0Status = ethernet0Status;
    return this;
  }

  /**
   * Get ethernet0Status
   * @return ethernet0Status
   */
  @javax.annotation.Nullable
  public NetworkStatusEthernet0Status getEthernet0Status() {
    return ethernet0Status;
  }

  public void setEthernet0Status(NetworkStatusEthernet0Status ethernet0Status) {
    this.ethernet0Status = ethernet0Status;
  }


  public DescribeDeviceResponseCurrentNetworkingStatus ethernet1Status(NetworkStatusEthernet1Status ethernet1Status) {
    this.ethernet1Status = ethernet1Status;
    return this;
  }

  /**
   * Get ethernet1Status
   * @return ethernet1Status
   */
  @javax.annotation.Nullable
  public NetworkStatusEthernet1Status getEthernet1Status() {
    return ethernet1Status;
  }

  public void setEthernet1Status(NetworkStatusEthernet1Status ethernet1Status) {
    this.ethernet1Status = ethernet1Status;
  }


  public DescribeDeviceResponseCurrentNetworkingStatus lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public DescribeDeviceResponseCurrentNetworkingStatus ntpStatus(NetworkStatusNtpStatus ntpStatus) {
    this.ntpStatus = ntpStatus;
    return this;
  }

  /**
   * Get ntpStatus
   * @return ntpStatus
   */
  @javax.annotation.Nullable
  public NetworkStatusNtpStatus getNtpStatus() {
    return ntpStatus;
  }

  public void setNtpStatus(NetworkStatusNtpStatus ntpStatus) {
    this.ntpStatus = ntpStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDeviceResponseCurrentNetworkingStatus describeDeviceResponseCurrentNetworkingStatus = (DescribeDeviceResponseCurrentNetworkingStatus) o;
    return Objects.equals(this.ethernet0Status, describeDeviceResponseCurrentNetworkingStatus.ethernet0Status) &&
        Objects.equals(this.ethernet1Status, describeDeviceResponseCurrentNetworkingStatus.ethernet1Status) &&
        Objects.equals(this.lastUpdatedTime, describeDeviceResponseCurrentNetworkingStatus.lastUpdatedTime) &&
        Objects.equals(this.ntpStatus, describeDeviceResponseCurrentNetworkingStatus.ntpStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ethernet0Status, ethernet1Status, lastUpdatedTime, ntpStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDeviceResponseCurrentNetworkingStatus {\n");
    sb.append("    ethernet0Status: ").append(toIndentedString(ethernet0Status)).append("\n");
    sb.append("    ethernet1Status: ").append(toIndentedString(ethernet1Status)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    ntpStatus: ").append(toIndentedString(ntpStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Ethernet0Status");
    openapiFields.add("Ethernet1Status");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("NtpStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDeviceResponseCurrentNetworkingStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDeviceResponseCurrentNetworkingStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDeviceResponseCurrentNetworkingStatus is not found in the empty JSON string", DescribeDeviceResponseCurrentNetworkingStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDeviceResponseCurrentNetworkingStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDeviceResponseCurrentNetworkingStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Ethernet0Status`
      if (jsonObj.get("Ethernet0Status") != null && !jsonObj.get("Ethernet0Status").isJsonNull()) {
        NetworkStatusEthernet0Status.validateJsonElement(jsonObj.get("Ethernet0Status"));
      }
      // validate the optional field `Ethernet1Status`
      if (jsonObj.get("Ethernet1Status") != null && !jsonObj.get("Ethernet1Status").isJsonNull()) {
        NetworkStatusEthernet1Status.validateJsonElement(jsonObj.get("Ethernet1Status"));
      }
      // validate the optional field `LastUpdatedTime`
      if (jsonObj.get("LastUpdatedTime") != null && !jsonObj.get("LastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      }
      // validate the optional field `NtpStatus`
      if (jsonObj.get("NtpStatus") != null && !jsonObj.get("NtpStatus").isJsonNull()) {
        NetworkStatusNtpStatus.validateJsonElement(jsonObj.get("NtpStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDeviceResponseCurrentNetworkingStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDeviceResponseCurrentNetworkingStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDeviceResponseCurrentNetworkingStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDeviceResponseCurrentNetworkingStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDeviceResponseCurrentNetworkingStatus>() {
           @Override
           public void write(JsonWriter out, DescribeDeviceResponseCurrentNetworkingStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDeviceResponseCurrentNetworkingStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDeviceResponseCurrentNetworkingStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDeviceResponseCurrentNetworkingStatus
   * @throws IOException if the JSON string is invalid with respect to DescribeDeviceResponseCurrentNetworkingStatus
   */
  public static DescribeDeviceResponseCurrentNetworkingStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDeviceResponseCurrentNetworkingStatus.class);
  }

  /**
   * Convert an instance of DescribeDeviceResponseCurrentNetworkingStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

