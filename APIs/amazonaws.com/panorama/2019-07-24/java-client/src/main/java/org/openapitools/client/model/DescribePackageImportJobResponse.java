/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DescribePackageImportJobResponseInputConfig;
import org.openapitools.client.model.DescribePackageImportJobResponseOutput;
import org.openapitools.client.model.DescribePackageImportJobResponseOutputConfig;
import org.openapitools.client.model.PackageImportJobStatus;
import org.openapitools.client.model.PackageImportJobType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribePackageImportJobResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribePackageImportJobResponse {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_INPUT_CONFIG = "InputConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIG)
  private DescribePackageImportJobResponseInputConfig inputConfig;

  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_TAGS = "JobTags";
  @SerializedName(SERIALIZED_NAME_JOB_TAGS)
  private List jobTags;

  public static final String SERIALIZED_NAME_JOB_TYPE = "JobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private PackageImportJobType jobType;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "LastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_OUTPUT = "Output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private DescribePackageImportJobResponseOutput output;

  public static final String SERIALIZED_NAME_OUTPUT_CONFIG = "OutputConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONFIG)
  private DescribePackageImportJobResponseOutputConfig outputConfig;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PackageImportJobStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public DescribePackageImportJobResponse() {
  }

  public DescribePackageImportJobResponse clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public DescribePackageImportJobResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public DescribePackageImportJobResponse inputConfig(DescribePackageImportJobResponseInputConfig inputConfig) {
    this.inputConfig = inputConfig;
    return this;
  }

  /**
   * Get inputConfig
   * @return inputConfig
   */
  @javax.annotation.Nonnull
  public DescribePackageImportJobResponseInputConfig getInputConfig() {
    return inputConfig;
  }

  public void setInputConfig(DescribePackageImportJobResponseInputConfig inputConfig) {
    this.inputConfig = inputConfig;
  }


  public DescribePackageImportJobResponse jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public DescribePackageImportJobResponse jobTags(List jobTags) {
    this.jobTags = jobTags;
    return this;
  }

  /**
   * Get jobTags
   * @return jobTags
   */
  @javax.annotation.Nullable
  public List getJobTags() {
    return jobTags;
  }

  public void setJobTags(List jobTags) {
    this.jobTags = jobTags;
  }


  public DescribePackageImportJobResponse jobType(PackageImportJobType jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * Get jobType
   * @return jobType
   */
  @javax.annotation.Nonnull
  public PackageImportJobType getJobType() {
    return jobType;
  }

  public void setJobType(PackageImportJobType jobType) {
    this.jobType = jobType;
  }


  public DescribePackageImportJobResponse lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public DescribePackageImportJobResponse output(DescribePackageImportJobResponseOutput output) {
    this.output = output;
    return this;
  }

  /**
   * Get output
   * @return output
   */
  @javax.annotation.Nonnull
  public DescribePackageImportJobResponseOutput getOutput() {
    return output;
  }

  public void setOutput(DescribePackageImportJobResponseOutput output) {
    this.output = output;
  }


  public DescribePackageImportJobResponse outputConfig(DescribePackageImportJobResponseOutputConfig outputConfig) {
    this.outputConfig = outputConfig;
    return this;
  }

  /**
   * Get outputConfig
   * @return outputConfig
   */
  @javax.annotation.Nonnull
  public DescribePackageImportJobResponseOutputConfig getOutputConfig() {
    return outputConfig;
  }

  public void setOutputConfig(DescribePackageImportJobResponseOutputConfig outputConfig) {
    this.outputConfig = outputConfig;
  }


  public DescribePackageImportJobResponse status(PackageImportJobStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public PackageImportJobStatus getStatus() {
    return status;
  }

  public void setStatus(PackageImportJobStatus status) {
    this.status = status;
  }


  public DescribePackageImportJobResponse statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nonnull
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribePackageImportJobResponse describePackageImportJobResponse = (DescribePackageImportJobResponse) o;
    return Objects.equals(this.clientToken, describePackageImportJobResponse.clientToken) &&
        Objects.equals(this.createdTime, describePackageImportJobResponse.createdTime) &&
        Objects.equals(this.inputConfig, describePackageImportJobResponse.inputConfig) &&
        Objects.equals(this.jobId, describePackageImportJobResponse.jobId) &&
        Objects.equals(this.jobTags, describePackageImportJobResponse.jobTags) &&
        Objects.equals(this.jobType, describePackageImportJobResponse.jobType) &&
        Objects.equals(this.lastUpdatedTime, describePackageImportJobResponse.lastUpdatedTime) &&
        Objects.equals(this.output, describePackageImportJobResponse.output) &&
        Objects.equals(this.outputConfig, describePackageImportJobResponse.outputConfig) &&
        Objects.equals(this.status, describePackageImportJobResponse.status) &&
        Objects.equals(this.statusMessage, describePackageImportJobResponse.statusMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, createdTime, inputConfig, jobId, jobTags, jobType, lastUpdatedTime, output, outputConfig, status, statusMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribePackageImportJobResponse {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    inputConfig: ").append(toIndentedString(inputConfig)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobTags: ").append(toIndentedString(jobTags)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("    outputConfig: ").append(toIndentedString(outputConfig)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("CreatedTime");
    openapiFields.add("InputConfig");
    openapiFields.add("JobId");
    openapiFields.add("JobTags");
    openapiFields.add("JobType");
    openapiFields.add("LastUpdatedTime");
    openapiFields.add("Output");
    openapiFields.add("OutputConfig");
    openapiFields.add("Status");
    openapiFields.add("StatusMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CreatedTime");
    openapiRequiredFields.add("InputConfig");
    openapiRequiredFields.add("JobId");
    openapiRequiredFields.add("JobType");
    openapiRequiredFields.add("LastUpdatedTime");
    openapiRequiredFields.add("Output");
    openapiRequiredFields.add("OutputConfig");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("StatusMessage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribePackageImportJobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribePackageImportJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribePackageImportJobResponse is not found in the empty JSON string", DescribePackageImportJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribePackageImportJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribePackageImportJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribePackageImportJobResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClientToken`
      if (jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientToken"));
      }
      // validate the required field `CreatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      // validate the required field `InputConfig`
      DescribePackageImportJobResponseInputConfig.validateJsonElement(jsonObj.get("InputConfig"));
      // validate the required field `JobId`
      String.validateJsonElement(jsonObj.get("JobId"));
      // validate the optional field `JobTags`
      if (jsonObj.get("JobTags") != null && !jsonObj.get("JobTags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("JobTags"));
      }
      // validate the required field `JobType`
      PackageImportJobType.validateJsonElement(jsonObj.get("JobType"));
      // validate the required field `LastUpdatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTime"));
      // validate the required field `Output`
      DescribePackageImportJobResponseOutput.validateJsonElement(jsonObj.get("Output"));
      // validate the required field `OutputConfig`
      DescribePackageImportJobResponseOutputConfig.validateJsonElement(jsonObj.get("OutputConfig"));
      // validate the required field `Status`
      PackageImportJobStatus.validateJsonElement(jsonObj.get("Status"));
      // validate the required field `StatusMessage`
      String.validateJsonElement(jsonObj.get("StatusMessage"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribePackageImportJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribePackageImportJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribePackageImportJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribePackageImportJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribePackageImportJobResponse>() {
           @Override
           public void write(JsonWriter out, DescribePackageImportJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribePackageImportJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribePackageImportJobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribePackageImportJobResponse
   * @throws IOException if the JSON string is invalid with respect to DescribePackageImportJobResponse
   */
  public static DescribePackageImportJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribePackageImportJobResponse.class);
  }

  /**
   * Convert an instance of DescribePackageImportJobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

