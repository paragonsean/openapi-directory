/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePackageImportJobRequestInputConfig;
import org.openapitools.client.model.CreatePackageImportJobRequestOutputConfig;
import org.openapitools.client.model.JobResourceTags;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreatePackageImportJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreatePackageImportJobRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_INPUT_CONFIG = "InputConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIG)
  private CreatePackageImportJobRequestInputConfig inputConfig;

  public static final String SERIALIZED_NAME_JOB_TAGS = "JobTags";
  @SerializedName(SERIALIZED_NAME_JOB_TAGS)
  private List<JobResourceTags> jobTags = new ArrayList<>();

  /**
   * A job type for the package import job.
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    NODE_PACKAGE_VERSION("NODE_PACKAGE_VERSION"),
    
    MARKETPLACE_NODE_PACKAGE_VERSION("MARKETPLACE_NODE_PACKAGE_VERSION");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobTypeEnum fromValue(String value) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_TYPE = "JobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private JobTypeEnum jobType;

  public static final String SERIALIZED_NAME_OUTPUT_CONFIG = "OutputConfig";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONFIG)
  private CreatePackageImportJobRequestOutputConfig outputConfig;

  public CreatePackageImportJobRequest() {
  }

  public CreatePackageImportJobRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A client token for the package import job.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreatePackageImportJobRequest inputConfig(CreatePackageImportJobRequestInputConfig inputConfig) {
    this.inputConfig = inputConfig;
    return this;
  }

  /**
   * Get inputConfig
   * @return inputConfig
   */
  @javax.annotation.Nonnull
  public CreatePackageImportJobRequestInputConfig getInputConfig() {
    return inputConfig;
  }

  public void setInputConfig(CreatePackageImportJobRequestInputConfig inputConfig) {
    this.inputConfig = inputConfig;
  }


  public CreatePackageImportJobRequest jobTags(List<JobResourceTags> jobTags) {
    this.jobTags = jobTags;
    return this;
  }

  public CreatePackageImportJobRequest addJobTagsItem(JobResourceTags jobTagsItem) {
    if (this.jobTags == null) {
      this.jobTags = new ArrayList<>();
    }
    this.jobTags.add(jobTagsItem);
    return this;
  }

  /**
   * Tags for the package import job.
   * @return jobTags
   */
  @javax.annotation.Nullable
  public List<JobResourceTags> getJobTags() {
    return jobTags;
  }

  public void setJobTags(List<JobResourceTags> jobTags) {
    this.jobTags = jobTags;
  }


  public CreatePackageImportJobRequest jobType(JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * A job type for the package import job.
   * @return jobType
   */
  @javax.annotation.Nonnull
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }


  public CreatePackageImportJobRequest outputConfig(CreatePackageImportJobRequestOutputConfig outputConfig) {
    this.outputConfig = outputConfig;
    return this;
  }

  /**
   * Get outputConfig
   * @return outputConfig
   */
  @javax.annotation.Nonnull
  public CreatePackageImportJobRequestOutputConfig getOutputConfig() {
    return outputConfig;
  }

  public void setOutputConfig(CreatePackageImportJobRequestOutputConfig outputConfig) {
    this.outputConfig = outputConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePackageImportJobRequest createPackageImportJobRequest = (CreatePackageImportJobRequest) o;
    return Objects.equals(this.clientToken, createPackageImportJobRequest.clientToken) &&
        Objects.equals(this.inputConfig, createPackageImportJobRequest.inputConfig) &&
        Objects.equals(this.jobTags, createPackageImportJobRequest.jobTags) &&
        Objects.equals(this.jobType, createPackageImportJobRequest.jobType) &&
        Objects.equals(this.outputConfig, createPackageImportJobRequest.outputConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, inputConfig, jobTags, jobType, outputConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePackageImportJobRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    inputConfig: ").append(toIndentedString(inputConfig)).append("\n");
    sb.append("    jobTags: ").append(toIndentedString(jobTags)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    outputConfig: ").append(toIndentedString(outputConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("InputConfig");
    openapiFields.add("JobTags");
    openapiFields.add("JobType");
    openapiFields.add("OutputConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClientToken");
    openapiRequiredFields.add("InputConfig");
    openapiRequiredFields.add("JobType");
    openapiRequiredFields.add("OutputConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePackageImportJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePackageImportJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePackageImportJobRequest is not found in the empty JSON string", CreatePackageImportJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePackageImportJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePackageImportJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePackageImportJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      // validate the required field `InputConfig`
      CreatePackageImportJobRequestInputConfig.validateJsonElement(jsonObj.get("InputConfig"));
      if (jsonObj.get("JobTags") != null && !jsonObj.get("JobTags").isJsonNull()) {
        JsonArray jsonArrayjobTags = jsonObj.getAsJsonArray("JobTags");
        if (jsonArrayjobTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("JobTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `JobTags` to be an array in the JSON string but got `%s`", jsonObj.get("JobTags").toString()));
          }

          // validate the optional field `JobTags` (array)
          for (int i = 0; i < jsonArrayjobTags.size(); i++) {
            JobResourceTags.validateJsonElement(jsonArrayjobTags.get(i));
          };
        }
      }
      if (!jsonObj.get("JobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobType").toString()));
      }
      // validate the required field `JobType`
      JobTypeEnum.validateJsonElement(jsonObj.get("JobType"));
      // validate the required field `OutputConfig`
      CreatePackageImportJobRequestOutputConfig.validateJsonElement(jsonObj.get("OutputConfig"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePackageImportJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePackageImportJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePackageImportJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePackageImportJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePackageImportJobRequest>() {
           @Override
           public void write(JsonWriter out, CreatePackageImportJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePackageImportJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePackageImportJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePackageImportJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreatePackageImportJobRequest
   */
  public static CreatePackageImportJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePackageImportJobRequest.class);
  }

  /**
   * Convert an instance of CreatePackageImportJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

