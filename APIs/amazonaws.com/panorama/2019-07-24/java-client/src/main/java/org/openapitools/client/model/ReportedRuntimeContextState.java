/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DesiredState;
import org.openapitools.client.model.DeviceReportedStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An application instance&#39;s state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportedRuntimeContextState {
  public static final String SERIALIZED_NAME_DESIRED_STATE = "DesiredState";
  @SerializedName(SERIALIZED_NAME_DESIRED_STATE)
  private DesiredState desiredState;

  public static final String SERIALIZED_NAME_DEVICE_REPORTED_STATUS = "DeviceReportedStatus";
  @SerializedName(SERIALIZED_NAME_DEVICE_REPORTED_STATUS)
  private DeviceReportedStatus deviceReportedStatus;

  public static final String SERIALIZED_NAME_DEVICE_REPORTED_TIME = "DeviceReportedTime";
  @SerializedName(SERIALIZED_NAME_DEVICE_REPORTED_TIME)
  private OffsetDateTime deviceReportedTime;

  public static final String SERIALIZED_NAME_RUNTIME_CONTEXT_NAME = "RuntimeContextName";
  @SerializedName(SERIALIZED_NAME_RUNTIME_CONTEXT_NAME)
  private String runtimeContextName;

  public ReportedRuntimeContextState() {
  }

  public ReportedRuntimeContextState desiredState(DesiredState desiredState) {
    this.desiredState = desiredState;
    return this;
  }

  /**
   * Get desiredState
   * @return desiredState
   */
  @javax.annotation.Nonnull
  public DesiredState getDesiredState() {
    return desiredState;
  }

  public void setDesiredState(DesiredState desiredState) {
    this.desiredState = desiredState;
  }


  public ReportedRuntimeContextState deviceReportedStatus(DeviceReportedStatus deviceReportedStatus) {
    this.deviceReportedStatus = deviceReportedStatus;
    return this;
  }

  /**
   * Get deviceReportedStatus
   * @return deviceReportedStatus
   */
  @javax.annotation.Nonnull
  public DeviceReportedStatus getDeviceReportedStatus() {
    return deviceReportedStatus;
  }

  public void setDeviceReportedStatus(DeviceReportedStatus deviceReportedStatus) {
    this.deviceReportedStatus = deviceReportedStatus;
  }


  public ReportedRuntimeContextState deviceReportedTime(OffsetDateTime deviceReportedTime) {
    this.deviceReportedTime = deviceReportedTime;
    return this;
  }

  /**
   * Get deviceReportedTime
   * @return deviceReportedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDeviceReportedTime() {
    return deviceReportedTime;
  }

  public void setDeviceReportedTime(OffsetDateTime deviceReportedTime) {
    this.deviceReportedTime = deviceReportedTime;
  }


  public ReportedRuntimeContextState runtimeContextName(String runtimeContextName) {
    this.runtimeContextName = runtimeContextName;
    return this;
  }

  /**
   * Get runtimeContextName
   * @return runtimeContextName
   */
  @javax.annotation.Nonnull
  public String getRuntimeContextName() {
    return runtimeContextName;
  }

  public void setRuntimeContextName(String runtimeContextName) {
    this.runtimeContextName = runtimeContextName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportedRuntimeContextState reportedRuntimeContextState = (ReportedRuntimeContextState) o;
    return Objects.equals(this.desiredState, reportedRuntimeContextState.desiredState) &&
        Objects.equals(this.deviceReportedStatus, reportedRuntimeContextState.deviceReportedStatus) &&
        Objects.equals(this.deviceReportedTime, reportedRuntimeContextState.deviceReportedTime) &&
        Objects.equals(this.runtimeContextName, reportedRuntimeContextState.runtimeContextName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(desiredState, deviceReportedStatus, deviceReportedTime, runtimeContextName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportedRuntimeContextState {\n");
    sb.append("    desiredState: ").append(toIndentedString(desiredState)).append("\n");
    sb.append("    deviceReportedStatus: ").append(toIndentedString(deviceReportedStatus)).append("\n");
    sb.append("    deviceReportedTime: ").append(toIndentedString(deviceReportedTime)).append("\n");
    sb.append("    runtimeContextName: ").append(toIndentedString(runtimeContextName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DesiredState");
    openapiFields.add("DeviceReportedStatus");
    openapiFields.add("DeviceReportedTime");
    openapiFields.add("RuntimeContextName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DesiredState");
    openapiRequiredFields.add("DeviceReportedStatus");
    openapiRequiredFields.add("DeviceReportedTime");
    openapiRequiredFields.add("RuntimeContextName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportedRuntimeContextState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportedRuntimeContextState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportedRuntimeContextState is not found in the empty JSON string", ReportedRuntimeContextState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportedRuntimeContextState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportedRuntimeContextState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportedRuntimeContextState.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DesiredState`
      DesiredState.validateJsonElement(jsonObj.get("DesiredState"));
      // validate the required field `DeviceReportedStatus`
      DeviceReportedStatus.validateJsonElement(jsonObj.get("DeviceReportedStatus"));
      // validate the required field `DeviceReportedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("DeviceReportedTime"));
      // validate the required field `RuntimeContextName`
      String.validateJsonElement(jsonObj.get("RuntimeContextName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportedRuntimeContextState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportedRuntimeContextState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportedRuntimeContextState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportedRuntimeContextState.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportedRuntimeContextState>() {
           @Override
           public void write(JsonWriter out, ReportedRuntimeContextState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportedRuntimeContextState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportedRuntimeContextState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportedRuntimeContextState
   * @throws IOException if the JSON string is invalid with respect to ReportedRuntimeContextState
   */
  public static ReportedRuntimeContextState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportedRuntimeContextState.class);
  }

  /**
   * Convert an instance of ReportedRuntimeContextState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

