/*
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DescribeApplicationInstanceDetailsResponseManifestOverridesPayload;
import org.openapitools.client.model.DescribeApplicationInstanceDetailsResponseManifestPayload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeApplicationInstanceDetailsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:24:01.151088-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeApplicationInstanceDetailsResponse {
  public static final String SERIALIZED_NAME_APPLICATION_INSTANCE_ID = "ApplicationInstanceId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_INSTANCE_ID)
  private String applicationInstanceId;

  public static final String SERIALIZED_NAME_APPLICATION_INSTANCE_ID_TO_REPLACE = "ApplicationInstanceIdToReplace";
  @SerializedName(SERIALIZED_NAME_APPLICATION_INSTANCE_ID_TO_REPLACE)
  private String applicationInstanceIdToReplace;

  public static final String SERIALIZED_NAME_CREATED_TIME = "CreatedTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DEFAULT_RUNTIME_CONTEXT_DEVICE = "DefaultRuntimeContextDevice";
  @SerializedName(SERIALIZED_NAME_DEFAULT_RUNTIME_CONTEXT_DEVICE)
  private String defaultRuntimeContextDevice;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MANIFEST_OVERRIDES_PAYLOAD = "ManifestOverridesPayload";
  @SerializedName(SERIALIZED_NAME_MANIFEST_OVERRIDES_PAYLOAD)
  private DescribeApplicationInstanceDetailsResponseManifestOverridesPayload manifestOverridesPayload;

  public static final String SERIALIZED_NAME_MANIFEST_PAYLOAD = "ManifestPayload";
  @SerializedName(SERIALIZED_NAME_MANIFEST_PAYLOAD)
  private DescribeApplicationInstanceDetailsResponseManifestPayload manifestPayload;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public DescribeApplicationInstanceDetailsResponse() {
  }

  public DescribeApplicationInstanceDetailsResponse applicationInstanceId(String applicationInstanceId) {
    this.applicationInstanceId = applicationInstanceId;
    return this;
  }

  /**
   * Get applicationInstanceId
   * @return applicationInstanceId
   */
  @javax.annotation.Nullable
  public String getApplicationInstanceId() {
    return applicationInstanceId;
  }

  public void setApplicationInstanceId(String applicationInstanceId) {
    this.applicationInstanceId = applicationInstanceId;
  }


  public DescribeApplicationInstanceDetailsResponse applicationInstanceIdToReplace(String applicationInstanceIdToReplace) {
    this.applicationInstanceIdToReplace = applicationInstanceIdToReplace;
    return this;
  }

  /**
   * Get applicationInstanceIdToReplace
   * @return applicationInstanceIdToReplace
   */
  @javax.annotation.Nullable
  public String getApplicationInstanceIdToReplace() {
    return applicationInstanceIdToReplace;
  }

  public void setApplicationInstanceIdToReplace(String applicationInstanceIdToReplace) {
    this.applicationInstanceIdToReplace = applicationInstanceIdToReplace;
  }


  public DescribeApplicationInstanceDetailsResponse createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public DescribeApplicationInstanceDetailsResponse defaultRuntimeContextDevice(String defaultRuntimeContextDevice) {
    this.defaultRuntimeContextDevice = defaultRuntimeContextDevice;
    return this;
  }

  /**
   * Get defaultRuntimeContextDevice
   * @return defaultRuntimeContextDevice
   */
  @javax.annotation.Nullable
  public String getDefaultRuntimeContextDevice() {
    return defaultRuntimeContextDevice;
  }

  public void setDefaultRuntimeContextDevice(String defaultRuntimeContextDevice) {
    this.defaultRuntimeContextDevice = defaultRuntimeContextDevice;
  }


  public DescribeApplicationInstanceDetailsResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DescribeApplicationInstanceDetailsResponse manifestOverridesPayload(DescribeApplicationInstanceDetailsResponseManifestOverridesPayload manifestOverridesPayload) {
    this.manifestOverridesPayload = manifestOverridesPayload;
    return this;
  }

  /**
   * Get manifestOverridesPayload
   * @return manifestOverridesPayload
   */
  @javax.annotation.Nullable
  public DescribeApplicationInstanceDetailsResponseManifestOverridesPayload getManifestOverridesPayload() {
    return manifestOverridesPayload;
  }

  public void setManifestOverridesPayload(DescribeApplicationInstanceDetailsResponseManifestOverridesPayload manifestOverridesPayload) {
    this.manifestOverridesPayload = manifestOverridesPayload;
  }


  public DescribeApplicationInstanceDetailsResponse manifestPayload(DescribeApplicationInstanceDetailsResponseManifestPayload manifestPayload) {
    this.manifestPayload = manifestPayload;
    return this;
  }

  /**
   * Get manifestPayload
   * @return manifestPayload
   */
  @javax.annotation.Nullable
  public DescribeApplicationInstanceDetailsResponseManifestPayload getManifestPayload() {
    return manifestPayload;
  }

  public void setManifestPayload(DescribeApplicationInstanceDetailsResponseManifestPayload manifestPayload) {
    this.manifestPayload = manifestPayload;
  }


  public DescribeApplicationInstanceDetailsResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeApplicationInstanceDetailsResponse describeApplicationInstanceDetailsResponse = (DescribeApplicationInstanceDetailsResponse) o;
    return Objects.equals(this.applicationInstanceId, describeApplicationInstanceDetailsResponse.applicationInstanceId) &&
        Objects.equals(this.applicationInstanceIdToReplace, describeApplicationInstanceDetailsResponse.applicationInstanceIdToReplace) &&
        Objects.equals(this.createdTime, describeApplicationInstanceDetailsResponse.createdTime) &&
        Objects.equals(this.defaultRuntimeContextDevice, describeApplicationInstanceDetailsResponse.defaultRuntimeContextDevice) &&
        Objects.equals(this.description, describeApplicationInstanceDetailsResponse.description) &&
        Objects.equals(this.manifestOverridesPayload, describeApplicationInstanceDetailsResponse.manifestOverridesPayload) &&
        Objects.equals(this.manifestPayload, describeApplicationInstanceDetailsResponse.manifestPayload) &&
        Objects.equals(this.name, describeApplicationInstanceDetailsResponse.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationInstanceId, applicationInstanceIdToReplace, createdTime, defaultRuntimeContextDevice, description, manifestOverridesPayload, manifestPayload, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeApplicationInstanceDetailsResponse {\n");
    sb.append("    applicationInstanceId: ").append(toIndentedString(applicationInstanceId)).append("\n");
    sb.append("    applicationInstanceIdToReplace: ").append(toIndentedString(applicationInstanceIdToReplace)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    defaultRuntimeContextDevice: ").append(toIndentedString(defaultRuntimeContextDevice)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    manifestOverridesPayload: ").append(toIndentedString(manifestOverridesPayload)).append("\n");
    sb.append("    manifestPayload: ").append(toIndentedString(manifestPayload)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationInstanceId");
    openapiFields.add("ApplicationInstanceIdToReplace");
    openapiFields.add("CreatedTime");
    openapiFields.add("DefaultRuntimeContextDevice");
    openapiFields.add("Description");
    openapiFields.add("ManifestOverridesPayload");
    openapiFields.add("ManifestPayload");
    openapiFields.add("Name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeApplicationInstanceDetailsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeApplicationInstanceDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeApplicationInstanceDetailsResponse is not found in the empty JSON string", DescribeApplicationInstanceDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeApplicationInstanceDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeApplicationInstanceDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationInstanceId`
      if (jsonObj.get("ApplicationInstanceId") != null && !jsonObj.get("ApplicationInstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationInstanceId"));
      }
      // validate the optional field `ApplicationInstanceIdToReplace`
      if (jsonObj.get("ApplicationInstanceIdToReplace") != null && !jsonObj.get("ApplicationInstanceIdToReplace").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApplicationInstanceIdToReplace"));
      }
      // validate the optional field `CreatedTime`
      if (jsonObj.get("CreatedTime") != null && !jsonObj.get("CreatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTime"));
      }
      // validate the optional field `DefaultRuntimeContextDevice`
      if (jsonObj.get("DefaultRuntimeContextDevice") != null && !jsonObj.get("DefaultRuntimeContextDevice").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultRuntimeContextDevice"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `ManifestOverridesPayload`
      if (jsonObj.get("ManifestOverridesPayload") != null && !jsonObj.get("ManifestOverridesPayload").isJsonNull()) {
        DescribeApplicationInstanceDetailsResponseManifestOverridesPayload.validateJsonElement(jsonObj.get("ManifestOverridesPayload"));
      }
      // validate the optional field `ManifestPayload`
      if (jsonObj.get("ManifestPayload") != null && !jsonObj.get("ManifestPayload").isJsonNull()) {
        DescribeApplicationInstanceDetailsResponseManifestPayload.validateJsonElement(jsonObj.get("ManifestPayload"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeApplicationInstanceDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeApplicationInstanceDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeApplicationInstanceDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeApplicationInstanceDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeApplicationInstanceDetailsResponse>() {
           @Override
           public void write(JsonWriter out, DescribeApplicationInstanceDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeApplicationInstanceDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeApplicationInstanceDetailsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeApplicationInstanceDetailsResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeApplicationInstanceDetailsResponse
   */
  public static DescribeApplicationInstanceDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeApplicationInstanceDetailsResponse.class);
  }

  /**
   * Convert an instance of DescribeApplicationInstanceDetailsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

