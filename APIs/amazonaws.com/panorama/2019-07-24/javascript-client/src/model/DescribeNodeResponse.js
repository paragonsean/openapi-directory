/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DescribeNodeResponseNodeInterface from './DescribeNodeResponseNodeInterface';
import NodeCategory from './NodeCategory';

/**
 * The DescribeNodeResponse model module.
 * @module model/DescribeNodeResponse
 * @version 2019-07-24
 */
class DescribeNodeResponse {
    /**
     * Constructs a new <code>DescribeNodeResponse</code>.
     * @alias module:model/DescribeNodeResponse
     * @param category {module:model/NodeCategory} 
     * @param createdTime {Date} 
     * @param description {String} 
     * @param lastUpdatedTime {Date} 
     * @param name {String} 
     * @param nodeId {String} 
     * @param nodeInterface {module:model/DescribeNodeResponseNodeInterface} 
     * @param ownerAccount {String} 
     * @param packageId {String} 
     * @param packageName {String} 
     * @param packageVersion {String} 
     * @param patchVersion {String} 
     */
    constructor(category, createdTime, description, lastUpdatedTime, name, nodeId, nodeInterface, ownerAccount, packageId, packageName, packageVersion, patchVersion) { 
        
        DescribeNodeResponse.initialize(this, category, createdTime, description, lastUpdatedTime, name, nodeId, nodeInterface, ownerAccount, packageId, packageName, packageVersion, patchVersion);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, category, createdTime, description, lastUpdatedTime, name, nodeId, nodeInterface, ownerAccount, packageId, packageName, packageVersion, patchVersion) { 
        obj['Category'] = category;
        obj['CreatedTime'] = createdTime;
        obj['Description'] = description;
        obj['LastUpdatedTime'] = lastUpdatedTime;
        obj['Name'] = name;
        obj['NodeId'] = nodeId;
        obj['NodeInterface'] = nodeInterface;
        obj['OwnerAccount'] = ownerAccount;
        obj['PackageId'] = packageId;
        obj['PackageName'] = packageName;
        obj['PackageVersion'] = packageVersion;
        obj['PatchVersion'] = patchVersion;
    }

    /**
     * Constructs a <code>DescribeNodeResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeNodeResponse} obj Optional instance to populate.
     * @return {module:model/DescribeNodeResponse} The populated <code>DescribeNodeResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeNodeResponse();

            if (data.hasOwnProperty('AssetName')) {
                obj['AssetName'] = ApiClient.convertToType(data['AssetName'], 'String');
            }
            if (data.hasOwnProperty('Category')) {
                obj['Category'] = ApiClient.convertToType(data['Category'], NodeCategory);
            }
            if (data.hasOwnProperty('CreatedTime')) {
                obj['CreatedTime'] = ApiClient.convertToType(data['CreatedTime'], 'Date');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('LastUpdatedTime')) {
                obj['LastUpdatedTime'] = ApiClient.convertToType(data['LastUpdatedTime'], 'Date');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NodeId')) {
                obj['NodeId'] = ApiClient.convertToType(data['NodeId'], 'String');
            }
            if (data.hasOwnProperty('NodeInterface')) {
                obj['NodeInterface'] = DescribeNodeResponseNodeInterface.constructFromObject(data['NodeInterface']);
            }
            if (data.hasOwnProperty('OwnerAccount')) {
                obj['OwnerAccount'] = ApiClient.convertToType(data['OwnerAccount'], 'String');
            }
            if (data.hasOwnProperty('PackageArn')) {
                obj['PackageArn'] = ApiClient.convertToType(data['PackageArn'], 'String');
            }
            if (data.hasOwnProperty('PackageId')) {
                obj['PackageId'] = ApiClient.convertToType(data['PackageId'], 'String');
            }
            if (data.hasOwnProperty('PackageName')) {
                obj['PackageName'] = ApiClient.convertToType(data['PackageName'], 'String');
            }
            if (data.hasOwnProperty('PackageVersion')) {
                obj['PackageVersion'] = ApiClient.convertToType(data['PackageVersion'], 'String');
            }
            if (data.hasOwnProperty('PatchVersion')) {
                obj['PatchVersion'] = ApiClient.convertToType(data['PatchVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeNodeResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeNodeResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribeNodeResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AssetName`
        if (data['AssetName']) { // data not null
          String.validateJSON(data['AssetName']);
        }
        // validate the optional field `Category`
        if (data['Category']) { // data not null
          NodeCategory.validateJSON(data['Category']);
        }
        // validate the optional field `CreatedTime`
        if (data['CreatedTime']) { // data not null
          Date.validateJSON(data['CreatedTime']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `LastUpdatedTime`
        if (data['LastUpdatedTime']) { // data not null
          Date.validateJSON(data['LastUpdatedTime']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `NodeId`
        if (data['NodeId']) { // data not null
          String.validateJSON(data['NodeId']);
        }
        // validate the optional field `NodeInterface`
        if (data['NodeInterface']) { // data not null
          DescribeNodeResponseNodeInterface.validateJSON(data['NodeInterface']);
        }
        // validate the optional field `OwnerAccount`
        if (data['OwnerAccount']) { // data not null
          String.validateJSON(data['OwnerAccount']);
        }
        // validate the optional field `PackageArn`
        if (data['PackageArn']) { // data not null
          String.validateJSON(data['PackageArn']);
        }
        // validate the optional field `PackageId`
        if (data['PackageId']) { // data not null
          String.validateJSON(data['PackageId']);
        }
        // validate the optional field `PackageName`
        if (data['PackageName']) { // data not null
          String.validateJSON(data['PackageName']);
        }
        // validate the optional field `PackageVersion`
        if (data['PackageVersion']) { // data not null
          String.validateJSON(data['PackageVersion']);
        }
        // validate the optional field `PatchVersion`
        if (data['PatchVersion']) { // data not null
          String.validateJSON(data['PatchVersion']);
        }

        return true;
    }


}

DescribeNodeResponse.RequiredProperties = ["Category", "CreatedTime", "Description", "LastUpdatedTime", "Name", "NodeId", "NodeInterface", "OwnerAccount", "PackageId", "PackageName", "PackageVersion", "PatchVersion"];

/**
 * @member {String} AssetName
 */
DescribeNodeResponse.prototype['AssetName'] = undefined;

/**
 * @member {module:model/NodeCategory} Category
 */
DescribeNodeResponse.prototype['Category'] = undefined;

/**
 * @member {Date} CreatedTime
 */
DescribeNodeResponse.prototype['CreatedTime'] = undefined;

/**
 * @member {String} Description
 */
DescribeNodeResponse.prototype['Description'] = undefined;

/**
 * @member {Date} LastUpdatedTime
 */
DescribeNodeResponse.prototype['LastUpdatedTime'] = undefined;

/**
 * @member {String} Name
 */
DescribeNodeResponse.prototype['Name'] = undefined;

/**
 * @member {String} NodeId
 */
DescribeNodeResponse.prototype['NodeId'] = undefined;

/**
 * @member {module:model/DescribeNodeResponseNodeInterface} NodeInterface
 */
DescribeNodeResponse.prototype['NodeInterface'] = undefined;

/**
 * @member {String} OwnerAccount
 */
DescribeNodeResponse.prototype['OwnerAccount'] = undefined;

/**
 * @member {String} PackageArn
 */
DescribeNodeResponse.prototype['PackageArn'] = undefined;

/**
 * @member {String} PackageId
 */
DescribeNodeResponse.prototype['PackageId'] = undefined;

/**
 * @member {String} PackageName
 */
DescribeNodeResponse.prototype['PackageName'] = undefined;

/**
 * @member {String} PackageVersion
 */
DescribeNodeResponse.prototype['PackageVersion'] = undefined;

/**
 * @member {String} PatchVersion
 */
DescribeNodeResponse.prototype['PatchVersion'] = undefined;






export default DescribeNodeResponse;

