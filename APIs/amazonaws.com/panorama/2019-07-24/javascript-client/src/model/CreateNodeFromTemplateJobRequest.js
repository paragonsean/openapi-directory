/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobResourceTags from './JobResourceTags';

/**
 * The CreateNodeFromTemplateJobRequest model module.
 * @module model/CreateNodeFromTemplateJobRequest
 * @version 2019-07-24
 */
class CreateNodeFromTemplateJobRequest {
    /**
     * Constructs a new <code>CreateNodeFromTemplateJobRequest</code>.
     * @alias module:model/CreateNodeFromTemplateJobRequest
     * @param nodeName {String} A name for the node.
     * @param outputPackageName {String} An output package name for the node.
     * @param outputPackageVersion {String} An output package version for the node.
     * @param templateParameters {Object.<String, String>} Template parameters for the node.
     * @param templateType {module:model/CreateNodeFromTemplateJobRequest.TemplateTypeEnum} The type of node.
     */
    constructor(nodeName, outputPackageName, outputPackageVersion, templateParameters, templateType) { 
        
        CreateNodeFromTemplateJobRequest.initialize(this, nodeName, outputPackageName, outputPackageVersion, templateParameters, templateType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nodeName, outputPackageName, outputPackageVersion, templateParameters, templateType) { 
        obj['NodeName'] = nodeName;
        obj['OutputPackageName'] = outputPackageName;
        obj['OutputPackageVersion'] = outputPackageVersion;
        obj['TemplateParameters'] = templateParameters;
        obj['TemplateType'] = templateType;
    }

    /**
     * Constructs a <code>CreateNodeFromTemplateJobRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateNodeFromTemplateJobRequest} obj Optional instance to populate.
     * @return {module:model/CreateNodeFromTemplateJobRequest} The populated <code>CreateNodeFromTemplateJobRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateNodeFromTemplateJobRequest();

            if (data.hasOwnProperty('JobTags')) {
                obj['JobTags'] = ApiClient.convertToType(data['JobTags'], [JobResourceTags]);
            }
            if (data.hasOwnProperty('NodeDescription')) {
                obj['NodeDescription'] = ApiClient.convertToType(data['NodeDescription'], 'String');
            }
            if (data.hasOwnProperty('NodeName')) {
                obj['NodeName'] = ApiClient.convertToType(data['NodeName'], 'String');
            }
            if (data.hasOwnProperty('OutputPackageName')) {
                obj['OutputPackageName'] = ApiClient.convertToType(data['OutputPackageName'], 'String');
            }
            if (data.hasOwnProperty('OutputPackageVersion')) {
                obj['OutputPackageVersion'] = ApiClient.convertToType(data['OutputPackageVersion'], 'String');
            }
            if (data.hasOwnProperty('TemplateParameters')) {
                obj['TemplateParameters'] = ApiClient.convertToType(data['TemplateParameters'], {'String': 'String'});
            }
            if (data.hasOwnProperty('TemplateType')) {
                obj['TemplateType'] = ApiClient.convertToType(data['TemplateType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateNodeFromTemplateJobRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateNodeFromTemplateJobRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateNodeFromTemplateJobRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['JobTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['JobTags'])) {
                throw new Error("Expected the field `JobTags` to be an array in the JSON data but got " + data['JobTags']);
            }
            // validate the optional field `JobTags` (array)
            for (const item of data['JobTags']) {
                JobResourceTags.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['NodeDescription'] && !(typeof data['NodeDescription'] === 'string' || data['NodeDescription'] instanceof String)) {
            throw new Error("Expected the field `NodeDescription` to be a primitive type in the JSON string but got " + data['NodeDescription']);
        }
        // ensure the json data is a string
        if (data['NodeName'] && !(typeof data['NodeName'] === 'string' || data['NodeName'] instanceof String)) {
            throw new Error("Expected the field `NodeName` to be a primitive type in the JSON string but got " + data['NodeName']);
        }
        // ensure the json data is a string
        if (data['OutputPackageName'] && !(typeof data['OutputPackageName'] === 'string' || data['OutputPackageName'] instanceof String)) {
            throw new Error("Expected the field `OutputPackageName` to be a primitive type in the JSON string but got " + data['OutputPackageName']);
        }
        // ensure the json data is a string
        if (data['OutputPackageVersion'] && !(typeof data['OutputPackageVersion'] === 'string' || data['OutputPackageVersion'] instanceof String)) {
            throw new Error("Expected the field `OutputPackageVersion` to be a primitive type in the JSON string but got " + data['OutputPackageVersion']);
        }
        // ensure the json data is a string
        if (data['TemplateType'] && !(typeof data['TemplateType'] === 'string' || data['TemplateType'] instanceof String)) {
            throw new Error("Expected the field `TemplateType` to be a primitive type in the JSON string but got " + data['TemplateType']);
        }

        return true;
    }


}

CreateNodeFromTemplateJobRequest.RequiredProperties = ["NodeName", "OutputPackageName", "OutputPackageVersion", "TemplateParameters", "TemplateType"];

/**
 * Tags for the job.
 * @member {Array.<module:model/JobResourceTags>} JobTags
 */
CreateNodeFromTemplateJobRequest.prototype['JobTags'] = undefined;

/**
 * A description for the node.
 * @member {String} NodeDescription
 */
CreateNodeFromTemplateJobRequest.prototype['NodeDescription'] = undefined;

/**
 * A name for the node.
 * @member {String} NodeName
 */
CreateNodeFromTemplateJobRequest.prototype['NodeName'] = undefined;

/**
 * An output package name for the node.
 * @member {String} OutputPackageName
 */
CreateNodeFromTemplateJobRequest.prototype['OutputPackageName'] = undefined;

/**
 * An output package version for the node.
 * @member {String} OutputPackageVersion
 */
CreateNodeFromTemplateJobRequest.prototype['OutputPackageVersion'] = undefined;

/**
 * Template parameters for the node.
 * @member {Object.<String, String>} TemplateParameters
 */
CreateNodeFromTemplateJobRequest.prototype['TemplateParameters'] = undefined;

/**
 * The type of node.
 * @member {module:model/CreateNodeFromTemplateJobRequest.TemplateTypeEnum} TemplateType
 */
CreateNodeFromTemplateJobRequest.prototype['TemplateType'] = undefined;





/**
 * Allowed values for the <code>TemplateType</code> property.
 * @enum {String}
 * @readonly
 */
CreateNodeFromTemplateJobRequest['TemplateTypeEnum'] = {

    /**
     * value: "RTSP_CAMERA_STREAM"
     * @const
     */
    "RTSP_CAMERA_STREAM": "RTSP_CAMERA_STREAM"
};



export default CreateNodeFromTemplateJobRequest;

