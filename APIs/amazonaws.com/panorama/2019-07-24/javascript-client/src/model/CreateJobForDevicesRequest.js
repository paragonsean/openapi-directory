/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateJobForDevicesRequestDeviceJobConfig from './CreateJobForDevicesRequestDeviceJobConfig';

/**
 * The CreateJobForDevicesRequest model module.
 * @module model/CreateJobForDevicesRequest
 * @version 2019-07-24
 */
class CreateJobForDevicesRequest {
    /**
     * Constructs a new <code>CreateJobForDevicesRequest</code>.
     * @alias module:model/CreateJobForDevicesRequest
     * @param deviceIds {Array.<String>} ID of target device.
     * @param jobType {module:model/CreateJobForDevicesRequest.JobTypeEnum} The type of job to run.
     */
    constructor(deviceIds, jobType) { 
        
        CreateJobForDevicesRequest.initialize(this, deviceIds, jobType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceIds, jobType) { 
        obj['DeviceIds'] = deviceIds;
        obj['JobType'] = jobType;
    }

    /**
     * Constructs a <code>CreateJobForDevicesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateJobForDevicesRequest} obj Optional instance to populate.
     * @return {module:model/CreateJobForDevicesRequest} The populated <code>CreateJobForDevicesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateJobForDevicesRequest();

            if (data.hasOwnProperty('DeviceIds')) {
                obj['DeviceIds'] = ApiClient.convertToType(data['DeviceIds'], ['String']);
            }
            if (data.hasOwnProperty('DeviceJobConfig')) {
                obj['DeviceJobConfig'] = CreateJobForDevicesRequestDeviceJobConfig.constructFromObject(data['DeviceJobConfig']);
            }
            if (data.hasOwnProperty('JobType')) {
                obj['JobType'] = ApiClient.convertToType(data['JobType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateJobForDevicesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateJobForDevicesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateJobForDevicesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['DeviceIds'])) {
            throw new Error("Expected the field `DeviceIds` to be an array in the JSON data but got " + data['DeviceIds']);
        }
        // validate the optional field `DeviceJobConfig`
        if (data['DeviceJobConfig']) { // data not null
          CreateJobForDevicesRequestDeviceJobConfig.validateJSON(data['DeviceJobConfig']);
        }
        // ensure the json data is a string
        if (data['JobType'] && !(typeof data['JobType'] === 'string' || data['JobType'] instanceof String)) {
            throw new Error("Expected the field `JobType` to be a primitive type in the JSON string but got " + data['JobType']);
        }

        return true;
    }


}

CreateJobForDevicesRequest.RequiredProperties = ["DeviceIds", "JobType"];

/**
 * ID of target device.
 * @member {Array.<String>} DeviceIds
 */
CreateJobForDevicesRequest.prototype['DeviceIds'] = undefined;

/**
 * @member {module:model/CreateJobForDevicesRequestDeviceJobConfig} DeviceJobConfig
 */
CreateJobForDevicesRequest.prototype['DeviceJobConfig'] = undefined;

/**
 * The type of job to run.
 * @member {module:model/CreateJobForDevicesRequest.JobTypeEnum} JobType
 */
CreateJobForDevicesRequest.prototype['JobType'] = undefined;





/**
 * Allowed values for the <code>JobType</code> property.
 * @enum {String}
 * @readonly
 */
CreateJobForDevicesRequest['JobTypeEnum'] = {

    /**
     * value: "OTA"
     * @const
     */
    "OTA": "OTA",

    /**
     * value: "REBOOT"
     * @const
     */
    "REBOOT": "REBOOT"
};



export default CreateJobForDevicesRequest;

