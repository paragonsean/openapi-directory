/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectionType from './ConnectionType';
import EthernetPayloadStaticIpConnectionInfo from './EthernetPayloadStaticIpConnectionInfo';

/**
 * The EthernetPayload model module.
 * @module model/EthernetPayload
 * @version 2019-07-24
 */
class EthernetPayload {
    /**
     * Constructs a new <code>EthernetPayload</code>.
     * A device&#39;s network configuration.
     * @alias module:model/EthernetPayload
     * @param connectionType {module:model/ConnectionType} 
     */
    constructor(connectionType) { 
        
        EthernetPayload.initialize(this, connectionType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionType) { 
        obj['ConnectionType'] = connectionType;
    }

    /**
     * Constructs a <code>EthernetPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EthernetPayload} obj Optional instance to populate.
     * @return {module:model/EthernetPayload} The populated <code>EthernetPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EthernetPayload();

            if (data.hasOwnProperty('ConnectionType')) {
                obj['ConnectionType'] = ApiClient.convertToType(data['ConnectionType'], ConnectionType);
            }
            if (data.hasOwnProperty('StaticIpConnectionInfo')) {
                obj['StaticIpConnectionInfo'] = EthernetPayloadStaticIpConnectionInfo.constructFromObject(data['StaticIpConnectionInfo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EthernetPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EthernetPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EthernetPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ConnectionType`
        if (data['ConnectionType']) { // data not null
          ConnectionType.validateJSON(data['ConnectionType']);
        }
        // validate the optional field `StaticIpConnectionInfo`
        if (data['StaticIpConnectionInfo']) { // data not null
          EthernetPayloadStaticIpConnectionInfo.validateJSON(data['StaticIpConnectionInfo']);
        }

        return true;
    }


}

EthernetPayload.RequiredProperties = ["ConnectionType"];

/**
 * @member {module:model/ConnectionType} ConnectionType
 */
EthernetPayload.prototype['ConnectionType'] = undefined;

/**
 * @member {module:model/EthernetPayloadStaticIpConnectionInfo} StaticIpConnectionInfo
 */
EthernetPayload.prototype['StaticIpConnectionInfo'] = undefined;






export default EthernetPayload;

