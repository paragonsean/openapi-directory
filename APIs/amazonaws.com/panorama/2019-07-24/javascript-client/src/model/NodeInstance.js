/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeInstanceStatus from './NodeInstanceStatus';

/**
 * The NodeInstance model module.
 * @module model/NodeInstance
 * @version 2019-07-24
 */
class NodeInstance {
    /**
     * Constructs a new <code>NodeInstance</code>.
     * A node instance.
     * @alias module:model/NodeInstance
     * @param currentStatus {module:model/NodeInstanceStatus} 
     * @param nodeInstanceId {String} 
     */
    constructor(currentStatus, nodeInstanceId) { 
        
        NodeInstance.initialize(this, currentStatus, nodeInstanceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentStatus, nodeInstanceId) { 
        obj['CurrentStatus'] = currentStatus;
        obj['NodeInstanceId'] = nodeInstanceId;
    }

    /**
     * Constructs a <code>NodeInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeInstance} obj Optional instance to populate.
     * @return {module:model/NodeInstance} The populated <code>NodeInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeInstance();

            if (data.hasOwnProperty('CurrentStatus')) {
                obj['CurrentStatus'] = ApiClient.convertToType(data['CurrentStatus'], NodeInstanceStatus);
            }
            if (data.hasOwnProperty('NodeId')) {
                obj['NodeId'] = ApiClient.convertToType(data['NodeId'], 'String');
            }
            if (data.hasOwnProperty('NodeInstanceId')) {
                obj['NodeInstanceId'] = ApiClient.convertToType(data['NodeInstanceId'], 'String');
            }
            if (data.hasOwnProperty('NodeName')) {
                obj['NodeName'] = ApiClient.convertToType(data['NodeName'], 'String');
            }
            if (data.hasOwnProperty('PackageName')) {
                obj['PackageName'] = ApiClient.convertToType(data['PackageName'], 'String');
            }
            if (data.hasOwnProperty('PackagePatchVersion')) {
                obj['PackagePatchVersion'] = ApiClient.convertToType(data['PackagePatchVersion'], 'String');
            }
            if (data.hasOwnProperty('PackageVersion')) {
                obj['PackageVersion'] = ApiClient.convertToType(data['PackageVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeInstance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NodeInstance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CurrentStatus`
        if (data['CurrentStatus']) { // data not null
          NodeInstanceStatus.validateJSON(data['CurrentStatus']);
        }
        // validate the optional field `NodeId`
        if (data['NodeId']) { // data not null
          String.validateJSON(data['NodeId']);
        }
        // validate the optional field `NodeInstanceId`
        if (data['NodeInstanceId']) { // data not null
          String.validateJSON(data['NodeInstanceId']);
        }
        // validate the optional field `NodeName`
        if (data['NodeName']) { // data not null
          String.validateJSON(data['NodeName']);
        }
        // validate the optional field `PackageName`
        if (data['PackageName']) { // data not null
          String.validateJSON(data['PackageName']);
        }
        // validate the optional field `PackagePatchVersion`
        if (data['PackagePatchVersion']) { // data not null
          String.validateJSON(data['PackagePatchVersion']);
        }
        // validate the optional field `PackageVersion`
        if (data['PackageVersion']) { // data not null
          String.validateJSON(data['PackageVersion']);
        }

        return true;
    }


}

NodeInstance.RequiredProperties = ["CurrentStatus", "NodeInstanceId"];

/**
 * @member {module:model/NodeInstanceStatus} CurrentStatus
 */
NodeInstance.prototype['CurrentStatus'] = undefined;

/**
 * @member {String} NodeId
 */
NodeInstance.prototype['NodeId'] = undefined;

/**
 * @member {String} NodeInstanceId
 */
NodeInstance.prototype['NodeInstanceId'] = undefined;

/**
 * @member {String} NodeName
 */
NodeInstance.prototype['NodeName'] = undefined;

/**
 * @member {String} PackageName
 */
NodeInstance.prototype['PackageName'] = undefined;

/**
 * @member {String} PackagePatchVersion
 */
NodeInstance.prototype['PackagePatchVersion'] = undefined;

/**
 * @member {String} PackageVersion
 */
NodeInstance.prototype['PackageVersion'] = undefined;






export default NodeInstance;

