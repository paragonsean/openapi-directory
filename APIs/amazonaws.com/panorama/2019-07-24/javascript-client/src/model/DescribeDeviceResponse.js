/**
 * AWS Panorama
 * <p><fullname>AWS Panorama</fullname> <p> <b>Overview</b> </p> <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html\">What is AWS Panorama?</a> in the <i>AWS Panorama Developer Guide</i>.</p></p>
 *
 * The version of the OpenAPI document: 2019-07-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DescribeDeviceResponseCurrentNetworkingStatus from './DescribeDeviceResponseCurrentNetworkingStatus';
import DescribeDeviceResponseLatestDeviceJob from './DescribeDeviceResponseLatestDeviceJob';
import DescribeDeviceResponseNetworkingConfiguration from './DescribeDeviceResponseNetworkingConfiguration';
import DeviceAggregatedStatus from './DeviceAggregatedStatus';
import DeviceBrand from './DeviceBrand';
import DeviceConnectionStatus from './DeviceConnectionStatus';
import DeviceStatus from './DeviceStatus';
import DeviceType from './DeviceType';

/**
 * The DescribeDeviceResponse model module.
 * @module model/DescribeDeviceResponse
 * @version 2019-07-24
 */
class DescribeDeviceResponse {
    /**
     * Constructs a new <code>DescribeDeviceResponse</code>.
     * @alias module:model/DescribeDeviceResponse
     */
    constructor() { 
        
        DescribeDeviceResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeDeviceResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeDeviceResponse} obj Optional instance to populate.
     * @return {module:model/DescribeDeviceResponse} The populated <code>DescribeDeviceResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeDeviceResponse();

            if (data.hasOwnProperty('AlternateSoftwares')) {
                obj['AlternateSoftwares'] = ApiClient.convertToType(data['AlternateSoftwares'], Array);
            }
            if (data.hasOwnProperty('Arn')) {
                obj['Arn'] = ApiClient.convertToType(data['Arn'], 'String');
            }
            if (data.hasOwnProperty('Brand')) {
                obj['Brand'] = ApiClient.convertToType(data['Brand'], DeviceBrand);
            }
            if (data.hasOwnProperty('CreatedTime')) {
                obj['CreatedTime'] = ApiClient.convertToType(data['CreatedTime'], 'Date');
            }
            if (data.hasOwnProperty('CurrentNetworkingStatus')) {
                obj['CurrentNetworkingStatus'] = DescribeDeviceResponseCurrentNetworkingStatus.constructFromObject(data['CurrentNetworkingStatus']);
            }
            if (data.hasOwnProperty('CurrentSoftware')) {
                obj['CurrentSoftware'] = ApiClient.convertToType(data['CurrentSoftware'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('DeviceAggregatedStatus')) {
                obj['DeviceAggregatedStatus'] = ApiClient.convertToType(data['DeviceAggregatedStatus'], DeviceAggregatedStatus);
            }
            if (data.hasOwnProperty('DeviceConnectionStatus')) {
                obj['DeviceConnectionStatus'] = ApiClient.convertToType(data['DeviceConnectionStatus'], DeviceConnectionStatus);
            }
            if (data.hasOwnProperty('DeviceId')) {
                obj['DeviceId'] = ApiClient.convertToType(data['DeviceId'], 'String');
            }
            if (data.hasOwnProperty('LatestAlternateSoftware')) {
                obj['LatestAlternateSoftware'] = ApiClient.convertToType(data['LatestAlternateSoftware'], 'String');
            }
            if (data.hasOwnProperty('LatestDeviceJob')) {
                obj['LatestDeviceJob'] = DescribeDeviceResponseLatestDeviceJob.constructFromObject(data['LatestDeviceJob']);
            }
            if (data.hasOwnProperty('LatestSoftware')) {
                obj['LatestSoftware'] = ApiClient.convertToType(data['LatestSoftware'], 'String');
            }
            if (data.hasOwnProperty('LeaseExpirationTime')) {
                obj['LeaseExpirationTime'] = ApiClient.convertToType(data['LeaseExpirationTime'], 'Date');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('NetworkingConfiguration')) {
                obj['NetworkingConfiguration'] = DescribeDeviceResponseNetworkingConfiguration.constructFromObject(data['NetworkingConfiguration']);
            }
            if (data.hasOwnProperty('ProvisioningStatus')) {
                obj['ProvisioningStatus'] = ApiClient.convertToType(data['ProvisioningStatus'], DeviceStatus);
            }
            if (data.hasOwnProperty('SerialNumber')) {
                obj['SerialNumber'] = ApiClient.convertToType(data['SerialNumber'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Object);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], DeviceType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeDeviceResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeDeviceResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AlternateSoftwares`
        if (data['AlternateSoftwares']) { // data not null
          Array.validateJSON(data['AlternateSoftwares']);
        }
        // validate the optional field `Arn`
        if (data['Arn']) { // data not null
          String.validateJSON(data['Arn']);
        }
        // validate the optional field `Brand`
        if (data['Brand']) { // data not null
          DeviceBrand.validateJSON(data['Brand']);
        }
        // validate the optional field `CreatedTime`
        if (data['CreatedTime']) { // data not null
          Date.validateJSON(data['CreatedTime']);
        }
        // validate the optional field `CurrentNetworkingStatus`
        if (data['CurrentNetworkingStatus']) { // data not null
          DescribeDeviceResponseCurrentNetworkingStatus.validateJSON(data['CurrentNetworkingStatus']);
        }
        // validate the optional field `CurrentSoftware`
        if (data['CurrentSoftware']) { // data not null
          String.validateJSON(data['CurrentSoftware']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `DeviceAggregatedStatus`
        if (data['DeviceAggregatedStatus']) { // data not null
          DeviceAggregatedStatus.validateJSON(data['DeviceAggregatedStatus']);
        }
        // validate the optional field `DeviceConnectionStatus`
        if (data['DeviceConnectionStatus']) { // data not null
          DeviceConnectionStatus.validateJSON(data['DeviceConnectionStatus']);
        }
        // validate the optional field `DeviceId`
        if (data['DeviceId']) { // data not null
          String.validateJSON(data['DeviceId']);
        }
        // validate the optional field `LatestAlternateSoftware`
        if (data['LatestAlternateSoftware']) { // data not null
          String.validateJSON(data['LatestAlternateSoftware']);
        }
        // validate the optional field `LatestDeviceJob`
        if (data['LatestDeviceJob']) { // data not null
          DescribeDeviceResponseLatestDeviceJob.validateJSON(data['LatestDeviceJob']);
        }
        // validate the optional field `LatestSoftware`
        if (data['LatestSoftware']) { // data not null
          String.validateJSON(data['LatestSoftware']);
        }
        // validate the optional field `LeaseExpirationTime`
        if (data['LeaseExpirationTime']) { // data not null
          Date.validateJSON(data['LeaseExpirationTime']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `NetworkingConfiguration`
        if (data['NetworkingConfiguration']) { // data not null
          DescribeDeviceResponseNetworkingConfiguration.validateJSON(data['NetworkingConfiguration']);
        }
        // validate the optional field `ProvisioningStatus`
        if (data['ProvisioningStatus']) { // data not null
          DeviceStatus.validateJSON(data['ProvisioningStatus']);
        }
        // validate the optional field `SerialNumber`
        if (data['SerialNumber']) { // data not null
          String.validateJSON(data['SerialNumber']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Object.validateJSON(data['Tags']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          DeviceType.validateJSON(data['Type']);
        }

        return true;
    }


}



/**
 * @member {Array} AlternateSoftwares
 */
DescribeDeviceResponse.prototype['AlternateSoftwares'] = undefined;

/**
 * @member {String} Arn
 */
DescribeDeviceResponse.prototype['Arn'] = undefined;

/**
 * @member {module:model/DeviceBrand} Brand
 */
DescribeDeviceResponse.prototype['Brand'] = undefined;

/**
 * @member {Date} CreatedTime
 */
DescribeDeviceResponse.prototype['CreatedTime'] = undefined;

/**
 * @member {module:model/DescribeDeviceResponseCurrentNetworkingStatus} CurrentNetworkingStatus
 */
DescribeDeviceResponse.prototype['CurrentNetworkingStatus'] = undefined;

/**
 * @member {String} CurrentSoftware
 */
DescribeDeviceResponse.prototype['CurrentSoftware'] = undefined;

/**
 * @member {String} Description
 */
DescribeDeviceResponse.prototype['Description'] = undefined;

/**
 * @member {module:model/DeviceAggregatedStatus} DeviceAggregatedStatus
 */
DescribeDeviceResponse.prototype['DeviceAggregatedStatus'] = undefined;

/**
 * @member {module:model/DeviceConnectionStatus} DeviceConnectionStatus
 */
DescribeDeviceResponse.prototype['DeviceConnectionStatus'] = undefined;

/**
 * @member {String} DeviceId
 */
DescribeDeviceResponse.prototype['DeviceId'] = undefined;

/**
 * @member {String} LatestAlternateSoftware
 */
DescribeDeviceResponse.prototype['LatestAlternateSoftware'] = undefined;

/**
 * @member {module:model/DescribeDeviceResponseLatestDeviceJob} LatestDeviceJob
 */
DescribeDeviceResponse.prototype['LatestDeviceJob'] = undefined;

/**
 * @member {String} LatestSoftware
 */
DescribeDeviceResponse.prototype['LatestSoftware'] = undefined;

/**
 * @member {Date} LeaseExpirationTime
 */
DescribeDeviceResponse.prototype['LeaseExpirationTime'] = undefined;

/**
 * @member {String} Name
 */
DescribeDeviceResponse.prototype['Name'] = undefined;

/**
 * @member {module:model/DescribeDeviceResponseNetworkingConfiguration} NetworkingConfiguration
 */
DescribeDeviceResponse.prototype['NetworkingConfiguration'] = undefined;

/**
 * @member {module:model/DeviceStatus} ProvisioningStatus
 */
DescribeDeviceResponse.prototype['ProvisioningStatus'] = undefined;

/**
 * @member {String} SerialNumber
 */
DescribeDeviceResponse.prototype['SerialNumber'] = undefined;

/**
 * @member {Object} Tags
 */
DescribeDeviceResponse.prototype['Tags'] = undefined;

/**
 * @member {module:model/DeviceType} Type
 */
DescribeDeviceResponse.prototype['Type'] = undefined;






export default DescribeDeviceResponse;

